void sub_19257B268(_Unwind_Exception *a1)
{
  void *v1;

  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19257B27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    v28 = a21;
    if (!a21)
    {
LABEL_3:
      v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19257B318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257B2F4);
  }
  JUMPOUT(0x19257B2C4);
}

void sub_19257B328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257B304);
  }
  JUMPOUT(0x19257B2CCLL);
}

void sub_19257B338()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19257B2DCLL);
  }
  JUMPOUT(0x19257B2D4);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        v10 = __p;
      }
      else {
        v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257B5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator-=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257B75C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257B770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257B768);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        v9 = __p;
      }
      else {
        v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19257B9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        v9 = __p;
      }
      else {
        v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19257BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator*=<unsigned char>(void *a1, void *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator*<unsigned char>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(void *a1, void *a2)
{
  v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) *= *(unsigned char *)(*a2 + v45);
                v42 = (void *)a1[5];
                v46 += v42[2];
                v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              v42 = (void *)a1[5];
              v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          v42 = (void *)a1[5];
          v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) *= *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          v75 = (uint64_t *)(v65 + v74 * 8);
          v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) *= *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      v60 = (uint64_t *)(v50 + v59 * 8);
      v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) *= *(unsigned char *)(*a2 + v33);
            v30 = (void *)a1[5];
            v34 += v30[1];
            v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          v30 = (void *)a1[5];
          v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19257C51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      v30 = 0;
      v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        v31 = v27;
        memcpy(v26, v24, v25);
        v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_19257C8A0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19257C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19257C950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257C92CLL);
  }
  JUMPOUT(0x19257C8FCLL);
}

void sub_19257C960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257C93CLL);
  }
  JUMPOUT(0x19257C904);
}

void sub_19257C970()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19257C914);
  }
  JUMPOUT(0x19257C90CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257CC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257CD94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257CDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257CDA0);
}

uint64_t *nitro::ndarray<int>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  uint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<int>::operator*<unsigned char>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v185 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v84 = 0;
    uint64_t v85 = a2[8];
    uint64_t v86 = a1[8];
    unint64_t v87 = v9[1];
    v88 = (uint64_t *)a1[5];
    v181 = (uint64_t *)a2[5];
    uint64_t v183 = *v181;
    uint64_t v184 = *v88;
    uint64_t v186 = 4 * *v88;
    uint64_t v180 = 4 * v86;
    v89 = (int32x4_t *)(v18 + 4 * v86);
    uint64_t v182 = v86;
    while (!v87)
    {
LABEL_64:
      v86 += v184;
      v85 += v183;
      ++v84;
      v89 = (int32x4_t *)((char *)v89 + v186);
      if (v84 == v185) {
        return;
      }
    }
    uint64_t v90 = 0;
    unint64_t v91 = v9[2];
    uint64_t v92 = *a2;
    uint64_t v93 = a2[5];
    uint64_t v94 = v88[1];
    uint64_t v95 = 4 * v94;
    uint64_t v96 = v181[1];
    unint64_t v188 = v91 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v97 = v91 & 0xFFFFFFFFFFFFFFF8;
    v98 = v89;
    uint64_t v99 = *a2;
    uint64_t v100 = v85;
    uint64_t v101 = v86;
    while (!v91)
    {
LABEL_67:
      v101 += v94;
      v100 += v96;
      ++v90;
      v99 += v96;
      v98 = (int32x4_t *)((char *)v98 + v95);
      if (v90 == v87) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v88[2];
    uint64_t v103 = *(void *)(v93 + 16);
    if (v91 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v180 + v186 * v84 + v95 * v90 < v92 + v91 + v85 + v96 * v90
         ? (BOOL v105 = v92 + v100 >= v18 + v186 * v84 + 4 * (v182 + v91) + v95 * v90)
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v114 = 0;
      uint64_t v107 = v100;
      uint64_t v111 = v101;
      goto LABEL_87;
    }
    if (v91 >= 0x10)
    {
      v119 = v98;
      uint64_t v120 = v99;
      unint64_t v121 = v91 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v122 = *(int8x16_t *)(v120 + v85);
        int32x4_t v123 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_192DAD400);
        int32x4_t v124 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_192DAD410);
        int32x4_t v125 = (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_192DAD3E0);
        a7 = (int8x16_t)vmulq_s32(v119[1], (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_192DAD3F0));
        int32x4_t v126 = vmulq_s32(*v119, v125);
        int32x4_t v127 = vmulq_s32(v119[3], v124);
        v119[2] = vmulq_s32(v119[2], v123);
        v119[3] = v127;
        int32x4_t *v119 = v126;
        v119[1] = (int32x4_t)a7;
        v119 += 4;
        v120 += 16;
        v121 -= 16;
      }
      while (v121);
      if (v91 == v188) {
        goto LABEL_67;
      }
      unint64_t v106 = v91 & 0xFFFFFFFFFFFFFFF0;
      if ((v91 & 8) == 0)
      {
        uint64_t v111 = v101 + v188 * v102;
        unint64_t v114 = v91 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v107 = v100 + v188 * v103;
LABEL_87:
        unint64_t v115 = v91 - v114;
        v116 = (unsigned __int8 *)(v92 + v107);
        uint64_t v117 = 4 * v102;
        v118 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *v118 *= *v116;
          v116 += v103;
          v118 = (_DWORD *)((char *)v118 + v117);
          --v115;
        }
        while (v115);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v100 + v97 * v103;
    unint64_t v108 = v106 - (v91 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v109 = v85 + v106;
    uint64_t v110 = 4 * v106;
    uint64_t v111 = v101 + v97 * v102;
    do
    {
      a7.i64[0] = *(void *)(v99 + v109);
      v112 = (int8x16_t *)&v98->i8[v110];
      int32x4_t v113 = (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = (int8x16_t)vmulq_s32(*(int32x4_t *)((char *)&v98[1] + v110), (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0));
      *(int32x4_t *)v112 = vmulq_s32(*(int32x4_t *)((char *)v98 + v110), v113);
      v112[1] = a7;
      v109 += 8;
      v110 += 32;
      v108 += 8;
    }
    while (v108);
    unint64_t v114 = v91 & 0xFFFFFFFFFFFFFFF8;
    if (v91 == v97) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    v47 = (uint64_t *)a2[5];
    unint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    v55 = (int32x4_t *)(v18 + 4 * v44);
    uint64_t v56 = v18 + 4 * (v44 + v45);
    v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 = (int32x4_t *)((char *)v57 + v51);
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || ((unint64_t)v55->u64 + v51 * v42 < v46 + v52 + v50 * v42
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        int32x4_t v79 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400);
        int32x4_t v80 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410);
        int32x4_t v81 = (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0);
        a7 = (int8x16_t)vmulq_s32(v75[1], (int32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0));
        int32x4_t v82 = vmulq_s32(*v75, v81);
        int32x4_t v83 = vmulq_s32(v75[3], v80);
        v75[2] = vmulq_s32(v75[2], v79);
        v75[3] = v83;
        int32x4_t *v75 = v82;
        v75[1] = (int32x4_t)a7;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        uint64_t v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          *v74 *= *v72;
          v72 += v59;
          uint64_t v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      a7.i64[0] = *(void *)(v65 + v43);
      uint64_t v68 = (int8x16_t *)&v57->i8[v66];
      int32x4_t v69 = (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = (int8x16_t)vmulq_s32(*(int32x4_t *)((char *)&v57[1] + v66), (int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0));
      *(int32x4_t *)uint64_t v68 = vmulq_s32(*(int32x4_t *)((char *)v57 + v66), v69);
      v68[1] = a7;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v128 = operator new(v17);
    bzero(v128, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v129 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v130 = 1;
    }
    else {
      unint64_t v130 = v17 >> 3;
    }
    uint64_t v131 = a2[5];
    uint64_t v132 = a2[8];
    uint64_t v133 = v130 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v134 = a1[5];
    while (v130 >= 2)
    {
      uint64_t v137 = 0;
      uint64_t v138 = 0;
      uint64_t v139 = v130 & 0x1FFFFFFFFFFFFFFELL;
      v140 = (void *)(v134 + 8);
      v141 = v128 + 1;
      do
      {
        v137 += *(v140 - 1) * *(v141 - 1);
        v138 += *v140 * *v141;
        v141 += 2;
        v140 += 2;
        v139 -= 2;
      }
      while (v139);
      uint64_t v135 = v138 + v137;
      uint64_t v136 = v130 & 0x1FFFFFFFFFFFFFFELL;
      if (v130 != v133) {
        goto LABEL_105;
      }
LABEL_107:
      if (v130 < 2)
      {
        uint64_t v149 = 0;
        uint64_t v150 = 0;
LABEL_112:
        unint64_t v156 = v130 - v150;
        uint64_t v157 = v150;
        v158 = (uint64_t *)(v131 + 8 * v150);
        v159 = &v128[v157];
        do
        {
          uint64_t v161 = *v159++;
          uint64_t v160 = v161;
          uint64_t v162 = *v158++;
          v149 += v162 * v160;
          --v156;
        }
        while (v156);
        goto LABEL_114;
      }
      uint64_t v151 = 0;
      uint64_t v152 = 0;
      uint64_t v153 = v130 & 0x1FFFFFFFFFFFFFFELL;
      v154 = (void *)(v131 + 8);
      v155 = v128 + 1;
      do
      {
        v151 += *(v154 - 1) * *(v155 - 1);
        v152 += *v154 * *v155;
        v155 += 2;
        v154 += 2;
        v153 -= 2;
      }
      while (v153);
      uint64_t v149 = v152 + v151;
      uint64_t v150 = v130 & 0x1FFFFFFFFFFFFFFELL;
      if (v130 != v133) {
        goto LABEL_112;
      }
LABEL_114:
      *(_DWORD *)(v18 + 4 * v135) *= *(unsigned __int8 *)(v129 + v132 + v149);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v163 = (v17 >> 3) + 1;
        int v164 = v17 >> 3;
        while (1)
        {
          uint64_t v165 = (v163 - 2);
          unint64_t v166 = v128[v165] + 1;
          v128[v165] = v166;
          if (v166 < v9[v165]) {
            break;
          }
          v128[(v163 - 2)] = 0;
          --v164;
          if ((unint64_t)--v163 <= 1) {
            goto LABEL_120;
          }
        }
        if (v164 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v128);
      return;
    }
    uint64_t v135 = 0;
    uint64_t v136 = 0;
LABEL_105:
    unint64_t v142 = v130 - v136;
    uint64_t v143 = v136;
    v144 = (uint64_t *)(v134 + 8 * v136);
    v145 = &v128[v143];
    do
    {
      uint64_t v147 = *v145++;
      uint64_t v146 = v147;
      uint64_t v148 = *v144++;
      v135 += v148 * v146;
      --v142;
    }
    while (v142);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v173 = (int8x16_t *)(v31 + v29);
    v174 = (int32x4_t *)(v18 + 4 * v30);
    a5.i64[1] = 0xFFFFFF03FFFFFF02;
    unint64_t v175 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v176 = *v173++;
      int32x4_t v177 = vmulq_s32(v174[1], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_192DAD3F0));
      int32x4_t v178 = vmulq_s32(*v174, (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_192DAD3E0));
      int32x4_t v179 = vmulq_s32(v174[3], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_192DAD410));
      v174[2] = vmulq_s32(v174[2], (int32x4_t)vqtbl1q_s8(v176, (int8x16_t)xmmword_192DAD400));
      v174[3] = v179;
      int32x4_t *v174 = v178;
      v174[1] = v177;
      v174 += 4;
      v175 -= 16;
    }
    while (v175);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned __int8 *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      uint64_t v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *v40 *= *v38;
        v38 += v33;
        uint64_t v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v167 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v168 = v167 - (v28 & 0xFFFFFFFFFFFFFFF8);
  v169 = (unint64_t *)(v31 + v167 + v29);
  v170 = (int32x4_t *)(v18 + 4 * (v167 + v30));
  do
  {
    unint64_t v171 = *v169++;
    a5.i64[0] = v171;
    int32x4_t v172 = (int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0);
    a5 = (int8x16_t)vmulq_s32(v170[1], (int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0));
    int32x4_t *v170 = vmulq_s32(*v170, v172);
    v170[1] = (int32x4_t)a5;
    v170 += 2;
    v168 += 8;
  }
  while (v168);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19257D8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19257DC38(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19257DC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19257DCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257DCC4);
  }
  JUMPOUT(0x19257DC94);
}

void sub_19257DCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257DCD4);
  }
  JUMPOUT(0x19257DC9CLL);
}

void sub_19257DD08()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19257DCACLL);
  }
  JUMPOUT(0x19257DCA4);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257E12C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257E138);
}

uint64_t *nitro::ndarray<half>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  uint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<half>::operator*<unsigned char>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float _S0, double a4, int8x16_t a5, double a6, int8x16_t _Q4)
{
  uint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v184 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = a2[8];
    uint64_t v87 = a1[8];
    unint64_t v88 = v9[1];
    v89 = (uint64_t *)a1[5];
    uint64_t v180 = (uint64_t *)a2[5];
    uint64_t v182 = *v180;
    uint64_t v183 = *v89;
    uint64_t v185 = 2 * *v89;
    uint64_t v179 = 2 * v87;
    uint64_t v90 = (float16x4_t *)(v18 + 2 * v87);
    uint64_t v181 = v87;
    while (!v88)
    {
LABEL_64:
      v87 += v183;
      v86 += v182;
      ++v85;
      uint64_t v90 = (float16x4_t *)((char *)v90 + v185);
      if (v85 == v184) {
        return;
      }
    }
    uint64_t v91 = 0;
    unint64_t v92 = v9[2];
    uint64_t v93 = *a2;
    uint64_t v94 = a2[5];
    uint64_t v95 = v89[1];
    uint64_t v96 = 2 * v95;
    uint64_t v97 = v180[1];
    unint64_t v187 = v92 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v98 = v92 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v99 = v90;
    uint64_t v100 = *a2;
    uint64_t v101 = v86;
    uint64_t v102 = v87;
    while (!v92)
    {
LABEL_67:
      v102 += v95;
      v101 += v97;
      ++v91;
      v100 += v97;
      uint64_t v99 = (float16x4_t *)((char *)v99 + v96);
      if (v91 == v88) {
        goto LABEL_64;
      }
    }
    uint64_t v103 = v89[2];
    uint64_t v104 = *(void *)(v94 + 16);
    if (v92 < 8
      || (v103 == 1 ? (BOOL v105 = v104 == 1) : (BOOL v105 = 0),
          !v105
       || (v18 + v179 + v185 * v85 + v96 * v91 < v93 + v92 + v86 + v97 * v91
         ? (BOOL v106 = v93 + v101 >= v18 + v185 * v85 + 2 * (v181 + v92) + v96 * v91)
         : (BOOL v106 = 1),
           !v106)))
    {
      unint64_t v113 = 0;
      uint64_t v108 = v101;
      uint64_t v112 = v102;
      goto LABEL_87;
    }
    if (v92 >= 0x10)
    {
      uint64_t v120 = v99;
      uint64_t v121 = v100;
      unint64_t v122 = v92 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v123 = *(int8x16_t *)(v121 + v86);
        uint32x4_t v124 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v125 = (uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v120[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v120[2].i8)));
        *(float16x8_t *)v120->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v125), vcvtq_f32_f16(*v120))), vmulq_f32(vcvtq_f32_u32(v124), vcvt_hight_f32_f16(*(float16x8_t *)v120->i8)));
        *(int8x16_t *)v120[2].i8 = _Q4;
        v120 += 4;
        v121 += 16;
        v122 -= 16;
      }
      while (v122);
      if (v92 == v187) {
        goto LABEL_67;
      }
      unint64_t v107 = v92 & 0xFFFFFFFFFFFFFFF0;
      if ((v92 & 8) == 0)
      {
        uint64_t v112 = v102 + v187 * v103;
        unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v108 = v101 + v187 * v104;
LABEL_87:
        unint64_t v114 = v92 - v113;
        unint64_t v115 = (unsigned __int8 *)(v93 + v108);
        uint64_t v116 = 2 * v103;
        uint64_t v117 = (__int16 *)(v18 + 2 * v112);
        do
        {
          _Q4.i8[0] = *v115;
          _H5 = *v117;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] * _S5;
          __asm { FCVT            H4, S4 }
          *uint64_t v117 = _Q4.i16[0];
          v115 += v104;
          uint64_t v117 = (__int16 *)((char *)v117 + v116);
          --v114;
        }
        while (v114);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v107 = 0;
    }
    uint64_t v108 = v101 + v98 * v104;
    unint64_t v109 = v107 - (v92 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v110 = v86 + v107;
    uint64_t v111 = 2 * v107;
    uint64_t v112 = v102 + v98 * v103;
    do
    {
      _Q4.i64[0] = *(void *)(v100 + v110);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*(float16x4_t *)((char *)v99 + v111)))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)&v99->i8[v111])));
      *(int8x16_t *)&v99->i8[v111] = _Q4;
      v110 += 8;
      v111 += 16;
      v109 += 8;
    }
    while (v109);
    unint64_t v113 = v92 & 0xFFFFFFFFFFFFFFF8;
    if (v92 == v98) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v45 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v46 = 0;
    uint64_t v47 = a2[8];
    uint64_t v48 = a1[8];
    unint64_t v49 = v9[1];
    uint64_t v50 = *a2;
    uint64_t v51 = (uint64_t *)a2[5];
    uint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    uint64_t v54 = *v51;
    uint64_t v55 = 2 * *v52;
    uint64_t v56 = v47 + v49;
    unint64_t v57 = v49 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v58 = v49 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v59 = (float16x4_t *)(v18 + 2 * v48);
    uint64_t v60 = v18 + 2 * (v48 + v49);
    BOOL v61 = v59;
    while (!v49)
    {
LABEL_34:
      v48 += v53;
      v47 += v54;
      ++v46;
      BOOL v61 = (float16x4_t *)((char *)v61 + v55);
      if (v46 == v45) {
        return;
      }
    }
    uint64_t v62 = v52[1];
    uint64_t v63 = v51[1];
    if (v49 < 8
      || (v62 == 1 ? (_ZF = v63 == 1) : (_ZF = 0),
          !_ZF
       || ((unint64_t)v59 + v55 * v46 < v50 + v56 + v54 * v46
         ? (_CF = v50 + v47 >= (unint64_t)(v60 + v55 * v46))
         : (_CF = 1),
           !_CF)))
    {
      unint64_t v72 = 0;
      uint64_t v67 = v47;
      uint64_t v71 = v48;
      goto LABEL_54;
    }
    if (v49 >= 0x10)
    {
      int32x4_t v79 = v61;
      uint64_t v80 = v50;
      unint64_t v81 = v49 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v82 = *(int8x16_t *)(v80 + v47);
        uint32x4_t v83 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3F0);
        uint32x4_t v84 = (uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD3E0);
        _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v79[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v82, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v79[2].i8)));
        *(float16x8_t *)v79->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(v84), vcvtq_f32_f16(*v79))), vmulq_f32(vcvtq_f32_u32(v83), vcvt_hight_f32_f16(*(float16x8_t *)v79->i8)));
        *(int8x16_t *)v79[2].i8 = _Q4;
        v79 += 4;
        v80 += 16;
        v81 -= 16;
      }
      while (v81);
      if (v49 == v57) {
        goto LABEL_34;
      }
      unint64_t v66 = v49 & 0xFFFFFFFFFFFFFFF0;
      if ((v49 & 8) == 0)
      {
        uint64_t v71 = v48 + v57 * v62;
        unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v67 = v47 + v57 * v63;
LABEL_54:
        unint64_t v73 = v49 - v72;
        uint64_t v74 = (unsigned __int8 *)(v50 + v67);
        uint64_t v75 = 2 * v62;
        uint64_t v76 = (__int16 *)(v18 + 2 * v71);
        do
        {
          _Q4.i8[0] = *v74;
          _H5 = *v76;
          __asm { FCVT            S5, H5 }
          *(float *)_Q4.i32 = (float)_Q4.u32[0] * _S5;
          __asm { FCVT            H4, S4 }
          __int16 *v76 = _Q4.i16[0];
          v74 += v63;
          uint64_t v76 = (__int16 *)((char *)v76 + v75);
          --v73;
        }
        while (v73);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v66 = 0;
    }
    uint64_t v67 = v47 + v58 * v63;
    unint64_t v68 = v66 - (v49 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v69 = v50 + v66;
    uint64_t v70 = 2 * v66;
    uint64_t v71 = v48 + v58 * v62;
    do
    {
      _Q4.i64[0] = *(void *)(v69 + v47);
      _Q4 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*(float16x4_t *)((char *)v61 + v70)))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(_Q4, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)&v61->i8[v70])));
      *(int8x16_t *)&v61->i8[v70] = _Q4;
      v69 += 8;
      v70 += 16;
      v68 += 8;
    }
    while (v68);
    unint64_t v72 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (v49 == v58) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int32x4_t v126 = operator new(v17);
    bzero(v126, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v128 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v129 = 1;
    }
    else {
      unint64_t v129 = v17 >> 3;
    }
    uint64_t v130 = a2[5];
    uint64_t v131 = a2[8];
    uint64_t v132 = v129 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v133 = a1[5];
    while (v129 >= 2)
    {
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v129 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v139 = (void *)(v133 + 8);
      v140 = v126 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_105;
      }
LABEL_107:
      if (v129 < 2)
      {
        uint64_t v148 = 0;
        uint64_t v149 = 0;
LABEL_112:
        unint64_t v155 = v129 - v149;
        uint64_t v156 = v149;
        uint64_t v157 = (uint64_t *)(v130 + 8 * v149);
        v158 = &v126[v156];
        do
        {
          uint64_t v160 = *v158++;
          uint64_t v159 = v160;
          uint64_t v161 = *v157++;
          v148 += v161 * v159;
          --v155;
        }
        while (v155);
        goto LABEL_114;
      }
      uint64_t v150 = 0;
      uint64_t v151 = 0;
      uint64_t v152 = v129 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v153 = (void *)(v130 + 8);
      v154 = v126 + 1;
      do
      {
        v150 += *(v153 - 1) * *(v154 - 1);
        v151 += *v153 * *v154;
        v154 += 2;
        v153 += 2;
        v152 -= 2;
      }
      while (v152);
      uint64_t v148 = v151 + v150;
      uint64_t v149 = v129 & 0x1FFFFFFFFFFFFFFELL;
      if (v129 != v132) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(_S0) = *(unsigned char *)(v128 + v131 + v148);
      uint64_t v162 = 2 * v134;
      _H1 = *(_WORD *)(v18 + v162);
      __asm { FCVT            S1, H1 }
      _S0 = (float)LODWORD(_S0) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v18 + v162) = LOWORD(_S0);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v165 = (v17 >> 3) + 1;
        int v166 = v17 >> 3;
        while (1)
        {
          uint64_t v167 = (v165 - 2);
          unint64_t v168 = v126[v167] + 1;
          v126[v167] = v168;
          if (v168 < v9[v167]) {
            break;
          }
          v126[(v165 - 2)] = 0;
          --v166;
          if ((unint64_t)--v165 <= 1) {
            goto LABEL_120;
          }
        }
        if (v166 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v126);
      return;
    }
    uint64_t v134 = 0;
    uint64_t v135 = 0;
LABEL_105:
    unint64_t v141 = v129 - v135;
    uint64_t v142 = v135;
    uint64_t v143 = (uint64_t *)(v133 + 8 * v135);
    v144 = &v126[v142];
    do
    {
      uint64_t v146 = *v144++;
      uint64_t v145 = v146;
      uint64_t v147 = *v143++;
      v134 += v147 * v145;
      --v141;
    }
    while (v141);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 2 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 2 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    v174 = (int8x16_t *)(v31 + v29);
    unint64_t v175 = (float16x4_t *)(v18 + 2 * v30);
    _S0 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v176 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v177 = *v174++;
      float16x8_t v178 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD400)), vcvtq_f32_f16(v175[2]))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD410)), vcvt_hight_f32_f16(*(float16x8_t *)v175[2].i8)));
      *(float16x8_t *)v175->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*v175))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v177, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)v175->i8)));
      *(float16x8_t *)v175[2].i8 = v178;
      v175 += 4;
      v176 -= 16;
    }
    while (v176);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 2 * v32;
      uint64_t v40 = (__int16 *)(v18 + 2 * v36);
      do
      {
        LOBYTE(_S0) = *v38;
        _H1 = *v40;
        __asm { FCVT            S1, H1 }
        _S0 = (float)LODWORD(_S0) * _S1;
        __asm { FCVT            H0, S0 }
        *uint64_t v40 = LOWORD(_S0);
        v38 += v33;
        uint64_t v40 = (__int16 *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v169 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v170 = v169 - (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v171 = (unint64_t *)(v31 + v169 + v29);
  int32x4_t v172 = (float16x4_t *)(v18 + 2 * (v169 + v30));
  _S0 = NAN;
  do
  {
    unint64_t v173 = *v171++;
    a5.i64[0] = v173;
    a5 = (int8x16_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)), vcvtq_f32_f16(*v172))), vmulq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0)), vcvt_hight_f32_f16(*(float16x8_t *)v172->i8)));
    *(int8x16_t *)v172->i8 = a5;
    v172 += 2;
    v170 += 8;
  }
  while (v170);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19257ED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19257F0B4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19257F0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19257F164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19257F140);
  }
  JUMPOUT(0x19257F110);
}

void sub_19257F174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19257F150);
  }
  JUMPOUT(0x19257F118);
}

void sub_19257F184()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19257F128);
  }
  JUMPOUT(0x19257F120);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19257F420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19257F5A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19257F5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19257F5B4);
}

uint64_t *nitro::ndarray<float>::operator*=<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = (char *)a1[2];
  uint64_t v9 = (char *)a1[3];
  uint64_t v10 = v9 - v8;
  if (v9 == v8 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v10 - 8) < 8)
  {
    uint64_t v11 = 1;
    uint64_t v12 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v18 = *(void *)v12;
      v12 += 8;
      v11 *= v18;
    }
    while (v12 != v9);
    goto LABEL_9;
  }
  unint64_t v13 = ((unint64_t)(v10 - 8) >> 3) + 1;
  uint64_t v12 = &v8[8 * (v13 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v8 + 8;
  uint64_t v15 = 1;
  uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v17 = 1;
  do
  {
    v15 *= *(v14 - 1);
    v17 *= *v14;
    v14 += 2;
    v16 -= 2;
  }
  while (v16);
  uint64_t v11 = v17 * v15;
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v11)
  {
    unint64_t v19 = v10 >> 3;
    uint64_t v20 = (void *)a2[2];
    if (v19 != (a2[3] - (uint64_t)v20) >> 3) {
      goto LABEL_19;
    }
    uint64_t v21 = v19 <= 1 ? 1 : v19;
    if (*(void *)v8 != *v20) {
      goto LABEL_19;
    }
    uint64_t v22 = 1;
    do
    {
      unint64_t v23 = v22;
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *(void *)&v8[8 * v22];
      uint64_t v25 = v20[v22++];
    }
    while (v24 == v25);
    if (v23 < v19) {
LABEL_19:
    }
      nitro::ndarray<float>::operator*<unsigned char>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v192 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v82 = 0;
    uint64_t v83 = a2[8];
    uint64_t v84 = a1[8];
    unint64_t v85 = v9[1];
    uint64_t v86 = (uint64_t *)a1[5];
    unint64_t v188 = (uint64_t *)a2[5];
    uint64_t v190 = *v188;
    uint64_t v191 = *v86;
    uint64_t v194 = 4 * *v86;
    uint64_t v187 = 4 * v84;
    uint64_t v87 = (float32x4_t *)(v18 + 4 * v84);
    uint64_t v189 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v191;
      v83 += v190;
      ++v82;
      uint64_t v87 = (float32x4_t *)((char *)v87 + v194);
      if (v82 == v192) {
        return;
      }
    }
    uint64_t v88 = 0;
    uint64_t v89 = v187 + v194 * v82;
    unint64_t v90 = v9[2];
    uint64_t v91 = *a2;
    uint64_t v92 = a2[5];
    uint64_t v93 = v86[1];
    uint64_t v94 = 4 * v93;
    uint64_t v95 = v194 * v82 + 4 * (v189 + v90);
    uint64_t v96 = v188[1];
    uint64_t v97 = v90 + v83;
    unint64_t v196 = v90 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v197 = v90 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v193 = v82;
    unint64_t v98 = v87;
    uint64_t v99 = *a2;
    uint64_t v100 = v83;
    uint64_t v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      unint64_t v98 = (float32x4_t *)((char *)v98 + v94);
      if (v88 == v85) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v86[2];
    uint64_t v103 = *(void *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (BOOL v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v121 = 0;
      uint64_t v114 = v100;
      uint64_t v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      int32x4_t v126 = v98;
      uint64_t v127 = v99;
      unint64_t v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)(v127 + v83);
        float32x4_t v130 = *v126;
        float32x4_t v131 = vmulq_f32(v126[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v132 = vmulq_f32(v126[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD410)));
        v126[2] = vmulq_f32(v126[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD400)));
        v126[3] = v132;
        a7 = (int8x16_t)vmulq_f32(v130, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3E0)));
        *int32x4_t v126 = (float32x4_t)a7;
        v126[1] = v131;
        v126 += 4;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v197) {
        goto LABEL_67;
      }
      unint64_t v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        uint64_t v118 = v101 + v197 * v102;
        unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v114 = v100 + v197 * v103;
LABEL_87:
        unint64_t v122 = v90 - v121;
        int8x16_t v123 = (unsigned __int8 *)(v91 + v114);
        uint64_t v124 = 4 * v102;
        uint32x4_t v125 = (float *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = *v125 * (float)a7.u32[0];
          *uint32x4_t v125 = *(float *)a7.i32;
          v123 += v103;
          uint32x4_t v125 = (float *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v84;
    uint64_t v108 = v87;
    uint64_t v109 = v97;
    uint64_t v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v95;
    uint64_t v113 = v89;
    uint64_t v114 = v100 + v196 * v103;
    unint64_t v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = v83 + v106;
    uint64_t v117 = 4 * v106;
    uint64_t v118 = v101 + v196 * v102;
    do
    {
      uint64_t v119 = (uint64_t)v98 + v117;
      a7.i64[0] = *(void *)(v99 + v116);
      float32x4_t v120 = vmulq_f32(*(float32x4_t *)((char *)v98 + v117 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vmulq_f32(*(float32x4_t *)((char *)v98 + v117), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v119 = a7;
      *(float32x4_t *)(v119 + 16) = v120;
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = v113;
    uint64_t v95 = v112;
    uint64_t v18 = v111;
    uint64_t v9 = v110;
    uint64_t v97 = v109;
    uint64_t v87 = v108;
    uint64_t v84 = v107;
    uint64_t v82 = v193;
    if (v90 == v196) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = (float32x4_t *)(v18 + 4 * v44);
    uint64_t v56 = v18 + 4 * (v44 + v45);
    unint64_t v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      unint64_t v57 = (float32x4_t *)((char *)v57 + v51);
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || ((unint64_t)v55 + v51 * v42 < v46 + v52 + v50 * v42
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      uint64_t v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        float32x4_t v79 = *v75;
        float32x4_t v80 = vmulq_f32(v75[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0)));
        float32x4_t v81 = vmulq_f32(v75[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410)));
        v75[2] = vmulq_f32(v75[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400)));
        v75[3] = v81;
        a7 = (int8x16_t)vmulq_f32(v79, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0)));
        float32x4_t *v75 = (float32x4_t)a7;
        v75[1] = v80;
        v75 += 4;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        unint64_t v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        uint64_t v74 = (float *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = *v74 * (float)a7.u32[0];
          *uint64_t v74 = *(float *)a7.i32;
          v72 += v59;
          uint64_t v74 = (float *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      uint64_t v68 = (uint64_t)v57 + v66;
      a7.i64[0] = *(void *)(v65 + v43);
      float32x4_t v69 = vmulq_f32(*(float32x4_t *)((char *)v57 + v66 + 16), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0)));
      a7 = (int8x16_t)vmulq_f32(*(float32x4_t *)((char *)v57 + v66), vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0)));
      *(int8x16_t *)uint64_t v68 = a7;
      *(float32x4_t *)(v68 + 16) = v69;
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v135 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = v17 >> 3;
    }
    uint64_t v137 = a2[5];
    uint64_t v138 = a2[8];
    uint64_t v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v140 = a1[5];
    while (v136 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v140 + 8);
      uint64_t v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_105;
      }
LABEL_107:
      if (v136 < 2)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
LABEL_112:
        unint64_t v162 = v136 - v156;
        uint64_t v163 = v156;
        int v164 = (uint64_t *)(v137 + 8 * v156);
        uint64_t v165 = &v133[v163];
        do
        {
          uint64_t v167 = *v165++;
          uint64_t v166 = v167;
          uint64_t v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v160 = (void *)(v137 + 8);
      uint64_t v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      uint64_t v155 = v158 + v157;
      uint64_t v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v134) = *(unsigned char *)(v135 + v138 + v155);
      uint64_t v169 = 4 * v141;
      float v134 = *(float *)(v18 + v169) * (float)LODWORD(v134);
      *(float *)(v18 + v169) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v170 = (v17 >> 3) + 1;
        int v171 = v17 >> 3;
        while (1)
        {
          uint64_t v172 = (v170 - 2);
          unint64_t v173 = v133[v172] + 1;
          v133[v172] = v173;
          if (v173 < v9[v172]) {
            break;
          }
          v133[(v170 - 2)] = 0;
          --v171;
          if ((unint64_t)--v170 <= 1) {
            goto LABEL_120;
          }
        }
        if (v171 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    uint64_t v141 = 0;
    uint64_t v142 = 0;
LABEL_105:
    unint64_t v148 = v136 - v142;
    uint64_t v149 = v142;
    uint64_t v150 = (uint64_t *)(v140 + 8 * v142);
    uint64_t v151 = &v133[v149];
    do
    {
      uint64_t v153 = *v151++;
      uint64_t v152 = v153;
      uint64_t v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v180 = (int8x16_t *)(v31 + v29);
    uint64_t v181 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF0FFFFFFF0ELL;
    unint64_t v182 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v183 = *v180++;
      float32x4_t v184 = *v181;
      float32x4_t v185 = vmulq_f32(v181[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3F0)));
      float32x4_t v186 = vmulq_f32(v181[3], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD410)));
      v181[2] = vmulq_f32(v181[2], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD400)));
      v181[3] = v186;
      float32x4_t *v181 = vmulq_f32(v184, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v183, (int8x16_t)xmmword_192DAD3E0)));
      v181[1] = v185;
      v181 += 4;
      v182 -= 16;
    }
    while (v182);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      uint64_t v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = *v40 * (float)LODWORD(a3);
        *uint64_t v40 = a3;
        v38 += v33;
        uint64_t v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v174 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v175 = v174 - (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = (unint64_t *)(v31 + v174 + v29);
  int8x16_t v177 = (float32x4_t *)(v18 + 4 * (v174 + v30));
  a3 = NAN;
  do
  {
    unint64_t v178 = *v176++;
    a5.i64[0] = v178;
    float32x4_t v179 = vmulq_f32(v177[1], vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0)));
    a5 = (int8x16_t)vmulq_f32(*v177, vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0)));
    *int8x16_t v177 = (float32x4_t)a5;
    v177[1] = v179;
    v177 += 2;
    v175 += 8;
  }
  while (v175);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_192580158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<unsigned char>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_1925804DC(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925804F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258058C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192580568);
  }
  JUMPOUT(0x192580538);
}

void sub_19258059C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192580578);
  }
  JUMPOUT(0x192580540);
}

void sub_1925805AC()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192580550);
  }
  JUMPOUT(0x192580548);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192580848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925809D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925809E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925809DCLL);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    size_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192580C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator*=<int>(void *a1, void *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (uint64_t)(a2[3] - (void)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator*<int>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(void *a1, void *a2)
{
  v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  unint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) *= *(_DWORD *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) *= *(unsigned char *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          uint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) *= *(unsigned char *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      BOOL v60 = (uint64_t *)(v50 + v59 * 8);
      BOOL v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) *= *(_DWORD *)(*a2 + 4 * v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192581410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<int>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  uint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v26 = (char *)operator new(v23 - v24);
        unint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_192581794(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925817A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192581844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192581820);
  }
  JUMPOUT(0x1925817F0);
}

void sub_192581854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192581830);
  }
  JUMPOUT(0x1925817F8);
}

void sub_192581864()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192581808);
  }
  JUMPOUT(0x192581800);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192581B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192581C88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192581C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192581C94);
}

uint64_t *nitro::ndarray<int>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator*<int>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(a1, a2);
  }
  return a1;
}

int32x4_t nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    uint64_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (int32x4_t *)(*a2 + v77);
    uint64_t v89 = (int32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (int32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (int32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        unint64_t v98 = (_DWORD *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (_DWORD *)(v160 + 4 * v96);
        do
        {
          *v101 *= *v98;
          unint64_t v98 = (_DWORD *)((char *)v98 + v99);
          uint64_t v101 = (_DWORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        BOOL v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          int32x4_t result = vmulq_s32(v104[-1], v103[-1]);
          int32x4_t v106 = vmulq_s32(*v104, *v103);
          v104[-1] = result;
          *BOOL v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v36 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v37 = 0;
    uint64_t v38 = a2[8];
    uint64_t v39 = a1[8];
    unint64_t v40 = v4[1];
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    uint64_t v45 = 4 * *v42;
    uint64_t v46 = 4 * *v41;
    unint64_t v47 = v40 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v48 = *a2;
    uint64_t v49 = 4 * v39 + v160 + 16;
    uint64_t v50 = 4 * v38 + *a2 + 16;
    uint64_t v51 = v160 + 4 * v39;
    uint64_t v52 = v160 + 4 * v39 + 4 * v40;
    uint64_t v53 = *a2 + 4 * v38;
    uint64_t v54 = *a2 + 4 * v38 + 4 * v40;
    while (!v40)
    {
LABEL_34:
      v39 += v43;
      v38 += v44;
      ++v37;
      v49 += v45;
      v50 += v46;
      if (v37 == v36) {
        return result;
      }
    }
    uint64_t v55 = v42[1];
    uint64_t v56 = v41[1];
    if (v40 >= 8)
    {
      unint64_t v57 = 0;
      if (v55 != 1) {
        goto LABEL_38;
      }
      uint64_t v58 = v38;
      uint64_t v59 = v39;
      if (v56 != 1)
      {
LABEL_39:
        unint64_t v60 = v40 - v57;
        BOOL v61 = (_DWORD *)(v48 + 4 * v58);
        uint64_t v62 = 4 * v56;
        uint64_t v63 = 4 * v55;
        uint64_t v64 = (_DWORD *)(v160 + 4 * v59);
        do
        {
          *v64 *= *v61;
          BOOL v61 = (_DWORD *)((char *)v61 + v62);
          uint64_t v64 = (_DWORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
        goto LABEL_34;
      }
      if (v51 + v45 * v37 >= (unint64_t)(v54 + v46 * v37)
        || v53 + v46 * v37 >= (unint64_t)(v52 + v45 * v37))
      {
        uint64_t v58 = v38 + v47;
        uint64_t v66 = (int32x4_t *)v50;
        unint64_t v67 = (int32x4_t *)v49;
        unint64_t v68 = v40 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v59 = v39 + v47;
        do
        {
          int32x4_t result = vmulq_s32(v67[-1], v66[-1]);
          int32x4_t v70 = vmulq_s32(*v67, *v66);
          v67[-1] = result;
          *unint64_t v67 = v70;
          v67 += 2;
          v66 += 2;
          v68 -= 8;
        }
        while (v68);
        unint64_t v57 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v40 == v47) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v57 = 0;
LABEL_38:
    uint64_t v58 = v38;
    uint64_t v59 = v39;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      float32x4_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      float v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(_DWORD *)(v160 + 4 * v114) *= *(_DWORD *)(v108 + 4 * (v111 + v128));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    int8x16_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    unint64_t v32 = (_DWORD *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (_DWORD *)(v160 + 4 * v30);
    do
    {
      *v35 *= *v32;
      unint64_t v32 = (_DWORD *)((char *)v32 + v33);
      unint64_t v35 = (_DWORD *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (int32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (int32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t result = vmulq_s32(v147[-1], v146[-1]);
    int32x4_t v149 = vmulq_s32(*v147, *v146);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_19258263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        unint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_1925829C0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925829D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192582A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192582A4CLL);
  }
  JUMPOUT(0x192582A1CLL);
}

void sub_192582A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192582A5CLL);
  }
  JUMPOUT(0x192582A24);
}

void sub_192582A90()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192582A34);
  }
  JUMPOUT(0x192582A2CLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192582D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192582EB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192582EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192582EC0);
}

uint64_t *nitro::ndarray<half>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator*<int>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v167 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v75 = 0;
    uint64_t v76 = a2[8];
    uint64_t v77 = a1[8];
    unint64_t v78 = v4[1];
    uint64_t v79 = (uint64_t *)a1[5];
    uint64_t v80 = 4 * v76;
    unint64_t v162 = (uint64_t *)a2[5];
    uint64_t v165 = *v162;
    uint64_t v166 = *v79;
    uint64_t v164 = 4 * *v162;
    uint64_t v81 = (float16x4_t *)(v13 + 2 * v77);
    uint64_t v163 = 2 * *v79;
    while (!v78)
    {
LABEL_50:
      v77 += v166;
      v76 += v165;
      ++v75;
      v80 += v164;
      uint64_t v81 = (float16x4_t *)((char *)v81 + v163);
      if (v75 == v167) {
        return;
      }
    }
    uint64_t v82 = 0;
    unint64_t v83 = v4[2];
    uint64_t v84 = *a2;
    uint64_t v85 = a2[5];
    uint64_t v86 = v162[1];
    unint64_t v87 = v83 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v88 = (int32x4_t *)(*a2 + v80);
    uint64_t v89 = v79[1];
    uint64_t v90 = v81;
    uint64_t v91 = v76;
    uint64_t v92 = v77;
    while (1)
    {
      if (v83)
      {
        uint64_t v93 = v79[2];
        uint64_t v94 = *(void *)(v85 + 16);
        if (v83 >= 8 && (v93 == 1 ? (BOOL v95 = v94 == 1) : (BOOL v95 = 0), v95))
        {
          uint64_t v97 = v91 + v87 * v94;
          uint64_t v107 = v90;
          uint64_t v108 = v88;
          unint64_t v109 = v83 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v98 = v92 + v87 * v93;
          do
          {
            int32x4_t v111 = *v108;
            int32x4_t v110 = v108[1];
            v108 += 2;
            *(float16x8_t *)v107->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v111), vcvtq_f32_f16(*v107))), vmulq_f32(vcvtq_f32_s32(v110), vcvt_hight_f32_f16(*(float16x8_t *)v107->i8)));
            v107 += 2;
            v109 -= 8;
          }
          while (v109);
          unint64_t v96 = v83 & 0xFFFFFFFFFFFFFFF8;
          if (v83 == v87) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v96 = 0;
          uint64_t v97 = v91;
          uint64_t v98 = v92;
        }
        unint64_t v99 = v83 - v96;
        uint64_t v100 = (int *)(v84 + 4 * v97);
        uint64_t v101 = 4 * v94;
        uint64_t v102 = 2 * v93;
        uint64_t v103 = (__int16 *)(v13 + 2 * v98);
        do
        {
          _H1 = *v103;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v100 * _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v103 = LOWORD(_S0);
          uint64_t v100 = (int *)((char *)v100 + v101);
          uint64_t v103 = (__int16 *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v89;
      v91 += v86;
      ++v82;
      uint64_t v88 = (int32x4_t *)((char *)v88 + 4 * v86);
      uint64_t v90 = (float16x4_t *)((char *)v90 + 2 * v89);
      if (v82 == v78) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    unint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *a2 + 4 * v43;
    uint64_t v51 = *v47;
    unint64_t v52 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v53 = 4 * *v47;
    uint64_t v54 = (float16x4_t *)(v13 + 2 * v44);
    uint64_t v55 = 2 * *v48;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 8 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v52 * v57;
          int32x4_t v70 = v54;
          uint64_t v71 = (int32x4_t *)v50;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v61 = v44 + v52 * v56;
          do
          {
            int32x4_t v74 = *v71;
            int32x4_t v73 = v71[1];
            v71 += 2;
            *(float16x8_t *)v70->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v74), vcvtq_f32_f16(*v70))), vmulq_f32(vcvtq_f32_s32(v73), vcvt_hight_f32_f16(*(float16x8_t *)v70->i8)));
            v70 += 2;
            v72 -= 8;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF8;
          if (v45 == v52) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        uint64_t v63 = (int *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = (float)*v63 * _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          uint64_t v63 = (int *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v51;
      ++v42;
      v50 += v53;
      uint64_t v54 = (float16x4_t *)((char *)v54 + v55);
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v112 = operator new(v12);
    bzero(v112, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v113 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v114 = 1;
    }
    else {
      unint64_t v114 = v12 >> 3;
    }
    uint64_t v115 = a2[5];
    uint64_t v116 = a2[8];
    uint64_t v117 = v114 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v118 = a1[5];
    while (v114 >= 2)
    {
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v114 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v118 + 8);
      uint64_t v125 = v112 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v114 & 0x1FFFFFFFFFFFFFFELL;
      if (v114 != v117) {
        goto LABEL_78;
      }
LABEL_80:
      if (v114 < 2)
      {
        uint64_t v133 = 0;
        uint64_t v134 = 0;
LABEL_85:
        unint64_t v140 = v114 - v134;
        uint64_t v141 = v134;
        uint64_t v142 = (uint64_t *)(v115 + 8 * v134);
        int v143 = &v112[v141];
        do
        {
          uint64_t v145 = *v143++;
          uint64_t v144 = v145;
          uint64_t v146 = *v142++;
          v133 += v146 * v144;
          --v140;
        }
        while (v140);
        goto LABEL_87;
      }
      uint64_t v135 = 0;
      uint64_t v136 = 0;
      uint64_t v137 = v114 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v138 = (void *)(v115 + 8);
      uint64_t v139 = v112 + 1;
      do
      {
        v135 += *(v138 - 1) * *(v139 - 1);
        v136 += *v138 * *v139;
        v139 += 2;
        v138 += 2;
        v137 -= 2;
      }
      while (v137);
      uint64_t v133 = v136 + v135;
      uint64_t v134 = v114 & 0x1FFFFFFFFFFFFFFELL;
      if (v114 != v117) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v147 = 2 * v119;
      _H1 = *(_WORD *)(v13 + v147);
      __asm { FCVT            S1, H1 }
      _S0 = (float)*(int *)(v113 + 4 * (v116 + v133)) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v147) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v151 = (v12 >> 3) + 1;
        int v152 = v12 >> 3;
        while (1)
        {
          uint64_t v153 = (v151 - 2);
          unint64_t v154 = v112[v153] + 1;
          v112[v153] = v154;
          if (v154 < v4[v153]) {
            break;
          }
          v112[(v151 - 2)] = 0;
          --v152;
          if ((unint64_t)--v151 <= 1) {
            goto LABEL_93;
          }
        }
        if (v152 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v112);
      return;
    }
    uint64_t v119 = 0;
    uint64_t v120 = 0;
LABEL_78:
    unint64_t v126 = v114 - v120;
    uint64_t v127 = v120;
    uint64_t v128 = (uint64_t *)(v118 + 8 * v120);
    uint64_t v129 = &v112[v127];
    do
    {
      uint64_t v131 = *v129++;
      uint64_t v130 = v131;
      uint64_t v132 = *v128++;
      v119 += v132 * v130;
      --v126;
    }
    while (v126);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    uint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = (float)*v31 * _S1;
      __asm { FCVT            H0, S0 }
      *uint64_t v34 = LOWORD(_S0);
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v155 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v156 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v157 = (int32x4_t *)(v26 + 4 * v24);
  uint64_t v158 = (float16x4_t *)(v13 + 2 * v25);
  unint64_t v159 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v161 = *v157;
    int32x4_t v160 = v157[1];
    v157 += 2;
    *(float16x8_t *)v158->i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_s32(v161), vcvtq_f32_f16(*v158))), vmulq_f32(vcvtq_f32_s32(v160), vcvt_hight_f32_f16(*(float16x8_t *)v158->i8)));
    v158 += 2;
    v159 -= 8;
  }
  while (v159);
  uint64_t v24 = v155;
  uint64_t v25 = v156;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192583784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        unint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_192583B08(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192583B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192583BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192583B94);
  }
  JUMPOUT(0x192583B64);
}

void sub_192583BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192583BA4);
  }
  JUMPOUT(0x192583B6CLL);
}

void sub_192583BD8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192583B7CLL);
  }
  JUMPOUT(0x192583B74);
}

void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192583E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192583FFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192584010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192584008);
}

uint64_t *nitro::ndarray<float>::operator*=<int>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator*<int>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    int v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (int32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (float32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          BOOL v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            float32x4_t v97 = vmulq_f32(*v95, vcvtq_f32_s32(*v94));
            v95[-1] = vmulq_f32(v95[-1], vcvtq_f32_s32(v94[-1]));
            *BOOL v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (int *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (float *)(v13 + 4 * v88);
        do
        {
          *uint64_t v93 = *v93 * (float)*v90;
          uint64_t v90 = (int *)((char *)v90 + v91);
          uint64_t v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      unint64_t v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          uint64_t v61 = (int32x4_t *)v48;
          unint64_t v62 = (float32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float32x4_t v64 = vmulq_f32(*v62, vcvtq_f32_s32(*v61));
            v62[-1] = vmulq_f32(v62[-1], vcvtq_f32_s32(v61[-1]));
            *unint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (int *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (float *)(v13 + 4 * v55);
        do
        {
          float *v60 = *v60 * (float)*v57;
          uint64_t v57 = (int *)((char *)v57 + v58);
          uint64_t v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      int32x4_t v110 = (void *)(v104 + 8);
      int32x4_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(float *)(v13 + 4 * v105) = *(float *)(v13 + 4 * v105) * (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    unint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    uint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = *v34 * (float)*v31;
      unint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  unint64_t v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v142 = vmulq_f32(*v140, vcvtq_f32_s32(*v139));
    v140[-1] = vmulq_f32(v140[-1], vcvtq_f32_s32(v139[-1]));
    float32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925848AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<int>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_192584C30(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192584C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192584CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192584CBCLL);
  }
  JUMPOUT(0x192584C8CLL);
}

void sub_192584CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192584CCCLL);
  }
  JUMPOUT(0x192584C94);
}

void sub_192584D00()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192584CA4);
  }
  JUMPOUT(0x192584C9CLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192584F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192585124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192585138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192585130);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925853A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator*=<half>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator*<half>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v45 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v46 = 0;
      uint64_t v47 = a2[8];
      uint64_t v48 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v49 = 0;
          uint64_t v50 = v47;
          uint64_t v51 = v48;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v54 = 0;
              uint64_t v55 = v50;
              uint64_t v56 = v51;
              do
              {
                _H0 = *(_WORD *)(*a2 + 2 * v55);
                __asm { FCVT            S0, H0 }
                LOBYTE(a4) = *(unsigned char *)(*a1 + v56);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v56) = (int)(float)(_S0 * a4);
                BOOL v52 = (void *)a1[5];
                v56 += v52[2];
                unint64_t v53 = (void *)a2[5];
                v55 += v53[2];
                ++v54;
                size_t v6 = (char *)a1[2];
              }
              while (v54 < *((void *)v6 + 2));
            }
            else
            {
              BOOL v52 = (void *)a1[5];
              unint64_t v53 = (void *)a2[5];
            }
            v51 += v52[1];
            v50 += v53[1];
            ++v49;
          }
          while (v49 < *((void *)v6 + 1));
          unint64_t v45 = *(void *)v6;
        }
        else
        {
          BOOL v52 = (void *)a1[5];
          unint64_t v53 = (void *)a2[5];
        }
        v48 += *v52;
        v47 += *v53;
        ++v46;
      }
      while (v46 < v45);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v26);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(_S0 * a4);
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v59 = operator new(v15);
      bzero(v59, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v15 >> 3;
      }
      unint64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v63 = a1[5];
        if (v61 < 2) {
          break;
        }
        uint64_t v66 = 0;
        uint64_t v67 = 0;
        unint64_t v68 = (void *)(v63 + 8);
        unint64_t v69 = v61 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v70 = v59 + 1;
        do
        {
          v66 += *(v68 - 1) * *(v70 - 1);
          v67 += *v68 * *v70;
          v70 += 2;
          v68 += 2;
          v69 -= 2;
        }
        while (v69);
        uint64_t v64 = v67 + v66;
        unint64_t v65 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v78 = a2[5];
        if (v61 < 2)
        {
          uint64_t v79 = 0;
          unint64_t v80 = 0;
LABEL_67:
          unint64_t v86 = v61 - v80;
          uint64_t v87 = v80;
          uint64_t v88 = (uint64_t *)(v78 + v87 * 8);
          unint64_t v89 = &v59[v87];
          do
          {
            uint64_t v91 = *v89++;
            uint64_t v90 = v91;
            uint64_t v92 = *v88++;
            v79 += v92 * v90;
            --v86;
          }
          while (v86);
          goto LABEL_69;
        }
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        uint64_t v83 = (void *)(v78 + 8);
        unint64_t v84 = v61 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v85 = v59 + 1;
        do
        {
          v81 += *(v83 - 1) * *(v85 - 1);
          v82 += *v83 * *v85;
          v85 += 2;
          v83 += 2;
          v84 -= 2;
        }
        while (v84);
        uint64_t v79 = v82 + v81;
        unint64_t v80 = v61 & 0xFFFFFFFFFFFFFFFELL;
        if (v61 != v62) {
          goto LABEL_67;
        }
LABEL_69:
        _H0 = *(_WORD *)(*a2 + 2 * (a2[8] + v79));
        __asm { FCVT            S0, H0 }
        LOBYTE(v60) = *(unsigned char *)(*a1 + v64);
        float v60 = (float)LODWORD(v60);
        *(unsigned char *)(*a1 + v64) = (int)(float)(_S0 * v60);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v95 = a1[2];
          uint64_t v96 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v97 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v98 = (v96 - 2);
            unint64_t v99 = v59[v98] + 1;
            v59[v98] = v99;
            if (v99 < *(void *)(v95 + v98 * 8)) {
              break;
            }
            v59[(v96 - 2)] = 0;
            LODWORD(v97) = v97 - 1;
            if ((unint64_t)--v96 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v97 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v59);
        return;
      }
      uint64_t v64 = 0;
      unint64_t v65 = 0;
LABEL_60:
      unint64_t v71 = v61 - v65;
      uint64_t v72 = v65;
      unint64_t v73 = (uint64_t *)(v63 + v72 * 8);
      uint64_t v74 = &v59[v72];
      do
      {
        uint64_t v76 = *v74++;
        uint64_t v75 = v76;
        uint64_t v77 = *v73++;
        v64 += v77 * v75;
        --v71;
      }
      while (v71);
      goto LABEL_62;
    }
    unint64_t v34 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v35 = 0;
      uint64_t v36 = a2[8];
      uint64_t v37 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v40 = 0;
          uint64_t v41 = v36;
          uint64_t v42 = v37;
          do
          {
            _H0 = *(_WORD *)(*a2 + 2 * v41);
            __asm { FCVT            S0, H0 }
            LOBYTE(a4) = *(unsigned char *)(*a1 + v42);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v42) = (int)(float)(_S0 * a4);
            uint64_t v38 = (void *)a1[5];
            v42 += v38[1];
            unint64_t v39 = (void *)a2[5];
            v41 += v39[1];
            ++v40;
            size_t v6 = (char *)a1[2];
          }
          while (v40 < *((void *)v6 + 1));
          unint64_t v34 = *(void *)v6;
        }
        else
        {
          uint64_t v38 = (void *)a1[5];
          unint64_t v39 = (void *)a2[5];
        }
        v37 += *v38;
        v36 += *v39;
        ++v35;
      }
      while (v35 < v34);
    }
  }
}

void sub_192585B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<half>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      unint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_192585F18(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192585F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192585FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192585FA4);
  }
  JUMPOUT(0x192585F74);
}

void sub_192585FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192585FB4);
  }
  JUMPOUT(0x192585F7CLL);
}

void sub_192585FE8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192585F8CLL);
  }
  JUMPOUT(0x192585F84);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192586284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19258640C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192586420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192586418);
}

uint64_t *nitro::ndarray<int>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator*<half>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v162 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = a2[8];
    uint64_t v75 = a1[8];
    unint64_t v76 = v4[1];
    uint64_t v77 = (uint64_t *)a1[5];
    uint64_t v78 = 2 * v74;
    uint64_t v157 = (uint64_t *)a2[5];
    uint64_t v160 = *v157;
    uint64_t v161 = *v77;
    uint64_t v159 = 2 * *v157;
    uint64_t v79 = (int32x4_t *)(v13 + 4 * v75);
    uint64_t v158 = 4 * *v77;
    while (!v76)
    {
LABEL_50:
      v75 += v161;
      v74 += v160;
      ++v73;
      v78 += v159;
      uint64_t v79 = (int32x4_t *)((char *)v79 + v158);
      if (v73 == v162) {
        return;
      }
    }
    uint64_t v80 = 0;
    unint64_t v81 = v4[2];
    uint64_t v82 = *a2;
    uint64_t v83 = a2[5];
    uint64_t v84 = v157[1];
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v86 = (float16x8_t *)(*a2 + v78);
    uint64_t v87 = v77[1];
    uint64_t v88 = v79;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    while (1)
    {
      if (v81)
      {
        uint64_t v91 = v77[2];
        uint64_t v92 = *(void *)(v83 + 16);
        if (v81 >= 8 && (v91 == 1 ? (BOOL v93 = v92 == 1) : (BOOL v93 = 0), v93))
        {
          uint64_t v95 = v89 + v85 * v92;
          uint64_t v104 = v88;
          uint64_t v105 = v86;
          unint64_t v106 = v81 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v96 = v90 + v85 * v91;
          do
          {
            float16x8_t v107 = *v105++;
            int32x4_t v108 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v107), vcvtq_f32_s32(v104[1])));
            *uint64_t v104 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v107.i8), vcvtq_f32_s32(*v104)));
            v104[1] = v108;
            v104 += 2;
            v106 -= 8;
          }
          while (v106);
          unint64_t v94 = v81 & 0xFFFFFFFFFFFFFFF8;
          if (v81 == v85) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v95 = v89;
          uint64_t v96 = v90;
        }
        unint64_t v97 = v81 - v94;
        uint64_t v98 = (__int16 *)(v82 + 2 * v95);
        uint64_t v99 = 2 * v92;
        uint64_t v100 = 4 * v91;
        uint64_t v101 = (int *)(v13 + 4 * v96);
        do
        {
          _H0 = *v98;
          __asm { FCVT            S0, H0 }
          *uint64_t v101 = (int)(float)(_S0 * (float)*v101);
          uint64_t v98 = (__int16 *)((char *)v98 + v99);
          uint64_t v101 = (int *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v87;
      v89 += v84;
      ++v80;
      unint64_t v86 = (float16x8_t *)((char *)v86 + 2 * v84);
      uint64_t v88 = (int32x4_t *)((char *)v88 + 4 * v87);
      if (v80 == v76) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    unint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *a2 + 2 * v42;
    uint64_t v50 = *v46;
    unint64_t v51 = v44 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v52 = 2 * *v46;
    unint64_t v53 = (int32x4_t *)(v13 + 4 * v43);
    uint64_t v54 = 4 * *v47;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 8 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v51 * v56;
          unint64_t v68 = v53;
          unint64_t v69 = (float16x8_t *)v49;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v60 = v43 + v51 * v55;
          do
          {
            float16x8_t v71 = *v69++;
            int32x4_t v72 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v71), vcvtq_f32_s32(v68[1])));
            *unint64_t v68 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v71.i8), vcvtq_f32_s32(*v68)));
            v68[1] = v72;
            v68 += 2;
            v70 -= 8;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF8;
          if (v44 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (int *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = (int)(float)(_S0 * (float)*v65);
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (int *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v50;
      ++v41;
      v49 += v52;
      unint64_t v53 = (int32x4_t *)((char *)v53 + v54);
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v109 = operator new(v12);
    bzero(v109, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v110 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v111 = 1;
    }
    else {
      unint64_t v111 = v12 >> 3;
    }
    uint64_t v112 = a2[5];
    uint64_t v113 = a2[8];
    uint64_t v114 = v111 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v115 = a1[5];
    while (v111 >= 2)
    {
      uint64_t v118 = 0;
      uint64_t v119 = 0;
      uint64_t v120 = v111 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v121 = (void *)(v115 + 8);
      uint64_t v122 = v109 + 1;
      do
      {
        v118 += *(v121 - 1) * *(v122 - 1);
        v119 += *v121 * *v122;
        v122 += 2;
        v121 += 2;
        v120 -= 2;
      }
      while (v120);
      uint64_t v116 = v119 + v118;
      uint64_t v117 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114) {
        goto LABEL_78;
      }
LABEL_80:
      if (v111 < 2)
      {
        uint64_t v130 = 0;
        uint64_t v131 = 0;
LABEL_85:
        unint64_t v137 = v111 - v131;
        uint64_t v138 = v131;
        uint64_t v139 = (uint64_t *)(v112 + 8 * v131);
        unint64_t v140 = &v109[v138];
        do
        {
          uint64_t v142 = *v140++;
          uint64_t v141 = v142;
          uint64_t v143 = *v139++;
          v130 += v143 * v141;
          --v137;
        }
        while (v137);
        goto LABEL_87;
      }
      uint64_t v132 = 0;
      uint64_t v133 = 0;
      uint64_t v134 = v111 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v135 = (void *)(v112 + 8);
      unint64_t v136 = v109 + 1;
      do
      {
        v132 += *(v135 - 1) * *(v136 - 1);
        v133 += *v135 * *v136;
        v136 += 2;
        v135 += 2;
        v134 -= 2;
      }
      while (v134);
      uint64_t v130 = v133 + v132;
      uint64_t v131 = v111 & 0x1FFFFFFFFFFFFFFELL;
      if (v111 != v114) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v110 + 2 * (v113 + v130));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v116) = (int)(float)(_S0 * (float)*(int *)(v13 + 4 * v116));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v146 = (v12 >> 3) + 1;
        int v147 = v12 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v109[v148] + 1;
          v109[v148] = v149;
          if (v149 < v4[v148]) {
            break;
          }
          v109[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_93;
          }
        }
        if (v147 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v109);
      return;
    }
    uint64_t v116 = 0;
    uint64_t v117 = 0;
LABEL_78:
    unint64_t v123 = v111 - v117;
    uint64_t v124 = v117;
    uint64_t v125 = (uint64_t *)(v115 + 8 * v117);
    unint64_t v126 = &v109[v124];
    do
    {
      uint64_t v128 = *v126++;
      uint64_t v127 = v128;
      uint64_t v129 = *v125++;
      v116 += v129 * v127;
      --v123;
    }
    while (v123);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *unint64_t v34 = (int)(float)(_S0 * (float)*v34);
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  int v152 = (float16x8_t *)(v26 + 2 * v24);
  uint64_t v153 = (int32x4_t *)(v13 + 4 * v25);
  unint64_t v154 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float16x8_t v155 = *v152++;
    int32x4_t v156 = vcvtq_s32_f32(vmulq_f32(vcvt_hight_f32_f16(v155), vcvtq_f32_s32(v153[1])));
    *uint64_t v153 = vcvtq_s32_f32(vmulq_f32(vcvtq_f32_f16(*(float16x4_t *)v155.i8), vcvtq_f32_s32(*v153)));
    v153[1] = v156;
    v153 += 2;
    v154 -= 8;
  }
  while (v154);
  uint64_t v24 = v150;
  uint64_t v25 = v151;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192586CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_192587060(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192587074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_192587110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x1925870ECLL);
  }
  JUMPOUT(0x1925870BCLL);
}

void sub_192587120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x1925870FCLL);
  }
  JUMPOUT(0x1925870C4);
}

void sub_192587130()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x1925870D4);
  }
  JUMPOUT(0x1925870CCLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925873CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192587554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192587568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192587560);
}

uint64_t *nitro::ndarray<half>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator*<half>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(a1, a2);
  }
  return a1;
}

float16x8_t nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    uint64_t v75 = (uint64_t *)a1[5];
    int v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 2 * *v75;
    uint64_t v156 = 2 * *v152;
    uint64_t v150 = 2 * v72;
    uint64_t v151 = 2 * v73;
    uint64_t v76 = 2 * v73 + v160 + 16;
    uint64_t v77 = 2 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 2 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 2 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v87 = a2[5];
    uint64_t v88 = (float16x8_t *)(*a2 + v77);
    uint64_t v89 = (float16x8_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (float16x8_t *)((char *)v89 + v84);
      uint64_t v88 = (float16x8_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 0x10)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (short float *)(v81 + 2 * v95);
        uint64_t v99 = 2 * v93;
        uint64_t v100 = 2 * v92;
        uint64_t v101 = (short float *)(v160 + 2 * v96);
        do
        {
          *(short float *)result.i16 = *v98 * *v101;
          *uint64_t v101 = *(short float *)result.i16;
          uint64_t v98 = (short float *)((char *)v98 + v99);
          uint64_t v101 = (short float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 2 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 2 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        uint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v96 = v91 + v86;
        do
        {
          float16x8_t result = vmulq_f16(v103[-1], v104[-1]);
          float16x8_t v106 = vmulq_f16(*v103, *v104);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 16;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF0;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 2 * *v43;
    uint64_t v47 = 2 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v49 = *a2;
    uint64_t v50 = 2 * v40 + v160 + 16;
    uint64_t v51 = 2 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 2 * v40;
    uint64_t v53 = v160 + 2 * v40 + 2 * v41;
    uint64_t v54 = *a2 + 2 * v39;
    uint64_t v55 = *a2 + 2 * v39 + 2 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 0x10)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (short float *)(v49 + 2 * v59);
        uint64_t v63 = 2 * v57;
        uint64_t v64 = 2 * v56;
        unint64_t v65 = (short float *)(v160 + 2 * v60);
        do
        {
          *(short float *)result.i16 = *v62 * *v65;
          *unint64_t v65 = *(short float *)result.i16;
          unint64_t v62 = (short float *)((char *)v62 + v63);
          unint64_t v65 = (short float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float16x8_t *)v51;
        unint64_t v68 = (float16x8_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v60 = v40 + v48;
        do
        {
          float16x8_t result = vmulq_f16(v67[-1], v68[-1]);
          float16x8_t v70 = vmulq_f16(*v67, *v68);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 16;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF0;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float16x8_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        unint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      uint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(short float *)(v160 + 2 * v114) = *(short float *)(v108 + 2 * (v111 + v128)) * *(short float *)(v160 + 2 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    unint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0x10) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 2 * v24 < v25 + 2 * v22 + 2 * v23 && v25 + 2 * v23 < v160 + 2 * v22 + 2 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (short float *)(v25 + 2 * v29);
    uint64_t v33 = 2 * v27;
    uint64_t v34 = 2 * v26;
    unint64_t v35 = (short float *)(v160 + 2 * v30);
    do
    {
      *(short float *)result.i16 = *v32 * *v35;
      *unint64_t v35 = *(short float *)result.i16;
      uint64_t v32 = (short float *)((char *)v32 + v33);
      unint64_t v35 = (short float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = (float16x8_t *)(v25 + 2 * v23 + 16);
  int v147 = (float16x8_t *)(v160 + 2 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t result = vmulq_f16(v146[-1], v147[-1]);
    float16x8_t v149 = vmulq_f16(*v146, *v147);
    v147[-1] = result;
    *int v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 16;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_192587F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19258828C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_1925882A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258833C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x192588318);
  }
  JUMPOUT(0x1925882E8);
}

void sub_19258834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x192588328);
  }
  JUMPOUT(0x1925882F0);
}

void sub_19258835C()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192588300);
  }
  JUMPOUT(0x1925882F8);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925885F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192588780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192588794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19258878CLL);
}

uint64_t *nitro::ndarray<float>::operator*=<half>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator*<half>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v168 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v75 = 0;
    uint64_t v76 = a2[8];
    uint64_t v77 = a1[8];
    unint64_t v78 = v4[1];
    uint64_t v79 = (uint64_t *)a1[5];
    uint64_t v163 = (uint64_t *)a2[5];
    uint64_t v80 = v13 + 4 * v77 + 32;
    uint64_t v166 = *v163;
    uint64_t v167 = *v79;
    uint64_t v165 = 4 * *v79;
    uint64_t v81 = 2 * v76 + 16;
    uint64_t v164 = 2 * *v163;
    while (!v78)
    {
LABEL_50:
      v77 += v167;
      v76 += v166;
      ++v75;
      v80 += v165;
      v81 += v164;
      if (v75 == v168) {
        return;
      }
    }
    uint64_t v82 = 0;
    unint64_t v83 = v4[2];
    uint64_t v84 = *a2;
    uint64_t v85 = a2[5];
    uint64_t v86 = v79[1];
    unint64_t v87 = v83 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v88 = (float16x4_t *)(*a2 + v81);
    uint64_t v89 = v163[1];
    uint64_t v90 = (float32x4_t *)v80;
    uint64_t v91 = v76;
    uint64_t v92 = v77;
    while (1)
    {
      if (v83)
      {
        uint64_t v93 = v79[2];
        uint64_t v94 = *(void *)(v85 + 16);
        if (v83 >= 0x10 && (v93 == 1 ? (BOOL v95 = v94 == 1) : (BOOL v95 = 0), v95))
        {
          uint64_t v97 = v91 + v87 * v94;
          float16x8_t v106 = v88;
          float16x8_t v107 = v90;
          unint64_t v108 = v83 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v98 = v92 + v87 * v93;
          do
          {
            float16x8_t v109 = *(float16x8_t *)v106[-2].i8;
            float32x4_t v110 = vmulq_f32(v107[-1], vcvt_hight_f32_f16(v109));
            float32x4_t v111 = vmulq_f32(*v107, vcvtq_f32_f16(*v106));
            float32x4_t v112 = vmulq_f32(v107[1], vcvt_hight_f32_f16(*(float16x8_t *)v106->i8));
            v107[-2] = vmulq_f32(v107[-2], vcvtq_f32_f16(*(float16x4_t *)v109.i8));
            v107[-1] = v110;
            *float16x8_t v107 = v111;
            v107[1] = v112;
            v107 += 4;
            v106 += 4;
            v108 -= 16;
          }
          while (v108);
          unint64_t v96 = v83 & 0xFFFFFFFFFFFFFFF0;
          if (v83 == v87) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v96 = 0;
          uint64_t v97 = v91;
          uint64_t v98 = v92;
        }
        unint64_t v99 = v83 - v96;
        uint64_t v100 = (__int16 *)(v84 + 2 * v97);
        uint64_t v101 = 2 * v94;
        uint64_t v102 = 4 * v93;
        uint64_t v103 = (float *)(v13 + 4 * v98);
        do
        {
          _H0 = *v100;
          __asm { FCVT            S0, H0 }
          *uint64_t v103 = *v103 * _S0;
          uint64_t v100 = (__int16 *)((char *)v100 + v101);
          uint64_t v103 = (float *)((char *)v103 + v102);
          --v99;
        }
        while (v99);
      }
LABEL_53:
      v92 += v86;
      v91 += v89;
      ++v82;
      uint64_t v90 = (float32x4_t *)((char *)v90 + 4 * v86);
      uint64_t v88 = (float16x4_t *)((char *)v88 + 2 * v89);
      if (v82 == v78) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    uint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v55 == 1 ? (_ZF = v56 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          unint64_t v68 = (float16x4_t *)v53;
          unint64_t v69 = (float32x4_t *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = *(float16x8_t *)v68[-2].i8;
            float32x4_t v72 = vmulq_f32(v69[-1], vcvt_hight_f32_f16(v71));
            float32x4_t v73 = vmulq_f32(*v69, vcvtq_f32_f16(*v68));
            float32x4_t v74 = vmulq_f32(v69[1], vcvt_hight_f32_f16(*(float16x8_t *)v68->i8));
            v69[-2] = vmulq_f32(v69[-2], vcvtq_f32_f16(*(float16x4_t *)v71.i8));
            v69[-1] = v72;
            *unint64_t v69 = v73;
            v69[1] = v74;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        unint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        unint64_t v65 = (float *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *unint64_t v65 = *v65 * _S0;
          unint64_t v62 = (__int16 *)((char *)v62 + v63);
          unint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v113 = operator new(v12);
    bzero(v113, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v12 >> 3;
    }
    uint64_t v116 = a2[5];
    uint64_t v117 = a2[8];
    uint64_t v118 = v115 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v119 = a1[5];
    while (v115 >= 2)
    {
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      uint64_t v124 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v125 = (void *)(v119 + 8);
      uint64_t v126 = v113 + 1;
      do
      {
        v122 += *(v125 - 1) * *(v126 - 1);
        v123 += *v125 * *v126;
        v126 += 2;
        v125 += 2;
        v124 -= 2;
      }
      while (v124);
      uint64_t v120 = v123 + v122;
      uint64_t v121 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_78;
      }
LABEL_80:
      if (v115 < 2)
      {
        uint64_t v134 = 0;
        uint64_t v135 = 0;
LABEL_85:
        unint64_t v141 = v115 - v135;
        uint64_t v142 = v135;
        int v143 = (uint64_t *)(v116 + 8 * v135);
        uint64_t v144 = &v113[v142];
        do
        {
          uint64_t v146 = *v144++;
          uint64_t v145 = v146;
          uint64_t v147 = *v143++;
          v134 += v147 * v145;
          --v141;
        }
        while (v141);
        goto LABEL_87;
      }
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v138 = v115 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v139 = (void *)(v116 + 8);
      uint64_t v140 = v113 + 1;
      do
      {
        v136 += *(v139 - 1) * *(v140 - 1);
        v137 += *v139 * *v140;
        v140 += 2;
        v139 += 2;
        v138 -= 2;
      }
      while (v138);
      uint64_t v134 = v137 + v136;
      uint64_t v135 = v115 & 0x1FFFFFFFFFFFFFFELL;
      if (v115 != v118) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v114 + 2 * (v117 + v134));
      __asm { FCVT            S0, H0 }
      *(float *)(v13 + 4 * v120) = *(float *)(v13 + 4 * v120) * _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v150 = (v12 >> 3) + 1;
        int v151 = v12 >> 3;
        while (1)
        {
          uint64_t v152 = (v150 - 2);
          unint64_t v153 = v113[v152] + 1;
          v113[v152] = v153;
          if (v153 < v4[v152]) {
            break;
          }
          v113[(v150 - 2)] = 0;
          --v151;
          if ((unint64_t)--v150 <= 1) {
            goto LABEL_93;
          }
        }
        if (v151 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v113);
      return;
    }
    uint64_t v120 = 0;
    uint64_t v121 = 0;
LABEL_78:
    unint64_t v127 = v115 - v121;
    uint64_t v128 = v121;
    uint64_t v129 = (uint64_t *)(v119 + 8 * v121);
    uint64_t v130 = &v113[v128];
    do
    {
      uint64_t v132 = *v130++;
      uint64_t v131 = v132;
      uint64_t v133 = *v129++;
      v120 += v133 * v131;
      --v127;
    }
    while (v127);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    unint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *uint64_t v34 = *v34 * _S0;
      unint64_t v31 = (__int16 *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v154 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v157 = (float32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v158 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v159 = *(float16x8_t *)v156[-2].i8;
    float32x4_t v160 = vmulq_f32(v157[-1], vcvt_hight_f32_f16(v159));
    float32x4_t v161 = vmulq_f32(*v157, vcvtq_f32_f16(*v156));
    float32x4_t v162 = vmulq_f32(v157[1], vcvt_hight_f32_f16(*(float16x8_t *)v156->i8));
    v157[-2] = vmulq_f32(v157[-2], vcvtq_f32_f16(*(float16x4_t *)v159.i8));
    v157[-1] = v160;
    *uint64_t v157 = v161;
    v157[1] = v162;
    v157 += 4;
    v156 += 4;
    v158 -= 16;
  }
  while (v158);
  uint64_t v24 = v154;
  uint64_t v25 = v155;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19258906C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<half>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      unint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        unint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_1925893F0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_192589404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_1925894A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19258947CLL);
  }
  JUMPOUT(0x19258944CLL);
}

void sub_1925894B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19258948CLL);
  }
  JUMPOUT(0x192589454);
}

void sub_1925894C0()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x192589464);
  }
  JUMPOUT(0x19258945CLL);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19258975C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925898E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925898F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925898F0);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator*=(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192589B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::operator*=<float>(void *a1, void *a2, double a3, float a4)
{
  uint64_t v5 = (char *)a1[2];
  size_t v6 = (char *)a1[3];
  uint64_t v7 = v6 - v5;
  if (v6 == v5 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v7 - 8) < 8)
  {
    uint64_t v8 = 1;
    unint64_t v9 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v15 = *(void *)v9;
      v9 += 8;
      v8 *= v15;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  unint64_t v10 = ((unint64_t)(v7 - 8) >> 3) + 1;
  unint64_t v9 = &v5[8 * (v10 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v11 = v5 + 8;
  uint64_t v12 = 1;
  uint64_t v13 = v10 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v14 = 1;
  do
  {
    v12 *= *(v11 - 1);
    v14 *= *v11;
    v11 += 2;
    v13 -= 2;
  }
  while (v13);
  uint64_t v8 = v14 * v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v8)
  {
    unint64_t v16 = v7 >> 3;
    uint64_t v17 = (void *)a2[2];
    if (v16 != (uint64_t)(a2[3] - (void)v17) >> 3) {
      goto LABEL_19;
    }
    uint64_t v18 = v16 <= 1 ? 1 : v16;
    if (*(void *)v5 != *v17) {
      goto LABEL_19;
    }
    uint64_t v19 = 1;
    do
    {
      unint64_t v20 = v19;
      if (v18 == v19) {
        break;
      }
      uint64_t v21 = *(void *)&v5[8 * v19];
      uint64_t v22 = v17[v19++];
    }
    while (v21 == v22);
    if (v20 < v16) {
LABEL_19:
    }
      nitro::ndarray<unsigned char>::operator*<float>(a1, a2);
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2, a3, a4);
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(void *a1, void *a2, double a3, float a4)
{
  size_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)a1[3];
  unint64_t v8 = (v7 - v6) >> 3;
  unint64_t v9 = (void *)a2[2];
  if (v8 != (uint64_t)(a2[3] - (void)v9) >> 3) {
    goto LABEL_13;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v10 = v8 <= 1 ? 1 : (v7 - v6) >> 3;
  if (*(void *)v6 != *v9) {
    goto LABEL_13;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v6[8 * v11];
    uint64_t v14 = v9[v11++];
  }
  while (v13 == v14);
  if (v12 < v8) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  int64_t v15 = v7 - v6;
  if (v7 == v6 || !*a1) {
    return;
  }
  if ((unint64_t)(v15 - 8) < 8)
  {
    uint64_t v16 = 1;
    uint64_t v17 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v23 = *(void *)v17;
      v17 += 8;
      v16 *= v23;
    }
    while (v17 != v7);
    goto LABEL_21;
  }
  unint64_t v18 = ((unint64_t)(v15 - 8) >> 3) + 1;
  uint64_t v17 = &v6[8 * (v18 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v19 = v6 + 8;
  uint64_t v20 = 1;
  uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v22 = 1;
  do
  {
    v20 *= *(v19 - 1);
    v22 *= *v19;
    v19 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v22 * v20;
  if (v18 != (v18 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v16) {
    return;
  }
  unint64_t v24 = v15 >> 3;
  if (v15 >> 3 == 3)
  {
    unint64_t v37 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v38 = 0;
      uint64_t v39 = a2[8];
      uint64_t v40 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v41 = 0;
          uint64_t v42 = v39;
          uint64_t v43 = v40;
          do
          {
            if (*((void *)v6 + 2))
            {
              unint64_t v46 = 0;
              uint64_t v47 = v42;
              uint64_t v48 = v43;
              do
              {
                LOBYTE(a4) = *(unsigned char *)(*a1 + v48);
                a4 = (float)LODWORD(a4);
                *(unsigned char *)(*a1 + v48) = (int)(float)(*(float *)(*a2 + 4 * v47) * a4);
                unint64_t v44 = (void *)a1[5];
                v48 += v44[2];
                uint64_t v45 = (void *)a2[5];
                v47 += v45[2];
                ++v46;
                size_t v6 = (char *)a1[2];
              }
              while (v46 < *((void *)v6 + 2));
            }
            else
            {
              unint64_t v44 = (void *)a1[5];
              uint64_t v45 = (void *)a2[5];
            }
            v43 += v44[1];
            v42 += v45[1];
            ++v41;
          }
          while (v41 < *((void *)v6 + 1));
          unint64_t v37 = *(void *)v6;
        }
        else
        {
          unint64_t v44 = (void *)a1[5];
          uint64_t v45 = (void *)a2[5];
        }
        v40 += *v44;
        v39 += *v45;
        ++v38;
      }
      while (v38 < v37);
    }
  }
  else
  {
    if (v24 != 2)
    {
      if (v24 == 1)
      {
        if (*(void *)v6)
        {
          unint64_t v25 = 0;
          uint64_t v26 = a2[8];
          uint64_t v27 = a1[8];
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v27);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v27) = (int)(float)(*(float *)(*a2 + 4 * v26) * a4);
            v27 += *(void *)a1[5];
            v26 += *(void *)a2[5];
            ++v25;
          }
          while (v25 < *(void *)a1[2]);
        }
        return;
      }
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = operator new(v15);
      bzero(v49, v15 & 0xFFFFFFFFFFFFFFF8);
      if (v24 <= 1) {
        unint64_t v51 = 1;
      }
      else {
        unint64_t v51 = v15 >> 3;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v53 = a1[5];
        if (v51 < 2) {
          break;
        }
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        unint64_t v58 = (void *)(v53 + 8);
        unint64_t v59 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v60 = v49 + 1;
        do
        {
          v56 += *(v58 - 1) * *(v60 - 1);
          v57 += *v58 * *v60;
          v60 += 2;
          v58 += 2;
          v59 -= 2;
        }
        while (v59);
        uint64_t v54 = v57 + v56;
        unint64_t v55 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v68 = a2[5];
        if (v51 < 2)
        {
          uint64_t v69 = 0;
          unint64_t v70 = 0;
LABEL_67:
          unint64_t v76 = v51 - v70;
          uint64_t v77 = v70;
          unint64_t v78 = (uint64_t *)(v68 + v77 * 8);
          uint64_t v79 = &v49[v77];
          do
          {
            uint64_t v81 = *v79++;
            uint64_t v80 = v81;
            uint64_t v82 = *v78++;
            v69 += v82 * v80;
            --v76;
          }
          while (v76);
          goto LABEL_69;
        }
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        float32x4_t v73 = (void *)(v68 + 8);
        unint64_t v74 = v51 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v75 = v49 + 1;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        uint64_t v69 = v72 + v71;
        unint64_t v70 = v51 & 0xFFFFFFFFFFFFFFFELL;
        if (v51 != v52) {
          goto LABEL_67;
        }
LABEL_69:
        LOBYTE(v50) = *(unsigned char *)(*a1 + v54);
        float v50 = (float)LODWORD(v50);
        *(unsigned char *)(*a1 + v54) = (int)(float)(*(float *)(*a2 + 4 * (a2[8] + v69)) * v50);
        if ((int)((unint64_t)v15 >> 3) >= 1)
        {
          uint64_t v83 = a1[2];
          uint64_t v84 = ((unint64_t)v15 >> 3) + 1;
          unint64_t v85 = (unint64_t)v15 >> 3;
          while (1)
          {
            uint64_t v86 = (v84 - 2);
            unint64_t v87 = v49[v86] + 1;
            v49[v86] = v87;
            if (v87 < *(void *)(v83 + v86 * 8)) {
              break;
            }
            v49[(v84 - 2)] = 0;
            LODWORD(v85) = v85 - 1;
            if ((unint64_t)--v84 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v85 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v49);
        return;
      }
      uint64_t v54 = 0;
      unint64_t v55 = 0;
LABEL_60:
      unint64_t v61 = v51 - v55;
      uint64_t v62 = v55;
      uint64_t v63 = (uint64_t *)(v53 + v62 * 8);
      uint64_t v64 = &v49[v62];
      do
      {
        uint64_t v66 = *v64++;
        uint64_t v65 = v66;
        uint64_t v67 = *v63++;
        v54 += v67 * v65;
        --v61;
      }
      while (v61);
      goto LABEL_62;
    }
    unint64_t v28 = *(void *)v6;
    if (*(void *)v6)
    {
      unint64_t v29 = 0;
      uint64_t v30 = a2[8];
      uint64_t v31 = a1[8];
      do
      {
        if (*((void *)v6 + 1))
        {
          unint64_t v34 = 0;
          uint64_t v35 = v30;
          uint64_t v36 = v31;
          do
          {
            LOBYTE(a4) = *(unsigned char *)(*a1 + v36);
            a4 = (float)LODWORD(a4);
            *(unsigned char *)(*a1 + v36) = (int)(float)(*(float *)(*a2 + 4 * v35) * a4);
            uint64_t v32 = (void *)a1[5];
            v36 += v32[1];
            uint64_t v33 = (void *)a2[5];
            v35 += v33[1];
            ++v34;
            size_t v6 = (char *)a1[2];
          }
          while (v34 < *((void *)v6 + 1));
          unint64_t v28 = *(void *)v6;
        }
        else
        {
          uint64_t v32 = (void *)a1[5];
          uint64_t v33 = (void *)a2[5];
        }
        v31 += *v32;
        v30 += *v33;
        ++v29;
      }
      while (v29 < v28);
    }
  }
}

void sub_19258A344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::operator*<float>(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<unsigned char>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<unsigned char>::copy(&v28);
    }
  }
  nitro::ndarray<unsigned char>::copy(a1);
}

void sub_19258A6C8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19258A6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258A778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19258A754);
  }
  JUMPOUT(0x19258A724);
}

void sub_19258A788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19258A764);
  }
  JUMPOUT(0x19258A72CLL);
}

void sub_19258A798()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19258A73CLL);
  }
  JUMPOUT(0x19258A734);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19258AA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19258ABBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19258ABD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19258ABC8);
}

uint64_t *nitro::ndarray<int>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<int>::operator*<float>(a1, a2);
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    int v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (float32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (int32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v83 == 1 ? (BOOL v85 = v84 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          BOOL v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            int32x4_t v97 = vcvtq_s32_f32(vmulq_f32(*v94, vcvtq_f32_s32(*v95)));
            v95[-1] = vcvtq_s32_f32(vmulq_f32(v94[-1], vcvtq_f32_s32(v95[-1])));
            *BOOL v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (float *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (int *)(v13 + 4 * v88);
        do
        {
          *uint64_t v93 = (int)(float)(*v90 * (float)*v93);
          uint64_t v90 = (float *)((char *)v90 + v91);
          uint64_t v93 = (int *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      unint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v50 == 1 ? (BOOL v52 = v51 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          unint64_t v61 = (float32x4_t *)v48;
          uint64_t v62 = (int32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            int32x4_t v64 = vcvtq_s32_f32(vmulq_f32(*v61, vcvtq_f32_s32(*v62)));
            v62[-1] = vcvtq_s32_f32(vmulq_f32(v61[-1], vcvtq_f32_s32(v62[-1])));
            *uint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (float *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (int *)(v13 + 4 * v55);
        do
        {
          int *v60 = (int)(float)(*v57 * (float)*v60);
          uint64_t v57 = (float *)((char *)v57 + v58);
          uint64_t v60 = (int *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      float32x4_t v110 = (void *)(v104 + 8);
      float32x4_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)(float)(*(float *)(v99 + 4 * (v102 + v119)) * (float)*(int *)(v13 + 4 * v105));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    unint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (int *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (int)(float)(*v31 * (float)*v34);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (int *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v142 = vcvtq_s32_f32(vmulq_f32(*v139, vcvtq_f32_s32(*v140)));
    v140[-1] = vcvtq_s32_f32(vmulq_f32(v139[-1], vcvtq_f32_s32(v140[-1])));
    int32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19258B494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::operator*<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<int>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<int>::copy(&v28);
    }
  }
  nitro::ndarray<int>::copy(a1);
}

void sub_19258B818(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19258B82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258B8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19258B8A4);
  }
  JUMPOUT(0x19258B874);
}

void sub_19258B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19258B8B4);
  }
  JUMPOUT(0x19258B87CLL);
}

void sub_19258B8E8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19258B88CLL);
  }
  JUMPOUT(0x19258B884);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19258BB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19258BD0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19258BD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19258BD18);
}

uint64_t *nitro::ndarray<half>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<half>::operator*<float>(a1, a2);
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
  }
  return a1;
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v179 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = a2[8];
    uint64_t v81 = a1[8];
    unint64_t v82 = v4[1];
    uint64_t v83 = (uint64_t *)a1[5];
    unint64_t v174 = (uint64_t *)a2[5];
    uint64_t v84 = v13 + 2 * v81 + 16;
    uint64_t v177 = *v174;
    uint64_t v178 = *v83;
    uint64_t v176 = 2 * *v83;
    uint64_t v85 = 4 * v80 + 32;
    uint64_t v175 = 4 * *v174;
    while (!v82)
    {
LABEL_50:
      v81 += v178;
      v80 += v177;
      ++v79;
      v84 += v176;
      v85 += v175;
      if (v79 == v179) {
        return;
      }
    }
    uint64_t v86 = 0;
    unint64_t v87 = v4[2];
    uint64_t v88 = *a2;
    uint64_t v89 = a2[5];
    uint64_t v90 = v83[1];
    unint64_t v91 = v87 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v92 = (float32x4_t *)(*a2 + v85);
    uint64_t v93 = v174[1];
    uint64_t v94 = (float16x4_t *)v84;
    uint64_t v95 = v80;
    uint64_t v96 = v81;
    while (1)
    {
      if (v87)
      {
        uint64_t v97 = v83[2];
        uint64_t v98 = *(void *)(v89 + 16);
        if (v87 >= 0x10 && (v97 == 1 ? (BOOL v99 = v98 == 1) : (BOOL v99 = 0), v99))
        {
          uint64_t v101 = v95 + v91 * v98;
          float32x4_t v111 = v92;
          unint64_t v112 = v94;
          unint64_t v113 = v87 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v102 = v96 + v91 * v97;
          do
          {
            float32x4_t v114 = v111[-2];
            float32x4_t v115 = v111[-1];
            float32x4_t v116 = *v111;
            float32x4_t v117 = v111[1];
            v111 += 4;
            float16x8_t v118 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v114, vcvtq_f32_f16(v112[-2]))), vmulq_f32(v115, vcvt_hight_f32_f16(*(float16x8_t *)v112[-2].i8)));
            float16x8_t v119 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v116, vcvtq_f32_f16(*v112))), vmulq_f32(v117, vcvt_hight_f32_f16(*(float16x8_t *)v112->i8)));
            *(float16x8_t *)v112[-2].i8 = v118;
            *(float16x8_t *)v112->i8 = v119;
            v112 += 4;
            v113 -= 16;
          }
          while (v113);
          unint64_t v100 = v87 & 0xFFFFFFFFFFFFFFF0;
          if (v87 == v91) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v100 = 0;
          uint64_t v101 = v95;
          uint64_t v102 = v96;
        }
        unint64_t v103 = v87 - v100;
        uint64_t v104 = (float *)(v88 + 4 * v101);
        uint64_t v105 = 4 * v98;
        uint64_t v106 = 2 * v97;
        uint64_t v107 = (__int16 *)(v13 + 2 * v102);
        do
        {
          _H1 = *v107;
          __asm { FCVT            S1, H1 }
          _S0 = *v104 * _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v107 = LOWORD(_S0);
          uint64_t v104 = (float *)((char *)v104 + v105);
          uint64_t v107 = (__int16 *)((char *)v107 + v106);
          --v103;
        }
        while (v103);
      }
LABEL_53:
      v96 += v90;
      v95 += v93;
      ++v86;
      uint64_t v94 = (float16x4_t *)((char *)v94 + 2 * v90);
      uint64_t v92 = (float32x4_t *)((char *)v92 + 4 * v93);
      if (v86 == v82) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v41 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v4[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    unint64_t v51 = v45 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v52 = v13 + 2 * v44 + 16;
    uint64_t v53 = 2 * *v48;
    uint64_t v54 = *a2 + 4 * v43 + 32;
    uint64_t v55 = 4 * *v47;
    while (1)
    {
      if (v45)
      {
        uint64_t v56 = v48[1];
        uint64_t v57 = v47[1];
        if (v45 >= 0x10 && (v56 == 1 ? (_ZF = v57 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v60 = v43 + v51 * v57;
          uint64_t v70 = (float32x4_t *)v54;
          uint64_t v71 = (float16x4_t *)v52;
          unint64_t v72 = v45 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v61 = v44 + v51 * v56;
          do
          {
            float32x4_t v73 = v70[-2];
            float32x4_t v74 = v70[-1];
            float32x4_t v75 = *v70;
            float32x4_t v76 = v70[1];
            v70 += 4;
            float16x8_t v77 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v73, vcvtq_f32_f16(v71[-2]))), vmulq_f32(v74, vcvt_hight_f32_f16(*(float16x8_t *)v71[-2].i8)));
            float16x8_t v78 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v75, vcvtq_f32_f16(*v71))), vmulq_f32(v76, vcvt_hight_f32_f16(*(float16x8_t *)v71->i8)));
            *(float16x8_t *)v71[-2].i8 = v77;
            *(float16x8_t *)v71->i8 = v78;
            v71 += 4;
            v72 -= 16;
          }
          while (v72);
          unint64_t v59 = v45 & 0xFFFFFFFFFFFFFFF0;
          if (v45 == v51) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v59 = 0;
          uint64_t v60 = v43;
          uint64_t v61 = v44;
        }
        unint64_t v62 = v45 - v59;
        unint64_t v63 = (float *)(v46 + 4 * v60);
        uint64_t v64 = 4 * v57;
        uint64_t v65 = 2 * v56;
        uint64_t v66 = (__int16 *)(v13 + 2 * v61);
        do
        {
          _H1 = *v66;
          __asm { FCVT            S1, H1 }
          _S0 = *v63 * _S1;
          __asm { FCVT            H0, S0 }
          *uint64_t v66 = LOWORD(_S0);
          unint64_t v63 = (float *)((char *)v63 + v64);
          uint64_t v66 = (__int16 *)((char *)v66 + v65);
          --v62;
        }
        while (v62);
      }
LABEL_33:
      v44 += v49;
      v43 += v50;
      ++v42;
      v52 += v53;
      v54 += v55;
      if (v42 == v41) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v120 = operator new(v12);
    bzero(v120, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v121 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v122 = 1;
    }
    else {
      unint64_t v122 = v12 >> 3;
    }
    uint64_t v123 = a2[5];
    uint64_t v124 = a2[8];
    uint64_t v125 = v122 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v126 = a1[5];
    while (v122 >= 2)
    {
      uint64_t v129 = 0;
      uint64_t v130 = 0;
      uint64_t v131 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v132 = (void *)(v126 + 8);
      uint64_t v133 = v120 + 1;
      do
      {
        v129 += *(v132 - 1) * *(v133 - 1);
        v130 += *v132 * *v133;
        v133 += 2;
        v132 += 2;
        v131 -= 2;
      }
      while (v131);
      uint64_t v127 = v130 + v129;
      uint64_t v128 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_78;
      }
LABEL_80:
      if (v122 < 2)
      {
        uint64_t v141 = 0;
        uint64_t v142 = 0;
LABEL_85:
        unint64_t v148 = v122 - v142;
        uint64_t v149 = v142;
        uint64_t v150 = (uint64_t *)(v123 + 8 * v142);
        int v151 = &v120[v149];
        do
        {
          uint64_t v153 = *v151++;
          uint64_t v152 = v153;
          uint64_t v154 = *v150++;
          v141 += v154 * v152;
          --v148;
        }
        while (v148);
        goto LABEL_87;
      }
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v122 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v146 = (void *)(v123 + 8);
      uint64_t v147 = v120 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v122 & 0x1FFFFFFFFFFFFFFELL;
      if (v122 != v125) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v155 = 2 * v127;
      _H1 = *(_WORD *)(v13 + v155);
      __asm { FCVT            S1, H1 }
      _S0 = *(float *)(v121 + 4 * (v124 + v141)) * _S1;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + v155) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v159 = (v12 >> 3) + 1;
        int v160 = v12 >> 3;
        while (1)
        {
          uint64_t v161 = (v159 - 2);
          unint64_t v162 = v120[v161] + 1;
          v120[v161] = v162;
          if (v162 < v4[v161]) {
            break;
          }
          v120[(v159 - 2)] = 0;
          --v160;
          if ((unint64_t)--v159 <= 1) {
            goto LABEL_93;
          }
        }
        if (v160 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v120);
      return;
    }
    uint64_t v127 = 0;
    uint64_t v128 = 0;
LABEL_78:
    unint64_t v134 = v122 - v128;
    uint64_t v135 = v128;
    unint64_t v136 = (uint64_t *)(v126 + 8 * v128);
    uint64_t v137 = &v120[v135];
    do
    {
      uint64_t v139 = *v137++;
      uint64_t v138 = v139;
      uint64_t v140 = *v136++;
      v127 += v140 * v138;
      --v134;
    }
    while (v134);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    unint64_t v34 = (__int16 *)(v13 + 2 * v25);
    do
    {
      _H1 = *v34;
      __asm { FCVT            S1, H1 }
      _S0 = *v31 * _S1;
      __asm { FCVT            H0, S0 }
      *unint64_t v34 = LOWORD(_S0);
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (__int16 *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v27 != 1) {
    goto LABEL_28;
  }
  if (v28 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v163 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (float32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v166 = (float16x4_t *)(v13 + 2 * v25 + 16);
  unint64_t v167 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v168 = v165[-2];
    float32x4_t v169 = v165[-1];
    float32x4_t v170 = *v165;
    float32x4_t v171 = v165[1];
    v165 += 4;
    float16x8_t v172 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v168, vcvtq_f32_f16(v166[-2]))), vmulq_f32(v169, vcvt_hight_f32_f16(*(float16x8_t *)v166[-2].i8)));
    float16x8_t v173 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(v170, vcvtq_f32_f16(*v166))), vmulq_f32(v171, vcvt_hight_f32_f16(*(float16x8_t *)v166->i8)));
    *(float16x8_t *)v166[-2].i8 = v172;
    *(float16x8_t *)v166->i8 = v173;
    v166 += 4;
    v167 -= 16;
  }
  while (v167);
  uint64_t v24 = v163;
  uint64_t v25 = v164;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19258C62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::operator*<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        unint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      unint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        uint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      unint64_t v29 = 0;
      unint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      unint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        unint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        unint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<half>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<half>::copy(&v28);
    }
  }
  nitro::ndarray<half>::copy(a1);
}

void sub_19258C9B0(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19258C9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      unint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  unint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    unint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  unint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258CA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19258CA3CLL);
  }
  JUMPOUT(0x19258CA0CLL);
}

void sub_19258CA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19258CA4CLL);
  }
  JUMPOUT(0x19258CA14);
}

void sub_19258CA80()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19258CA24);
  }
  JUMPOUT(0x19258CA1CLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19258CD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19258CEA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19258CEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19258CEB0);
}

uint64_t *nitro::ndarray<float>::operator*=<float>(uint64_t *a1, uint64_t *a2)
{
  v3 = (char *)a1[2];
  v4 = (char *)a1[3];
  uint64_t v5 = v4 - v3;
  if (v4 == v3 || !*a1) {
    return a1;
  }
  if ((unint64_t)(v5 - 8) < 8)
  {
    uint64_t v6 = 1;
    unint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v4);
    goto LABEL_9;
  }
  unint64_t v8 = ((unint64_t)(v5 - 8) >> 3) + 1;
  unint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v5 >> 3;
    std::locale v15 = (void *)a2[2];
    if (v14 != (a2[3] - (uint64_t)v15) >> 3) {
      goto LABEL_19;
    }
    uint64_t v16 = v14 <= 1 ? 1 : v14;
    if (*(void *)v3 != *v15) {
      goto LABEL_19;
    }
    uint64_t v17 = 1;
    do
    {
      unint64_t v18 = v17;
      if (v16 == v17) {
        break;
      }
      uint64_t v19 = *(void *)&v3[8 * v17];
      uint64_t v20 = v15[v17++];
    }
    while (v19 == v20);
    if (v18 < v14) {
LABEL_19:
    }
      nitro::ndarray<float>::operator*<float>(a1, a2);
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(a1, a2);
  }
  return a1;
}

float32x4_t nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v160 = *a1;
  if (!*a1) {
    return result;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v13 = 1;
    unint64_t v14 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v20 = *v14++;
      v13 *= v20;
    }
    while (v14 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v15 = ((v12 - 8) >> 3) + 1;
  unint64_t v14 = &v4[v15 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v16 = v4 + 1;
  uint64_t v17 = 1;
  uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v19 = 1;
  do
  {
    v17 *= *(v16 - 1);
    v19 *= *v16;
    v16 += 2;
    v18 -= 2;
  }
  while (v18);
  uint64_t v13 = v19 * v17;
  if (v15 != (v15 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v13) {
    return result;
  }
  uint64_t v21 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v155 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v71 = 0;
    uint64_t v72 = a2[8];
    uint64_t v73 = a1[8];
    unint64_t v74 = v4[1];
    float32x4_t v75 = (uint64_t *)a1[5];
    uint64_t v152 = (uint64_t *)a2[5];
    uint64_t v153 = *v152;
    uint64_t v154 = *v75;
    uint64_t v157 = 4 * *v75;
    uint64_t v156 = 4 * *v152;
    uint64_t v150 = 4 * v72;
    uint64_t v151 = 4 * v73;
    uint64_t v76 = 4 * v73 + v160 + 16;
    uint64_t v77 = 4 * v72 + 16;
    while (!v74)
    {
LABEL_55:
      v73 += v154;
      v72 += v153;
      ++v71;
      v76 += v157;
      v77 += v156;
      if (v71 == v155) {
        return result;
      }
    }
    uint64_t v78 = 0;
    uint64_t v79 = v150 + v156 * v71;
    unint64_t v80 = v4[2];
    uint64_t v81 = *a2;
    uint64_t v82 = v75[1];
    uint64_t v83 = v152[1];
    uint64_t v84 = 4 * v82;
    uint64_t v159 = v151 + v157 * v71;
    uint64_t v85 = 4 * v83;
    unint64_t v86 = v80 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v87 = a2[5];
    uint64_t v88 = (float32x4_t *)(*a2 + v77);
    uint64_t v89 = (float32x4_t *)v76;
    uint64_t v90 = v72;
    uint64_t v91 = v73;
    while (!v80)
    {
LABEL_58:
      v91 += v82;
      v90 += v83;
      ++v78;
      uint64_t v89 = (float32x4_t *)((char *)v89 + v84);
      uint64_t v88 = (float32x4_t *)((char *)v88 + v85);
      if (v78 == v74) {
        goto LABEL_55;
      }
    }
    uint64_t v92 = v75[2];
    uint64_t v93 = *(void *)(v87 + 16);
    if (v80 >= 8)
    {
      unint64_t v94 = 0;
      if (v92 != 1) {
        goto LABEL_62;
      }
      uint64_t v95 = v90;
      uint64_t v96 = v91;
      if (v93 != 1)
      {
LABEL_63:
        unint64_t v97 = v80 - v94;
        uint64_t v98 = (float *)(v81 + 4 * v95);
        uint64_t v99 = 4 * v93;
        uint64_t v100 = 4 * v92;
        uint64_t v101 = (float *)(v160 + 4 * v96);
        do
        {
          result.f32[0] = *v98 * *v101;
          *uint64_t v101 = result.f32[0];
          uint64_t v98 = (float *)((char *)v98 + v99);
          uint64_t v101 = (float *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
        goto LABEL_58;
      }
      if (v160 + v159 + v84 * v78 >= v81 + v79 + 4 * v80 + v85 * v78
        || v81 + v79 + v85 * v78 >= v160 + v159 + 4 * v80 + v84 * v78)
      {
        uint64_t v95 = v90 + v86;
        unint64_t v103 = v88;
        uint64_t v104 = v89;
        unint64_t v105 = v80 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v96 = v91 + v86;
        do
        {
          float32x4_t result = vmulq_f32(v103[-1], v104[-1]);
          float32x4_t v106 = vmulq_f32(*v103, *v104);
          v104[-1] = result;
          *uint64_t v104 = v106;
          v104 += 2;
          v103 += 2;
          v105 -= 8;
        }
        while (v105);
        unint64_t v94 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v80 == v86) {
          goto LABEL_58;
        }
        goto LABEL_63;
      }
    }
    unint64_t v94 = 0;
LABEL_62:
    uint64_t v95 = v90;
    uint64_t v96 = v91;
    goto LABEL_63;
  }
  if (v21 == 2)
  {
    unint64_t v37 = *v4;
    if (!*v4) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v4[1];
    uint64_t v42 = (uint64_t *)a2[5];
    uint64_t v43 = (uint64_t *)a1[5];
    uint64_t v44 = *v43;
    uint64_t v45 = *v42;
    uint64_t v46 = 4 * *v43;
    uint64_t v47 = 4 * *v42;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = *a2;
    uint64_t v50 = 4 * v40 + v160 + 16;
    uint64_t v51 = 4 * v39 + *a2 + 16;
    uint64_t v52 = v160 + 4 * v40;
    uint64_t v53 = v160 + 4 * v40 + 4 * v41;
    uint64_t v54 = *a2 + 4 * v39;
    uint64_t v55 = *a2 + 4 * v39 + 4 * v41;
    while (!v41)
    {
LABEL_34:
      v40 += v44;
      v39 += v45;
      ++v38;
      v50 += v46;
      v51 += v47;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v56 = v43[1];
    uint64_t v57 = v42[1];
    if (v41 >= 8)
    {
      unint64_t v58 = 0;
      if (v56 != 1) {
        goto LABEL_38;
      }
      uint64_t v59 = v39;
      uint64_t v60 = v40;
      if (v57 != 1)
      {
LABEL_39:
        unint64_t v61 = v41 - v58;
        unint64_t v62 = (float *)(v49 + 4 * v59);
        uint64_t v63 = 4 * v57;
        uint64_t v64 = 4 * v56;
        uint64_t v65 = (float *)(v160 + 4 * v60);
        do
        {
          result.f32[0] = *v62 * *v65;
          *uint64_t v65 = result.f32[0];
          unint64_t v62 = (float *)((char *)v62 + v63);
          uint64_t v65 = (float *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
        goto LABEL_34;
      }
      if (v52 + v46 * v38 >= (unint64_t)(v55 + v47 * v38)
        || v54 + v47 * v38 >= (unint64_t)(v53 + v46 * v38))
      {
        uint64_t v59 = v39 + v48;
        uint64_t v67 = (float32x4_t *)v51;
        unint64_t v68 = (float32x4_t *)v50;
        unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v60 = v40 + v48;
        do
        {
          float32x4_t result = vmulq_f32(v67[-1], v68[-1]);
          float32x4_t v70 = vmulq_f32(*v67, *v68);
          v68[-1] = result;
          *unint64_t v68 = v70;
          v68 += 2;
          v67 += 2;
          v69 -= 8;
        }
        while (v69);
        unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == v48) {
          goto LABEL_34;
        }
        goto LABEL_39;
      }
    }
    unint64_t v58 = 0;
LABEL_38:
    uint64_t v59 = v39;
    uint64_t v60 = v40;
    goto LABEL_39;
  }
  if (v21 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v107 = operator new(v12);
    bzero(v107, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v108 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v109 = 1;
    }
    else {
      unint64_t v109 = v12 >> 3;
    }
    uint64_t v110 = a2[5];
    uint64_t v111 = a2[8];
    uint64_t v112 = v109 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v113 = a1[5];
    while (v109 >= 2)
    {
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      uint64_t v118 = v109 & 0x1FFFFFFFFFFFFFFELL;
      float16x8_t v119 = (void *)(v113 + 8);
      uint64_t v120 = v107 + 1;
      do
      {
        v116 += *(v119 - 1) * *(v120 - 1);
        v117 += *v119 * *v120;
        v120 += 2;
        v119 += 2;
        v118 -= 2;
      }
      while (v118);
      uint64_t v114 = v117 + v116;
      uint64_t v115 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_87;
      }
LABEL_89:
      if (v109 < 2)
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
LABEL_94:
        unint64_t v135 = v109 - v129;
        uint64_t v136 = v129;
        uint64_t v137 = (uint64_t *)(v110 + 8 * v129);
        uint64_t v138 = &v107[v136];
        do
        {
          uint64_t v140 = *v138++;
          uint64_t v139 = v140;
          uint64_t v141 = *v137++;
          v128 += v141 * v139;
          --v135;
        }
        while (v135);
        goto LABEL_96;
      }
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v109 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v110 + 8);
      unint64_t v134 = v107 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v109 & 0x1FFFFFFFFFFFFFFELL;
      if (v109 != v112) {
        goto LABEL_94;
      }
LABEL_96:
      *(float *)(v160 + 4 * v114) = *(float *)(v108 + 4 * (v111 + v128)) * *(float *)(v160 + 4 * v114);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v142 = (v12 >> 3) + 1;
        int v143 = v12 >> 3;
        while (1)
        {
          uint64_t v144 = (v142 - 2);
          unint64_t v145 = v107[v144] + 1;
          v107[v144] = v145;
          if (v145 < v4[v144]) {
            break;
          }
          v107[(v142 - 2)] = 0;
          --v143;
          if ((unint64_t)--v142 <= 1) {
            goto LABEL_102;
          }
        }
        if (v143 > 0) {
          continue;
        }
      }
LABEL_102:
      operator delete(v107);
      return result;
    }
    uint64_t v114 = 0;
    uint64_t v115 = 0;
LABEL_87:
    unint64_t v121 = v109 - v115;
    uint64_t v122 = v115;
    uint64_t v123 = (uint64_t *)(v113 + 8 * v115);
    uint64_t v124 = &v107[v122];
    do
    {
      uint64_t v126 = *v124++;
      uint64_t v125 = v126;
      uint64_t v127 = *v123++;
      v114 += v127 * v125;
      --v121;
    }
    while (v121);
    goto LABEL_89;
  }
  unint64_t v22 = *v4;
  if (!*v4) {
    return result;
  }
  uint64_t v23 = a2[8];
  uint64_t v24 = a1[8];
  uint64_t v25 = *a2;
  uint64_t v26 = *(void *)a1[5];
  uint64_t v27 = *(void *)a2[5];
  if (v22 < 0xC) {
    goto LABEL_27;
  }
  unint64_t v28 = 0;
  if (v26 != 1 || v27 != 1) {
    goto LABEL_28;
  }
  if (v160 + 4 * v24 < v25 + 4 * v22 + 4 * v23 && v25 + 4 * v23 < v160 + 4 * v22 + 4 * v24)
  {
LABEL_27:
    unint64_t v28 = 0;
LABEL_28:
    uint64_t v29 = a2[8];
    uint64_t v30 = a1[8];
LABEL_29:
    unint64_t v31 = v22 - v28;
    uint64_t v32 = (float *)(v25 + 4 * v29);
    uint64_t v33 = 4 * v27;
    uint64_t v34 = 4 * v26;
    unint64_t v35 = (float *)(v160 + 4 * v30);
    do
    {
      result.f32[0] = *v32 * *v35;
      *unint64_t v35 = result.f32[0];
      uint64_t v32 = (float *)((char *)v32 + v33);
      unint64_t v35 = (float *)((char *)v35 + v34);
      --v31;
    }
    while (v31);
    return result;
  }
  unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = v23 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v24 + (v22 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v146 = (float32x4_t *)(v25 + 4 * v23 + 16);
  uint64_t v147 = (float32x4_t *)(v160 + 4 * v24 + 16);
  unint64_t v148 = v22 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t result = vmulq_f32(v146[-1], v147[-1]);
    float32x4_t v149 = vmulq_f32(*v146, *v147);
    v147[-1] = result;
    *uint64_t v147 = v149;
    v146 += 2;
    v147 += 2;
    v148 -= 8;
  }
  while (v148);
  if (v22 != v28) {
    goto LABEL_29;
  }
  return result;
}

void sub_19258D858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator*<float>(void *a1, void *a2)
{
  unint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      uint64_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        unint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = (char *)operator new(v9 - v8);
        unint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        uint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        unint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_19258DBDC(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19258DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19258DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19258DC68);
  }
  JUMPOUT(0x19258DC38);
}

void sub_19258DC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19258DC78);
  }
  JUMPOUT(0x19258DC40);
}

void sub_19258DCAC()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19258DC50);
  }
  JUMPOUT(0x19258DC48);
}

void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19258DF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<float,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<float>& nitro::ndarray<float>::operator*=<float>(nitro::ndarray<float> const&)::{lambda(float &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        v4 = __p;
      }
      else {
        v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    size_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19258E0D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19258E0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19258E0DCLL);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19258E350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19258E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            int v61 = *(unsigned __int8 *)(v26 + v29 + v31);
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258EB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            int v61 = *(unsigned __int8 *)(v26 + v29 + v31);
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258EE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<unsigned char>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v27 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = v6 >> 3;
          }
          uint64_t v29 = a2[5];
          uint64_t v30 = a2[8];
          uint64_t v31 = v28 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v32 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v34 = a1[5];
            if (v28 < 2) {
              break;
            }
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            uint64_t v39 = (void *)(v34 + 8);
            uint64_t v40 = v28 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v41 = v25 + 1;
            do
            {
              v37 += *(v39 - 1) * *(v41 - 1);
              v38 += *v39 * *v41;
              v41 += 2;
              v39 += 2;
              v40 -= 2;
            }
            while (v40);
            uint64_t v35 = v38 + v37;
            uint64_t v36 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31) {
              goto LABEL_33;
            }
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v35));
            if (v28 < 2)
            {
              uint64_t v32 = 0;
              uint64_t v49 = 0;
LABEL_40:
              unint64_t v55 = v28 - v49;
              uint64_t v56 = v49;
              uint64_t v57 = (uint64_t *)(v29 + 8 * v49);
              uint64_t v58 = &v25[v56];
              do
              {
                uint64_t v60 = *v58++;
                uint64_t v59 = v60;
                uint64_t v61 = *v57++;
                v32 += v61 * v59;
                --v55;
              }
              while (v55);
              goto LABEL_42;
            }
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = v28 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v53 = (void *)(v29 + 8);
            unint64_t v54 = v25 + 1;
            do
            {
              v50 += *(v53 - 1) * *(v54 - 1);
              v51 += *v53 * *v54;
              v54 += 2;
              v53 += 2;
              v52 -= 2;
            }
            while (v52);
            uint64_t v32 = v51 + v50;
            uint64_t v49 = v28 & 0x1FFFFFFFFFFFFFFELL;
            if (v28 != v31) {
              goto LABEL_40;
            }
LABEL_42:
            __asm { FCVT            S0, H0 }
            LOBYTE(v26) = *(unsigned char *)(v27 + v30 + v32);
            float v26 = (float)LODWORD(v26);
            BOOL v15 = _S0 == v26;
            if ((int)(v6 >> 3) >= 1 && _S0 == v26)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v35 = 0;
          uint64_t v36 = 0;
LABEL_33:
          unint64_t v42 = v28 - v36;
          uint64_t v43 = v36;
          uint64_t v44 = (uint64_t *)(v34 + v43 * 8);
          uint64_t v45 = &v25[v43];
          do
          {
            uint64_t v47 = *v45++;
            uint64_t v46 = v47;
            uint64_t v48 = *v44++;
            v35 += v48 * v46;
            --v42;
          }
          while (v42);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258F1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<int>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            int v61 = *(_DWORD *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258F51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              _H0 = *(_WORD *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            _H0 = *(_WORD *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            __asm { FCVT            S0, H0 }
            float v66 = (float)*(int *)(v26 + 4 * (v29 + v31));
            BOOL v15 = _S0 == v66;
            if ((int)(v6 >> 3) >= 1 && _S0 == v66)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258F870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<int>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              float v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            float v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            float v61 = (float)*(int *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19258FBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<half>>)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int64_t v9 = __p;
      }
      else {
        int64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19258FE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              unsigned int v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            unsigned int v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            _H1 = *(_WORD *)(v26 + 2 * (v29 + v31));
            __asm { FCVT            S1, H1 }
            BOOL v15 = (float)v32 == _S1;
            if ((int)(v6 >> 3) >= 1 && (float)v32 == _S1)
            {
              uint64_t v67 = (v6 >> 3) + 1;
              unint64_t v68 = v6 >> 3;
              while (1)
              {
                uint64_t v69 = (v67 - 2);
                unint64_t v70 = v25[v69] + 1;
                v25[v69] = v70;
                if (v70 < *(void *)&v5[v69 * 8]) {
                  break;
                }
                v25[(v67 - 2)] = 0;
                LODWORD(v68) = v68 - 1;
                if ((unint64_t)--v67 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v68 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_192590294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::operator==(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int64_t v9 = __p;
      }
      else {
        int64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192590500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<int>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              int v32 = *(_DWORD *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            int v32 = *(_DWORD *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            float v61 = *(float *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v61 == (float)v32;
            if ((int)(v6 >> 3) >= 1 && v61 == (float)v32)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_192590964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<float>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      int64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              float v32 = *(float *)(v16 + 4 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            uint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            float v32 = *(float *)(v16 + 4 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            uint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            float v61 = *(float *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          uint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          uint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      int64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_192590CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::negate(void)::$_0>(nitro::ndarray_container::negate(void)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        int64_t v9 = __p;
      }
      else {
        int64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    unint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        BOOL v15 = v23;
      }
      else {
        BOOL v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  int64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192590F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::negate(void *a1)
{
  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3 || !*a1) {
    return a1;
  }
  unint64_t v4 = v2 - v3 - 8;
  if (v4 < 8)
  {
    uint64_t v5 = 1;
    unint64_t v6 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v12 = *(void *)v6;
      v6 += 8;
      v5 *= v12;
    }
    while (v6 != v2);
    goto LABEL_9;
  }
  uint64_t v7 = (v4 >> 3) + 1;
  unint64_t v6 = &v3[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v8 = v3 + 8;
  uint64_t v9 = 1;
  uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v11 = 1;
  do
  {
    v9 *= *(v8 - 1);
    v11 *= *v8;
    v8 += 2;
    v10 -= 2;
  }
  while (v10);
  uint64_t v5 = v11 * v9;
  if (v7 != (v7 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v5)
  {
    uint64_t v13 = v2 - v3;
    if (v2 - v3 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = operator new(v2 - v3);
    bzero(v14, v13 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v15 = v13 >> 3;
    if ((unint64_t)(v13 >> 3) <= 1) {
      unint64_t v15 = 1;
    }
    while (1)
    {
      if ((unint64_t)v13 < 8)
      {
        uint64_t v16 = 0;
        goto LABEL_22;
      }
      uint64_t v17 = a1[5];
      if (v15 < 2) {
        break;
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      unsigned __int8 v21 = (void *)(v17 + 8);
      unint64_t v22 = v15 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v23 = v14 + 1;
      do
      {
        v19 += *(v21 - 1) * *(v23 - 1);
        v20 += *v21 * *v23;
        v23 += 2;
        v21 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v16 = v20 + v19;
      unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFELL;
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFELL)) {
        goto LABEL_20;
      }
LABEL_22:
      *(unsigned char *)(*a1 + a1[8] + v16) = -*(unsigned char *)(*a1 + a1[8] + v16);
      if ((int)((unint64_t)v13 >> 3) >= 1)
      {
        uint64_t v31 = a1[2];
        uint64_t v32 = ((unint64_t)v13 >> 3) + 1;
        unint64_t v33 = (unint64_t)v13 >> 3;
        while (1)
        {
          uint64_t v34 = (v32 - 2);
          unint64_t v35 = v14[v34] + 1;
          v14[v34] = v35;
          if (v35 < *(void *)(v31 + v34 * 8)) {
            break;
          }
          v14[(v32 - 2)] = 0;
          LODWORD(v33) = v33 - 1;
          if ((unint64_t)--v32 <= 1) {
            goto LABEL_28;
          }
        }
        if ((int)v33 > 0) {
          continue;
        }
      }
LABEL_28:
      operator delete(v14);
      return a1;
    }
    uint64_t v16 = 0;
    unint64_t v18 = 0;
LABEL_20:
    unint64_t v24 = v15 - v18;
    uint64_t v25 = v18;
    uint64_t v26 = (uint64_t *)(v17 + v25 * 8);
    unint64_t v27 = &v14[v25];
    do
    {
      uint64_t v29 = *v27++;
      uint64_t v28 = v29;
      uint64_t v30 = *v26++;
      v16 += v30 * v28;
      --v24;
    }
    while (v24);
    goto LABEL_22;
  }
  return a1;
}

void sub_192591258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<int>::negate(uint64_t *a1)
{
  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3) {
    return a1;
  }
  uint64_t v4 = *a1;
  if (!*a1) {
    return a1;
  }
  unint64_t v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  uint64_t v8 = (v5 >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v2 - v3;
    if (v2 - v3 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = v14 >> 3;
    }
    uint64_t v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        uint64_t v18 = 0;
        goto LABEL_24;
      }
      uint64_t v19 = a1[5];
      if (v16 < 2) {
        break;
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = (void *)(v19 + 8);
      uint64_t v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      uint64_t v18 = v22 + v21;
      uint64_t v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_22;
      }
LABEL_24:
      *(_DWORD *)(v4 + 4 * (v17 + v18)) = -*(_DWORD *)(v4 + 4 * (v17 + v18));
      if ((int)(v14 >> 3) >= 1)
      {
        uint64_t v33 = (v14 >> 3) + 1;
        unint64_t v34 = v14 >> 3;
        while (1)
        {
          uint64_t v35 = (v33 - 2);
          unint64_t v36 = v15[v35] + 1;
          v15[v35] = v36;
          if (v36 < *(void *)&v3[v35 * 8]) {
            break;
          }
          v15[(v33 - 2)] = 0;
          LODWORD(v34) = v34 - 1;
          if ((unint64_t)--v33 <= 1) {
            goto LABEL_30;
          }
        }
        if ((int)v34 > 0) {
          continue;
        }
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    uint64_t v18 = 0;
    uint64_t v20 = 0;
LABEL_22:
    unint64_t v26 = v16 - v20;
    uint64_t v27 = v20;
    uint64_t v28 = (uint64_t *)(v19 + v27 * 8);
    uint64_t v29 = &v15[v27];
    do
    {
      uint64_t v31 = *v29++;
      uint64_t v30 = v31;
      uint64_t v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_192591480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<half>::negate(uint64_t *a1)
{
  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3) {
    return a1;
  }
  uint64_t v4 = *a1;
  if (!*a1) {
    return a1;
  }
  unint64_t v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  uint64_t v8 = (v5 >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v2 - v3;
    if (v2 - v3 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = v14 >> 3;
    }
    uint64_t v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        uint64_t v18 = 0;
        goto LABEL_24;
      }
      uint64_t v19 = a1[5];
      if (v16 < 2) {
        break;
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = (void *)(v19 + 8);
      uint64_t v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      uint64_t v18 = v22 + v21;
      uint64_t v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_22;
      }
LABEL_24:
      *(short float *)(v4 + 2 * (v17 + v18)) = -*(short float *)(v4 + 2 * (v17 + v18));
      if ((int)(v14 >> 3) >= 1)
      {
        uint64_t v33 = (v14 >> 3) + 1;
        unint64_t v34 = v14 >> 3;
        while (1)
        {
          uint64_t v35 = (v33 - 2);
          unint64_t v36 = v15[v35] + 1;
          v15[v35] = v36;
          if (v36 < *(void *)&v3[v35 * 8]) {
            break;
          }
          v15[(v33 - 2)] = 0;
          LODWORD(v34) = v34 - 1;
          if ((unint64_t)--v33 <= 1) {
            goto LABEL_30;
          }
        }
        if ((int)v34 > 0) {
          continue;
        }
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    uint64_t v18 = 0;
    uint64_t v20 = 0;
LABEL_22:
    unint64_t v26 = v16 - v20;
    uint64_t v27 = v20;
    uint64_t v28 = (uint64_t *)(v19 + v27 * 8);
    uint64_t v29 = &v15[v27];
    do
    {
      uint64_t v31 = *v29++;
      uint64_t v30 = v31;
      uint64_t v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_1925916A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *nitro::ndarray<float>::negate(uint64_t *a1)
{
  v3 = (char *)a1[2];
  v2 = (char *)a1[3];
  if (v2 == v3) {
    return a1;
  }
  uint64_t v4 = *a1;
  if (!*a1) {
    return a1;
  }
  unint64_t v5 = v2 - v3 - 8;
  if (v5 < 8)
  {
    uint64_t v6 = 1;
    uint64_t v7 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v13 = *(void *)v7;
      v7 += 8;
      v6 *= v13;
    }
    while (v7 != v2);
    goto LABEL_9;
  }
  uint64_t v8 = (v5 >> 3) + 1;
  uint64_t v7 = &v3[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v9 = v3 + 8;
  uint64_t v10 = 1;
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v12 = 1;
  do
  {
    v10 *= *(v9 - 1);
    v12 *= *v9;
    v9 += 2;
    v11 -= 2;
  }
  while (v11);
  uint64_t v6 = v12 * v10;
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (v6)
  {
    unint64_t v14 = v2 - v3;
    if (v2 - v3 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = operator new(v2 - v3);
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    if (v14 >> 3 <= 1) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = v14 >> 3;
    }
    uint64_t v17 = a1[8];
    while (1)
    {
      if (v14 < 8)
      {
        uint64_t v18 = 0;
        goto LABEL_24;
      }
      uint64_t v19 = a1[5];
      if (v16 < 2) {
        break;
      }
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = (void *)(v19 + 8);
      uint64_t v24 = v16 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v25 = v15 + 1;
      do
      {
        v21 += *(v23 - 1) * *(v25 - 1);
        v22 += *v23 * *v25;
        v25 += 2;
        v23 += 2;
        v24 -= 2;
      }
      while (v24);
      uint64_t v18 = v22 + v21;
      uint64_t v20 = v16 & 0x1FFFFFFFFFFFFFFELL;
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_22;
      }
LABEL_24:
      *(float *)(v4 + 4 * (v17 + v18)) = -*(float *)(v4 + 4 * (v17 + v18));
      if ((int)(v14 >> 3) >= 1)
      {
        uint64_t v33 = (v14 >> 3) + 1;
        unint64_t v34 = v14 >> 3;
        while (1)
        {
          uint64_t v35 = (v33 - 2);
          unint64_t v36 = v15[v35] + 1;
          v15[v35] = v36;
          if (v36 < *(void *)&v3[v35 * 8]) {
            break;
          }
          v15[(v33 - 2)] = 0;
          LODWORD(v34) = v34 - 1;
          if ((unint64_t)--v33 <= 1) {
            goto LABEL_30;
          }
        }
        if ((int)v34 > 0) {
          continue;
        }
      }
LABEL_30:
      operator delete(v15);
      return a1;
    }
    uint64_t v18 = 0;
    uint64_t v20 = 0;
LABEL_22:
    unint64_t v26 = v16 - v20;
    uint64_t v27 = v20;
    uint64_t v28 = (uint64_t *)(v19 + v27 * 8);
    uint64_t v29 = &v15[v27];
    do
    {
      uint64_t v31 = *v29++;
      uint64_t v30 = v31;
      uint64_t v32 = *v28++;
      v18 += v32 * v30;
      --v26;
    }
    while (v26);
    goto LABEL_24;
  }
  return a1;
}

void sub_1925918D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray_container::visit<nitro::ndarray_container const,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,(void *)0>(nitro::ndarray_container const &,nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192591B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      unint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        unint64_t v15 = v23;
      }
      else {
        unint64_t v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_192591EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t *nitro::ndarray<int>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (char *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == v9) {
    return a1;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - v9) >> 3;
  if (*(void *)v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    uint64_t v15 = *(void *)&v9[8 * v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v8 != v9 && *a1)
  {
    unint64_t v17 = v8 - v9 - 8;
    if (v17 >= 8)
    {
      uint64_t v20 = (v17 >> 3) + 1;
      uint64_t v19 = &v9[8 * (v20 & 0x3FFFFFFFFFFFFFFELL)];
      unsigned __int8 v21 = v9 + 8;
      uint64_t v22 = 1;
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      uint64_t v18 = v24 * v22;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v18) {
          nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v18 = 1;
      uint64_t v19 = (char *)a1[2];
    }
    do
    {
      uint64_t v25 = *(void *)v19;
      v19 += 8;
      v18 *= v25;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925923B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v186 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v84 = 0;
    uint64_t v85 = a2[8];
    unint64_t v86 = v9[1];
    uint64_t v87 = (uint64_t *)a1[5];
    unint64_t v182 = (uint64_t *)a2[5];
    uint64_t v184 = *v182;
    uint64_t v185 = *v87;
    uint64_t v187 = 4 * *v87;
    uint64_t v181 = 4 * a1[8];
    uint64_t v88 = v181 + v18 + 64;
    uint64_t v89 = v85 + 16;
    uint64_t v183 = a1[8];
    uint64_t v90 = v183;
    while (!v86)
    {
LABEL_64:
      v85 += v184;
      ++v84;
      v88 += v187;
      v89 += v184;
      v90 += v185;
      if (v84 == v186) {
        return;
      }
    }
    uint64_t v91 = 0;
    uint64_t v92 = v181 + v187 * v84;
    unint64_t v93 = v9[2];
    uint64_t v94 = *a2;
    uint64_t v95 = a2[5];
    uint64_t v96 = v87[1];
    uint64_t v97 = 4 * v96;
    uint64_t v98 = v182[1];
    unint64_t v189 = v93 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v99 = v93 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v100 = (int8x16_t *)(*a2 + v89);
    uint64_t v101 = v90;
    uint64_t v102 = v85;
    uint64_t v103 = v88;
    while (!v93)
    {
LABEL_67:
      v101 += v96;
      v102 += v98;
      ++v91;
      v103 += v97;
      uint64_t v100 = (int8x16_t *)((char *)v100 + v98);
      if (v91 == v86) {
        goto LABEL_64;
      }
    }
    uint64_t v104 = v87[2];
    uint64_t v105 = *(void *)(v95 + 16);
    if (v93 < 8
      || (v104 == 1 ? (BOOL v106 = v105 == 1) : (BOOL v106 = 0),
          !v106
       || (v18 + v92 + v97 * v91 < v94 + v93 + v85 + v98 * v91
         ? (BOOL v107 = v94 + v102 >= v18 + v187 * v84 + 4 * (v183 + v93) + v97 * v91)
         : (BOOL v107 = 1),
           !v107)))
    {
      unint64_t v109 = 0;
      uint64_t v110 = v102;
      uint64_t v111 = v101;
      goto LABEL_83;
    }
    if (v93 >= 0x20)
    {
      uint64_t v116 = v100;
      uint64_t v117 = (int8x16_t *)v103;
      unint64_t v118 = v93 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v119 = v116[-1];
        int8x16_t v120 = *v116;
        int8x16_t v121 = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v122 = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD3F0);
        int8x16_t v123 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v124 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_192DAD3F0);
        v117[-2] = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD400);
        v117[-1] = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD410);
        a7 = vqtbl1q_s8(v120, (int8x16_t)xmmword_192DAD400);
        v117[-4] = v121;
        v117[-3] = v122;
        v117[2] = a7;
        v117[3] = vqtbl1q_s8(v120, (int8x16_t)xmmword_192DAD410);
        *uint64_t v117 = v123;
        v117[1] = v124;
        v117 += 8;
        v116 += 2;
        v118 -= 32;
      }
      while (v118);
      uint64_t v92 = v181 + v187 * v84;
      if (v93 == v189) {
        goto LABEL_67;
      }
      unint64_t v108 = v93 & 0xFFFFFFFFFFFFFFE0;
      if ((v93 & 0x18) == 0)
      {
        uint64_t v111 = v101 + v189 * v104;
        unint64_t v109 = v93 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v110 = v102 + v189 * v105;
LABEL_83:
        unint64_t v112 = v93 - v109;
        uint64_t v113 = (unsigned __int8 *)(v94 + v110);
        uint64_t v114 = 4 * v104;
        uint64_t v115 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *uint64_t v115 = *v113;
          v113 += v105;
          uint64_t v115 = (_DWORD *)((char *)v115 + v114);
          --v112;
        }
        while (v112);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v108 = 0;
    }
    uint64_t v110 = v102 + v99 * v105;
    uint64_t v111 = v101 + v99 * v104;
    unint64_t v125 = v108 - (v93 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v126 = v94 + v108;
    uint64_t v127 = (int8x16_t *)(v18 + 4 * (v108 + v101));
    do
    {
      a7.i64[0] = *(void *)(v126 + v102);
      int8x16_t v128 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      *uint64_t v127 = v128;
      v127[1] = a7;
      v127 += 2;
      v126 += 8;
      v125 += 8;
    }
    while (v125);
    unint64_t v109 = v93 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = v181 + v187 * v84;
    if (v93 == v99) {
      goto LABEL_67;
    }
    goto LABEL_83;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = 4 * v44 + v18 + 64;
    uint64_t v56 = v43 + *a2 + 16;
    uint64_t v57 = v18 + 4 * v44;
    uint64_t v58 = v18 + 4 * (v44 + v45);
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v55 += v51;
      v56 += v50;
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v59 = v48[1];
    uint64_t v60 = v47[1];
    if (v45 < 8
      || (v59 == 1 ? (BOOL v61 = v60 == 1) : (BOOL v61 = 0),
          !v61
       || (v57 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (BOOL v62 = v46 + v43 >= (unint64_t)(v58 + v51 * v42))
         : (BOOL v62 = 1),
           !v62)))
    {
      unint64_t v64 = 0;
      uint64_t v65 = v43;
      uint64_t v66 = v44;
      goto LABEL_50;
    }
    if (v45 >= 0x20)
    {
      uint64_t v71 = (int8x16_t *)v56;
      uint64_t v72 = (int8x16_t *)v55;
      unint64_t v73 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v74 = v71[-1];
        int8x16_t v75 = *v71;
        int8x16_t v76 = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v77 = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD3F0);
        int8x16_t v78 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v79 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_192DAD3F0);
        v72[-2] = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD400);
        v72[-1] = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD410);
        a7 = vqtbl1q_s8(v75, (int8x16_t)xmmword_192DAD400);
        v72[-4] = v76;
        v72[-3] = v77;
        v72[2] = a7;
        v72[3] = vqtbl1q_s8(v75, (int8x16_t)xmmword_192DAD410);
        int8x16_t *v72 = v78;
        v72[1] = v79;
        v72 += 8;
        v71 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v63 = v45 & 0xFFFFFFFFFFFFFFE0;
      if ((v45 & 0x18) == 0)
      {
        uint64_t v66 = v44 + v53 * v59;
        unint64_t v64 = v45 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v65 = v43 + v53 * v60;
LABEL_50:
        unint64_t v67 = v45 - v64;
        unint64_t v68 = (unsigned __int8 *)(v46 + v65);
        uint64_t v69 = 4 * v59;
        unint64_t v70 = (_DWORD *)(v18 + 4 * v66);
        do
        {
          _DWORD *v70 = *v68;
          v68 += v60;
          unint64_t v70 = (_DWORD *)((char *)v70 + v69);
          --v67;
        }
        while (v67);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v63 = 0;
    }
    uint64_t v65 = v43 + v54 * v60;
    uint64_t v66 = v44 + v54 * v59;
    unint64_t v80 = v63 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v81 = v46 + v63;
    uint64_t v82 = (int8x16_t *)(v18 + 4 * (v63 + v44));
    do
    {
      a7.i64[0] = *(void *)(v81 + v43);
      int8x16_t v83 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      *uint64_t v82 = v83;
      v82[1] = a7;
      v82 += 2;
      v81 += 8;
      v80 += 8;
    }
    while (v80);
    unint64_t v64 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_50;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v129 = operator new(v17);
    bzero(v129, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v130 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v131 = 1;
    }
    else {
      unint64_t v131 = v17 >> 3;
    }
    uint64_t v132 = a2[5];
    uint64_t v133 = a2[8];
    uint64_t v134 = v131 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v135 = a1[5];
    while (v131 >= 2)
    {
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = v131 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v141 = (void *)(v135 + 8);
      uint64_t v142 = v129 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      uint64_t v136 = v139 + v138;
      uint64_t v137 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134) {
        goto LABEL_105;
      }
LABEL_107:
      if (v131 < 2)
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
LABEL_112:
        unint64_t v157 = v131 - v151;
        uint64_t v158 = v151;
        uint64_t v159 = (uint64_t *)(v132 + 8 * v151);
        uint64_t v160 = &v129[v158];
        do
        {
          uint64_t v162 = *v160++;
          uint64_t v161 = v162;
          uint64_t v163 = *v159++;
          v150 += v163 * v161;
          --v157;
        }
        while (v157);
        goto LABEL_114;
      }
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      uint64_t v154 = v131 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v155 = (void *)(v132 + 8);
      uint64_t v156 = v129 + 1;
      do
      {
        v152 += *(v155 - 1) * *(v156 - 1);
        v153 += *v155 * *v156;
        v156 += 2;
        v155 += 2;
        v154 -= 2;
      }
      while (v154);
      uint64_t v150 = v153 + v152;
      uint64_t v151 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134) {
        goto LABEL_112;
      }
LABEL_114:
      *(_DWORD *)(v18 + 4 * v136) = *(unsigned __int8 *)(v130 + v133 + v150);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v164 = (v17 >> 3) + 1;
        int v165 = v17 >> 3;
        while (1)
        {
          uint64_t v166 = (v164 - 2);
          unint64_t v167 = v129[v166] + 1;
          v129[v166] = v167;
          if (v167 < v9[v166]) {
            break;
          }
          v129[(v164 - 2)] = 0;
          --v165;
          if ((unint64_t)--v164 <= 1) {
            goto LABEL_120;
          }
        }
        if (v165 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v129);
      return;
    }
    uint64_t v136 = 0;
    uint64_t v137 = 0;
LABEL_105:
    unint64_t v143 = v131 - v137;
    uint64_t v144 = v137;
    unint64_t v145 = (uint64_t *)(v135 + 8 * v137);
    uint64_t v146 = &v129[v144];
    do
    {
      uint64_t v148 = *v146++;
      uint64_t v147 = v148;
      uint64_t v149 = *v145++;
      v136 += v149 * v147;
      --v143;
    }
    while (v143);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x20)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFE0;
    float32x4_t v168 = (int8x16_t *)(v29 + v31 + 16);
    uint64_t v169 = v18 + 4 * v30 + 64;
    a5.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    unint64_t v170 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      int8x16_t v171 = v168[-1];
      int8x16_t v172 = *v168;
      int8x16_t v173 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_192DAD3E0);
      int8x16_t v174 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_192DAD3F0);
      *(int8x16_t *)(v169 - 32) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD400);
      *(int8x16_t *)(v169 - 16) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD410);
      *(int8x16_t *)(v169 - 64) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD3E0);
      *(int8x16_t *)(v169 - 48) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD3F0);
      *(int8x16_t *)(v169 + 32) = vqtbl1q_s8(v172, (int8x16_t)xmmword_192DAD400);
      *(int8x16_t *)(v169 + 48) = vqtbl1q_s8(v172, (int8x16_t)xmmword_192DAD410);
      *(int8x16_t *)uint64_t v169 = v173;
      *(int8x16_t *)(v169 + 16) = v174;
      v169 += 128;
      v168 += 2;
      v170 -= 32;
    }
    while (v170);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 0x18) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned __int8 *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      uint64_t v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *uint64_t v40 = *v38;
        v38 += v33;
        uint64_t v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v175 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = v175 - (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v177 = (unint64_t *)(v31 + v175 + v29);
  uint64_t v178 = (int8x16_t *)(v18 + 4 * (v175 + v30));
  do
  {
    unint64_t v179 = *v177++;
    a5.i64[0] = v179;
    int8x16_t v180 = vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0);
    a5 = vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0);
    *uint64_t v178 = v180;
    v178[1] = a5;
    v178 += 2;
    v176 += 8;
  }
  while (v176);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_192592D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192592EAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192592EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192592EB8);
}

void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192593168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<unsigned char,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(int &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925932F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192593304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925932FCLL);
}

uint64_t *nitro::ndarray<half>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, float16x8_t a3)
{
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = (v4 - v5) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3) {
    goto LABEL_13;
  }
  if (v4 == v5) {
    return a1;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v5[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v4 != v5 && *a1)
  {
    unint64_t v13 = v4 - v5 - 8;
    if (v13 >= 8)
    {
      uint64_t v16 = (v13 >> 3) + 1;
      std::locale v15 = &v5[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
      size_t v17 = v5 + 8;
      uint64_t v18 = 1;
      uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v20 = 1;
      do
      {
        v18 *= *(v17 - 1);
        v20 *= *v17;
        v17 += 2;
        v19 -= 2;
      }
      while (v19);
      uint64_t v14 = v20 * v18;
      if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v14) {
          nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(a1, a2, a3);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v14 = 1;
      std::locale v15 = (char *)a1[2];
    }
    do
    {
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v4);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925936EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float16x8_t nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float16x8_t result)
{
  uint64_t v5 = (unint64_t *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = (v4 - (char *)v5) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3) {
    goto LABEL_13;
  }
  if (v4 == (char *)v5) {
    return result;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v4 - (char *)v5) >> 3;
  if (*v5 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    unint64_t v11 = v5[v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v13 = v4 - (char *)v5;
  if (v4 == (char *)v5) {
    return result;
  }
  uint64_t v14 = *a1;
  if (!*a1) {
    return result;
  }
  if (v13 - 8 < 8)
  {
    uint64_t v15 = 1;
    uint64_t v16 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v22 = *v16++;
      v15 *= v22;
    }
    while (v16 != (unint64_t *)v4);
    goto LABEL_21;
  }
  unint64_t v17 = ((v13 - 8) >> 3) + 1;
  uint64_t v16 = &v5[v17 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v18 = v5 + 1;
  uint64_t v19 = 1;
  uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v21 = 1;
  do
  {
    v19 *= *(v18 - 1);
    v21 *= *v18;
    v18 += 2;
    v20 -= 2;
  }
  while (v20);
  uint64_t v15 = v21 * v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v15) {
    return result;
  }
  uint64_t v23 = (uint64_t)v13 >> 3;
  if ((uint64_t)v13 >> 3 == 3)
  {
    unint64_t v171 = *v5;
    if (!*v5) {
      return result;
    }
    uint64_t v76 = 0;
    uint64_t v77 = a2[8];
    unint64_t v78 = v5[1];
    int8x16_t v79 = (uint64_t *)a1[5];
    unint64_t v167 = (uint64_t *)a2[5];
    uint64_t v168 = a1[8];
    uint64_t v169 = *v167;
    uint64_t v170 = *v79;
    uint64_t v172 = 2 * *v79;
    uint64_t v80 = 2 * v168 + v14 + 32;
    uint64_t v81 = v77 + 16;
    uint64_t v82 = v168;
    while (!v78)
    {
LABEL_64:
      v77 += v169;
      ++v76;
      v80 += v172;
      v81 += v169;
      v82 += v170;
      if (v76 == v171) {
        return result;
      }
    }
    uint64_t v83 = 0;
    unint64_t v84 = v5[2];
    uint64_t v85 = *a2;
    uint64_t v86 = a2[5];
    uint64_t v87 = v79[1];
    uint64_t v88 = 2 * v87;
    uint64_t v89 = v167[1];
    unint64_t v174 = v84 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v90 = v84 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v91 = (uint8x8_t *)(*a2 + v81);
    uint64_t v92 = v82;
    uint64_t v93 = v77;
    uint64_t v94 = v80;
    while (!v84)
    {
LABEL_67:
      v92 += v87;
      v93 += v89;
      ++v83;
      v94 += v88;
      uint64_t v91 = (uint8x8_t *)((char *)v91 + v89);
      if (v83 == v78) {
        goto LABEL_64;
      }
    }
    uint64_t v95 = v79[2];
    uint64_t v96 = *(void *)(v86 + 16);
    if (v84 < 8
      || (v95 == 1 ? (BOOL v97 = v96 == 1) : (BOOL v97 = 0),
          !v97
       || (v14 + 2 * v168 + v172 * v76 + v88 * v83 < v85 + v84 + v77 + v89 * v83
         ? (BOOL v98 = v85 + v93 >= v14 + v172 * v76 + 2 * (v168 + v84) + v88 * v83)
         : (BOOL v98 = 1),
           !v98)))
    {
      unint64_t v100 = 0;
      uint64_t v101 = v93;
      uint64_t v102 = v92;
      goto LABEL_83;
    }
    if (v84 >= 0x20)
    {
      BOOL v107 = v91;
      unint64_t v108 = (float16x8_t *)v94;
      unint64_t v109 = v84 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v110 = *(uint8x16_t *)v107[-2].i8;
        float16x8_t v111 = vcvtq_f16_u16(vmovl_u8(*v107));
        uint16x8_t v112 = vmovl_high_u8(*(uint8x16_t *)v107->i8);
        v108[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v110.i8));
        v108[-1] = vcvtq_f16_u16(vmovl_high_u8(v110));
        float32x4_t result = vcvtq_f16_u16(v112);
        *unint64_t v108 = v111;
        v108[1] = result;
        v108 += 4;
        v107 += 4;
        v109 -= 32;
      }
      while (v109);
      if (v84 == v174) {
        goto LABEL_67;
      }
      unint64_t v99 = v84 & 0xFFFFFFFFFFFFFFE0;
      if ((v84 & 0x18) == 0)
      {
        uint64_t v102 = v92 + v174 * v95;
        unint64_t v100 = v84 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v101 = v93 + v174 * v96;
LABEL_83:
        unint64_t v103 = v84 - v100;
        uint64_t v104 = (__int8 *)(v85 + v101);
        uint64_t v105 = 2 * v95;
        BOOL v106 = (_WORD *)(v14 + 2 * v102);
        do
        {
          result.i8[0] = *v104;
          *(short float *)result.i16 = (short float)result.u16[0];
          *BOOL v106 = result.i16[0];
          v104 += v96;
          BOOL v106 = (_WORD *)((char *)v106 + v105);
          --v103;
        }
        while (v103);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v99 = 0;
    }
    uint64_t v101 = v93 + v90 * v96;
    uint64_t v102 = v92 + v90 * v95;
    unint64_t v113 = v99 - (v84 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = v85 + v99;
    uint64_t v115 = (float16x8_t *)(v14 + 2 * (v99 + v92));
    do
    {
      float32x4_t result = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)(v114 + v93)));
      *v115++ = result;
      v114 += 8;
      v113 += 8;
    }
    while (v113);
    unint64_t v100 = v84 & 0xFFFFFFFFFFFFFFF8;
    if (v84 == v90) {
      goto LABEL_67;
    }
    goto LABEL_83;
  }
  if (v23 == 2)
  {
    unint64_t v37 = *v5;
    if (!*v5) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v5[1];
    uint64_t v42 = *a2;
    uint64_t v43 = (uint64_t *)a2[5];
    uint64_t v44 = (uint64_t *)a1[5];
    uint64_t v45 = *v44;
    uint64_t v46 = 2 * *v44;
    uint64_t v47 = v39 + v41;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v49 = v41 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = 2 * v40 + v14 + 32;
    uint64_t v51 = *v43;
    uint64_t v52 = v39 + *a2 + 16;
    uint64_t v53 = v14 + 2 * v40;
    uint64_t v54 = v14 + 2 * (v40 + v41);
    while (!v41)
    {
LABEL_34:
      v40 += v45;
      v39 += v51;
      ++v38;
      v50 += v46;
      v52 += v51;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v55 = v44[1];
    uint64_t v56 = v43[1];
    if (v41 < 8
      || (v55 == 1 ? (BOOL v57 = v56 == 1) : (BOOL v57 = 0),
          !v57
       || (v53 + v46 * v38 < (unint64_t)(v42 + v47 + v51 * v38)
         ? (BOOL v58 = v42 + v39 >= (unint64_t)(v54 + v46 * v38))
         : (BOOL v58 = 1),
           !v58)))
    {
      unint64_t v60 = 0;
      uint64_t v61 = v39;
      uint64_t v62 = v40;
      goto LABEL_50;
    }
    if (v41 >= 0x20)
    {
      unint64_t v67 = (uint8x8_t *)v52;
      unint64_t v68 = (float16x8_t *)v50;
      unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v70 = *(uint8x16_t *)v67[-2].i8;
        float16x8_t v71 = vcvtq_f16_u16(vmovl_u8(*v67));
        uint16x8_t v72 = vmovl_high_u8(*(uint8x16_t *)v67->i8);
        v68[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v70.i8));
        v68[-1] = vcvtq_f16_u16(vmovl_high_u8(v70));
        float32x4_t result = vcvtq_f16_u16(v72);
        *unint64_t v68 = v71;
        v68[1] = result;
        v68 += 4;
        v67 += 4;
        v69 -= 32;
      }
      while (v69);
      if (v41 == v48) {
        goto LABEL_34;
      }
      unint64_t v59 = v41 & 0xFFFFFFFFFFFFFFE0;
      if ((v41 & 0x18) == 0)
      {
        uint64_t v62 = v40 + v48 * v55;
        unint64_t v60 = v41 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v61 = v39 + v48 * v56;
LABEL_50:
        unint64_t v63 = v41 - v60;
        unint64_t v64 = (__int8 *)(v42 + v61);
        uint64_t v65 = 2 * v55;
        uint64_t v66 = (_WORD *)(v14 + 2 * v62);
        do
        {
          result.i8[0] = *v64;
          *(short float *)result.i16 = (short float)result.u16[0];
          *uint64_t v66 = result.i16[0];
          v64 += v56;
          uint64_t v66 = (_WORD *)((char *)v66 + v65);
          --v63;
        }
        while (v63);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v59 = 0;
    }
    uint64_t v61 = v39 + v49 * v56;
    uint64_t v62 = v40 + v49 * v55;
    unint64_t v73 = v59 - (v41 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v74 = v42 + v59;
    int8x16_t v75 = (float16x8_t *)(v14 + 2 * (v59 + v40));
    do
    {
      float32x4_t result = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)(v74 + v39)));
      *v75++ = result;
      v74 += 8;
      v73 += 8;
    }
    while (v73);
    unint64_t v60 = v41 & 0xFFFFFFFFFFFFFFF8;
    if (v41 == v49) {
      goto LABEL_34;
    }
    goto LABEL_50;
  }
  if (v23 != 1)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v116 = operator new(v13);
    bzero(v116, v13 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v118 = *a2;
    if (v13 >> 3 <= 1) {
      unint64_t v119 = 1;
    }
    else {
      unint64_t v119 = v13 >> 3;
    }
    uint64_t v120 = a2[5];
    uint64_t v121 = a2[8];
    uint64_t v122 = v119 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v123 = a1[5];
    while (v119 >= 2)
    {
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = v119 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v129 = (void *)(v123 + 8);
      uint64_t v130 = v116 + 1;
      do
      {
        v126 += *(v129 - 1) * *(v130 - 1);
        v127 += *v129 * *v130;
        v130 += 2;
        v129 += 2;
        v128 -= 2;
      }
      while (v128);
      uint64_t v124 = v127 + v126;
      uint64_t v125 = v119 & 0x1FFFFFFFFFFFFFFELL;
      if (v119 != v122) {
        goto LABEL_105;
      }
LABEL_107:
      if (v119 < 2)
      {
        uint64_t v138 = 0;
        uint64_t v139 = 0;
LABEL_112:
        unint64_t v145 = v119 - v139;
        uint64_t v146 = v139;
        uint64_t v147 = (uint64_t *)(v120 + 8 * v139);
        uint64_t v148 = &v116[v146];
        do
        {
          uint64_t v150 = *v148++;
          uint64_t v149 = v150;
          uint64_t v151 = *v147++;
          v138 += v151 * v149;
          --v145;
        }
        while (v145);
        goto LABEL_114;
      }
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v142 = v119 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v143 = (void *)(v120 + 8);
      uint64_t v144 = v116 + 1;
      do
      {
        v140 += *(v143 - 1) * *(v144 - 1);
        v141 += *v143 * *v144;
        v144 += 2;
        v143 += 2;
        v142 -= 2;
      }
      while (v142);
      uint64_t v138 = v141 + v140;
      uint64_t v139 = v119 & 0x1FFFFFFFFFFFFFFELL;
      if (v119 != v122) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v117) = *(unsigned char *)(v118 + v121 + v138);
      short float v117 = (short float)LOWORD(v117);
      *(short float *)(v14 + 2 * v124) = v117;
      if ((int)(v13 >> 3) >= 1)
      {
        uint64_t v152 = (v13 >> 3) + 1;
        int v153 = v13 >> 3;
        while (1)
        {
          uint64_t v154 = (v152 - 2);
          unint64_t v155 = v116[v154] + 1;
          v116[v154] = v155;
          if (v155 < v5[v154]) {
            break;
          }
          v116[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1) {
            goto LABEL_120;
          }
        }
        if (v153 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v116);
      return result;
    }
    uint64_t v124 = 0;
    uint64_t v125 = 0;
LABEL_105:
    unint64_t v131 = v119 - v125;
    uint64_t v132 = v125;
    uint64_t v133 = (uint64_t *)(v123 + 8 * v125);
    uint64_t v134 = &v116[v132];
    do
    {
      uint64_t v136 = *v134++;
      uint64_t v135 = v136;
      uint64_t v137 = *v133++;
      v124 += v137 * v135;
      --v131;
    }
    while (v131);
    goto LABEL_107;
  }
  unint64_t v24 = *v5;
  if (!*v5) {
    return result;
  }
  uint64_t v25 = a2[8];
  uint64_t v26 = a1[8];
  uint64_t v27 = *a2;
  uint64_t v28 = *(void *)a1[5];
  uint64_t v29 = *(void *)a2[5];
  if (v24 < 8) {
    goto LABEL_27;
  }
  unint64_t v30 = 0;
  if (v28 != 1 || v29 != 1) {
    goto LABEL_28;
  }
  if (v14 + 2 * v26 < v27 + v24 + v25 && v27 + v25 < v14 + 2 * (v24 + v26))
  {
LABEL_27:
    unint64_t v30 = 0;
LABEL_28:
    uint64_t v31 = a2[8];
    uint64_t v32 = a1[8];
    goto LABEL_29;
  }
  if (v24 >= 0x20)
  {
    unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v156 = (uint8x8_t *)(v25 + v27 + 16);
    uint64_t v157 = v14 + 2 * v26 + 32;
    unint64_t v158 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      uint8x16_t v159 = *(uint8x16_t *)v156[-2].i8;
      float16x8_t v160 = vcvtq_f16_u16(vmovl_u8(*v156));
      uint16x8_t v161 = vmovl_high_u8(*(uint8x16_t *)v156->i8);
      *(float16x8_t *)(v157 - 32) = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v159.i8));
      *(float16x8_t *)(v157 - 16) = vcvtq_f16_u16(vmovl_high_u8(v159));
      float32x4_t result = vcvtq_f16_u16(v161);
      *(float16x8_t *)uint64_t v157 = v160;
      *(float16x8_t *)(v157 + 16) = result;
      v157 += 64;
      v156 += 4;
      v158 -= 32;
    }
    while (v158);
    if (v24 == v30) {
      return result;
    }
    if ((v24 & 0x18) == 0)
    {
      uint64_t v32 = v26 + v30;
      uint64_t v31 = v25 + v30;
LABEL_29:
      unint64_t v33 = v24 - v30;
      unint64_t v34 = (__int8 *)(v27 + v31);
      uint64_t v35 = 2 * v28;
      uint64_t v36 = (_WORD *)(v14 + 2 * v32);
      do
      {
        result.i8[0] = *v34;
        *(short float *)result.i16 = (short float)result.u16[0];
        *uint64_t v36 = result.i16[0];
        v34 += v29;
        uint64_t v36 = (_WORD *)((char *)v36 + v35);
        --v33;
      }
      while (v33);
      return result;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  unint64_t v162 = v30;
  unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = v25 + (v24 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = v26 + (v24 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v163 = v162 - (v24 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v164 = (uint8x8_t *)(v27 + v162 + v25);
  int v165 = (float16x8_t *)(v14 + 2 * (v162 + v26));
  do
  {
    uint8x8_t v166 = *v164++;
    float32x4_t result = vcvtq_f16_u16(vmovl_u8(v166));
    *v165++ = result;
    v163 += 8;
  }
  while (v163);
  if (v24 != v30) {
    goto LABEL_29;
  }
  return result;
}

void sub_192594008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259416C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192594180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192594178);
}

void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192594428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<unsigned char,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(half &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925945B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925945C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925945BCLL);
}

uint64_t *nitro::ndarray<float>::assign<unsigned char>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (char *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == v9) {
    return a1;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - v9) >> 3;
  if (*(void *)v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    uint64_t v15 = *(void *)&v9[8 * v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()();
  if (v8 != v9 && *a1)
  {
    unint64_t v17 = v8 - v9 - 8;
    if (v17 >= 8)
    {
      uint64_t v20 = (v17 >> 3) + 1;
      uint64_t v19 = &v9[8 * (v20 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v21 = v9 + 8;
      uint64_t v22 = 1;
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v24 = 1;
      do
      {
        v22 *= *(v21 - 1);
        v24 *= *v21;
        v21 += 2;
        v23 -= 2;
      }
      while (v23);
      uint64_t v18 = v24 * v22;
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v18) {
          nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(a1, a2, a3, a4, a5, a6, a7);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v18 = 1;
      uint64_t v19 = (char *)a1[2];
    }
    do
    {
      uint64_t v25 = *(void *)v19;
      v19 += 8;
      v18 *= v25;
    }
    while (v19 != v8);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925949AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192594B34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192594B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192594B40);
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192594DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192594F78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192594F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192594F84);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925951F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::assign<int>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (void)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925956F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = *(_DWORD *)(*a2 + 4 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = *(_DWORD *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          int8x16_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint8x16_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint16x8_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = *(_DWORD *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = *(_DWORD *)(*a2 + 4 * v33);
            unint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          unint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192595C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192595D70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192595D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192595D7CLL);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259602C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<int,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<int>(nitro::ndarray<int> const&)::{lambda(unsigned char &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925961B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925961C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925961C0);
}

uint64_t *nitro::ndarray<half>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<half>::pairwise_element_visitor<int,nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(half &,int const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259646C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192596480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192596478);
}

uint64_t *nitro::ndarray<float>::assign<int>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192596868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    unint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = (int32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (float32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (BOOL v85 = v83 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          uint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            float32x4_t v97 = vcvtq_f32_s32(*v94);
            v95[-1] = vcvtq_f32_s32(v94[-1]);
            *uint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        unint64_t v90 = (int *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (float *)(v13 + 4 * v88);
        do
        {
          *uint64_t v93 = (float)*v90;
          unint64_t v90 = (int *)((char *)v90 + v91);
          uint64_t v93 = (float *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (float32x4_t *)((char *)v80 + 4 * v76);
      uint64_t v78 = (int32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          uint64_t v61 = (int32x4_t *)v48;
          uint64_t v62 = (_OWORD *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float32x4_t v64 = vcvtq_f32_s32(*v61);
            *(v62 - 1) = vcvtq_f32_s32(v61[-1]);
            *uint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        BOOL v57 = (int *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        unint64_t v60 = (float *)(v13 + 4 * v55);
        do
        {
          float *v60 = (float)*v57;
          BOOL v57 = (int *)((char *)v57 + v58);
          unint64_t v60 = (float *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint8x16_t v110 = (void *)(v104 + 8);
      float16x8_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(float *)(v13 + 4 * v105) = (float)*(int *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    uint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (float *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = (float)*v31;
      uint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (float *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (int32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (float32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v142 = vcvtq_f32_s32(*v139);
    v140[-1] = vcvtq_f32_s32(v139[-1]);
    float32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_192596F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925970AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925970C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925970B8);
}

void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<int,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<int>(nitro::ndarray<int> const&)::{lambda(float &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192597368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192597634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = (int)*(short float *)(*a2 + 2 * v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                uint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              uint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          uint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = (int)*(short float *)(*a2 + 2 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        BOOL v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          uint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = (int)*(short float *)(*a2 + 2 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = (int)*(short float *)(*a2 + 2 * v33);
            unint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          unint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_192597B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192597CC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192597CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192597CCCLL);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<half,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<half>(nitro::ndarray<half> const&)::{lambda(unsigned char &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192597E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192597E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192597E44);
}

uint64_t *nitro::ndarray<int>::assign<half>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192598234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v154 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v67 = 0;
    uint64_t v68 = a2[8];
    uint64_t v69 = a1[8];
    unint64_t v70 = v4[1];
    unint64_t v71 = (uint64_t *)a1[5];
    uint64_t v149 = (uint64_t *)a2[5];
    uint64_t v72 = v13 + 4 * v69 + 32;
    uint64_t v152 = *v149;
    uint64_t v153 = *v71;
    uint64_t v151 = 4 * *v71;
    uint64_t v73 = 2 * v68 + 16;
    uint64_t v150 = 2 * *v149;
    while (!v70)
    {
LABEL_50:
      v69 += v153;
      v68 += v152;
      ++v67;
      v72 += v151;
      v73 += v150;
      if (v67 == v154) {
        return;
      }
    }
    uint64_t v74 = 0;
    unint64_t v75 = v4[2];
    uint64_t v76 = *a2;
    uint64_t v77 = a2[5];
    uint64_t v78 = v71[1];
    unint64_t v79 = v75 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v80 = (float16x4_t *)(*a2 + v73);
    uint64_t v81 = v149[1];
    uint64_t v82 = v72;
    uint64_t v83 = v68;
    uint64_t v84 = v69;
    while (1)
    {
      if (v75)
      {
        uint64_t v85 = v71[2];
        uint64_t v86 = *(void *)(v77 + 16);
        if (v75 >= 0x10 && (v86 == 1 ? (BOOL v87 = v85 == 1) : (BOOL v87 = 0), v87))
        {
          uint64_t v89 = v83 + v79 * v86;
          unint64_t v96 = v80;
          float32x4_t v97 = (int32x4_t *)v82;
          unint64_t v98 = v75 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v90 = v84 + v79 * v85;
          do
          {
            float16x8_t v99 = *(float16x8_t *)v96[-2].i8;
            int32x4_t v100 = vcvtq_s32_f32(vcvtq_f32_f16(*v96));
            float32x4_t v101 = vcvt_hight_f32_f16(*(float16x8_t *)v96->i8);
            v97[-2] = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v99.i8));
            v97[-1] = vcvtq_s32_f32(vcvt_hight_f32_f16(v99));
            *float32x4_t v97 = v100;
            v97[1] = vcvtq_s32_f32(v101);
            v97 += 4;
            v96 += 4;
            v98 -= 16;
          }
          while (v98);
          unint64_t v88 = v75 & 0xFFFFFFFFFFFFFFF0;
          if (v75 == v79) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v88 = 0;
          uint64_t v89 = v83;
          uint64_t v90 = v84;
        }
        unint64_t v91 = v75 - v88;
        uint64_t v92 = (short float *)(v76 + 2 * v89);
        uint64_t v93 = 2 * v86;
        uint64_t v94 = 4 * v85;
        uint64_t v95 = (_DWORD *)(v13 + 4 * v90);
        do
        {
          *uint64_t v95 = (int)*v92;
          uint64_t v92 = (short float *)((char *)v92 + v93);
          uint64_t v95 = (_DWORD *)((char *)v95 + v94);
          --v91;
        }
        while (v91);
      }
LABEL_53:
      v84 += v78;
      v83 += v81;
      ++v74;
      v82 += 4 * v78;
      uint64_t v80 = (float16x4_t *)((char *)v80 + 2 * v81);
      if (v74 == v70) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v46 = v13 + 4 * v38 + 32;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 2 * v37 + 16;
    uint64_t v49 = 2 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 0x10 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          uint64_t v61 = (float16x4_t *)v48;
          uint64_t v62 = (int32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float16x8_t v64 = *(float16x8_t *)v61[-2].i8;
            int32x4_t v65 = vcvtq_s32_f32(vcvtq_f32_f16(*v61));
            float32x4_t v66 = vcvt_hight_f32_f16(*(float16x8_t *)v61->i8);
            v62[-2] = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v64.i8));
            v62[-1] = vcvtq_s32_f32(vcvt_hight_f32_f16(v64));
            *uint64_t v62 = v65;
            v62[1] = vcvtq_s32_f32(v66);
            v62 += 4;
            v61 += 4;
            v63 -= 16;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF0;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        BOOL v57 = (short float *)(v40 + 2 * v54);
        uint64_t v58 = 2 * v51;
        uint64_t v59 = 4 * v50;
        unint64_t v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          _DWORD *v60 = (int)*v57;
          BOOL v57 = (short float *)((char *)v57 + v58);
          unint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v102 = operator new(v12);
    bzero(v102, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v103 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v104 = 1;
    }
    else {
      unint64_t v104 = v12 >> 3;
    }
    uint64_t v105 = a2[5];
    uint64_t v106 = a2[8];
    uint64_t v107 = v104 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v108 = a1[5];
    while (v104 >= 2)
    {
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v113 = v104 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v114 = (void *)(v108 + 8);
      uint64_t v115 = v102 + 1;
      do
      {
        v111 += *(v114 - 1) * *(v115 - 1);
        v112 += *v114 * *v115;
        v115 += 2;
        v114 += 2;
        v113 -= 2;
      }
      while (v113);
      uint64_t v109 = v112 + v111;
      uint64_t v110 = v104 & 0x1FFFFFFFFFFFFFFELL;
      if (v104 != v107) {
        goto LABEL_78;
      }
LABEL_80:
      if (v104 < 2)
      {
        uint64_t v123 = 0;
        uint64_t v124 = 0;
LABEL_85:
        unint64_t v130 = v104 - v124;
        uint64_t v131 = v124;
        uint64_t v132 = (uint64_t *)(v105 + 8 * v124);
        uint64_t v133 = &v102[v131];
        do
        {
          uint64_t v135 = *v133++;
          uint64_t v134 = v135;
          uint64_t v136 = *v132++;
          v123 += v136 * v134;
          --v130;
        }
        while (v130);
        goto LABEL_87;
      }
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = v104 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v128 = (void *)(v105 + 8);
      uint64_t v129 = v102 + 1;
      do
      {
        v125 += *(v128 - 1) * *(v129 - 1);
        v126 += *v128 * *v129;
        v129 += 2;
        v128 += 2;
        v127 -= 2;
      }
      while (v127);
      uint64_t v123 = v126 + v125;
      uint64_t v124 = v104 & 0x1FFFFFFFFFFFFFFELL;
      if (v104 != v107) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v109) = (int)*(short float *)(v103 + 2 * (v106 + v123));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v137 = (v12 >> 3) + 1;
        int v138 = v12 >> 3;
        while (1)
        {
          uint64_t v139 = (v137 - 2);
          unint64_t v140 = v102[v139] + 1;
          v102[v139] = v140;
          if (v140 < v4[v139]) {
            break;
          }
          v102[(v137 - 2)] = 0;
          --v138;
          if ((unint64_t)--v137 <= 1) {
            goto LABEL_93;
          }
        }
        if (v138 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v102);
      return;
    }
    uint64_t v109 = 0;
    uint64_t v110 = 0;
LABEL_78:
    unint64_t v116 = v104 - v110;
    uint64_t v117 = v110;
    uint64_t v118 = (uint64_t *)(v108 + 8 * v110);
    uint64_t v119 = &v102[v117];
    do
    {
      uint64_t v121 = *v119++;
      uint64_t v120 = v121;
      uint64_t v122 = *v118++;
      v109 += v122 * v120;
      --v116;
    }
    while (v116);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (short float *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = (int)*v31;
      uint64_t v31 = (short float *)((char *)v31 + v32);
      uint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v141 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  unint64_t v143 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v144 = v13 + 4 * v25 + 32;
  unint64_t v145 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v146 = *(float16x8_t *)v143[-2].i8;
    int32x4_t v147 = vcvtq_s32_f32(vcvtq_f32_f16(*v143));
    float32x4_t v148 = vcvt_hight_f32_f16(*(float16x8_t *)v143->i8);
    *(int32x4_t *)(v144 - 32) = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v146.i8));
    *(int32x4_t *)(v144 - 16) = vcvtq_s32_f32(vcvt_hight_f32_f16(v146));
    *(int32x4_t *)uint64_t v144 = v147;
    *(int32x4_t *)(v144 + 16) = vcvtq_s32_f32(v148);
    v144 += 64;
    v143 += 4;
    v145 -= 16;
  }
  while (v145);
  uint64_t v24 = v141;
  uint64_t v25 = v142;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19259895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192598AC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192598AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192598ACCLL);
}

void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192598D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<half,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<half>(nitro::ndarray<half> const&)::{lambda(int &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192598F04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192598F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192598F10);
}

uint64_t *nitro::ndarray<float>::assign<half>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192599300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v165 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v74 = 0;
    uint64_t v75 = a2[8];
    uint64_t v76 = a1[8];
    unint64_t v77 = v4[1];
    uint64_t v78 = (uint64_t *)a1[5];
    float16x8_t v160 = (uint64_t *)a2[5];
    uint64_t v79 = v13 + 4 * v76 + 32;
    uint64_t v163 = *v160;
    uint64_t v164 = *v78;
    uint64_t v162 = 4 * *v78;
    uint64_t v80 = 2 * v75 + 16;
    uint64_t v161 = 2 * *v160;
    while (!v77)
    {
LABEL_50:
      v76 += v164;
      v75 += v163;
      ++v74;
      v79 += v162;
      v80 += v161;
      if (v74 == v165) {
        return;
      }
    }
    uint64_t v81 = 0;
    unint64_t v82 = v4[2];
    uint64_t v83 = *a2;
    uint64_t v84 = a2[5];
    uint64_t v85 = v78[1];
    unint64_t v86 = v82 & 0xFFFFFFFFFFFFFFF0;
    BOOL v87 = (float16x4_t *)(*a2 + v80);
    uint64_t v88 = v160[1];
    uint64_t v89 = (float32x4_t *)v79;
    uint64_t v90 = v75;
    uint64_t v91 = v76;
    while (1)
    {
      if (v82)
      {
        uint64_t v92 = v78[2];
        uint64_t v93 = *(void *)(v84 + 16);
        if (v82 >= 0x10 && (v93 == 1 ? (BOOL v94 = v92 == 1) : (BOOL v94 = 0), v94))
        {
          uint64_t v96 = v90 + v86 * v93;
          uint64_t v105 = v87;
          uint64_t v106 = v89;
          unint64_t v107 = v82 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v97 = v91 + v86 * v92;
          do
          {
            float16x8_t v108 = *(float16x8_t *)v105[-2].i8;
            float32x4_t v109 = vcvtq_f32_f16(*v105);
            float32x4_t v110 = vcvt_hight_f32_f16(*(float16x8_t *)v105->i8);
            v106[-2] = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
            v106[-1] = vcvt_hight_f32_f16(v108);
            *uint64_t v106 = v109;
            v106[1] = v110;
            v106 += 4;
            v105 += 4;
            v107 -= 16;
          }
          while (v107);
          unint64_t v95 = v82 & 0xFFFFFFFFFFFFFFF0;
          if (v82 == v86) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v95 = 0;
          uint64_t v96 = v90;
          uint64_t v97 = v91;
        }
        unint64_t v98 = v82 - v95;
        float16x8_t v99 = (__int16 *)(v83 + 2 * v96);
        uint64_t v100 = 2 * v93;
        uint64_t v101 = 4 * v92;
        uint64_t v102 = (_DWORD *)(v13 + 4 * v97);
        do
        {
          _H0 = *v99;
          __asm { FCVT            S0, H0 }
          *uint64_t v102 = _S0;
          float16x8_t v99 = (__int16 *)((char *)v99 + v100);
          uint64_t v102 = (_DWORD *)((char *)v102 + v101);
          --v98;
        }
        while (v98);
      }
LABEL_53:
      v91 += v85;
      v90 += v88;
      ++v81;
      uint64_t v89 = (float32x4_t *)((char *)v89 + 4 * v85);
      BOOL v87 = (float16x4_t *)((char *)v87 + 2 * v88);
      if (v81 == v77) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v40 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v41 = 0;
    uint64_t v42 = a2[8];
    uint64_t v43 = a1[8];
    unint64_t v44 = v4[1];
    uint64_t v45 = *a2;
    uint64_t v46 = (uint64_t *)a2[5];
    uint64_t v47 = (uint64_t *)a1[5];
    uint64_t v48 = *v47;
    uint64_t v49 = *v46;
    unint64_t v50 = v44 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v51 = v13 + 4 * v43 + 32;
    uint64_t v52 = 4 * *v47;
    uint64_t v53 = *a2 + 2 * v42 + 16;
    uint64_t v54 = 2 * *v46;
    while (1)
    {
      if (v44)
      {
        uint64_t v55 = v47[1];
        uint64_t v56 = v46[1];
        if (v44 >= 0x10 && (v56 == 1 ? (_ZF = v55 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v59 = v42 + v50 * v56;
          uint64_t v68 = (float16x4_t *)v53;
          uint64_t v69 = (_OWORD *)v51;
          unint64_t v70 = v44 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v60 = v43 + v50 * v55;
          do
          {
            float16x8_t v71 = *(float16x8_t *)v68[-2].i8;
            float32x4_t v72 = vcvtq_f32_f16(*v68);
            float32x4_t v73 = vcvt_hight_f32_f16(*(float16x8_t *)v68->i8);
            *(v69 - 2) = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
            *(v69 - 1) = vcvt_hight_f32_f16(v71);
            *uint64_t v69 = v72;
            v69[1] = v73;
            v69 += 4;
            v68 += 4;
            v70 -= 16;
          }
          while (v70);
          unint64_t v58 = v44 & 0xFFFFFFFFFFFFFFF0;
          if (v44 == v50) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v58 = 0;
          uint64_t v59 = v42;
          uint64_t v60 = v43;
        }
        unint64_t v61 = v44 - v58;
        uint64_t v62 = (__int16 *)(v45 + 2 * v59);
        uint64_t v63 = 2 * v56;
        uint64_t v64 = 4 * v55;
        int32x4_t v65 = (_DWORD *)(v13 + 4 * v60);
        do
        {
          _H0 = *v62;
          __asm { FCVT            S0, H0 }
          *int32x4_t v65 = _S0;
          uint64_t v62 = (__int16 *)((char *)v62 + v63);
          int32x4_t v65 = (_DWORD *)((char *)v65 + v64);
          --v61;
        }
        while (v61);
      }
LABEL_33:
      v43 += v48;
      v42 += v49;
      ++v41;
      v51 += v52;
      v53 += v54;
      if (v41 == v40) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v111 = operator new(v12);
    bzero(v111, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v112 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v113 = 1;
    }
    else {
      unint64_t v113 = v12 >> 3;
    }
    uint64_t v114 = a2[5];
    uint64_t v115 = a2[8];
    uint64_t v116 = v113 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v117 = a1[5];
    while (v113 >= 2)
    {
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      uint64_t v122 = v113 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v123 = (void *)(v117 + 8);
      uint64_t v124 = v111 + 1;
      do
      {
        v120 += *(v123 - 1) * *(v124 - 1);
        v121 += *v123 * *v124;
        v124 += 2;
        v123 += 2;
        v122 -= 2;
      }
      while (v122);
      uint64_t v118 = v121 + v120;
      uint64_t v119 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116) {
        goto LABEL_78;
      }
LABEL_80:
      if (v113 < 2)
      {
        uint64_t v132 = 0;
        uint64_t v133 = 0;
LABEL_85:
        unint64_t v139 = v113 - v133;
        uint64_t v140 = v133;
        uint64_t v141 = (uint64_t *)(v114 + 8 * v133);
        uint64_t v142 = &v111[v140];
        do
        {
          uint64_t v144 = *v142++;
          uint64_t v143 = v144;
          uint64_t v145 = *v141++;
          v132 += v145 * v143;
          --v139;
        }
        while (v139);
        goto LABEL_87;
      }
      uint64_t v134 = 0;
      uint64_t v135 = 0;
      uint64_t v136 = v113 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v137 = (void *)(v114 + 8);
      int v138 = v111 + 1;
      do
      {
        v134 += *(v137 - 1) * *(v138 - 1);
        v135 += *v137 * *v138;
        v138 += 2;
        v137 += 2;
        v136 -= 2;
      }
      while (v136);
      uint64_t v132 = v135 + v134;
      uint64_t v133 = v113 & 0x1FFFFFFFFFFFFFFELL;
      if (v113 != v116) {
        goto LABEL_85;
      }
LABEL_87:
      _H0 = *(_WORD *)(v112 + 2 * (v115 + v132));
      __asm { FCVT            S0, H0 }
      *(_DWORD *)(v13 + 4 * v118) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v148 = (v12 >> 3) + 1;
        int v149 = v12 >> 3;
        while (1)
        {
          uint64_t v150 = (v148 - 2);
          unint64_t v151 = v111[v150] + 1;
          v111[v150] = v151;
          if (v151 < v4[v150]) {
            break;
          }
          v111[(v148 - 2)] = 0;
          --v149;
          if ((unint64_t)--v148 <= 1) {
            goto LABEL_93;
          }
        }
        if (v149 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v111);
      return;
    }
    uint64_t v118 = 0;
    uint64_t v119 = 0;
LABEL_78:
    unint64_t v125 = v113 - v119;
    uint64_t v126 = v119;
    uint64_t v127 = (uint64_t *)(v117 + 8 * v119);
    uint64_t v128 = &v111[v126];
    do
    {
      uint64_t v130 = *v128++;
      uint64_t v129 = v130;
      uint64_t v131 = *v127++;
      v118 += v131 * v129;
      --v125;
    }
    while (v125);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (__int16 *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      _H0 = *v31;
      __asm { FCVT            S0, H0 }
      *uint64_t v34 = _S0;
      uint64_t v31 = (__int16 *)((char *)v31 + v32);
      uint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v152 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  unint64_t v154 = (float16x4_t *)(v26 + 2 * v24 + 16);
  unint64_t v155 = (float32x4_t *)(v13 + 4 * v25 + 32);
  unint64_t v156 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v157 = *(float16x8_t *)v154[-2].i8;
    float32x4_t v158 = vcvtq_f32_f16(*v154);
    float32x4_t v159 = vcvt_hight_f32_f16(*(float16x8_t *)v154->i8);
    v155[-2] = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
    v155[-1] = vcvt_hight_f32_f16(v157);
    float32x4_t *v155 = v158;
    v155[1] = v159;
    v155 += 4;
    v154 += 4;
    v156 -= 16;
  }
  while (v156);
  uint64_t v24 = v152;
  uint64_t v25 = v153;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925999F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_192599CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<float>::pairwise_element_visitor<half,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(float &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_192599E28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192599E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x192599E34);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::ndarray_container::assign(nitro::ndarray_container const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    size_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19259A0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259A464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259A5EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259A600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259A5F8);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259A764(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259A778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259A770);
}

uint64_t *nitro::ndarray<int>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259AB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    uint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = (float32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (int32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (BOOL v85 = v83 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          BOOL v94 = v78;
          unint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            int32x4_t v97 = vcvtq_s32_f32(*v94);
            v95[-1] = vcvtq_s32_f32(v94[-1]);
            *unint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (float *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (_DWORD *)(v13 + 4 * v88);
        do
        {
          *uint64_t v93 = (int)*v90;
          uint64_t v90 = (float *)((char *)v90 + v91);
          uint64_t v93 = (_DWORD *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      uint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    uint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          unint64_t v61 = (float32x4_t *)v48;
          uint64_t v62 = (_OWORD *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            int32x4_t v64 = vcvtq_s32_f32(*v61);
            *(v62 - 1) = vcvtq_s32_f32(v61[-1]);
            *uint64_t v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        BOOL v57 = (float *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          _DWORD *v60 = (int)*v57;
          BOOL v57 = (float *)((char *)v57 + v58);
          uint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      float32x4_t v110 = (void *)(v104 + 8);
      uint64_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      unint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)*(float *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    uint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    uint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *uint64_t v34 = (int)*v31;
      uint64_t v31 = (float *)((char *)v31 + v32);
      uint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  uint64_t v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v142 = vcvtq_s32_f32(*v139);
    v140[-1] = vcvtq_s32_f32(v139[-1]);
    int32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19259B240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259B3A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259B3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259B3B0);
}

void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259B660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<int>::pairwise_element_visitor<float,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<int>& nitro::ndarray<int>::assign<float>(nitro::ndarray<float> const&)::{lambda(int &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259B7E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259B7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259B7F4);
}

uint64_t *nitro::ndarray<half>::assign<float>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      uint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      uint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259BBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v164 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = a2[8];
    uint64_t v75 = a1[8];
    unint64_t v76 = v4[1];
    unint64_t v77 = (uint64_t *)a1[5];
    float32x4_t v159 = (uint64_t *)a2[5];
    uint64_t v78 = v13 + 2 * v75 + 16;
    uint64_t v162 = *v159;
    uint64_t v163 = *v77;
    uint64_t v161 = 2 * *v77;
    uint64_t v79 = 4 * v74 + 32;
    uint64_t v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164) {
        return;
      }
    }
    uint64_t v80 = 0;
    unint64_t v81 = v4[2];
    uint64_t v82 = *a2;
    uint64_t v83 = a2[5];
    uint64_t v84 = v77[1];
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v86 = (float32x4_t *)(*a2 + v79);
    uint64_t v87 = v159[1];
    uint64_t v88 = (float16x8_t *)v78;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    while (1)
    {
      if (v81)
      {
        uint64_t v91 = v77[2];
        uint64_t v92 = *(void *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (BOOL v93 = v91 == 1) : (BOOL v93 = 0), v93))
        {
          uint64_t v95 = v89 + v85 * v92;
          uint64_t v103 = v86;
          uint64_t v104 = v88;
          unint64_t v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v96 = v90 + v85 * v91;
          do
          {
            float32x4_t v107 = v103[-2];
            float32x4_t v106 = v103[-1];
            float32x4_t v109 = *v103;
            float32x4_t v108 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v107), v106);
            *uint64_t v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v109), v108);
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          unint64_t v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v95 = v89;
          uint64_t v96 = v90;
        }
        unint64_t v97 = v81 - v94;
        unint64_t v98 = (int *)(v82 + 4 * v95);
        uint64_t v99 = 4 * v92;
        uint64_t v100 = 2 * v91;
        uint64_t v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = *v98;
          __asm { FCVT            H0, S0 }
          *uint64_t v101 = _S0;
          unint64_t v98 = (int *)((char *)v98 + v99);
          uint64_t v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      uint64_t v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      unint64_t v86 = (float32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v39 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v40 = 0;
    uint64_t v41 = a2[8];
    uint64_t v42 = a1[8];
    unint64_t v43 = v4[1];
    uint64_t v44 = *a2;
    unint64_t v45 = (uint64_t *)a2[5];
    uint64_t v46 = (uint64_t *)a1[5];
    uint64_t v47 = *v46;
    uint64_t v48 = *v45;
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v50 = v13 + 2 * v42 + 16;
    uint64_t v51 = 2 * *v46;
    uint64_t v52 = *a2 + 4 * v41 + 32;
    uint64_t v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        uint64_t v54 = v46[1];
        uint64_t v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v58 = v41 + v49 * v55;
          uint64_t v66 = (float32x4_t *)v52;
          uint64_t v67 = (float16x8_t *)v50;
          unint64_t v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v59 = v42 + v49 * v54;
          do
          {
            float32x4_t v70 = v66[-2];
            float32x4_t v69 = v66[-1];
            float32x4_t v72 = *v66;
            float32x4_t v71 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v70), v69);
            *uint64_t v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v72), v71);
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          unint64_t v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v58 = v41;
          uint64_t v59 = v42;
        }
        unint64_t v60 = v43 - v57;
        unint64_t v61 = (int *)(v44 + 4 * v58);
        uint64_t v62 = 4 * v55;
        uint64_t v63 = 2 * v54;
        int32x4_t v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = *v61;
          __asm { FCVT            H0, S0 }
          *int32x4_t v64 = _S0;
          unint64_t v61 = (int *)((char *)v61 + v62);
          int32x4_t v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v111 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v112 = 1;
    }
    else {
      unint64_t v112 = v12 >> 3;
    }
    uint64_t v113 = a2[5];
    uint64_t v114 = a2[8];
    uint64_t v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v116 = a1[5];
    while (v112 >= 2)
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      uint64_t v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v122 = (void *)(v116 + 8);
      uint64_t v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      uint64_t v117 = v120 + v119;
      uint64_t v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_78;
      }
LABEL_80:
      if (v112 < 2)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
LABEL_85:
        unint64_t v138 = v112 - v132;
        uint64_t v139 = v132;
        uint64_t v140 = (uint64_t *)(v113 + 8 * v132);
        unint64_t v141 = &v110[v139];
        do
        {
          uint64_t v143 = *v141++;
          uint64_t v142 = v143;
          uint64_t v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v136 = (void *)(v113 + 8);
      uint64_t v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      uint64_t v131 = v134 + v133;
      uint64_t v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_85;
      }
LABEL_87:
      _S0 = *(_DWORD *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v146 = (v12 >> 3) + 1;
        int v147 = v12 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148]) {
            break;
          }
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_93;
          }
        }
        if (v147 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    uint64_t v117 = 0;
    uint64_t v118 = 0;
LABEL_78:
    unint64_t v124 = v112 - v118;
    uint64_t v125 = v118;
    unint64_t v126 = (uint64_t *)(v116 + 8 * v118);
    uint64_t v127 = &v110[v125];
    do
    {
      uint64_t v129 = *v127++;
      uint64_t v128 = v129;
      uint64_t v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    uint64_t v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = *v31;
      __asm { FCVT            H0, S0 }
      *uint64_t v34 = _S0;
      uint64_t v31 = (int *)((char *)v31 + v32);
      uint64_t v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = (float32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  unint64_t v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v156 = v152[-2];
    float32x4_t v155 = v152[-1];
    float32x4_t v158 = *v152;
    float32x4_t v157 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v156), v155);
    *uint64_t v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158), v157);
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  uint64_t v24 = v150;
  uint64_t v25 = v151;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_19259C2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259C440(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259C44CLL);
}

void void nitro::ndarray<half>::pairwise_element_visitor<float,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<half>& nitro::ndarray<half>::assign<float>(nitro::ndarray<float> const&)::{lambda(half &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259C5B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259C5C4);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::compact(void)::$_0>(nitro::ndarray_container::compact(void)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    size_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    uint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_19259C838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::compact@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (a1[3] - a1[2] != a1[6] - a1[5]) {
    nitro::ndarray<unsigned char>::compact(void)const::{lambda(void)#1}::operator()();
  }
  if (a1[8]) {
    return nitro::ndarray<unsigned char>::canonicalize(a1, a2);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t *)a1[3];
  uint64_t v6 = (uint64_t)v5 - v4;
  if (v5 != (uint64_t *)v4)
  {
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_13;
    }
    if ((unint64_t)(v6 - 8) >= 8)
    {
      unint64_t v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
      uint64_t v8 = (uint64_t *)(v4 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v10 = (void *)(v4 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      uint64_t v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        unint64_t v15 = v6 >> 3;
        uint64_t v16 = a1[5];
        if (v15 <= 1) {
          unint64_t v15 = 1;
        }
        if (v15 >= 2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
          unsigned __int8 v21 = (void *)(v4 + 8);
          uint64_t v22 = (void *)(v16 + 8);
          unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v19 += *(v22 - 1) * (*(v21 - 1) - 1);
            v20 += *v22 * (*v21 - 1);
            v21 += 2;
            v22 += 2;
            v23 -= 2;
          }
          while (v23);
          uint64_t v18 = v20 + v19;
          if (v15 == v17)
          {
LABEL_22:
            if (v7 != v18 + 1) {
              return nitro::ndarray<unsigned char>::canonicalize(a1, a2);
            }
            return nitro::ndarray<unsigned char>::ndarray(a2, a1);
          }
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v24 = v15 - v17;
        uint64_t v25 = 8 * v17;
        uint64_t v26 = (uint64_t *)(v16 + v25);
        uint64_t v27 = (uint64_t *)(v4 + v25);
        do
        {
          uint64_t v28 = *v27++;
          uint64_t v29 = v28 - 1;
          uint64_t v30 = *v26++;
          v18 += v30 * v29;
          --v24;
        }
        while (v24);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = 1;
      uint64_t v8 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_13;
  }
  return nitro::ndarray<unsigned char>::ndarray(a2, a1);
}

void nitro::ndarray<unsigned char>::compact(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<unsigned char>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259CD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259CF18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259CF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259CF24);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  std::locale v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  unint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = *(unsigned char *)(*a2 + v45);
                uint64_t v42 = (void *)a1[5];
                v46 += v42[2];
                unint64_t v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              uint64_t v42 = (void *)a1[5];
              unint64_t v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          uint64_t v42 = (void *)a1[5];
          unint64_t v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = *(unsigned char *)(*a2 + v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        unint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          uint64_t v75 = (uint64_t *)(v65 + v74 * 8);
          unint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        float32x4_t v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        float32x4_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = *(unsigned char *)(*a2 + a2[8] + v66);
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      unint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      unint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = *(unsigned char *)(*a2 + v33);
            uint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            uint64_t v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          uint64_t v30 = (void *)a1[5];
          uint64_t v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_19259D420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void void nitro::ndarray<unsigned char>::pairwise_element_visitor<unsigned char,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<unsigned char>::canonicalize(void)::{lambda(unsigned char &,unsigned char const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259D584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259D598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259D590);
}

void *nitro::ndarray<int>::compact@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (a1[3] - a1[2] != a1[6] - a1[5]) {
    nitro::ndarray<int>::compact(void)const::{lambda(void)#1}::operator()();
  }
  if (a1[8]) {
    return nitro::ndarray<int>::canonicalize(a1, a2);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t *)a1[3];
  uint64_t v6 = (uint64_t)v5 - v4;
  if (v5 != (uint64_t *)v4)
  {
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_13;
    }
    if ((unint64_t)(v6 - 8) >= 8)
    {
      unint64_t v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
      uint64_t v8 = (uint64_t *)(v4 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      unsigned __int8 v10 = (void *)(v4 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      uint64_t v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        unint64_t v15 = v6 >> 3;
        uint64_t v16 = a1[5];
        if (v15 <= 1) {
          unint64_t v15 = 1;
        }
        if (v15 >= 2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v21 = (void *)(v4 + 8);
          unint64_t v22 = (void *)(v16 + 8);
          unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v19 += *(v22 - 1) * (*(v21 - 1) - 1);
            v20 += *v22 * (*v21 - 1);
            v21 += 2;
            v22 += 2;
            v23 -= 2;
          }
          while (v23);
          uint64_t v18 = v20 + v19;
          if (v15 == v17)
          {
LABEL_22:
            if (v7 != v18 + 1) {
              return nitro::ndarray<int>::canonicalize(a1, a2);
            }
            return nitro::ndarray<int>::ndarray(a2, a1);
          }
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v24 = v15 - v17;
        uint64_t v25 = 8 * v17;
        unint64_t v26 = (uint64_t *)(v16 + v25);
        unint64_t v27 = (uint64_t *)(v4 + v25);
        do
        {
          uint64_t v28 = *v27++;
          uint64_t v29 = v28 - 1;
          uint64_t v30 = *v26++;
          v18 += v30 * v29;
          --v24;
        }
        while (v24);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = 1;
      uint64_t v8 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_13;
  }
  return nitro::ndarray<int>::ndarray(a2, a1);
}

void nitro::ndarray<int>::compact(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<int>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259D9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259DB64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259DB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259DB70);
}

__n128 nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        unint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            uint64_t v142 = (__n128 *)(4 * v25 + v13);
            uint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (_DWORD *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            uint64_t v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              *uint64_t v33 = *v31;
              v31 += v28;
              uint64_t v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v34 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v35 = 0;
        uint64_t v36 = a2[8];
        uint64_t v37 = a1[8];
        unint64_t v38 = v4[1];
        uint64_t v39 = *a2;
        uint64_t v40 = (uint64_t *)a2[5];
        uint64_t v41 = (uint64_t *)a1[5];
        uint64_t v42 = *v41;
        unint64_t v43 = (__n128 *)(v13 + 4 * v37);
        uint64_t v44 = 4 * *v41;
        uint64_t v45 = *a2 + 4 * v36;
        uint64_t v46 = *v40;
        uint64_t v47 = 4 * *v40;
        unint64_t v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v49 = v43 + 1;
        uint64_t v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          unint64_t v49 = (__n128 *)((char *)v49 + v44);
          uint64_t v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34) {
            return result;
          }
        }
        uint64_t v51 = v41[1];
        uint64_t v52 = v40[1];
        if (v38 >= 8)
        {
          unint64_t v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            uint64_t v54 = v36;
            uint64_t v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              uint64_t v54 = v36 + v48 * v52;
              uint64_t v62 = v50;
              uint64_t v63 = v49;
              unint64_t v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v55 = v37 + v48 * v51;
              do
              {
                __n128 result = v62[-1];
                __n128 v66 = *v62;
                v63[-1] = result;
                *uint64_t v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              unint64_t v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v53 = 0;
        }
        uint64_t v54 = v36;
        uint64_t v55 = v37;
LABEL_38:
        unint64_t v56 = v38 - v53;
        unint64_t v57 = (_DWORD *)(v39 + 4 * v54);
        uint64_t v58 = 4 * v52;
        uint64_t v59 = 4 * v51;
        unint64_t v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          _DWORD *v60 = *v57;
          unint64_t v57 = (_DWORD *)((char *)v57 + v58);
          unint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      unint64_t v149 = (__n128 *)(v13 + 4 * v69);
      float32x4_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        float32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      unint64_t v84 = (__n128 *)(*a2 + v73);
      unint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        unint64_t v85 = (__n128 *)((char *)v85 + v79);
        unint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (_DWORD *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      unint64_t v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        *unint64_t v97 = *v94;
        unint64_t v94 = (_DWORD *)((char *)v94 + v95);
        unint64_t v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19259E28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259E3F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259E404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259E3FCLL);
}

void void nitro::ndarray<int>::pairwise_element_visitor<int,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1}>(nitro::ndarray<int> const&,nitro::ndarray<int>::canonicalize(void)::{lambda(int &,int const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259E568(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259E57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259E574);
}

void *nitro::ndarray<half>::compact@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (a1[3] - a1[2] != a1[6] - a1[5]) {
    nitro::ndarray<half>::compact(void)const::{lambda(void)#1}::operator()();
  }
  if (a1[8]) {
    return nitro::ndarray<half>::canonicalize(a1, a2);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t *)a1[3];
  uint64_t v6 = (uint64_t)v5 - v4;
  if (v5 != (uint64_t *)v4)
  {
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_13;
    }
    if ((unint64_t)(v6 - 8) >= 8)
    {
      unint64_t v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
      uint64_t v8 = (uint64_t *)(v4 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      unsigned __int8 v10 = (void *)(v4 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      uint64_t v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        unint64_t v15 = v6 >> 3;
        uint64_t v16 = a1[5];
        if (v15 <= 1) {
          unint64_t v15 = 1;
        }
        if (v15 >= 2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v21 = (void *)(v4 + 8);
          uint64_t v22 = (void *)(v16 + 8);
          unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v19 += *(v22 - 1) * (*(v21 - 1) - 1);
            v20 += *v22 * (*v21 - 1);
            v21 += 2;
            v22 += 2;
            v23 -= 2;
          }
          while (v23);
          uint64_t v18 = v20 + v19;
          if (v15 == v17)
          {
LABEL_22:
            if (v7 != v18 + 1) {
              return nitro::ndarray<half>::canonicalize(a1, a2);
            }
            return nitro::ndarray<half>::ndarray(a2, a1);
          }
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v24 = v15 - v17;
        uint64_t v25 = 8 * v17;
        uint64_t v26 = (uint64_t *)(v16 + v25);
        uint64_t v27 = (uint64_t *)(v4 + v25);
        do
        {
          uint64_t v28 = *v27++;
          uint64_t v29 = v28 - 1;
          uint64_t v30 = *v26++;
          v18 += v30 * v29;
          --v24;
        }
        while (v24);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = 1;
      uint64_t v8 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_13;
  }
  return nitro::ndarray<half>::ndarray(a2, a1);
}

void nitro::ndarray<half>::compact(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259E9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259EB48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259EB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259EB54);
}

void nitro::ndarray<half>::canonicalize(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<half>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259EE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (unint64_t *)a1[2];
  v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  uint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        unint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0x10) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            uint64_t v142 = (__n128 *)(2 * v25 + v13);
            uint64_t v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int16 *)(v26 + 2 * v24);
            uint64_t v32 = 2 * v27;
            uint64_t v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              *uint64_t v33 = *v31;
              v31 += v28;
              uint64_t v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        uint64_t v44 = (__n128 *)(v13 + 2 * v38);
        uint64_t v45 = 2 * *v42;
        uint64_t v46 = *a2 + 2 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 2 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          uint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 0x10)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              unint64_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                *unint64_t v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        uint64_t v58 = (unsigned __int16 *)(v40 + 2 * v55);
        uint64_t v59 = 2 * v53;
        uint64_t v60 = 2 * v52;
        unint64_t v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          unsigned __int16 *v61 = *v58;
          uint64_t v58 = (unsigned __int16 *)((char *)v58 + v59);
          unint64_t v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 2 * *v71;
      uint64_t v155 = 2 * *v150;
      uint64_t v148 = 2 * v68;
      unint64_t v149 = (__n128 *)(v13 + 2 * v69);
      float32x4_t v72 = v149 + 1;
      uint64_t v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        float32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 2 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 2 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v83 = a2[5];
      unint64_t v84 = (__n128 *)(*a2 + v73);
      unint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        unint64_t v85 = (__n128 *)((char *)v85 + v79);
        unint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 0x10)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (unsigned __int16 *)(v76 + 2 * v91);
      uint64_t v95 = 2 * v89;
      uint64_t v96 = 2 * v88;
      unint64_t v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        *unint64_t v97 = *v94;
        unint64_t v94 = (unsigned __int16 *)((char *)v94 + v95);
        unint64_t v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_19259F53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::canonicalize(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 555, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259F6A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259F6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259F6ACLL);
}

void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259F95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void void nitro::ndarray<half>::pairwise_element_visitor<half,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1}>(nitro::ndarray<half> const&,nitro::ndarray<half>::canonicalize(void)::{lambda(half &,half const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19259FAE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19259FAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19259FAF0);
}

void *nitro::ndarray<float>::compact@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (a1[3] - a1[2] != a1[6] - a1[5]) {
    nitro::ndarray<float>::compact(void)const::{lambda(void)#1}::operator()();
  }
  if (a1[8]) {
    return nitro::ndarray<float>::canonicalize(a1, a2);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = (uint64_t *)a1[3];
  uint64_t v6 = (uint64_t)v5 - v4;
  if (v5 != (uint64_t *)v4)
  {
    uint64_t v7 = *a1;
    if (!*a1) {
      goto LABEL_13;
    }
    if ((unint64_t)(v6 - 8) >= 8)
    {
      unint64_t v9 = ((unint64_t)(v6 - 8) >> 3) + 1;
      uint64_t v8 = (uint64_t *)(v4 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
      unsigned __int8 v10 = (void *)(v4 + 8);
      uint64_t v11 = 1;
      uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v13 = 1;
      do
      {
        v11 *= *(v10 - 1);
        v13 *= *v10;
        v10 += 2;
        v12 -= 2;
      }
      while (v12);
      uint64_t v7 = v13 * v11;
      if (v9 == (v9 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_13:
        unint64_t v15 = v6 >> 3;
        uint64_t v16 = a1[5];
        if (v15 <= 1) {
          unint64_t v15 = 1;
        }
        if (v15 >= 2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
          unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
          uint64_t v21 = (void *)(v4 + 8);
          uint64_t v22 = (void *)(v16 + 8);
          unint64_t v23 = v15 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v19 += *(v22 - 1) * (*(v21 - 1) - 1);
            v20 += *v22 * (*v21 - 1);
            v21 += 2;
            v22 += 2;
            v23 -= 2;
          }
          while (v23);
          uint64_t v18 = v20 + v19;
          if (v15 == v17)
          {
LABEL_22:
            if (v7 != v18 + 1) {
              return nitro::ndarray<float>::canonicalize(a1, a2);
            }
            return nitro::ndarray<float>::ndarray(a2, a1);
          }
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = 0;
        }
        unint64_t v24 = v15 - v17;
        uint64_t v25 = 8 * v17;
        uint64_t v26 = (uint64_t *)(v16 + v25);
        uint64_t v27 = (uint64_t *)(v4 + v25);
        do
        {
          uint64_t v28 = *v27++;
          uint64_t v29 = v28 - 1;
          uint64_t v30 = *v26++;
          v18 += v30 * v29;
          --v24;
        }
        while (v24);
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v7 = 1;
      uint64_t v8 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v5);
    goto LABEL_13;
  }
  return nitro::ndarray<float>::ndarray(a2, a1);
}

void nitro::ndarray<float>::compact(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_valid()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::ndarray<float>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_19259FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::compact(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 663, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925A00C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925A00D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925A00D0);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::canonicalize(void)::$_0>(nitro::ndarray_container::canonicalize(void)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925A0344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::copy(void)::$_0>(nitro::ndarray_container::copy(void)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925A06C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  std::vector<char>::pointer v6 = end;
  if (value - end < __n)
  {
    std::vector<char>::pointer begin = this->__begin_;
    unint64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - begin;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unsigned __int8 v13 = &v12[v8];
    uint64_t v14 = &v12[v11];
    std::locale v15 = &v12[v8 + __n];
    bzero(&v12[v8], __n);
    if (end == begin)
    {
      v12 += v8;
      goto LABEL_32;
    }
    if (v8 >= 8 && (unint64_t)(begin - v12) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v16 = 0;
        goto LABEL_24;
      }
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v17 = (long long *)(end - 16);
      uint64_t v18 = &v12[end - 16 - begin];
      unint64_t v19 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *v17;
        *((_OWORD *)v18 - 1) = *(v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        v18 -= 32;
        v17 -= 2;
        v19 -= 32;
      }
      while (v19);
      if (v8 == v16) {
        goto LABEL_31;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_24:
        std::vector<char>::pointer v6 = &end[-(v8 & 0xFFFFFFFFFFFFFFF8)];
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        unsigned __int8 v21 = &end[-v16 - 8];
        uint64_t v22 = &v12[v21 - begin];
        unint64_t v23 = v16 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *(void *)uint64_t v22 = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      v13 -= v16;
      std::vector<char>::pointer v6 = &end[-v16];
    }
LABEL_29:
    uint64_t v25 = v13 - 1;
    do
    {
      char v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != begin);
LABEL_31:
    std::vector<char>::pointer v6 = this->__begin_;
LABEL_32:
    this->__begin_ = v12;
    this->__end_ = v15;
    this->__end_cap_.__value_ = v14;
    if (v6)
    {
      operator delete(v6);
    }
    return;
  }
  if (__n)
  {
    bzero(end, __n);
    std::vector<char>::pointer v6 = &end[__n];
  }
  this->__end_ = v6;
}

void nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_0>(nitro::ndarray_container::load(nitro::iarchive &)::$_0)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      unint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925A0C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::load(uint64_t a1, uint64_t a2)
{
  size_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v11);
  if (v12 != v11)
  {
    unint64_t v2 = v12 - v11 - 8;
    if (v2 < 8)
    {
      uint64_t v3 = 1;
      uint64_t v4 = v11;
      do
      {
LABEL_8:
        uint64_t v10 = *(void *)v4;
        v4 += 8;
        v3 *= v10;
      }
      while (v4 != v12);
      goto LABEL_9;
    }
    uint64_t v5 = (v2 >> 3) + 1;
    uint64_t v4 = &v11[8 * (v5 & 0x3FFFFFFFFFFFFFFELL)];
    std::vector<char>::pointer v6 = v11 + 8;
    uint64_t v7 = 1;
    uint64_t v8 = v5 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    uint64_t v3 = v9 * v7;
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
LABEL_9:
  operator new[]();
}

void sub_1925A0F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 72);
  uint64_t v13 = *(void **)(v11 - 56);
  if (v13)
  {
    *(void *)(v11 - 48) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void *nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 16) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  uint64_t v7 = *a2;
  a2[1] = *a2;
  if (v6)
  {
    std::vector<unsigned long long>::__append((uint64_t)a2, v6);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
  }
  else
  {
    uint64_t v8 = v7;
  }
  size_t v9 = v7 - v8;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!v10) {
    return (void *)std::istream::read();
  }
  __n128 result = memcpy(v8, (const void *)(v10 + *(void *)(a1 + 16)), v9);
  *(void *)(a1 + 16) += v9;
  return result;
}

void nitro::ndarray<int>::load(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v11);
  if (v12 != v11)
  {
    unint64_t v2 = v12 - v11 - 8;
    if (v2 < 8)
    {
      uint64_t v3 = 1;
      uint64_t v4 = v11;
      do
      {
LABEL_8:
        uint64_t v10 = *(void *)v4;
        v4 += 8;
        v3 *= v10;
      }
      while (v4 != v12);
      goto LABEL_9;
    }
    uint64_t v5 = (v2 >> 3) + 1;
    uint64_t v4 = &v11[8 * (v5 & 0x3FFFFFFFFFFFFFFELL)];
    unint64_t v6 = v11 + 8;
    uint64_t v7 = 1;
    uint64_t v8 = v5 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    uint64_t v3 = v9 * v7;
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
LABEL_9:
  operator new[]();
}

void sub_1925A12D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11 - 72);
  uint64_t v13 = *(void **)(v11 - 56);
  if (v13)
  {
    *(void *)(v11 - 48) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::load(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v11);
  if (v12 != v11)
  {
    unint64_t v2 = v12 - v11 - 8;
    if (v2 < 8)
    {
      uint64_t v3 = 1;
      uint64_t v4 = v11;
      do
      {
LABEL_8:
        uint64_t v10 = *(void *)v4;
        v4 += 8;
        v3 *= v10;
      }
      while (v4 != v12);
      goto LABEL_9;
    }
    uint64_t v5 = (v2 >> 3) + 1;
    uint64_t v4 = &v11[8 * (v5 & 0x3FFFFFFFFFFFFFFELL)];
    unint64_t v6 = v11 + 8;
    uint64_t v7 = 1;
    uint64_t v8 = v5 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    uint64_t v3 = v9 * v7;
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
LABEL_9:
  operator new[]();
}

void sub_1925A1550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 - 72);
  uint64_t v13 = *(void **)(v11 - 56);
  if (v13)
  {
    *(void *)(v11 - 48) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::load(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v11);
  if (v12 != v11)
  {
    unint64_t v2 = v12 - v11 - 8;
    if (v2 < 8)
    {
      uint64_t v3 = 1;
      uint64_t v4 = v11;
      do
      {
LABEL_8:
        uint64_t v10 = *(void *)v4;
        v4 += 8;
        v3 *= v10;
      }
      while (v4 != v12);
      goto LABEL_9;
    }
    uint64_t v5 = (v2 >> 3) + 1;
    uint64_t v4 = &v11[8 * (v5 & 0x3FFFFFFFFFFFFFFELL)];
    unint64_t v6 = v11 + 8;
    uint64_t v7 = 1;
    uint64_t v8 = v5 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v9 = 1;
    do
    {
      v7 *= *(v6 - 1);
      v9 *= *v6;
      v6 += 2;
      v8 -= 2;
    }
    while (v8);
    uint64_t v3 = v9 * v7;
    if (v5 != (v5 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
LABEL_9:
  operator new[]();
}

void sub_1925A17D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v11 - 72);
  uint64_t v13 = *(void **)(v11 - 56);
  if (v13)
  {
    *(void *)(v11 - 48) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::load(nitro::iarchive &)::$_1>(nitro::ndarray_container::load(nitro::iarchive &)::$_1)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    uint64_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925A1A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A1EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A22AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A2698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A2AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A2E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A3228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A3614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A3A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A3E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A4224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A4680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A4A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A4E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A5184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A54F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A5918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A5C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A637C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A6710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A6A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A6E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A71F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A756C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A7C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A8080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A83F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A8784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A8B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A8E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A9208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A9614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<signed char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925A9A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925A9DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AA168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AA4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<unsigned char>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    size_t v4 = 0;
    uint64_t v7 = *(void *)(a2 + 8);
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v8 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v9 = v15 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    size_t v4 = v12 * v10;
    if (v8 == (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_10;
    }
  }
  else
  {
    size_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v13 = *(void *)v5;
    v5 += 8;
    v4 *= v13;
  }
  while (v5 != v16);
LABEL_10:
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = operator new(v4);
    bzero(v6, v4);
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      goto LABEL_13;
    }
LABEL_5:
    std::istream::read();
    goto LABEL_14;
  }
  unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  if (!v7) {
    goto LABEL_5;
  }
LABEL_13:
  uint64_t v14 = *(void *)(a2 + 16);
  memcpy(v6, (const void *)(v7 + v14), v4);
  *(void *)(a2 + 16) = v14 + v4;
LABEL_14:
  operator new[]();
}

void sub_1925AA914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<unsigned short>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AACA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<unsigned int>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AB020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<unsigned long long>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AB3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<half>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    uint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    uint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(2 * v4);
        bzero(v6, 2 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 2 * v4);
        *(void *)(a2 + 16) = v14 + 2 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    uint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925AB730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<float>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(4 * v4);
        bzero(v6, 4 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 4 * v4);
        *(void *)(a2 + 16) = v14 + 4 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925ABAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::load_cast_from<double>(uint64_t a1, uint64_t a2)
{
  std::locale v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  nitro::archive_detail::vector_deserialize_impl<nitro::iarchive,unsigned long,true>::exec(a2, (void **)&v15);
  if (v16 == v15)
  {
    unint64_t v6 = 0;
    unint64_t v4 = 0;
    goto LABEL_13;
  }
  unint64_t v3 = v16 - v15 - 8;
  if (v3 >= 8)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    uint64_t v5 = &v15[8 * (v7 & 0x3FFFFFFFFFFFFFFELL)];
    uint64_t v8 = v15 + 8;
    uint64_t v9 = 1;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v11 = 1;
    do
    {
      v9 *= *(v8 - 1);
      v11 *= *v8;
      v8 += 2;
      v10 -= 2;
    }
    while (v10);
    unint64_t v4 = v11 * v9;
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFFELL))
    {
LABEL_9:
      if (v4)
      {
        if (v4 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v6 = operator new(8 * v4);
        bzero(v6, 8 * v4);
      }
      else
      {
        unint64_t v6 = 0;
      }
LABEL_13:
      uint64_t v13 = *(void *)(a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(a2 + 16);
        memcpy(v6, (const void *)(v13 + v14), 8 * v4);
        *(void *)(a2 + 16) = v14 + 8 * v4;
      }
      else
      {
        std::istream::read();
      }
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 1;
    uint64_t v5 = v15;
  }
  do
  {
    uint64_t v12 = *(void *)v5;
    v5 += 8;
    v4 *= v12;
  }
  while (v5 != v16);
  goto LABEL_9;
}

void sub_1925ABE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (v21)
  {
    *(void *)(v22 - 88) = v21;
    operator delete(v21);
  }
  unsigned __int8 v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(void *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)v16, (uint64_t)a1);
      nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<int>>((uint64_t)v16, a2);
      if (v20)
      {
        unsigned __int8 v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        unint64_t v19 = v18;
        operator delete(v18);
      }
      unint64_t v3 = v17;
      if (!v17) {
        return;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)v22, (uint64_t)a1);
      nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<unsigned char>>((uint64_t)v22, a2);
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      if (v24)
      {
        uint64_t v25 = v24;
        operator delete(v24);
      }
      unint64_t v3 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)v4, (uint64_t)a1);
      nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<float>>((uint64_t)v4, a2);
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      if (v6)
      {
        uint64_t v7 = v6;
        operator delete(v6);
      }
      unint64_t v3 = v5;
      if (v5) {
        goto LABEL_25;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)v10, (uint64_t)a1);
      nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<half>>((uint64_t)v10, a2);
      if (__p)
      {
        std::locale v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      unint64_t v3 = v11;
      if (!v11) {
        return;
      }
LABEL_25:
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
}

void sub_1925AC048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925AC05C(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1925AC070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925AC084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<unsigned char>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<int>::init_from_shape((uint64_t **)(a1 + 16), &v10);
  _ZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_(&v10, (uint64_t *)a1, v4, v5, v6, v7, v8);
  nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v10);
  if (__p)
  {
    std::locale v15 = __p;
    operator delete(__p);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  uint64_t v9 = v11;
  if (v11)
  {
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1925AC174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<int>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<int>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  double v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AC240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<half>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<int>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  double v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AC30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<int>(void)const::{lambda(int)#1}::operator()<nitro::ndarray<float>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<int>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<int,(void *)0>(a2, &v5);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    int8x16_t v8 = v7;
    operator delete(v7);
  }
  double v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AC3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int8x16_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925AC678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, double a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  uint64_t v9 = (unint64_t *)a1[2];
  int8x16_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    long long v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  long long v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v186 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v84 = 0;
    uint64_t v85 = a2[8];
    unint64_t v86 = v9[1];
    uint64_t v87 = (uint64_t *)a1[5];
    unint64_t v182 = (uint64_t *)a2[5];
    uint64_t v184 = *v182;
    uint64_t v185 = *v87;
    uint64_t v187 = 4 * *v87;
    uint64_t v181 = 4 * a1[8];
    uint64_t v88 = v181 + v18 + 64;
    uint64_t v89 = v85 + 16;
    uint64_t v183 = a1[8];
    uint64_t v90 = v183;
    while (!v86)
    {
LABEL_64:
      v85 += v184;
      ++v84;
      v88 += v187;
      v89 += v184;
      v90 += v185;
      if (v84 == v186) {
        return;
      }
    }
    uint64_t v91 = 0;
    uint64_t v92 = v181 + v187 * v84;
    unint64_t v93 = v9[2];
    uint64_t v94 = *a2;
    uint64_t v95 = a2[5];
    uint64_t v96 = v87[1];
    uint64_t v97 = 4 * v96;
    uint64_t v98 = v182[1];
    unint64_t v189 = v93 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v99 = v93 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v100 = (int8x16_t *)(*a2 + v89);
    uint64_t v101 = v90;
    uint64_t v102 = v85;
    uint64_t v103 = v88;
    while (!v93)
    {
LABEL_67:
      v101 += v96;
      v102 += v98;
      ++v91;
      v103 += v97;
      uint64_t v100 = (int8x16_t *)((char *)v100 + v98);
      if (v91 == v86) {
        goto LABEL_64;
      }
    }
    uint64_t v104 = v87[2];
    uint64_t v105 = *(void *)(v95 + 16);
    if (v93 < 8
      || (v104 == 1 ? (BOOL v106 = v105 == 1) : (BOOL v106 = 0),
          !v106
       || (v18 + v92 + v97 * v91 < v94 + v93 + v85 + v98 * v91
         ? (BOOL v107 = v94 + v102 >= v18 + v187 * v84 + 4 * (v183 + v93) + v97 * v91)
         : (BOOL v107 = 1),
           !v107)))
    {
      unint64_t v109 = 0;
      uint64_t v110 = v102;
      uint64_t v111 = v101;
      goto LABEL_83;
    }
    if (v93 >= 0x20)
    {
      uint64_t v116 = v100;
      unint64_t v117 = (int8x16_t *)v103;
      unint64_t v118 = v93 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v119 = v116[-1];
        int8x16_t v120 = *v116;
        int8x16_t v121 = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v122 = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD3F0);
        int8x16_t v123 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v124 = vqtbl1q_s8(*v116, (int8x16_t)xmmword_192DAD3F0);
        v117[-2] = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD400);
        v117[-1] = vqtbl1q_s8(v119, (int8x16_t)xmmword_192DAD410);
        a7 = vqtbl1q_s8(v120, (int8x16_t)xmmword_192DAD400);
        v117[-4] = v121;
        v117[-3] = v122;
        v117[2] = a7;
        v117[3] = vqtbl1q_s8(v120, (int8x16_t)xmmword_192DAD410);
        *unint64_t v117 = v123;
        v117[1] = v124;
        v117 += 8;
        v116 += 2;
        v118 -= 32;
      }
      while (v118);
      uint64_t v92 = v181 + v187 * v84;
      if (v93 == v189) {
        goto LABEL_67;
      }
      unint64_t v108 = v93 & 0xFFFFFFFFFFFFFFE0;
      if ((v93 & 0x18) == 0)
      {
        uint64_t v111 = v101 + v189 * v104;
        unint64_t v109 = v93 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v110 = v102 + v189 * v105;
LABEL_83:
        unint64_t v112 = v93 - v109;
        uint64_t v113 = (unsigned __int8 *)(v94 + v110);
        uint64_t v114 = 4 * v104;
        uint64_t v115 = (_DWORD *)(v18 + 4 * v111);
        do
        {
          *uint64_t v115 = *v113;
          v113 += v105;
          uint64_t v115 = (_DWORD *)((char *)v115 + v114);
          --v112;
        }
        while (v112);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v108 = 0;
    }
    uint64_t v110 = v102 + v99 * v105;
    uint64_t v111 = v101 + v99 * v104;
    unint64_t v125 = v108 - (v93 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v126 = v94 + v108;
    uint64_t v127 = (int8x16_t *)(v18 + 4 * (v108 + v101));
    do
    {
      a7.i64[0] = *(void *)(v126 + v102);
      int8x16_t v128 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      *uint64_t v127 = v128;
      v127[1] = a7;
      v127 += 2;
      v126 += 8;
      v125 += 8;
    }
    while (v125);
    unint64_t v109 = v93 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = v181 + v187 * v84;
    if (v93 == v99) {
      goto LABEL_67;
    }
    goto LABEL_83;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    uint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = 4 * v44 + v18 + 64;
    uint64_t v56 = v43 + *a2 + 16;
    uint64_t v57 = v18 + 4 * v44;
    uint64_t v58 = v18 + 4 * (v44 + v45);
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v55 += v51;
      v56 += v50;
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v59 = v48[1];
    uint64_t v60 = v47[1];
    if (v45 < 8
      || (v59 == 1 ? (BOOL v61 = v60 == 1) : (BOOL v61 = 0),
          !v61
       || (v57 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (BOOL v62 = v46 + v43 >= (unint64_t)(v58 + v51 * v42))
         : (BOOL v62 = 1),
           !v62)))
    {
      unint64_t v64 = 0;
      uint64_t v65 = v43;
      uint64_t v66 = v44;
      goto LABEL_50;
    }
    if (v45 >= 0x20)
    {
      unint64_t v71 = (int8x16_t *)v56;
      float32x4_t v72 = (int8x16_t *)v55;
      unint64_t v73 = v45 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v74 = v71[-1];
        int8x16_t v75 = *v71;
        int8x16_t v76 = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v77 = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD3F0);
        int8x16_t v78 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_192DAD3E0);
        int8x16_t v79 = vqtbl1q_s8(*v71, (int8x16_t)xmmword_192DAD3F0);
        v72[-2] = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD400);
        v72[-1] = vqtbl1q_s8(v74, (int8x16_t)xmmword_192DAD410);
        a7 = vqtbl1q_s8(v75, (int8x16_t)xmmword_192DAD400);
        v72[-4] = v76;
        v72[-3] = v77;
        v72[2] = a7;
        v72[3] = vqtbl1q_s8(v75, (int8x16_t)xmmword_192DAD410);
        int8x16_t *v72 = v78;
        v72[1] = v79;
        v72 += 8;
        v71 += 2;
        v73 -= 32;
      }
      while (v73);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v63 = v45 & 0xFFFFFFFFFFFFFFE0;
      if ((v45 & 0x18) == 0)
      {
        uint64_t v66 = v44 + v53 * v59;
        unint64_t v64 = v45 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v65 = v43 + v53 * v60;
LABEL_50:
        unint64_t v67 = v45 - v64;
        uint64_t v68 = (unsigned __int8 *)(v46 + v65);
        uint64_t v69 = 4 * v59;
        unint64_t v70 = (_DWORD *)(v18 + 4 * v66);
        do
        {
          _DWORD *v70 = *v68;
          v68 += v60;
          unint64_t v70 = (_DWORD *)((char *)v70 + v69);
          --v67;
        }
        while (v67);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v63 = 0;
    }
    uint64_t v65 = v43 + v54 * v60;
    uint64_t v66 = v44 + v54 * v59;
    unint64_t v80 = v63 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v81 = v46 + v63;
    unint64_t v82 = (int8x16_t *)(v18 + 4 * (v63 + v44));
    do
    {
      a7.i64[0] = *(void *)(v81 + v43);
      int8x16_t v83 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0);
      a7 = vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      *unint64_t v82 = v83;
      v82[1] = a7;
      v82 += 2;
      v81 += 8;
      v80 += 8;
    }
    while (v80);
    unint64_t v64 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_50;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v129 = operator new(v17);
    bzero(v129, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v130 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v131 = 1;
    }
    else {
      unint64_t v131 = v17 >> 3;
    }
    uint64_t v132 = a2[5];
    uint64_t v133 = a2[8];
    uint64_t v134 = v131 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v135 = a1[5];
    while (v131 >= 2)
    {
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = v131 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v141 = (void *)(v135 + 8);
      uint64_t v142 = v129 + 1;
      do
      {
        v138 += *(v141 - 1) * *(v142 - 1);
        v139 += *v141 * *v142;
        v142 += 2;
        v141 += 2;
        v140 -= 2;
      }
      while (v140);
      uint64_t v136 = v139 + v138;
      uint64_t v137 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134) {
        goto LABEL_105;
      }
LABEL_107:
      if (v131 < 2)
      {
        uint64_t v150 = 0;
        uint64_t v151 = 0;
LABEL_112:
        unint64_t v157 = v131 - v151;
        uint64_t v158 = v151;
        float32x4_t v159 = (uint64_t *)(v132 + 8 * v151);
        uint64_t v160 = &v129[v158];
        do
        {
          uint64_t v162 = *v160++;
          uint64_t v161 = v162;
          uint64_t v163 = *v159++;
          v150 += v163 * v161;
          --v157;
        }
        while (v157);
        goto LABEL_114;
      }
      uint64_t v152 = 0;
      uint64_t v153 = 0;
      uint64_t v154 = v131 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v155 = (void *)(v132 + 8);
      uint64_t v156 = v129 + 1;
      do
      {
        v152 += *(v155 - 1) * *(v156 - 1);
        v153 += *v155 * *v156;
        v156 += 2;
        v155 += 2;
        v154 -= 2;
      }
      while (v154);
      uint64_t v150 = v153 + v152;
      uint64_t v151 = v131 & 0x1FFFFFFFFFFFFFFELL;
      if (v131 != v134) {
        goto LABEL_112;
      }
LABEL_114:
      *(_DWORD *)(v18 + 4 * v136) = *(unsigned __int8 *)(v130 + v133 + v150);
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v164 = (v17 >> 3) + 1;
        int v165 = v17 >> 3;
        while (1)
        {
          uint64_t v166 = (v164 - 2);
          unint64_t v167 = v129[v166] + 1;
          v129[v166] = v167;
          if (v167 < v9[v166]) {
            break;
          }
          v129[(v164 - 2)] = 0;
          --v165;
          if ((unint64_t)--v164 <= 1) {
            goto LABEL_120;
          }
        }
        if (v165 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v129);
      return;
    }
    uint64_t v136 = 0;
    uint64_t v137 = 0;
LABEL_105:
    unint64_t v143 = v131 - v137;
    uint64_t v144 = v137;
    uint64_t v145 = (uint64_t *)(v135 + 8 * v137);
    unint64_t v146 = &v129[v144];
    do
    {
      uint64_t v148 = *v146++;
      uint64_t v147 = v148;
      uint64_t v149 = *v145++;
      v136 += v149 * v147;
      --v143;
    }
    while (v143);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x20)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v168 = (int8x16_t *)(v29 + v31 + 16);
    uint64_t v169 = v18 + 4 * v30 + 64;
    a5.i64[1] = 0xFFFFFF0BFFFFFF0ALL;
    unint64_t v170 = v28 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      int8x16_t v171 = v168[-1];
      int8x16_t v172 = *v168;
      int8x16_t v173 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_192DAD3E0);
      int8x16_t v174 = vqtbl1q_s8(*v168, (int8x16_t)xmmword_192DAD3F0);
      *(int8x16_t *)(v169 - 32) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD400);
      *(int8x16_t *)(v169 - 16) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD410);
      *(int8x16_t *)(v169 - 64) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD3E0);
      *(int8x16_t *)(v169 - 48) = vqtbl1q_s8(v171, (int8x16_t)xmmword_192DAD3F0);
      *(int8x16_t *)(v169 + 32) = vqtbl1q_s8(v172, (int8x16_t)xmmword_192DAD400);
      *(int8x16_t *)(v169 + 48) = vqtbl1q_s8(v172, (int8x16_t)xmmword_192DAD410);
      *(int8x16_t *)uint64_t v169 = v173;
      *(int8x16_t *)(v169 + 16) = v174;
      v169 += 128;
      v168 += 2;
      v170 -= 32;
    }
    while (v170);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 0x18) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      uint64_t v38 = (unsigned __int8 *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      uint64_t v40 = (_DWORD *)(v18 + 4 * v36);
      do
      {
        *uint64_t v40 = *v38;
        v38 += v33;
        uint64_t v40 = (_DWORD *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v175 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v176 = v175 - (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v177 = (unint64_t *)(v31 + v175 + v29);
  uint64_t v178 = (int8x16_t *)(v18 + 4 * (v175 + v30));
  do
  {
    unint64_t v179 = *v177++;
    a5.i64[0] = v179;
    int8x16_t v180 = vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0);
    a5 = vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0);
    *uint64_t v178 = v180;
    v178[1] = a5;
    v178 += 2;
    v176 += 8;
  }
  while (v176);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_1925AD008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    int8x16_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925AD2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRiRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        double v4 = __p;
      }
      else {
        double v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int8x16_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  double v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925AD438(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925AD44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925AD444);
}

__n128 _ZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  double v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  int8x16_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        size_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0xC) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            uint64_t v142 = (__n128 *)(4 * v25 + v13);
            unint64_t v143 = (__n128 *)(4 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
              v24 += v23 & 0xFFFFFFFFFFFFFFF8;
              v25 += v23 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v144 = v143 + 1;
              uint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 8;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (_DWORD *)(v26 + 4 * v24);
            uint64_t v32 = 4 * v27;
            uint64_t v33 = (_DWORD *)(v13 + 4 * v25);
            do
            {
              *uint64_t v33 = *v31;
              v31 += v28;
              uint64_t v33 = (_DWORD *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_DWORD *)(v13 + 4 * v110) = *(_DWORD *)(v104 + 4 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          int8x16_t v119 = (uint64_t *)(v109 + 8 * v111);
          int8x16_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v34 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v35 = 0;
        uint64_t v36 = a2[8];
        uint64_t v37 = a1[8];
        unint64_t v38 = v4[1];
        uint64_t v39 = *a2;
        uint64_t v40 = (uint64_t *)a2[5];
        unint64_t v41 = (uint64_t *)a1[5];
        uint64_t v42 = *v41;
        uint64_t v43 = (__n128 *)(v13 + 4 * v37);
        uint64_t v44 = 4 * *v41;
        uint64_t v45 = *a2 + 4 * v36;
        uint64_t v46 = *v40;
        uint64_t v47 = 4 * *v40;
        unint64_t v48 = v38 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v49 = v43 + 1;
        uint64_t v50 = (__n128 *)(v45 + 16);
        while (!v38)
        {
LABEL_33:
          v37 += v42;
          v36 += v46;
          ++v35;
          uint64_t v49 = (__n128 *)((char *)v49 + v44);
          uint64_t v50 = (__n128 *)((char *)v50 + v47);
          if (v35 == v34) {
            return result;
          }
        }
        uint64_t v51 = v41[1];
        uint64_t v52 = v40[1];
        if (v38 >= 8)
        {
          unint64_t v53 = 0;
          if (v51 == 1 && v52 == 1)
          {
            uint64_t v54 = v36;
            uint64_t v55 = v37;
            if ((unint64_t)v43->n128_u64 + v44 * v35 - v45 - v47 * v35 >= 0x20)
            {
              uint64_t v54 = v36 + v48 * v52;
              BOOL v62 = v50;
              unint64_t v63 = v49;
              unint64_t v64 = v38 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v55 = v37 + v48 * v51;
              do
              {
                __n128 result = v62[-1];
                __n128 v66 = *v62;
                v63[-1] = result;
                *unint64_t v63 = v66;
                v63 += 2;
                v62 += 2;
                v64 -= 8;
              }
              while (v64);
              unint64_t v53 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (v38 == v48) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v53 = 0;
        }
        uint64_t v54 = v36;
        uint64_t v55 = v37;
LABEL_38:
        unint64_t v56 = v38 - v53;
        uint64_t v57 = (_DWORD *)(v39 + 4 * v54);
        uint64_t v58 = 4 * v52;
        uint64_t v59 = 4 * v51;
        uint64_t v60 = (_DWORD *)(v158 + 4 * v55);
        do
        {
          _DWORD *v60 = *v57;
          uint64_t v57 = (_DWORD *)((char *)v57 + v58);
          uint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      unint64_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 4 * *v71;
      uint64_t v155 = 4 * *v150;
      uint64_t v148 = 4 * v68;
      uint64_t v149 = (__n128 *)(v13 + 4 * v69);
      float32x4_t v72 = v149 + 1;
      uint64_t v73 = 4 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        float32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 4 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 4 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      uint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        uint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 8)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            unint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      uint64_t v94 = (_DWORD *)(v76 + 4 * v91);
      uint64_t v95 = 4 * v89;
      uint64_t v96 = 4 * v88;
      uint64_t v97 = (_DWORD *)(v13 + 4 * v92);
      do
      {
        *uint64_t v97 = *v94;
        uint64_t v94 = (_DWORD *)((char *)v94 + v95);
        uint64_t v97 = (_DWORD *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1925ADB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925ADE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clIS1_EEDaS5_EUlRiRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        double v4 = __p;
      }
      else {
        double v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int8x16_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925ADF90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925ADFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925ADF9CLL);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  double v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  int8x16_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  size_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v154 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v67 = 0;
    uint64_t v68 = a2[8];
    uint64_t v69 = a1[8];
    unint64_t v70 = v4[1];
    unint64_t v71 = (uint64_t *)a1[5];
    uint64_t v149 = (uint64_t *)a2[5];
    uint64_t v72 = v13 + 4 * v69 + 32;
    uint64_t v152 = *v149;
    uint64_t v153 = *v71;
    uint64_t v151 = 4 * *v71;
    uint64_t v73 = 2 * v68 + 16;
    uint64_t v150 = 2 * *v149;
    while (!v70)
    {
LABEL_50:
      v69 += v153;
      v68 += v152;
      ++v67;
      v72 += v151;
      v73 += v150;
      if (v67 == v154) {
        return;
      }
    }
    uint64_t v74 = 0;
    unint64_t v75 = v4[2];
    uint64_t v76 = *a2;
    uint64_t v77 = a2[5];
    uint64_t v78 = v71[1];
    unint64_t v79 = v75 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v80 = (float16x4_t *)(*a2 + v73);
    uint64_t v81 = v149[1];
    uint64_t v82 = v72;
    uint64_t v83 = v68;
    uint64_t v84 = v69;
    while (1)
    {
      if (v75)
      {
        uint64_t v85 = v71[2];
        uint64_t v86 = *(void *)(v77 + 16);
        if (v75 >= 0x10 && (v86 == 1 ? (BOOL v87 = v85 == 1) : (BOOL v87 = 0), v87))
        {
          uint64_t v89 = v83 + v79 * v86;
          uint64_t v96 = v80;
          uint64_t v97 = (int32x4_t *)v82;
          unint64_t v98 = v75 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v90 = v84 + v79 * v85;
          do
          {
            float16x8_t v99 = *(float16x8_t *)v96[-2].i8;
            int32x4_t v100 = vcvtq_s32_f32(vcvtq_f32_f16(*v96));
            float32x4_t v101 = vcvt_hight_f32_f16(*(float16x8_t *)v96->i8);
            v97[-2] = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v99.i8));
            v97[-1] = vcvtq_s32_f32(vcvt_hight_f32_f16(v99));
            *uint64_t v97 = v100;
            v97[1] = vcvtq_s32_f32(v101);
            v97 += 4;
            v96 += 4;
            v98 -= 16;
          }
          while (v98);
          unint64_t v88 = v75 & 0xFFFFFFFFFFFFFFF0;
          if (v75 == v79) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v88 = 0;
          uint64_t v89 = v83;
          uint64_t v90 = v84;
        }
        unint64_t v91 = v75 - v88;
        uint64_t v92 = (short float *)(v76 + 2 * v89);
        uint64_t v93 = 2 * v86;
        uint64_t v94 = 4 * v85;
        uint64_t v95 = (_DWORD *)(v13 + 4 * v90);
        do
        {
          *uint64_t v95 = (int)*v92;
          uint64_t v92 = (short float *)((char *)v92 + v93);
          uint64_t v95 = (_DWORD *)((char *)v95 + v94);
          --v91;
        }
        while (v91);
      }
LABEL_53:
      v84 += v78;
      v83 += v81;
      ++v74;
      v82 += 4 * v78;
      uint64_t v80 = (float16x4_t *)((char *)v80 + 2 * v81);
      if (v74 == v70) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v46 = v13 + 4 * v38 + 32;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 2 * v37 + 16;
    uint64_t v49 = 2 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 0x10 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          BOOL v61 = (float16x4_t *)v48;
          BOOL v62 = (int32x4_t *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            float16x8_t v64 = *(float16x8_t *)v61[-2].i8;
            int32x4_t v65 = vcvtq_s32_f32(vcvtq_f32_f16(*v61));
            float32x4_t v66 = vcvt_hight_f32_f16(*(float16x8_t *)v61->i8);
            v62[-2] = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v64.i8));
            v62[-1] = vcvtq_s32_f32(vcvt_hight_f32_f16(v64));
            *BOOL v62 = v65;
            v62[1] = vcvtq_s32_f32(v66);
            v62 += 4;
            v61 += 4;
            v63 -= 16;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF0;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (short float *)(v40 + 2 * v54);
        uint64_t v58 = 2 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          _DWORD *v60 = (int)*v57;
          uint64_t v57 = (short float *)((char *)v57 + v58);
          uint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __n128 v102 = operator new(v12);
    bzero(v102, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v103 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v104 = 1;
    }
    else {
      unint64_t v104 = v12 >> 3;
    }
    uint64_t v105 = a2[5];
    uint64_t v106 = a2[8];
    uint64_t v107 = v104 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v108 = a1[5];
    while (v104 >= 2)
    {
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      uint64_t v113 = v104 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v114 = (void *)(v108 + 8);
      uint64_t v115 = v102 + 1;
      do
      {
        v111 += *(v114 - 1) * *(v115 - 1);
        v112 += *v114 * *v115;
        v115 += 2;
        v114 += 2;
        v113 -= 2;
      }
      while (v113);
      uint64_t v109 = v112 + v111;
      uint64_t v110 = v104 & 0x1FFFFFFFFFFFFFFELL;
      if (v104 != v107) {
        goto LABEL_78;
      }
LABEL_80:
      if (v104 < 2)
      {
        uint64_t v123 = 0;
        uint64_t v124 = 0;
LABEL_85:
        unint64_t v130 = v104 - v124;
        uint64_t v131 = v124;
        uint64_t v132 = (uint64_t *)(v105 + 8 * v124);
        uint64_t v133 = &v102[v131];
        do
        {
          uint64_t v135 = *v133++;
          uint64_t v134 = v135;
          uint64_t v136 = *v132++;
          v123 += v136 * v134;
          --v130;
        }
        while (v130);
        goto LABEL_87;
      }
      uint64_t v125 = 0;
      uint64_t v126 = 0;
      uint64_t v127 = v104 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v128 = (void *)(v105 + 8);
      uint64_t v129 = v102 + 1;
      do
      {
        v125 += *(v128 - 1) * *(v129 - 1);
        v126 += *v128 * *v129;
        v129 += 2;
        v128 += 2;
        v127 -= 2;
      }
      while (v127);
      uint64_t v123 = v126 + v125;
      uint64_t v124 = v104 & 0x1FFFFFFFFFFFFFFELL;
      if (v104 != v107) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v109) = (int)*(short float *)(v103 + 2 * (v106 + v123));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v137 = (v12 >> 3) + 1;
        int v138 = v12 >> 3;
        while (1)
        {
          uint64_t v139 = (v137 - 2);
          unint64_t v140 = v102[v139] + 1;
          v102[v139] = v140;
          if (v140 < v4[v139]) {
            break;
          }
          v102[(v137 - 2)] = 0;
          --v138;
          if ((unint64_t)--v137 <= 1) {
            goto LABEL_93;
          }
        }
        if (v138 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v102);
      return;
    }
    uint64_t v109 = 0;
    uint64_t v110 = 0;
LABEL_78:
    unint64_t v116 = v104 - v110;
    uint64_t v117 = v110;
    uint64_t v118 = (uint64_t *)(v108 + 8 * v110);
    int8x16_t v119 = &v102[v117];
    do
    {
      uint64_t v121 = *v119++;
      uint64_t v120 = v121;
      uint64_t v122 = *v118++;
      v109 += v122 * v120;
      --v116;
    }
    while (v116);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (short float *)(v26 + 2 * v24);
    uint64_t v32 = 2 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (int)*v31;
      uint64_t v31 = (short float *)((char *)v31 + v32);
      unint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v141 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  unint64_t v143 = (float16x4_t *)(v26 + 2 * v24 + 16);
  uint64_t v144 = v13 + 4 * v25 + 32;
  unint64_t v145 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float16x8_t v146 = *(float16x8_t *)v143[-2].i8;
    int32x4_t v147 = vcvtq_s32_f32(vcvtq_f32_f16(*v143));
    float32x4_t v148 = vcvt_hight_f32_f16(*(float16x8_t *)v143->i8);
    *(int32x4_t *)(v144 - 32) = vcvtq_s32_f32(vcvtq_f32_f16(*(float16x4_t *)v146.i8));
    *(int32x4_t *)(v144 - 16) = vcvtq_s32_f32(vcvt_hight_f32_f16(v146));
    *(int32x4_t *)uint64_t v144 = v147;
    *(int32x4_t *)(v144 + 16) = vcvtq_s32_f32(v148);
    v144 += 64;
    v143 += 4;
    v145 -= 16;
  }
  while (v145);
  uint64_t v24 = v141;
  uint64_t v25 = v142;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925AE6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925AE950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IDhEEEEDaS5_EUlRiRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        double v4 = __p;
      }
      else {
        double v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int8x16_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925AEAD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925AEAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925AEAE4);
}

void _ZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  double v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  int8x16_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  size_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v148 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v65 = 0;
    uint64_t v66 = a2[8];
    uint64_t v67 = a1[8];
    unint64_t v68 = v4[1];
    uint64_t v69 = (uint64_t *)a1[5];
    unint64_t v143 = (uint64_t *)a2[5];
    uint64_t v70 = v13 + 4 * v67 + 16;
    uint64_t v146 = *v143;
    uint64_t v147 = *v69;
    uint64_t v145 = 4 * *v69;
    uint64_t v71 = 4 * v66 + 16;
    uint64_t v144 = 4 * *v143;
    while (!v68)
    {
LABEL_50:
      v67 += v147;
      v66 += v146;
      ++v65;
      v70 += v145;
      v71 += v144;
      if (v65 == v148) {
        return;
      }
    }
    uint64_t v72 = 0;
    unint64_t v73 = v4[2];
    uint64_t v74 = *a2;
    uint64_t v75 = a2[5];
    uint64_t v76 = v69[1];
    unint64_t v77 = v73 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = (float32x4_t *)(*a2 + v71);
    uint64_t v79 = v143[1];
    uint64_t v80 = (int32x4_t *)v70;
    uint64_t v81 = v66;
    uint64_t v82 = v67;
    while (1)
    {
      if (v73)
      {
        uint64_t v83 = v69[2];
        uint64_t v84 = *(void *)(v75 + 16);
        if (v73 >= 8 && (v84 == 1 ? (BOOL v85 = v83 == 1) : (BOOL v85 = 0), v85))
        {
          uint64_t v87 = v81 + v77 * v84;
          uint64_t v94 = v78;
          uint64_t v95 = v80;
          unint64_t v96 = v73 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v88 = v82 + v77 * v83;
          do
          {
            int32x4_t v97 = vcvtq_s32_f32(*v94);
            v95[-1] = vcvtq_s32_f32(v94[-1]);
            *uint64_t v95 = v97;
            v95 += 2;
            v94 += 2;
            v96 -= 8;
          }
          while (v96);
          unint64_t v86 = v73 & 0xFFFFFFFFFFFFFFF8;
          if (v73 == v77) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v86 = 0;
          uint64_t v87 = v81;
          uint64_t v88 = v82;
        }
        unint64_t v89 = v73 - v86;
        uint64_t v90 = (float *)(v74 + 4 * v87);
        uint64_t v91 = 4 * v84;
        uint64_t v92 = 4 * v83;
        uint64_t v93 = (_DWORD *)(v13 + 4 * v88);
        do
        {
          *uint64_t v93 = (int)*v90;
          uint64_t v90 = (float *)((char *)v90 + v91);
          uint64_t v93 = (_DWORD *)((char *)v93 + v92);
          --v89;
        }
        while (v89);
      }
LABEL_53:
      v82 += v76;
      v81 += v79;
      ++v72;
      uint64_t v80 = (int32x4_t *)((char *)v80 + 4 * v76);
      uint64_t v78 = (float32x4_t *)((char *)v78 + 4 * v79);
      if (v72 == v68) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v35 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v36 = 0;
    uint64_t v37 = a2[8];
    uint64_t v38 = a1[8];
    unint64_t v39 = v4[1];
    uint64_t v40 = *a2;
    unint64_t v41 = (uint64_t *)a2[5];
    uint64_t v42 = (uint64_t *)a1[5];
    uint64_t v43 = *v42;
    uint64_t v44 = *v41;
    unint64_t v45 = v39 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = v13 + 4 * v38 + 16;
    uint64_t v47 = 4 * *v42;
    uint64_t v48 = *a2 + 4 * v37 + 16;
    uint64_t v49 = 4 * *v41;
    while (1)
    {
      if (v39)
      {
        uint64_t v50 = v42[1];
        uint64_t v51 = v41[1];
        if (v39 >= 8 && (v51 == 1 ? (BOOL v52 = v50 == 1) : (BOOL v52 = 0), v52))
        {
          uint64_t v54 = v37 + v45 * v51;
          BOOL v61 = (float32x4_t *)v48;
          BOOL v62 = (_OWORD *)v46;
          unint64_t v63 = v39 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v55 = v38 + v45 * v50;
          do
          {
            int32x4_t v64 = vcvtq_s32_f32(*v61);
            *(v62 - 1) = vcvtq_s32_f32(v61[-1]);
            *BOOL v62 = v64;
            v62 += 2;
            v61 += 2;
            v63 -= 8;
          }
          while (v63);
          unint64_t v53 = v39 & 0xFFFFFFFFFFFFFFF8;
          if (v39 == v45) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v53 = 0;
          uint64_t v54 = v37;
          uint64_t v55 = v38;
        }
        unint64_t v56 = v39 - v53;
        uint64_t v57 = (float *)(v40 + 4 * v54);
        uint64_t v58 = 4 * v51;
        uint64_t v59 = 4 * v50;
        uint64_t v60 = (_DWORD *)(v13 + 4 * v55);
        do
        {
          _DWORD *v60 = (int)*v57;
          uint64_t v57 = (float *)((char *)v57 + v58);
          uint64_t v60 = (_DWORD *)((char *)v60 + v59);
          --v56;
        }
        while (v56);
      }
LABEL_33:
      v38 += v43;
      v37 += v44;
      ++v36;
      v46 += v47;
      v48 += v49;
      if (v36 == v35) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v98 = operator new(v12);
    bzero(v98, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v99 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v100 = 1;
    }
    else {
      unint64_t v100 = v12 >> 3;
    }
    uint64_t v101 = a2[5];
    uint64_t v102 = a2[8];
    uint64_t v103 = v100 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v104 = a1[5];
    while (v100 >= 2)
    {
      uint64_t v107 = 0;
      uint64_t v108 = 0;
      uint64_t v109 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v110 = (void *)(v104 + 8);
      uint64_t v111 = v98 + 1;
      do
      {
        v107 += *(v110 - 1) * *(v111 - 1);
        v108 += *v110 * *v111;
        v111 += 2;
        v110 += 2;
        v109 -= 2;
      }
      while (v109);
      uint64_t v105 = v108 + v107;
      uint64_t v106 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_78;
      }
LABEL_80:
      if (v100 < 2)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
LABEL_85:
        unint64_t v126 = v100 - v120;
        uint64_t v127 = v120;
        uint64_t v128 = (uint64_t *)(v101 + 8 * v120);
        uint64_t v129 = &v98[v127];
        do
        {
          uint64_t v131 = *v129++;
          uint64_t v130 = v131;
          uint64_t v132 = *v128++;
          v119 += v132 * v130;
          --v126;
        }
        while (v126);
        goto LABEL_87;
      }
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = v100 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v124 = (void *)(v101 + 8);
      uint64_t v125 = v98 + 1;
      do
      {
        v121 += *(v124 - 1) * *(v125 - 1);
        v122 += *v124 * *v125;
        v125 += 2;
        v124 += 2;
        v123 -= 2;
      }
      while (v123);
      uint64_t v119 = v122 + v121;
      uint64_t v120 = v100 & 0x1FFFFFFFFFFFFFFELL;
      if (v100 != v103) {
        goto LABEL_85;
      }
LABEL_87:
      *(_DWORD *)(v13 + 4 * v105) = (int)*(float *)(v99 + 4 * (v102 + v119));
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v133 = (v12 >> 3) + 1;
        int v134 = v12 >> 3;
        while (1)
        {
          uint64_t v135 = (v133 - 2);
          unint64_t v136 = v98[v135] + 1;
          v98[v135] = v136;
          if (v136 < v4[v135]) {
            break;
          }
          v98[(v133 - 2)] = 0;
          --v134;
          if ((unint64_t)--v133 <= 1) {
            goto LABEL_93;
          }
        }
        if (v134 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v98);
      return;
    }
    uint64_t v105 = 0;
    uint64_t v106 = 0;
LABEL_78:
    unint64_t v112 = v100 - v106;
    uint64_t v113 = v106;
    uint64_t v114 = (uint64_t *)(v104 + 8 * v106);
    uint64_t v115 = &v98[v113];
    do
    {
      uint64_t v117 = *v115++;
      uint64_t v116 = v117;
      uint64_t v118 = *v114++;
      v105 += v118 * v116;
      --v112;
    }
    while (v112);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 8)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (float *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 4 * v27;
    unint64_t v34 = (_DWORD *)(v13 + 4 * v25);
    do
    {
      *unint64_t v34 = (int)*v31;
      uint64_t v31 = (float *)((char *)v31 + v32);
      unint64_t v34 = (_DWORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v137 = v24 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v138 = v25 + (v23 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v139 = (float32x4_t *)(v26 + 4 * v24 + 16);
  unint64_t v140 = (int32x4_t *)(v13 + 4 * v25 + 16);
  unint64_t v141 = v23 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int32x4_t v142 = vcvtq_s32_f32(*v139);
    v140[-1] = vcvtq_s32_f32(v139[-1]);
    int32x4_t *v140 = v142;
    v139 += 2;
    v140 += 2;
    v141 -= 8;
  }
  while (v141);
  uint64_t v24 = v137;
  uint64_t v25 = v138;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925AF1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  double v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int8x16_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925AF450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIiE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIiEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRiRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        double v4 = __p;
      }
      else {
        double v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int8x16_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925AF5D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925AF5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925AF5E4);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        double v4 = __p;
      }
      else {
        double v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    int8x16_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925AF750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925AF764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925AF75CLL);
}

void _ZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)v16, (uint64_t)a1);
      nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<int>>((uint64_t)v16, a2);
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      unint64_t v3 = v17;
      if (!v17) {
        return;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)v22, (uint64_t)a1);
      nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<unsigned char>>((uint64_t)v22, a2);
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      if (v24)
      {
        uint64_t v25 = v24;
        operator delete(v24);
      }
      unint64_t v3 = v23;
      if (!v23) {
        return;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)v4, (uint64_t)a1);
      nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<float>>((uint64_t)v4, a2);
      if (v8)
      {
        unint64_t v9 = v8;
        operator delete(v8);
      }
      if (v6)
      {
        uint64_t v7 = v6;
        operator delete(v6);
      }
      unint64_t v3 = v5;
      if (v5) {
        goto LABEL_25;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)v10, (uint64_t)a1);
      nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<half>>((uint64_t)v10, a2);
      if (__p)
      {
        std::locale v15 = __p;
        operator delete(__p);
      }
      if (v12)
      {
        unsigned __int8 v13 = v12;
        operator delete(v12);
      }
      unint64_t v3 = v11;
      if (!v11) {
        return;
      }
LABEL_25:
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv();
  }
}

void sub_1925AF940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925AF954(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1925AF968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925AF97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<unsigned char>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<half>::init_from_shape((uint64_t **)(a1 + 16), &v6);
  _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_(&v6, (uint64_t *)a1, v4);
  nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v6);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    unint64_t v9 = v8;
    operator delete(v8);
  }
  uint64_t v5 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1925AFA6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<int>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<half>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v5);
  if (__p)
  {
    unsigned __int8 v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  float16x8_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AFB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<half>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<half>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v5);
  if (__p)
  {
    unsigned __int8 v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  float16x8_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AFC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::cast<half>(void)const::{lambda(half)#1}::operator()<nitro::ndarray<float>>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  nitro::ndarray<half>::init_from_shape((uint64_t **)(a1 + 16), &v5);
  _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_(&v5, (uint64_t *)a1);
  nitro::ndarray_container::ndarray_container<half,(void *)0>(a2, &v5);
  if (__p)
  {
    unsigned __int8 v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  float16x8_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1925AFCD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925AFF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float16x8_t _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2, float16x8_t result)
{
  uint64_t v5 = (unint64_t *)a1[2];
  float16x8_t v4 = (char *)a1[3];
  unint64_t v6 = (v4 - (char *)v5) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (a2[3] - (uint64_t)v7) >> 3) {
    goto LABEL_13;
  }
  if (v4 == (char *)v5) {
    return result;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v4 - (char *)v5) >> 3;
  if (*v5 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    unint64_t v11 = v5[v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v13 = v4 - (char *)v5;
  if (v4 == (char *)v5) {
    return result;
  }
  uint64_t v14 = *a1;
  if (!*a1) {
    return result;
  }
  if (v13 - 8 < 8)
  {
    uint64_t v15 = 1;
    unint64_t v16 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v22 = *v16++;
      v15 *= v22;
    }
    while (v16 != (unint64_t *)v4);
    goto LABEL_21;
  }
  unint64_t v17 = ((v13 - 8) >> 3) + 1;
  unint64_t v16 = &v5[v17 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v18 = v5 + 1;
  uint64_t v19 = 1;
  uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v21 = 1;
  do
  {
    v19 *= *(v18 - 1);
    v21 *= *v18;
    v18 += 2;
    v20 -= 2;
  }
  while (v20);
  uint64_t v15 = v21 * v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v15) {
    return result;
  }
  uint64_t v23 = (uint64_t)v13 >> 3;
  if ((uint64_t)v13 >> 3 == 3)
  {
    unint64_t v171 = *v5;
    if (!*v5) {
      return result;
    }
    uint64_t v76 = 0;
    uint64_t v77 = a2[8];
    unint64_t v78 = v5[1];
    uint64_t v79 = (uint64_t *)a1[5];
    unint64_t v167 = (uint64_t *)a2[5];
    uint64_t v168 = a1[8];
    uint64_t v169 = *v167;
    uint64_t v170 = *v79;
    uint64_t v172 = 2 * *v79;
    uint64_t v80 = 2 * v168 + v14 + 32;
    uint64_t v81 = v77 + 16;
    uint64_t v82 = v168;
    while (!v78)
    {
LABEL_64:
      v77 += v169;
      ++v76;
      v80 += v172;
      v81 += v169;
      v82 += v170;
      if (v76 == v171) {
        return result;
      }
    }
    uint64_t v83 = 0;
    unint64_t v84 = v5[2];
    uint64_t v85 = *a2;
    uint64_t v86 = a2[5];
    uint64_t v87 = v79[1];
    uint64_t v88 = 2 * v87;
    uint64_t v89 = v167[1];
    unint64_t v174 = v84 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v90 = v84 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v91 = (uint8x8_t *)(*a2 + v81);
    uint64_t v92 = v82;
    uint64_t v93 = v77;
    uint64_t v94 = v80;
    while (!v84)
    {
LABEL_67:
      v92 += v87;
      v93 += v89;
      ++v83;
      v94 += v88;
      uint64_t v91 = (uint8x8_t *)((char *)v91 + v89);
      if (v83 == v78) {
        goto LABEL_64;
      }
    }
    uint64_t v95 = v79[2];
    uint64_t v96 = *(void *)(v86 + 16);
    if (v84 < 8
      || (v95 == 1 ? (BOOL v97 = v96 == 1) : (BOOL v97 = 0),
          !v97
       || (v14 + 2 * v168 + v172 * v76 + v88 * v83 < v85 + v84 + v77 + v89 * v83
         ? (BOOL v98 = v85 + v93 >= v14 + v172 * v76 + 2 * (v168 + v84) + v88 * v83)
         : (BOOL v98 = 1),
           !v98)))
    {
      unint64_t v100 = 0;
      uint64_t v101 = v93;
      uint64_t v102 = v92;
      goto LABEL_83;
    }
    if (v84 >= 0x20)
    {
      uint64_t v107 = v91;
      uint64_t v108 = (float16x8_t *)v94;
      unint64_t v109 = v84 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v110 = *(uint8x16_t *)v107[-2].i8;
        float16x8_t v111 = vcvtq_f16_u16(vmovl_u8(*v107));
        uint16x8_t v112 = vmovl_high_u8(*(uint8x16_t *)v107->i8);
        v108[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v110.i8));
        v108[-1] = vcvtq_f16_u16(vmovl_high_u8(v110));
        __n128 result = vcvtq_f16_u16(v112);
        *uint64_t v108 = v111;
        v108[1] = result;
        v108 += 4;
        v107 += 4;
        v109 -= 32;
      }
      while (v109);
      if (v84 == v174) {
        goto LABEL_67;
      }
      unint64_t v99 = v84 & 0xFFFFFFFFFFFFFFE0;
      if ((v84 & 0x18) == 0)
      {
        uint64_t v102 = v92 + v174 * v95;
        unint64_t v100 = v84 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v101 = v93 + v174 * v96;
LABEL_83:
        unint64_t v103 = v84 - v100;
        uint64_t v104 = (__int8 *)(v85 + v101);
        uint64_t v105 = 2 * v95;
        uint64_t v106 = (_WORD *)(v14 + 2 * v102);
        do
        {
          result.i8[0] = *v104;
          *(short float *)result.i16 = (short float)result.u16[0];
          *uint64_t v106 = result.i16[0];
          v104 += v96;
          uint64_t v106 = (_WORD *)((char *)v106 + v105);
          --v103;
        }
        while (v103);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v99 = 0;
    }
    uint64_t v101 = v93 + v90 * v96;
    uint64_t v102 = v92 + v90 * v95;
    unint64_t v113 = v99 - (v84 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v114 = v85 + v99;
    uint64_t v115 = (float16x8_t *)(v14 + 2 * (v99 + v92));
    do
    {
      __n128 result = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)(v114 + v93)));
      *v115++ = result;
      v114 += 8;
      v113 += 8;
    }
    while (v113);
    unint64_t v100 = v84 & 0xFFFFFFFFFFFFFFF8;
    if (v84 == v90) {
      goto LABEL_67;
    }
    goto LABEL_83;
  }
  if (v23 == 2)
  {
    unint64_t v37 = *v5;
    if (!*v5) {
      return result;
    }
    uint64_t v38 = 0;
    uint64_t v39 = a2[8];
    uint64_t v40 = a1[8];
    unint64_t v41 = v5[1];
    uint64_t v42 = *a2;
    uint64_t v43 = (uint64_t *)a2[5];
    uint64_t v44 = (uint64_t *)a1[5];
    uint64_t v45 = *v44;
    uint64_t v46 = 2 * *v44;
    uint64_t v47 = v39 + v41;
    unint64_t v48 = v41 & 0xFFFFFFFFFFFFFFE0;
    unint64_t v49 = v41 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = 2 * v40 + v14 + 32;
    uint64_t v51 = *v43;
    uint64_t v52 = v39 + *a2 + 16;
    uint64_t v53 = v14 + 2 * v40;
    uint64_t v54 = v14 + 2 * (v40 + v41);
    while (!v41)
    {
LABEL_34:
      v40 += v45;
      v39 += v51;
      ++v38;
      v50 += v46;
      v52 += v51;
      if (v38 == v37) {
        return result;
      }
    }
    uint64_t v55 = v44[1];
    uint64_t v56 = v43[1];
    if (v41 < 8
      || (v55 == 1 ? (BOOL v57 = v56 == 1) : (BOOL v57 = 0),
          !v57
       || (v53 + v46 * v38 < (unint64_t)(v42 + v47 + v51 * v38)
         ? (BOOL v58 = v42 + v39 >= (unint64_t)(v54 + v46 * v38))
         : (BOOL v58 = 1),
           !v58)))
    {
      unint64_t v60 = 0;
      uint64_t v61 = v39;
      uint64_t v62 = v40;
      goto LABEL_50;
    }
    if (v41 >= 0x20)
    {
      uint64_t v67 = (uint8x8_t *)v52;
      unint64_t v68 = (float16x8_t *)v50;
      unint64_t v69 = v41 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        uint8x16_t v70 = *(uint8x16_t *)v67[-2].i8;
        float16x8_t v71 = vcvtq_f16_u16(vmovl_u8(*v67));
        uint16x8_t v72 = vmovl_high_u8(*(uint8x16_t *)v67->i8);
        v68[-2] = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v70.i8));
        v68[-1] = vcvtq_f16_u16(vmovl_high_u8(v70));
        __n128 result = vcvtq_f16_u16(v72);
        *unint64_t v68 = v71;
        v68[1] = result;
        v68 += 4;
        v67 += 4;
        v69 -= 32;
      }
      while (v69);
      if (v41 == v48) {
        goto LABEL_34;
      }
      unint64_t v59 = v41 & 0xFFFFFFFFFFFFFFE0;
      if ((v41 & 0x18) == 0)
      {
        uint64_t v62 = v40 + v48 * v55;
        unint64_t v60 = v41 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v61 = v39 + v48 * v56;
LABEL_50:
        unint64_t v63 = v41 - v60;
        int32x4_t v64 = (__int8 *)(v42 + v61);
        uint64_t v65 = 2 * v55;
        uint64_t v66 = (_WORD *)(v14 + 2 * v62);
        do
        {
          result.i8[0] = *v64;
          *(short float *)result.i16 = (short float)result.u16[0];
          *uint64_t v66 = result.i16[0];
          v64 += v56;
          uint64_t v66 = (_WORD *)((char *)v66 + v65);
          --v63;
        }
        while (v63);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v59 = 0;
    }
    uint64_t v61 = v39 + v49 * v56;
    uint64_t v62 = v40 + v49 * v55;
    unint64_t v73 = v59 - (v41 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v74 = v42 + v59;
    uint64_t v75 = (float16x8_t *)(v14 + 2 * (v59 + v40));
    do
    {
      __n128 result = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)(v74 + v39)));
      *v75++ = result;
      v74 += 8;
      v73 += 8;
    }
    while (v73);
    unint64_t v60 = v41 & 0xFFFFFFFFFFFFFFF8;
    if (v41 == v49) {
      goto LABEL_34;
    }
    goto LABEL_50;
  }
  if (v23 != 1)
  {
    if ((v13 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v116 = operator new(v13);
    bzero(v116, v13 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v118 = *a2;
    if (v13 >> 3 <= 1) {
      unint64_t v119 = 1;
    }
    else {
      unint64_t v119 = v13 >> 3;
    }
    uint64_t v120 = a2[5];
    uint64_t v121 = a2[8];
    uint64_t v122 = v119 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v123 = a1[5];
    while (v119 >= 2)
    {
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      uint64_t v128 = v119 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v129 = (void *)(v123 + 8);
      uint64_t v130 = v116 + 1;
      do
      {
        v126 += *(v129 - 1) * *(v130 - 1);
        v127 += *v129 * *v130;
        v130 += 2;
        v129 += 2;
        v128 -= 2;
      }
      while (v128);
      uint64_t v124 = v127 + v126;
      uint64_t v125 = v119 & 0x1FFFFFFFFFFFFFFELL;
      if (v119 != v122) {
        goto LABEL_105;
      }
LABEL_107:
      if (v119 < 2)
      {
        uint64_t v138 = 0;
        uint64_t v139 = 0;
LABEL_112:
        unint64_t v145 = v119 - v139;
        uint64_t v146 = v139;
        uint64_t v147 = (uint64_t *)(v120 + 8 * v139);
        unint64_t v148 = &v116[v146];
        do
        {
          uint64_t v150 = *v148++;
          uint64_t v149 = v150;
          uint64_t v151 = *v147++;
          v138 += v151 * v149;
          --v145;
        }
        while (v145);
        goto LABEL_114;
      }
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      uint64_t v142 = v119 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v143 = (void *)(v120 + 8);
      uint64_t v144 = v116 + 1;
      do
      {
        v140 += *(v143 - 1) * *(v144 - 1);
        v141 += *v143 * *v144;
        v144 += 2;
        v143 += 2;
        v142 -= 2;
      }
      while (v142);
      uint64_t v138 = v141 + v140;
      uint64_t v139 = v119 & 0x1FFFFFFFFFFFFFFELL;
      if (v119 != v122) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v117) = *(unsigned char *)(v118 + v121 + v138);
      short float v117 = (short float)LOWORD(v117);
      *(short float *)(v14 + 2 * v124) = v117;
      if ((int)(v13 >> 3) >= 1)
      {
        uint64_t v152 = (v13 >> 3) + 1;
        int v153 = v13 >> 3;
        while (1)
        {
          uint64_t v154 = (v152 - 2);
          unint64_t v155 = v116[v154] + 1;
          v116[v154] = v155;
          if (v155 < v5[v154]) {
            break;
          }
          v116[(v152 - 2)] = 0;
          --v153;
          if ((unint64_t)--v152 <= 1) {
            goto LABEL_120;
          }
        }
        if (v153 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v116);
      return result;
    }
    uint64_t v124 = 0;
    uint64_t v125 = 0;
LABEL_105:
    unint64_t v131 = v119 - v125;
    uint64_t v132 = v125;
    uint64_t v133 = (uint64_t *)(v123 + 8 * v125);
    int v134 = &v116[v132];
    do
    {
      uint64_t v136 = *v134++;
      uint64_t v135 = v136;
      uint64_t v137 = *v133++;
      v124 += v137 * v135;
      --v131;
    }
    while (v131);
    goto LABEL_107;
  }
  unint64_t v24 = *v5;
  if (!*v5) {
    return result;
  }
  uint64_t v25 = a2[8];
  uint64_t v26 = a1[8];
  uint64_t v27 = *a2;
  uint64_t v28 = *(void *)a1[5];
  uint64_t v29 = *(void *)a2[5];
  if (v24 < 8) {
    goto LABEL_27;
  }
  unint64_t v30 = 0;
  if (v28 != 1 || v29 != 1) {
    goto LABEL_28;
  }
  if (v14 + 2 * v26 < v27 + v24 + v25 && v27 + v25 < v14 + 2 * (v24 + v26))
  {
LABEL_27:
    unint64_t v30 = 0;
LABEL_28:
    uint64_t v31 = a2[8];
    uint64_t v32 = a1[8];
    goto LABEL_29;
  }
  if (v24 >= 0x20)
  {
    unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v156 = (uint8x8_t *)(v25 + v27 + 16);
    uint64_t v157 = v14 + 2 * v26 + 32;
    unint64_t v158 = v24 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      uint8x16_t v159 = *(uint8x16_t *)v156[-2].i8;
      float16x8_t v160 = vcvtq_f16_u16(vmovl_u8(*v156));
      uint16x8_t v161 = vmovl_high_u8(*(uint8x16_t *)v156->i8);
      *(float16x8_t *)(v157 - 32) = vcvtq_f16_u16(vmovl_u8(*(uint8x8_t *)v159.i8));
      *(float16x8_t *)(v157 - 16) = vcvtq_f16_u16(vmovl_high_u8(v159));
      __n128 result = vcvtq_f16_u16(v161);
      *(float16x8_t *)uint64_t v157 = v160;
      *(float16x8_t *)(v157 + 16) = result;
      v157 += 64;
      v156 += 4;
      v158 -= 32;
    }
    while (v158);
    if (v24 == v30) {
      return result;
    }
    if ((v24 & 0x18) == 0)
    {
      uint64_t v32 = v26 + v30;
      uint64_t v31 = v25 + v30;
LABEL_29:
      unint64_t v33 = v24 - v30;
      unint64_t v34 = (__int8 *)(v27 + v31);
      uint64_t v35 = 2 * v28;
      uint64_t v36 = (_WORD *)(v14 + 2 * v32);
      do
      {
        result.i8[0] = *v34;
        *(short float *)result.i16 = (short float)result.u16[0];
        *uint64_t v36 = result.i16[0];
        v34 += v29;
        uint64_t v36 = (_WORD *)((char *)v36 + v35);
        --v33;
      }
      while (v33);
      return result;
    }
  }
  else
  {
    unint64_t v30 = 0;
  }
  unint64_t v162 = v30;
  unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = v25 + (v24 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = v26 + (v24 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v163 = v162 - (v24 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v164 = (uint8x8_t *)(v27 + v162 + v25);
  int v165 = (float16x8_t *)(v14 + 2 * (v162 + v26));
  do
  {
    uint8x8_t v166 = *v164++;
    __n128 result = vcvtq_f16_u16(vmovl_u8(v166));
    *v165++ = result;
    v163 += 8;
  }
  while (v163);
  if (v24 != v30) {
    goto LABEL_29;
  }
  return result;
}

void sub_1925B088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925B0B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IhEEEEDaS5_EUlRDhRKhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B0CBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B0CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B0CC8);
}

void _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float16x8_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  unint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v164 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = a2[8];
    uint64_t v75 = a1[8];
    unint64_t v76 = v4[1];
    uint64_t v77 = (uint64_t *)a1[5];
    uint8x16_t v159 = (uint64_t *)a2[5];
    uint64_t v78 = v13 + 2 * v75 + 16;
    uint64_t v162 = *v159;
    uint64_t v163 = *v77;
    uint64_t v161 = 2 * *v77;
    uint64_t v79 = 4 * v74 + 32;
    uint64_t v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164) {
        return;
      }
    }
    uint64_t v80 = 0;
    unint64_t v81 = v4[2];
    uint64_t v82 = *a2;
    uint64_t v83 = a2[5];
    uint64_t v84 = v77[1];
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v86 = (int32x4_t *)(*a2 + v79);
    uint64_t v87 = v159[1];
    uint64_t v88 = (float16x8_t *)v78;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    while (1)
    {
      if (v81)
      {
        uint64_t v91 = v77[2];
        uint64_t v92 = *(void *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (BOOL v93 = v91 == 1) : (BOOL v93 = 0), v93))
        {
          uint64_t v95 = v89 + v85 * v92;
          unint64_t v103 = v86;
          uint64_t v104 = v88;
          unint64_t v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v96 = v90 + v85 * v91;
          do
          {
            int32x4_t v106 = v103[-2];
            int32x4_t v107 = v103[-1];
            int32x4_t v108 = *v103;
            int32x4_t v109 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v106)), vcvtq_f32_s32(v107));
            *uint64_t v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v108)), vcvtq_f32_s32(v109));
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          unint64_t v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v95 = v89;
          uint64_t v96 = v90;
        }
        unint64_t v97 = v81 - v94;
        BOOL v98 = (int *)(v82 + 4 * v95);
        uint64_t v99 = 4 * v92;
        uint64_t v100 = 2 * v91;
        uint64_t v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = (float)*v98;
          __asm { FCVT            H0, S0 }
          *uint64_t v101 = LOWORD(_S0);
          BOOL v98 = (int *)((char *)v98 + v99);
          uint64_t v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      uint64_t v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      uint64_t v86 = (int32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v39 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v40 = 0;
    uint64_t v41 = a2[8];
    uint64_t v42 = a1[8];
    unint64_t v43 = v4[1];
    uint64_t v44 = *a2;
    uint64_t v45 = (uint64_t *)a2[5];
    uint64_t v46 = (uint64_t *)a1[5];
    uint64_t v47 = *v46;
    uint64_t v48 = *v45;
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v50 = v13 + 2 * v42 + 16;
    uint64_t v51 = 2 * *v46;
    uint64_t v52 = *a2 + 4 * v41 + 32;
    uint64_t v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        uint64_t v54 = v46[1];
        uint64_t v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v58 = v41 + v49 * v55;
          uint64_t v66 = (int32x4_t *)v52;
          uint64_t v67 = (float16x8_t *)v50;
          unint64_t v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v59 = v42 + v49 * v54;
          do
          {
            int32x4_t v69 = v66[-2];
            int32x4_t v70 = v66[-1];
            int32x4_t v71 = *v66;
            int32x4_t v72 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v69)), vcvtq_f32_s32(v70));
            *uint64_t v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v71)), vcvtq_f32_s32(v72));
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          unint64_t v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v58 = v41;
          uint64_t v59 = v42;
        }
        unint64_t v60 = v43 - v57;
        uint64_t v61 = (int *)(v44 + 4 * v58);
        uint64_t v62 = 4 * v55;
        uint64_t v63 = 2 * v54;
        int32x4_t v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = (float)*v61;
          __asm { FCVT            H0, S0 }
          *int32x4_t v64 = LOWORD(_S0);
          uint64_t v61 = (int *)((char *)v61 + v62);
          int32x4_t v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint8x16_t v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v111 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v112 = 1;
    }
    else {
      unint64_t v112 = v12 >> 3;
    }
    uint64_t v113 = a2[5];
    uint64_t v114 = a2[8];
    uint64_t v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v116 = a1[5];
    while (v112 >= 2)
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      uint64_t v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v122 = (void *)(v116 + 8);
      uint64_t v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      uint64_t v117 = v120 + v119;
      uint64_t v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_78;
      }
LABEL_80:
      if (v112 < 2)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
LABEL_85:
        unint64_t v138 = v112 - v132;
        uint64_t v139 = v132;
        uint64_t v140 = (uint64_t *)(v113 + 8 * v132);
        uint64_t v141 = &v110[v139];
        do
        {
          uint64_t v143 = *v141++;
          uint64_t v142 = v143;
          uint64_t v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v136 = (void *)(v113 + 8);
      uint64_t v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      uint64_t v131 = v134 + v133;
      uint64_t v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_85;
      }
LABEL_87:
      _S0 = (float)*(int *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = LOWORD(_S0);
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v146 = (v12 >> 3) + 1;
        int v147 = v12 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148]) {
            break;
          }
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_93;
          }
        }
        if (v147 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    uint64_t v117 = 0;
    uint64_t v118 = 0;
LABEL_78:
    unint64_t v124 = v112 - v118;
    uint64_t v125 = v118;
    uint64_t v126 = (uint64_t *)(v116 + 8 * v118);
    uint64_t v127 = &v110[v125];
    do
    {
      uint64_t v129 = *v127++;
      uint64_t v128 = v129;
      uint64_t v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    unint64_t v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = (float)*v31;
      __asm { FCVT            H0, S0 }
      *unint64_t v34 = LOWORD(_S0);
      uint64_t v31 = (int *)((char *)v31 + v32);
      unint64_t v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = (int32x4_t *)(v26 + 4 * v24 + 32);
  int v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  unint64_t v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    int32x4_t v155 = v152[-2];
    int32x4_t v156 = v152[-1];
    int32x4_t v157 = *v152;
    int32x4_t v158 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v155)), vcvtq_f32_s32(v156));
    *int v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vcvtq_f32_s32(v157)), vcvtq_f32_s32(v158));
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  uint64_t v24 = v150;
  uint64_t v25 = v151;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925B13E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925B168C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIiZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IiEEEEDaS5_EUlRDhRKiE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B1814(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B1828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B1820);
}

__n128 _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float16x8_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return result;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 != (char *)v4)
  {
    uint64_t v13 = *a1;
    if (*a1)
    {
      if (v12 - 8 >= 8)
      {
        unint64_t v16 = ((v12 - 8) >> 3) + 1;
        std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
        unint64_t v17 = v4 + 1;
        uint64_t v18 = 1;
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v20 = 1;
        do
        {
          v18 *= *(v17 - 1);
          v20 *= *v17;
          v17 += 2;
          v19 -= 2;
        }
        while (v19);
        uint64_t v14 = v20 * v18;
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFELL)) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v14 = 1;
        std::locale v15 = (unint64_t *)a1[2];
      }
      do
      {
        uint64_t v21 = *v15++;
        v14 *= v21;
      }
      while (v15 != (unint64_t *)v3);
LABEL_21:
      if (!v14) {
        return result;
      }
      uint64_t v22 = (uint64_t)v12 >> 3;
      uint64_t v158 = *a1;
      if ((uint64_t)v12 >> 3 != 3)
      {
        if (v22 != 2)
        {
          if (v22 == 1)
          {
            unint64_t v23 = *v4;
            if (!*v4) {
              return result;
            }
            uint64_t v24 = a2[8];
            uint64_t v25 = a1[8];
            uint64_t v26 = *a2;
            uint64_t v27 = *(void *)a1[5];
            uint64_t v28 = *(void *)a2[5];
            if (v23 < 0x10) {
              goto LABEL_27;
            }
            unint64_t v29 = 0;
            if (v27 != 1 || v28 != 1) {
              goto LABEL_28;
            }
            uint64_t v142 = (__n128 *)(2 * v25 + v13);
            uint64_t v143 = (__n128 *)(2 * v24 + v26);
            if ((unint64_t)((char *)v142 - (char *)v143) < 0x20)
            {
LABEL_27:
              unint64_t v29 = 0;
            }
            else
            {
              unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
              v24 += v23 & 0xFFFFFFFFFFFFFFF0;
              v25 += v23 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v144 = v143 + 1;
              unint64_t v145 = v142 + 1;
              unint64_t v146 = v23 & 0xFFFFFFFFFFFFFFF0;
              do
              {
                __n128 result = v144[-1];
                __n128 v147 = *v144;
                v145[-1] = result;
                __n128 *v145 = v147;
                v144 += 2;
                v145 += 2;
                v146 -= 16;
              }
              while (v146);
              if (v23 == v29) {
                return result;
              }
            }
LABEL_28:
            unint64_t v30 = v23 - v29;
            uint64_t v31 = (unsigned __int16 *)(v26 + 2 * v24);
            uint64_t v32 = 2 * v27;
            uint64_t v33 = (unsigned __int16 *)(v13 + 2 * v25);
            do
            {
              result.n128_u16[0] = *v31;
              *uint64_t v33 = *v31;
              v31 += v28;
              uint64_t v33 = (unsigned __int16 *)((char *)v33 + v32);
              --v30;
            }
            while (v30);
            return result;
          }
          if ((v12 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v103 = operator new(v12);
          bzero(v103, v12 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v104 = *a2;
          if (v12 >> 3 <= 1) {
            unint64_t v105 = 1;
          }
          else {
            unint64_t v105 = v12 >> 3;
          }
          uint64_t v106 = a2[5];
          uint64_t v107 = a2[8];
          uint64_t v108 = v105 & 0x1FFFFFFFFFFFFFFELL;
          uint64_t v109 = a1[5];
          while (v105 >= 2)
          {
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v115 = (void *)(v109 + 8);
            uint64_t v116 = v103 + 1;
            do
            {
              v112 += *(v115 - 1) * *(v116 - 1);
              v113 += *v115 * *v116;
              v116 += 2;
              v115 += 2;
              v114 -= 2;
            }
            while (v114);
            uint64_t v110 = v113 + v112;
            uint64_t v111 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_84;
            }
LABEL_86:
            if (v105 < 2)
            {
              uint64_t v124 = 0;
              uint64_t v125 = 0;
LABEL_91:
              unint64_t v131 = v105 - v125;
              uint64_t v132 = v125;
              uint64_t v133 = (uint64_t *)(v106 + 8 * v125);
              uint64_t v134 = &v103[v132];
              do
              {
                uint64_t v136 = *v134++;
                uint64_t v135 = v136;
                uint64_t v137 = *v133++;
                v124 += v137 * v135;
                --v131;
              }
              while (v131);
              goto LABEL_93;
            }
            uint64_t v126 = 0;
            uint64_t v127 = 0;
            uint64_t v128 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v129 = (void *)(v106 + 8);
            uint64_t v130 = v103 + 1;
            do
            {
              v126 += *(v129 - 1) * *(v130 - 1);
              v127 += *v129 * *v130;
              v130 += 2;
              v129 += 2;
              v128 -= 2;
            }
            while (v128);
            uint64_t v124 = v127 + v126;
            uint64_t v125 = v105 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v13 = v158;
            if (v105 != v108) {
              goto LABEL_91;
            }
LABEL_93:
            *(_WORD *)(v13 + 2 * v110) = *(_WORD *)(v104 + 2 * (v107 + v124));
            if ((int)(v12 >> 3) >= 1)
            {
              uint64_t v138 = (v12 >> 3) + 1;
              int v139 = v12 >> 3;
              while (1)
              {
                uint64_t v140 = (v138 - 2);
                unint64_t v141 = v103[v140] + 1;
                v103[v140] = v141;
                if (v141 < v4[v140]) {
                  break;
                }
                v103[(v138 - 2)] = 0;
                --v139;
                if ((unint64_t)--v138 <= 1) {
                  goto LABEL_99;
                }
              }
              if (v139 > 0) {
                continue;
              }
            }
LABEL_99:
            operator delete(v103);
            return result;
          }
          uint64_t v110 = 0;
          uint64_t v111 = 0;
LABEL_84:
          unint64_t v117 = v105 - v111;
          uint64_t v118 = v111;
          uint64_t v119 = (uint64_t *)(v109 + 8 * v111);
          uint64_t v120 = &v103[v118];
          do
          {
            uint64_t v122 = *v120++;
            uint64_t v121 = v122;
            uint64_t v123 = *v119++;
            v110 += v123 * v121;
            --v117;
          }
          while (v117);
          goto LABEL_86;
        }
        unint64_t v35 = *v4;
        if (!*v4) {
          return result;
        }
        uint64_t v36 = 0;
        uint64_t v37 = a2[8];
        uint64_t v38 = a1[8];
        unint64_t v39 = v4[1];
        uint64_t v40 = *a2;
        uint64_t v41 = (uint64_t *)a2[5];
        uint64_t v42 = (uint64_t *)a1[5];
        uint64_t v43 = *v42;
        uint64_t v44 = (__n128 *)(v13 + 2 * v38);
        uint64_t v45 = 2 * *v42;
        uint64_t v46 = *a2 + 2 * v37;
        uint64_t v47 = *v41;
        uint64_t v48 = 2 * *v41;
        unint64_t v49 = v39 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v50 = v44 + 1;
        uint64_t v51 = (__n128 *)(v46 + 16);
        while (!v39)
        {
LABEL_33:
          v38 += v43;
          v37 += v47;
          ++v36;
          uint64_t v50 = (__n128 *)((char *)v50 + v45);
          uint64_t v51 = (__n128 *)((char *)v51 + v48);
          if (v36 == v35) {
            return result;
          }
        }
        uint64_t v52 = v42[1];
        uint64_t v53 = v41[1];
        if (v39 >= 0x10)
        {
          unint64_t v54 = 0;
          if (v52 == 1 && v53 == 1)
          {
            uint64_t v55 = v37;
            uint64_t v56 = v38;
            if ((unint64_t)v44->n128_u64 + v45 * v36 - v46 - v48 * v36 >= 0x20)
            {
              uint64_t v55 = v37 + v49 * v53;
              uint64_t v63 = v51;
              int32x4_t v64 = v50;
              unint64_t v65 = v39 & 0xFFFFFFFFFFFFFFF0;
              uint64_t v56 = v38 + v49 * v52;
              do
              {
                __n128 result = v63[-1];
                __n128 v66 = *v63;
                v64[-1] = result;
                *int32x4_t v64 = v66;
                v64 += 2;
                v63 += 2;
                v65 -= 16;
              }
              while (v65);
              unint64_t v54 = v39 & 0xFFFFFFFFFFFFFFF0;
              if (v39 == v49) {
                goto LABEL_33;
              }
            }
            goto LABEL_38;
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        uint64_t v55 = v37;
        uint64_t v56 = v38;
LABEL_38:
        unint64_t v57 = v39 - v54;
        uint64_t v58 = (unsigned __int16 *)(v40 + 2 * v55);
        uint64_t v59 = 2 * v53;
        uint64_t v60 = 2 * v52;
        uint64_t v61 = (unsigned __int16 *)(v158 + 2 * v56);
        do
        {
          result.n128_u16[0] = *v58;
          unsigned __int16 *v61 = *v58;
          uint64_t v58 = (unsigned __int16 *)((char *)v58 + v59);
          uint64_t v61 = (unsigned __int16 *)((char *)v61 + v60);
          --v57;
        }
        while (v57);
        goto LABEL_33;
      }
      unint64_t v154 = *v4;
      if (!*v4) {
        return result;
      }
      uint64_t v67 = 0;
      uint64_t v68 = a2[8];
      uint64_t v69 = a1[8];
      unint64_t v70 = v4[1];
      int32x4_t v71 = (uint64_t *)a1[5];
      uint64_t v150 = (uint64_t *)a2[5];
      uint64_t v151 = a1[2];
      uint64_t v152 = *v150;
      uint64_t v153 = *v71;
      uint64_t v156 = 2 * *v71;
      uint64_t v155 = 2 * *v150;
      uint64_t v148 = 2 * v68;
      unint64_t v149 = (__n128 *)(v13 + 2 * v69);
      int32x4_t v72 = v149 + 1;
      uint64_t v73 = 2 * v68 + 16;
      while (!v70)
      {
LABEL_53:
        v69 += v153;
        v68 += v152;
        ++v67;
        int32x4_t v72 = (__n128 *)((char *)v72 + v156);
        v73 += v155;
        if (v67 == v154) {
          return result;
        }
      }
      uint64_t v74 = 0;
      unint64_t v75 = *(void *)(v151 + 16);
      uint64_t v76 = *a2;
      uint64_t v77 = v71[1];
      uint64_t v78 = v150[1];
      uint64_t v79 = 2 * v77;
      uint64_t v80 = v148 + v155 * v67 + *a2;
      uint64_t v81 = 2 * v78;
      unint64_t v82 = v75 & 0xFFFFFFFFFFFFFFF0;
      uint64_t v83 = a2[5];
      uint64_t v84 = (__n128 *)(*a2 + v73);
      unint64_t v85 = v72;
      uint64_t v86 = v68;
      uint64_t v87 = v69;
      while (!v75)
      {
LABEL_56:
        v87 += v77;
        v86 += v78;
        ++v74;
        unint64_t v85 = (__n128 *)((char *)v85 + v79);
        uint64_t v84 = (__n128 *)((char *)v84 + v81);
        if (v74 == v70) {
          goto LABEL_53;
        }
      }
      uint64_t v88 = v71[2];
      uint64_t v89 = *(void *)(v83 + 16);
      if (v75 >= 0x10)
      {
        unint64_t v90 = 0;
        if (v88 == 1 && v89 == 1)
        {
          uint64_t v91 = v86;
          uint64_t v92 = v87;
          if ((unint64_t)v149->n128_u64 + v156 * v67 + v79 * v74 - v80 - v81 * v74 >= 0x20)
          {
            uint64_t v91 = v86 + v82 * v89;
            uint64_t v99 = v84;
            uint64_t v100 = v85;
            unint64_t v101 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v92 = v87 + v82 * v88;
            do
            {
              __n128 result = v99[-1];
              __n128 v102 = *v99;
              v100[-1] = result;
              *uint64_t v100 = v102;
              v100 += 2;
              v99 += 2;
              v101 -= 16;
            }
            while (v101);
            unint64_t v90 = v75 & 0xFFFFFFFFFFFFFFF0;
            uint64_t v13 = v158;
            if (v75 == v82) {
              goto LABEL_56;
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = v86;
      uint64_t v92 = v87;
LABEL_61:
      unint64_t v93 = v75 - v90;
      unint64_t v94 = (unsigned __int16 *)(v76 + 2 * v91);
      uint64_t v95 = 2 * v89;
      uint64_t v96 = 2 * v88;
      unint64_t v97 = (unsigned __int16 *)(v13 + 2 * v92);
      do
      {
        result.n128_u16[0] = *v94;
        *unint64_t v97 = *v94;
        unint64_t v94 = (unsigned __int16 *)((char *)v94 + v95);
        unint64_t v97 = (unsigned __int16 *)((char *)v97 + v96);
        --v93;
      }
      while (v93);
      goto LABEL_56;
    }
  }
  return result;
}

void sub_1925B1F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925B21E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIDhZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clIS1_EEDaS5_EUlRDhRKDhE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B236C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B2380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B2378);
}

void _ZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_(uint64_t *a1, uint64_t *a2)
{
  float16x8_t v4 = (unint64_t *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - (char *)v4) >> 3;
  unint64_t v6 = (void *)a2[2];
  if (v5 != (a2[3] - (uint64_t)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - (char *)v4) >> 3;
  if (*v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    unint64_t v10 = v4[v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv();
  size_t v12 = v3 - (char *)v4;
  if (v3 == (char *)v4) {
    return;
  }
  uint64_t v13 = *a1;
  if (!*a1) {
    return;
  }
  if (v12 - 8 < 8)
  {
    uint64_t v14 = 1;
    std::locale v15 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *v15++;
      v14 *= v21;
    }
    while (v15 != (unint64_t *)v3);
    goto LABEL_21;
  }
  unint64_t v16 = ((v12 - 8) >> 3) + 1;
  std::locale v15 = &v4[v16 & 0x3FFFFFFFFFFFFFFELL];
  unint64_t v17 = v4 + 1;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  uint64_t v22 = (uint64_t)v12 >> 3;
  if ((uint64_t)v12 >> 3 == 3)
  {
    unint64_t v164 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v73 = 0;
    uint64_t v74 = a2[8];
    uint64_t v75 = a1[8];
    unint64_t v76 = v4[1];
    uint64_t v77 = (uint64_t *)a1[5];
    uint8x16_t v159 = (uint64_t *)a2[5];
    uint64_t v78 = v13 + 2 * v75 + 16;
    uint64_t v162 = *v159;
    uint64_t v163 = *v77;
    uint64_t v161 = 2 * *v77;
    uint64_t v79 = 4 * v74 + 32;
    uint64_t v160 = 4 * *v159;
    while (!v76)
    {
LABEL_50:
      v75 += v163;
      v74 += v162;
      ++v73;
      v78 += v161;
      v79 += v160;
      if (v73 == v164) {
        return;
      }
    }
    uint64_t v80 = 0;
    unint64_t v81 = v4[2];
    uint64_t v82 = *a2;
    uint64_t v83 = a2[5];
    uint64_t v84 = v77[1];
    unint64_t v85 = v81 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v86 = (float32x4_t *)(*a2 + v79);
    uint64_t v87 = v159[1];
    uint64_t v88 = (float16x8_t *)v78;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    while (1)
    {
      if (v81)
      {
        uint64_t v91 = v77[2];
        uint64_t v92 = *(void *)(v83 + 16);
        if (v81 >= 0x10 && (v92 == 1 ? (BOOL v93 = v91 == 1) : (BOOL v93 = 0), v93))
        {
          uint64_t v95 = v89 + v85 * v92;
          unint64_t v103 = v86;
          uint64_t v104 = v88;
          unint64_t v105 = v81 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v96 = v90 + v85 * v91;
          do
          {
            float32x4_t v107 = v103[-2];
            float32x4_t v106 = v103[-1];
            float32x4_t v109 = *v103;
            float32x4_t v108 = v103[1];
            v103 += 4;
            v104[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v107), v106);
            *uint64_t v104 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v109), v108);
            v104 += 2;
            v105 -= 16;
          }
          while (v105);
          unint64_t v94 = v81 & 0xFFFFFFFFFFFFFFF0;
          if (v81 == v85) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v94 = 0;
          uint64_t v95 = v89;
          uint64_t v96 = v90;
        }
        unint64_t v97 = v81 - v94;
        BOOL v98 = (int *)(v82 + 4 * v95);
        uint64_t v99 = 4 * v92;
        uint64_t v100 = 2 * v91;
        unint64_t v101 = (_WORD *)(v13 + 2 * v96);
        do
        {
          _S0 = *v98;
          __asm { FCVT            H0, S0 }
          *unint64_t v101 = _S0;
          BOOL v98 = (int *)((char *)v98 + v99);
          unint64_t v101 = (_WORD *)((char *)v101 + v100);
          --v97;
        }
        while (v97);
      }
LABEL_53:
      v90 += v84;
      v89 += v87;
      ++v80;
      uint64_t v88 = (float16x8_t *)((char *)v88 + 2 * v84);
      uint64_t v86 = (float32x4_t *)((char *)v86 + 4 * v87);
      if (v80 == v76) {
        goto LABEL_50;
      }
    }
  }
  if (v22 == 2)
  {
    unint64_t v39 = *v4;
    if (!*v4) {
      return;
    }
    uint64_t v40 = 0;
    uint64_t v41 = a2[8];
    uint64_t v42 = a1[8];
    unint64_t v43 = v4[1];
    uint64_t v44 = *a2;
    uint64_t v45 = (uint64_t *)a2[5];
    uint64_t v46 = (uint64_t *)a1[5];
    uint64_t v47 = *v46;
    uint64_t v48 = *v45;
    unint64_t v49 = v43 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v50 = v13 + 2 * v42 + 16;
    uint64_t v51 = 2 * *v46;
    uint64_t v52 = *a2 + 4 * v41 + 32;
    uint64_t v53 = 4 * *v45;
    while (1)
    {
      if (v43)
      {
        uint64_t v54 = v46[1];
        uint64_t v55 = v45[1];
        if (v43 >= 0x10 && (v55 == 1 ? (_ZF = v54 == 1) : (_ZF = 0), _ZF))
        {
          uint64_t v58 = v41 + v49 * v55;
          __n128 v66 = (float32x4_t *)v52;
          uint64_t v67 = (float16x8_t *)v50;
          unint64_t v68 = v43 & 0xFFFFFFFFFFFFFFF0;
          uint64_t v59 = v42 + v49 * v54;
          do
          {
            float32x4_t v70 = v66[-2];
            float32x4_t v69 = v66[-1];
            float32x4_t v72 = *v66;
            float32x4_t v71 = v66[1];
            v66 += 4;
            v67[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v70), v69);
            *uint64_t v67 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v72), v71);
            v67 += 2;
            v68 -= 16;
          }
          while (v68);
          unint64_t v57 = v43 & 0xFFFFFFFFFFFFFFF0;
          if (v43 == v49) {
            goto LABEL_33;
          }
        }
        else
        {
          unint64_t v57 = 0;
          uint64_t v58 = v41;
          uint64_t v59 = v42;
        }
        unint64_t v60 = v43 - v57;
        uint64_t v61 = (int *)(v44 + 4 * v58);
        uint64_t v62 = 4 * v55;
        uint64_t v63 = 2 * v54;
        int32x4_t v64 = (_WORD *)(v13 + 2 * v59);
        do
        {
          _S0 = *v61;
          __asm { FCVT            H0, S0 }
          *int32x4_t v64 = _S0;
          uint64_t v61 = (int *)((char *)v61 + v62);
          int32x4_t v64 = (_WORD *)((char *)v64 + v63);
          --v60;
        }
        while (v60);
      }
LABEL_33:
      v42 += v47;
      v41 += v48;
      ++v40;
      v50 += v51;
      v52 += v53;
      if (v40 == v39) {
        return;
      }
    }
  }
  if (v22 != 1)
  {
    if ((v12 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v110 = operator new(v12);
    bzero(v110, v12 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v111 = *a2;
    if (v12 >> 3 <= 1) {
      unint64_t v112 = 1;
    }
    else {
      unint64_t v112 = v12 >> 3;
    }
    uint64_t v113 = a2[5];
    uint64_t v114 = a2[8];
    uint64_t v115 = v112 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v116 = a1[5];
    while (v112 >= 2)
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
      uint64_t v121 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v122 = (void *)(v116 + 8);
      uint64_t v123 = v110 + 1;
      do
      {
        v119 += *(v122 - 1) * *(v123 - 1);
        v120 += *v122 * *v123;
        v123 += 2;
        v122 += 2;
        v121 -= 2;
      }
      while (v121);
      uint64_t v117 = v120 + v119;
      uint64_t v118 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_78;
      }
LABEL_80:
      if (v112 < 2)
      {
        uint64_t v131 = 0;
        uint64_t v132 = 0;
LABEL_85:
        unint64_t v138 = v112 - v132;
        uint64_t v139 = v132;
        uint64_t v140 = (uint64_t *)(v113 + 8 * v132);
        unint64_t v141 = &v110[v139];
        do
        {
          uint64_t v143 = *v141++;
          uint64_t v142 = v143;
          uint64_t v144 = *v140++;
          v131 += v144 * v142;
          --v138;
        }
        while (v138);
        goto LABEL_87;
      }
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v135 = v112 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v136 = (void *)(v113 + 8);
      uint64_t v137 = v110 + 1;
      do
      {
        v133 += *(v136 - 1) * *(v137 - 1);
        v134 += *v136 * *v137;
        v137 += 2;
        v136 += 2;
        v135 -= 2;
      }
      while (v135);
      uint64_t v131 = v134 + v133;
      uint64_t v132 = v112 & 0x1FFFFFFFFFFFFFFELL;
      if (v112 != v115) {
        goto LABEL_85;
      }
LABEL_87:
      _S0 = *(_DWORD *)(v111 + 4 * (v114 + v131));
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v13 + 2 * v117) = _S0;
      if ((int)(v12 >> 3) >= 1)
      {
        uint64_t v146 = (v12 >> 3) + 1;
        int v147 = v12 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v110[v148] + 1;
          v110[v148] = v149;
          if (v149 < v4[v148]) {
            break;
          }
          v110[(v146 - 2)] = 0;
          --v147;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_93;
          }
        }
        if (v147 > 0) {
          continue;
        }
      }
LABEL_93:
      operator delete(v110);
      return;
    }
    uint64_t v117 = 0;
    uint64_t v118 = 0;
LABEL_78:
    unint64_t v124 = v112 - v118;
    uint64_t v125 = v118;
    uint64_t v126 = (uint64_t *)(v116 + 8 * v118);
    uint64_t v127 = &v110[v125];
    do
    {
      uint64_t v129 = *v127++;
      uint64_t v128 = v129;
      uint64_t v130 = *v126++;
      v117 += v130 * v128;
      --v124;
    }
    while (v124);
    goto LABEL_80;
  }
  unint64_t v23 = *v4;
  if (!*v4) {
    return;
  }
  uint64_t v24 = a2[8];
  uint64_t v25 = a1[8];
  uint64_t v26 = *a2;
  uint64_t v27 = *(void *)a1[5];
  uint64_t v28 = *(void *)a2[5];
  if (v23 < 0x10)
  {
    unint64_t v29 = 0;
LABEL_28:
    unint64_t v30 = v23 - v29;
    uint64_t v31 = (int *)(v26 + 4 * v24);
    uint64_t v32 = 4 * v28;
    uint64_t v33 = 2 * v27;
    unint64_t v34 = (_WORD *)(v13 + 2 * v25);
    do
    {
      _S0 = *v31;
      __asm { FCVT            H0, S0 }
      *unint64_t v34 = _S0;
      uint64_t v31 = (int *)((char *)v31 + v32);
      unint64_t v34 = (_WORD *)((char *)v34 + v33);
      --v30;
    }
    while (v30);
    return;
  }
  unint64_t v29 = 0;
  if (v28 != 1) {
    goto LABEL_28;
  }
  if (v27 != 1) {
    goto LABEL_28;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v150 = v24 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = v25 + (v23 & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = (float32x4_t *)(v26 + 4 * v24 + 32);
  uint64_t v153 = (float16x8_t *)(v13 + 2 * v25 + 16);
  unint64_t v154 = v23 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    float32x4_t v156 = v152[-2];
    float32x4_t v155 = v152[-1];
    float32x4_t v158 = *v152;
    float32x4_t v157 = v152[1];
    v152 += 4;
    v153[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v156), v155);
    *uint64_t v153 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v158), v157);
    v153 += 2;
    v154 -= 16;
  }
  while (v154);
  uint64_t v24 = v150;
  uint64_t v25 = v151;
  if (v23 != v29) {
    goto LABEL_28;
  }
}

void sub_1925B2A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      unint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925B2CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro7ndarrayIDhE24pairwise_element_visitorIfZZNKS_17ndarray_container4castIDhEES3_vENKUlT_E_clINS0_IfEEEEDaS5_EUlRDhRKfE_EEvRKNS0_IS5_EET0_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B2E84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B2E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B2E90);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS0_4castIDhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B2FFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B3010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B3008);
}

void nitro::ndarray_container::visit<nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0>(nitro::ndarray_container::reshape(std::vector<long long> const&)::$_0)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v7 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v7 && v7[280])
    {
      uint64_t v8 = v7 + 16;
      if ((v21 & 0x80u) == 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v11 = (file_logger *)global_logger();
    size_t v12 = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unsigned __int8 v13 = (char *)pthread_getspecific(*((void *)v12 + 74));
    if (v13 && v13[280])
    {
      uint64_t v14 = v13 + 16;
      if ((v24 & 0x80u) == 0) {
        std::locale v15 = v23;
      }
      else {
        std::locale v15 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v16 = v24;
      }
      else {
        uint64_t v16 = (uint64_t)v23[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    unint64_t v17 = pthread_getspecific(*((void *)v12 + 74));
    if (v17)
    {
      if (*((unsigned char *)v17 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v12);
        if (*((_DWORD *)v12 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v24 < 0) {
      operator delete(v23[0]);
    }
  }
  uint64_t v18 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925B327C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      uint64_t v11 = (v7 >> 3) + 1;
      unint64_t v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      size_t v12 = v5 + 1;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      do
      {
        int64x2_t v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        int64x2_t v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      unint64_t v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = (uint64_t *)*a2;
    }
    do
    {
      uint64_t v17 = *v9++;
      if (v17 < 1) {
        ++v8;
      }
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    uint64_t p_p = v8;
    if (v8 > 1)
    {
      p_uint64_t p_p = &p_p;
      nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    uint64_t v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      unint64_t v22 = v18 >> 3;
      p_uint64_t p_p = 0;
      uint64_t v100 = 0;
      unint64_t v101 = 0;
      unint64_t v20 = 1;
      goto LABEL_36;
    }
    unint64_t v19 = v18 - 8;
    if (v19 >= 8)
    {
      uint64_t v23 = (v19 >> 3) + 1;
      unsigned __int8 v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      unsigned __int8 v24 = &v5->i64[1];
      uint64_t v25 = 1;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v27 = 1;
      do
      {
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        if (v28 <= 1) {
          uint64_t v28 = 1;
        }
        if (v29 <= 1) {
          uint64_t v29 = 1;
        }
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      unint64_t v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v20 = 1;
      unsigned __int8 v21 = (uint64_t *)v5;
    }
    do
    {
      uint64_t v31 = *v21++;
      uint64_t v30 = v31;
      if (v31 <= 1) {
        uint64_t v30 = 1;
      }
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_uint64_t p_p = 0;
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    int64_t v32 = (char *)v6 - (char *)v5;
    unint64_t v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_uint64_t p_p = v33;
      unint64_t v101 = &v33->i8[8 * v22];
      unint64_t v34 = v5;
      unint64_t v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18) {
        goto LABEL_102;
      }
      unint64_t v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      uint64_t v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      unint64_t v35 = &v33->i64[v37];
      uint64_t v38 = v33 + 1;
      unint64_t v39 = v5 + 1;
      uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v41 = *v39;
        v38[-1] = v39[-1];
        *uint64_t v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        do
        {
          uint64_t v42 = v34->i64[0];
          unint64_t v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      uint64_t v100 = v35;
    }
LABEL_36:
    if (!v8)
    {
      unint64_t v49 = (char *)a1[2];
      uint64_t v48 = (char *)a1[3];
      goto LABEL_76;
    }
    uint64_t p_p = 0;
    uint64_t v44 = a1[2];
    unint64_t v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      unint64_t v45 = 0;
      goto LABEL_47;
    }
    unint64_t v45 = *a1;
    if (!*a1) {
      goto LABEL_47;
    }
    unint64_t v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      uint64_t v50 = (v46 >> 3) + 1;
      uint64_t v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v51 = (void *)(v44 + 8);
      uint64_t v52 = 1;
      uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      unint64_t v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        uint64_t p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          uint64_t v56 = 0;
          unint64_t v57 = p_p_p;
          if (v22 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v22;
          }
          do
          {
            if (v5->i64[v56] > 0) {
              goto LABEL_54;
            }
            uint64_t v61 = a1[2];
            unint64_t v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              unint64_t v59 = 0;
            }
            else
            {
              unint64_t v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                uint64_t v64 = (v62 >> 3) + 1;
                uint64_t v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                unint64_t v65 = (void *)(v61 + 8);
                uint64_t v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v67 = 1;
                uint64_t v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                unint64_t v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL)) {
                  goto LABEL_53;
                }
              }
              else
              {
                unint64_t v59 = 1;
                uint64_t v63 = (uint64_t *)a1[2];
              }
              do
              {
                uint64_t v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        unint64_t v49 = (char *)a1[2];
        uint64_t v48 = (char *)a1[3];
        if (v48 == v49) {
          goto LABEL_86;
        }
        if (!*a1)
        {
          unint64_t v20 = 0;
          goto LABEL_76;
        }
        unint64_t v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          uint64_t v72 = 0;
          uint64_t v73 = (v70 >> 3) + 1;
          uint64_t v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          float32x4_t v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v75 = 1;
          uint64_t v76 = 1;
          do
          {
            uint64_t v77 = &v49[8 * v72];
            v75 *= *(void *)v77;
            v76 *= *((void *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          unint64_t v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              uint64_t v79 = 0;
              goto LABEL_85;
            }
            uint64_t v79 = *a1;
            if (!*a1) {
              goto LABEL_85;
            }
            unint64_t v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              uint64_t v82 = (v80 >> 3) + 1;
              unint64_t v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v83 = v49 + 8;
              uint64_t v84 = 1;
              uint64_t v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              uint64_t v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                uint64_t v98 = v79;
                if (v20 != v79)
                {
                  uint64_t p_p = (uint64_t)&__p;
                  BOOL v93 = (std::__shared_weak_count *)&v98;
                  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<unsigned char>::canonicalize(a1, &p_p);
                __p = 0;
                uint64_t v90 = 0;
                uint64_t v91 = 0;
                nitro::ndarray<unsigned char>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  uint64_t v90 = __p;
                  operator delete(__p);
                }
                if (v96)
                {
                  unint64_t v97 = v96;
                  operator delete(v96);
                }
                if (v94)
                {
                  uint64_t v95 = v94;
                  operator delete(v94);
                }
                uint64_t v88 = v93;
                if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
                if (p_p_p)
                {
                  uint64_t v100 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              uint64_t v79 = 1;
              unint64_t v81 = v49;
            }
            do
            {
              uint64_t v87 = *(void *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          unint64_t v20 = 1;
          float32x4_t v71 = (char *)a1[2];
        }
        do
        {
          uint64_t v78 = *(void *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v45 = 1;
      uint64_t v47 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  uint64_t v10 = a1[3] - a1[2];
  uint64_t p_p = v10 >> 3;
  if (v10)
  {
    p_uint64_t p_p = &p_p;
    nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<unsigned char>::ndarray(a3, a1);
}

void sub_1925B39AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B3D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_unknown", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B406C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_elem() % new_numel", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B43C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_numel", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B4728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B48B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B48C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B48BCLL);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B4A28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B4A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B4A34);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B4BA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B4BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B4BACLL);
}

void nitro::ndarray<unsigned char>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B4D18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B4D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B4D24);
}

void nitro::ndarray<int>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      uint64_t v11 = (v7 >> 3) + 1;
      unint64_t v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      size_t v12 = v5 + 1;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      do
      {
        int64x2_t v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        int64x2_t v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      unint64_t v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = (uint64_t *)*a2;
    }
    do
    {
      uint64_t v17 = *v9++;
      if (v17 < 1) {
        ++v8;
      }
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    uint64_t p_p = v8;
    if (v8 > 1)
    {
      p_uint64_t p_p = &p_p;
      nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    uint64_t v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      unint64_t v22 = v18 >> 3;
      p_uint64_t p_p = 0;
      uint64_t v100 = 0;
      unint64_t v101 = 0;
      unint64_t v20 = 1;
      goto LABEL_36;
    }
    unint64_t v19 = v18 - 8;
    if (v19 >= 8)
    {
      uint64_t v23 = (v19 >> 3) + 1;
      uint64_t v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      unsigned __int8 v24 = &v5->i64[1];
      uint64_t v25 = 1;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v27 = 1;
      do
      {
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        if (v28 <= 1) {
          uint64_t v28 = 1;
        }
        if (v29 <= 1) {
          uint64_t v29 = 1;
        }
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      unint64_t v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v20 = 1;
      uint64_t v21 = (uint64_t *)v5;
    }
    do
    {
      uint64_t v31 = *v21++;
      uint64_t v30 = v31;
      if (v31 <= 1) {
        uint64_t v30 = 1;
      }
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_uint64_t p_p = 0;
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    int64_t v32 = (char *)v6 - (char *)v5;
    unint64_t v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_uint64_t p_p = v33;
      unint64_t v101 = &v33->i8[8 * v22];
      unint64_t v34 = v5;
      unint64_t v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18) {
        goto LABEL_102;
      }
      unint64_t v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      uint64_t v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      unint64_t v35 = &v33->i64[v37];
      uint64_t v38 = v33 + 1;
      unint64_t v39 = v5 + 1;
      uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v41 = *v39;
        v38[-1] = v39[-1];
        *uint64_t v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        do
        {
          uint64_t v42 = v34->i64[0];
          unint64_t v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      uint64_t v100 = v35;
    }
LABEL_36:
    if (!v8)
    {
      unint64_t v49 = (char *)a1[2];
      uint64_t v48 = (char *)a1[3];
      goto LABEL_76;
    }
    uint64_t p_p = 0;
    uint64_t v44 = a1[2];
    unint64_t v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      unint64_t v45 = 0;
      goto LABEL_47;
    }
    unint64_t v45 = *a1;
    if (!*a1) {
      goto LABEL_47;
    }
    unint64_t v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      uint64_t v50 = (v46 >> 3) + 1;
      uint64_t v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v51 = (void *)(v44 + 8);
      uint64_t v52 = 1;
      uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      unint64_t v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        uint64_t p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          uint64_t v56 = 0;
          unint64_t v57 = p_p_p;
          if (v22 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v22;
          }
          do
          {
            if (v5->i64[v56] > 0) {
              goto LABEL_54;
            }
            uint64_t v61 = a1[2];
            unint64_t v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              unint64_t v59 = 0;
            }
            else
            {
              unint64_t v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                uint64_t v64 = (v62 >> 3) + 1;
                uint64_t v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                unint64_t v65 = (void *)(v61 + 8);
                uint64_t v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v67 = 1;
                uint64_t v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                unint64_t v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL)) {
                  goto LABEL_53;
                }
              }
              else
              {
                unint64_t v59 = 1;
                uint64_t v63 = (uint64_t *)a1[2];
              }
              do
              {
                uint64_t v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        unint64_t v49 = (char *)a1[2];
        uint64_t v48 = (char *)a1[3];
        if (v48 == v49) {
          goto LABEL_86;
        }
        if (!*a1)
        {
          unint64_t v20 = 0;
          goto LABEL_76;
        }
        unint64_t v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          uint64_t v72 = 0;
          uint64_t v73 = (v70 >> 3) + 1;
          uint64_t v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          float32x4_t v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v75 = 1;
          uint64_t v76 = 1;
          do
          {
            uint64_t v77 = &v49[8 * v72];
            v75 *= *(void *)v77;
            v76 *= *((void *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          unint64_t v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              uint64_t v79 = 0;
              goto LABEL_85;
            }
            uint64_t v79 = *a1;
            if (!*a1) {
              goto LABEL_85;
            }
            unint64_t v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              uint64_t v82 = (v80 >> 3) + 1;
              unint64_t v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v83 = v49 + 8;
              uint64_t v84 = 1;
              uint64_t v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              uint64_t v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                uint64_t v98 = v79;
                if (v20 != v79)
                {
                  uint64_t p_p = (uint64_t)&__p;
                  BOOL v93 = (std::__shared_weak_count *)&v98;
                  nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<int>::canonicalize(a1, &p_p);
                __p = 0;
                uint64_t v90 = 0;
                uint64_t v91 = 0;
                nitro::ndarray<int>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  uint64_t v90 = __p;
                  operator delete(__p);
                }
                if (v96)
                {
                  unint64_t v97 = v96;
                  operator delete(v96);
                }
                if (v94)
                {
                  uint64_t v95 = v94;
                  operator delete(v94);
                }
                uint64_t v88 = v93;
                if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
                if (p_p_p)
                {
                  uint64_t v100 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              uint64_t v79 = 1;
              unint64_t v81 = v49;
            }
            do
            {
              uint64_t v87 = *(void *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          unint64_t v20 = 1;
          float32x4_t v71 = (char *)a1[2];
        }
        do
        {
          uint64_t v78 = *(void *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v45 = 1;
      uint64_t v47 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  uint64_t v10 = a1[3] - a1[2];
  uint64_t p_p = v10 >> 3;
  if (v10)
  {
    p_uint64_t p_p = &p_p;
    nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<int>::ndarray(a3, a1);
}

void sub_1925B5348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B56AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_unknown", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B5A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_elem() % new_numel", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B5D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_numel", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B60C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B624C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B6260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B6258);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B63C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B63D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B63D0);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B653C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B6550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B6548);
}

void nitro::ndarray<int>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B66B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B66C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B66C0);
}

void nitro::ndarray<half>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      uint64_t v11 = (v7 >> 3) + 1;
      unint64_t v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      size_t v12 = v5 + 1;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      do
      {
        int64x2_t v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        int64x2_t v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      unint64_t v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = (uint64_t *)*a2;
    }
    do
    {
      uint64_t v17 = *v9++;
      if (v17 < 1) {
        ++v8;
      }
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    uint64_t p_p = v8;
    if (v8 > 1)
    {
      p_uint64_t p_p = &p_p;
      nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    uint64_t v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      unint64_t v22 = v18 >> 3;
      p_uint64_t p_p = 0;
      uint64_t v100 = 0;
      unint64_t v101 = 0;
      unint64_t v20 = 1;
      goto LABEL_36;
    }
    unint64_t v19 = v18 - 8;
    if (v19 >= 8)
    {
      uint64_t v23 = (v19 >> 3) + 1;
      uint64_t v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      unsigned __int8 v24 = &v5->i64[1];
      uint64_t v25 = 1;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v27 = 1;
      do
      {
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        if (v28 <= 1) {
          uint64_t v28 = 1;
        }
        if (v29 <= 1) {
          uint64_t v29 = 1;
        }
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      unint64_t v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v20 = 1;
      uint64_t v21 = (uint64_t *)v5;
    }
    do
    {
      uint64_t v31 = *v21++;
      uint64_t v30 = v31;
      if (v31 <= 1) {
        uint64_t v30 = 1;
      }
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_uint64_t p_p = 0;
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    int64_t v32 = (char *)v6 - (char *)v5;
    unint64_t v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_uint64_t p_p = v33;
      unint64_t v101 = &v33->i8[8 * v22];
      unint64_t v34 = v5;
      unint64_t v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18) {
        goto LABEL_102;
      }
      unint64_t v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      uint64_t v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      unint64_t v35 = &v33->i64[v37];
      uint64_t v38 = v33 + 1;
      unint64_t v39 = v5 + 1;
      uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v41 = *v39;
        v38[-1] = v39[-1];
        *uint64_t v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        do
        {
          uint64_t v42 = v34->i64[0];
          unint64_t v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      uint64_t v100 = v35;
    }
LABEL_36:
    if (!v8)
    {
      unint64_t v49 = (char *)a1[2];
      uint64_t v48 = (char *)a1[3];
      goto LABEL_76;
    }
    uint64_t p_p = 0;
    uint64_t v44 = a1[2];
    unint64_t v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      unint64_t v45 = 0;
      goto LABEL_47;
    }
    unint64_t v45 = *a1;
    if (!*a1) {
      goto LABEL_47;
    }
    unint64_t v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      uint64_t v50 = (v46 >> 3) + 1;
      uint64_t v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v51 = (void *)(v44 + 8);
      uint64_t v52 = 1;
      uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      unint64_t v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        uint64_t p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          uint64_t v56 = 0;
          unint64_t v57 = p_p_p;
          if (v22 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v22;
          }
          do
          {
            if (v5->i64[v56] > 0) {
              goto LABEL_54;
            }
            uint64_t v61 = a1[2];
            unint64_t v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              unint64_t v59 = 0;
            }
            else
            {
              unint64_t v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                uint64_t v64 = (v62 >> 3) + 1;
                uint64_t v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                unint64_t v65 = (void *)(v61 + 8);
                uint64_t v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v67 = 1;
                uint64_t v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                unint64_t v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL)) {
                  goto LABEL_53;
                }
              }
              else
              {
                unint64_t v59 = 1;
                uint64_t v63 = (uint64_t *)a1[2];
              }
              do
              {
                uint64_t v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        unint64_t v49 = (char *)a1[2];
        uint64_t v48 = (char *)a1[3];
        if (v48 == v49) {
          goto LABEL_86;
        }
        if (!*a1)
        {
          unint64_t v20 = 0;
          goto LABEL_76;
        }
        unint64_t v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          uint64_t v72 = 0;
          uint64_t v73 = (v70 >> 3) + 1;
          uint64_t v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          float32x4_t v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v75 = 1;
          uint64_t v76 = 1;
          do
          {
            uint64_t v77 = &v49[8 * v72];
            v75 *= *(void *)v77;
            v76 *= *((void *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          unint64_t v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              uint64_t v79 = 0;
              goto LABEL_85;
            }
            uint64_t v79 = *a1;
            if (!*a1) {
              goto LABEL_85;
            }
            unint64_t v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              uint64_t v82 = (v80 >> 3) + 1;
              unint64_t v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v83 = v49 + 8;
              uint64_t v84 = 1;
              uint64_t v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              uint64_t v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                uint64_t v98 = v79;
                if (v20 != v79)
                {
                  uint64_t p_p = (uint64_t)&__p;
                  BOOL v93 = (std::__shared_weak_count *)&v98;
                  nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<half>::canonicalize(a1, &p_p);
                __p = 0;
                uint64_t v90 = 0;
                uint64_t v91 = 0;
                nitro::ndarray<half>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  uint64_t v90 = __p;
                  operator delete(__p);
                }
                if (v96)
                {
                  unint64_t v97 = v96;
                  operator delete(v96);
                }
                if (v94)
                {
                  uint64_t v95 = v94;
                  operator delete(v94);
                }
                uint64_t v88 = v93;
                if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
                if (p_p_p)
                {
                  uint64_t v100 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              uint64_t v79 = 1;
              unint64_t v81 = v49;
            }
            do
            {
              uint64_t v87 = *(void *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          unint64_t v20 = 1;
          float32x4_t v71 = (char *)a1[2];
        }
        do
        {
          uint64_t v78 = *(void *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v45 = 1;
      uint64_t v47 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  uint64_t v10 = a1[3] - a1[2];
  uint64_t p_p = v10 >> 3;
  if (v10)
  {
    p_uint64_t p_p = &p_p;
    nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<half>::ndarray(a3, a1);
}

void sub_1925B6CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B7048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_unknown", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B73A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_elem() % new_numel", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B7700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_numel", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B7A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B7BE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B7BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B7BF4);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B7D60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B7D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B7D6CLL);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B7ED8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B7EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B7EE4);
}

void nitro::ndarray<half>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B8050(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B8064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B805CLL);
}

void nitro::ndarray<float>::reshape(uint64_t *a1@<X0>, int64x2_t **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = (char *)v6 - (char *)*a2 - 8;
    if (v7 >= 0x18)
    {
      uint64_t v11 = (v7 >> 3) + 1;
      unint64_t v9 = &v5->i64[v11 & 0x3FFFFFFFFFFFFFFCLL];
      size_t v12 = v5 + 1;
      int64x2_t v13 = 0uLL;
      int64x2_t v14 = vdupq_n_s64(1uLL);
      uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v16 = 0uLL;
      do
      {
        int64x2_t v13 = vsubq_s64(v13, vcgtq_s64(v14, v12[-1]));
        int64x2_t v16 = vsubq_s64(v16, vcgtq_s64(v14, *v12));
        v12 += 2;
        v15 -= 4;
      }
      while (v15);
      unint64_t v8 = vaddvq_s64(vaddq_s64(v16, v13));
      if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v8 = 0;
      unint64_t v9 = (uint64_t *)*a2;
    }
    do
    {
      uint64_t v17 = *v9++;
      if (v17 < 1) {
        ++v8;
      }
    }
    while (v9 != (uint64_t *)v6);
LABEL_13:
    uint64_t p_p = v8;
    if (v8 > 1)
    {
      p_uint64_t p_p = &p_p;
      nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()();
    }
    uint64_t v18 = (char *)v6 - (char *)v5;
    if (v5 == v6)
    {
      unint64_t v22 = v18 >> 3;
      p_uint64_t p_p = 0;
      uint64_t v100 = 0;
      unint64_t v101 = 0;
      unint64_t v20 = 1;
      goto LABEL_36;
    }
    unint64_t v19 = v18 - 8;
    if (v19 >= 8)
    {
      uint64_t v23 = (v19 >> 3) + 1;
      uint64_t v21 = &v5->i64[v23 & 0x3FFFFFFFFFFFFFFELL];
      unsigned __int8 v24 = &v5->i64[1];
      uint64_t v25 = 1;
      uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v27 = 1;
      do
      {
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        if (v28 <= 1) {
          uint64_t v28 = 1;
        }
        if (v29 <= 1) {
          uint64_t v29 = 1;
        }
        v25 *= v28;
        v27 *= v29;
        v24 += 2;
        v26 -= 2;
      }
      while (v26);
      unint64_t v20 = v27 * v25;
      if (v23 == (v23 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v20 = 1;
      uint64_t v21 = (uint64_t *)v5;
    }
    do
    {
      uint64_t v31 = *v21++;
      uint64_t v30 = v31;
      if (v31 <= 1) {
        uint64_t v30 = 1;
      }
      v20 *= v30;
    }
    while (v21 != (uint64_t *)v6);
LABEL_28:
    p_uint64_t p_p = 0;
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    int64_t v32 = (char *)v6 - (char *)v5;
    unint64_t v22 = ((char *)v6 - (char *)v5) >> 3;
    if (v6 != v5)
    {
      if (v32 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (int64x2_t *)operator new((char *)v6 - (char *)v5);
      p_uint64_t p_p = v33;
      unint64_t v101 = &v33->i8[8 * v22];
      unint64_t v34 = v5;
      unint64_t v35 = (uint64_t *)v33;
      if ((unint64_t)(v32 - 8) < 0x18) {
        goto LABEL_102;
      }
      unint64_t v36 = ((unint64_t)(v32 - 8) >> 3) + 1;
      uint64_t v37 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v34 = (int64x2_t *)((char *)v5 + v37 * 8);
      unint64_t v35 = &v33->i64[v37];
      uint64_t v38 = v33 + 1;
      unint64_t v39 = v5 + 1;
      uint64_t v40 = v36 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v41 = *v39;
        v38[-1] = v39[-1];
        *uint64_t v38 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 4;
      }
      while (v40);
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_102:
        do
        {
          uint64_t v42 = v34->i64[0];
          unint64_t v34 = (int64x2_t *)((char *)v34 + 8);
          *v35++ = v42;
        }
        while (v34 != v6);
      }
      uint64_t v100 = v35;
    }
LABEL_36:
    if (!v8)
    {
      unint64_t v49 = (char *)a1[2];
      uint64_t v48 = (char *)a1[3];
      goto LABEL_76;
    }
    uint64_t p_p = 0;
    uint64_t v44 = a1[2];
    unint64_t v43 = (uint64_t *)a1[3];
    if (v43 == (uint64_t *)v44)
    {
      unint64_t v45 = 0;
      goto LABEL_47;
    }
    unint64_t v45 = *a1;
    if (!*a1) {
      goto LABEL_47;
    }
    unint64_t v46 = (unint64_t)v43 - v44 - 8;
    if (v46 >= 8)
    {
      uint64_t v50 = (v46 >> 3) + 1;
      uint64_t v47 = (uint64_t *)(v44 + 8 * (v50 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v51 = (void *)(v44 + 8);
      uint64_t v52 = 1;
      uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v54 = 1;
      do
      {
        v52 *= *(v51 - 1);
        v54 *= *v51;
        v51 += 2;
        v53 -= 2;
      }
      while (v53);
      unint64_t v45 = v54 * v52;
      if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_47:
        uint64_t p_p = v45 % v20;
        if (v45 % v20)
        {
          __p = &p_p;
          nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()();
        }
        if (v6 != v5)
        {
          uint64_t v56 = 0;
          unint64_t v57 = p_p_p;
          if (v22 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v22;
          }
          do
          {
            if (v5->i64[v56] > 0) {
              goto LABEL_54;
            }
            uint64_t v61 = a1[2];
            unint64_t v60 = (uint64_t *)a1[3];
            if (v60 == (uint64_t *)v61 || !*a1)
            {
              unint64_t v59 = 0;
            }
            else
            {
              unint64_t v62 = (unint64_t)v60 - v61 - 8;
              if (v62 >= 8)
              {
                uint64_t v64 = (v62 >> 3) + 1;
                uint64_t v63 = (uint64_t *)(v61 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
                unint64_t v65 = (void *)(v61 + 8);
                uint64_t v66 = v64 & 0x3FFFFFFFFFFFFFFELL;
                uint64_t v67 = 1;
                uint64_t v68 = 1;
                do
                {
                  v67 *= *(v65 - 1);
                  v68 *= *v65;
                  v65 += 2;
                  v66 -= 2;
                }
                while (v66);
                unint64_t v59 = v68 * v67;
                if (v64 == (v64 & 0x3FFFFFFFFFFFFFFELL)) {
                  goto LABEL_53;
                }
              }
              else
              {
                unint64_t v59 = 1;
                uint64_t v63 = (uint64_t *)a1[2];
              }
              do
              {
                uint64_t v69 = *v63++;
                v59 *= v69;
              }
              while (v63 != v60);
            }
LABEL_53:
            v57[v56] = v59 / v20;
LABEL_54:
            ++v56;
          }
          while (v56 != v58);
        }
        unint64_t v49 = (char *)a1[2];
        uint64_t v48 = (char *)a1[3];
        if (v48 == v49) {
          goto LABEL_86;
        }
        if (!*a1)
        {
          unint64_t v20 = 0;
          goto LABEL_76;
        }
        unint64_t v70 = v48 - v49 - 8;
        if (v70 >= 8)
        {
          uint64_t v72 = 0;
          uint64_t v73 = (v70 >> 3) + 1;
          uint64_t v74 = v73 & 0x3FFFFFFFFFFFFFFELL;
          float32x4_t v71 = &v49[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v75 = 1;
          uint64_t v76 = 1;
          do
          {
            uint64_t v77 = &v49[8 * v72];
            v75 *= *(void *)v77;
            v76 *= *((void *)v77 + 1);
            v72 += 2;
          }
          while (v74 != v72);
          unint64_t v20 = v76 * v75;
          if (v73 == v74)
          {
LABEL_76:
            __p = (void *)v20;
            if (v48 == v49)
            {
              uint64_t v79 = 0;
              goto LABEL_85;
            }
            uint64_t v79 = *a1;
            if (!*a1) {
              goto LABEL_85;
            }
            unint64_t v80 = v48 - v49 - 8;
            if (v80 >= 8)
            {
              uint64_t v82 = (v80 >> 3) + 1;
              unint64_t v81 = &v49[8 * (v82 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v83 = v49 + 8;
              uint64_t v84 = 1;
              uint64_t v85 = v82 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v86 = 1;
              do
              {
                v84 *= *(v83 - 1);
                v86 *= *v83;
                v83 += 2;
                v85 -= 2;
              }
              while (v85);
              uint64_t v79 = v86 * v84;
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFELL))
              {
LABEL_85:
                uint64_t v98 = v79;
                if (v20 != v79)
                {
                  uint64_t p_p = (uint64_t)&__p;
                  BOOL v93 = (std::__shared_weak_count *)&v98;
                  nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()();
                }
LABEL_86:
                nitro::ndarray<float>::canonicalize(a1, &p_p);
                __p = 0;
                uint64_t v90 = 0;
                uint64_t v91 = 0;
                nitro::ndarray<float>::ndarray(a3, &p_p, (uint64_t)&p_p_p, (uint64_t)&__p, 0);
                if (__p)
                {
                  uint64_t v90 = __p;
                  operator delete(__p);
                }
                if (v96)
                {
                  unint64_t v97 = v96;
                  operator delete(v96);
                }
                if (v94)
                {
                  uint64_t v95 = v94;
                  operator delete(v94);
                }
                uint64_t v88 = v93;
                if (v93 && !atomic_fetch_add(&v93->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                  std::__shared_weak_count::__release_weak(v88);
                }
                if (p_p_p)
                {
                  uint64_t v100 = p_p_p;
                  operator delete(p_p_p);
                }
                return;
              }
            }
            else
            {
              uint64_t v79 = 1;
              unint64_t v81 = v49;
            }
            do
            {
              uint64_t v87 = *(void *)v81;
              v81 += 8;
              v79 *= v87;
            }
            while (v81 != v48);
            goto LABEL_85;
          }
        }
        else
        {
          unint64_t v20 = 1;
          float32x4_t v71 = (char *)a1[2];
        }
        do
        {
          uint64_t v78 = *(void *)v71;
          v71 += 8;
          v20 *= v78;
        }
        while (v71 != v48);
        goto LABEL_76;
      }
    }
    else
    {
      unint64_t v45 = 1;
      uint64_t v47 = (uint64_t *)a1[2];
    }
    do
    {
      uint64_t v55 = *v47++;
      v45 *= v55;
    }
    while (v47 != v43);
    goto LABEL_47;
  }
  uint64_t v10 = a1[3] - a1[2];
  uint64_t p_p = v10 >> 3;
  if (v10)
  {
    p_uint64_t p_p = &p_p;
    nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()();
  }
  nitro::ndarray<float>::ndarray(a3, a1);
}

void sub_1925B8680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_shape.size()", 14);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B89E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_unknown", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B8D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"num_elem() % new_numel", 22);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B909C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)const::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float16x8_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_numel", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"num_elem()", 10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  size_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64x2_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    uint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      int64x2_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925B93FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1192, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B9584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B9598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B9590);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1199, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B96FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B9710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B9708);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1209, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B9874(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B9888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B9880);
}

void nitro::ndarray<float>::reshape(std::vector<long long> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1215, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float16x8_t v4 = __p;
      }
      else {
        float16x8_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925B99EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925B9A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925B99F8);
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void OUTLINED_FUNCTION_2_2()
{
  atomic_fetch_add((atomic_ullong *volatile)(v0 + 8), 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t OUTLINED_FUNCTION_8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t OUTLINED_FUNCTION_9_0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_10(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

void nitro::ndarray_container::concat(uint64_t a1)
{
  unint64_t v2 = (void *)OUTLINED_FUNCTION_0_3(a1);
  if (v2)
  {
    *(void *)(v1 + 24) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    OUTLINED_FUNCTION_2_2();
    if (!v4)
    {
      OUTLINED_FUNCTION_6_1();
      uint64_t v5 = OUTLINED_FUNCTION_4();
      v6(v5);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  OUTLINED_FUNCTION_5();
}

{
  std::__shared_weak_count **v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  unint64_t v2 = (void *)OUTLINED_FUNCTION_9_0(a1);
  if (v2)
  {
    std::__shared_weak_count *v3 = v2;
    operator delete(v2);
  }
  uint64_t v4 = *v1;
  if (v4)
  {
    OUTLINED_FUNCTION_2_2();
    if (!v5)
    {
      OUTLINED_FUNCTION_6_1();
      unint64_t v6 = OUTLINED_FUNCTION_4();
      v7(v6);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  OUTLINED_FUNCTION_5();
}

void nitro::ndarray_container::copy(uint64_t a1)
{
  unint64_t v2 = (void *)OUTLINED_FUNCTION_8(a1);
  if (v2)
  {
    *(void *)(v1 + 24) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    OUTLINED_FUNCTION_6(&v3->__shared_owners_);
    if (!v4)
    {
      OUTLINED_FUNCTION_7();
      OUTLINED_FUNCTION_3_2();
      v5();
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void nitro::ndarray<unsigned char>::concat(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)OUTLINED_FUNCTION_10(a1, a2);
  if (v3)
  {
    *(void *)(v4 + 8) = v3;
    operator delete(v3);
  }
  uint64_t v5 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v5;
    operator delete(v5);
  }
}

void nitro::impl::delayed_variable::~delayed_variable(nitro::impl::delayed_variable *this)
{
  nitro::nitro_variable::~nitro_variable((nitro::impl::delayed_variable *)((char *)this + 40));
  uint64_t v2 = (nitro::impl::delayed_variable *)*((void *)this + 3);
  if (v2 == this)
  {
    (*(void (**)(nitro::impl::delayed_variable *))(*(void *)this + 32))(this);
  }
  else if (v2)
  {
    (*(void (**)(nitro::impl::delayed_variable *))(*(void *)v2 + 40))(v2);
  }
}

uint64_t nitro::nitro_function::load_nitro_function(nitro::nitro_function *this, const nitro::ir::DEFMEMBERFUN *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)operator new(0x90uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EE380F18;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((void *)v4 + 17) = 0;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 1);
  *((void *)this + 1) = v4;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)this = v4 + 24;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = *(unsigned int **)this;
  unint64_t v7 = *(void **)this;
  void *v7 = *((void *)a2 + 1);
  unint64_t v8 = v7 + 1;
  if (v6 != (unsigned int *)((char *)a2 + 8))
  {
    std::vector<nitro::variable_type>::__assign_with_size[abi:ne180100]<nitro::variable_type*,nitro::variable_type*>(v8, *((void *)a2 + 2), *((void *)a2 + 3), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3));
    unint64_t v6 = *(unsigned int **)this;
  }
  uint64_t v9 = v6[16];
  uint64_t v10 = *((unsigned int *)a2 + 18);
  if (v9 == -1)
  {
    if (v10 == -1) {
      goto LABEL_11;
    }
  }
  else if (v10 == -1)
  {
    ((void (*)(void **, unsigned int *))off_1EE39BA70[v9])(lpsrc, v6 + 8);
    v6[16] = -1;
    goto LABEL_11;
  }
  lpsrc[0] = v6 + 8;
  ((void (*)(void **))off_1EE39BAA8[v10])(lpsrc);
LABEL_11:
  if (*(const nitro::ir::DEFMEMBERFUN **)this != (const nitro::ir::DEFMEMBERFUN *)((char *)a2 + 8)) {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)(*(void *)this + 72), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
  }
  (*(void (**)(void **__return_ptr, const nitro::ir::DEFMEMBERFUN *))(*(void *)a2 + 8))(lpsrc, a2);
  uint64_t v11 = lpsrc[0];
  lpsrc[0] = 0;
  if (v11) {
  else
  }
    size_t v12 = 0;
  uint64_t v13 = *(void *)this;
  int64x2_t v14 = (void *)(*(void *)this + 96);
  uint64_t v15 = (void *)*v14;
  if (*v14)
  {
    int64x2_t v16 = *(void **)(v13 + 104);
    uint64_t v17 = *(void **)(*(void *)this + 96);
    if (v16 != v15)
    {
      do
      {
        uint64_t v19 = *--v16;
        uint64_t v18 = v19;
        *int64x2_t v16 = 0;
        if (v19) {
          (*(void (**)(uint64_t))(*(void *)v18 + 40))(v18);
        }
      }
      while (v16 != v15);
      uint64_t v17 = (void *)*v14;
    }
    *(void *)(v13 + 104) = v15;
    operator delete(v17);
    *int64x2_t v14 = 0;
    v14[1] = 0;
    v14[2] = 0;
  }
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(v12 + 104);
  *(void *)(v13 + 112) = *((void *)v12 + 15);
  *((void *)v12 + 13) = 0;
  *((void *)v12 + 14) = 0;
  *((void *)v12 + 15) = 0;
  uint64_t v20 = *(void *)this;
  uint64_t v21 = (uint64_t)(*(void *)(*(void *)this + 80) - *(void *)(*(void *)this + 72)) >> 3;
  unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL
      * ((uint64_t)(*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8)) >> 3);
  uint64_t v28 = v21;
  if (v21 != v27)
  {
    lpsrc[0] = &v28;
    lpsrc[1] = &v27;
    nitro::nitro_function::load_nitro_function(nitro::ir::DEFMEMBERFUN const&)::$_0::operator()();
  }
  nitro::impl::nitro_lazy_eval::exec_function_body((nitro::impl::nitro_lazy_eval *)&v28, (uint64_t *)(v20 + 96), (uint64_t)lpsrc);
  std::locale v22 = operator new(0x60uLL);
  uint64_t v23 = v22;
  v22[1] = 0;
  v22[2] = 0;
  *std::locale v22 = &unk_1EE380F50;
  unsigned __int8 v24 = v22 + 3;
  if (v30)
  {
    if (v30 == lpsrc)
    {
      v22[6] = v24;
      (*((void (**)(void **, void *))lpsrc[0] + 3))(lpsrc, v24);
    }
    else
    {
      v22[6] = v30;
      uint64_t v30 = 0;
    }
  }
  else
  {
    v22[6] = 0;
  }
  *((_WORD *)v23 + 28) = v31;
  *((_OWORD *)v23 + 4) = v32;
  long long v32 = 0uLL;
  v23[10] = v33;
  *((unsigned char *)v23 + 88) = v34;
  char v34 = 0;
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v24;
  *((void *)this + 3) = v23;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v32);
  if (v30 == lpsrc)
  {
    (*((void (**)(void **))lpsrc[0] + 4))(lpsrc);
  }
  else if (v30)
  {
    (*((void (**)(void))*v30 + 5))();
  }
  return (*(uint64_t (**)(char *))(*(void *)v12 + 40))(v12);
}

void sub_1925BA17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_function::load_nitro_function(nitro::ir::DEFMEMBERFUN const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_body->m_args.size()", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_body->m_input_types.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    size_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 49, 1);
    std::stringbuf::str();
    int64x2_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        int64x2_t v16 = __p;
      }
      else {
        int64x2_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v18 = (file_logger *)global_logger();
    uint64_t v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 49, 1);
    std::stringbuf::str();
    uint64_t v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        std::locale v22 = v30;
      }
      else {
        std::locale v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  uint64_t v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925BA4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_function::bind(nitro::nitro_function *this, unint64_t a2, const nitro::nitro_variable *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = &v6;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)this + 32, &v6, (uint64_t)&std::piecewise_construct, &v7);
  return nitro::nitro_variable::operator=((uint64_t)(v4 + 24), (uint64_t *)a3);
}

uint64_t nitro::nitro_variable::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (a2 != (uint64_t *)a1)
  {
    unint64_t v7 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 24))
    {
      case 2:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = *v7;
          if (!*v7) {
            goto LABEL_45;
          }
          if (*((char *)v8 + 31) < 0) {
            operator delete((void *)v8[1]);
          }
          atomic_ullong *volatile v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_44;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v7;
          if (!*v7) {
            goto LABEL_45;
          }
          size_t v12 = (void *)v11[1];
          if (v12)
          {
            v11[2] = (atomic_ullong)v12;
            operator delete(v12);
          }
          atomic_ullong *volatile v9 = v11;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_44;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_45;
          }
          atomic_ullong v14 = v13[1];
          if (v14)
          {
            uint64_t v15 = v13[2];
            int64x2_t v16 = (void *)v13[1];
            if (v15 != v14)
            {
              do
              {
                v15 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v13 + 3), v15);
              }
              while (v15 != v14);
              int64x2_t v16 = (void *)v13[1];
            }
            v13[2] = v14;
            goto LABEL_32;
          }
          goto LABEL_33;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v7;
          if (!*v7) {
            goto LABEL_45;
          }
          atomic_ullong v17 = v13[1];
          if (v17)
          {
            uint64_t v18 = v13[2];
            uint64_t v19 = (void *)v13[1];
            if (v18 != v17)
            {
              do
                uint64_t v18 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v18 - 32);
              while (v18 != v17);
              uint64_t v19 = (void *)v13[1];
            }
            v13[2] = v17;
            int64x2_t v16 = v19;
LABEL_32:
            operator delete(v16);
          }
LABEL_33:
          atomic_ullong *volatile v9 = v13;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_44;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v20 = *v7;
          if (*v7)
          {
            uint64_t v21 = (void *)v20[7];
            if (v21)
            {
              v20[8] = (atomic_ullong)v21;
              operator delete(v21);
            }
            std::locale v22 = (void *)v20[4];
            if (v22)
            {
              v20[5] = (atomic_ullong)v22;
              operator delete(v22);
            }
            uint64_t v23 = (std::__shared_weak_count *)v20[3];
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            atomic_ullong *volatile v9 = v20;
            uint64_t v10 = 0x10B0C4002311774;
LABEL_44:
            MEMORY[0x192FF16B0](v9, v10);
          }
LABEL_45:
          atomic_ullong *volatile *v7 = 0;
        }
        break;
      default:
        break;
    }
    unsigned __int8 v24 = (atomic_ullong *)a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    atomic_ullong *volatile *v7 = v24;
    int v25 = *((unsigned __int8 *)a2 + 24);
    *(unsigned char *)(a1 + 24) = v25;
    if ((v25 - 2) < 4 || v25 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return a1;
}

void nitro::nitro_function::run(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  atomic_ullong *volatile v9 = &v10;
  uint64_t v10 = 0;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v11 = 0;
  size_t v12 = v13;
  atomic_ullong v14 = v15;
  v15[0] = 0;
  v17[0] = 0;
  v17[1] = 0;
  v15[1] = 0;
  int64x2_t v16 = v17;
  uint64_t v6 = *(void *)*a1;
  unint64_t v7 = (char *)operator new(0x70uLL);
  *((void *)v7 + 4) = v6;
  *((void *)v7 + 13) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  uint64_t v8 = (uint64_t)(v7 + 40);
  *((_DWORD *)v7 + 26) = 1065353216;
  *(void *)unint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = &v10;
  atomic_ullong *volatile v9 = (void **)v7;
  uint64_t v10 = v7;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7, (uint64_t *)v7);
  ++v11;
  nitro::nitro_function::operator=(v8, a1);
  nitro::nitro_function::run(a1, a2, (unint64_t *)&v9, a3);
  std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy((uint64_t)&v16, v17[0]);
  std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy((uint64_t)&v14, v15[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)&v12, v13[0]);
  std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy((uint64_t)&v9, v10);
}

void sub_1925BAA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t nitro::nitro_function::name(nitro::nitro_function *this)
{
  return **(void **)this;
}

uint64_t nitro::nitro_function::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    if (!v7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2[3];
  if (v7) {
LABEL_6:
  }
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
LABEL_7:
  atomic_ullong *volatile v9 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v7;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if ((uint64_t *)a1 == a2) {
      return a1;
    }
    goto LABEL_10;
  }
  if ((uint64_t *)a1 != a2)
  {
LABEL_10:
    *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
    std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *> *>>((void *)(a1 + 32), (uint64_t *)a2[6], 0);
  }
  return a1;
}

void nitro::nitro_function::run(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = (v5 - *a2) >> 5;
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*a1 + 16) - *(void *)(*a1 + 8)) >> 3);
  uint64_t v15 = v7;
  if (v7 != v14)
  {
    int64x2_t v16 = (unint64_t *)&v15;
    atomic_ullong v17 = &v14;
    nitro::nitro_function::run(std::vector<nitro::nitro_variable> const&,nitro::nitro_execution_context &)::$_0::operator()();
  }
  if (v5 != v6)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v15 = *(void *)(*(void *)(*a1 + 72) + 8 * v12);
      int64x2_t v16 = (unint64_t *)&v15;
      atomic_ullong *volatile v13 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a1 + 4), (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16);
      nitro::nitro_variable::operator=((uint64_t)(v13 + 24), (uint64_t *)(v6 + v11));
      ++v12;
      uint64_t v6 = *a2;
      v11 += 32;
    }
    while (v12 < (a2[1] - *a2) >> 5);
  }
  int64x2_t v16 = (unint64_t *)(a1 + 4);
  atomic_ullong v17 = a3;
  __int16 v18 = 0;
  char v19 = 0;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  nitro::impl::delayed_variable::operator()(a1[2], a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)((char *)v20 + 8));
}

void sub_1925BAD50(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v1);
  _Unwind_Resume(a1);
}

void nitro::nitro_execution_context::~nitro_execution_context(nitro::nitro_execution_context *this)
{
}

void nitro::nitro_function::run(std::vector<nitro::nitro_variable> const&,nitro::nitro_execution_context &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", 106);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"args.size()", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_body->m_input_types.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v30[0]) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v30, 1);
  atomic_ullong *volatile v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v30[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v30, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = (file_logger *)global_logger();
    started = file_logger::start_stream(v12, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    unint64_t v14 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v14 && v14[280])
    {
      uint64_t v15 = v14 + 16;
      if ((v28 & 0x80u) == 0) {
        int64x2_t v16 = __p;
      }
      else {
        int64x2_t v16 = (void **)__p[0];
      }
      if ((v28 & 0x80u) == 0) {
        uint64_t v17 = v28;
      }
      else {
        uint64_t v17 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    }
    if ((char)v28 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    __int16 v18 = (file_logger *)global_logger();
    char v19 = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_function.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    atomic_ullong *volatile v20 = (char *)pthread_getspecific(*((void *)v19 + 74));
    if (v20 && v20[280])
    {
      uint64_t v21 = v20 + 16;
      if ((v31 & 0x80u) == 0) {
        uint64_t v22 = v30;
      }
      else {
        uint64_t v22 = (void **)v30[0];
      }
      if ((v31 & 0x80u) == 0) {
        uint64_t v23 = v31;
      }
      else {
        uint64_t v23 = (uint64_t)v30[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    unsigned __int8 v24 = pthread_getspecific(*((void *)v19 + 74));
    if (v24)
    {
      if (*((unsigned char *)v24 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v19);
        if (*((_DWORD *)v19 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v31 < 0) {
      operator delete(v30[0]);
    }
  }
  int v25 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1925BB0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (*(char *)(v33 - 49) < 0) {
    operator delete(*(void **)(v33 - 72));
  }
  a16 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 2std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a17 = MEMORY[0x1E4FBA470] + 16;
  if (a30 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a33);
  _Unwind_Resume(a1);
}

void nitro::impl::delayed_variable::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a1 + 33))
    {
LABEL_5:
      uint64_t v5 = *(void *)(a1 + 40);
      *(unsigned char *)(a1 + 33) = 1;
      uint64_t v6 = *(void *)(a1 + 48);
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 0;
      if (a1 + 40 != a2)
      {
        *(void *)(a2 + 16) = *(void *)(a1 + 56);
        int v7 = *(unsigned __int8 *)(a1 + 64);
        *(unsigned char *)(a2 + 24) = v7;
        if ((v7 - 2) < 4 || v7 == 9) {
          atomic_fetch_add(*(atomic_ullong *volatile *)(a2 + 16), 1uLL);
        }
      }
      return;
    }
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4)
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v4 + 48))(v10);
      nitro::nitro_variable::operator=(a1 + 40, v10);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v10);
      goto LABEL_5;
    }
LABEL_16:
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    goto LABEL_16;
  }
  atomic_ullong *volatile v9 = *(void (**)(void))(*(void *)v8 + 48);

  v9();
}

uint64_t nitro::nitro_function::get_input_types(nitro::nitro_function *this)
{
  return *(void *)this + 8;
}

uint64_t nitro::nitro_function::get_output_type(nitro::nitro_function *this)
{
  return *(void *)this + 32;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *> *>>(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  uint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      nitro::nitro_variable::operator=((uint64_t)(v8 + 3), a2 + 3);
      atomic_ullong *volatile v9 = (void *)*v8;
      std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(a1, v8);
      a2 = (uint64_t *)*a2;
      uint64_t v8 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v10 = (void *)*v8;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 3));
      operator delete(v8);
      uint64_t v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_multi<std::pair<unsigned long const,nitro::nitro_variable> const&>(a1, (unsigned __int8 *)a2 + 16);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1925BB43C(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1925BB454(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  inserted = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi_prepare((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *(v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *inserted;
  void *inserted = a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return a2;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t prime = v11;
    }
    else {
      size_t prime = v10;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_23;
    }
    if (prime < v6)
    {
      unint64_t v13 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v14.i16[0] = vaddlv_u8(v14), v14.u32[0] > 1uLL))
      {
        unint64_t v13 = std::__next_prime(v13);
      }
      else
      {
        uint64_t v15 = 1 << -(char)__clz(v13 - 1);
        if (v13 >= 2) {
          unint64_t v13 = v15;
        }
      }
      if (prime <= v13) {
        size_t prime = v13;
      }
      if (prime < v6) {
LABEL_23:
      }
        std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__do_rehash<false>(a1, prime);
    }
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v17 = a2;
    if (v6 <= a2) {
      unint64_t v17 = a2 % v6;
    }
  }
  else
  {
    unint64_t v17 = (v6 - 1) & a2;
  }
  __int16 v18 = *(void **)(*(void *)a1 + 8 * v17);
  if (!v18) {
    return 0;
  }
  int v19 = 0;
  do
  {
    __n128 result = v18;
    __int16 v18 = (void *)*v18;
    if (!v18) {
      break;
    }
    unint64_t v23 = v18[1];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v24 = v18[1];
      if (v23 >= v6) {
        unint64_t v24 = v23 % v6;
      }
    }
    else
    {
      unint64_t v24 = v23 & (v6 - 1);
    }
    if (v24 != v17) {
      break;
    }
    BOOL v20 = v23 == a2 && v18[2] == *a3;
    int v21 = v19 & !v20;
    v19 |= v20;
  }
  while (v21 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    uint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          float v7 = i;
        }
        else
        {
          unint64_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              unint64_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            void *v7 = v13;
            uint64_t v15 = 8 * v12;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + v15);
            **(void **)(*(void *)a1 + v15) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            float v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_multi<std::pair<unsigned long const,nitro::nitro_variable> const&>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = operator new(0x38uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)a2 + 1);
  v4[2] = *(void *)a2;
  void *v4 = 0;
  v4[1] = 0;
  uint64_t v7 = *((void *)a2 + 2);
  v4[3] = v6;
  v4[4] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  v4[5] = 0;
  *((unsigned char *)v4 + 48) = 0;
  if (v4 + 2 != (void *)a2)
  {
    unint64_t v8 = (atomic_ullong *)*((void *)a2 + 3);
    v4[5] = v8;
    int v9 = a2[32];
    *((unsigned char *)v4 + 48) = v9;
    if ((v9 - 2) < 4 || v9 == 9)
    {
      atomic_fetch_add(v8, 1uLL);
      uint64_t v5 = v4;
    }
  }
  v5[1] = v5[2];
  return std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__node_insert_multi(a1, v5);
}

void sub_1925BBA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,nitro::nitro_variable>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (void *)a2[8];
    if (v4 == a2 + 5)
    {
      (*(void (**)(void *))(a2[5] + 32))(a2 + 5);
    }
    else if (v4)
    {
      (*(void (**)(void *))(*v4 + 40))(v4);
    }
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(a1, a2[1]);
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(uint64_t a1, char *a2)
{
  if (!a2) {
    return;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(a1, *(void *)a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(a1, *((void *)a2 + 1));
  unint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 8);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((a2[55] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (a2[55] < 0) {
LABEL_5:
  }
    operator delete(*((void **)a2 + 4));
LABEL_6:

  operator delete(a2);
}

void std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned long const,nitro::nitro_function>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

void std::__shared_ptr_emplace<nitro::nitro_function_body>::__on_zero_shared(uint64_t a1)
{
}

void nitro::nitro_function_body::~nitro_function_body(nitro::nitro_function_body *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    unint64_t v3 = (void *)*((void *)this + 13);
    unint64_t v4 = (void *)*((void *)this + 12);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v2;
    operator delete(v4);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *((unsigned int *)this + 16);
  if (v8 != -1) {
    ((void (*)(char *, char *))off_1EE39BA70[v8])(&v14, (char *)this + 32);
  }
  *((_DWORD *)this + 16) = -1;
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 2);
    unint64_t v11 = (void *)*((void *)this + 1);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = v10 - 40;
        uint64_t v13 = *(unsigned int *)(v10 - 8);
        if (v13 != -1) {
          ((void (*)(char *, uint64_t))off_1EE39BA70[v13])(&v15, v10 - 40);
        }
        *(_DWORD *)(v10 - 8) = -1;
        v10 -= 40;
      }
      while (v12 != v9);
      unint64_t v11 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v9;
    operator delete(v11);
  }
}

uint64_t *std::vector<nitro::variable_type>::__assign_with_size[abi:ne180100]<nitro::variable_type*,nitro::variable_type*>(uint64_t *result, uint64_t a2, uint64_t a3, size_t __sz)
{
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)result;
  uint64_t v9 = (uint64_t)(result + 2);
  uint64_t v8 = result[2];
  uint64_t v10 = *result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < __sz)
  {
    if (v10)
    {
      uint64_t v11 = result[1];
      uint64_t v12 = (void *)*result;
      if (v11 != v10)
      {
        do
        {
          uint64_t v13 = v11 - 40;
          uint64_t v14 = *(unsigned int *)(v11 - 8);
          if (v14 != -1) {
            ((void (*)(uint64_t *, uint64_t))off_1EE39BA70[v14])(&v31, v11 - 40);
          }
          *(_DWORD *)(v11 - 8) = -1;
          v11 -= 40;
        }
        while (v13 != v10);
        uint64_t v12 = *(void **)v7;
      }
      *(void *)(v7 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    if (__sz > 0x666666666666666) {
      goto LABEL_47;
    }
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= __sz) {
      uint64_t v25 = __sz;
    }
    unint64_t v26 = v24 >= 0x333333333333333 ? 0x666666666666666 : v25;
    if (v26 > 0x666666666666666) {
LABEL_47:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v27 = 40 * v26;
    unsigned __int8 v28 = (char *)operator new(40 * v26);
    *(void *)uint64_t v7 = v28;
    *(void *)(v7 + 8) = v28;
    *(void *)(v7 + 16) = &v28[v27];
    __n128 result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v9, v6, a3, (uint64_t)v28);
    goto LABEL_37;
  }
  uint64_t v15 = result[1];
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v10) >> 3);
  if (v16 >= __sz)
  {
    if (a2 == a3)
    {
      uint64_t v21 = *result;
      if (v15 == v10)
      {
LABEL_45:
        *(void *)(v7 + 8) = v21;
        return result;
      }
      do
      {
LABEL_43:
        uint64_t v29 = v15 - 40;
        uint64_t v30 = *(unsigned int *)(v15 - 8);
        if (v30 != -1) {
          __n128 result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1EE39BA70[v30])(&v31, v15 - 40);
        }
        *(_DWORD *)(v15 - 8) = -1;
        v15 -= 40;
      }
      while (v29 != v21);
      goto LABEL_45;
    }
    uint64_t v21 = *result;
    while (1)
    {
      uint64_t v22 = *(unsigned int *)(v10 + 32);
      uint64_t v23 = *(unsigned int *)(v6 + 32);
      if (v22 != -1) {
        break;
      }
      if (v23 != -1) {
        goto LABEL_20;
      }
LABEL_21:
      v6 += 40;
      v10 += 40;
      v21 += 40;
      if (v6 == a3)
      {
        uint64_t v15 = *(void *)(v7 + 8);
        if (v15 == v21) {
          goto LABEL_45;
        }
        goto LABEL_43;
      }
    }
    if (v23 == -1)
    {
      __n128 result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_1EE39BA70[v22])(&v31, v10);
      *(_DWORD *)(v10 + 32) = -1;
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v31 = v10;
    __n128 result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1EE39BAA8[v23])(&v31, v10, v6);
    goto LABEL_21;
  }
  if (v15 == v10) {
    goto LABEL_36;
  }
  uint64_t v17 = 8 * ((v15 - v10) >> 3);
  uint64_t v18 = a2;
  do
  {
    uint64_t v19 = *(unsigned int *)(v10 + 32);
    uint64_t v20 = *(unsigned int *)(v18 + 32);
    if (v19 == -1)
    {
      if (v20 == -1) {
        goto LABEL_13;
      }
LABEL_12:
      uint64_t v31 = v10;
      ((void (*)(uint64_t *, uint64_t, uint64_t))off_1EE39BAA8[v20])(&v31, v10, v18);
      goto LABEL_13;
    }
    if (v20 != -1) {
      goto LABEL_12;
    }
    ((void (*)(uint64_t *, uint64_t))off_1EE39BA70[v19])(&v31, v10);
    *(_DWORD *)(v10 + 32) = -1;
LABEL_13:
    v18 += 40;
    v10 += 40;
    v17 -= 40;
  }
  while (v17);
  uint64_t v10 = *(void *)(v7 + 8);
LABEL_36:
  __n128 result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(v9, v6 + 40 * v16, a3, v10);
LABEL_37:
  *(void *)(v7 + 8) = result;
  return result;
}

void sub_1925BC138(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1925BC140(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::variable_type>,nitro::variable_type*,nitro::variable_type*,nitro::variable_type*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + 32) = -1;
      uint64_t v7 = *(unsigned int *)(v6 + 32);
      if (v7 != -1)
      {
        ((void (*)(unsigned char *, uint64_t, uint64_t))off_1EE39BAE0[v7])(v10, v4, v6);
        *(_DWORD *)(v4 + 32) = v7;
        uint64_t v4 = v9;
      }
      v6 += 40;
      v4 += 40;
      uint64_t v9 = v4;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1925BC214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(unsigned int *)(v2 + 32);
  if (v5 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE39BA70[v5])(v3 - 49, v2);
  }
  *(_DWORD *)(v2 + 32) = -1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::variable_type>,nitro::variable_type*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::variable_type>,nitro::variable_type*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    uint64_t v6 = *v4;
    if (*v3 != *v4)
    {
      do
      {
        uint64_t v7 = v5 - 40;
        uint64_t v8 = *(unsigned int *)(v5 - 8);
        if (v8 != -1) {
          ((void (*)(char *, uint64_t))off_1EE39BA70[v8])(&v9, v5 - 40);
        }
        *(_DWORD *)(v5 - 8) = -1;
        v5 -= 40;
      }
      while (v7 != v6);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<nitro::impl::delayed_variable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::impl::delayed_variable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380F50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FF16B0);
}

uint64_t std::__shared_ptr_emplace<nitro::impl::delayed_variable>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 64));
  uint64_t result = *(void *)(a1 + 48);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void nitro::impl::nitro_lazy_eval::exec_function_body(nitro::impl::nitro_lazy_eval *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v4, a1, (uint64_t)&v27);
      uint64_t v7 = v25;
      if ((unint64_t)v25 >= v26)
      {
        uint64_t v8 = std::vector<nitro::impl::delayed_variable>::__push_back_slow_path<nitro::impl::delayed_variable>(&v24, (uint64_t)&v27);
      }
      else
      {
        if (v29)
        {
          if (v29 == &v27)
          {
            *((void *)v25 + 3) = v25;
            (*(void (**)(long long *, char *))(*(void *)v29 + 24))(v29, v7);
          }
          else
          {
            *((void *)v25 + 3) = v29;
            uint64_t v29 = 0;
          }
        }
        else
        {
          *((void *)v25 + 3) = 0;
        }
        *((_WORD *)v7 + 16) = v30;
        *(_OWORD *)(v7 + 40) = v31;
        long long v31 = 0uLL;
        *((void *)v7 + 7) = 0;
        v7[64] = 0;
        char v9 = v33;
        *((void *)v7 + 7) = v32;
        v7[64] = v9;
        v7[64] = v33;
        char v33 = 0;
        uint64_t v8 = v7 + 72;
      }
      uint64_t v25 = v8;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v31);
      if (v29 == &v27)
      {
        (*(void (**)(long long *))(v27 + 32))(&v27);
      }
      else if (v29)
      {
        (*(void (**)(void))(*(void *)v29 + 40))();
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v24);
  std::vector<nitro::impl::delayed_variable>::vector(&v27, (uint64_t *)&__p);
  *(void *)(a3 + 24) = 0;
  uint64_t v10 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v10 = &unk_1EE37A070;
  *(_OWORD *)(v10 + 8) = v27;
  *((void *)v10 + 3) = v28;
  *(void *)(a3 + 24) = v10;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  uint64_t v11 = (char *)__p;
  if (__p)
  {
    uint64_t v12 = __p;
    if (v23 != __p)
    {
      uint64_t v13 = v23 - 72;
      uint64_t v14 = v23 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v14 + 40));
        unint64_t v16 = (char *)*((void *)v14 + 3);
        if (v14 == v16)
        {
          (*(void (**)(char *))(*(void *)v14 + 32))(v14);
        }
        else if (v16)
        {
          (*(void (**)(char *))(*(void *)v16 + 40))(v16);
        }
        v13 -= 72;
        BOOL v15 = v14 == v11;
        v14 -= 72;
      }
      while (!v15);
      uint64_t v12 = __p;
    }
    uint64_t v23 = v11;
    operator delete(v12);
  }
  uint64_t v17 = (char *)v24;
  if (v24)
  {
    uint64_t v18 = v24;
    if (v25 != v24)
    {
      uint64_t v19 = v25 - 72;
      uint64_t v20 = v25 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v20 + 40));
        uint64_t v21 = (char *)*((void *)v20 + 3);
        if (v20 == v21)
        {
          (*(void (**)(char *))(*(void *)v20 + 32))(v20);
        }
        else if (v21)
        {
          (*(void (**)(char *))(*(void *)v21 + 40))(v21);
        }
        v19 -= 72;
        BOOL v15 = v20 == v17;
        v20 -= 72;
      }
      while (!v15);
      uint64_t v18 = v24;
    }
    uint64_t v25 = v17;
    operator delete(v18);
  }
}

void sub_1925BC7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a15, a15);
  }
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a9);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

void *nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(uint64_t a1@<X0>, nitro::impl::nitro_lazy_eval *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    switch((*(unsigned int (**)(void))(**(void **)a1 + 24))())
    {
      case 0u:
        if (*(_DWORD *)(*(void *)a1 + 48) == 5)
        {
          uint64_t v8 = *(void *)(*(void *)a1 + 8);
          char v9 = &unk_1EE37AAC0;
LABEL_48:
          *(void *)a3 = v9;
          *(void *)(a3 + 8) = v8;
LABEL_49:
          *(void *)(a3 + 24) = a3;
          *(_WORD *)(a3 + 32) = 0;
          *(void *)(a3 + 48) = 0;
          *(void *)(a3 + 56) = 0;
          *(void *)(a3 + 40) = 0;
          *(unsigned char *)(a3 + 64) = 0;
        }
        else
        {
          *(void *)(a3 + 40) = 0;
          uint64_t v32 = a3 + 40;
          *(void *)(v32 - 16) = 0;
          *(void *)(v32 + 8) = 0;
          *(void *)(v32 + 16) = 0;
          *(unsigned char *)(v32 + 24) = 0;
          *(_WORD *)(v32 - 8) = 257;
          *(_OWORD *)__p = 0u;
          long long v34 = 0u;
          nitro::nitro_variable::operator=(v32, (long long *)__p);
LABEL_74:
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)__p);
        }
        return;
      case 1u:
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = (long long *)(*(void *)a1 + 8);
        __p[0] = 0;
        __p[1] = 0;
        BYTE8(v34) = 0;
        *(void *)&long long v34 = 0;
        if (&v34 != v23)
        {
          unint64_t v24 = *(atomic_ullong **)(v22 + 8);
          *(void *)&long long v34 = v24;
          int v25 = *(unsigned __int8 *)(v22 + 16);
          BYTE8(v34) = v25;
          if ((v25 - 2) < 4 || v25 == 9) {
            atomic_fetch_add(v24, 1uLL);
          }
        }
        *(void *)(a3 + 40) = 0;
        uint64_t v27 = a3 + 40;
        *(void *)(v27 - 16) = 0;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 16) = 0;
        *(unsigned char *)(v27 + 24) = 0;
        *(_WORD *)(v27 - 8) = 257;
        nitro::nitro_variable::operator=(v27, (uint64_t *)__p);
        goto LABEL_74;
      case 2u:
        uint64_t v8 = *(void *)(*(void *)a1 + 8);
        char v9 = &unk_1EE37ABC8;
        goto LABEL_48;
      case 3u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 4u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 5u:
        nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()();
      case 6u:
        uint64_t v29 = *(const nitro::ir::MEMBER **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v29, a3);
        return;
      case 7u:
        uint64_t v20 = *(const nitro::ir::BINARYOPERATOR **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v20, a3);
        return;
      case 8u:
        uint64_t v18 = *(const nitro::ir::UNARYOPERATOR **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v18, a3);
        return;
      case 9u:
        uint64_t v19 = *(const nitro::ir::CALL **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v19, a3);
        return;
      case 0xAu:
        uint64_t v21 = *(const nitro::ir::MAKEOBJECT **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v21, a3);
        return;
      case 0xBu:
        uint64_t v17 = *(const nitro::ir::WHILE **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v17, a3);
        return;
      case 0xCu:
        uint64_t v13 = *(const nitro::ir::FOR **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v13, a3);
        return;
      case 0xDu:
        uint64_t v11 = *(const nitro::ir::FOREACH **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v11, a3);
        return;
      case 0xEu:
        BOOL v7 = *(const nitro::ir::IF **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v7, a3);
        return;
      case 0xFu:
        uint64_t v14 = *(const nitro::ir::INDEXGET **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v14, a3);
        return;
      case 0x10u:
        __int16 v30 = *(const nitro::ir::MEMBER ***)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v30, a3);
        return;
      case 0x11u:
        a1 = *(void *)a1 + 48;
        continue;
      case 0x12u:
        uint64_t v10 = *(const nitro::ir::MEMBER ***)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v10, a3);
        return;
      case 0x13u:
        uint64_t v6 = *(const nitro::ir::LIST **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v6, a3);
        return;
      case 0x14u:
        BOOL v15 = *(const nitro::ir::DICT **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v15, a3);
        return;
      case 0x15u:
        uint64_t v28 = *(const nitro::ir::TUPLE **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v28, a3);
        return;
      case 0x16u:
        long long v31 = *(const nitro::ir::TUPLEGET **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v31, a3);
        return;
      case 0x17u:
        BYTE7(v34) = 8;
        strcpy((char *)__p, "__self__");
        uint64_t symbol_id = nitro::get_symbol_id((const std::string *)__p);
        if (SBYTE7(v34) < 0) {
          operator delete(__p[0]);
        }
        *(void *)a3 = &unk_1EE37A8B0;
        *(void *)(a3 + 8) = symbol_id;
        goto LABEL_49;
      case 0x18u:
        uint64_t v12 = *(const nitro::ir::RETURN **)a1;
        nitro::impl::nitro_lazy_eval::exec(a2, v12, a3);
        return;
      case 0x19u:
        *(void *)a3 = &unk_1EE37A908;
        goto LABEL_49;
      case 0x1Au:
        *(void *)a3 = &unk_1EE37AC78;
        goto LABEL_49;
      default:
        _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv();
    }
  }
}

void sub_1925BD070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v19, (char *)a2 + 8, this);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = (uint64_t)v20;
  if (!v20) {
    goto LABEL_4;
  }
  if (v20 != v19)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    uint64_t v13 = (void *)v6;
    goto LABEL_6;
  }
  uint64_t v13 = v12;
  (*(void (**)(void *, void *))(v19[0] + 24))(v19, v12);
LABEL_6:
  __int16 v14 = v21;
  long long v15 = v22;
  if (*((void *)&v22 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = v23;
  unsigned __int8 v17 = v24;
  if (v24 - 2 < 4 || v24 == 9) {
    atomic_fetch_add(v16, 1uLL);
  }
  uint64_t v18 = v5;
  uint64_t v7 = (uint64_t)v13;
  if (!v13) {
    goto LABEL_14;
  }
  if (v13 != v12)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_14:
    unint64_t v26 = (void *)v7;
    goto LABEL_16;
  }
  unint64_t v26 = v25;
  (*(void (**)(void *, void *))(v12[0] + 24))(v12, v25);
LABEL_16:
  __int16 v27 = v14;
  long long v28 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = v16;
  unsigned __int8 v30 = v17;
  if (v17 - 2 < 4 || v17 == 9) {
    atomic_fetch_add(v16, 1uLL);
  }
  uint64_t v8 = v18;
  uint64_t v31 = v18;
  *(void *)(a3 + 24) = 0;
  char v9 = operator new(0x58uLL);
  uint64_t v10 = v9;
  void *v9 = &unk_1EE37AB18;
  if (v26)
  {
    if (v26 == v25)
    {
      v9[4] = v9 + 1;
      (*(void (**)(void *))(v25[0] + 24))(v25);
      uint64_t v8 = v31;
    }
    else
    {
      v9[4] = v26;
      unint64_t v26 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  *((_WORD *)v10 + 20) = v27;
  *((_OWORD *)v10 + 3) = v28;
  long long v28 = 0uLL;
  unsigned char v10[8] = v29;
  *((unsigned char *)v10 + 72) = v30;
  unsigned __int8 v30 = 0;
  v10[10] = v8;
  *(void *)(a3 + 24) = v10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v28);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void))(*v26 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v15);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v22);
  uint64_t result = v20;
  if (v20 == v19) {
    return (void *)(*(uint64_t (**)(void *))(v19[0] + 32))(v19);
  }
  if (v20) {
    return (void *)(*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

void sub_1925BD544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::BINARYOPERATOR *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v293 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v274, (char *)a2 + 16, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v267, (char *)a2 + 24, this);
  int v6 = *((_DWORD *)a2 + 2);
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  switch(v6)
  {
    case 0:
      uint64_t v7 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_5;
      }
      if (v275 == v274)
      {
        v248 = v247;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v247);
      }
      else
      {
        uint64_t v7 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_5:
        v248 = (void *)v7;
      }
      __int16 v249 = v276;
      v250[0] = v277;
      v250[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      v251 = v279;
      unsigned __int8 v252 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v251, 1uLL);
      }
      uint64_t v28 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_137;
      }
      if (v268 == v267)
      {
        v254 = v253;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v253);
      }
      else
      {
        uint64_t v28 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_137:
        v254 = (void *)v28;
      }
      __int16 v255 = v269;
      v256[0] = v270;
      v256[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      v257 = v272;
      unsigned __int8 v258 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v257, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)v281, (uint64_t)v247);
      v261 = 0;
      unint64_t v49 = operator new(0x98uLL);
      uint64_t v50 = v49;
      *unint64_t v49 = &unk_1EE37A1D0;
      if (v282)
      {
        if (v282 == v281)
        {
          v49[4] = v49 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v49[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v49[4] = 0;
      }
      *((_WORD *)v50 + 20) = v283;
      *((_OWORD *)v50 + 3) = v284;
      long long v284 = 0uLL;
      v50[8] = v285;
      *((unsigned char *)v50 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v50[13] = v50 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v50[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v50[13] = 0;
      }
      *((_WORD *)v50 + 56) = v289;
      *(_OWORD *)(v50 + 15) = v290;
      long long v290 = 0uLL;
      v50[17] = v291;
      *((unsigned char *)v50 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v50;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v256);
      if (v254 == v253)
      {
        (*(void (**)(void *))(v253[0] + 32))(v253);
      }
      else if (v254)
      {
        (*(void (**)(void))(*v254 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v250);
      uint64_t v63 = v248;
      if (v248 != v247) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v247[0] + 32))(v247);
      goto LABEL_678;
    case 1:
      uint64_t v15 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_37;
      }
      if (v275 == v274)
      {
        v236 = v235;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v235);
      }
      else
      {
        uint64_t v15 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_37:
        v236 = (void *)v15;
      }
      __int16 v237 = v276;
      v238[0] = v277;
      v238[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      v239 = v279;
      unsigned __int8 v240 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v239, 1uLL);
      }
      uint64_t v29 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_147;
      }
      if (v268 == v267)
      {
        v242 = v241;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v241);
      }
      else
      {
        uint64_t v29 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_147:
        v242 = (void *)v29;
      }
      __int16 v243 = v269;
      v244[0] = v270;
      v244[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      v245 = v272;
      unsigned __int8 v246 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v245, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)v281, (uint64_t)v235);
      v261 = 0;
      uint64_t v51 = operator new(0x98uLL);
      uint64_t v52 = v51;
      *uint64_t v51 = &unk_1EE37A228;
      if (v282)
      {
        if (v282 == v281)
        {
          v51[4] = v51 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v51[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v51[4] = 0;
      }
      *((_WORD *)v52 + 20) = v283;
      *((_OWORD *)v52 + 3) = v284;
      long long v284 = 0uLL;
      v52[8] = v285;
      *((unsigned char *)v52 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v52[13] = v52 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v52[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v52[13] = 0;
      }
      *((_WORD *)v52 + 56) = v289;
      *(_OWORD *)(v52 + 15) = v290;
      long long v290 = 0uLL;
      v52[17] = v291;
      *((unsigned char *)v52 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v52;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v244);
      if (v242 == v241)
      {
        (*(void (**)(void *))(v241[0] + 32))(v241);
      }
      else if (v242)
      {
        (*(void (**)(void))(*v242 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v238);
      uint64_t v63 = v236;
      if (v236 != v235) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v235[0] + 32))(v235);
      goto LABEL_678;
    case 2:
      uint64_t v12 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_25;
      }
      if (v275 == v274)
      {
        v224 = v223;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v223);
      }
      else
      {
        uint64_t v12 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_25:
        v224 = (void *)v12;
      }
      __int16 v225 = v276;
      v226[0] = v277;
      v226[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      v227 = v279;
      unsigned __int8 v228 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v227, 1uLL);
      }
      uint64_t v25 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_107;
      }
      if (v268 == v267)
      {
        v230 = v229;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v229);
      }
      else
      {
        uint64_t v25 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_107:
        v230 = (void *)v25;
      }
      __int16 v231 = v269;
      v232[0] = v270;
      v232[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      v233 = v272;
      unsigned __int8 v234 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v233, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)v281, (uint64_t)v223);
      v261 = 0;
      unint64_t v43 = operator new(0x98uLL);
      uint64_t v44 = v43;
      void *v43 = &unk_1EE37A280;
      if (v282)
      {
        if (v282 == v281)
        {
          v43[4] = v43 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v43[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v43[4] = 0;
      }
      *((_WORD *)v44 + 20) = v283;
      *((_OWORD *)v44 + 3) = v284;
      long long v284 = 0uLL;
      v44[8] = v285;
      *((unsigned char *)v44 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v44[13] = v44 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v44[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v44[13] = 0;
      }
      *((_WORD *)v44 + 56) = v289;
      *(_OWORD *)(v44 + 15) = v290;
      long long v290 = 0uLL;
      v44[17] = v291;
      *((unsigned char *)v44 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v44;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v232);
      if (v230 == v229)
      {
        (*(void (**)(void *))(v229[0] + 32))(v229);
      }
      else if (v230)
      {
        (*(void (**)(void))(*v230 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v226);
      uint64_t v63 = v224;
      if (v224 != v223) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v223[0] + 32))(v223);
      goto LABEL_678;
    case 3:
      uint64_t v13 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_29;
      }
      if (v275 == v274)
      {
        v200 = v199;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v199);
      }
      else
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_29:
        v200 = (void *)v13;
      }
      __int16 v201 = v276;
      v202[0] = v277;
      v202[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      v203 = v279;
      unsigned __int8 v204 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v203, 1uLL);
      }
      uint64_t v26 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_117;
      }
      if (v268 == v267)
      {
        v206 = v205;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v205);
      }
      else
      {
        uint64_t v26 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_117:
        v206 = (void *)v26;
      }
      __int16 v207 = v269;
      v208[0] = v270;
      v208[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      v209 = v272;
      unsigned __int8 v210 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v209, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)v281, (uint64_t)v199);
      v261 = 0;
      unint64_t v45 = operator new(0x98uLL);
      unint64_t v46 = v45;
      *unint64_t v45 = &unk_1EE37A330;
      if (v282)
      {
        if (v282 == v281)
        {
          v45[4] = v45 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v45[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v45[4] = 0;
      }
      *((_WORD *)v46 + 20) = v283;
      *((_OWORD *)v46 + 3) = v284;
      long long v284 = 0uLL;
      v46[8] = v285;
      *((unsigned char *)v46 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v46[13] = v46 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v46[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v46[13] = 0;
      }
      *((_WORD *)v46 + 56) = v289;
      *(_OWORD *)(v46 + 15) = v290;
      long long v290 = 0uLL;
      v46[17] = v291;
      *((unsigned char *)v46 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v46;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v208);
      if (v206 == v205)
      {
        (*(void (**)(void *))(v205[0] + 32))(v205);
      }
      else if (v206)
      {
        (*(void (**)(void))(*v206 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v202);
      uint64_t v63 = v200;
      if (v200 != v199) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v199[0] + 32))(v199);
      goto LABEL_678;
    case 4:
      uint64_t v9 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_13;
      }
      if (v275 == v274)
      {
        v212 = v211;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v211);
      }
      else
      {
        uint64_t v9 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_13:
        v212 = (void *)v9;
      }
      __int16 v213 = v276;
      v214[0] = v277;
      v214[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      v215 = v279;
      unsigned __int8 v216 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v215, 1uLL);
      }
      uint64_t v22 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_77;
      }
      if (v268 == v267)
      {
        v218 = v217;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v217);
      }
      else
      {
        uint64_t v22 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_77:
        v218 = (void *)v22;
      }
      __int16 v219 = v269;
      v220[0] = v270;
      v220[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      v221 = v272;
      unsigned __int8 v222 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v221, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)v281, (uint64_t)v211);
      v261 = 0;
      uint64_t v37 = operator new(0x98uLL);
      uint64_t v38 = v37;
      *uint64_t v37 = &unk_1EE37A2D8;
      if (v282)
      {
        if (v282 == v281)
        {
          v37[4] = v37 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v37[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v37[4] = 0;
      }
      *((_WORD *)v38 + 20) = v283;
      *((_OWORD *)v38 + 3) = v284;
      long long v284 = 0uLL;
      v38[8] = v285;
      *((unsigned char *)v38 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v38[13] = v38 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v38[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v38[13] = 0;
      }
      *((_WORD *)v38 + 56) = v289;
      *(_OWORD *)(v38 + 15) = v290;
      long long v290 = 0uLL;
      v38[17] = v291;
      *((unsigned char *)v38 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v38;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v220);
      if (v218 == v217)
      {
        (*(void (**)(void *))(v217[0] + 32))(v217);
      }
      else if (v218)
      {
        (*(void (**)(void))(*v218 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v214);
      uint64_t v63 = v212;
      if (v212 != v211) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v211[0] + 32))(v211);
      goto LABEL_678;
    case 5:
      uint64_t v16 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_41;
      }
      if (v275 == v274)
      {
        unint64_t v188 = v187;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v187);
      }
      else
      {
        uint64_t v16 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_41:
        unint64_t v188 = (void *)v16;
      }
      __int16 v189 = v276;
      v190[0] = v277;
      v190[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v191 = v279;
      unsigned __int8 v192 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v191, 1uLL);
      }
      uint64_t v30 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_157;
      }
      if (v268 == v267)
      {
        uint64_t v194 = v193;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v193);
      }
      else
      {
        uint64_t v30 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_157:
        uint64_t v194 = (void *)v30;
      }
      __int16 v195 = v269;
      v196[0] = v270;
      v196[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v197 = v272;
      unsigned __int8 v198 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v197, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)v281, (uint64_t)v187);
      v261 = 0;
      uint64_t v53 = operator new(0x98uLL);
      uint64_t v54 = v53;
      *uint64_t v53 = &unk_1EE37A388;
      if (v282)
      {
        if (v282 == v281)
        {
          v53[4] = v53 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v53[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v53[4] = 0;
      }
      *((_WORD *)v54 + 20) = v283;
      *((_OWORD *)v54 + 3) = v284;
      long long v284 = 0uLL;
      v54[8] = v285;
      *((unsigned char *)v54 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v54[13] = v54 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v54[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v54[13] = 0;
      }
      *((_WORD *)v54 + 56) = v289;
      *(_OWORD *)(v54 + 15) = v290;
      long long v290 = 0uLL;
      v54[17] = v291;
      *((unsigned char *)v54 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v54;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v196);
      if (v194 == v193)
      {
        (*(void (**)(void *))(v193[0] + 32))(v193);
      }
      else if (v194)
      {
        (*(void (**)(void))(*v194 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v190);
      uint64_t v63 = v188;
      if (v188 != v187) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v187[0] + 32))(v187);
      goto LABEL_678;
    case 6:
      uint64_t v18 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_49;
      }
      if (v275 == v274)
      {
        unint64_t v176 = v175;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v175);
      }
      else
      {
        uint64_t v18 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_49:
        unint64_t v176 = (void *)v18;
      }
      __int16 v177 = v276;
      v178[0] = v277;
      v178[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v179 = v279;
      unsigned __int8 v180 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v179, 1uLL);
      }
      uint64_t v32 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_177;
      }
      if (v268 == v267)
      {
        unint64_t v182 = v181;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v181);
      }
      else
      {
        uint64_t v32 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_177:
        unint64_t v182 = (void *)v32;
      }
      __int16 v183 = v269;
      v184[0] = v270;
      v184[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v185 = v272;
      unsigned __int8 v186 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v185, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)v281, (uint64_t)v175);
      v261 = 0;
      unint64_t v57 = operator new(0x98uLL);
      uint64_t v58 = v57;
      void *v57 = &unk_1EE37A3E0;
      if (v282)
      {
        if (v282 == v281)
        {
          v57[4] = v57 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v57[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v57[4] = 0;
      }
      *((_WORD *)v58 + 20) = v283;
      *((_OWORD *)v58 + 3) = v284;
      long long v284 = 0uLL;
      v58[8] = v285;
      *((unsigned char *)v58 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v58[13] = v58 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v58[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v58[13] = 0;
      }
      *((_WORD *)v58 + 56) = v289;
      *(_OWORD *)(v58 + 15) = v290;
      long long v290 = 0uLL;
      v58[17] = v291;
      *((unsigned char *)v58 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v58;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v184);
      if (v182 == v181)
      {
        (*(void (**)(void *))(v181[0] + 32))(v181);
      }
      else if (v182)
      {
        (*(void (**)(void))(*v182 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v178);
      uint64_t v63 = v176;
      if (v176 != v175) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v175[0] + 32))(v175);
      goto LABEL_678;
    case 7:
      uint64_t v14 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_33;
      }
      if (v275 == v274)
      {
        unint64_t v164 = v163;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v163);
      }
      else
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_33:
        unint64_t v164 = (void *)v14;
      }
      __int16 v165 = v276;
      v166[0] = v277;
      v166[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v167 = v279;
      unsigned __int8 v168 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v167, 1uLL);
      }
      uint64_t v27 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_127;
      }
      if (v268 == v267)
      {
        uint64_t v170 = v169;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v169);
      }
      else
      {
        uint64_t v27 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_127:
        uint64_t v170 = (void *)v27;
      }
      __int16 v171 = v269;
      v172[0] = v270;
      v172[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      int8x16_t v173 = v272;
      unsigned __int8 v174 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v173, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)v281, (uint64_t)v163);
      v261 = 0;
      uint64_t v47 = operator new(0x98uLL);
      uint64_t v48 = v47;
      void *v47 = &unk_1EE37A438;
      if (v282)
      {
        if (v282 == v281)
        {
          v47[4] = v47 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v47[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v47[4] = 0;
      }
      *((_WORD *)v48 + 20) = v283;
      *((_OWORD *)v48 + 3) = v284;
      long long v284 = 0uLL;
      v48[8] = v285;
      *((unsigned char *)v48 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v48[13] = v48 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v48[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v48[13] = 0;
      }
      *((_WORD *)v48 + 56) = v289;
      *(_OWORD *)(v48 + 15) = v290;
      long long v290 = 0uLL;
      v48[17] = v291;
      *((unsigned char *)v48 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v48;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v172);
      if (v170 == v169)
      {
        (*(void (**)(void *))(v169[0] + 32))(v169);
      }
      else if (v170)
      {
        (*(void (**)(void))(*v170 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v166);
      uint64_t v63 = v164;
      if (v164 != v163) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v163[0] + 32))(v163);
      goto LABEL_678;
    case 8:
      uint64_t v20 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_57;
      }
      if (v275 == v274)
      {
        uint64_t v152 = v151;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v151);
      }
      else
      {
        uint64_t v20 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_57:
        uint64_t v152 = (void *)v20;
      }
      __int16 v153 = v276;
      v154[0] = v277;
      v154[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      float32x4_t v155 = v279;
      unsigned __int8 v156 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v155, 1uLL);
      }
      uint64_t v34 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_197;
      }
      if (v268 == v267)
      {
        float32x4_t v158 = v157;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v157);
      }
      else
      {
        uint64_t v34 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_197:
        float32x4_t v158 = (void *)v34;
      }
      __int16 v159 = v269;
      v160[0] = v270;
      v160[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v161 = v272;
      unsigned __int8 v162 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v161, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_8::$_8((uint64_t)v281, (uint64_t)v151);
      v261 = 0;
      uint64_t v61 = operator new(0x98uLL);
      unint64_t v62 = v61;
      void *v61 = &unk_1EE37A490;
      if (v282)
      {
        if (v282 == v281)
        {
          v61[4] = v61 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v61[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v61[4] = 0;
      }
      *((_WORD *)v62 + 20) = v283;
      *((_OWORD *)v62 + 3) = v284;
      long long v284 = 0uLL;
      v62[8] = v285;
      *((unsigned char *)v62 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v62[13] = v62 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v62[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v62[13] = 0;
      }
      *((_WORD *)v62 + 56) = v289;
      *(_OWORD *)(v62 + 15) = v290;
      long long v290 = 0uLL;
      v62[17] = v291;
      *((unsigned char *)v62 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v62;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v160);
      if (v158 == v157)
      {
        (*(void (**)(void *))(v157[0] + 32))(v157);
      }
      else if (v158)
      {
        (*(void (**)(void))(*v158 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v154);
      uint64_t v63 = v152;
      if (v152 != v151) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v151[0] + 32))(v151);
      goto LABEL_678;
    case 9:
      uint64_t v11 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_21;
      }
      if (v275 == v274)
      {
        uint64_t v140 = v139;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v139);
      }
      else
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_21:
        uint64_t v140 = (void *)v11;
      }
      __int16 v141 = v276;
      v142[0] = v277;
      v142[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v143 = v279;
      unsigned __int8 v144 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v143, 1uLL);
      }
      uint64_t v24 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_97;
      }
      if (v268 == v267)
      {
        uint64_t v146 = v145;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v145);
      }
      else
      {
        uint64_t v24 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_97:
        uint64_t v146 = (void *)v24;
      }
      __int16 v147 = v269;
      v148[0] = v270;
      v148[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v149 = v272;
      unsigned __int8 v150 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v149, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_9::$_9((uint64_t)v281, (uint64_t)v139);
      v261 = 0;
      int64x2_t v41 = operator new(0x98uLL);
      uint64_t v42 = v41;
      *int64x2_t v41 = &unk_1EE37A4E8;
      if (v282)
      {
        if (v282 == v281)
        {
          v41[4] = v41 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v41[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v41[4] = 0;
      }
      *((_WORD *)v42 + 20) = v283;
      *((_OWORD *)v42 + 3) = v284;
      long long v284 = 0uLL;
      v42[8] = v285;
      *((unsigned char *)v42 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v42[13] = v42 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v42[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v42[13] = 0;
      }
      *((_WORD *)v42 + 56) = v289;
      *(_OWORD *)(v42 + 15) = v290;
      long long v290 = 0uLL;
      v42[17] = v291;
      *((unsigned char *)v42 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v42;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v148);
      if (v146 == v145)
      {
        (*(void (**)(void *))(v145[0] + 32))(v145);
      }
      else if (v146)
      {
        (*(void (**)(void))(*v146 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v142);
      uint64_t v63 = v140;
      if (v140 != v139) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v139[0] + 32))(v139);
      goto LABEL_678;
    case 10:
      uint64_t v19 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_53;
      }
      if (v275 == v274)
      {
        uint64_t v128 = v127;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v127);
      }
      else
      {
        uint64_t v19 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_53:
        uint64_t v128 = (void *)v19;
      }
      __int16 v129 = v276;
      v130[0] = v277;
      v130[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v131 = v279;
      unsigned __int8 v132 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v131, 1uLL);
      }
      uint64_t v33 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_187;
      }
      if (v268 == v267)
      {
        uint64_t v134 = v133;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v133);
      }
      else
      {
        uint64_t v33 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_187:
        uint64_t v134 = (void *)v33;
      }
      __int16 v135 = v269;
      v136[0] = v270;
      v136[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v137 = v272;
      unsigned __int8 v138 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v137, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_10::$_10((uint64_t)v281, (uint64_t)v127);
      v261 = 0;
      unint64_t v59 = operator new(0x98uLL);
      unint64_t v60 = v59;
      *unint64_t v59 = &unk_1EE37A540;
      if (v282)
      {
        if (v282 == v281)
        {
          v59[4] = v59 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v59[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v59[4] = 0;
      }
      *((_WORD *)v60 + 20) = v283;
      *((_OWORD *)v60 + 3) = v284;
      long long v284 = 0uLL;
      v60[8] = v285;
      *((unsigned char *)v60 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v60[13] = v60 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v60[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v60[13] = 0;
      }
      *((_WORD *)v60 + 56) = v289;
      *(_OWORD *)(v60 + 15) = v290;
      long long v290 = 0uLL;
      v60[17] = v291;
      *((unsigned char *)v60 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v60;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v136);
      if (v134 == v133)
      {
        (*(void (**)(void *))(v133[0] + 32))(v133);
      }
      else if (v134)
      {
        (*(void (**)(void))(*v134 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v130);
      uint64_t v63 = v128;
      if (v128 != v127) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v127[0] + 32))(v127);
      goto LABEL_678;
    case 11:
      uint64_t v8 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_9;
      }
      if (v275 == v274)
      {
        uint64_t v116 = v115;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v115);
      }
      else
      {
        uint64_t v8 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_9:
        uint64_t v116 = (void *)v8;
      }
      __int16 v117 = v276;
      v118[0] = v277;
      v118[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v119 = v279;
      unsigned __int8 v120 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v119, 1uLL);
      }
      uint64_t v21 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_67;
      }
      if (v268 == v267)
      {
        uint64_t v122 = v121;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v121);
      }
      else
      {
        uint64_t v21 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_67:
        uint64_t v122 = (void *)v21;
      }
      __int16 v123 = v269;
      v124[0] = v270;
      v124[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v125 = v272;
      unsigned __int8 v126 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v125, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_11::$_11((uint64_t)v281, (uint64_t)v115);
      v261 = 0;
      uint64_t v35 = operator new(0x98uLL);
      unint64_t v36 = v35;
      *uint64_t v35 = &unk_1EE37A598;
      if (v282)
      {
        if (v282 == v281)
        {
          v35[4] = v35 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v35[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v35[4] = 0;
      }
      *((_WORD *)v36 + 20) = v283;
      *((_OWORD *)v36 + 3) = v284;
      long long v284 = 0uLL;
      v36[8] = v285;
      *((unsigned char *)v36 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v36[13] = v36 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v36[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v36[13] = 0;
      }
      *((_WORD *)v36 + 56) = v289;
      *(_OWORD *)(v36 + 15) = v290;
      long long v290 = 0uLL;
      v36[17] = v291;
      *((unsigned char *)v36 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v36;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v124);
      if (v122 == v121)
      {
        (*(void (**)(void *))(v121[0] + 32))(v121);
      }
      else if (v122)
      {
        (*(void (**)(void))(*v122 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v118);
      uint64_t v63 = v116;
      if (v116 != v115) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v115[0] + 32))(v115);
      goto LABEL_678;
    case 12:
      uint64_t v10 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_17;
      }
      if (v275 == v274)
      {
        uint64_t v104 = v103;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v103);
      }
      else
      {
        uint64_t v10 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_17:
        uint64_t v104 = (void *)v10;
      }
      __int16 v105 = v276;
      v106[0] = v277;
      v106[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      float32x4_t v107 = v279;
      unsigned __int8 v108 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v107, 1uLL);
      }
      uint64_t v23 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_87;
      }
      if (v268 == v267)
      {
        uint64_t v110 = v109;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v109);
      }
      else
      {
        uint64_t v23 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_87:
        uint64_t v110 = (void *)v23;
      }
      __int16 v111 = v269;
      v112[0] = v270;
      v112[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v113 = v272;
      unsigned __int8 v114 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v113, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_12::$_12((uint64_t)v281, (uint64_t)v103);
      v261 = 0;
      unint64_t v39 = operator new(0x98uLL);
      uint64_t v40 = v39;
      *unint64_t v39 = &unk_1EE37A5F0;
      if (v282)
      {
        if (v282 == v281)
        {
          v39[4] = v39 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v39[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v39[4] = 0;
      }
      *((_WORD *)v40 + 20) = v283;
      *((_OWORD *)v40 + 3) = v284;
      long long v284 = 0uLL;
      v40[8] = v285;
      *((unsigned char *)v40 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v40[13] = v40 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v40[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v40[13] = 0;
      }
      *((_WORD *)v40 + 56) = v289;
      *(_OWORD *)(v40 + 15) = v290;
      long long v290 = 0uLL;
      v40[17] = v291;
      *((unsigned char *)v40 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v40;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v112);
      if (v110 == v109)
      {
        (*(void (**)(void *))(v109[0] + 32))(v109);
      }
      else if (v110)
      {
        (*(void (**)(void))(*v110 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
      uint64_t v63 = v104;
      if (v104 != v103) {
        goto LABEL_673;
      }
      (*(void (**)(void *))(v103[0] + 32))(v103);
      goto LABEL_678;
    case 13:
      uint64_t v17 = (uint64_t)v275;
      if (!v275) {
        goto LABEL_45;
      }
      if (v275 == v274)
      {
        uint64_t v92 = v91;
        (*(void (**)(void *, void *))(v274[0] + 24))(v274, v91);
      }
      else
      {
        uint64_t v17 = (*(uint64_t (**)(void))(*v275 + 16))();
LABEL_45:
        uint64_t v92 = (void *)v17;
      }
      __int16 v93 = v276;
      v94[0] = v277;
      v94[1] = v278;
      if (v278) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v278 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v95 = v279;
      unsigned __int8 v96 = v280;
      if (v280 - 2 < 4 || v280 == 9) {
        atomic_fetch_add(v95, 1uLL);
      }
      uint64_t v31 = (uint64_t)v268;
      if (!v268) {
        goto LABEL_167;
      }
      if (v268 == v267)
      {
        uint64_t v98 = v97;
        (*(void (**)(void *, void *))(v267[0] + 24))(v267, v97);
      }
      else
      {
        uint64_t v31 = (*(uint64_t (**)(void))(*v268 + 16))();
LABEL_167:
        uint64_t v98 = (void *)v31;
      }
      __int16 v99 = v269;
      v100[0] = v270;
      v100[1] = v271;
      if (v271) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v271 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v101 = v272;
      unsigned __int8 v102 = v273;
      if (v273 - 2 < 4 || v273 == 9) {
        atomic_fetch_add(v101, 1uLL);
      }
      nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_13::$_13((uint64_t)v281, (uint64_t)v91);
      v261 = 0;
      uint64_t v55 = operator new(0x98uLL);
      uint64_t v56 = v55;
      void *v55 = &unk_1EE37A648;
      if (v282)
      {
        if (v282 == v281)
        {
          v55[4] = v55 + 1;
          (*(void (**)(int *))(*(void *)v281 + 24))(v281);
        }
        else
        {
          v55[4] = v282;
          v282 = 0;
        }
      }
      else
      {
        v55[4] = 0;
      }
      *((_WORD *)v56 + 20) = v283;
      *((_OWORD *)v56 + 3) = v284;
      long long v284 = 0uLL;
      v56[8] = v285;
      *((unsigned char *)v56 + 72) = v286;
      char v286 = 0;
      if (v288)
      {
        if (v288 == v287)
        {
          v56[13] = v56 + 10;
          (*(void (**)(void))(v287[0] + 24))();
        }
        else
        {
          v56[13] = v288;
          v288 = 0;
        }
      }
      else
      {
        v56[13] = 0;
      }
      *((_WORD *)v56 + 56) = v289;
      *(_OWORD *)(v56 + 15) = v290;
      long long v290 = 0uLL;
      v56[17] = v291;
      *((unsigned char *)v56 + 144) = v292;
      char v292 = 0;
      v261 = (void **)v56;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v290);
      if (v288 == v287)
      {
        (*(void (**)(void *))(v287[0] + 32))(v287);
      }
      else if (v288)
      {
        (*(void (**)(void))(*v288 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v284);
      if (v282 == v281)
      {
        (*(void (**)(int *))(*(void *)v281 + 32))(v281);
      }
      else if (v282)
      {
        (*(void (**)(void))(*(void *)v282 + 40))();
      }
      __int16 v262 = 0;
      uint64_t v265 = 0;
      uint64_t v263 = 0;
      uint64_t v264 = 0;
      char v266 = 0;
      nitro::impl::delayed_variable::operator=(a3, (uint64_t)v259);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v263);
      if (v261 == v259)
      {
        (*((void (**)(void **))v259[0] + 4))(v259);
      }
      else if (v261)
      {
        (*((void (**)(void))*v261 + 5))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v100);
      if (v98 == v97)
      {
        (*(void (**)(void *))(v97[0] + 32))(v97);
      }
      else if (v98)
      {
        (*(void (**)(void))(*v98 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v94);
      uint64_t v63 = v92;
      if (v92 == v91)
      {
        (*(void (**)(void *))(v91[0] + 32))(v91);
LABEL_678:
        if ((_BYTE)v276) {
          goto LABEL_679;
        }
      }
      else
      {
LABEL_673:
        if (v63) {
          (*(void (**)(void *))(*v63 + 40))(v63);
        }
        if ((_BYTE)v276)
        {
LABEL_679:
          if ((_BYTE)v269) {
            *(unsigned char *)(a3 + 32) = 1;
          }
        }
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v270);
      if (v268 == v267)
      {
        (*(void (**)(void *))(v267[0] + 32))(v267);
      }
      else if (v268)
      {
        (*(void (**)(void))(*v268 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v277);
      uint64_t result = v275;
      if (v275 == v274) {
        return (void *)(*(uint64_t (**)(void *))(v274[0] + 32))(v274);
      }
      if (v275) {
        return (void *)(*(uint64_t (**)(void))(*v275 + 40))();
      }
      return result;
    default:
      if (*((int *)global_logger() + 169) <= 6)
      {
        unint64_t v65 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v65, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "exec", 215, 1);
        v281[0] = v6;
        uint64_t v67 = pthread_getspecific(started[74]);
        if (v67 && *((unsigned char *)v67 + 280)) {
          nitro::ir::operator<<(v67 + 2, v281);
        }
        uint64_t v68 = pthread_getspecific(started[74]);
        if (v68 && *((unsigned char *)v68 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68 + 2, (uint64_t)" binary operator not implemented\n", 33);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v281);
      uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, (uint64_t)"Check failed (", 14);
      unint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)":", 1);
      float32x4_t v71 = (void *)std::ostream::operator<<();
      uint64_t v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"): ", 3);
      uint64_t v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"false", 5);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v73);
      if (*((int *)global_logger() + 169) <= 6)
      {
        uint64_t v74 = (file_logger *)global_logger();
        uint64_t v75 = file_logger::start_stream(v74, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 216, 1);
        std::stringbuf::str();
        uint64_t v76 = (char *)pthread_getspecific(*((void *)v75 + 74));
        if (v76 && v76[280])
        {
          uint64_t v77 = v76 + 16;
          if ((v90 & 0x80u) == 0) {
            uint64_t v78 = __p;
          }
          else {
            uint64_t v78 = (void **)__p[0];
          }
          if ((v90 & 0x80u) == 0) {
            uint64_t v79 = v90;
          }
          else {
            uint64_t v79 = (uint64_t)__p[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
        }
        if ((char)v90 < 0) {
          operator delete(__p[0]);
        }
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        unint64_t v80 = (file_logger *)global_logger();
        unint64_t v81 = file_logger::start_stream(v80, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 216, 1);
        std::stringbuf::str();
        uint64_t v82 = (char *)pthread_getspecific(*((void *)v81 + 74));
        if (v82 && v82[280])
        {
          uint64_t v83 = v82 + 16;
          if ((v260 & 0x80u) == 0) {
            uint64_t v84 = v259;
          }
          else {
            uint64_t v84 = (void **)v259[0];
          }
          if ((v260 & 0x80u) == 0) {
            uint64_t v85 = v260;
          }
          else {
            uint64_t v85 = (uint64_t)v259[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
        }
        uint64_t v86 = pthread_getspecific(*((void *)v81 + 74));
        if (v86)
        {
          if (*((unsigned char *)v86 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v81);
            if (*((_DWORD *)v81 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
            }
          }
        }
        if ((char)v260 < 0) {
          operator delete(v259[0]);
        }
      }
      uint64_t v87 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
  }
}

void sub_1925C216C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x80F]) < 0) {
    operator delete((void *)STACK[0x7F8]);
  }
  uint64_t v3 = MEMORY[0x1E4FBA418];
  uint64_t v4 = *MEMORY[0x1E4FBA418];
  STACK[0x8D0] = *MEMORY[0x1E4FBA418];
  *(unint64_t *)((char *)&STACK[0x8D0] + *(void *)(v4 - 2std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(v3 + 24);
  STACK[0x8D8] = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x92F]) < 0) {
    operator delete((void *)STACK[0x918]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&STACK[0x940]);
  nitro::impl::delayed_variable::~delayed_variable(v1);
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&STACK[0x840]);
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&STACK[0x888]);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::delayed_variable::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  void *v5 = 0;
  if (v4 == a1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  int v6 = (void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, a1);
      goto LABEL_11;
    }
    void *v5 = v7;
  }
  else
  {
    int v6 = v5;
  }
  void *v6 = 0;
LABEL_11:
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  nitro::nitro_variable::operator=(a1 + 40, (long long *)(a2 + 40));
  return a1;
}

{
  uint64_t v4;
  void v6[3];
  void *v7;
  uint64_t v8;

  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      uint64_t v7 = v6;
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 24))(a2, v6);
    }
    else
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::__function::__value_func<nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::swap[abi:ne180100](v6, (void *)a1);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  nitro::nitro_variable::operator=(a1 + 40, (uint64_t *)(a2 + 40));
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1 + 9;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  uint64_t v3 = (void *)a1[12];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  uint64_t v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::UNARYOPERATOR *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v67, (char *)a2 + 32, this);
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v44 = *(std::string *)((char *)a2 + 8);
  }
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v44.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_93;
    }
    int v5 = *v44.__r_.__value_.__l.__data_;
    if (v5 == 45)
    {
LABEL_7:
      uint64_t v6 = (uint64_t)v68;
      if (v68)
      {
        if (v68 == v67)
        {
          uint64_t v54 = v53;
          (*(void (**)(void *, void *))(v67[0] + 24))(v67, v53);
LABEL_19:
          __int16 v55 = v69;
          long long v56 = v70;
          if (*((void *)&v70 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v57 = v71;
          unsigned __int8 v58 = v72;
          if (v72 - 2 < 4 || v72 == 9) {
            atomic_fetch_add(v57, 1uLL);
          }
          uint64_t v8 = (uint64_t)v54;
          if (v54)
          {
            if (v54 == v53)
            {
              uint64_t v74 = v73;
              (*(void (**)(void *, void *))(v53[0] + 24))(v53, v73);
LABEL_29:
              __int16 v75 = v55;
              long long v76 = v56;
              if (*((void *)&v56 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v56 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v77 = v57;
              unsigned __int8 v78 = v58;
              if (v58 - 2 < 4 || v58 == 9) {
                atomic_fetch_add(v57, 1uLL);
              }
              uint64_t v61 = 0;
              uint64_t v9 = operator new(0x50uLL);
              uint64_t v10 = v9;
              void *v9 = &unk_1EE37A120;
              if (v74)
              {
                if (v74 == v73)
                {
                  v9[4] = v9 + 1;
                  (*(void (**)(void *))(v73[0] + 24))(v73);
                }
                else
                {
                  v9[4] = v74;
                  uint64_t v74 = 0;
                }
              }
              else
              {
                v9[4] = 0;
              }
              *((_WORD *)v10 + 20) = v75;
              *((_OWORD *)v10 + 3) = v76;
              long long v76 = 0uLL;
              unsigned char v10[8] = v77;
              *((unsigned char *)v10 + 72) = v78;
              unsigned __int8 v78 = 0;
              uint64_t v61 = (void **)v10;
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v76);
              if (v74 == v73)
              {
                (*(void (**)(void *))(v73[0] + 32))(v73);
              }
              else if (v74)
              {
                (*(void (**)(void))(*v74 + 40))();
              }
              __int16 v62 = 0;
              uint64_t v64 = 0;
              uint64_t v65 = 0;
              uint64_t v63 = 0;
              char v66 = 0;
              nitro::impl::delayed_variable::operator=(a3, (uint64_t)v59);
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v63);
              if (v61 == v59)
              {
                (*((void (**)(void **))v59[0] + 4))(v59);
              }
              else if (v61)
              {
                (*((void (**)(void))*v61 + 5))();
              }
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v56);
              uint64_t v14 = v54;
              if (v54 == v53)
              {
                (*(void (**)(void *))(v53[0] + 32))(v53);
                goto LABEL_91;
              }
              goto LABEL_79;
            }
            uint64_t v8 = (*(uint64_t (**)(void))(*v54 + 16))();
          }
          uint64_t v74 = (void *)v8;
          goto LABEL_29;
        }
        uint64_t v6 = (*(uint64_t (**)(void))(*v68 + 16))();
      }
      uint64_t v54 = (void *)v6;
      goto LABEL_19;
    }
  }
  else
  {
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_93;
    }
    int v5 = v44.__r_.__value_.__s.__data_[0];
    if (v44.__r_.__value_.__s.__data_[0] == 45) {
      goto LABEL_7;
    }
  }
  if (v5 != 33)
  {
LABEL_93:
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v16 = (file_logger *)global_logger();
      started = (pthread_key_t *)file_logger::start_stream(v16, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "exec", 240, 1);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v44;
      }
      uint64_t v18 = (char *)pthread_getspecific(started[74]);
      if (v18 && v18[280])
      {
        uint64_t v19 = v18 + 16;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t p_p = &__p;
        }
        else {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)p_p, size);
      }
      uint64_t v22 = pthread_getspecific(started[74]);
      if (v22 && *((unsigned char *)v22 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)" unary operator not implemented\n", 32);
        file_logger::stream_flush((file_logger *)started);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v73);
    uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Check failed (", 14);
    uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)":", 1);
    uint64_t v25 = (void *)std::ostream::operator<<();
    uint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"): ", 3);
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"false", 5);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v27);
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v28 = (file_logger *)global_logger();
      uint64_t v29 = file_logger::start_stream(v28, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 241, 1);
      std::stringbuf::str();
      uint64_t v30 = (char *)pthread_getspecific(*((void *)v29 + 74));
      if (v30 && v30[280])
      {
        uint64_t v31 = v30 + 16;
        if ((v46 & 0x80u) == 0) {
          uint64_t v32 = v45;
        }
        else {
          uint64_t v32 = (void **)v45[0];
        }
        if ((v46 & 0x80u) == 0) {
          uint64_t v33 = v46;
        }
        else {
          uint64_t v33 = (uint64_t)v45[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      }
      if ((char)v46 < 0) {
        operator delete(v45[0]);
      }
    }
    __print_back_trace();
    if (*((int *)global_logger() + 169) <= 6)
    {
      uint64_t v34 = (file_logger *)global_logger();
      uint64_t v35 = file_logger::start_stream(v34, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.cpp", "operator()", 241, 1);
      std::stringbuf::str();
      unint64_t v36 = (char *)pthread_getspecific(*((void *)v35 + 74));
      if (v36 && v36[280])
      {
        uint64_t v37 = v36 + 16;
        if ((v60 & 0x80u) == 0) {
          uint64_t v38 = v59;
        }
        else {
          uint64_t v38 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          uint64_t v39 = v60;
        }
        else {
          uint64_t v39 = (uint64_t)v59[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      }
      uint64_t v40 = pthread_getspecific(*((void *)v35 + 74));
      if (v40)
      {
        if (*((unsigned char *)v40 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(v35);
          if (*((_DWORD *)v35 + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
          }
        }
      }
      if ((char)v60 < 0) {
        operator delete(v59[0]);
      }
    }
    int64x2_t v41 = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
  }
  uint64_t v7 = (uint64_t)v68;
  if (!v68)
  {
LABEL_17:
    uint64_t v48 = (void *)v7;
    goto LABEL_39;
  }
  if (v68 != v67)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v68 + 16))();
    goto LABEL_17;
  }
  uint64_t v48 = v47;
  (*(void (**)(void *, void *))(v67[0] + 24))(v67, v47);
LABEL_39:
  __int16 v49 = v69;
  long long v50 = v70;
  if (*((void *)&v70 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v51 = v71;
  unsigned __int8 v52 = v72;
  if (v72 - 2 < 4 || v72 == 9) {
    atomic_fetch_add(v51, 1uLL);
  }
  uint64_t v11 = (uint64_t)v48;
  if (!v48) {
    goto LABEL_47;
  }
  if (v48 != v47)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*v48 + 16))();
LABEL_47:
    uint64_t v74 = (void *)v11;
    goto LABEL_49;
  }
  uint64_t v74 = v73;
  (*(void (**)(void *, void *))(v47[0] + 24))(v47, v73);
LABEL_49:
  __int16 v75 = v49;
  long long v76 = v50;
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = v51;
  unsigned __int8 v78 = v52;
  if (v52 - 2 < 4 || v52 == 9) {
    atomic_fetch_add(v51, 1uLL);
  }
  uint64_t v61 = 0;
  uint64_t v12 = operator new(0x50uLL);
  uint64_t v13 = v12;
  void *v12 = &unk_1EE37A178;
  if (v74)
  {
    if (v74 == v73)
    {
      v12[4] = v12 + 1;
      (*(void (**)(void *))(v73[0] + 24))(v73);
    }
    else
    {
      v12[4] = v74;
      uint64_t v74 = 0;
    }
  }
  else
  {
    v12[4] = 0;
  }
  *((_WORD *)v13 + 20) = v75;
  *((_OWORD *)v13 + 3) = v76;
  long long v76 = 0uLL;
  v13[8] = v77;
  *((unsigned char *)v13 + 72) = v78;
  unsigned __int8 v78 = 0;
  uint64_t v61 = (void **)v13;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v76);
  if (v74 == v73)
  {
    (*(void (**)(void *))(v73[0] + 32))(v73);
  }
  else if (v74)
  {
    (*(void (**)(void))(*v74 + 40))();
  }
  __int16 v62 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  char v66 = 0;
  nitro::impl::delayed_variable::operator=(a3, (uint64_t)v59);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v63);
  if (v61 == v59)
  {
    (*((void (**)(void **))v59[0] + 4))(v59);
  }
  else if (v61)
  {
    (*((void (**)(void))*v61 + 5))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v50);
  uint64_t v14 = v48;
  if (v48 == v47)
  {
    (*(void (**)(void *))(v47[0] + 32))(v47);
LABEL_91:
    if (!(_BYTE)v69) {
      goto LABEL_83;
    }
LABEL_82:
    *(unsigned char *)(a3 + 32) = 1;
    goto LABEL_83;
  }
LABEL_79:
  if (v14) {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  if ((_BYTE)v69) {
    goto LABEL_82;
  }
LABEL_83:
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v70);
  uint64_t result = v68;
  if (v68 == v67) {
    return (void *)(*(uint64_t (**)(void *))(v67[0] + 32))(v67);
  }
  if (v68) {
    return (void *)(*(uint64_t (**)(void))(*v68 + 40))();
  }
  return result;
}

void sub_1925C37A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  a61 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a61 + *(void *)(a61 - 2std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy((uint64_t)this + 24, *((char **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a62 = MEMORY[0x1E4FBA470] + 16;
  if (a72 < 0) {
    operator delete(a70);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](&a73);
  nitro::impl::delayed_variable::~delayed_variable(v73);
  if (a18 < 0) {
    operator delete(a13);
  }
  nitro::impl::delayed_variable::~delayed_variable((nitro::impl::delayed_variable *)&a52);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::CALL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  std::vector<nitro::impl::delayed_variable>::vector(&v42, (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  if (v43 == v42)
  {
    char v9 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    char v9 = 1;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v60, *((void *)a2 + 3) + v7, this);
      nitro::impl::delayed_variable::operator=((uint64_t)v42 + v6, (uint64_t)&v60);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v62);
      if ((std::string *)v61 == &v60)
      {
        (*(void (**)(std::string *))(v60.__r_.__value_.__r.__words[0] + 32))(&v60);
      }
      else if ((void)v61)
      {
        (*(void (**)(void))(*(void *)v61 + 40))();
      }
      v9 &= *((unsigned char *)v42 + v6 + 32) != 0;
      ++v8;
      v7 += 8;
      v6 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v43 - (unsigned char *)v42) >> 3));
  }
  uint64_t v10 = *((void *)a2 + 1);
  if (v10 == -1)
  {
    nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v53, *((void *)a2 + 2) + 8, this);
    uint64_t v19 = *(void *)(*((void *)a2 + 2) + 16);
    std::vector<nitro::impl::delayed_variable>::vector(&v44, (uint64_t *)&v42);
    uint64_t v20 = (uint64_t)v54;
    if (v54)
    {
      if (v54 == v53)
      {
        uint64_t v47 = v46;
        (*(void (**)(void *, void *))(v53[0] + 24))(v53, v46);
LABEL_28:
        __int16 v48 = v55;
        v49[0] = v56;
        v49[1] = v57;
        if (v57) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
        }
        long long v50 = v58;
        unsigned __int8 v51 = v59;
        if (v59 - 2 < 4 || v59 == 9) {
          atomic_fetch_add(v50, 1uLL);
        }
        uint64_t v52 = v19;
        nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::$_1((uint64_t)&v60, (uint64_t)&v44);
        *(void *)(a3 + 24) = 0;
        uint64_t v22 = (char *)operator new(0x70uLL);
        uint64_t v23 = v22;
        *(void *)uint64_t v22 = &unk_1EE37A7A8;
        *(_OWORD *)(v22 + 8) = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
        uint64_t v24 = v63;
        *((void *)v22 + 3) = *((void *)&v60.__r_.__value_.__l + 2);
        memset(&v60, 0, sizeof(v60));
        if (v24)
        {
          if (v24 == &v61)
          {
            *((void *)v22 + 7) = v22 + 32;
            (*(void (**)(void))(v61 + 24))();
          }
          else
          {
            *((void *)v22 + 7) = v24;
            uint64_t v63 = 0;
          }
        }
        else
        {
          *((void *)v22 + 7) = 0;
        }
        *((_WORD *)v23 + 32) = v64;
        *(_OWORD *)(v23 + 72) = v65;
        long long v65 = 0uLL;
        *((void *)v23 + 11) = v66;
        v23[96] = v67;
        char v67 = 0;
        *((void *)v23 + 13) = v68;
        *(void *)(a3 + 24) = v23;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v65);
        if (v63 == &v61)
        {
          (*(void (**)(long long *))(v61 + 32))(&v61);
        }
        else if (v63)
        {
          (*(void (**)(void))(*(void *)v63 + 40))();
        }
        std::string::size_type v25 = v60.__r_.__value_.__r.__words[0];
        if (v60.__r_.__value_.__r.__words[0])
        {
          uint64_t v26 = (void *)v60.__r_.__value_.__r.__words[0];
          if (v60.__r_.__value_.__l.__size_ != v60.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v27 = v60.__r_.__value_.__l.__size_ - 72;
            uint64_t v28 = (void *)(v60.__r_.__value_.__l.__size_ - 72);
            do
            {
              nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v28 + 5));
              uint64_t v29 = (void *)v28[3];
              if (v28 == v29)
              {
                (*(void (**)(void *))(*v28 + 32))(v28);
              }
              else if (v29)
              {
                (*(void (**)(void *))(*v29 + 40))(v29);
              }
              v27 -= 72;
              BOOL v17 = v28 == (void *)v25;
              v28 -= 9;
            }
            while (!v17);
            uint64_t v26 = (void *)v60.__r_.__value_.__r.__words[0];
          }
          v60.__r_.__value_.__l.__size_ = v25;
          operator delete(v26);
        }
        *(_WORD *)(a3 + 32) = 0;
        *(void *)(a3 + 48) = 0;
        *(void *)(a3 + 56) = 0;
        *(void *)(a3 + 40) = 0;
        *(unsigned char *)(a3 + 64) = 0;
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v49);
        if (v47 == v46)
        {
          (*(void (**)(void *))(v46[0] + 32))(v46);
          uint64_t v30 = (char *)v44;
          if (!v44)
          {
LABEL_67:
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v56);
            if (v54 == v53)
            {
              (*(void (**)(void *))(v53[0] + 32))(v53);
              uint64_t v21 = v42;
              if (!v42) {
                return;
              }
              goto LABEL_71;
            }
            if (v54) {
              (*(void (**)(void))(*v54 + 40))();
            }
LABEL_70:
            uint64_t v21 = v42;
            if (!v42) {
              return;
            }
            goto LABEL_71;
          }
        }
        else
        {
          if (v47) {
            (*(void (**)(void))(*v47 + 40))();
          }
          uint64_t v30 = (char *)v44;
          if (!v44) {
            goto LABEL_67;
          }
        }
        uint64_t v31 = v30;
        if (v45 != v30)
        {
          uint64_t v32 = v45 - 72;
          uint64_t v33 = v45 - 72;
          do
          {
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v33 + 40));
            uint64_t v34 = (char *)*((void *)v33 + 3);
            if (v33 == v34)
            {
              (*(void (**)(char *))(*(void *)v33 + 32))(v33);
            }
            else if (v34)
            {
              (*(void (**)(char *))(*(void *)v34 + 40))(v34);
            }
            v32 -= 72;
            BOOL v17 = v33 == v30;
            v33 -= 72;
          }
          while (!v17);
          uint64_t v31 = v44;
        }
        unint64_t v45 = v30;
        operator delete(v31);
        goto LABEL_67;
      }
      uint64_t v20 = (*(uint64_t (**)(void))(*v54 + 16))();
    }
    uint64_t v47 = (void *)v20;
    goto LABEL_28;
  }
  *((unsigned char *)&v60.__r_.__value_.__s + 23) = 3;
  LODWORD(v60.__r_.__value_.__l.__data_) = 4802118;
  uint64_t symbol_id = nitro::get_symbol_id(&v60);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v42);
  *(void *)&long long v41 = v10;
  *((void *)&v41 + 1) = symbol_id;
  std::vector<nitro::impl::delayed_variable>::vector(&v60, (uint64_t *)&__p);
  long long v61 = v41;
  *(void *)(a3 + 24) = 0;
  uint64_t v12 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v12 = &unk_1EE37A750;
  *(std::string *)(v12 + 8) = v60;
  *((_OWORD *)v12 + 2) = v41;
  *(void *)(a3 + 24) = v12;
  *(unsigned char *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 33) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  uint64_t v13 = (char *)__p;
  if (!__p) {
    goto LABEL_70;
  }
  uint64_t v14 = __p;
  if (v40 != __p)
  {
    uint64_t v15 = v40 - 72;
    uint64_t v16 = v40 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v16 + 40));
      uint64_t v18 = (char *)*((void *)v16 + 3);
      if (v16 == v18)
      {
        (*(void (**)(char *))(*(void *)v16 + 32))(v16);
      }
      else if (v18)
      {
        (*(void (**)(char *))(*(void *)v18 + 40))(v18);
      }
      v15 -= 72;
      BOOL v17 = v16 == v13;
      v16 -= 72;
    }
    while (!v17);
    uint64_t v14 = __p;
  }
  uint64_t v40 = v13;
  operator delete(v14);
  uint64_t v21 = v42;
  if (v42)
  {
LABEL_71:
    uint64_t v35 = v21;
    if (v43 != (unsigned char *)v21)
    {
      unint64_t v36 = v43 - 72;
      uint64_t v37 = v43 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v37 + 5));
        uint64_t v38 = (void *)v37[3];
        if (v37 == v38)
        {
          (*(void (**)(void *))(*v37 + 32))(v37);
        }
        else if (v38)
        {
          (*(void (**)(void *))(*v38 + 40))(v38);
        }
        v36 -= 72;
        BOOL v17 = v37 == v21;
        v37 -= 9;
      }
      while (!v17);
      uint64_t v35 = v42;
    }
    unint64_t v43 = v21;
    operator delete(v35);
  }
}

void sub_1925C4264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<nitro::impl::delayed_variable>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(72 * a2);
    *a1 = v4;
    a1[2] = &v4[72 * a2];
    size_t v5 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1925C4414(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<nitro::impl::delayed_variable>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void **nitro::impl::nitro_lazy_eval::exec(nitro::ir::CALL const&)::$_1::~$_1(void **a1)
{
  uint64_t v2 = a1 + 3;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 8));
  uint64_t v3 = a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (char *)*a1;
    if (!*a1) {
      return a1;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
LABEL_7:
    size_t v5 = (char *)a1[1];
    uint64_t v6 = v4;
    if (v5 != v4)
    {
      uint64_t v7 = v5 - 72;
      unint64_t v8 = v5 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v8 + 40));
        uint64_t v10 = (char *)*((void *)v8 + 3);
        if (v8 == v10)
        {
          (*(void (**)(char *))(*(void *)v8 + 32))(v8);
        }
        else if (v10)
        {
          (*(void (**)(char *))(*(void *)v10 + 40))(v10);
        }
        v7 -= 72;
        BOOL v9 = v8 == v4;
        v8 -= 72;
      }
      while (!v9);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MAKEOBJECT *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  std::vector<nitro::impl::delayed_variable>::vector(&v25, (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  if (v26 != v25)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v27, *((void *)a2 + 4) + v7, this);
      nitro::impl::delayed_variable::operator=((uint64_t)v25 + v6, (uint64_t)&v27);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v29[0].__r_.__value_.__r.__words[2]);
      if ((long long *)v29[0].__r_.__value_.__l.__data_ == &v27)
      {
        (*(void (**)(long long *))(v27 + 32))(&v27);
      }
      else if (v29[0].__r_.__value_.__r.__words[0])
      {
        (*(void (**)(void))(*(void *)v29[0].__r_.__value_.__l.__data_ + 40))();
      }
      ++v8;
      v7 += 8;
      v6 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v26 - (unsigned char *)v25) >> 3));
  }
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v24 = *(std::string *)((char *)a2 + 8);
  }
  std::vector<nitro::impl::delayed_variable>::vector(&v21, (uint64_t *)&v25);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v24;
  }
  std::vector<nitro::impl::delayed_variable>::vector(&v27, (uint64_t *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    v29[0] = __p;
  }
  *(void *)(a3 + 24) = 0;
  BOOL v9 = (char *)operator new(0x38uLL);
  *(void *)BOOL v9 = &unk_1EE37A0C8;
  *(_OWORD *)(v9 + 8) = v27;
  *((void *)v9 + 3) = v28;
  *(std::string *)(v9 + 32) = v29[0];
  *(void *)(a3 + 24) = v9;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = (char *)v21;
  if (v21)
  {
    uint64_t v11 = v21;
    if (v22 != v21)
    {
      uint64_t v12 = v22 - 72;
      uint64_t v13 = v22 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v13 + 40));
        uint64_t v15 = (char *)*((void *)v13 + 3);
        if (v13 == v15)
        {
          (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(char *))(*(void *)v15 + 40))(v15);
        }
        v12 -= 72;
        BOOL v14 = v13 == v10;
        v13 -= 72;
      }
      while (!v14);
      uint64_t v11 = v21;
    }
    uint64_t v22 = v10;
    operator delete(v11);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = v25;
  if (v25)
  {
    BOOL v17 = v25;
    if (v26 != v25)
    {
      uint64_t v18 = v26 - 72;
      uint64_t v19 = v26 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 + 5));
        uint64_t v20 = (void *)v19[3];
        if (v19 == v20)
        {
          (*(void (**)(void *))(*v19 + 32))(v19);
        }
        else if (v20)
        {
          (*(void (**)(void *))(*v20 + 40))(v20);
        }
        v18 -= 72;
        BOOL v14 = v19 == v16;
        v19 -= 9;
      }
      while (!v14);
      BOOL v17 = v25;
    }
    uint64_t v26 = v16;
    operator delete(v17);
  }
}

void sub_1925C496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a26)
  {
    nitro::impl::nitro_lazy_eval::exec(&a26, a26, &__p);
    operator delete(__p);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0::~$_0((uint64_t)&a9);
  if (a20 < 0) {
    operator delete(a15);
  }
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a22);
  _Unwind_Resume(a1);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::MAKEOBJECT const&)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(char **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(char **)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v3 = *(char **)(a1 + 8);
  uint64_t v4 = v2;
  if (v3 != v2)
  {
    size_t v5 = v3 - 72;
    uint64_t v6 = v3 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 40));
      unint64_t v8 = (char *)*((void *)v6 + 3);
      if (v6 == v8)
      {
        (*(void (**)(char *))(*(void *)v6 + 32))(v6);
      }
      else if (v8)
      {
        (*(void (**)(char *))(*(void *)v8 + 40))(v8);
      }
      v5 -= 72;
      BOOL v7 = v6 == v2;
      v6 -= 72;
    }
    while (!v7);
    uint64_t v4 = *(char **)a1;
  }
  *(void *)(a1 + 8) = v2;
  operator delete(v4);
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::WHILE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v30, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v23, this, (char *)a2 + 16);
  uint64_t v6 = (uint64_t)v31;
  if (!v31) {
    goto LABEL_4;
  }
  if (v31 != v30)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v31 + 16))();
LABEL_4:
    uint64_t v12 = (void *)v6;
    goto LABEL_6;
  }
  uint64_t v12 = v11;
  (*(void (**)(void *, void *))(v30[0] + 24))(v30, v11);
LABEL_6:
  __int16 v13 = v32;
  v14[0] = v33;
  v14[1] = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v35;
  unsigned __int8 v16 = v36;
  if (v36 - 2 < 4 || v36 == 9) {
    atomic_fetch_add(v15, 1uLL);
  }
  uint64_t v7 = (uint64_t)v24;
  if (!v24) {
    goto LABEL_14;
  }
  if (v24 != v23)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v24 + 16))();
LABEL_14:
    uint64_t v18 = (void *)v7;
    goto LABEL_16;
  }
  uint64_t v18 = v17;
  (*(void (**)(void *, void *))(v23[0] + 24))(v23, v17);
LABEL_16:
  __int16 v19 = v25;
  v20[0] = v26;
  v20[1] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v28;
  unsigned __int8 v22 = v29;
  if (v29 - 2 < 4 || v29 == 9) {
    atomic_fetch_add(v21, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::WHILE const&)::$_0::$_0((uint64_t)v37, (uint64_t)v11);
  *(void *)(a3 + 24) = 0;
  unint64_t v8 = operator new(0x98uLL);
  BOOL v9 = v8;
  void *v8 = &unk_1EE37A9B8;
  if (v38)
  {
    if (v38 == v37)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v37[0] + 24))(v37);
    }
    else
    {
      v8[4] = v38;
      uint64_t v38 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  *((_WORD *)v9 + 20) = v39;
  *((_OWORD *)v9 + 3) = v40;
  long long v40 = 0uLL;
  v9[8] = v41;
  *((unsigned char *)v9 + 72) = v42;
  char v42 = 0;
  if (v44)
  {
    if (v44 == v43)
    {
      v9[13] = v9 + 10;
      (*(void (**)(void))(v43[0] + 24))();
    }
    else
    {
      v9[13] = v44;
      std::string v44 = 0;
    }
  }
  else
  {
    v9[13] = 0;
  }
  *((_WORD *)v9 + 56) = v45;
  *(_OWORD *)(v9 + 15) = v46;
  long long v46 = 0uLL;
  v9[17] = v47;
  *((unsigned char *)v9 + 144) = v48;
  char v48 = 0;
  *(void *)(a3 + 24) = v9;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v46);
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
  }
  else if (v44)
  {
    (*(void (**)(void))(*v44 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v40);
  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void))(*v38 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v20);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v14);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v26);
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
  uint64_t result = v31;
  if (v31 == v30) {
    return (void *)(*(uint64_t (**)(void *))(v30[0] + 32))(v30);
  }
  if (v31) {
    return (void *)(*(uint64_t (**)(void))(*v31 + 40))();
  }
  return result;
}

void sub_1925C5130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::FOR *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v65, (char *)a2 + 8, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v58, (char *)a2 + 16, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v51, (char *)a2 + 24, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v44, this, (char *)a2 + 32);
  uint64_t v6 = (uint64_t)v66;
  if (!v66) {
    goto LABEL_4;
  }
  if (v66 != v65)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v66 + 16))();
LABEL_4:
    BOOL v17 = (void *)v6;
    goto LABEL_6;
  }
  BOOL v17 = v16;
  (*(void (**)(void *, void *))(v65[0] + 24))(v65, v16);
LABEL_6:
  __int16 v18 = v67;
  uint64_t v19 = v68;
  uint64_t v20 = v69;
  if (v69) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v70;
  unsigned __int8 v22 = v71;
  if (v71 - 2 < 4 || v71 == 9) {
    atomic_fetch_add(v21, 1uLL);
  }
  uint64_t v7 = (uint64_t)v59;
  if (!v59) {
    goto LABEL_14;
  }
  if (v59 != v58)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v59 + 16))();
LABEL_14:
    std::string v24 = (unsigned char *)v7;
    goto LABEL_16;
  }
  std::string v24 = v23;
  (*(void (**)(void *, unsigned char *))(v58[0] + 24))(v58, v23);
LABEL_16:
  __int16 v25 = v60;
  uint64_t v26 = v61;
  uint64_t v27 = v62;
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = v63;
  unsigned __int8 v29 = v64;
  if (v64 - 2 < 4 || v64 == 9) {
    atomic_fetch_add(v28, 1uLL);
  }
  uint64_t v8 = (uint64_t)v52;
  if (!v52) {
    goto LABEL_24;
  }
  if (v52 != v51)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v52 + 16))();
LABEL_24:
    uint64_t v31 = (unsigned char *)v8;
    goto LABEL_26;
  }
  uint64_t v31 = v30;
  (*(void (**)(void *, unsigned char *))(v51[0] + 24))(v51, v30);
LABEL_26:
  __int16 v32 = v53;
  uint64_t v33 = v54;
  uint64_t v34 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v56;
  unsigned __int8 v36 = v57;
  if (v57 - 2 < 4 || v57 == 9) {
    atomic_fetch_add(v35, 1uLL);
  }
  uint64_t v9 = (uint64_t)v45;
  if (!v45) {
    goto LABEL_34;
  }
  if (v45 != v44)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(*v45 + 16))();
LABEL_34:
    uint64_t v38 = (uint64_t *)v9;
    goto LABEL_36;
  }
  uint64_t v38 = &v37;
  (*(void (**)(void *))(v44[0] + 24))(v44);
LABEL_36:
  __int16 v39 = v46;
  uint64_t v40 = v47;
  uint64_t v41 = v48;
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  char v42 = v49;
  unsigned __int8 v43 = v50;
  if (v50 - 2 < 4 || v50 == 9) {
    atomic_fetch_add(v42, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::$_0((uint64_t)v72, (uint64_t)v16);
  *(void *)(a3 + 24) = 0;
  uint64_t v10 = operator new(0x128uLL);
  uint64_t v11 = v10;
  *uint64_t v10 = &unk_1EE37A6F8;
  if (v73)
  {
    if (v73 == v72)
    {
      v10[4] = v10 + 1;
      (*(void (**)(void *))(v72[0] + 24))(v72);
    }
    else
    {
      v10[4] = v73;
      uint64_t v73 = 0;
    }
  }
  else
  {
    v10[4] = 0;
  }
  *((_WORD *)v11 + 20) = v74;
  *((_OWORD *)v11 + 3) = v75;
  long long v75 = 0uLL;
  v11[8] = v76;
  *((unsigned char *)v11 + 72) = v77;
  char v77 = 0;
  uint64_t v12 = v79;
  if (v79)
  {
    if (v79 == &v78)
    {
      v11[13] = v11 + 10;
      (*(void (**)(uint64_t *))(*v12 + 24))(v12);
    }
    else
    {
      v11[13] = v79;
      uint64_t v79 = 0;
    }
  }
  else
  {
    v11[13] = 0;
  }
  *((_WORD *)v11 + 56) = v80;
  *(_OWORD *)(v11 + 15) = v81;
  long long v81 = 0uLL;
  v11[17] = v82;
  *((unsigned char *)v11 + 144) = v83;
  char v83 = 0;
  __int16 v13 = v85;
  if (v85)
  {
    if (v85 == &v84)
    {
      v11[22] = v11 + 19;
      (*(void (**)(uint64_t *))(*v13 + 24))(v13);
    }
    else
    {
      v11[22] = v85;
      uint64_t v85 = 0;
    }
  }
  else
  {
    v11[22] = 0;
  }
  *((_WORD *)v11 + 92) = v86;
  *((_OWORD *)v11 + 12) = v87;
  long long v87 = 0uLL;
  v11[26] = v88;
  *((unsigned char *)v11 + 216) = v89;
  char v89 = 0;
  BOOL v14 = v91;
  if (v91)
  {
    if (v91 == &v90)
    {
      v11[31] = v11 + 28;
      (*(void (**)(uint64_t *))(*v14 + 24))(v14);
    }
    else
    {
      v11[31] = v91;
      uint64_t v91 = 0;
    }
  }
  else
  {
    v11[31] = 0;
  }
  *((_WORD *)v11 + 128) = v92;
  *(_OWORD *)(v11 + 33) = v93;
  long long v93 = 0uLL;
  v11[35] = v94;
  *((unsigned char *)v11 + 288) = v95;
  char v95 = 0;
  *(void *)(a3 + 24) = v11;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(v72);
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(v16);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v47);
  if (v45 == v44)
  {
    (*(void (**)(void *))(v44[0] + 32))(v44);
  }
  else if (v45)
  {
    (*(void (**)(void))(*v45 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v54);
  if (v52 == v51)
  {
    (*(void (**)(void *))(v51[0] + 32))(v51);
  }
  else if (v52)
  {
    (*(void (**)(void))(*v52 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v61);
  if (v59 == v58)
  {
    (*(void (**)(void *))(v58[0] + 32))(v58);
  }
  else if (v59)
  {
    (*(void (**)(void))(*v59 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v68);
  uint64_t result = v66;
  if (v66 == v65) {
    return (void *)(*(uint64_t (**)(void *))(v65[0] + 32))(v65);
  }
  if (v66) {
    return (void *)(*(uint64_t (**)(void))(*v66 + 40))();
  }
  return result;
}

void sub_1925C5A18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOR const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1 + 27;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 32));
  uint64_t v3 = (void *)a1[30];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 23));
  uint64_t v4 = (void *)a1[21];
  if (v4 == a1 + 18)
  {
    (*(void (**)(void *))(a1[18] + 32))(a1 + 18);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  size_t v5 = (void *)a1[12];
  if (v5 == a1 + 9)
  {
    (*(void (**)(void *))(a1[9] + 32))(a1 + 9);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  uint64_t v6 = (void *)a1[3];
  if (v6 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::FOREACH *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v32, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v25, this, (char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = (uint64_t)v33;
  if (!v33) {
    goto LABEL_4;
  }
  if (v33 != v32)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v33 + 16))();
LABEL_4:
    __int16 v13 = (void *)v7;
    goto LABEL_6;
  }
  __int16 v13 = v12;
  (*(void (**)(void *, void *))(v32[0] + 24))(v32, v12);
LABEL_6:
  __int16 v14 = v34;
  v15[0] = v35;
  v15[1] = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v16 = v37;
  unsigned __int8 v17 = v38;
  if (v38 - 2 < 4 || v38 == 9) {
    atomic_fetch_add(v16, 1uLL);
  }
  uint64_t v8 = (uint64_t)v26;
  if (!v26) {
    goto LABEL_14;
  }
  if (v26 != v25)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v26 + 16))();
LABEL_14:
    uint64_t v19 = (void *)v8;
    goto LABEL_16;
  }
  uint64_t v19 = v18;
  (*(void (**)(void *, void *))(v25[0] + 24))(v25, v18);
LABEL_16:
  __int16 v20 = v27;
  v21[0] = v28;
  v21[1] = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v22 = v30;
  unsigned __int8 v23 = v31;
  if (v31 - 2 < 4 || v31 == 9) {
    atomic_fetch_add(v22, 1uLL);
  }
  uint64_t v24 = v6;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::FOREACH const&)::$_0::$_0((uint64_t)v39, (uint64_t)v12);
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = operator new(0xA0uLL);
  uint64_t v10 = v9;
  void *v9 = &unk_1EE37AC20;
  if (v40)
  {
    if (v40 == v39)
    {
      v9[4] = v9 + 1;
      (*(void (**)(void *))(v39[0] + 24))(v39);
    }
    else
    {
      v9[4] = v40;
      uint64_t v40 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  *((_WORD *)v10 + 20) = v41;
  *((_OWORD *)v10 + 3) = v42;
  long long v42 = 0uLL;
  unsigned char v10[8] = v43;
  *((unsigned char *)v10 + 72) = v44;
  char v44 = 0;
  if (v46)
  {
    if (v46 == v45)
    {
      v10[13] = v10 + 10;
      (*(void (**)(void))(v45[0] + 24))();
    }
    else
    {
      v10[13] = v46;
      __int16 v46 = 0;
    }
  }
  else
  {
    v10[13] = 0;
  }
  *((_WORD *)v10 + 56) = v47;
  *(_OWORD *)(v10 + 15) = v48;
  long long v48 = 0uLL;
  v10[17] = v49;
  *((unsigned char *)v10 + 144) = v50;
  char v50 = 0;
  v10[19] = v51;
  *(void *)(a3 + 24) = v10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v48);
  if (v46 == v45)
  {
    (*(void (**)(void *))(v45[0] + 32))(v45);
  }
  else if (v46)
  {
    (*(void (**)(void))(*v46 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v42);
  if (v40 == v39)
  {
    (*(void (**)(void *))(v39[0] + 32))(v39);
  }
  else if (v40)
  {
    (*(void (**)(void))(*v40 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v21);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void))(*v19 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v15);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v28);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void))(*v26 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v35);
  uint64_t result = v33;
  if (v33 == v32) {
    return (void *)(*(uint64_t (**)(void *))(v32[0] + 32))(v32);
  }
  if (v33) {
    return (void *)(*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

void sub_1925C62E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::IF *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v49, (char *)a2 + 8, this);
  nitro::impl::nitro_lazy_eval::exec_function_body(v42, this, (char *)a2 + 16);
  nitro::impl::nitro_lazy_eval::exec_function_body(v35, this, (char *)a2 + 40);
  uint64_t v6 = (uint64_t)v50;
  if (!v50) {
    goto LABEL_4;
  }
  if (v50 != v49)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v50 + 16))();
LABEL_4:
    uint64_t v15 = (void *)v6;
    goto LABEL_6;
  }
  uint64_t v15 = v14;
  (*(void (**)(void *, void *))(v49[0] + 24))(v49, v14);
LABEL_6:
  __int16 v16 = v51;
  uint64_t v17 = v52;
  uint64_t v18 = v53;
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = v54;
  unsigned __int8 v20 = v55;
  if (v55 - 2 < 4 || v55 == 9) {
    atomic_fetch_add(v19, 1uLL);
  }
  uint64_t v7 = (uint64_t)v43;
  if (!v43) {
    goto LABEL_14;
  }
  if (v43 != v42)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v43 + 16))();
LABEL_14:
    unsigned __int8 v22 = (unsigned char *)v7;
    goto LABEL_16;
  }
  unsigned __int8 v22 = v21;
  (*(void (**)(void *, unsigned char *))(v42[0] + 24))(v42, v21);
LABEL_16:
  __int16 v23 = v44;
  uint64_t v24 = v45;
  uint64_t v25 = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = v47;
  unsigned __int8 v27 = v48;
  if (v48 - 2 < 4 || v48 == 9) {
    atomic_fetch_add(v26, 1uLL);
  }
  uint64_t v8 = (uint64_t)v36;
  if (!v36) {
    goto LABEL_24;
  }
  if (v36 != v35)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v36 + 16))();
LABEL_24:
    uint64_t v29 = (uint64_t *)v8;
    goto LABEL_26;
  }
  uint64_t v29 = &v28;
  (*(void (**)(void *))(v35[0] + 24))(v35);
LABEL_26:
  __int16 v30 = v37;
  uint64_t v31 = v38;
  uint64_t v32 = v39;
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v40;
  unsigned __int8 v34 = v41;
  if (v41 - 2 < 4 || v41 == 9) {
    atomic_fetch_add(v33, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::$_0((uint64_t)v56, (uint64_t)v14);
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = operator new(0xE0uLL);
  uint64_t v10 = v9;
  void *v9 = &unk_1EE37A6A0;
  if (v57)
  {
    if (v57 == v56)
    {
      v9[4] = v9 + 1;
      (*(void (**)(void *))(v56[0] + 24))(v56);
    }
    else
    {
      v9[4] = v57;
      unsigned __int8 v57 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  *((_WORD *)v10 + 20) = v58;
  *((_OWORD *)v10 + 3) = v59;
  long long v59 = 0uLL;
  unsigned char v10[8] = v60;
  *((unsigned char *)v10 + 72) = v61;
  char v61 = 0;
  uint64_t v11 = v63;
  if (v63)
  {
    if (v63 == &v62)
    {
      v10[13] = v10 + 10;
      (*(void (**)(uint64_t *))(*v11 + 24))(v11);
    }
    else
    {
      v10[13] = v63;
      uint64_t v63 = 0;
    }
  }
  else
  {
    v10[13] = 0;
  }
  *((_WORD *)v10 + 56) = v64;
  *(_OWORD *)(v10 + 15) = v65;
  long long v65 = 0uLL;
  v10[17] = v66;
  *((unsigned char *)v10 + 144) = v67;
  char v67 = 0;
  uint64_t v12 = v69;
  if (v69)
  {
    if (v69 == &v68)
    {
      v10[22] = v10 + 19;
      (*(void (**)(uint64_t *))(*v12 + 24))(v12);
    }
    else
    {
      v10[22] = v69;
      uint64_t v69 = 0;
    }
  }
  else
  {
    v10[22] = 0;
  }
  *((_WORD *)v10 + 92) = v70;
  *((_OWORD *)v10 + 12) = v71;
  long long v71 = 0uLL;
  v10[26] = v72;
  *((unsigned char *)v10 + 216) = v73;
  char v73 = 0;
  *(void *)(a3 + 24) = v10;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(v56);
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(v14);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v38);
  if (v36 == v35)
  {
    (*(void (**)(void *))(v35[0] + 32))(v35);
  }
  else if (v36)
  {
    (*(void (**)(void))(*v36 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v45);
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
  }
  else if (v43)
  {
    (*(void (**)(void))(*v43 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v52);
  uint64_t result = v50;
  if (v50 == v49) {
    return (void *)(*(uint64_t (**)(void *))(v49[0] + 32))(v49);
  }
  if (v50) {
    return (void *)(*(uint64_t (**)(void))(*v50 + 40))();
  }
  return result;
}

void sub_1925C69E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec(nitro::ir::IF const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1 + 18;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 23));
  uint64_t v3 = (void *)a1[21];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  uint64_t v4 = (void *)a1[12];
  if (v4 == a1 + 9)
  {
    (*(void (**)(void *))(a1[9] + 32))(a1 + 9);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  size_t v5 = (void *)a1[3];
  if (v5 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::INDEXGET *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v30, (char *)a2 + 8, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v23, (char *)a2 + 16, this);
  uint64_t v6 = (uint64_t)v31;
  if (!v31) {
    goto LABEL_4;
  }
  if (v31 != v30)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v31 + 16))();
LABEL_4:
    uint64_t v12 = (void *)v6;
    goto LABEL_6;
  }
  uint64_t v12 = v11;
  (*(void (**)(void *, void *))(v30[0] + 24))(v30, v11);
LABEL_6:
  __int16 v13 = v32;
  v14[0] = v33;
  v14[1] = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v35;
  unsigned __int8 v16 = v36;
  if (v36 - 2 < 4 || v36 == 9) {
    atomic_fetch_add(v15, 1uLL);
  }
  uint64_t v7 = (uint64_t)v24;
  if (!v24) {
    goto LABEL_14;
  }
  if (v24 != v23)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v24 + 16))();
LABEL_14:
    uint64_t v18 = (void *)v7;
    goto LABEL_16;
  }
  uint64_t v18 = v17;
  (*(void (**)(void *, void *))(v23[0] + 24))(v23, v17);
LABEL_16:
  __int16 v19 = v25;
  v20[0] = v26;
  v20[1] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v28;
  unsigned __int8 v22 = v29;
  if (v29 - 2 < 4 || v29 == 9) {
    atomic_fetch_add(v21, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXGET const&)::$_0::$_0((uint64_t)v37, (uint64_t)v11);
  *(void *)(a3 + 24) = 0;
  uint64_t v8 = operator new(0x98uLL);
  uint64_t v9 = v8;
  void *v8 = &unk_1EE37ACD0;
  if (v38)
  {
    if (v38 == v37)
    {
      v8[4] = v8 + 1;
      (*(void (**)(void *))(v37[0] + 24))(v37);
    }
    else
    {
      v8[4] = v38;
      uint64_t v38 = 0;
    }
  }
  else
  {
    v8[4] = 0;
  }
  *((_WORD *)v9 + 20) = v39;
  *((_OWORD *)v9 + 3) = v40;
  long long v40 = 0uLL;
  v9[8] = v41;
  *((unsigned char *)v9 + 72) = v42;
  char v42 = 0;
  if (v44)
  {
    if (v44 == v43)
    {
      v9[13] = v9 + 10;
      (*(void (**)(void))(v43[0] + 24))();
    }
    else
    {
      v9[13] = v44;
      __int16 v44 = 0;
    }
  }
  else
  {
    v9[13] = 0;
  }
  *((_WORD *)v9 + 56) = v45;
  *(_OWORD *)(v9 + 15) = v46;
  long long v46 = 0uLL;
  v9[17] = v47;
  *((unsigned char *)v9 + 144) = v48;
  char v48 = 0;
  *(void *)(a3 + 24) = v9;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v46);
  if (v44 == v43)
  {
    (*(void (**)(void *))(v43[0] + 32))(v43);
  }
  else if (v44)
  {
    (*(void (**)(void))(*v44 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v40);
  if (v38 == v37)
  {
    (*(void (**)(void *))(v37[0] + 32))(v37);
  }
  else if (v38)
  {
    (*(void (**)(void))(*v38 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v20);
  if (v18 == v17)
  {
    (*(void (**)(void *))(v17[0] + 32))(v17);
  }
  else if (v18)
  {
    (*(void (**)(void))(*v18 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v14);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v26);
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
  }
  else if (v24)
  {
    (*(void (**)(void))(*v24 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v33);
  uint64_t result = v31;
  if (v31 == v30) {
    return (void *)(*(uint64_t (**)(void *))(v30[0] + 32))(v30);
  }
  if (v31) {
    return (void *)(*(uint64_t (**)(void))(*v31 + 40))();
  }
  return result;
}

void sub_1925C7214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(a2 + 1, this, v40);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v33, a2 + 2, this);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v26, a2 + 3, this);
  uint64_t v6 = (uint64_t)v41;
  if (!v41) {
    goto LABEL_4;
  }
  if (v41 != v40)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v41 + 16))();
LABEL_4:
    __int16 v13 = (void *)v6;
    goto LABEL_6;
  }
  __int16 v13 = v12;
  (*(void (**)(void *, void *))(v40[0] + 24))(v40, v12);
LABEL_6:
  uint64_t v7 = (uint64_t)v34;
  if (!v34)
  {
LABEL_9:
    uint64_t v15 = (void *)v7;
    goto LABEL_11;
  }
  if (v34 != v33)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v34 + 16))();
    goto LABEL_9;
  }
  uint64_t v15 = v14;
  (*(void (**)(void *, void *))(v33[0] + 24))(v33, v14);
LABEL_11:
  __int16 v16 = v35;
  v17[0] = v36;
  v17[1] = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = v38;
  unsigned __int8 v19 = v39;
  if (v39 - 2 < 4 || v39 == 9) {
    atomic_fetch_add(v18, 1uLL);
  }
  uint64_t v8 = (uint64_t)v27;
  if (!v27) {
    goto LABEL_19;
  }
  if (v27 != v26)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*v27 + 16))();
LABEL_19:
    uint64_t v21 = (void *)v8;
    goto LABEL_21;
  }
  uint64_t v21 = v20;
  (*(void (**)(void *, void *))(v26[0] + 24))(v26, v20);
LABEL_21:
  __int16 v22 = v28;
  v23[0] = v29;
  v23[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = v31;
  unsigned __int8 v25 = v32;
  if (v32 - 2 < 4 || v32 == 9) {
    atomic_fetch_add(v24, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::$_0((uint64_t)v42, (uint64_t)v12);
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = operator new(0xB8uLL);
  uint64_t v10 = v9;
  void *v9 = &unk_1EE37AD28;
  if (v43)
  {
    if (v43 == v42)
    {
      v9[4] = v9 + 1;
      (*(void (**)(void *))(v42[0] + 24))(v42);
    }
    else
    {
      v9[4] = v43;
      uint64_t v43 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  if (v45)
  {
    if (v45 == v44)
    {
      unsigned char v10[8] = v10 + 5;
      (*(void (**)(void))(v44[0] + 24))();
    }
    else
    {
      unsigned char v10[8] = v45;
      __int16 v45 = 0;
    }
  }
  else
  {
    unsigned char v10[8] = 0;
  }
  *((_WORD *)v10 + 36) = v46;
  *((_OWORD *)v10 + 5) = v47;
  long long v47 = 0uLL;
  v10[12] = v48;
  *((unsigned char *)v10 + 104) = v49;
  char v49 = 0;
  if (v51)
  {
    if (v51 == v50)
    {
      v10[17] = v10 + 14;
      (*(void (**)(void))(v50[0] + 24))();
    }
    else
    {
      v10[17] = v51;
      __int16 v51 = 0;
    }
  }
  else
  {
    v10[17] = 0;
  }
  *((_WORD *)v10 + 72) = v52;
  *(_OWORD *)(v10 + 19) = v53;
  long long v53 = 0uLL;
  v10[21] = v54;
  *((unsigned char *)v10 + 176) = v55;
  char v55 = 0;
  *(void *)(a3 + 24) = v10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v53);
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void))(*v51 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v47);
  if (v45 == v44)
  {
    (*(void (**)(void *))(v44[0] + 32))(v44);
  }
  else if (v45)
  {
    (*(void (**)(void))(*v45 + 40))();
  }
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
  }
  else if (v43)
  {
    (*(void (**)(void))(*v43 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v23);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v17);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void))(*v15 + 40))();
  }
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v29);
  if (v27 == v26)
  {
    (*(void (**)(void *))(v26[0] + 32))(v26);
  }
  else if (v27)
  {
    (*(void (**)(void))(*v27 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v36);
  if (v34 == v33)
  {
    (*(void (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    (*(void (**)(void))(*v34 + 40))();
  }
  uint64_t result = v41;
  if (v41 == v40) {
    return (void *)(*(uint64_t (**)(void *))(v40[0] + 32))(v40);
  }
  if (v41) {
    return (void *)(*(uint64_t (**)(void))(*v41 + 40))();
  }
  return result;
}

{
  char *v6;
  void *v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *result;
  uint64_t v17;
  void *v18;
  void *v19;
  void v20[3];
  void *v21;
  void v22[3];
  void *v23;
  __int16 v24;
  void v25[2];
  atomic_ullong *v26;
  unsigned __int8 v27;
  void v28[3];
  void *v29;
  void v30[3];
  void *v31;
  __int16 v32;
  void v33[2];
  atomic_ullong *v34;
  unsigned __int8 v35;
  void v36[3];
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  atomic_ullong *v41;
  unsigned __int8 v42;
  void v43[3];
  void *v44;
  void *v45[2];
  char v46;
  void **v47;
  void v48[3];
  void *v49;
  __int16 v50;
  long long v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)(a2 + 1);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(a2 + 1, this, v43);
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v36, a2 + 2, this);
  (*(void (**)(void **__return_ptr))(**(void **)v6 + 16))(v45);
  if (v46 < 0)
  {
    if (v45[1] != (void *)6)
    {
      operator delete(v45[0]);
      uint64_t v8 = v44;
      if (!v44) {
        goto LABEL_10;
      }
LABEL_8:
      if (v8 == v43)
      {
        uint64_t v21 = v20;
        (*(void (**)(void *, void *))(v43[0] + 24))(v43, v20);
LABEL_24:
        uint64_t v12 = (uint64_t)v37;
        if (v37)
        {
          if (v37 == v36)
          {
            __int16 v23 = v22;
            (*(void (**)(void *, void *))(v36[0] + 24))(v36, v22);
LABEL_29:
            uint64_t v24 = v38;
            v25[0] = v39;
            v25[1] = v40;
            if (v40) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v26 = v41;
            uint64_t v27 = v42;
            if (v42 - 2 < 4 || v42 == 9) {
              atomic_fetch_add(v26, 1uLL);
            }
            nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_1::$_1((uint64_t)v45, (uint64_t)v20);
            *(void *)(a3 + 24) = 0;
            __int16 v13 = operator new(0x70uLL);
            __int16 v14 = v13;
            *__int16 v13 = &unk_1EE37AA68;
            if (v47)
            {
              if (v47 == v45)
              {
                v13[4] = v13 + 1;
                (*((void (**)(void **))v45[0] + 3))(v45);
              }
              else
              {
                v13[4] = v47;
                long long v47 = 0;
              }
            }
            else
            {
              v13[4] = 0;
            }
            if (v49)
            {
              if (v49 == v48)
              {
                v14[8] = v14 + 5;
                (*(void (**)(void))(v48[0] + 24))();
              }
              else
              {
                v14[8] = v49;
                char v49 = 0;
              }
            }
            else
            {
              v14[8] = 0;
            }
            *((_WORD *)v14 + 36) = v50;
            *((_OWORD *)v14 + 5) = v51;
            __int16 v51 = 0uLL;
            v14[12] = v52;
            *((unsigned char *)v14 + 104) = v53;
            long long v53 = 0;
            *(void *)(a3 + 24) = v14;
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v51);
            if (v49 == v48)
            {
              (*(void (**)(void *))(v48[0] + 32))(v48);
            }
            else if (v49)
            {
              (*(void (**)(void))(*v49 + 40))();
            }
            if (v47 == v45)
            {
              (*((void (**)(void **))v45[0] + 4))(v45);
            }
            else if (v47)
            {
              (*((void (**)(void))*v47 + 5))();
            }
            *(_WORD *)(a3 + 32) = 0;
            *(void *)(a3 + 48) = 0;
            *(void *)(a3 + 56) = 0;
            *(void *)(a3 + 40) = 0;
            *(unsigned char *)(a3 + 64) = 0;
            nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v25);
            if (v23 == v22)
            {
              (*(void (**)(void *))(v22[0] + 32))(v22);
            }
            else if (v23)
            {
              (*(void (**)(void))(*v23 + 40))();
            }
            uint64_t v15 = v21;
            if (v21 == v20)
            {
              (*(void (**)(void *))(v20[0] + 32))(v20);
              goto LABEL_61;
            }
            goto LABEL_58;
          }
          uint64_t v12 = (*(uint64_t (**)(void))(*v37 + 16))();
        }
        __int16 v23 = (void *)v12;
        goto LABEL_29;
      }
      uint64_t v8 = (void *)(*(uint64_t (**)(void *))(*v8 + 16))(v8);
LABEL_10:
      uint64_t v21 = v8;
      goto LABEL_24;
    }
    uint64_t v10 = *(_DWORD *)v45[0] != 1112360269 || *((_WORD *)v45[0] + 2) != 21061;
    operator delete(v45[0]);
    if (v10)
    {
LABEL_7:
      uint64_t v8 = v44;
      if (!v44) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
  }
  else
  {
    if (v46 != 6) {
      goto LABEL_7;
    }
    if (LODWORD(v45[0]) != 1112360269 || WORD2(v45[0]) != 21061) {
      goto LABEL_7;
    }
  }
  uint64_t v11 = (uint64_t)v44;
  if (!v44) {
    goto LABEL_22;
  }
  if (v44 != v43)
  {
    uint64_t v11 = (*(uint64_t (**)(void *))(*v44 + 16))(v44);
LABEL_22:
    uint64_t v29 = (void *)v11;
    goto LABEL_73;
  }
  uint64_t v29 = v28;
  (*(void (**)(void *, void *))(v43[0] + 24))(v43, v28);
LABEL_73:
  uint64_t v17 = (uint64_t)v37;
  if (!v37)
  {
LABEL_76:
    uint64_t v31 = (void *)v17;
    goto LABEL_78;
  }
  if (v37 != v36)
  {
    uint64_t v17 = (*(uint64_t (**)(void))(*v37 + 16))();
    goto LABEL_76;
  }
  uint64_t v31 = v30;
  (*(void (**)(void *, void *))(v36[0] + 24))(v36, v30);
LABEL_78:
  unsigned __int8 v32 = v38;
  v33[0] = v39;
  v33[1] = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = v41;
  __int16 v35 = v42;
  if (v42 - 2 < 4 || v42 == 9) {
    atomic_fetch_add(v34, 1uLL);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::$_0((uint64_t)v45, (uint64_t)v28);
  *(void *)(a3 + 24) = 0;
  uint64_t v18 = operator new(0x70uLL);
  unsigned __int8 v19 = v18;
  atomic_ullong *v18 = &unk_1EE37AA10;
  if (v47)
  {
    if (v47 == v45)
    {
      v18[4] = v18 + 1;
      (*((void (**)(void **))v45[0] + 3))(v45);
    }
    else
    {
      v18[4] = v47;
      long long v47 = 0;
    }
  }
  else
  {
    v18[4] = 0;
  }
  if (v49)
  {
    if (v49 == v48)
    {
      v19[8] = v19 + 5;
      (*(void (**)(void))(v48[0] + 24))();
    }
    else
    {
      v19[8] = v49;
      char v49 = 0;
    }
  }
  else
  {
    v19[8] = 0;
  }
  *((_WORD *)v19 + 36) = v50;
  *((_OWORD *)v19 + 5) = v51;
  __int16 v51 = 0uLL;
  v19[12] = v52;
  *((unsigned char *)v19 + 104) = v53;
  long long v53 = 0;
  *(void *)(a3 + 24) = v19;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v51);
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void))(*v49 + 40))();
  }
  if (v47 == v45)
  {
    (*((void (**)(void **))v45[0] + 4))(v45);
  }
  else if (v47)
  {
    (*((void (**)(void))*v47 + 5))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v33);
  if (v31 == v30)
  {
    (*(void (**)(void *))(v30[0] + 32))(v30);
  }
  else if (v31)
  {
    (*(void (**)(void))(*v31 + 40))();
  }
  uint64_t v15 = v29;
  if (v29 == v28)
  {
    (*(void (**)(void *))(v28[0] + 32))(v28);
    goto LABEL_61;
  }
LABEL_58:
  if (v15) {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
LABEL_61:
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v39);
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
  }
  else if (v37)
  {
    (*(void (**)(void))(*v37 + 40))();
  }
  uint64_t result = v44;
  if (v44 == v43) {
    return (void *)(*(uint64_t (**)(void *))(v43[0] + 32))(v43);
  }
  if (v44) {
    return (void *)(*(uint64_t (**)(void))(*v44 + 40))();
  }
  return result;
}

void sub_1925C7B18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::function<nitro::nitro_variable & ()(nitro::impl::nitro_eval &)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *nitro::impl::nitro_lazy_eval::exec(nitro::ir::INDEXPUT const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1 + 13;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 18));
  uint64_t v3 = (void *)a1[16];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  uint64_t v4 = (void *)a1[7];
  if (v4 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  size_t v5 = (void *)a1[3];
  if (v5 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void sub_1925C87D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec(nitro::ir::ASSIGN const&)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1 + 4;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 9));
  uint64_t v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::DICT *a2@<X1>, uint64_t a3@<X8>)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v24 = 0;
  unsigned __int8 v25 = 0;
  __int16 v23 = 0;
  uint64_t v6 = v4 - v5;
  if (v6)
  {
    if ((unint64_t)v6 >= 0x1C71C71C71C71C71) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = a3;
    uint64_t v9 = v6 >> 4;
    size_t v10 = 144 * (v6 >> 4);
    __int16 v23 = operator new(v10);
    unsigned __int8 v25 = (char *)v23 + 144 * v9;
    size_t v11 = 144 * ((v10 - 144) / 0x90) + 144;
    bzero(v23, v11);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v24 = (char *)v23 + v11;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v36, *((void *)a2 + 1) + v13, this);
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v33, *((void *)a2 + 1) + v13 + 8, this);
      std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100]<nitro::impl::delayed_variable&,nitro::impl::delayed_variable&,0>((uint64_t)&v26, (uint64_t)v36, (uint64_t)v33);
      nitro::impl::delayed_variable::operator=((uint64_t)v23 + v12, (uint64_t)&v26);
      nitro::impl::delayed_variable::operator=((uint64_t)v23 + v12 + 72, (uint64_t)v30);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v32);
      if (v31 == v30)
      {
        (*(void (**)(void *))(v30[0] + 32))(v30);
      }
      else if (v31)
      {
        (*(void (**)(void))(*v31 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v29);
      if (v28 == &v26)
      {
        (*(void (**)(long long *))(v26 + 32))(&v26);
      }
      else if (v28)
      {
        (*(void (**)(void))(*(void *)v28 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v35);
      if (v34 == v33)
      {
        (*(void (**)(void *))(v33[0] + 32))(v33);
      }
      else if (v34)
      {
        (*(void (**)(void))(*v34 + 40))();
      }
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v38);
      if (v37 == v36)
      {
        (*(void (**)(void *))(v36[0] + 32))(v36);
      }
      else if (v37)
      {
        (*(void (**)(void))(*v37 + 40))();
      }
      ++v14;
      uint64_t v15 = v23;
      uint64_t v16 = (uint64_t)v24;
      unint64_t v17 = 0x8E38E38E38E38E39 * ((v24 - (unsigned char *)v23) >> 4);
      v13 += 16;
      v12 += 144;
    }
    while (v14 < v17);
    a3 = v19;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    unint64_t v17 = 0;
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__init_with_size[abi:ne180100]<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)&__p, (uint64_t)v15, v16, v17);
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__init_with_size[abi:ne180100]<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*,std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>*>((uint64_t)&v26, (uint64_t)__p, v21, 0x8E38E38E38E38E39 * ((v21 - (uint64_t)__p) >> 4));
  *(void *)(a3 + 24) = 0;
  uint64_t v18 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v18 = &unk_1EE37A800;
  *(_OWORD *)(v18 + 8) = v26;
  *((void *)v18 + 3) = v27;
  *(void *)(a3 + 24) = v18;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  if (__p)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](&__p, (uint64_t)__p);
    operator delete(__p);
  }
  if (v23)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](&v23, (uint64_t)v23);
    operator delete(v23);
  }
}

void sub_1925C8E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (__p)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](&__p, (uint64_t)__p);
    operator delete(__p);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0(&a11);
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0((uint64_t *)&a14);
  _Unwind_Resume(a1);
}

uint64_t *nitro::impl::nitro_lazy_eval::exec(nitro::ir::DICT const&)::$_0::~$_0(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>>::__base_destruct_at_end[abi:ne180100](a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::LIST *a2@<X1>, uint64_t a3@<X8>)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  std::vector<nitro::impl::delayed_variable>::vector(&v23, (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  if (v24 != v23)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v25, *((void *)a2 + 1) + v7, this);
      nitro::impl::delayed_variable::operator=((uint64_t)v23 + v6, (uint64_t)&v25);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      if (v27 == &v25)
      {
        (*(void (**)(long long *))(v25 + 32))(&v25);
      }
      else if (v27)
      {
        (*(void (**)(void))(*(void *)v27 + 40))();
      }
      ++v8;
      v7 += 8;
      v6 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v24 - (unsigned char *)v23) >> 3));
  }
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v23);
  std::vector<nitro::impl::delayed_variable>::vector(&v25, (uint64_t *)&__p);
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v9 = &unk_1EE37A858;
  *(_OWORD *)(v9 + 8) = v25;
  *((void *)v9 + 3) = v26;
  *(void *)(a3 + 24) = v9;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  size_t v10 = (char *)__p;
  if (__p)
  {
    size_t v11 = __p;
    if (v22 != __p)
    {
      uint64_t v12 = v22 - 72;
      uint64_t v13 = v22 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v13 + 40));
        uint64_t v15 = (char *)*((void *)v13 + 3);
        if (v13 == v15)
        {
          (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(char *))(*(void *)v15 + 40))(v15);
        }
        v12 -= 72;
        BOOL v14 = v13 == v10;
        v13 -= 72;
      }
      while (!v14);
      size_t v11 = __p;
    }
    uint64_t v22 = v10;
    operator delete(v11);
  }
  uint64_t v16 = v23;
  if (v23)
  {
    unint64_t v17 = v23;
    if (v24 != v23)
    {
      uint64_t v18 = v24 - 72;
      uint64_t v19 = v24 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 + 5));
        unsigned __int8 v20 = (void *)v19[3];
        if (v19 == v20)
        {
          (*(void (**)(void *))(*v19 + 32))(v19);
        }
        else if (v20)
        {
          (*(void (**)(void *))(*v20 + 40))(v20);
        }
        v18 -= 72;
        BOOL v14 = v19 == v16;
        v19 -= 9;
      }
      while (!v14);
      unint64_t v17 = v23;
    }
    uint64_t v24 = v16;
    operator delete(v17);
  }
}

void sub_1925C924C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a15, a15);
  }
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a9);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

void nitro::impl::nitro_lazy_eval::exec(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::TUPLE *a2@<X1>, uint64_t a3@<X8>)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  std::vector<nitro::impl::delayed_variable>::vector(&v23, (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  if (v24 != v23)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(&v25, *((void *)a2 + 1) + v7, this);
      nitro::impl::delayed_variable::operator=((uint64_t)v23 + v6, (uint64_t)&v25);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v28);
      if (v27 == &v25)
      {
        (*(void (**)(long long *))(v25 + 32))(&v25);
      }
      else if (v27)
      {
        (*(void (**)(void))(*(void *)v27 + 40))();
      }
      ++v8;
      v7 += 8;
      v6 += 72;
    }
    while (v8 < 0x8E38E38E38E38E39 * ((v24 - (unsigned char *)v23) >> 3));
  }
  std::vector<nitro::impl::delayed_variable>::vector(&__p, (uint64_t *)&v23);
  std::vector<nitro::impl::delayed_variable>::vector(&v25, (uint64_t *)&__p);
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v9 = &unk_1EE37A960;
  *(_OWORD *)(v9 + 8) = v25;
  *((void *)v9 + 3) = v26;
  *(void *)(a3 + 24) = v9;
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  size_t v10 = (char *)__p;
  if (__p)
  {
    size_t v11 = __p;
    if (v22 != __p)
    {
      uint64_t v12 = v22 - 72;
      uint64_t v13 = v22 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v13 + 40));
        uint64_t v15 = (char *)*((void *)v13 + 3);
        if (v13 == v15)
        {
          (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        }
        else if (v15)
        {
          (*(void (**)(char *))(*(void *)v15 + 40))(v15);
        }
        v12 -= 72;
        BOOL v14 = v13 == v10;
        v13 -= 72;
      }
      while (!v14);
      size_t v11 = __p;
    }
    uint64_t v22 = v10;
    operator delete(v11);
  }
  uint64_t v16 = v23;
  if (v23)
  {
    unint64_t v17 = v23;
    if (v24 != v23)
    {
      uint64_t v18 = v24 - 72;
      uint64_t v19 = v24 - 72;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v19 + 5));
        unsigned __int8 v20 = (void *)v19[3];
        if (v19 == v20)
        {
          (*(void (**)(void *))(*v19 + 32))(v19);
        }
        else if (v20)
        {
          (*(void (**)(void *))(*v20 + 40))(v20);
        }
        v18 -= 72;
        BOOL v14 = v19 == v16;
        v19 -= 9;
      }
      while (!v14);
      unint64_t v17 = v23;
    }
    uint64_t v24 = v16;
    operator delete(v17);
  }
}

void sub_1925C9730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    nitro::impl::nitro_lazy_eval::exec_function_body((uint64_t)&a15, a15);
  }
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a9);
  nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0::~$_0(&a12);
  _Unwind_Resume(a1);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::TUPLEGET *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v19, (char *)a2 + 8, this);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = (uint64_t)v20;
  if (!v20) {
    goto LABEL_4;
  }
  if (v20 != v19)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v20 + 16))();
LABEL_4:
    uint64_t v13 = (void *)v6;
    goto LABEL_6;
  }
  uint64_t v13 = v12;
  (*(void (**)(void *, void *))(v19[0] + 24))(v19, v12);
LABEL_6:
  __int16 v14 = v21;
  long long v15 = v22;
  if (*((void *)&v22 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v23;
  unsigned __int8 v17 = v24;
  if (v24 - 2 < 4 || v24 == 9) {
    atomic_fetch_add(v16, 1uLL);
  }
  uint64_t v18 = v5;
  uint64_t v7 = (uint64_t)v13;
  if (!v13) {
    goto LABEL_14;
  }
  if (v13 != v12)
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_14:
    uint64_t v26 = (void *)v7;
    goto LABEL_16;
  }
  uint64_t v26 = v25;
  (*(void (**)(void *, void *))(v12[0] + 24))(v12, v25);
LABEL_16:
  __int16 v27 = v14;
  long long v28 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v29 = v16;
  unsigned __int8 v30 = v17;
  if (v17 - 2 < 4 || v17 == 9) {
    atomic_fetch_add(v16, 1uLL);
  }
  uint64_t v8 = v18;
  uint64_t v31 = v18;
  *(void *)(a3 + 24) = 0;
  uint64_t v9 = operator new(0x58uLL);
  size_t v10 = v9;
  void *v9 = &unk_1EE37AD80;
  if (v26)
  {
    if (v26 == v25)
    {
      v9[4] = v9 + 1;
      (*(void (**)(void *))(v25[0] + 24))(v25);
      uint64_t v8 = v31;
    }
    else
    {
      v9[4] = v26;
      uint64_t v26 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  *((_WORD *)v10 + 20) = v27;
  *((_OWORD *)v10 + 3) = v28;
  long long v28 = 0uLL;
  unsigned char v10[8] = v29;
  *((unsigned char *)v10 + 72) = v30;
  unsigned __int8 v30 = 0;
  v10[10] = v8;
  *(void *)(a3 + 24) = v10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v28);
  if (v26 == v25)
  {
    (*(void (**)(void *))(v25[0] + 32))(v25);
  }
  else if (v26)
  {
    (*(void (**)(void))(*v26 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v15);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void))(*v13 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v22);
  uint64_t result = v20;
  if (v20 == v19) {
    return (void *)(*(uint64_t (**)(void *))(v19[0] + 32))(v19);
  }
  if (v20) {
    return (void *)(*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

void sub_1925C9BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::impl::nitro_lazy_eval::exec@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::RETURN *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v15, (char *)a2 + 8, this);
  uint64_t v4 = (uint64_t)v16;
  if (!v16) {
    goto LABEL_4;
  }
  if (v16 != v15)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*v16 + 16))();
LABEL_4:
    size_t v10 = (void *)v4;
    goto LABEL_6;
  }
  size_t v10 = v9;
  (*(void (**)(void *, void *))(v15[0] + 24))(v15, v9);
LABEL_6:
  __int16 v11 = v17;
  long long v12 = v18;
  if (*((void *)&v18 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v19;
  unsigned __int8 v14 = v20;
  if (v20 - 2 < 4 || v20 == 9) {
    atomic_fetch_add(v13, 1uLL);
  }
  uint64_t v5 = (uint64_t)v10;
  if (!v10) {
    goto LABEL_14;
  }
  if (v10 != v9)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*v10 + 16))();
LABEL_14:
    long long v22 = (void *)v5;
    goto LABEL_16;
  }
  long long v22 = v21;
  (*(void (**)(void *, void *))(v9[0] + 24))(v9, v21);
LABEL_16:
  __int16 v23 = v11;
  long long v24 = v12;
  if (*((void *)&v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v25 = v13;
  unsigned __int8 v26 = v14;
  if (v14 - 2 < 4 || v14 == 9) {
    atomic_fetch_add(v13, 1uLL);
  }
  *(void *)(a3 + 24) = 0;
  uint64_t v6 = operator new(0x50uLL);
  uint64_t v7 = v6;
  void *v6 = &unk_1EE37AB70;
  if (v22)
  {
    if (v22 == v21)
    {
      v6[4] = v6 + 1;
      (*(void (**)(void *))(v21[0] + 24))(v21);
    }
    else
    {
      v6[4] = v22;
      long long v22 = 0;
    }
  }
  else
  {
    v6[4] = 0;
  }
  *((_WORD *)v7 + 20) = v23;
  *((_OWORD *)v7 + 3) = v24;
  long long v24 = 0uLL;
  v7[8] = v25;
  *((unsigned char *)v7 + 72) = v26;
  unsigned __int8 v26 = 0;
  *(void *)(a3 + 24) = v7;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v24);
  if (v22 == v21)
  {
    (*(void (**)(void *))(v21[0] + 32))(v21);
  }
  else if (v22)
  {
    (*(void (**)(void))(*v22 + 40))();
  }
  *(_WORD *)(a3 + 32) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v12);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v18);
  uint64_t result = v16;
  if (v16 == v15) {
    return (void *)(*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
  if (v16) {
    return (void *)(*(uint64_t (**)(void))(*v16 + 40))();
  }
  return result;
}

void sub_1925CA078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_reference_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>@<X0>(const nitro::ir::MEMBER **a1@<X0>, nitro::impl::nitro_lazy_eval *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (void *)(*(uint64_t (**)(const nitro::ir::MEMBER *))(*(void *)*a1 + 24))(*a1);
  switch((int)result)
  {
    case 0:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 1:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 2:
      uint64_t v7 = *((void *)*a1 + 1);
      *a3 = &unk_1EE37A018;
      a3[1] = v7;
      a3[3] = a3;
      break;
    case 3:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 4:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 5:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 6:
      uint64_t v8 = *a1;
      uint64_t result = nitro::impl::nitro_lazy_eval::exec_reference(a2, v8, (uint64_t)a3);
      break;
    case 7:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 8:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 9:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 10:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 11:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 12:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 13:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 14:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 15:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 16:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 17:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 18:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 19:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 20:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 21:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 22:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 23:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 24:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 25:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    case 26:
      nitro::impl::nitro_lazy_eval::exec_reference<nitro::ir::DEFVAR>(nitro::ir::DEFVAR const&)::{lambda(void)#1}::operator()();
    default:
      _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv();
  }
  return result;
}

void *nitro::impl::nitro_lazy_eval::exec_reference@<X0>(nitro::impl::nitro_lazy_eval *this@<X0>, const nitro::ir::MEMBER *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  nitro::syntax_tree_visit<nitro::impl::nitro_lazy_eval::exec_node(std::unique_ptr<nitro::ir::NODE> const&)::$_0>(v17, (char *)a2 + 8, this);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = (uint64_t)v18;
  if (!v18) {
    goto LABEL_4;
  }
  if (v18 != v17)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(*v18 + 16))();
LABEL_4:
    __int16 v11 = (void *)v6;
    goto LABEL_6;
  }
  __int16 v11 = v10;
  (*(void (**)(void *, void *))(v17[0] + 24))(v17, v10);
LABEL_6:
  __int16 v12 = v19;
  long long v13 = v20;
  if (*((void *)&v20 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v14 = v21;
  unsigned __int8 v15 = v22;
  if (v22 - 2 < 4 || v22 == 9) {
    atomic_fetch_add(v14, 1uLL);
  }
  uint64_t v16 = v5;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = operator new(0x58uLL);
  uint64_t v8 = v7;
  void *v7 = &unk_1EE379FC0;
  if (v11)
  {
    if (v11 == v10)
    {
      v7[4] = v7 + 1;
      (*(void (**)(void *))(v10[0] + 24))(v10);
      uint64_t v5 = v16;
    }
    else
    {
      v7[4] = v11;
      __int16 v11 = 0;
    }
  }
  else
  {
    v7[4] = 0;
  }
  *((_WORD *)v8 + 20) = v12;
  *((_OWORD *)v8 + 3) = v13;
  long long v13 = 0uLL;
  v8[8] = v14;
  *((unsigned char *)v8 + 72) = v15;
  unsigned __int8 v15 = 0;
  v8[10] = v5;
  *(void *)(a3 + 24) = v8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v13);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v20);
  uint64_t result = v18;
  if (v18 == v17) {
    return (void *)(*(uint64_t (**)(void *))(v17[0] + 32))(v17);
  }
  if (v18) {
    return (void *)(*(uint64_t (**)(void))(*v18 + 40))();
  }
  return result;
}

void sub_1925CA66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<nitro::impl::delayed_variable,nitro::impl::delayed_variable>::pair[abi:ne180100]<nitro::impl::delayed_variable&,nitro::impl::delayed_variable&,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v9 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v8 = v9;
    int v10 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v10;
    if ((v10 - 2) < 4 || v10 == 9) {
      atomic_fetch_add(*v8, 1uLL);
    }
  }
  uint64_t v11 = a1 + 72;
  uint64_t v12 = *(void *)(a3 + 24);
  if (!v12) {
    goto LABEL_14;
  }
  if (v12 != a3)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
LABEL_14:
    *(void *)(a1 + 96) = v12;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = v11;
  (*(void (**)(void, uint64_t))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24), a1 + 72);
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a3 + 32);
  uint64_t v13 = *(void *)(a3 + 48);
  *(void *)(a1 + 112) = *(void *)(a3 + 40);
  *(void *)(a1 + 120) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  unsigned __int8 v14 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (v11 != a3)
  {
    unsigned __int8 v15 = *(atomic_ullong **)(a3 + 56);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a3 + 64);
    *unsigned __int8 v14 = v15;
    int v16 = *(unsigned __int8 *)(a3 + 64);
    *(unsigned char *)(a1 + 136) = v16;
    if ((v16 - 2) < 4 || v16 == 9) {
      atomic_fetch_add(*v14, 1uLL);
    }
  }
  return a1;
}

void sub_1925CA8A4(_Unwind_Exception *a1)
{
  nitro::impl::delayed_variable::~delayed_variable(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1925CAB18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *std::vector<nitro::impl::delayed_variable>::__push_back_slow_path<nitro::impl::delayed_variable>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[72 * v3];
  uint64_t v9 = (void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 24);
  if (v10)
  {
    if (v10 == a2)
    {
      *((void *)v8 + 3) = v8;
      (*(void (**)(uint64_t, char *))(*(void *)a2 + 24))(a2, &v7[72 * v3]);
      goto LABEL_17;
    }
    *((void *)v8 + 3) = v10;
  }
  else
  {
    uint64_t v9 = v8 + 24;
  }
  void *v9 = 0;
LABEL_17:
  uint64_t v11 = &v7[72 * v6];
  uint64_t v12 = &v7[72 * v3];
  *((_WORD *)v12 + 16) = *(_WORD *)(a2 + 32);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v12 + 7) = *(void *)(a2 + 56);
  v12[64] = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a2 + 64) = 0;
  uint64_t v13 = v8 + 72;
  unsigned __int8 v15 = (char *)*a1;
  unsigned __int8 v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v8;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_34;
  }
  uint64_t v16 = 0;
  __int16 v17 = (char *)a1[1];
  do
  {
    unsigned __int8 v22 = &v8[v16];
    uint64_t v23 = &v14[v16];
    long long v24 = *(char **)&v14[v16 - 48];
    if (!v24)
    {
      long long v18 = v22 - 48;
LABEL_20:
      *(void *)long long v18 = 0;
      goto LABEL_21;
    }
    if (v23 - 72 != v24)
    {
      long long v18 = v17 - 48;
      *((void *)v22 - 6) = v24;
      goto LABEL_20;
    }
    *((void *)v22 - 6) = v22 - 72;
    (*(void (**)(void))(**((void **)v23 - 6) + 24))(*((void *)v23 - 6));
LABEL_21:
    v17 -= 72;
    __int16 v19 = &v8[v16];
    long long v20 = &v14[v16];
    *((_WORD *)v19 - 20) = *(_WORD *)&v14[v16 - 40];
    *((_OWORD *)v19 - 2) = *(_OWORD *)&v14[v16 - 32];
    *((void *)v20 - 4) = 0;
    *((void *)v20 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *(v19 - 8) = 0;
    uint64_t v21 = *(void *)&v14[v16 - 16];
    *(v19 - 8) = v14[v16 - 8];
    *((void *)v19 - 2) = v21;
    *(v19 - 8) = v14[v16 - 8];
    *(v20 - 8) = 0;
    v16 -= 72;
  }
  while (&v14[v16] != v15);
  unsigned __int8 v14 = (char *)*a1;
  long long v25 = (char *)a1[1];
  *a1 = &v8[v16];
  a1[1] = v13;
  a1[2] = v11;
  if (v25 == v14)
  {
    unsigned __int8 v14 = v25;
    if (v25) {
      goto LABEL_35;
    }
  }
  else
  {
    unsigned __int8 v26 = v25 - 72;
    uint64_t v27 = v25 - 72;
    do
    {
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v27 + 40));
      uint64_t v29 = (char *)*((void *)v27 + 3);
      if (v27 == v29)
      {
        (*(void (**)(char *))(*(void *)v27 + 32))(v27);
      }
      else if (v29)
      {
        (*(void (**)(char *))(*(void *)v29 + 40))(v29);
      }
      v26 -= 72;
      BOOL v28 = v27 == v14;
      v27 -= 72;
    }
    while (!v28);
LABEL_34:
    if (v14) {
LABEL_35:
    }
      operator delete(v14);
  }
  return v13;
}

void *std::vector<nitro::impl::delayed_variable>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x8E38E38E38E38E39 * (v6 >> 3);
    if (v7 >= 0x38E38E38E38E38FLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[72 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_1925CAEEC(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<nitro::impl::delayed_variable>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*,nitro::impl::delayed_variable*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7)
      {
        if (v6 == v7)
        {
          *(void *)(v4 + 24) = v4;
          (*(void (**)(void, uint64_t))(**(void **)(v6 + 24) + 24))(*(void *)(v6 + 24), v4);
          goto LABEL_10;
        }
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
      }
      *(void *)(v4 + 24) = v7;
LABEL_10:
      *(_WORD *)(v4 + 32) = *(_WORD *)(v6 + 32);
      *(void *)(v4 + 40) = *(void *)(v6 + 40);
      uint64_t v8 = *(void *)(v6 + 48);
      *(void *)(v4 + 48) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v4 + 56) = 0;
      uint64_t v9 = (atomic_ullong *volatile *)(v4 + 56);
      *(unsigned char *)(v4 + 64) = 0;
      if (v6 != v4)
      {
        uint64_t v10 = *(atomic_ullong **)(v6 + 56);
        *(unsigned char *)(v4 + 64) = *(unsigned char *)(v6 + 64);
        atomic_ullong *volatile *v9 = v10;
        int v11 = *(unsigned __int8 *)(v6 + 64);
        *(unsigned char *)(v4 + 64) = v11;
        if ((v11 - 2) < 4 || v11 == 9) {
          atomic_fetch_add(*v9, 1uLL);
        }
      }
      v6 += 72;
      uint64_t v4 = v13 + 72;
      v13 += 72;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1925CB070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nitro::impl::delayed_variable>,nitro::impl::delayed_variable*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void ***)(a1 + 16);
    uint64_t v4 = **(void ***)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v4;
        v6 -= 9;
      }
      while (!v7);
    }
  }
  return a1;
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A070;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A070;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    uint64_t v3 = (void *)a1[2];
    uint64_t v4 = (void *)a1[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)a1[1];
    }
    a1[2] = v2;
    operator delete(v4);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1EE37A070;
  std::vector<nitro::impl::delayed_variable>::vector(v2 + 1, v1);
  return v2;
}

void sub_1925CB3B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A070;
  return std::vector<nitro::impl::delayed_variable>::vector(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  if (v1)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v1;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v1;
    operator delete(v4);
  }
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    uint64_t v3 = (void *)__p[2];
    uint64_t v4 = (void *)__p[1];
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 9;
      uint64_t v6 = v3 - 9;
      do
      {
        nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(v6 + 5));
        uint64_t v8 = (void *)v6[3];
        if (v6 == v8)
        {
          (*(void (**)(void *))(*v6 + 32))(v6);
        }
        else if (v8)
        {
          (*(void (**)(void *))(*v8 + 40))(v8);
        }
        v5 -= 9;
        BOOL v7 = v6 == v2;
        v6 -= 9;
      }
      while (!v7);
      uint64_t v4 = (void *)__p[1];
    }
    __p[2] = v2;
    operator delete(v4);
  }

  operator delete(__p);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(_WORD *)(a2 + 17) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v5 != v6)
  {
    nitro::impl::delayed_variable::operator()(*(void *)(a1 + 8), (uint64_t)v12);
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v12);
    while (!*(unsigned char *)(a2 + 16))
    {
      if (*(void *)(a2 + 24))
      {
        v5 += 72;
        if (*(unsigned char *)(a2 + 17)) {
          BOOL v7 = 0;
        }
        else {
          BOOL v7 = *(unsigned char *)(a2 + 18) == 0;
        }
        if (!v7 || v5 == v6) {
          break;
        }
      }
      else
      {
        v5 += 72;
        if (v5 == v6) {
          break;
        }
      }
      nitro::impl::delayed_variable::operator()(v5, (uint64_t)v12);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v12);
    }
  }
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)a3 = *(void *)(a2 + 32);
  *(void *)(a3 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  if (a2 + 32 != a3)
  {
    uint64_t v10 = *(atomic_ullong **)(a2 + 48);
    *(void *)(a3 + 16) = v10;
    int v11 = *(unsigned __int8 *)(a2 + 56);
    *(unsigned char *)(a3 + 24) = v11;
    if ((v11 - 2) < 4 || v11 == 9) {
      atomic_fetch_add(v10, 1uLL);
    }
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS"
                     "2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_"
                                "2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval18exec_function_bodyERKNSt3__16vectorINS2_10unique_ptrINS_2ir4NODEENS2_14default_deleteIS6_EEEENS2_9allocatorIS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec_function_body(std::vector<std::unique_ptr<nitro::ir::NODE>> const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void _ZZN5nitro17syntax_tree_visitIZNS_4impl15nitro_lazy_eval9exec_nodeERKNSt3__110unique_ptrINS_2ir4NODEENS3_14default_deleteIS6_EEEEE3__0EEDTclfp0_cvNS5_6SYMBOLE_EEESB_T_ENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/syntax_tree_visit.hpp", "operator()", 38, 1);
    uint64_t v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    }
    uint64_t v6 = pthread_getspecific(started[74]);
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    }
    BOOL v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/syntax_tree_visit.hpp", "operator()", 38, "Unknown node type encountered in visitor", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
}

void nitro::impl::nitro_lazy_eval::exec<nitro::ir::DEFUN>(nitro::ir::DEFUN const&)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v3 = (file_logger *)global_logger();
    started = (pthread_key_t *)file_logger::start_stream(v3, 6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 83, 1);
    uint64_t v5 = pthread_getspecific(started[74]);
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Check failed: ", 14);
    }
    uint64_t v6 = pthread_getspecific(started[74]);
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"false", 5);
    }
    BOOL v7 = pthread_getspecific(started[74]);
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)":\n", 2);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
  log_dispatch<true>::exec(6, "Nitro/EspressoNitro/src/interpreter/nitro_lazy_eval_impl.hpp", "operator()", 83, "Node type not implemented", v0, v1, v2, v9);
  __print_back_trace();
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "assertion failure";
  __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
}

uint64_t log_dispatch<true>::exec(int a1, const char *a2, const char *a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unsigned __int8 v14 = global_logger();
  uint64_t result = file_logger::_log((uint64_t)v14, a1, a2, a3, a4, a5, &a9);
  if (a1 == 7)
  {
    __print_back_trace();
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "LOG_FATAL encountered";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EE37AAC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37AAC0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<D0>(uint64_t a1@<X0>, int8x8_t **a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 8);
  int8x8_t v7 = (*a2)[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *(void *)(a1 + 8);
      if (v5 >= *(void *)&v7) {
        unint64_t v9 = v5 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v9 = (*(void *)&v7 - 1) & v5;
    }
    uint64_t v10 = *(void **)(*(void *)*a2 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v5 == v12)
        {
          if (i[2] == v5) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= *(void *)&v7) {
              v12 %= *(void *)&v7;
            }
          }
          else
          {
            v12 &= *(void *)&v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x60uLL);
  unsigned __int8 v14 = (std::__shared_weak_count *)v13;
  *((void *)v13 + 1) = 0;
  unsigned __int8 v15 = (atomic_ullong *)(v13 + 8);
  *((void *)v13 + 2) = 0;
  *(void *)uint64_t v13 = &unk_1EE380EE0;
  uint64_t v16 = v13 + 24;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *((void *)v13 + 9) = 0;
  *((void *)v13 + 10) = 0;
  *((_DWORD *)v13 + 18) = 1065353216;
  *((void *)v13 + 11) = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 2, 1uLL, memory_order_relaxed);
  *((void *)v13 + 3) = v13 + 24;
  *((void *)v13 + 4) = v13;
  if (!atomic_fetch_add((atomic_ullong *volatile)v13 + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(char *))(*(void *)v13 + 16))(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  *(void *)&long long v21 = v16;
  *((void *)&v21 + 1) = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v17 = (uint64_t)*a2;
  long long v20 = v6;
  long long v18 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v17, v6, (uint64_t)&std::piecewise_construct, &v20);
  nitro::nitro_variable::operator=((uint64_t)(v18 + 24), &v21);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v21);
  if (!atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_21:
  double result = 0.0;
  *a3 = 0u;
  a3[1] = 0u;
  return result;
}

void sub_1925CBD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  if (!atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL)) {
    std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6DEFVAREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::DEFVAR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1EE37ABC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37ABC8;
  a2[1] = v2;
  return result;
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()@<X0>(uint64_t a1@<X0>, int8x8_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  double result = (char *)*a2;
  unint64_t v9 = *(void *)(a1 + 8);
  uint8x8_t v8 = (void *)(a1 + 8);
  unint64_t v7 = v9;
  int8x8_t v10 = (*a2)[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= *(void *)&v10) {
        unint64_t v12 = v7 % *(void *)&v10;
      }
    }
    else
    {
      unint64_t v12 = (*(void *)&v10 - 1) & v7;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)result + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v7)
        {
          if (i[2] == v7)
          {
            *(void *)a3 = i[3];
            uint64_t v34 = i[4];
            *(void *)(a3 + 8) = v34;
            if (v34) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)(a3 + 16) = 0;
            uint64_t v27 = (atomic_ullong *volatile *)(a3 + 16);
            *(unsigned char *)(a3 + 24) = 0;
            if (i + 3 != (uint64_t *)a3)
            {
              uint64_t v35 = (atomic_ullong *)i[5];
              *(unsigned char *)(a3 + 24) = *((unsigned char *)i + 48);
              *uint64_t v27 = v35;
              int v29 = *((unsigned __int8 *)i + 48);
              goto LABEL_32;
            }
            return result;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= *(void *)&v10) {
              v15 %= *(void *)&v10;
            }
          }
          else
          {
            v15 &= *(void *)&v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = a2[1];
  __int16 v19 = (int8x8_t *)v16[7];
  uint64_t v17 = v16 + 7;
  long long v18 = v19;
  if (v19)
  {
    long long v20 = v17;
    do
    {
      unint64_t v21 = (unint64_t)v18[4];
      BOOL v22 = v21 >= v7;
      if (v21 >= v7) {
        char v23 = (int8x8_t **)v18;
      }
      else {
        char v23 = (int8x8_t **)&v18[1];
      }
      if (v22) {
        long long v20 = v18;
      }
      long long v18 = *v23;
    }
    while (*v23);
    if (v20 != v17 && v7 >= *(void *)&v20[4])
    {
      *(int8x8_t *)a3 = v20[5];
      int8x8_t v30 = v20[6];
      *(int8x8_t *)(a3 + 8) = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v30 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a3 + 16) = 0;
      uint64_t v27 = (atomic_ullong *volatile *)(a3 + 16);
      *(unsigned char *)(a3 + 24) = 0;
      if (&v20[5] == (int8x8_t *)a3) {
        return result;
      }
      uint64_t v31 = (atomic_ullong *)v20[7];
      *(unsigned char *)(a3 + 24) = v20[8].i8[0];
      *uint64_t v27 = v31;
      int v32 = v20[8].u8[0];
      *(unsigned char *)(a3 + 24) = v32;
      if ((v32 - 2) >= 4 && v32 != 9) {
        return result;
      }
LABEL_43:
      atomic_fetch_add(*v27, 1uLL);
      return result;
    }
  }
  long long v37 = 0uLL;
  char v39 = 0;
  uint64_t v38 = 0;
  uint64_t v36 = v8;
  uint64_t v24 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)result, v8, (uint64_t)&std::piecewise_construct, &v36);
  nitro::nitro_variable::operator=((uint64_t)(v24 + 24), &v37);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v37);
  uint64_t v25 = (uint64_t)*a2;
  *(void *)&long long v37 = v8;
  double result = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25, v8, (uint64_t)&std::piecewise_construct, (void **)&v37);
  *(void *)a3 = *((void *)result + 3);
  uint64_t v26 = *((void *)result + 4);
  *(void *)(a3 + 8) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a3 + 16) = 0;
  uint64_t v27 = (atomic_ullong *volatile *)(a3 + 16);
  *(unsigned char *)(a3 + 24) = 0;
  if (result + 24 != (char *)a3)
  {
    BOOL v28 = (atomic_ullong *)*((void *)result + 5);
    *(unsigned char *)(a3 + 24) = result[48];
    *uint64_t v27 = v28;
    int v29 = result[48];
LABEL_32:
    *(unsigned char *)(a3 + 24) = v29;
    if ((v29 - 2) < 4 || v29 == 9) {
      goto LABEL_43;
    }
  }
  return result;
}

void sub_1925CC120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6SYMBOLEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::SYMBOL const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AB18;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37AB18;
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  JUMPOUT(0x192FF16B0);
}

char *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1EE37AB18;
  unint64_t v3 = v2 + 8;
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    goto LABEL_4;
  }
  if (v4 != a1 + 8)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v4 + 16))(v4, v3);
LABEL_4:
    *((void *)v2 + 4) = v4;
    goto LABEL_6;
  }
  *((void *)v2 + 4) = v3;
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
LABEL_6:
  *((_WORD *)v2 + 20) = *(_WORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  *((void *)v2 + 7) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v2 + 8) = 0;
  v2[72] = 0;
  if (v2 != (char *)a1)
  {
    *((void *)v2 + 8) = *(void *)(a1 + 64);
    int v6 = *(unsigned __int8 *)(a1 + 72);
    v2[72] = v6;
    if ((v6 - 2) < 4 || v6 == 9) {
      atomic_fetch_add(*((atomic_ullong *volatile *)v2 + 8), 1uLL);
    }
  }
  *((void *)v2 + 10) = *(void *)(a1 + 80);
  return v2;
}

void sub_1925CC434(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE37AB18;
  uint64_t v4 = a2 + 8;
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      *(void *)(a2 + 32) = v4;
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
      *(void *)(a2 + 32) = result;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
  }
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(void *)(a2 + 56) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 64) = 0;
  unint64_t v7 = (atomic_ullong *volatile *)(a2 + 64);
  *(unsigned char *)(a2 + 72) = 0;
  if (a2 != a1)
  {
    uint8x8_t v8 = *(atomic_ullong **)(a1 + 64);
    *(unsigned char *)(a2 + 72) = *(unsigned char *)(a1 + 72);
    atomic_ullong *volatile *v7 = v8;
    int v9 = *(unsigned __int8 *)(a1 + 72);
    *(unsigned char *)(a2 + 72) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  return result;
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 48));
  uint64_t result = *(void *)(a1 + 32);
  if (result == v2)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 32);
    return v5(v2);
  }
  else if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v4();
  }
  return result;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  uint64_t v2 = a1 + 1;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  unint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)&v13);
  uint64_t v4 = v13;
  if (!v13) {
    nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = *(void *)(a1 + 80);
  unint64_t v12 = &v11;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,nitro::nitro_variable>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,nitro::nitro_variable>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 16, &v11, (uint64_t)&std::piecewise_construct, &v12);
  *(void *)a2 = *((void *)v6 + 3);
  uint64_t v7 = *((void *)v6 + 4);
  *(void *)(a2 + 8) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v6 + 24 != (char *)a2)
  {
    uint8x8_t v8 = (atomic_ullong *)*((void *)v6 + 5);
    *(void *)(a2 + 16) = v8;
    int v9 = v6[48];
    *(unsigned char *)(a2 + 24) = v9;
    if ((v9 - 2) < 4 || v9 == 9) {
      atomic_fetch_add(v8, 1uLL);
    }
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&v13);
}

void sub_1925CC83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir6MEMBEREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::MEMBER const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::nitro_variable::instance(void)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_instance != nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint8x8_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      int v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        int8x8_t v10 = __p;
      }
      else {
        int8x8_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  nitro::nitro_variable::instance(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925CCB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::instance(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925CCCF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925CCD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925CCCFCLL);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    unint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925CCF14(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A1D0;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A1D0;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A1D0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925CD1FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A1D0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v104);
  if (*(void *)&v104[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = v105;
  uint64_t v5 = v106;
  unsigned int v6 = v106 - 2;
  BOOL v7 = v6 < 4 || v106 == 9;
  if (v7) {
    atomic_fetch_add(v105, 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v104);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v104);
  if (*(void *)&v104[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  int v8 = v105;
  uint64_t v9 = v106;
  unsigned int v10 = v106 - 2;
  if (v10 < 4)
  {
    atomic_fetch_add(v105, 1uLL);
LABEL_14:
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v104);
    if (!v7)
    {
      if (v9 == 9) {
        goto LABEL_21;
      }
      if (v6 > 3) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v106 != 9) {
    goto LABEL_14;
  }
  atomic_fetch_add(v105, 1uLL);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v104);
  if (v5 == 9)
  {
LABEL_16:
    atomic_fetch_add(v4, 1uLL);
LABEL_17:
    switch((int)v5)
    {
      case 0:
        uint64_t v12 = v9;
        double v11 = *(double *)&v4;
        switch(v12)
        {
          case 0:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = (char *)v4 + (void)v8;
            *(unsigned char *)(a2 + 24) = 0;
            return;
          case 1:
            double v16 = (double)(uint64_t)v8;
            goto LABEL_86;
          case 2:
            double v11 = *(double *)&v4;
            if (*v4 != 1) {
              operator new();
            }
            goto LABEL_58;
          case 3:
            uint64_t v27 = (float64x2_t *)v4[1];
            uint64_t v28 = v4[2] - (void)v27;
            if (!v28) {
              goto LABEL_95;
            }
            unint64_t v29 = v28 >> 3;
            double v30 = (double)(uint64_t)v8;
            if (v29 <= 1) {
              unint64_t v29 = 1;
            }
            if (v29 < 4)
            {
              unint64_t v31 = 0;
LABEL_239:
              unint64_t v92 = v29 - v31;
              long long v93 = &v27->f64[v31];
              do
              {
                *long long v93 = *v93 + v30;
                ++v93;
                --v92;
              }
              while (v92);
              goto LABEL_247;
            }
            unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            float64x2_t v88 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v30, 0);
            char v89 = v27 + 1;
            unint64_t v90 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v91 = vaddq_f64(*v89, v88);
              v89[-1] = vaddq_f64(v89[-1], v88);
              float64x2_t *v89 = v91;
              v89 += 2;
              v90 -= 4;
            }
            while (v90);
            double v11 = *(double *)&v4;
            if (v29 != v31) {
              goto LABEL_239;
            }
            break;
          case 4:
          case 5:
          case 7:
            goto LABEL_58;
          case 6:
          case 8:
            goto LABEL_254;
          case 9:
            v104[0] = (double)(uint64_t)v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v4 + 2, v104);
            goto LABEL_95;
          default:
            goto LABEL_255;
        }
        goto LABEL_59;
      case 1:
        double v11 = *(double *)&v4;
        switch(v5)
        {
          case 0:
            *(void *)&double v11 = (uint64_t)((double)(uint64_t)v4 + *(double *)&v8);
            goto LABEL_87;
          case 1:
            double v16 = *(double *)&v8;
LABEL_86:
            double v11 = *(double *)&v4 + v16;
LABEL_87:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(double *)(a2 + 16) = v11;
            *(unsigned char *)(a2 + 24) = v5;
            goto LABEL_105;
          case 2:
            double v11 = *(double *)&v4;
            if (*v4 != 1) {
              operator new();
            }
            goto LABEL_58;
          case 3:
            int v32 = (float64x2_t *)v4[1];
            uint64_t v33 = v4[2] - (void)v32;
            if (!v33) {
              goto LABEL_95;
            }
            unint64_t v34 = v33 >> 3;
            if (v34 <= 1) {
              unint64_t v34 = 1;
            }
            if (v34 >= 4)
            {
              unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFFCLL;
              float64x2_t v94 = (float64x2_t)vdupq_lane_s64((uint64_t)v8, 0);
              char v95 = v32 + 1;
              unint64_t v96 = v34 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                float64x2_t v97 = vaddq_f64(*v95, v94);
                v95[-1] = vaddq_f64(v95[-1], v94);
                *char v95 = v97;
                v95 += 2;
                v96 -= 4;
              }
              while (v96);
              double v11 = *(double *)&v4;
              if (v34 == v35)
              {
LABEL_59:
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                *(double *)(a2 + 16) = v11;
                *(unsigned char *)(a2 + 24) = v5;
                if (v6 < 4 || v5 == 9) {
LABEL_104:
                }
                  atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 1uLL);
LABEL_105:
                switch(v6)
                {
                  case 0u:
                    unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && add == 1)
                    {
                      uint64_t v40 = 0x1012C404EF22A49;
                      if ((*(char *)(*(void *)&v11 + 31) & 0x80000000) == 0) {
                        goto LABEL_129;
                      }
                      uint64_t v41 = *(void **)(*(void *)&v11 + 8);
                      goto LABEL_128;
                    }
                    break;
                  case 1u:
                    unint64_t v45 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v45 == 1)
                    {
                      uint64_t v40 = 0x1080C409938AC02;
                      uint64_t v41 = *(void **)(*(void *)&v11 + 8);
                      if (!v41) {
                        goto LABEL_129;
                      }
                      *(void *)(*(void *)&v11 + 16) = v41;
                      goto LABEL_128;
                    }
                    break;
                  case 2u:
                    unint64_t v42 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v42 == 1)
                    {
                      uint64_t v40 = 0x1020C405E66F15BLL;
                      uint64_t v43 = *(void *)(*(void *)&v11 + 8);
                      if (!v43) {
                        goto LABEL_129;
                      }
                      uint64_t v44 = *(void *)(*(void *)&v11 + 16);
                      uint64_t v41 = *(void **)(*(void *)&v11 + 8);
                      if (v44 != v43)
                      {
                        do
                        {
                          v44 -= 16;
                          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v11 + 24, v44);
                        }
                        while (v44 != v43);
                        uint64_t v41 = *(void **)(*(void *)&v11 + 8);
                      }
                      *(void *)(*(void *)&v11 + 16) = v43;
                      goto LABEL_128;
                    }
                    break;
                  case 3u:
                    unint64_t v46 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v46 == 1)
                    {
                      uint64_t v40 = 0x1020C405E66F15BLL;
                      uint64_t v47 = *(void *)(*(void *)&v11 + 8);
                      if (v47)
                      {
                        uint64_t v48 = *(void *)(*(void *)&v11 + 16);
                        char v49 = *(void **)(*(void *)&v11 + 8);
                        if (v48 != v47)
                        {
                          do
                            uint64_t v48 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v48 - 32);
                          while (v48 != v47);
                          char v49 = *(void **)(*(void *)&v11 + 8);
                        }
                        *(void *)(*(void *)&v11 + 16) = v47;
                        uint64_t v41 = v49;
LABEL_128:
                        operator delete(v41);
                      }
                      goto LABEL_129;
                    }
                    break;
                  case 7u:
                    unint64_t v63 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v63 == 1)
                    {
                      __int16 v64 = *(void **)(*(void *)&v11 + 56);
                      if (v64)
                      {
                        *(void *)(*(void *)&v11 + 64) = v64;
                        operator delete(v64);
                      }
                      long long v65 = *(void **)(*(void *)&v11 + 32);
                      if (v65)
                      {
                        *(void *)(*(void *)&v11 + 40) = v65;
                        operator delete(v65);
                      }
                      uint64_t v40 = 0x10B0C4002311774;
                      uint64_t v66 = *(std::__shared_weak_count **)(*(void *)&v11 + 24);
                      if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                        std::__shared_weak_count::__release_weak(v66);
                      }
LABEL_129:
                      MEMORY[0x192FF16B0](*(void *)&v11, v40);
                    }
                    break;
                  default:
                    break;
                }
                switch(v10)
                {
                  case 0u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_187;
                    }
                    if (*((char *)v8 + 31) < 0) {
                      operator delete((void *)v8[1]);
                    }
                    __int16 v51 = v8;
                    uint64_t v52 = 0x1012C404EF22A49;
                    goto LABEL_186;
                  case 1u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_187;
                    }
                    uint64_t v62 = (void *)v8[1];
                    if (v62)
                    {
                      v8[2] = (atomic_ullong)v62;
                      operator delete(v62);
                    }
                    __int16 v51 = v8;
                    uint64_t v52 = 0x1080C409938AC02;
                    goto LABEL_186;
                  case 2u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_187;
                    }
                    atomic_ullong v58 = v8[1];
                    if (!v58) {
                      goto LABEL_185;
                    }
                    uint64_t v59 = v8[2];
                    uint64_t v60 = (void *)v8[1];
                    if (v59 != v58)
                    {
                      do
                      {
                        v59 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 3), v59);
                      }
                      while (v59 != v58);
                      uint64_t v60 = (void *)v8[1];
                    }
                    v8[2] = v58;
                    break;
                  case 3u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_187;
                    }
                    atomic_ullong v68 = v8[1];
                    if (!v68) {
                      goto LABEL_185;
                    }
                    uint64_t v69 = v8[2];
                    __int16 v70 = (void *)v8[1];
                    if (v69 != v68)
                    {
                      do
                        uint64_t v69 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v69 - 32);
                      while (v69 != v68);
                      __int16 v70 = (void *)v8[1];
                    }
                    v8[2] = v68;
                    uint64_t v60 = v70;
                    break;
                  case 7u:
                    goto LABEL_138;
                  default:
                    goto LABEL_187;
                }
                operator delete(v60);
LABEL_185:
                __int16 v51 = v8;
                uint64_t v52 = 0x1020C405E66F15BLL;
                goto LABEL_186;
              }
            }
            else
            {
              unint64_t v35 = 0;
            }
            unint64_t v98 = v34 - v35;
            __int16 v99 = &v32->f64[v35];
            do
            {
              *__int16 v99 = *v99 + *(double *)&v8;
              ++v99;
              --v98;
            }
            while (v98);
            goto LABEL_247;
          case 4:
          case 5:
          case 7:
            goto LABEL_58;
          case 6:
          case 8:
            goto LABEL_254;
          case 9:
            *(void *)&v104[0] = v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v4 + 2, v104);
            goto LABEL_95;
          default:
            goto LABEL_255;
        }
      case 2:
        double v11 = *(double *)&v4;
        if (v5 != 2) {
          goto LABEL_58;
        }
        double v11 = *(double *)&v4;
        if (*v4 != 1) {
          operator new();
        }
        int v36 = *((char *)v8 + 31);
        if (v36 >= 0) {
          long long v37 = (const std::string::value_type *)(v8 + 1);
        }
        else {
          long long v37 = (const std::string::value_type *)v8[1];
        }
        if (v36 >= 0) {
          std::string::size_type v38 = *((unsigned __int8 *)v8 + 31);
        }
        else {
          std::string::size_type v38 = v8[2];
        }
        std::string::append((std::string *)(v4 + 1), v37, v38);
        goto LABEL_103;
      case 3:
        double v11 = *(double *)&v4;
        if (((1 << v5) & 0x2B3) != 0) {
          goto LABEL_58;
        }
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
          goto LABEL_58;
        }
        nitro::flexible_type_fail(v4[2] - v4[1] == v8[2] - v8[1]);
        unint64_t v17 = v4[1];
        uint64_t v18 = v4[2] - v17;
        if (!v18)
        {
LABEL_95:
          double v11 = *(double *)&v4;
          goto LABEL_103;
        }
        unint64_t v19 = v18 >> 3;
        unint64_t v20 = v8[1];
        if (v19 <= 1) {
          unint64_t v19 = 1;
        }
        if (v19 >= 6 && (v17 >= v20 + 8 * v19 || v20 >= v17 + 8 * v19))
        {
          unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v100 = (float64x2_t *)(v20 + 16);
          unint64_t v101 = (float64x2_t *)(v17 + 16);
          unint64_t v102 = v19 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v103 = vaddq_f64(*v100, *v101);
            v101[-1] = vaddq_f64(v100[-1], v101[-1]);
            *unint64_t v101 = v103;
            v100 += 2;
            v101 += 2;
            v102 -= 4;
          }
          while (v102);
          double v11 = *(double *)&v4;
          if (v19 == v21) {
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v21 = 0;
        }
        unint64_t v22 = v19 - v21;
        uint64_t v23 = 8 * v21;
        uint64_t v24 = (double *)(v17 + v23);
        uint64_t v25 = (double *)(v20 + v23);
        do
        {
          double v26 = *v25++;
          *uint64_t v24 = v26 + *v24;
          ++v24;
          --v22;
        }
        while (v22);
LABEL_247:
        double v11 = *(double *)&v4;
        goto LABEL_59;
      case 4:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 5:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 6:
      case 8:
LABEL_254:
        __break(1u);
        goto LABEL_255;
      case 7:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 9:
        double v11 = *(double *)&v4;
        if (((1 << v5) & 0xBB) != 0) {
          goto LABEL_58;
        }
        if (v5 != 2)
        {
          nitro::ndarray_container::operator+=((_DWORD *)v4 + 2, (_DWORD *)v8 + 2);
          double v11 = *(double *)&v4;
LABEL_103:
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v11;
          *(unsigned char *)(a2 + 24) = v5;
          goto LABEL_104;
        }
        double v11 = *(double *)&v4;
        if (*v4 != 1) {
          operator new();
        }
LABEL_58:
        nitro::flexible_type_fail(0);
        goto LABEL_59;
      default:
LABEL_255:
        JUMPOUT(0);
    }
  }
LABEL_21:
  atomic_fetch_add(v8, 1uLL);
  switch((int)v5)
  {
    case 1:
      *(void *)&v104[0] = v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v8 + 2, v104);
      goto LABEL_23;
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      nitro::flexible_type_fail(0);
      goto LABEL_23;
    case 6:
      goto LABEL_254;
    default:
      v104[0] = (double)(uint64_t)v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v8 + 2, v104);
LABEL_23:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(double *)(a2 + 16) = *(double *)&v8;
      *(unsigned char *)(a2 + 24) = 9;
      atomic_fetch_add(v8, 1uLL);
      if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      if (*(double *)&v8 == 0.0)
      {
        atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL);
        goto LABEL_187;
      }
      int v13 = (void *)v8[7];
      if (v13)
      {
        v8[8] = (atomic_ullong)v13;
        operator delete(v13);
      }
      uint64_t v14 = (void *)v8[4];
      if (v14)
      {
        v8[5] = (atomic_ullong)v14;
        operator delete(v14);
      }
      std::locale v15 = (std::__shared_weak_count *)v8[3];
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      MEMORY[0x192FF16B0](v8, 0x10B0C4002311774);
      break;
  }
LABEL_138:
  if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
    goto LABEL_187;
  }
  uint64_t v54 = (void *)v8[7];
  if (v54)
  {
    v8[8] = (atomic_ullong)v54;
    operator delete(v54);
  }
  char v55 = (void *)v8[4];
  if (v55)
  {
    v8[5] = (atomic_ullong)v55;
    operator delete(v55);
  }
  uint64_t v56 = (std::__shared_weak_count *)v8[3];
  if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  __int16 v51 = v8;
  uint64_t v52 = 0x10B0C4002311774;
LABEL_186:
  MEMORY[0x192FF16B0](v51, v52);
LABEL_187:
  switch(v6)
  {
    case 0u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        if (*((char *)v4 + 31) < 0) {
          operator delete((void *)v4[1]);
        }
        uint64_t v72 = v4;
        uint64_t v73 = 0x1012C404EF22A49;
        goto LABEL_234;
      }
      break;
    case 1u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        uint64_t v79 = (void *)v4[1];
        if (v79)
        {
          v4[2] = (atomic_ullong)v79;
          operator delete(v79);
        }
        uint64_t v72 = v4;
        uint64_t v73 = 0x1080C409938AC02;
        goto LABEL_234;
      }
      break;
    case 2u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        atomic_ullong v75 = v4[1];
        if (!v75) {
          goto LABEL_221;
        }
        uint64_t v76 = v4[2];
        char v77 = (void *)v4[1];
        if (v76 != v75)
        {
          do
          {
            v76 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v4 + 3), v76);
          }
          while (v76 != v75);
          char v77 = (void *)v4[1];
        }
        v4[2] = v75;
        goto LABEL_220;
      }
      break;
    case 3u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        atomic_ullong v81 = v4[1];
        if (v81)
        {
          uint64_t v82 = v4[2];
          char v83 = (void *)v4[1];
          if (v82 != v81)
          {
            do
              uint64_t v82 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v82 - 32);
            while (v82 != v81);
            char v83 = (void *)v4[1];
          }
          v4[2] = v81;
          char v77 = v83;
LABEL_220:
          operator delete(v77);
        }
LABEL_221:
        uint64_t v72 = v4;
        uint64_t v73 = 0x1020C405E66F15BLL;
        goto LABEL_234;
      }
      break;
    case 7u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        uint64_t v85 = (void *)v4[7];
        if (v85)
        {
          unsigned char v4[8] = (atomic_ullong)v85;
          operator delete(v85);
        }
        __int16 v86 = (void *)v4[4];
        if (v86)
        {
          v4[5] = (atomic_ullong)v86;
          operator delete(v86);
        }
        long long v87 = (std::__shared_weak_count *)v4[3];
        if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
          std::__shared_weak_count::__release_weak(v87);
        }
        uint64_t v72 = v4;
        uint64_t v73 = 0x10B0C4002311774;
LABEL_234:
        MEMORY[0x192FF16B0](v72, v73);
      }
      break;
    default:
      return;
  }
}

void sub_1925CE198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 1:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v9 = *(void **)(v2 + 8);
      if (v9)
      {
        *(void *)(v2 + 16) = v9;
        operator delete(v9);
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1080C409938AC02;
      goto LABEL_49;
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v11 = *(void *)(v2 + 8);
      if (!v11) {
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)(v2 + 16);
      int v13 = *(void **)(v2 + 8);
      if (v12 != v11)
      {
        do
        {
          v12 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v12);
        }
        while (v12 != v11);
        int v13 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v11;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v15 = *(void *)(v2 + 8);
      if (!v15) {
        goto LABEL_35;
      }
      uint64_t v16 = *(void *)(v2 + 16);
      unint64_t v17 = *(void **)(v2 + 8);
      if (v16 != v15)
      {
        do
          uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
        while (v16 != v15);
        unint64_t v17 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v15;
      int v13 = v17;
LABEL_34:
      operator delete(v13);
LABEL_35:
      uint64_t v6 = v2;
      uint64_t v7 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 7:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      unint64_t v19 = *(void **)(v2 + 56);
      if (v19)
      {
        *(void *)(v2 + 64) = v19;
        operator delete(v19);
        unint64_t v20 = *(void **)(v2 + 32);
        if (!v20)
        {
LABEL_42:
          unint64_t v21 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v21) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v20 = *(void **)(v2 + 32);
        if (!v20) {
          goto LABEL_42;
        }
      }
      *(void *)(v2 + 40) = v20;
      operator delete(v20);
      unint64_t v21 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v21)
      {
LABEL_48:
        uint64_t v6 = v2;
        uint64_t v7 = 0x10B0C4002311774;
LABEL_49:
        MEMORY[0x192FF16B0](v6, v7);
        _Unwind_Resume(a1);
      }
LABEL_46:
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      goto LABEL_48;
    default:
LABEL_50:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 9;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 14));
  unint64_t v3 = (void *)a1[12];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 5));
  uint64_t result = a1[3];
  if ((void *)result == a1)
  {
    uint64_t v6 = *(uint64_t (**)(void *))(*a1 + 32);
    return v6(a1);
  }
  else if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 40);
    return v5();
  }
  return result;
}

void *std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = operator new(16 * a4);
    void *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[2 * a4]; a2 != a3; result += 2)
    {
      *uint64_t result = 0;
      *((unsigned char *)result + 8) = 0;
      if (a2 != result)
      {
        *uint64_t result = *a2;
        int v8 = *((unsigned __int8 *)a2 + 8);
        *((unsigned char *)result + 8) = v8;
        if ((v8 - 2) < 4 || v8 == 9) {
          atomic_fetch_add((atomic_ullong *volatile)*result, 1uLL);
        }
      }
      a2 += 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_1925CEB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***std::__exception_guard_exceptions<std::vector<nitro::flexible_type>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    unint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

char *std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>(char *result, char *a2, char *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (char *)operator new(32 * a4);
    void *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[32 * a4]; a2 != a3; result += 32)
    {
      *(void *)uint64_t result = 0;
      result[8] = 0;
      if (result == a2)
      {
        *((void *)a2 + 2) = 0;
        a2[24] = 0;
      }
      else
      {
        *(void *)uint64_t result = *(void *)a2;
        int v8 = a2[8];
        result[8] = v8;
        if ((v8 - 2) < 4 || v8 == 9) {
          atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
        }
        *((void *)result + 2) = *((void *)a2 + 2);
        int v10 = a2[24];
        result[24] = v10;
        switch(v10)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 9:
            atomic_fetch_add(*((atomic_ullong *volatile *)result + 2), 1uLL);
            break;
          default:
            break;
        }
      }
      a2 += 32;
    }
    v5[1] = result;
  }
  return result;
}

void sub_1925CED48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***std::__exception_guard_exceptions<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    unint64_t v3 = **a1;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      uint64_t v5 = **a1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v4 - 32);
        while ((void *)v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v56, (uint64_t)a1);
      if (v59 == v58 || v56 == 0) {
        goto LABEL_32;
      }
      unint64_t v4 = v59 - v58 - 8;
      if (v4 < 8)
      {
        uint64_t v5 = 1;
        uint64_t v6 = v58;
        do
        {
LABEL_29:
          uint64_t v24 = *(void *)v6;
          v6 += 8;
          v5 *= v24;
        }
        while (v6 != v59);
        goto LABEL_30;
      }
      uint64_t v19 = (v4 >> 3) + 1;
      uint64_t v6 = &v58[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v20 = v58 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v5 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_29;
      }
LABEL_30:
      if (v5) {
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<double>(double)::{lambda(int &)#1}>(&v56, *a2);
      }
LABEL_32:
      if (v60)
      {
        char v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      uint64_t v25 = v57;
      if (!v57) {
        return;
      }
      goto LABEL_73;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v62, (uint64_t)a1);
      if (v65 == v64 || v62 == 0) {
        goto LABEL_56;
      }
      unint64_t v12 = v65 - v64 - 8;
      if (v12 < 8)
      {
        uint64_t v13 = 1;
        uint64_t v14 = v64;
        do
        {
LABEL_53:
          uint64_t v37 = *(void *)v14;
          v14 += 8;
          v13 *= v37;
        }
        while (v14 != v65);
        goto LABEL_54;
      }
      uint64_t v32 = (v12 >> 3) + 1;
      uint64_t v14 = &v64[8 * (v32 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v33 = v64 + 8;
      uint64_t v34 = 1;
      uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v36 = 1;
      do
      {
        v34 *= *(v33 - 1);
        v36 *= *v33;
        v33 += 2;
        v35 -= 2;
      }
      while (v35);
      uint64_t v13 = v36 * v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_53;
      }
LABEL_54:
      if (v13) {
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<double>(double)::{lambda(unsigned char &)#1}>(&v62, *a2);
      }
LABEL_56:
      if (v66)
      {
        char v67 = v66;
        operator delete(v66);
      }
      if (v64)
      {
        long long v65 = v64;
        operator delete(v64);
      }
      uint64_t v25 = v63;
      if (!v63) {
        return;
      }
      goto LABEL_73;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v44, (uint64_t)a1);
      if (v47 == v46 || v44 == 0) {
        goto LABEL_68;
      }
      unint64_t v16 = (char *)v47 - (unsigned char *)v46 - 8;
      if (v16 < 8)
      {
        uint64_t v17 = 1;
        uint64_t v18 = (uint64_t *)v46;
        do
        {
LABEL_65:
          uint64_t v43 = *v18++;
          v17 *= v43;
        }
        while (v18 != v47);
        goto LABEL_66;
      }
      uint64_t v38 = (v16 >> 3) + 1;
      uint64_t v18 = (uint64_t *)((char *)v46 + 8 * (v38 & 0x3FFFFFFFFFFFFFFELL));
      char v39 = (char *)v46 + 8;
      uint64_t v40 = 1;
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v42 = 1;
      do
      {
        v40 *= *(v39 - 1);
        v42 *= *v39;
        v39 += 2;
        v41 -= 2;
      }
      while (v41);
      uint64_t v17 = v42 * v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_65;
      }
LABEL_66:
      if (v17) {
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<double>(double)::{lambda(float &)#1}>(&v44, *a2);
      }
LABEL_68:
      if (v48)
      {
        char v49 = v48;
        operator delete(v48);
      }
      if (v46)
      {
        uint64_t v47 = (uint64_t *)v46;
        operator delete(v46);
      }
      uint64_t v25 = v45;
      if (v45) {
        goto LABEL_73;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v50, (uint64_t)a1);
      if (v53 == v52 || v50 == 0) {
        goto LABEL_44;
      }
      unint64_t v8 = (char *)v53 - (unsigned char *)v52 - 8;
      if (v8 < 8)
      {
        uint64_t v9 = 1;
        int v10 = (uint64_t *)v52;
        do
        {
LABEL_41:
          uint64_t v31 = *v10++;
          v9 *= v31;
        }
        while (v10 != v53);
        goto LABEL_42;
      }
      uint64_t v26 = (v8 >> 3) + 1;
      int v10 = (uint64_t *)((char *)v52 + 8 * (v26 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v27 = (char *)v52 + 8;
      uint64_t v28 = 1;
      uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v30 = 1;
      do
      {
        v28 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v29 -= 2;
      }
      while (v29);
      uint64_t v9 = v30 * v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_41;
      }
LABEL_42:
      if (v9) {
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<double>(double)::{lambda(half &)#1}>(&v50, *a2);
      }
LABEL_44:
      if (__p)
      {
        char v55 = __p;
        operator delete(__p);
      }
      if (v52)
      {
        long long v53 = (uint64_t *)v52;
        operator delete(v52);
      }
      uint64_t v25 = v51;
      if (v51)
      {
LABEL_73:
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_1925CF1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925CF1D4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925CF1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925CF1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925CF4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<double>(double)::{lambda(unsigned char &)#1}>(void *a1, double a2)
{
  uint64_t v2 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  uint64_t v4 = v3 - v2;
  if (v3 == v2 || !*a1) {
    return;
  }
  double v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *(void *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  unint64_t v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  unint64_t v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  int v10 = v2 + 8;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  unint64_t v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    unint64_t v24 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v25 = 0;
      uint64_t v26 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v27 = 0;
          uint64_t v28 = v26;
          do
          {
            if (*((void *)v2 + 2))
            {
              unint64_t v30 = 0;
              uint64_t v31 = v28;
              do
              {
                LOBYTE(a2) = *(unsigned char *)(*a1 + v31);
                a2 = v6 + (double)*(unint64_t *)&a2;
                *(unsigned char *)(*a1 + v31) = (int)a2;
                uint64_t v29 = (void *)a1[5];
                v31 += v29[2];
                ++v30;
                uint64_t v2 = (char *)a1[2];
              }
              while (v30 < *((void *)v2 + 2));
            }
            else
            {
              uint64_t v29 = (void *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((void *)v2 + 1));
          unint64_t v24 = *(void *)v2;
        }
        else
        {
          uint64_t v29 = (void *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(void *)v2)
        {
          unint64_t v16 = 0;
          uint64_t v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v17);
            a2 = v6 + (double)*(unint64_t *)&a2;
            *(unsigned char *)(*a1 + v17) = (int)a2;
            v17 += *(void *)a1[5];
            ++v16;
          }
          while (v16 < *(void *)a1[2]);
        }
        return;
      }
      if (v4 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v4 >> 3;
      }
      while (1)
      {
        uint64_t v35 = a1[5];
        if (v34 < 2) {
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = (void *)(v35 + 8);
        unint64_t v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        uint64_t v36 = v39 + v38;
        unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_47;
        }
LABEL_49:
        LOBYTE(v33) = *(unsigned char *)(*a1 + v36);
        double v33 = v6 + (double)*(unint64_t *)&v33;
        *(unsigned char *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          uint64_t v50 = a1[2];
          uint64_t v51 = ((unint64_t)v4 >> 3) + 1;
          unint64_t v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            uint64_t v53 = (v51 - 2);
            unint64_t v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(void *)(v50 + v53 * 8)) {
              break;
            }
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1) {
              goto LABEL_55;
            }
          }
          if ((int)v52 > 0) {
            continue;
          }
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0;
LABEL_47:
      unint64_t v43 = v34 - v37;
      uint64_t v44 = v37;
      unint64_t v45 = (uint64_t *)(v35 + v44 * 8);
      unint64_t v46 = &v32[v44];
      do
      {
        uint64_t v48 = *v46++;
        uint64_t v47 = v48;
        uint64_t v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    unint64_t v18 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v19 = 0;
      uint64_t v20 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v22 = 0;
          uint64_t v23 = v20;
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v23);
            a2 = v6 + (double)*(unint64_t *)&a2;
            *(unsigned char *)(*a1 + v23) = (int)a2;
            uint64_t v21 = (void *)a1[5];
            v23 += v21[1];
            ++v22;
            uint64_t v2 = (char *)a1[2];
          }
          while (v22 < *((void *)v2 + 1));
          unint64_t v18 = *(void *)v2;
        }
        else
        {
          uint64_t v21 = (void *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_1925CF890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v56 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v57 = 0;
    uint64_t v58 = a1[8];
    unint64_t v59 = v3[1];
    uint64_t v60 = (uint64_t *)a1[5];
    uint64_t v61 = *v60;
    float64x2_t v62 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v63 = v6 + 4 * v58 + 16;
    uint64_t v64 = 4 * *v60;
    while (!v59)
    {
LABEL_38:
      v58 += v61;
      ++v57;
      v63 += v64;
      if (v57 == v56) {
        return;
      }
    }
    uint64_t v65 = 0;
    unint64_t v66 = v3[2];
    uint64_t v67 = v60[1];
    unint64_t v68 = v66 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = v63;
    uint64_t v70 = v58;
    while (1)
    {
      if (v66)
      {
        unint64_t v71 = 0;
        uint64_t v72 = v60[2];
        uint64_t v73 = v70;
        if (v66 < 8)
        {
          double v74 = a2;
        }
        else
        {
          double v74 = a2;
          if (v72 == 1)
          {
            uint64_t v73 = v70 + v68;
            uint64_t v75 = v69;
            unint64_t v76 = v66 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v77 = *(_OWORD *)(v75 - 16);
              v78.i64[0] = SDWORD2(v77);
              v78.i64[1] = SHIDWORD(v77);
              float64x2_t v79 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)v77;
              v78.i64[1] = SDWORD1(v77);
              float64x2_t v80 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(void *)(v75 + 8);
              v78.i64[1] = (int)HIDWORD(*(_OWORD *)v75);
              float64x2_t v81 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_OWORD *)v75;
              v78.i64[1] = (int)HIDWORD(*(void *)v75);
              *(int32x4_t *)(v75 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v80)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v79)));
              *(int32x4_t *)uint64_t v75 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, vcvtq_f64_s64(v78))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v62, v81)));
              v75 += 32;
              v76 -= 8;
            }
            while (v76);
            unint64_t v71 = v66 & 0xFFFFFFFFFFFFFFF8;
            double v74 = a2;
            if (v66 == v68) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v82 = v66 - v71;
        uint64_t v83 = 4 * v72;
        uint64_t v84 = (int *)(v6 + 4 * v73);
        do
        {
          *uint64_t v84 = (int)(v74 + (double)*v84);
          uint64_t v84 = (int *)((char *)v84 + v83);
          --v82;
        }
        while (v82);
      }
LABEL_41:
      v70 += v67;
      ++v65;
      v69 += 4 * v67;
      if (v65 == v59) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v32 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v33 = 0;
    uint64_t v34 = a1[8];
    unint64_t v35 = v3[1];
    uint64_t v36 = (uint64_t *)a1[5];
    uint64_t v37 = *v36;
    unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v40 = v6 + 4 * v34 + 16;
    uint64_t v41 = 4 * *v36;
    while (1)
    {
      if (v35)
      {
        unint64_t v42 = 0;
        uint64_t v43 = v36[1];
        uint64_t v44 = v34;
        if (v35 < 8)
        {
          double v45 = a2;
        }
        else
        {
          double v45 = a2;
          if (v43 == 1)
          {
            uint64_t v44 = v34 + v38;
            uint64_t v46 = v40;
            unint64_t v47 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v48 = *(_OWORD *)(v46 - 16);
              v49.i64[0] = SDWORD2(v48);
              v49.i64[1] = SHIDWORD(v48);
              float64x2_t v50 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)v48;
              v49.i64[1] = SDWORD1(v48);
              float64x2_t v51 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(void *)(v46 + 8);
              v49.i64[1] = (int)HIDWORD(*(_OWORD *)v46);
              float64x2_t v52 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_OWORD *)v46;
              v49.i64[1] = (int)HIDWORD(*(void *)v46);
              *(int32x4_t *)(v46 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v51)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v50)));
              *(int32x4_t *)uint64_t v46 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, vcvtq_f64_s64(v49))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v39, v52)));
              v46 += 32;
              v47 -= 8;
            }
            while (v47);
            unint64_t v42 = v35 & 0xFFFFFFFFFFFFFFF8;
            double v45 = a2;
            if (v35 == v38) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v53 = v35 - v42;
        uint64_t v54 = 4 * v43;
        char v55 = (int *)(v6 + 4 * v44);
        do
        {
          int *v55 = (int)(v45 + (double)*v55);
          char v55 = (int *)((char *)v55 + v54);
          --v53;
        }
        while (v53);
      }
LABEL_24:
      v34 += v37;
      ++v33;
      v40 += v41;
      if (v33 == v32) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v85 = operator new(v4);
    bzero(v85, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v86 = 1;
    }
    else {
      unint64_t v86 = v4 >> 3;
    }
    uint64_t v87 = a1[5];
    while (v86 >= 2)
    {
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = v86 & 0x1FFFFFFFFFFFFFFELL;
      long long v93 = (void *)(v87 + 8);
      float64x2_t v94 = v85 + 1;
      do
      {
        v90 += *(v93 - 1) * *(v94 - 1);
        v91 += *v93 * *v94;
        v94 += 2;
        v93 += 2;
        v92 -= 2;
      }
      while (v92);
      uint64_t v88 = v91 + v90;
      uint64_t v89 = v86 & 0x1FFFFFFFFFFFFFFELL;
      if (v86 != (v86 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      *(_DWORD *)(v6 + 4 * v88) = (int)(a2 + (double)*(int *)(v6 + 4 * v88));
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v102 = (v4 >> 3) + 1;
        size_t v103 = v4 >> 3;
        while (1)
        {
          uint64_t v104 = (v102 - 2);
          unint64_t v105 = v85[v104] + 1;
          v85[v104] = v105;
          if (v105 < v3[v104]) {
            break;
          }
          v85[(v102 - 2)] = 0;
          LODWORD(v103) = v103 - 1;
          if ((unint64_t)--v102 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v103 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v85);
      return;
    }
    uint64_t v88 = 0;
    uint64_t v89 = 0;
LABEL_63:
    unint64_t v95 = v86 - v89;
    uint64_t v96 = v89;
    float64x2_t v97 = (uint64_t *)(v87 + 8 * v89);
    unint64_t v98 = &v85[v96];
    do
    {
      uint64_t v100 = *v98++;
      uint64_t v99 = v100;
      uint64_t v101 = *v97++;
      v88 += v101 * v99;
      --v95;
    }
    while (v95);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = v6 + 4 * v18 + 16;
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)(v22 - 16);
      v25.i64[0] = SDWORD2(v24);
      v25.i64[1] = SHIDWORD(v24);
      float64x2_t v26 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)v24;
      v25.i64[1] = SDWORD1(v24);
      float64x2_t v27 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(void *)(v22 + 8);
      v25.i64[1] = (int)HIDWORD(*(_OWORD *)v22);
      float64x2_t v28 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_OWORD *)v22;
      v25.i64[1] = (int)HIDWORD(*(void *)v22);
      *(int32x4_t *)(v22 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v27)), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v26)));
      *(int32x4_t *)uint64_t v22 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, vcvtq_f64_s64(v25))), (int32x4_t)vcvtq_s64_f64(vaddq_f64(v21, v28)));
      v22 += 32;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v29 = v16 - v17;
      uint64_t v30 = 4 * v19;
      uint64_t v31 = (int *)(v6 + 4 * v18);
      do
      {
        int *v31 = (int)(a2 + (double)*v31);
        uint64_t v31 = (int *)((char *)v31 + v30);
        --v29;
      }
      while (v29);
    }
  }
}

void sub_1925CFE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v84 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = a1[8];
    unint64_t v87 = v3[1];
    uint64_t v88 = (uint64_t *)a1[5];
    uint64_t v89 = *v88;
    float64x2_t v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v91 = (float64x2_t *)(v6 + 2 * v86);
    uint64_t v92 = 2 * *v88;
    while (!v87)
    {
LABEL_38:
      v86 += v89;
      ++v85;
      uint64_t v91 = (float64x2_t *)((char *)v91 + v92);
      if (v85 == v84) {
        return;
      }
    }
    uint64_t v93 = 0;
    unint64_t v94 = v3[2];
    uint64_t v95 = v88[1];
    unint64_t v96 = v94 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v97 = v91;
    uint64_t v98 = v86;
    while (1)
    {
      if (v94)
      {
        unint64_t v99 = 0;
        uint64_t v100 = v88[2];
        uint64_t v101 = v98;
        if (v94 < 8)
        {
          double v102 = a2;
        }
        else
        {
          double v102 = a2;
          if (v100 == 1)
          {
            uint64_t v101 = v98 + v96;
            size_t v103 = v97;
            unint64_t v104 = v94 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v103;
              _H2 = WORD1(*(_OWORD *)v103);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(void *)&v103->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(void *)&v103->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vaddq_f64(v90, _Q1);
              _Q2 = vaddq_f64(v90, _Q4);
              _Q3 = vaddq_f64(v90, _Q3);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vaddq_f64(v90, _Q5);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v103++ = _Q3;
              v104 -= 8;
            }
            while (v104);
            unint64_t v99 = v94 & 0xFFFFFFFFFFFFFFF8;
            double v102 = a2;
            if (v94 == v96) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v119 = v94 - v99;
        uint64_t v120 = 2 * v100;
        uint64_t v121 = (__int16 *)(v6 + 2 * v101);
        do
        {
          _H1 = *v121;
          __asm { FCVT            D1, H1 }
          _D1 = v102 + _D1;
          __asm { FCVT            H1, D1 }
          *uint64_t v121 = LOWORD(_D1);
          uint64_t v121 = (__int16 *)((char *)v121 + v120);
          --v119;
        }
        while (v119);
      }
LABEL_41:
      v98 += v95;
      ++v93;
      float64x2_t v97 = (float64x2_t *)((char *)v97 + 2 * v95);
      if (v93 == v87) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v48 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v49 = 0;
    uint64_t v50 = a1[8];
    unint64_t v51 = v3[1];
    float64x2_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    unint64_t v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    unint64_t v56 = (float64x2_t *)(v6 + 2 * v50);
    uint64_t v57 = 2 * *v52;
    while (1)
    {
      if (v51)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v52[1];
        uint64_t v60 = v50;
        if (v51 < 8)
        {
          double v61 = a2;
        }
        else
        {
          double v61 = a2;
          if (v59 == 1)
          {
            uint64_t v60 = v50 + v54;
            float64x2_t v62 = v56;
            unint64_t v63 = v51 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v62;
              _H2 = WORD1(*(_OWORD *)v62);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(void *)&v62->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(void *)&v62->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vaddq_f64(v55, _Q1);
              _Q2 = vaddq_f64(v55, _Q4);
              _Q3 = vaddq_f64(v55, _Q3);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vaddq_f64(v55, _Q5);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v62++ = _Q3;
              v63 -= 8;
            }
            while (v63);
            unint64_t v58 = v51 & 0xFFFFFFFFFFFFFFF8;
            double v61 = a2;
            if (v51 == v54) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v78 = v51 - v58;
        uint64_t v79 = 2 * v59;
        float64x2_t v80 = (__int16 *)(v6 + 2 * v60);
        do
        {
          _H1 = *v80;
          __asm { FCVT            D1, H1 }
          _D1 = v61 + _D1;
          __asm { FCVT            H1, D1 }
          *float64x2_t v80 = LOWORD(_D1);
          float64x2_t v80 = (__int16 *)((char *)v80 + v79);
          --v78;
        }
        while (v78);
      }
LABEL_24:
      v50 += v53;
      ++v49;
      unint64_t v56 = (float64x2_t *)((char *)v56 + v57);
      if (v49 == v48) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v125 = operator new(v4);
    bzero(v125, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v126 = 1;
    }
    else {
      unint64_t v126 = v4 >> 3;
    }
    uint64_t v127 = a1[5];
    while (v126 >= 2)
    {
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v126 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v127 + 8);
      uint64_t v134 = v125 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v126 & 0x1FFFFFFFFFFFFFFELL;
      if (v126 != (v126 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v142 = 2 * v128;
      _H0 = *(_WORD *)(v6 + v142);
      __asm { FCVT            D0, H0 }
      _D0 = a2 + _D0;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v142) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v146 = (v4 >> 3) + 1;
        size_t v147 = v4 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v125[v148] + 1;
          v125[v148] = v149;
          if (v149 < v3[v148]) {
            break;
          }
          v125[(v146 - 2)] = 0;
          LODWORD(v147) = v147 - 1;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v147 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v125);
      return;
    }
    uint64_t v128 = 0;
    uint64_t v129 = 0;
LABEL_63:
    unint64_t v135 = v126 - v129;
    uint64_t v136 = v129;
    uint64_t v137 = (uint64_t *)(v127 + 8 * v129);
    unsigned __int8 v138 = &v125[v136];
    do
    {
      uint64_t v140 = *v138++;
      uint64_t v139 = v140;
      uint64_t v141 = *v137++;
      v128 += v141 * v139;
      --v135;
    }
    while (v135);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = (float64x2_t *)(v6 + 2 * v18);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q1 = *v22;
      _H2 = WORD1(*(_OWORD *)v22);
      __asm
      {
        FCVT            D2, H2
        FCVT            D3, H1
      }
      _Q3.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(*(void *)&v22->f64[0]);
      __asm { FCVT            D2, H2 }
      _H4 = WORD2(*(void *)&v22->f64[0]);
      __asm { FCVT            D4, H4 }
      _Q4.f64[1] = _D2;
      *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      LOWORD(_D2) = WORD1(_Q1.f64[0]);
      __asm
      {
        FCVT            D2, H2
        FCVT            D5, H1
      }
      _Q5.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(_Q1.f64[0]);
      __asm { FCVT            D2, H2 }
      LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
      __asm { FCVT            D1, H1 }
      _Q1.f64[1] = _D2;
      _Q1 = vaddq_f64(v21, _Q1);
      _Q2 = vaddq_f64(v21, _Q4);
      _Q3 = vaddq_f64(v21, _Q3);
      _Q4.f64[0] = _Q3.f64[1];
      __asm
      {
        FCVT            H4, D4
        FCVT            H3, D3
      }
      WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      __asm { FCVT            H4, D2 }
      WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
      _Q2 = vaddq_f64(v21, _Q5);
      __asm { FCVT            H4, D2 }
      LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      __asm { FCVT            H2, D1 }
      WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
      *v22++ = _Q3;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v42 = v16 - v17;
      uint64_t v43 = 2 * v19;
      uint64_t v44 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v44;
        __asm { FCVT            D0, H0 }
        _D0 = a2 + _D0;
        __asm { FCVT            H0, D0 }
        *uint64_t v44 = LOWORD(_D0);
        uint64_t v44 = (__int16 *)((char *)v44 + v43);
        --v42;
      }
      while (v42);
    }
  }
}

void sub_1925D04C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v50 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v51 = 0;
    uint64_t v52 = a1[8];
    unint64_t v53 = v3[1];
    unint64_t v54 = (uint64_t *)a1[5];
    uint64_t v55 = *v54;
    float64x2_t v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v57 = v6 + 4 * v52 + 16;
    uint64_t v58 = 4 * *v54;
    while (!v53)
    {
LABEL_38:
      v52 += v55;
      ++v51;
      v57 += v58;
      if (v51 == v50) {
        return;
      }
    }
    uint64_t v59 = 0;
    unint64_t v60 = v3[2];
    uint64_t v61 = v54[1];
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v63 = (float32x2_t *)v57;
    uint64_t v64 = v52;
    while (1)
    {
      if (v60)
      {
        unint64_t v65 = 0;
        uint64_t v66 = v54[2];
        uint64_t v67 = v64;
        if (v60 < 8)
        {
          double v68 = a2;
        }
        else
        {
          double v68 = a2;
          if (v66 == 1)
          {
            uint64_t v67 = v64 + v62;
            uint64_t v69 = v63;
            unint64_t v70 = v60 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v56, vcvtq_f64_f32(*v69))), vaddq_f64(v56, vcvt_hight_f64_f32(*(float32x4_t *)v69->f32)));
              *(float32x4_t *)v69[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v56, vcvtq_f64_f32(v69[-2]))), vaddq_f64(v56, vcvt_hight_f64_f32(*(float32x4_t *)v69[-2].f32)));
              *(float32x4_t *)v69->f32 = v71;
              v69 += 4;
              v70 -= 8;
            }
            while (v70);
            unint64_t v65 = v60 & 0xFFFFFFFFFFFFFFF8;
            double v68 = a2;
            if (v60 == v62) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v72 = v60 - v65;
        uint64_t v73 = 4 * v66;
        double v74 = (float *)(v6 + 4 * v67);
        do
        {
          float v75 = v68 + *v74;
          *double v74 = v75;
          double v74 = (float *)((char *)v74 + v73);
          --v72;
        }
        while (v72);
      }
LABEL_41:
      v64 += v61;
      ++v59;
      unint64_t v63 = (float32x2_t *)((char *)v63 + 4 * v61);
      if (v59 == v53) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v29 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v30 = 0;
    uint64_t v31 = a1[8];
    unint64_t v32 = v3[1];
    uint64_t v33 = (uint64_t *)a1[5];
    uint64_t v34 = *v33;
    unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v37 = v6 + 4 * v31 + 16;
    uint64_t v38 = 4 * *v33;
    while (1)
    {
      if (v32)
      {
        unint64_t v39 = 0;
        uint64_t v40 = v33[1];
        uint64_t v41 = v31;
        if (v32 < 8)
        {
          double v42 = a2;
        }
        else
        {
          double v42 = a2;
          if (v40 == 1)
          {
            uint64_t v41 = v31 + v35;
            uint64_t v43 = (float32x2_t *)v37;
            unint64_t v44 = v32 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v36, vcvtq_f64_f32(*v43))), vaddq_f64(v36, vcvt_hight_f64_f32(*(float32x4_t *)v43->f32)));
              *(float32x4_t *)v43[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v36, vcvtq_f64_f32(v43[-2]))), vaddq_f64(v36, vcvt_hight_f64_f32(*(float32x4_t *)v43[-2].f32)));
              *(float32x4_t *)v43->f32 = v45;
              v43 += 4;
              v44 -= 8;
            }
            while (v44);
            unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFF8;
            double v42 = a2;
            if (v32 == v35) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v46 = v32 - v39;
        uint64_t v47 = 4 * v40;
        unint64_t v48 = (float *)(v6 + 4 * v41);
        do
        {
          float v49 = v42 + *v48;
          *unint64_t v48 = v49;
          unint64_t v48 = (float *)((char *)v48 + v47);
          --v46;
        }
        while (v46);
      }
LABEL_24:
      v31 += v34;
      ++v30;
      v37 += v38;
      if (v30 == v29) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v76 = operator new(v4);
    bzero(v76, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v77 = 1;
    }
    else {
      unint64_t v77 = v4 >> 3;
    }
    uint64_t v78 = a1[5];
    while (v77 >= 2)
    {
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = v77 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v84 = (void *)(v78 + 8);
      uint64_t v85 = v76 + 1;
      do
      {
        v81 += *(v84 - 1) * *(v85 - 1);
        v82 += *v84 * *v85;
        v85 += 2;
        v84 += 2;
        v83 -= 2;
      }
      while (v83);
      uint64_t v79 = v82 + v81;
      uint64_t v80 = v77 & 0x1FFFFFFFFFFFFFFELL;
      if (v77 != (v77 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v93 = 4 * v79;
      float v94 = a2 + *(float *)(v6 + v93);
      *(float *)(v6 + v93) = v94;
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v95 = (v4 >> 3) + 1;
        size_t v96 = v4 >> 3;
        while (1)
        {
          uint64_t v97 = (v95 - 2);
          unint64_t v98 = v76[v97] + 1;
          v76[v97] = v98;
          if (v98 < v3[v97]) {
            break;
          }
          v76[(v95 - 2)] = 0;
          LODWORD(v96) = v96 - 1;
          if ((unint64_t)--v95 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v96 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v76);
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = 0;
LABEL_63:
    unint64_t v86 = v77 - v80;
    uint64_t v87 = v80;
    uint64_t v88 = (uint64_t *)(v78 + 8 * v80);
    uint64_t v89 = &v76[v87];
    do
    {
      uint64_t v91 = *v89++;
      uint64_t v90 = v91;
      uint64_t v92 = *v88++;
      v79 += v92 * v90;
      --v86;
    }
    while (v86);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = (float32x2_t *)(v6 + 4 * v18 + 16);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v21, vcvtq_f64_f32(*v22))), vaddq_f64(v21, vcvt_hight_f64_f32(*(float32x4_t *)v22->f32)));
      *(float32x4_t *)v22[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v21, vcvtq_f64_f32(v22[-2]))), vaddq_f64(v21, vcvt_hight_f64_f32(*(float32x4_t *)v22[-2].f32)));
      *(float32x4_t *)v22->f32 = v24;
      v22 += 4;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v25 = v16 - v17;
      uint64_t v26 = 4 * v19;
      float64x2_t v27 = (float *)(v6 + 4 * v18);
      do
      {
        float v28 = a2 + *v27;
        *float64x2_t v27 = v28;
        float64x2_t v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_1925D0A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925D0B68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925D0B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925D0B74);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925D0D8C(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A228;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A228;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A228;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925D1074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A228;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1::$_1((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v106);
  if (*(void *)&v106[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = v107;
  uint64_t v5 = v108;
  unsigned int v6 = v108 - 2;
  BOOL v7 = v6 < 4 || v108 == 9;
  if (v7) {
    atomic_fetch_add(v107, 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v106);
  if (*(void *)&v106[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  int v8 = v107;
  uint64_t v9 = v108;
  unsigned int v10 = v108 - 2;
  if (v10 < 4)
  {
    atomic_fetch_add(v107, 1uLL);
LABEL_14:
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
    if (!v7)
    {
      if (v9 == 9) {
        goto LABEL_21;
      }
      if (v6 > 3) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v108 != 9) {
    goto LABEL_14;
  }
  atomic_fetch_add(v107, 1uLL);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v106);
  if (v5 == 9)
  {
LABEL_16:
    atomic_fetch_add(v4, 1uLL);
LABEL_17:
    switch((int)v5)
    {
      case 0:
        uint64_t v12 = v9;
        double v11 = *(double *)&v4;
        switch(v12)
        {
          case 0:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = (char *)v4 - (char *)v8;
            *(unsigned char *)(a2 + 24) = 0;
            return;
          case 1:
            double v21 = (double)(uint64_t)v8;
            goto LABEL_95;
          case 2:
            double v11 = *(double *)&v4;
            if (*v4 != 1) {
              operator new();
            }
            goto LABEL_68;
          case 3:
            unint64_t v32 = (float64x2_t *)v4[1];
            uint64_t v33 = v4[2] - (void)v32;
            if (!v33) {
              goto LABEL_104;
            }
            unint64_t v34 = v33 >> 3;
            double v35 = (double)(uint64_t)v8;
            if (v34 <= 1) {
              unint64_t v34 = 1;
            }
            if (v34 < 4)
            {
              unint64_t v36 = 0;
LABEL_240:
              unint64_t v94 = v34 - v36;
              uint64_t v95 = &v32->f64[v36];
              do
              {
                *uint64_t v95 = *v95 - v35;
                ++v95;
                --v94;
              }
              while (v94);
              goto LABEL_248;
            }
            unint64_t v36 = v34 & 0xFFFFFFFFFFFFFFFCLL;
            float64x2_t v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v35, 0);
            uint64_t v91 = v32 + 1;
            unint64_t v92 = v34 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v93 = vsubq_f64(*v91, v90);
              v91[-1] = vsubq_f64(v91[-1], v90);
              *uint64_t v91 = v93;
              v91 += 2;
              v92 -= 4;
            }
            while (v92);
            double v11 = *(double *)&v4;
            if (v34 != v36) {
              goto LABEL_240;
            }
            break;
          case 4:
          case 5:
          case 7:
            goto LABEL_68;
          case 6:
          case 8:
            goto LABEL_255;
          case 9:
            v106[0] = (double)(uint64_t)v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>((_DWORD *)v4 + 2, v106);
            goto LABEL_104;
          default:
            goto LABEL_256;
        }
        goto LABEL_69;
      case 1:
        double v11 = *(double *)&v4;
        switch(v5)
        {
          case 0:
            *(void *)&double v11 = (uint64_t)((double)(uint64_t)v4 - *(double *)&v8);
            goto LABEL_96;
          case 1:
            double v21 = *(double *)&v8;
LABEL_95:
            double v11 = *(double *)&v4 - v21;
LABEL_96:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(double *)(a2 + 16) = v11;
            *(unsigned char *)(a2 + 24) = v5;
            goto LABEL_106;
          case 2:
            double v11 = *(double *)&v4;
            if (*v4 != 1) {
              operator new();
            }
            goto LABEL_68;
          case 3:
            uint64_t v37 = (float64x2_t *)v4[1];
            uint64_t v38 = v4[2] - (void)v37;
            if (!v38) {
              goto LABEL_104;
            }
            unint64_t v39 = v38 >> 3;
            if (v39 <= 1) {
              unint64_t v39 = 1;
            }
            if (v39 >= 4)
            {
              unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFFCLL;
              float64x2_t v96 = (float64x2_t)vdupq_lane_s64((uint64_t)v8, 0);
              uint64_t v97 = v37 + 1;
              unint64_t v98 = v39 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                float64x2_t v99 = vsubq_f64(*v97, v96);
                v97[-1] = vsubq_f64(v97[-1], v96);
                *uint64_t v97 = v99;
                v97 += 2;
                v98 -= 4;
              }
              while (v98);
              double v11 = *(double *)&v4;
              if (v39 == v40)
              {
LABEL_69:
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                *(double *)(a2 + 16) = v11;
                *(unsigned char *)(a2 + 24) = v5;
                if (v6 < 4 || v5 == 9) {
LABEL_105:
                }
                  atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 1uLL);
LABEL_106:
                switch(v6)
                {
                  case 0u:
                    unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && add == 1)
                    {
                      uint64_t v42 = 0x1012C404EF22A49;
                      if ((*(char *)(*(void *)&v11 + 31) & 0x80000000) == 0) {
                        goto LABEL_130;
                      }
                      uint64_t v43 = *(void **)(*(void *)&v11 + 8);
                      goto LABEL_129;
                    }
                    break;
                  case 1u:
                    unint64_t v47 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v47 == 1)
                    {
                      uint64_t v42 = 0x1080C409938AC02;
                      uint64_t v43 = *(void **)(*(void *)&v11 + 8);
                      if (!v43) {
                        goto LABEL_130;
                      }
                      *(void *)(*(void *)&v11 + 16) = v43;
                      goto LABEL_129;
                    }
                    break;
                  case 2u:
                    unint64_t v44 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v44 == 1)
                    {
                      uint64_t v42 = 0x1020C405E66F15BLL;
                      uint64_t v45 = *(void *)(*(void *)&v11 + 8);
                      if (!v45) {
                        goto LABEL_130;
                      }
                      uint64_t v46 = *(void *)(*(void *)&v11 + 16);
                      uint64_t v43 = *(void **)(*(void *)&v11 + 8);
                      if (v46 != v45)
                      {
                        do
                        {
                          v46 -= 16;
                          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v11 + 24, v46);
                        }
                        while (v46 != v45);
                        uint64_t v43 = *(void **)(*(void *)&v11 + 8);
                      }
                      *(void *)(*(void *)&v11 + 16) = v45;
                      goto LABEL_129;
                    }
                    break;
                  case 3u:
                    unint64_t v48 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v48 == 1)
                    {
                      uint64_t v42 = 0x1020C405E66F15BLL;
                      uint64_t v49 = *(void *)(*(void *)&v11 + 8);
                      if (v49)
                      {
                        uint64_t v50 = *(void *)(*(void *)&v11 + 16);
                        uint64_t v51 = *(void **)(*(void *)&v11 + 8);
                        if (v50 != v49)
                        {
                          do
                            uint64_t v50 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v50 - 32);
                          while (v50 != v49);
                          uint64_t v51 = *(void **)(*(void *)&v11 + 8);
                        }
                        *(void *)(*(void *)&v11 + 16) = v49;
                        uint64_t v43 = v51;
LABEL_129:
                        operator delete(v43);
                      }
                      goto LABEL_130;
                    }
                    break;
                  case 7u:
                    unint64_t v65 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v65 == 1)
                    {
                      uint64_t v66 = *(void **)(*(void *)&v11 + 56);
                      if (v66)
                      {
                        *(void *)(*(void *)&v11 + 64) = v66;
                        operator delete(v66);
                      }
                      uint64_t v67 = *(void **)(*(void *)&v11 + 32);
                      if (v67)
                      {
                        *(void *)(*(void *)&v11 + 40) = v67;
                        operator delete(v67);
                      }
                      uint64_t v42 = 0x10B0C4002311774;
                      double v68 = *(std::__shared_weak_count **)(*(void *)&v11 + 24);
                      if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                        std::__shared_weak_count::__release_weak(v68);
                      }
LABEL_130:
                      MEMORY[0x192FF16B0](*(void *)&v11, v42);
                    }
                    break;
                  default:
                    break;
                }
                switch(v10)
                {
                  case 0u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_188;
                    }
                    if (*((char *)v8 + 31) < 0) {
                      operator delete((void *)v8[1]);
                    }
                    unint64_t v53 = v8;
                    uint64_t v54 = 0x1012C404EF22A49;
                    goto LABEL_187;
                  case 1u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_188;
                    }
                    uint64_t v64 = (void *)v8[1];
                    if (v64)
                    {
                      v8[2] = (atomic_ullong)v64;
                      operator delete(v64);
                    }
                    unint64_t v53 = v8;
                    uint64_t v54 = 0x1080C409938AC02;
                    goto LABEL_187;
                  case 2u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_188;
                    }
                    atomic_ullong v60 = v8[1];
                    if (!v60) {
                      goto LABEL_186;
                    }
                    uint64_t v61 = v8[2];
                    unint64_t v62 = (void *)v8[1];
                    if (v61 != v60)
                    {
                      do
                      {
                        v61 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v8 + 3), v61);
                      }
                      while (v61 != v60);
                      unint64_t v62 = (void *)v8[1];
                    }
                    v8[2] = v60;
                    break;
                  case 3u:
                    if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
                      goto LABEL_188;
                    }
                    atomic_ullong v70 = v8[1];
                    if (!v70) {
                      goto LABEL_186;
                    }
                    uint64_t v71 = v8[2];
                    unint64_t v72 = (void *)v8[1];
                    if (v71 != v70)
                    {
                      do
                        uint64_t v71 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v71 - 32);
                      while (v71 != v70);
                      unint64_t v72 = (void *)v8[1];
                    }
                    v8[2] = v70;
                    unint64_t v62 = v72;
                    break;
                  case 7u:
                    goto LABEL_139;
                  default:
                    goto LABEL_188;
                }
                operator delete(v62);
LABEL_186:
                unint64_t v53 = v8;
                uint64_t v54 = 0x1020C405E66F15BLL;
                goto LABEL_187;
              }
            }
            else
            {
              unint64_t v40 = 0;
            }
            unint64_t v100 = v39 - v40;
            uint64_t v101 = &v37->f64[v40];
            do
            {
              *uint64_t v101 = *v101 - *(double *)&v8;
              ++v101;
              --v100;
            }
            while (v100);
            goto LABEL_248;
          case 4:
          case 5:
          case 7:
            goto LABEL_68;
          case 6:
          case 8:
            goto LABEL_255;
          case 9:
            *(void *)&v106[0] = v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>((_DWORD *)v4 + 2, v106);
            goto LABEL_104;
          default:
            goto LABEL_256;
        }
      case 2:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_68;
      case 3:
        double v11 = *(double *)&v4;
        if (((1 << v5) & 0x2B3) != 0) {
          goto LABEL_68;
        }
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
          goto LABEL_68;
        }
        nitro::flexible_type_fail(v4[2] - v4[1] == v8[2] - v8[1]);
        unint64_t v22 = v4[1];
        uint64_t v23 = v4[2] - v22;
        if (!v23) {
          goto LABEL_104;
        }
        unint64_t v24 = v23 >> 3;
        unint64_t v25 = v8[1];
        if (v24 <= 1) {
          unint64_t v24 = 1;
        }
        if (v24 >= 6 && (v22 >= v25 + 8 * v24 || v25 >= v22 + 8 * v24))
        {
          unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
          double v102 = (float64x2_t *)(v25 + 16);
          size_t v103 = (float64x2_t *)(v22 + 16);
          unint64_t v104 = v24 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v105 = vsubq_f64(*v103, *v102);
            v103[-1] = vsubq_f64(v103[-1], v102[-1]);
            *size_t v103 = v105;
            v102 += 2;
            v103 += 2;
            v104 -= 4;
          }
          while (v104);
          double v11 = *(double *)&v4;
          if (v24 == v26) {
            goto LABEL_69;
          }
        }
        else
        {
          unint64_t v26 = 0;
        }
        unint64_t v27 = v24 - v26;
        uint64_t v28 = 8 * v26;
        unint64_t v29 = (double *)(v22 + v28);
        uint64_t v30 = (double *)(v25 + v28);
        do
        {
          double v31 = *v30++;
          double *v29 = *v29 - v31;
          ++v29;
          --v27;
        }
        while (v27);
LABEL_248:
        double v11 = *(double *)&v4;
        goto LABEL_69;
      case 4:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_68;
      case 5:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_68;
      case 6:
      case 8:
LABEL_255:
        __break(1u);
        goto LABEL_256;
      case 7:
        double v11 = *(double *)&v4;
        if (v5 == 2)
        {
          double v11 = *(double *)&v4;
          if (*v4 != 1) {
            operator new();
          }
        }
        goto LABEL_68;
      case 9:
        double v11 = *(double *)&v4;
        if (((1 << v5) & 0xBB) != 0) {
          goto LABEL_68;
        }
        if (v5 != 2)
        {
          nitro::ndarray_container::operator-=((_DWORD *)v4 + 2, (_DWORD *)v8 + 2);
LABEL_104:
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = *(double *)&v4;
          double v11 = *(double *)&v4;
          *(unsigned char *)(a2 + 24) = v5;
          goto LABEL_105;
        }
        double v11 = *(double *)&v4;
        if (*v4 != 1) {
          operator new();
        }
LABEL_68:
        nitro::flexible_type_fail(0);
        goto LABEL_69;
      default:
LABEL_256:
        JUMPOUT(0);
    }
  }
LABEL_21:
  atomic_fetch_add(v8, 1uLL);
  nitro::ndarray_container::negate((nitro::ndarray_container *)(v8 + 1));
  atomic_fetch_add(v8, 1uLL);
  switch((int)v5)
  {
    case 1:
      *(void *)&v106[0] = v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v8 + 2, v106);
      goto LABEL_23;
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      nitro::flexible_type_fail(0);
      goto LABEL_23;
    case 6:
      goto LABEL_255;
    default:
      v106[0] = (double)(uint64_t)v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<double>(double)::{lambda(double)#1}>((_DWORD *)v8 + 2, v106);
LABEL_23:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(double *)(a2 + 16) = *(double *)&v8;
      *(unsigned char *)(a2 + 24) = 9;
      atomic_fetch_add(v8, 1uLL);
      unint64_t v13 = atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL);
      if (*(double *)&v8 != 0.0 && v13 == 1)
      {
        uint64_t v14 = (void *)v8[7];
        if (v14)
        {
          v8[8] = (atomic_ullong)v14;
          operator delete(v14);
        }
        uint64_t v15 = (void *)v8[4];
        if (v15)
        {
          v8[5] = (atomic_ullong)v15;
          operator delete(v15);
        }
        unint64_t v16 = (std::__shared_weak_count *)v8[3];
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        MEMORY[0x192FF16B0](v8, 0x10B0C4002311774);
      }
      unint64_t v17 = atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL);
      if (*(double *)&v8 != 0.0 && v17 == 1)
      {
        uint64_t v18 = (void *)v8[7];
        if (v18)
        {
          v8[8] = (atomic_ullong)v18;
          operator delete(v18);
        }
        uint64_t v19 = (void *)v8[4];
        if (v19)
        {
          v8[5] = (atomic_ullong)v19;
          operator delete(v19);
        }
        uint64_t v20 = (std::__shared_weak_count *)v8[3];
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
        MEMORY[0x192FF16B0](v8, 0x10B0C4002311774);
      }
      break;
  }
LABEL_139:
  if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || v8 == 0) {
    goto LABEL_188;
  }
  float64x2_t v56 = (void *)v8[7];
  if (v56)
  {
    v8[8] = (atomic_ullong)v56;
    operator delete(v56);
  }
  uint64_t v57 = (void *)v8[4];
  if (v57)
  {
    v8[5] = (atomic_ullong)v57;
    operator delete(v57);
  }
  uint64_t v58 = (std::__shared_weak_count *)v8[3];
  if (v58 && !atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
  }
  unint64_t v53 = v8;
  uint64_t v54 = 0x10B0C4002311774;
LABEL_187:
  MEMORY[0x192FF16B0](v53, v54);
LABEL_188:
  switch(v6)
  {
    case 0u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        if (*((char *)v4 + 31) < 0) {
          operator delete((void *)v4[1]);
        }
        double v74 = v4;
        uint64_t v75 = 0x1012C404EF22A49;
        goto LABEL_235;
      }
      break;
    case 1u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        uint64_t v81 = (void *)v4[1];
        if (v81)
        {
          v4[2] = (atomic_ullong)v81;
          operator delete(v81);
        }
        double v74 = v4;
        uint64_t v75 = 0x1080C409938AC02;
        goto LABEL_235;
      }
      break;
    case 2u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        atomic_ullong v77 = v4[1];
        if (!v77) {
          goto LABEL_222;
        }
        uint64_t v78 = v4[2];
        uint64_t v79 = (void *)v4[1];
        if (v78 != v77)
        {
          do
          {
            v78 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v4 + 3), v78);
          }
          while (v78 != v77);
          uint64_t v79 = (void *)v4[1];
        }
        v4[2] = v77;
        goto LABEL_221;
      }
      break;
    case 3u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        atomic_ullong v83 = v4[1];
        if (v83)
        {
          uint64_t v84 = v4[2];
          uint64_t v85 = (void *)v4[1];
          if (v84 != v83)
          {
            do
              uint64_t v84 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v84 - 32);
            while (v84 != v83);
            uint64_t v85 = (void *)v4[1];
          }
          v4[2] = v83;
          uint64_t v79 = v85;
LABEL_221:
          operator delete(v79);
        }
LABEL_222:
        double v74 = v4;
        uint64_t v75 = 0x1020C405E66F15BLL;
        goto LABEL_235;
      }
      break;
    case 7u:
      if (atomic_fetch_add(v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4 != 0)
      {
        uint64_t v87 = (void *)v4[7];
        if (v87)
        {
          unsigned char v4[8] = (atomic_ullong)v87;
          operator delete(v87);
        }
        uint64_t v88 = (void *)v4[4];
        if (v88)
        {
          v4[5] = (atomic_ullong)v88;
          operator delete(v88);
        }
        uint64_t v89 = (std::__shared_weak_count *)v4[3];
        if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
          std::__shared_weak_count::__release_weak(v89);
        }
        double v74 = v4;
        uint64_t v75 = 0x10B0C4002311774;
LABEL_235:
        MEMORY[0x192FF16B0](v74, v75);
      }
      break;
    default:
      return;
  }
}

void sub_1925D1FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 1:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v9 = *(void **)(v2 + 8);
      if (v9)
      {
        *(void *)(v2 + 16) = v9;
        operator delete(v9);
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1080C409938AC02;
      goto LABEL_49;
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v11 = *(void *)(v2 + 8);
      if (!v11) {
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)(v2 + 16);
      unint64_t v13 = *(void **)(v2 + 8);
      if (v12 != v11)
      {
        do
        {
          v12 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v12);
        }
        while (v12 != v11);
        unint64_t v13 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v11;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v15 = *(void *)(v2 + 8);
      if (!v15) {
        goto LABEL_35;
      }
      uint64_t v16 = *(void *)(v2 + 16);
      unint64_t v17 = *(void **)(v2 + 8);
      if (v16 != v15)
      {
        do
          uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
        while (v16 != v15);
        unint64_t v17 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v15;
      unint64_t v13 = v17;
LABEL_34:
      operator delete(v13);
LABEL_35:
      uint64_t v6 = v2;
      uint64_t v7 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 7:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v19 = *(void **)(v2 + 56);
      if (v19)
      {
        *(void *)(v2 + 64) = v19;
        operator delete(v19);
        uint64_t v20 = *(void **)(v2 + 32);
        if (!v20)
        {
LABEL_42:
          double v21 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v21) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v20 = *(void **)(v2 + 32);
        if (!v20) {
          goto LABEL_42;
        }
      }
      *(void *)(v2 + 40) = v20;
      operator delete(v20);
      double v21 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v21)
      {
LABEL_48:
        uint64_t v6 = v2;
        uint64_t v7 = 0x10B0C4002311774;
LABEL_49:
        MEMORY[0x192FF16B0](v6, v7);
        _Unwind_Resume(a1);
      }
LABEL_46:
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      goto LABEL_48;
    default:
LABEL_50:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_1>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v60, (uint64_t)a1);
      if (v63 == v62 || v60 == 0) {
        goto LABEL_46;
      }
      unint64_t v4 = (char *)v63 - (unsigned char *)v62 - 8;
      if (v4 < 8)
      {
        uint64_t v5 = 1;
        uint64_t v6 = (uint64_t *)v62;
        do
        {
LABEL_42:
          uint64_t v32 = *v6++;
          v5 *= v32;
        }
        while (v6 != v63);
        goto LABEL_43;
      }
      uint64_t v27 = (v4 >> 3) + 1;
      uint64_t v6 = (uint64_t *)((char *)v62 + 8 * (v27 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v28 = (char *)v62 + 8;
      uint64_t v29 = 1;
      uint64_t v30 = v27 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v31 = 1;
      do
      {
        v29 *= *(v28 - 1);
        v31 *= *v28;
        v28 += 2;
        v30 -= 2;
      }
      while (v30);
      uint64_t v5 = v31 * v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_42;
      }
LABEL_43:
      if (v5)
      {
        double v33 = *a2;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        if ((char *)v63 - (unsigned char *)v62 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator-=<double>(double)::{lambda(int &)#1}>(&v60, v33);
      }
LABEL_46:
      if (v64)
      {
        unint64_t v65 = v64;
        operator delete(v64);
      }
      if (v62)
      {
        unint64_t v63 = (uint64_t *)v62;
        operator delete(v62);
      }
      unint64_t v26 = v61;
      if (!v61) {
        return;
      }
      goto LABEL_77;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v66, (uint64_t)a1);
      if (v69 == v68 || v66 == 0) {
        goto LABEL_59;
      }
      unint64_t v12 = v69 - v68 - 8;
      if (v12 < 8)
      {
        uint64_t v13 = 1;
        uint64_t v14 = v68;
        do
        {
LABEL_55:
          uint64_t v39 = *(void *)v14;
          v14 += 8;
          v13 *= v39;
        }
        while (v14 != v69);
        goto LABEL_56;
      }
      uint64_t v34 = (v12 >> 3) + 1;
      uint64_t v14 = &v68[8 * (v34 & 0x3FFFFFFFFFFFFFFELL)];
      double v35 = v68 + 8;
      uint64_t v36 = 1;
      uint64_t v37 = v34 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v38 = 1;
      do
      {
        v36 *= *(v35 - 1);
        v38 *= *v35;
        v35 += 2;
        v37 -= 2;
      }
      while (v37);
      uint64_t v13 = v38 * v36;
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_55;
      }
LABEL_56:
      if (v13)
      {
        double v40 = *a2;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        if (v69 - v68 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<double>(double)::{lambda(unsigned char &)#1}>(&v66, v40);
      }
LABEL_59:
      if (v70)
      {
        uint64_t v71 = v70;
        operator delete(v70);
      }
      if (v68)
      {
        uint64_t v69 = v68;
        operator delete(v68);
      }
      unint64_t v26 = v67;
      if (!v67) {
        return;
      }
      goto LABEL_77;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v48, (uint64_t)a1);
      if (v51 == v50 || v48 == 0) {
        goto LABEL_72;
      }
      unint64_t v16 = (char *)v51 - (unsigned char *)v50 - 8;
      if (v16 < 8)
      {
        uint64_t v17 = 1;
        uint64_t v18 = (uint64_t *)v50;
        do
        {
LABEL_68:
          uint64_t v46 = *v18++;
          v17 *= v46;
        }
        while (v18 != v51);
        goto LABEL_69;
      }
      uint64_t v41 = (v16 >> 3) + 1;
      uint64_t v18 = (uint64_t *)((char *)v50 + 8 * (v41 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v42 = (char *)v50 + 8;
      uint64_t v43 = 1;
      uint64_t v44 = v41 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v45 = 1;
      do
      {
        v43 *= *(v42 - 1);
        v45 *= *v42;
        v42 += 2;
        v44 -= 2;
      }
      while (v44);
      uint64_t v17 = v45 * v43;
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_68;
      }
LABEL_69:
      if (v17)
      {
        double v47 = *a2;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        if ((char *)v51 - (unsigned char *)v50 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator-=<double>(double)::{lambda(float &)#1}>(&v48, v47);
      }
LABEL_72:
      if (v52)
      {
        unint64_t v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        uint64_t v51 = (uint64_t *)v50;
        operator delete(v50);
      }
      unint64_t v26 = v49;
      if (v49) {
        goto LABEL_77;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v54, (uint64_t)a1);
      if (v57 == v56 || v54 == 0) {
        goto LABEL_33;
      }
      unint64_t v8 = (char *)v57 - (unsigned char *)v56 - 8;
      if (v8 < 8)
      {
        uint64_t v9 = 1;
        unsigned int v10 = (uint64_t *)v56;
        do
        {
LABEL_29:
          uint64_t v24 = *v10++;
          v9 *= v24;
        }
        while (v10 != v57);
        goto LABEL_30;
      }
      uint64_t v19 = (v8 >> 3) + 1;
      unsigned int v10 = (uint64_t *)((char *)v56 + 8 * (v19 & 0x3FFFFFFFFFFFFFFELL));
      uint64_t v20 = (char *)v56 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v9 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_29;
      }
LABEL_30:
      if (v9)
      {
        double v25 = *a2;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        if ((char *)v57 - (unsigned char *)v56 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator-=<double>(double)::{lambda(half &)#1}>(&v54, v25);
      }
LABEL_33:
      if (__p)
      {
        uint64_t v59 = __p;
        operator delete(__p);
      }
      if (v56)
      {
        uint64_t v57 = (uint64_t *)v56;
        operator delete(v56);
      }
      unint64_t v26 = v55;
      if (v55)
      {
LABEL_77:
        if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_1925D2CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::ndarray<float>::~ndarray(va);
  _Unwind_Resume(a1);
}

void sub_1925D2D30(_Unwind_Exception *a1)
{
  unint64_t v3 = *(void **)(v1 - 40);
  if (v3)
  {
    *(void *)(v1 - 32) = v3;
    operator delete(v3);
  }
  nitro::ndarray<float>::~ndarray((void *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1925D2D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v30 = *(void **)(v28 - 40);
  if (v30)
  {
    *(void *)(v28 - 32) = v30;
    operator delete(v30);
  }
  nitro::ndarray<float>::~ndarray(&a28);
  _Unwind_Resume(a1);
}

void sub_1925D2D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  uint64_t v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
  }
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned int v10 = __p;
      }
      else {
        unsigned int v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925D304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator-=<double>(double)::{lambda(unsigned char &)#1}>(void *a1, double a2)
{
  uint64_t v2 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  uint64_t v4 = v3 - v2;
  if (v3 == v2 || !*a1) {
    return;
  }
  double v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *(void *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  unint64_t v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  unint64_t v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  unsigned int v10 = v2 + 8;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  unint64_t v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    unint64_t v24 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v25 = 0;
      uint64_t v26 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v27 = 0;
          uint64_t v28 = v26;
          do
          {
            if (*((void *)v2 + 2))
            {
              unint64_t v30 = 0;
              uint64_t v31 = v28;
              do
              {
                LOBYTE(a2) = *(unsigned char *)(*a1 + v31);
                a2 = (double)*(unint64_t *)&a2 - v6;
                *(unsigned char *)(*a1 + v31) = (int)a2;
                uint64_t v29 = (void *)a1[5];
                v31 += v29[2];
                ++v30;
                uint64_t v2 = (char *)a1[2];
              }
              while (v30 < *((void *)v2 + 2));
            }
            else
            {
              uint64_t v29 = (void *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((void *)v2 + 1));
          unint64_t v24 = *(void *)v2;
        }
        else
        {
          uint64_t v29 = (void *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(void *)v2)
        {
          unint64_t v16 = 0;
          uint64_t v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v17);
            a2 = (double)*(unint64_t *)&a2 - v6;
            *(unsigned char *)(*a1 + v17) = (int)a2;
            v17 += *(void *)a1[5];
            ++v16;
          }
          while (v16 < *(void *)a1[2]);
        }
        return;
      }
      if (v4 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v4 >> 3;
      }
      while (1)
      {
        uint64_t v35 = a1[5];
        if (v34 < 2) {
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        double v40 = (void *)(v35 + 8);
        unint64_t v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        uint64_t v36 = v39 + v38;
        unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_47;
        }
LABEL_49:
        LOBYTE(v33) = *(unsigned char *)(*a1 + v36);
        double v33 = (double)*(unint64_t *)&v33 - v6;
        *(unsigned char *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          uint64_t v50 = a1[2];
          uint64_t v51 = ((unint64_t)v4 >> 3) + 1;
          unint64_t v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            uint64_t v53 = (v51 - 2);
            unint64_t v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(void *)(v50 + v53 * 8)) {
              break;
            }
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1) {
              goto LABEL_55;
            }
          }
          if ((int)v52 > 0) {
            continue;
          }
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0;
LABEL_47:
      unint64_t v43 = v34 - v37;
      uint64_t v44 = v37;
      uint64_t v45 = (uint64_t *)(v35 + v44 * 8);
      uint64_t v46 = &v32[v44];
      do
      {
        uint64_t v48 = *v46++;
        uint64_t v47 = v48;
        uint64_t v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    unint64_t v18 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v19 = 0;
      uint64_t v20 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v22 = 0;
          uint64_t v23 = v20;
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v23);
            a2 = (double)*(unint64_t *)&a2 - v6;
            *(unsigned char *)(*a1 + v23) = (int)a2;
            uint64_t v21 = (void *)a1[5];
            v23 += v21[1];
            ++v22;
            uint64_t v2 = (char *)a1[2];
          }
          while (v22 < *((void *)v2 + 1));
          unint64_t v18 = *(void *)v2;
        }
        else
        {
          uint64_t v21 = (void *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_1925D341C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator-=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v56 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v57 = 0;
    uint64_t v58 = a1[8];
    unint64_t v59 = v3[1];
    uint64_t v60 = (uint64_t *)a1[5];
    uint64_t v61 = *v60;
    float64x2_t v62 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v63 = v6 + 4 * v58 + 16;
    uint64_t v64 = 4 * *v60;
    while (!v59)
    {
LABEL_38:
      v58 += v61;
      ++v57;
      v63 += v64;
      if (v57 == v56) {
        return;
      }
    }
    uint64_t v65 = 0;
    unint64_t v66 = v3[2];
    uint64_t v67 = v60[1];
    unint64_t v68 = v66 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v69 = v63;
    uint64_t v70 = v58;
    while (1)
    {
      if (v66)
      {
        unint64_t v71 = 0;
        uint64_t v72 = v60[2];
        uint64_t v73 = v70;
        if (v66 < 8)
        {
          double v74 = a2;
        }
        else
        {
          double v74 = a2;
          if (v72 == 1)
          {
            uint64_t v73 = v70 + v68;
            uint64_t v75 = v69;
            unint64_t v76 = v66 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v77 = *(_OWORD *)(v75 - 16);
              v78.i64[0] = SDWORD2(v77);
              v78.i64[1] = SHIDWORD(v77);
              float64x2_t v79 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)v77;
              v78.i64[1] = SDWORD1(v77);
              float64x2_t v80 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(void *)(v75 + 8);
              v78.i64[1] = (int)HIDWORD(*(_OWORD *)v75);
              float64x2_t v81 = vcvtq_f64_s64(v78);
              v78.i64[0] = (int)*(_OWORD *)v75;
              v78.i64[1] = (int)HIDWORD(*(void *)v75);
              *(int32x4_t *)(v75 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v80, v62)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v79, v62)));
              *(int32x4_t *)uint64_t v75 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v78), v62)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v81, v62)));
              v75 += 32;
              v76 -= 8;
            }
            while (v76);
            unint64_t v71 = v66 & 0xFFFFFFFFFFFFFFF8;
            double v74 = a2;
            if (v66 == v68) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v82 = v66 - v71;
        uint64_t v83 = 4 * v72;
        uint64_t v84 = (int *)(v6 + 4 * v73);
        do
        {
          *uint64_t v84 = (int)((double)*v84 - v74);
          uint64_t v84 = (int *)((char *)v84 + v83);
          --v82;
        }
        while (v82);
      }
LABEL_41:
      v70 += v67;
      ++v65;
      v69 += 4 * v67;
      if (v65 == v59) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v32 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v33 = 0;
    uint64_t v34 = a1[8];
    unint64_t v35 = v3[1];
    uint64_t v36 = (uint64_t *)a1[5];
    uint64_t v37 = *v36;
    unint64_t v38 = v35 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v39 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v40 = v6 + 4 * v34 + 16;
    uint64_t v41 = 4 * *v36;
    while (1)
    {
      if (v35)
      {
        unint64_t v42 = 0;
        uint64_t v43 = v36[1];
        uint64_t v44 = v34;
        if (v35 < 8)
        {
          double v45 = a2;
        }
        else
        {
          double v45 = a2;
          if (v43 == 1)
          {
            uint64_t v44 = v34 + v38;
            uint64_t v46 = v40;
            unint64_t v47 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v48 = *(_OWORD *)(v46 - 16);
              v49.i64[0] = SDWORD2(v48);
              v49.i64[1] = SHIDWORD(v48);
              float64x2_t v50 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)v48;
              v49.i64[1] = SDWORD1(v48);
              float64x2_t v51 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(void *)(v46 + 8);
              v49.i64[1] = (int)HIDWORD(*(_OWORD *)v46);
              float64x2_t v52 = vcvtq_f64_s64(v49);
              v49.i64[0] = (int)*(_OWORD *)v46;
              v49.i64[1] = (int)HIDWORD(*(void *)v46);
              *(int32x4_t *)(v46 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v51, v39)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v50, v39)));
              *(int32x4_t *)uint64_t v46 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v49), v39)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v52, v39)));
              v46 += 32;
              v47 -= 8;
            }
            while (v47);
            unint64_t v42 = v35 & 0xFFFFFFFFFFFFFFF8;
            double v45 = a2;
            if (v35 == v38) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v53 = v35 - v42;
        uint64_t v54 = 4 * v43;
        uint64_t v55 = (int *)(v6 + 4 * v44);
        do
        {
          int *v55 = (int)((double)*v55 - v45);
          uint64_t v55 = (int *)((char *)v55 + v54);
          --v53;
        }
        while (v53);
      }
LABEL_24:
      v34 += v37;
      ++v33;
      v40 += v41;
      if (v33 == v32) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v85 = operator new(v4);
    bzero(v85, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v86 = 1;
    }
    else {
      unint64_t v86 = v4 >> 3;
    }
    uint64_t v87 = a1[5];
    while (v86 >= 2)
    {
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = v86 & 0x1FFFFFFFFFFFFFFELL;
      float64x2_t v93 = (void *)(v87 + 8);
      unint64_t v94 = v85 + 1;
      do
      {
        v90 += *(v93 - 1) * *(v94 - 1);
        v91 += *v93 * *v94;
        v94 += 2;
        v93 += 2;
        v92 -= 2;
      }
      while (v92);
      uint64_t v88 = v91 + v90;
      uint64_t v89 = v86 & 0x1FFFFFFFFFFFFFFELL;
      if (v86 != (v86 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      *(_DWORD *)(v6 + 4 * v88) = (int)((double)*(int *)(v6 + 4 * v88) - a2);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v102 = (v4 >> 3) + 1;
        size_t v103 = v4 >> 3;
        while (1)
        {
          uint64_t v104 = (v102 - 2);
          unint64_t v105 = v85[v104] + 1;
          v85[v104] = v105;
          if (v105 < v3[v104]) {
            break;
          }
          v85[(v102 - 2)] = 0;
          LODWORD(v103) = v103 - 1;
          if ((unint64_t)--v102 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v103 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v85);
      return;
    }
    uint64_t v88 = 0;
    uint64_t v89 = 0;
LABEL_63:
    unint64_t v95 = v86 - v89;
    uint64_t v96 = v89;
    uint64_t v97 = (uint64_t *)(v87 + 8 * v89);
    unint64_t v98 = &v85[v96];
    do
    {
      uint64_t v100 = *v98++;
      uint64_t v99 = v100;
      uint64_t v101 = *v97++;
      v88 += v101 * v99;
      --v95;
    }
    while (v95);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = v6 + 4 * v18 + 16;
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *(_OWORD *)(v22 - 16);
      v25.i64[0] = SDWORD2(v24);
      v25.i64[1] = SHIDWORD(v24);
      float64x2_t v26 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)v24;
      v25.i64[1] = SDWORD1(v24);
      float64x2_t v27 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(void *)(v22 + 8);
      v25.i64[1] = (int)HIDWORD(*(_OWORD *)v22);
      float64x2_t v28 = vcvtq_f64_s64(v25);
      v25.i64[0] = (int)*(_OWORD *)v22;
      v25.i64[1] = (int)HIDWORD(*(void *)v22);
      *(int32x4_t *)(v22 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(v27, v21)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v26, v21)));
      *(int32x4_t *)uint64_t v22 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vsubq_f64(vcvtq_f64_s64(v25), v21)), (int32x4_t)vcvtq_s64_f64(vsubq_f64(v28, v21)));
      v22 += 32;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v29 = v16 - v17;
      uint64_t v30 = 4 * v19;
      uint64_t v31 = (int *)(v6 + 4 * v18);
      do
      {
        int *v31 = (int)((double)*v31 - a2);
        uint64_t v31 = (int *)((char *)v31 + v30);
        --v29;
      }
      while (v29);
    }
  }
}

void sub_1925D39B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator-=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v84 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = a1[8];
    unint64_t v87 = v3[1];
    uint64_t v88 = (uint64_t *)a1[5];
    uint64_t v89 = *v88;
    float64x2_t v90 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v91 = (float64x2_t *)(v6 + 2 * v86);
    uint64_t v92 = 2 * *v88;
    while (!v87)
    {
LABEL_38:
      v86 += v89;
      ++v85;
      uint64_t v91 = (float64x2_t *)((char *)v91 + v92);
      if (v85 == v84) {
        return;
      }
    }
    uint64_t v93 = 0;
    unint64_t v94 = v3[2];
    uint64_t v95 = v88[1];
    unint64_t v96 = v94 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v97 = v91;
    uint64_t v98 = v86;
    while (1)
    {
      if (v94)
      {
        unint64_t v99 = 0;
        uint64_t v100 = v88[2];
        uint64_t v101 = v98;
        if (v94 < 8)
        {
          double v102 = a2;
        }
        else
        {
          double v102 = a2;
          if (v100 == 1)
          {
            uint64_t v101 = v98 + v96;
            size_t v103 = v97;
            unint64_t v104 = v94 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v103;
              _H2 = WORD1(*(_OWORD *)v103);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(void *)&v103->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(void *)&v103->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vsubq_f64(_Q1, v90);
              _Q2 = vsubq_f64(_Q4, v90);
              _Q3 = vsubq_f64(_Q3, v90);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vsubq_f64(_Q5, v90);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v103++ = _Q3;
              v104 -= 8;
            }
            while (v104);
            unint64_t v99 = v94 & 0xFFFFFFFFFFFFFFF8;
            double v102 = a2;
            if (v94 == v96) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v119 = v94 - v99;
        uint64_t v120 = 2 * v100;
        uint64_t v121 = (__int16 *)(v6 + 2 * v101);
        do
        {
          _H1 = *v121;
          __asm { FCVT            D1, H1 }
          _D1 = _D1 - v102;
          __asm { FCVT            H1, D1 }
          *uint64_t v121 = LOWORD(_D1);
          uint64_t v121 = (__int16 *)((char *)v121 + v120);
          --v119;
        }
        while (v119);
      }
LABEL_41:
      v98 += v95;
      ++v93;
      uint64_t v97 = (float64x2_t *)((char *)v97 + 2 * v95);
      if (v93 == v87) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v48 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v49 = 0;
    uint64_t v50 = a1[8];
    unint64_t v51 = v3[1];
    float64x2_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    unint64_t v54 = v51 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v55 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    unint64_t v56 = (float64x2_t *)(v6 + 2 * v50);
    uint64_t v57 = 2 * *v52;
    while (1)
    {
      if (v51)
      {
        unint64_t v58 = 0;
        uint64_t v59 = v52[1];
        uint64_t v60 = v50;
        if (v51 < 8)
        {
          double v61 = a2;
        }
        else
        {
          double v61 = a2;
          if (v59 == 1)
          {
            uint64_t v60 = v50 + v54;
            float64x2_t v62 = v56;
            unint64_t v63 = v51 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q1 = *v62;
              _H2 = WORD1(*(_OWORD *)v62);
              __asm
              {
                FCVT            D2, H2
                FCVT            D3, H1
              }
              _Q3.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(*(void *)&v62->f64[0]);
              __asm { FCVT            D2, H2 }
              _H4 = WORD2(*(void *)&v62->f64[0]);
              __asm { FCVT            D4, H4 }
              _Q4.f64[1] = _D2;
              *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
              LOWORD(_D2) = WORD1(_Q1.f64[0]);
              __asm
              {
                FCVT            D2, H2
                FCVT            D5, H1
              }
              _Q5.f64[1] = _D2;
              LOWORD(_D2) = HIWORD(_Q1.f64[0]);
              __asm { FCVT            D2, H2 }
              LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
              __asm { FCVT            D1, H1 }
              _Q1.f64[1] = _D2;
              _Q1 = vsubq_f64(_Q1, v55);
              _Q2 = vsubq_f64(_Q4, v55);
              _Q3 = vsubq_f64(_Q3, v55);
              _Q4.f64[0] = _Q3.f64[1];
              __asm
              {
                FCVT            H4, D4
                FCVT            H3, D3
              }
              WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              __asm { FCVT            H4, D2 }
              WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
              _Q2 = vsubq_f64(_Q5, v55);
              __asm { FCVT            H4, D2 }
              LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
              _Q2.f64[0] = _Q2.f64[1];
              __asm { FCVT            H2, D2 }
              WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              __asm { FCVT            H2, D1 }
              WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
              *v62++ = _Q3;
              v63 -= 8;
            }
            while (v63);
            unint64_t v58 = v51 & 0xFFFFFFFFFFFFFFF8;
            double v61 = a2;
            if (v51 == v54) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v78 = v51 - v58;
        uint64_t v79 = 2 * v59;
        float64x2_t v80 = (__int16 *)(v6 + 2 * v60);
        do
        {
          _H1 = *v80;
          __asm { FCVT            D1, H1 }
          _D1 = _D1 - v61;
          __asm { FCVT            H1, D1 }
          *float64x2_t v80 = LOWORD(_D1);
          float64x2_t v80 = (__int16 *)((char *)v80 + v79);
          --v78;
        }
        while (v78);
      }
LABEL_24:
      v50 += v53;
      ++v49;
      unint64_t v56 = (float64x2_t *)((char *)v56 + v57);
      if (v49 == v48) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v125 = operator new(v4);
    bzero(v125, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v126 = 1;
    }
    else {
      unint64_t v126 = v4 >> 3;
    }
    uint64_t v127 = a1[5];
    while (v126 >= 2)
    {
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      uint64_t v132 = v126 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v133 = (void *)(v127 + 8);
      uint64_t v134 = v125 + 1;
      do
      {
        v130 += *(v133 - 1) * *(v134 - 1);
        v131 += *v133 * *v134;
        v134 += 2;
        v133 += 2;
        v132 -= 2;
      }
      while (v132);
      uint64_t v128 = v131 + v130;
      uint64_t v129 = v126 & 0x1FFFFFFFFFFFFFFELL;
      if (v126 != (v126 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v142 = 2 * v128;
      _H0 = *(_WORD *)(v6 + v142);
      __asm { FCVT            D0, H0 }
      _D0 = _D0 - a2;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v142) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v146 = (v4 >> 3) + 1;
        size_t v147 = v4 >> 3;
        while (1)
        {
          uint64_t v148 = (v146 - 2);
          unint64_t v149 = v125[v148] + 1;
          v125[v148] = v149;
          if (v149 < v3[v148]) {
            break;
          }
          v125[(v146 - 2)] = 0;
          LODWORD(v147) = v147 - 1;
          if ((unint64_t)--v146 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v147 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v125);
      return;
    }
    uint64_t v128 = 0;
    uint64_t v129 = 0;
LABEL_63:
    unint64_t v135 = v126 - v129;
    uint64_t v136 = v129;
    uint64_t v137 = (uint64_t *)(v127 + 8 * v129);
    unsigned __int8 v138 = &v125[v136];
    do
    {
      uint64_t v140 = *v138++;
      uint64_t v139 = v140;
      uint64_t v141 = *v137++;
      v128 += v141 * v139;
      --v135;
    }
    while (v135);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = (float64x2_t *)(v6 + 2 * v18);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q1 = *v22;
      _H2 = WORD1(*(_OWORD *)v22);
      __asm
      {
        FCVT            D2, H2
        FCVT            D3, H1
      }
      _Q3.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(*(void *)&v22->f64[0]);
      __asm { FCVT            D2, H2 }
      _H4 = WORD2(*(void *)&v22->f64[0]);
      __asm { FCVT            D4, H4 }
      _Q4.f64[1] = _D2;
      *(void *)&_Q1.f64[0] = vextq_s8((int8x16_t)_Q1, (int8x16_t)_Q1, 8uLL).u64[0];
      LOWORD(_D2) = WORD1(_Q1.f64[0]);
      __asm
      {
        FCVT            D2, H2
        FCVT            D5, H1
      }
      _Q5.f64[1] = _D2;
      LOWORD(_D2) = HIWORD(_Q1.f64[0]);
      __asm { FCVT            D2, H2 }
      LOWORD(_Q1.f64[0]) = WORD2(_Q1.f64[0]);
      __asm { FCVT            D1, H1 }
      _Q1.f64[1] = _D2;
      _Q1 = vsubq_f64(_Q1, v21);
      _Q2 = vsubq_f64(_Q4, v21);
      _Q3 = vsubq_f64(_Q3, v21);
      _Q4.f64[0] = _Q3.f64[1];
      __asm
      {
        FCVT            H4, D4
        FCVT            H3, D3
      }
      WORD1(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      __asm { FCVT            H4, D2 }
      WORD2(_Q3.f64[0]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      HIWORD(_Q3.f64[0]) = LOWORD(_Q2.f64[0]);
      _Q2 = vsubq_f64(_Q5, v21);
      __asm { FCVT            H4, D2 }
      LOWORD(_Q3.f64[1]) = LOWORD(_Q4.f64[0]);
      _Q2.f64[0] = _Q2.f64[1];
      __asm { FCVT            H2, D2 }
      WORD1(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      __asm { FCVT            H2, D1 }
      WORD2(_Q3.f64[1]) = LOWORD(_Q2.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q3.f64[1]) = LOWORD(_Q1.f64[0]);
      *v22++ = _Q3;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v42 = v16 - v17;
      uint64_t v43 = 2 * v19;
      uint64_t v44 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v44;
        __asm { FCVT            D0, H0 }
        _D0 = _D0 - a2;
        __asm { FCVT            H0, D0 }
        *uint64_t v44 = LOWORD(_D0);
        uint64_t v44 = (__int16 *)((char *)v44 + v43);
        --v42;
      }
      while (v42);
    }
  }
}

void sub_1925D404C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator-=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v50 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v51 = 0;
    uint64_t v52 = a1[8];
    unint64_t v53 = v3[1];
    unint64_t v54 = (uint64_t *)a1[5];
    uint64_t v55 = *v54;
    float64x2_t v56 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v57 = v6 + 4 * v52 + 16;
    uint64_t v58 = 4 * *v54;
    while (!v53)
    {
LABEL_38:
      v52 += v55;
      ++v51;
      v57 += v58;
      if (v51 == v50) {
        return;
      }
    }
    uint64_t v59 = 0;
    unint64_t v60 = v3[2];
    uint64_t v61 = v54[1];
    unint64_t v62 = v60 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v63 = (float32x2_t *)v57;
    uint64_t v64 = v52;
    while (1)
    {
      if (v60)
      {
        unint64_t v65 = 0;
        uint64_t v66 = v54[2];
        uint64_t v67 = v64;
        if (v60 < 8)
        {
          double v68 = a2;
        }
        else
        {
          double v68 = a2;
          if (v66 == 1)
          {
            uint64_t v67 = v64 + v62;
            uint64_t v69 = v63;
            unint64_t v70 = v60 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v69), v56)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v69->f32), v56));
              *(float32x4_t *)v69[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v69[-2]), v56)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v69[-2].f32), v56));
              *(float32x4_t *)v69->f32 = v71;
              v69 += 4;
              v70 -= 8;
            }
            while (v70);
            unint64_t v65 = v60 & 0xFFFFFFFFFFFFFFF8;
            double v68 = a2;
            if (v60 == v62) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v72 = v60 - v65;
        uint64_t v73 = 4 * v66;
        double v74 = (float *)(v6 + 4 * v67);
        do
        {
          float v75 = *v74 - v68;
          *double v74 = v75;
          double v74 = (float *)((char *)v74 + v73);
          --v72;
        }
        while (v72);
      }
LABEL_41:
      v64 += v61;
      ++v59;
      unint64_t v63 = (float32x2_t *)((char *)v63 + 4 * v61);
      if (v59 == v53) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v29 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v30 = 0;
    uint64_t v31 = a1[8];
    unint64_t v32 = v3[1];
    uint64_t v33 = (uint64_t *)a1[5];
    uint64_t v34 = *v33;
    unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v37 = v6 + 4 * v31 + 16;
    uint64_t v38 = 4 * *v33;
    while (1)
    {
      if (v32)
      {
        unint64_t v39 = 0;
        uint64_t v40 = v33[1];
        uint64_t v41 = v31;
        if (v32 < 8)
        {
          double v42 = a2;
        }
        else
        {
          double v42 = a2;
          if (v40 == 1)
          {
            uint64_t v41 = v31 + v35;
            uint64_t v43 = (float32x2_t *)v37;
            unint64_t v44 = v32 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v43), v36)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v43->f32), v36));
              *(float32x4_t *)v43[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v43[-2]), v36)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v43[-2].f32), v36));
              *(float32x4_t *)v43->f32 = v45;
              v43 += 4;
              v44 -= 8;
            }
            while (v44);
            unint64_t v39 = v32 & 0xFFFFFFFFFFFFFFF8;
            double v42 = a2;
            if (v32 == v35) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v46 = v32 - v39;
        uint64_t v47 = 4 * v40;
        unint64_t v48 = (float *)(v6 + 4 * v41);
        do
        {
          float v49 = *v48 - v42;
          *unint64_t v48 = v49;
          unint64_t v48 = (float *)((char *)v48 + v47);
          --v46;
        }
        while (v46);
      }
LABEL_24:
      v31 += v34;
      ++v30;
      v37 += v38;
      if (v30 == v29) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v76 = operator new(v4);
    bzero(v76, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v77 = 1;
    }
    else {
      unint64_t v77 = v4 >> 3;
    }
    uint64_t v78 = a1[5];
    while (v77 >= 2)
    {
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = v77 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v84 = (void *)(v78 + 8);
      uint64_t v85 = v76 + 1;
      do
      {
        v81 += *(v84 - 1) * *(v85 - 1);
        v82 += *v84 * *v85;
        v85 += 2;
        v84 += 2;
        v83 -= 2;
      }
      while (v83);
      uint64_t v79 = v82 + v81;
      uint64_t v80 = v77 & 0x1FFFFFFFFFFFFFFELL;
      if (v77 != (v77 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v93 = 4 * v79;
      float v94 = *(float *)(v6 + v93) - a2;
      *(float *)(v6 + v93) = v94;
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v95 = (v4 >> 3) + 1;
        size_t v96 = v4 >> 3;
        while (1)
        {
          uint64_t v97 = (v95 - 2);
          unint64_t v98 = v76[v97] + 1;
          v76[v97] = v98;
          if (v98 < v3[v97]) {
            break;
          }
          v76[(v95 - 2)] = 0;
          LODWORD(v96) = v96 - 1;
          if ((unint64_t)--v95 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v96 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v76);
      return;
    }
    uint64_t v79 = 0;
    uint64_t v80 = 0;
LABEL_63:
    unint64_t v86 = v77 - v80;
    uint64_t v87 = v80;
    uint64_t v88 = (uint64_t *)(v78 + 8 * v80);
    uint64_t v89 = &v76[v87];
    do
    {
      uint64_t v91 = *v89++;
      uint64_t v90 = v91;
      uint64_t v92 = *v88++;
      v79 += v92 * v90;
      --v86;
    }
    while (v86);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    float64x2_t v21 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v22 = (float32x2_t *)(v6 + 4 * v18 + 16);
    unint64_t v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*v22), v21)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v22->f32), v21));
      *(float32x4_t *)v22[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(v22[-2]), v21)), vsubq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v22[-2].f32), v21));
      *(float32x4_t *)v22->f32 = v24;
      v22 += 4;
      v23 -= 8;
    }
    while (v23);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v25 = v16 - v17;
      uint64_t v26 = 4 * v19;
      float64x2_t v27 = (float *)(v6 + 4 * v18);
      do
      {
        float v28 = *v27 - a2;
        *float64x2_t v27 = v28;
        float64x2_t v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_1925D4590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator-=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925D46F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925D4708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925D4700);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925D4918(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A280;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A280;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A280;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925D4C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A280;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2::$_2((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v99);
  if (*(void *)&v99[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  double v4 = *(double *)&v100;
  uint64_t v5 = v101;
  unsigned int v6 = v101 - 2;
  BOOL v7 = v6 < 4 || v101 == 9;
  if (v7) {
    atomic_fetch_add(v100, 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v99);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v99);
  if (*(void *)&v99[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  double v8 = *(double *)&v100;
  uint64_t v9 = v101;
  unsigned int v10 = v101 - 2;
  if (v10 < 4)
  {
    atomic_fetch_add(v100, 1uLL);
LABEL_14:
    nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v99);
    if (!v7)
    {
      if (v9 == 9) {
        goto LABEL_21;
      }
      if (v6 > 3) {
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  if (v101 != 9) {
    goto LABEL_14;
  }
  atomic_fetch_add(v100, 1uLL);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v99);
  if (v5 == 9)
  {
LABEL_16:
    atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 1uLL);
LABEL_17:
    switch((int)v5)
    {
      case 0:
        uint64_t v12 = v9;
        double v11 = v4;
        switch(v12)
        {
          case 0:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(void *)(a2 + 16) = *(void *)&v8 * *(void *)&v4;
            *(unsigned char *)(a2 + 24) = 0;
            return;
          case 1:
            double v16 = (double)*(uint64_t *)&v8;
            goto LABEL_86;
          case 2:
            double v11 = v4;
            if (**(void **)&v4 != 1) {
              operator new();
            }
            goto LABEL_58;
          case 3:
            float64x2_t v27 = *(float64x2_t **)(*(void *)&v4 + 8);
            uint64_t v28 = *(void *)(*(void *)&v4 + 16) - (void)v27;
            if (!v28) {
              goto LABEL_95;
            }
            unint64_t v29 = v28 >> 3;
            double v30 = (double)*(uint64_t *)&v8;
            if (v29 <= 1) {
              unint64_t v29 = 1;
            }
            if (v29 < 4)
            {
              unint64_t v31 = 0;
LABEL_231:
              unint64_t v88 = v29 - v31;
              uint64_t v89 = &v27->f64[v31];
              do
              {
                double *v89 = *v89 * v30;
                ++v89;
                --v88;
              }
              while (v88);
              goto LABEL_239;
            }
            unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v85 = v27 + 1;
            unint64_t v86 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              float64x2_t v87 = vmulq_n_f64(*v85, v30);
              v85[-1] = vmulq_n_f64(v85[-1], v30);
              *uint64_t v85 = v87;
              v85 += 2;
              v86 -= 4;
            }
            while (v86);
            double v11 = v4;
            if (v29 != v31) {
              goto LABEL_231;
            }
            break;
          case 4:
          case 5:
          case 7:
            goto LABEL_58;
          case 6:
          case 8:
            goto LABEL_246;
          case 9:
            v99[0] = (double)*(uint64_t *)&v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>((_DWORD *)(*(void *)&v4 + 8), v99);
            goto LABEL_95;
          default:
            goto LABEL_247;
        }
        goto LABEL_59;
      case 1:
        double v11 = v4;
        switch(v5)
        {
          case 0:
            *(void *)&double v11 = (uint64_t)((double)*(uint64_t *)&v4 * v8);
            goto LABEL_87;
          case 1:
            double v16 = v8;
LABEL_86:
            double v11 = v4 * v16;
LABEL_87:
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(double *)(a2 + 16) = v11;
            *(unsigned char *)(a2 + 24) = v5;
            goto LABEL_97;
          case 2:
            double v11 = v4;
            if (**(void **)&v4 != 1) {
              operator new();
            }
            goto LABEL_58;
          case 3:
            unint64_t v32 = *(float64x2_t **)(*(void *)&v4 + 8);
            uint64_t v33 = *(void *)(*(void *)&v4 + 16) - (void)v32;
            if (!v33) {
              goto LABEL_95;
            }
            unint64_t v34 = v33 >> 3;
            if (v34 <= 1) {
              unint64_t v34 = 1;
            }
            if (v34 >= 4)
            {
              unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFFCLL;
              uint64_t v90 = v32 + 1;
              unint64_t v91 = v34 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                float64x2_t v92 = vmulq_n_f64(*v90, v8);
                v90[-1] = vmulq_n_f64(v90[-1], v8);
                *uint64_t v90 = v92;
                v90 += 2;
                v91 -= 4;
              }
              while (v91);
              double v11 = v4;
              if (v34 == v35)
              {
LABEL_59:
                *(void *)a2 = 0;
                *(void *)(a2 + 8) = 0;
                *(double *)(a2 + 16) = v11;
                *(unsigned char *)(a2 + 24) = v5;
                if (v6 < 4 || v5 == 9) {
LABEL_96:
                }
                  atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 1uLL);
LABEL_97:
                switch(v6)
                {
                  case 0u:
                    unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && add == 1)
                    {
                      uint64_t v37 = 0x1012C404EF22A49;
                      if ((*(char *)(*(void *)&v11 + 31) & 0x80000000) == 0) {
                        goto LABEL_121;
                      }
                      uint64_t v38 = *(void **)(*(void *)&v11 + 8);
                      goto LABEL_120;
                    }
                    break;
                  case 1u:
                    unint64_t v42 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v42 == 1)
                    {
                      uint64_t v37 = 0x1080C409938AC02;
                      uint64_t v38 = *(void **)(*(void *)&v11 + 8);
                      if (!v38) {
                        goto LABEL_121;
                      }
                      *(void *)(*(void *)&v11 + 16) = v38;
                      goto LABEL_120;
                    }
                    break;
                  case 2u:
                    unint64_t v39 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v39 == 1)
                    {
                      uint64_t v37 = 0x1020C405E66F15BLL;
                      uint64_t v40 = *(void *)(*(void *)&v11 + 8);
                      if (!v40) {
                        goto LABEL_121;
                      }
                      uint64_t v41 = *(void *)(*(void *)&v11 + 16);
                      uint64_t v38 = *(void **)(*(void *)&v11 + 8);
                      if (v41 != v40)
                      {
                        do
                        {
                          v41 -= 16;
                          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v11 + 24, v41);
                        }
                        while (v41 != v40);
                        uint64_t v38 = *(void **)(*(void *)&v11 + 8);
                      }
                      *(void *)(*(void *)&v11 + 16) = v40;
                      goto LABEL_120;
                    }
                    break;
                  case 3u:
                    unint64_t v43 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v43 == 1)
                    {
                      uint64_t v37 = 0x1020C405E66F15BLL;
                      uint64_t v44 = *(void *)(*(void *)&v11 + 8);
                      if (v44)
                      {
                        uint64_t v45 = *(void *)(*(void *)&v11 + 16);
                        unint64_t v46 = *(void **)(*(void *)&v11 + 8);
                        if (v45 != v44)
                        {
                          do
                            uint64_t v45 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v45 - 32);
                          while (v45 != v44);
                          unint64_t v46 = *(void **)(*(void *)&v11 + 8);
                        }
                        *(void *)(*(void *)&v11 + 16) = v44;
                        uint64_t v38 = v46;
LABEL_120:
                        operator delete(v38);
                      }
                      goto LABEL_121;
                    }
                    break;
                  case 7u:
                    unint64_t v60 = atomic_fetch_add(*(atomic_ullong *volatile *)&v11, 0xFFFFFFFFFFFFFFFFLL);
                    if (v11 != 0.0 && v60 == 1)
                    {
                      uint64_t v61 = *(void **)(*(void *)&v11 + 56);
                      if (v61)
                      {
                        *(void *)(*(void *)&v11 + 64) = v61;
                        operator delete(v61);
                      }
                      unint64_t v62 = *(void **)(*(void *)&v11 + 32);
                      if (v62)
                      {
                        *(void *)(*(void *)&v11 + 40) = v62;
                        operator delete(v62);
                      }
                      uint64_t v37 = 0x10B0C4002311774;
                      unint64_t v63 = *(std::__shared_weak_count **)(*(void *)&v11 + 24);
                      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                        std::__shared_weak_count::__release_weak(v63);
                      }
LABEL_121:
                      MEMORY[0x192FF16B0](*(void *)&v11, v37);
                    }
                    break;
                  default:
                    break;
                }
                switch(v10)
                {
                  case 0u:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v8 == 0)
                    {
                      goto LABEL_179;
                    }
                    if (*(char *)(*(void *)&v8 + 31) < 0) {
                      operator delete(*(void **)(*(void *)&v8 + 8));
                    }
                    double v48 = v8;
                    uint64_t v49 = 0x1012C404EF22A49;
                    goto LABEL_178;
                  case 1u:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v8 == 0)
                    {
                      goto LABEL_179;
                    }
                    uint64_t v59 = *(void **)(*(void *)&v8 + 8);
                    if (v59)
                    {
                      *(void *)(*(void *)&v8 + 16) = v59;
                      operator delete(v59);
                    }
                    double v48 = v8;
                    uint64_t v49 = 0x1080C409938AC02;
                    goto LABEL_178;
                  case 2u:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v8 == 0)
                    {
                      goto LABEL_179;
                    }
                    uint64_t v55 = *(void *)(*(void *)&v8 + 8);
                    if (!v55) {
                      goto LABEL_177;
                    }
                    uint64_t v56 = *(void *)(*(void *)&v8 + 16);
                    uint64_t v57 = *(void **)(*(void *)&v8 + 8);
                    if (v56 != v55)
                    {
                      do
                      {
                        v56 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v8 + 24, v56);
                      }
                      while (v56 != v55);
                      uint64_t v57 = *(void **)(*(void *)&v8 + 8);
                    }
                    *(void *)(*(void *)&v8 + 16) = v55;
                    break;
                  case 3u:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v8 == 0)
                    {
                      goto LABEL_179;
                    }
                    uint64_t v65 = *(void *)(*(void *)&v8 + 8);
                    if (!v65) {
                      goto LABEL_177;
                    }
                    uint64_t v66 = *(void *)(*(void *)&v8 + 16);
                    uint64_t v67 = *(void **)(*(void *)&v8 + 8);
                    if (v66 != v65)
                    {
                      do
                        uint64_t v66 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v66 - 32);
                      while (v66 != v65);
                      uint64_t v67 = *(void **)(*(void *)&v8 + 8);
                    }
                    *(void *)(*(void *)&v8 + 16) = v65;
                    uint64_t v57 = v67;
                    break;
                  case 7u:
                    goto LABEL_130;
                  default:
                    goto LABEL_179;
                }
                operator delete(v57);
LABEL_177:
                double v48 = v8;
                uint64_t v49 = 0x1020C405E66F15BLL;
                goto LABEL_178;
              }
            }
            else
            {
              unint64_t v35 = 0;
            }
            unint64_t v93 = v34 - v35;
            float v94 = &v32->f64[v35];
            do
            {
              *float v94 = *v94 * v8;
              ++v94;
              --v93;
            }
            while (v93);
            goto LABEL_239;
          case 4:
          case 5:
          case 7:
            goto LABEL_58;
          case 6:
          case 8:
            goto LABEL_246;
          case 9:
            v99[0] = v8;
            nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>((_DWORD *)(*(void *)&v4 + 8), v99);
            goto LABEL_95;
          default:
            goto LABEL_247;
        }
      case 2:
        double v11 = v4;
        if (v5 == 2)
        {
          double v11 = v4;
          if (**(void **)&v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 3:
        double v11 = v4;
        if (((1 << v5) & 0x2B3) != 0) {
          goto LABEL_58;
        }
        if (v5 == 2)
        {
          double v11 = v4;
          if (**(void **)&v4 != 1) {
            operator new();
          }
          goto LABEL_58;
        }
        nitro::flexible_type_fail(*(void *)(*(void *)&v4 + 16) - *(void *)(*(void *)&v4 + 8) == *(void *)(*(void *)&v8 + 16) - *(void *)(*(void *)&v8 + 8));
        unint64_t v17 = *(void *)(*(void *)&v4 + 8);
        uint64_t v18 = *(void *)(*(void *)&v4 + 16) - v17;
        if (!v18) {
          goto LABEL_95;
        }
        unint64_t v19 = v18 >> 3;
        unint64_t v20 = *(void *)(*(void *)&v8 + 8);
        if (v19 <= 1) {
          unint64_t v19 = 1;
        }
        if (v19 >= 4 && (v17 >= v20 + 8 * v19 || v20 >= v17 + 8 * v19))
        {
          unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v95 = (float64x2_t *)(v20 + 16);
          size_t v96 = (float64x2_t *)(v17 + 16);
          unint64_t v97 = v19 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v98 = vmulq_f64(*v95, *v96);
            v96[-1] = vmulq_f64(v95[-1], v96[-1]);
            *size_t v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          double v11 = v4;
          if (v19 == v21) {
            goto LABEL_59;
          }
        }
        else
        {
          unint64_t v21 = 0;
        }
        unint64_t v22 = v19 - v21;
        uint64_t v23 = 8 * v21;
        float32x4_t v24 = (double *)(v17 + v23);
        unint64_t v25 = (double *)(v20 + v23);
        do
        {
          double v26 = *v25++;
          *float32x4_t v24 = v26 * *v24;
          ++v24;
          --v22;
        }
        while (v22);
LABEL_239:
        double v11 = v4;
        goto LABEL_59;
      case 4:
        double v11 = v4;
        if (v5 == 2)
        {
          double v11 = v4;
          if (**(void **)&v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 5:
        double v11 = v4;
        if (v5 == 2)
        {
          double v11 = v4;
          if (**(void **)&v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 6:
      case 8:
LABEL_246:
        __break(1u);
        goto LABEL_247;
      case 7:
        double v11 = v4;
        if (v5 == 2)
        {
          double v11 = v4;
          if (**(void **)&v4 != 1) {
            operator new();
          }
        }
        goto LABEL_58;
      case 9:
        double v11 = v4;
        if (((1 << v5) & 0xBB) != 0) {
          goto LABEL_58;
        }
        if (v5 != 2)
        {
          nitro::ndarray_container::operator*=((_DWORD *)(*(void *)&v4 + 8), (_DWORD *)(*(void *)&v8 + 8));
LABEL_95:
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v4;
          double v11 = v4;
          *(unsigned char *)(a2 + 24) = v5;
          goto LABEL_96;
        }
        double v11 = v4;
        if (**(void **)&v4 != 1) {
          operator new();
        }
LABEL_58:
        nitro::flexible_type_fail(0);
        goto LABEL_59;
      default:
LABEL_247:
        JUMPOUT(0);
    }
  }
LABEL_21:
  atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 1uLL);
  switch((int)v5)
  {
    case 1:
      v99[0] = v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>((_DWORD *)(*(void *)&v8 + 8), v99);
      goto LABEL_23;
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
      nitro::flexible_type_fail(0);
      goto LABEL_23;
    case 6:
      goto LABEL_246;
    default:
      v99[0] = (double)*(uint64_t *)&v4;
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>((_DWORD *)(*(void *)&v8 + 8), v99);
LABEL_23:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(double *)(a2 + 16) = v8;
      *(unsigned char *)(a2 + 24) = 9;
      atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 1uLL);
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      if (v8 == 0.0)
      {
        atomic_fetch_add(0, 0xFFFFFFFFFFFFFFFFLL);
        goto LABEL_179;
      }
      int v13 = *(void **)(*(void *)&v8 + 56);
      if (v13)
      {
        *(void *)(*(void *)&v8 + 64) = v13;
        operator delete(v13);
      }
      uint64_t v14 = *(void **)(*(void *)&v8 + 32);
      if (v14)
      {
        *(void *)(*(void *)&v8 + 40) = v14;
        operator delete(v14);
      }
      uint64_t v15 = *(std::__shared_weak_count **)(*(void *)&v8 + 24);
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      MEMORY[0x192FF16B0](*(void *)&v8, 0x10B0C4002311774);
      break;
  }
LABEL_130:
  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v8, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v8 == 0) {
    goto LABEL_179;
  }
  uint64_t v51 = *(void **)(*(void *)&v8 + 56);
  if (v51)
  {
    *(void *)(*(void *)&v8 + 64) = v51;
    operator delete(v51);
  }
  uint64_t v52 = *(void **)(*(void *)&v8 + 32);
  if (v52)
  {
    *(void *)(*(void *)&v8 + 40) = v52;
    operator delete(v52);
  }
  unint64_t v53 = *(std::__shared_weak_count **)(*(void *)&v8 + 24);
  if (v53 && !atomic_fetch_add(&v53->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
  double v48 = v8;
  uint64_t v49 = 0x10B0C4002311774;
LABEL_178:
  MEMORY[0x192FF16B0](*(void *)&v48, v49);
LABEL_179:
  switch(v6)
  {
    case 0u:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
      {
        if (*(char *)(*(void *)&v4 + 31) < 0) {
          operator delete(*(void **)(*(void *)&v4 + 8));
        }
        double v69 = v4;
        uint64_t v70 = 0x1012C404EF22A49;
        goto LABEL_226;
      }
      break;
    case 1u:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
      {
        unint64_t v76 = *(void **)(*(void *)&v4 + 8);
        if (v76)
        {
          *(void *)(*(void *)&v4 + 16) = v76;
          operator delete(v76);
        }
        double v69 = v4;
        uint64_t v70 = 0x1080C409938AC02;
        goto LABEL_226;
      }
      break;
    case 2u:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
      {
        uint64_t v72 = *(void *)(*(void *)&v4 + 8);
        if (!v72) {
          goto LABEL_213;
        }
        uint64_t v73 = *(void *)(*(void *)&v4 + 16);
        double v74 = *(void **)(*(void *)&v4 + 8);
        if (v73 != v72)
        {
          do
          {
            v73 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v4 + 24, v73);
          }
          while (v73 != v72);
          double v74 = *(void **)(*(void *)&v4 + 8);
        }
        *(void *)(*(void *)&v4 + 16) = v72;
        goto LABEL_212;
      }
      break;
    case 3u:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
      {
        uint64_t v78 = *(void *)(*(void *)&v4 + 8);
        if (v78)
        {
          uint64_t v79 = *(void *)(*(void *)&v4 + 16);
          uint64_t v80 = *(void **)(*(void *)&v4 + 8);
          if (v79 != v78)
          {
            do
              uint64_t v79 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v79 - 32);
            while (v79 != v78);
            uint64_t v80 = *(void **)(*(void *)&v4 + 8);
          }
          *(void *)(*(void *)&v4 + 16) = v78;
          double v74 = v80;
LABEL_212:
          operator delete(v74);
        }
LABEL_213:
        double v69 = v4;
        uint64_t v70 = 0x1020C405E66F15BLL;
        goto LABEL_226;
      }
      break;
    case 7u:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
      {
        uint64_t v82 = *(void **)(*(void *)&v4 + 56);
        if (v82)
        {
          *(void *)(*(void *)&v4 + 64) = v82;
          operator delete(v82);
        }
        uint64_t v83 = *(void **)(*(void *)&v4 + 32);
        if (v83)
        {
          *(void *)(*(void *)&v4 + 40) = v83;
          operator delete(v83);
        }
        unint64_t v84 = *(std::__shared_weak_count **)(*(void *)&v4 + 24);
        if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
        double v69 = v4;
        uint64_t v70 = 0x10B0C4002311774;
LABEL_226:
        MEMORY[0x192FF16B0](*(void *)&v69, v70);
      }
      break;
    default:
      return;
  }
}

void sub_1925D5AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  switch(v3)
  {
    case 0:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 1:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v9 = *(void **)(v2 + 8);
      if (v9)
      {
        *(void *)(v2 + 16) = v9;
        operator delete(v9);
      }
      uint64_t v6 = v2;
      uint64_t v7 = 0x1080C409938AC02;
      goto LABEL_49;
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v11 = *(void *)(v2 + 8);
      if (!v11) {
        goto LABEL_35;
      }
      uint64_t v12 = *(void *)(v2 + 16);
      int v13 = *(void **)(v2 + 8);
      if (v12 != v11)
      {
        do
        {
          v12 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2 + 24, v12);
        }
        while (v12 != v11);
        int v13 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v11;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      uint64_t v15 = *(void *)(v2 + 8);
      if (!v15) {
        goto LABEL_35;
      }
      uint64_t v16 = *(void *)(v2 + 16);
      unint64_t v17 = *(void **)(v2 + 8);
      if (v16 != v15)
      {
        do
          uint64_t v16 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v16 - 32);
        while (v16 != v15);
        unint64_t v17 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v15;
      int v13 = v17;
LABEL_34:
      operator delete(v13);
LABEL_35:
      uint64_t v6 = v2;
      uint64_t v7 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 7:
      if (atomic_fetch_add((atomic_ullong *volatile)v2, 0xFFFFFFFFFFFFFFFFLL) != 1 || v2 == 0) {
        goto LABEL_50;
      }
      unint64_t v19 = *(void **)(v2 + 56);
      if (v19)
      {
        *(void *)(v2 + 64) = v19;
        operator delete(v19);
        unint64_t v20 = *(void **)(v2 + 32);
        if (!v20)
        {
LABEL_42:
          unint64_t v21 = *(std::__shared_weak_count **)(v2 + 24);
          if (!v21) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v20 = *(void **)(v2 + 32);
        if (!v20) {
          goto LABEL_42;
        }
      }
      *(void *)(v2 + 40) = v20;
      operator delete(v20);
      unint64_t v21 = *(std::__shared_weak_count **)(v2 + 24);
      if (!v21)
      {
LABEL_48:
        uint64_t v6 = v2;
        uint64_t v7 = 0x10B0C4002311774;
LABEL_49:
        MEMORY[0x192FF16B0](v6, v7);
        _Unwind_Resume(a1);
      }
LABEL_46:
      if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      goto LABEL_48;
    default:
LABEL_50:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_2>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(_DWORD *a1, double *a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v56, (uint64_t)a1);
      if (v59 == v58 || v56 == 0) {
        goto LABEL_32;
      }
      unint64_t v4 = v59 - v58 - 8;
      if (v4 < 8)
      {
        uint64_t v5 = 1;
        uint64_t v6 = v58;
        do
        {
LABEL_29:
          uint64_t v24 = *(void *)v6;
          v6 += 8;
          v5 *= v24;
        }
        while (v6 != v59);
        goto LABEL_30;
      }
      uint64_t v19 = (v4 >> 3) + 1;
      uint64_t v6 = &v58[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      unint64_t v20 = v58 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v5 = v23 * v21;
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_29;
      }
LABEL_30:
      if (v5) {
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator*=<double>(double)::{lambda(int &)#1}>(&v56, *a2);
      }
LABEL_32:
      if (v60)
      {
        uint64_t v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      unint64_t v25 = v57;
      if (!v57) {
        return;
      }
      goto LABEL_73;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v62, (uint64_t)a1);
      if (v65 == v64 || v62 == 0) {
        goto LABEL_56;
      }
      unint64_t v12 = v65 - v64 - 8;
      if (v12 < 8)
      {
        uint64_t v13 = 1;
        uint64_t v14 = v64;
        do
        {
LABEL_53:
          uint64_t v37 = *(void *)v14;
          v14 += 8;
          v13 *= v37;
        }
        while (v14 != v65);
        goto LABEL_54;
      }
      uint64_t v32 = (v12 >> 3) + 1;
      uint64_t v14 = &v64[8 * (v32 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v33 = v64 + 8;
      uint64_t v34 = 1;
      uint64_t v35 = v32 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v36 = 1;
      do
      {
        v34 *= *(v33 - 1);
        v36 *= *v33;
        v33 += 2;
        v35 -= 2;
      }
      while (v35);
      uint64_t v13 = v36 * v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_53;
      }
LABEL_54:
      if (v13) {
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<double>(double)::{lambda(unsigned char &)#1}>(&v62, *a2);
      }
LABEL_56:
      if (v66)
      {
        uint64_t v67 = v66;
        operator delete(v66);
      }
      if (v64)
      {
        uint64_t v65 = v64;
        operator delete(v64);
      }
      unint64_t v25 = v63;
      if (!v63) {
        return;
      }
      goto LABEL_73;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v44, (uint64_t)a1);
      if (v47 == v46 || v44 == 0) {
        goto LABEL_68;
      }
      unint64_t v16 = (char *)v47 - (unsigned char *)v46 - 8;
      if (v16 < 8)
      {
        uint64_t v17 = 1;
        uint64_t v18 = (uint64_t *)v46;
        do
        {
LABEL_65:
          uint64_t v43 = *v18++;
          v17 *= v43;
        }
        while (v18 != v47);
        goto LABEL_66;
      }
      uint64_t v38 = (v16 >> 3) + 1;
      uint64_t v18 = (uint64_t *)((char *)v46 + 8 * (v38 & 0x3FFFFFFFFFFFFFFELL));
      unint64_t v39 = (char *)v46 + 8;
      uint64_t v40 = 1;
      uint64_t v41 = v38 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v42 = 1;
      do
      {
        v40 *= *(v39 - 1);
        v42 *= *v39;
        v39 += 2;
        v41 -= 2;
      }
      while (v41);
      uint64_t v17 = v42 * v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_65;
      }
LABEL_66:
      if (v17) {
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator*=<double>(double)::{lambda(float &)#1}>(&v44, *a2);
      }
LABEL_68:
      if (v48)
      {
        uint64_t v49 = v48;
        operator delete(v48);
      }
      if (v46)
      {
        uint64_t v47 = (uint64_t *)v46;
        operator delete(v46);
      }
      unint64_t v25 = v45;
      if (v45) {
        goto LABEL_73;
      }
      return;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v50, (uint64_t)a1);
      if (v53 == v52 || v50 == 0) {
        goto LABEL_44;
      }
      unint64_t v8 = (char *)v53 - (unsigned char *)v52 - 8;
      if (v8 < 8)
      {
        uint64_t v9 = 1;
        unsigned int v10 = (uint64_t *)v52;
        do
        {
LABEL_41:
          uint64_t v31 = *v10++;
          v9 *= v31;
        }
        while (v10 != v53);
        goto LABEL_42;
      }
      uint64_t v26 = (v8 >> 3) + 1;
      unsigned int v10 = (uint64_t *)((char *)v52 + 8 * (v26 & 0x3FFFFFFFFFFFFFFELL));
      float64x2_t v27 = (char *)v52 + 8;
      uint64_t v28 = 1;
      uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v30 = 1;
      do
      {
        v28 *= *(v27 - 1);
        v30 *= *v27;
        v27 += 2;
        v29 -= 2;
      }
      while (v29);
      uint64_t v9 = v30 * v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_41;
      }
LABEL_42:
      if (v9) {
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator*=<double>(double)::{lambda(half &)#1}>(&v50, *a2);
      }
LABEL_44:
      if (__p)
      {
        uint64_t v55 = __p;
        operator delete(__p);
      }
      if (v52)
      {
        unint64_t v53 = (uint64_t *)v52;
        operator delete(v52);
      }
      unint64_t v25 = v51;
      if (v51)
      {
LABEL_73:
        if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()();
  }
}

void sub_1925D66C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925D66D4(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925D66E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925D66FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    unint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned int v10 = __p;
      }
      else {
        unsigned int v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925D69C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator*=<double>(double)::{lambda(unsigned char &)#1}>(void *a1, double a2)
{
  uint64_t v2 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  uint64_t v4 = v3 - v2;
  if (v3 == v2 || !*a1) {
    return;
  }
  double v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (char *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *(void *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  unint64_t v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  unint64_t v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  unsigned int v10 = v2 + 8;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  unint64_t v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    unint64_t v24 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v25 = 0;
      uint64_t v26 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v27 = 0;
          uint64_t v28 = v26;
          do
          {
            if (*((void *)v2 + 2))
            {
              unint64_t v30 = 0;
              uint64_t v31 = v28;
              do
              {
                LOBYTE(a2) = *(unsigned char *)(*a1 + v31);
                a2 = v6 * (double)*(unint64_t *)&a2;
                *(unsigned char *)(*a1 + v31) = (int)a2;
                uint64_t v29 = (void *)a1[5];
                v31 += v29[2];
                ++v30;
                uint64_t v2 = (char *)a1[2];
              }
              while (v30 < *((void *)v2 + 2));
            }
            else
            {
              uint64_t v29 = (void *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((void *)v2 + 1));
          unint64_t v24 = *(void *)v2;
        }
        else
        {
          uint64_t v29 = (void *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(void *)v2)
        {
          unint64_t v16 = 0;
          uint64_t v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v17);
            a2 = v6 * (double)*(unint64_t *)&a2;
            *(unsigned char *)(*a1 + v17) = (int)a2;
            v17 += *(void *)a1[5];
            ++v16;
          }
          while (v16 < *(void *)a1[2]);
        }
        return;
      }
      if (v4 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v4 >> 3;
      }
      while (1)
      {
        uint64_t v35 = a1[5];
        if (v34 < 2) {
          break;
        }
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = (void *)(v35 + 8);
        unint64_t v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        uint64_t v36 = v39 + v38;
        unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL)) {
          goto LABEL_47;
        }
LABEL_49:
        LOBYTE(v33) = *(unsigned char *)(*a1 + v36);
        double v33 = v6 * (double)*(unint64_t *)&v33;
        *(unsigned char *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          uint64_t v50 = a1[2];
          uint64_t v51 = ((unint64_t)v4 >> 3) + 1;
          unint64_t v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            uint64_t v53 = (v51 - 2);
            unint64_t v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(void *)(v50 + v53 * 8)) {
              break;
            }
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1) {
              goto LABEL_55;
            }
          }
          if ((int)v52 > 0) {
            continue;
          }
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0;
LABEL_47:
      unint64_t v43 = v34 - v37;
      uint64_t v44 = v37;
      uint64_t v45 = (uint64_t *)(v35 + v44 * 8);
      unint64_t v46 = &v32[v44];
      do
      {
        uint64_t v48 = *v46++;
        uint64_t v47 = v48;
        uint64_t v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    unint64_t v18 = *(void *)v2;
    if (*(void *)v2)
    {
      unint64_t v19 = 0;
      uint64_t v20 = a1[8];
      do
      {
        if (*((void *)v2 + 1))
        {
          unint64_t v22 = 0;
          uint64_t v23 = v20;
          do
          {
            LOBYTE(a2) = *(unsigned char *)(*a1 + v23);
            a2 = v6 * (double)*(unint64_t *)&a2;
            *(unsigned char *)(*a1 + v23) = (int)a2;
            uint64_t v21 = (void *)a1[5];
            v23 += v21[1];
            ++v22;
            uint64_t v2 = (char *)a1[2];
          }
          while (v22 < *((void *)v2 + 1));
          unint64_t v18 = *(void *)v2;
        }
        else
        {
          uint64_t v21 = (void *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_1925D6D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator*=<double>(double)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v54 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v55 = 0;
    uint64_t v56 = a1[8];
    unint64_t v57 = v3[1];
    uint64_t v58 = (uint64_t *)a1[5];
    uint64_t v59 = *v58;
    uint64_t v60 = v6 + 4 * v56 + 16;
    uint64_t v61 = 4 * *v58;
    while (!v57)
    {
LABEL_38:
      v56 += v59;
      ++v55;
      v60 += v61;
      if (v55 == v54) {
        return;
      }
    }
    uint64_t v62 = 0;
    unint64_t v63 = v3[2];
    uint64_t v64 = v58[1];
    unint64_t v65 = v63 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v66 = v60;
    uint64_t v67 = v56;
    while (1)
    {
      if (v63)
      {
        unint64_t v68 = 0;
        uint64_t v69 = v58[2];
        uint64_t v70 = v67;
        if (v63 < 8)
        {
          double v71 = a2;
        }
        else
        {
          double v71 = a2;
          if (v69 == 1)
          {
            uint64_t v70 = v67 + v65;
            uint64_t v72 = v66;
            unint64_t v73 = v63 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v74 = *(_OWORD *)(v72 - 16);
              v75.i64[0] = SDWORD2(v74);
              v75.i64[1] = SHIDWORD(v74);
              float64x2_t v76 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)v74;
              v75.i64[1] = SDWORD1(v74);
              float64x2_t v77 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)*(void *)(v72 + 8);
              v75.i64[1] = (int)HIDWORD(*(_OWORD *)v72);
              float64x2_t v78 = vcvtq_f64_s64(v75);
              v75.i64[0] = (int)*(_OWORD *)v72;
              v75.i64[1] = (int)HIDWORD(*(void *)v72);
              *(int32x4_t *)(v72 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v77, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v76, a2)));
              *(int32x4_t *)uint64_t v72 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v75), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v78, a2)));
              v72 += 32;
              v73 -= 8;
            }
            while (v73);
            unint64_t v68 = v63 & 0xFFFFFFFFFFFFFFF8;
            if (v63 == v65) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v79 = v63 - v68;
        uint64_t v80 = 4 * v69;
        uint64_t v81 = (int *)(v6 + 4 * v70);
        do
        {
          *uint64_t v81 = (int)(v71 * (double)*v81);
          uint64_t v81 = (int *)((char *)v81 + v80);
          --v79;
        }
        while (v79);
      }
LABEL_41:
      v67 += v64;
      ++v62;
      v66 += 4 * v64;
      if (v62 == v57) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v31 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v32 = 0;
    uint64_t v33 = a1[8];
    unint64_t v34 = v3[1];
    uint64_t v35 = (uint64_t *)a1[5];
    uint64_t v36 = *v35;
    unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = v6 + 4 * v33 + 16;
    uint64_t v39 = 4 * *v35;
    while (1)
    {
      if (v34)
      {
        unint64_t v40 = 0;
        uint64_t v41 = v35[1];
        uint64_t v42 = v33;
        if (v34 < 8)
        {
          double v43 = a2;
        }
        else
        {
          double v43 = a2;
          if (v41 == 1)
          {
            uint64_t v42 = v33 + v37;
            uint64_t v44 = v38;
            unint64_t v45 = v34 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v46 = *(_OWORD *)(v44 - 16);
              v47.i64[0] = SDWORD2(v46);
              v47.i64[1] = SHIDWORD(v46);
              float64x2_t v48 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)v46;
              v47.i64[1] = SDWORD1(v46);
              float64x2_t v49 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)*(void *)(v44 + 8);
              v47.i64[1] = (int)HIDWORD(*(_OWORD *)v44);
              float64x2_t v50 = vcvtq_f64_s64(v47);
              v47.i64[0] = (int)*(_OWORD *)v44;
              v47.i64[1] = (int)HIDWORD(*(void *)v44);
              *(int32x4_t *)(v44 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v49, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v48, a2)));
              *(int32x4_t *)uint64_t v44 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v47), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v50, a2)));
              v44 += 32;
              v45 -= 8;
            }
            while (v45);
            unint64_t v40 = v34 & 0xFFFFFFFFFFFFFFF8;
            if (v34 == v37) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v51 = v34 - v40;
        uint64_t v52 = 4 * v41;
        uint64_t v53 = (int *)(v6 + 4 * v42);
        do
        {
          *uint64_t v53 = (int)(v43 * (double)*v53);
          uint64_t v53 = (int *)((char *)v53 + v52);
          --v51;
        }
        while (v51);
      }
LABEL_24:
      v33 += v36;
      ++v32;
      v38 += v39;
      if (v32 == v31) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v82 = operator new(v4);
    bzero(v82, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v83 = 1;
    }
    else {
      unint64_t v83 = v4 >> 3;
    }
    uint64_t v84 = a1[5];
    while (v83 >= 2)
    {
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = v83 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v90 = (void *)(v84 + 8);
      unint64_t v91 = v82 + 1;
      do
      {
        v87 += *(v90 - 1) * *(v91 - 1);
        v88 += *v90 * *v91;
        v91 += 2;
        v90 += 2;
        v89 -= 2;
      }
      while (v89);
      uint64_t v85 = v88 + v87;
      uint64_t v86 = v83 & 0x1FFFFFFFFFFFFFFELL;
      if (v83 != (v83 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      *(_DWORD *)(v6 + 4 * v85) = (int)(a2 * (double)*(int *)(v6 + 4 * v85));
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v99 = (v4 >> 3) + 1;
        size_t v100 = v4 >> 3;
        while (1)
        {
          uint64_t v101 = (v99 - 2);
          unint64_t v102 = v82[v101] + 1;
          v82[v101] = v102;
          if (v102 < v3[v101]) {
            break;
          }
          v82[(v99 - 2)] = 0;
          LODWORD(v100) = v100 - 1;
          if ((unint64_t)--v99 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v100 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v82);
      return;
    }
    uint64_t v85 = 0;
    uint64_t v86 = 0;
LABEL_63:
    unint64_t v92 = v83 - v86;
    uint64_t v93 = v86;
    float v94 = (uint64_t *)(v84 + 8 * v86);
    uint64_t v95 = &v82[v93];
    do
    {
      uint64_t v97 = *v95++;
      uint64_t v96 = v97;
      uint64_t v98 = *v94++;
      v85 += v98 * v96;
      --v92;
    }
    while (v92);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v6 + 4 * v18 + 16;
    unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v23 = *(_OWORD *)(v21 - 16);
      v24.i64[0] = SDWORD2(v23);
      v24.i64[1] = SHIDWORD(v23);
      float64x2_t v25 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)v23;
      v24.i64[1] = SDWORD1(v23);
      float64x2_t v26 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)*(void *)(v21 + 8);
      v24.i64[1] = (int)HIDWORD(*(_OWORD *)v21);
      float64x2_t v27 = vcvtq_f64_s64(v24);
      v24.i64[0] = (int)*(_OWORD *)v21;
      v24.i64[1] = (int)HIDWORD(*(void *)v21);
      *(int32x4_t *)(v21 - 16) = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v26, a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v25, a2)));
      *(int32x4_t *)uint64_t v21 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(vcvtq_f64_s64(v24), a2)), (int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v27, a2)));
      v21 += 32;
      v22 -= 8;
    }
    while (v22);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v28 = v16 - v17;
      uint64_t v29 = 4 * v19;
      unint64_t v30 = (int *)(v6 + 4 * v18);
      do
      {
        int *v30 = (int)(a2 * (double)*v30);
        unint64_t v30 = (int *)((char *)v30 + v29);
        --v28;
      }
      while (v28);
    }
  }
}

void sub_1925D7310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator*=<double>(double)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v82 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v83 = 0;
    uint64_t v84 = a1[8];
    unint64_t v85 = v3[1];
    uint64_t v86 = (uint64_t *)a1[5];
    uint64_t v87 = *v86;
    uint64_t v88 = (float64x2_t *)(v6 + 2 * v84);
    uint64_t v89 = 2 * *v86;
    while (!v85)
    {
LABEL_38:
      v84 += v87;
      ++v83;
      uint64_t v88 = (float64x2_t *)((char *)v88 + v89);
      if (v83 == v82) {
        return;
      }
    }
    uint64_t v90 = 0;
    unint64_t v91 = v3[2];
    uint64_t v92 = v86[1];
    unint64_t v93 = v91 & 0xFFFFFFFFFFFFFFF8;
    float v94 = v88;
    uint64_t v95 = v84;
    while (1)
    {
      if (v91)
      {
        unint64_t v96 = 0;
        uint64_t v97 = v86[2];
        uint64_t v98 = v95;
        if (v91 < 8)
        {
          double v99 = a2;
        }
        else
        {
          double v99 = a2;
          if (v97 == 1)
          {
            uint64_t v98 = v95 + v93;
            size_t v100 = v94;
            unint64_t v101 = v91 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q0 = *v100;
              _H1 = WORD1(*(_OWORD *)v100);
              __asm
              {
                FCVT            D1, H1
                FCVT            D2, H0
              }
              _Q2.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(*(void *)&v100->f64[0]);
              __asm { FCVT            D1, H1 }
              _H3 = WORD2(*(void *)&v100->f64[0]);
              __asm { FCVT            D3, H3 }
              _Q3.f64[1] = _D1;
              *(void *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
              LOWORD(_D1) = WORD1(_Q0.f64[0]);
              __asm
              {
                FCVT            D1, H1
                FCVT            D4, H0
              }
              _Q4.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(_Q0.f64[0]);
              __asm { FCVT            D1, H1 }
              LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
              __asm { FCVT            D0, H0 }
              _Q0.f64[1] = _D1;
              _Q0 = vmulq_n_f64(_Q0, a2);
              _Q1 = vmulq_n_f64(_Q3, a2);
              _Q2 = vmulq_n_f64(_Q2, a2);
              _Q3.f64[0] = _Q2.f64[1];
              __asm
              {
                FCVT            H3, D3
                FCVT            H2, D2
              }
              WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              __asm { FCVT            H3, D1 }
              WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
              _Q1 = vmulq_n_f64(_Q4, a2);
              __asm { FCVT            H3, D1 }
              LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              __asm { FCVT            H1, D0 }
              WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              _Q0.f64[0] = _Q0.f64[1];
              __asm { FCVT            H0, D0 }
              HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
              *v100++ = _Q2;
              v101 -= 8;
            }
            while (v101);
            unint64_t v96 = v91 & 0xFFFFFFFFFFFFFFF8;
            if (v91 == v93) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v116 = v91 - v96;
        uint64_t v117 = 2 * v97;
        uint64_t v118 = (__int16 *)(v6 + 2 * v98);
        do
        {
          _H0 = *v118;
          __asm { FCVT            D0, H0 }
          _D0 = v99 * _D0;
          __asm { FCVT            H0, D0 }
          __int16 *v118 = LOWORD(_D0);
          uint64_t v118 = (__int16 *)((char *)v118 + v117);
          --v116;
        }
        while (v116);
      }
LABEL_41:
      v95 += v92;
      ++v90;
      float v94 = (float64x2_t *)((char *)v94 + 2 * v92);
      if (v90 == v85) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v47 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v48 = 0;
    uint64_t v49 = a1[8];
    unint64_t v50 = v3[1];
    unint64_t v51 = (uint64_t *)a1[5];
    uint64_t v52 = *v51;
    unint64_t v53 = v50 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v54 = (float64x2_t *)(v6 + 2 * v49);
    uint64_t v55 = 2 * *v51;
    while (1)
    {
      if (v50)
      {
        unint64_t v56 = 0;
        uint64_t v57 = v51[1];
        uint64_t v58 = v49;
        if (v50 < 8)
        {
          double v59 = a2;
        }
        else
        {
          double v59 = a2;
          if (v57 == 1)
          {
            uint64_t v58 = v49 + v53;
            uint64_t v60 = v54;
            unint64_t v61 = v50 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              _Q0 = *v60;
              _H1 = WORD1(*(_OWORD *)v60);
              __asm
              {
                FCVT            D1, H1
                FCVT            D2, H0
              }
              _Q2.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(*(void *)&v60->f64[0]);
              __asm { FCVT            D1, H1 }
              _H3 = WORD2(*(void *)&v60->f64[0]);
              __asm { FCVT            D3, H3 }
              _Q3.f64[1] = _D1;
              *(void *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
              LOWORD(_D1) = WORD1(_Q0.f64[0]);
              __asm
              {
                FCVT            D1, H1
                FCVT            D4, H0
              }
              _Q4.f64[1] = _D1;
              LOWORD(_D1) = HIWORD(_Q0.f64[0]);
              __asm { FCVT            D1, H1 }
              LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
              __asm { FCVT            D0, H0 }
              _Q0.f64[1] = _D1;
              _Q0 = vmulq_n_f64(_Q0, a2);
              _Q1 = vmulq_n_f64(_Q3, a2);
              _Q2 = vmulq_n_f64(_Q2, a2);
              _Q3.f64[0] = _Q2.f64[1];
              __asm
              {
                FCVT            H3, D3
                FCVT            H2, D2
              }
              WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              __asm { FCVT            H3, D1 }
              WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
              _Q1 = vmulq_n_f64(_Q4, a2);
              __asm { FCVT            H3, D1 }
              LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
              _Q1.f64[0] = _Q1.f64[1];
              __asm { FCVT            H1, D1 }
              WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              __asm { FCVT            H1, D0 }
              WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
              _Q0.f64[0] = _Q0.f64[1];
              __asm { FCVT            H0, D0 }
              HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
              *v60++ = _Q2;
              v61 -= 8;
            }
            while (v61);
            unint64_t v56 = v50 & 0xFFFFFFFFFFFFFFF8;
            if (v50 == v53) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v76 = v50 - v56;
        uint64_t v77 = 2 * v57;
        float64x2_t v78 = (__int16 *)(v6 + 2 * v58);
        do
        {
          _H0 = *v78;
          __asm { FCVT            D0, H0 }
          _D0 = v59 * _D0;
          __asm { FCVT            H0, D0 }
          *float64x2_t v78 = LOWORD(_D0);
          float64x2_t v78 = (__int16 *)((char *)v78 + v77);
          --v76;
        }
        while (v76);
      }
LABEL_24:
      v49 += v52;
      ++v48;
      unint64_t v54 = (float64x2_t *)((char *)v54 + v55);
      if (v48 == v47) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v122 = operator new(v4);
    bzero(v122, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v123 = 1;
    }
    else {
      unint64_t v123 = v4 >> 3;
    }
    uint64_t v124 = a1[5];
    while (v123 >= 2)
    {
      uint64_t v127 = 0;
      uint64_t v128 = 0;
      uint64_t v129 = v123 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v130 = (void *)(v124 + 8);
      uint64_t v131 = v122 + 1;
      do
      {
        v127 += *(v130 - 1) * *(v131 - 1);
        v128 += *v130 * *v131;
        v131 += 2;
        v130 += 2;
        v129 -= 2;
      }
      while (v129);
      uint64_t v125 = v128 + v127;
      uint64_t v126 = v123 & 0x1FFFFFFFFFFFFFFELL;
      if (v123 != (v123 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v139 = 2 * v125;
      _H0 = *(_WORD *)(v6 + v139);
      __asm { FCVT            D0, H0 }
      _D0 = a2 * _D0;
      __asm { FCVT            H0, D0 }
      *(_WORD *)(v6 + v139) = LOWORD(_D0);
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v143 = (v4 >> 3) + 1;
        size_t v144 = v4 >> 3;
        while (1)
        {
          uint64_t v145 = (v143 - 2);
          unint64_t v146 = v122[v145] + 1;
          v122[v145] = v146;
          if (v146 < v3[v145]) {
            break;
          }
          v122[(v143 - 2)] = 0;
          LODWORD(v144) = v144 - 1;
          if ((unint64_t)--v143 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v144 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v122);
      return;
    }
    uint64_t v125 = 0;
    uint64_t v126 = 0;
LABEL_63:
    unint64_t v132 = v123 - v126;
    uint64_t v133 = v126;
    uint64_t v134 = (uint64_t *)(v124 + 8 * v126);
    unint64_t v135 = &v122[v133];
    do
    {
      uint64_t v137 = *v135++;
      uint64_t v136 = v137;
      uint64_t v138 = *v134++;
      v125 += v138 * v136;
      --v132;
    }
    while (v132);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (float64x2_t *)(v6 + 2 * v18);
    unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      _Q0 = *v21;
      _H1 = WORD1(*(_OWORD *)v21);
      __asm
      {
        FCVT            D1, H1
        FCVT            D2, H0
      }
      _Q2.f64[1] = _D1;
      LOWORD(_D1) = HIWORD(*(void *)&v21->f64[0]);
      __asm { FCVT            D1, H1 }
      _H3 = WORD2(*(void *)&v21->f64[0]);
      __asm { FCVT            D3, H3 }
      _Q3.f64[1] = _D1;
      *(void *)&_Q0.f64[0] = vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL).u64[0];
      LOWORD(_D1) = WORD1(_Q0.f64[0]);
      __asm
      {
        FCVT            D1, H1
        FCVT            D4, H0
      }
      _Q4.f64[1] = _D1;
      LOWORD(_D1) = HIWORD(_Q0.f64[0]);
      __asm { FCVT            D1, H1 }
      LOWORD(_Q0.f64[0]) = WORD2(_Q0.f64[0]);
      __asm { FCVT            D0, H0 }
      _Q0.f64[1] = _D1;
      _Q0 = vmulq_n_f64(_Q0, a2);
      _Q1 = vmulq_n_f64(_Q3, a2);
      _Q2 = vmulq_n_f64(_Q2, a2);
      _Q3.f64[0] = _Q2.f64[1];
      __asm
      {
        FCVT            H3, D3
        FCVT            H2, D2
      }
      WORD1(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
      __asm { FCVT            H3, D1 }
      WORD2(_Q2.f64[0]) = LOWORD(_Q3.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      HIWORD(_Q2.f64[0]) = LOWORD(_Q1.f64[0]);
      _Q1 = vmulq_n_f64(_Q4, a2);
      __asm { FCVT            H3, D1 }
      LOWORD(_Q2.f64[1]) = LOWORD(_Q3.f64[0]);
      _Q1.f64[0] = _Q1.f64[1];
      __asm { FCVT            H1, D1 }
      WORD1(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
      __asm { FCVT            H1, D0 }
      WORD2(_Q2.f64[1]) = LOWORD(_Q1.f64[0]);
      _Q0.f64[0] = _Q0.f64[1];
      __asm { FCVT            H0, D0 }
      HIWORD(_Q2.f64[1]) = LOWORD(_Q0.f64[0]);
      *v21++ = _Q2;
      v22 -= 8;
    }
    while (v22);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v41 = v16 - v17;
      uint64_t v42 = 2 * v19;
      double v43 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v43;
        __asm { FCVT            D0, H0 }
        _D0 = a2 * _D0;
        __asm { FCVT            H0, D0 }
        __int16 *v43 = LOWORD(_D0);
        double v43 = (__int16 *)((char *)v43 + v42);
        --v41;
      }
      while (v41);
    }
  }
}

void sub_1925D7988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator*=<double>(double)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t v3 = (unint64_t *)a1[2];
  uint64_t v2 = (unint64_t *)a1[3];
  size_t v4 = (char *)v2 - (char *)v3;
  if (v2 == v3) {
    return;
  }
  uint64_t v6 = *a1;
  if (!*a1) {
    return;
  }
  if (v4 - 8 < 8)
  {
    uint64_t v7 = 1;
    unint64_t v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      uint64_t v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  unint64_t v9 = ((v4 - 8) >> 3) + 1;
  unint64_t v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  unsigned int v10 = v3 + 1;
  uint64_t v11 = 1;
  uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  uint64_t v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_8;
  }
LABEL_9:
  if (!v7) {
    return;
  }
  uint64_t v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    unint64_t v48 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v49 = 0;
    uint64_t v50 = a1[8];
    unint64_t v51 = v3[1];
    uint64_t v52 = (uint64_t *)a1[5];
    uint64_t v53 = *v52;
    uint64_t v54 = v6 + 4 * v50 + 16;
    uint64_t v55 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v54 += v55;
      if (v49 == v48) {
        return;
      }
    }
    uint64_t v56 = 0;
    unint64_t v57 = v3[2];
    uint64_t v58 = v52[1];
    unint64_t v59 = v57 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v60 = (float32x2_t *)v54;
    uint64_t v61 = v50;
    while (1)
    {
      if (v57)
      {
        unint64_t v62 = 0;
        uint64_t v63 = v52[2];
        uint64_t v64 = v61;
        if (v57 < 8)
        {
          double v65 = a2;
        }
        else
        {
          double v65 = a2;
          if (v63 == 1)
          {
            uint64_t v64 = v61 + v59;
            uint64_t v66 = v60;
            unint64_t v67 = v57 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v68 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v66), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v66->f32), a2));
              *(float32x4_t *)v66[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v66[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v66[-2].f32), a2));
              *(float32x4_t *)v66->f32 = v68;
              v66 += 4;
              v67 -= 8;
            }
            while (v67);
            unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF8;
            if (v57 == v59) {
              goto LABEL_41;
            }
          }
        }
        unint64_t v69 = v57 - v62;
        uint64_t v70 = 4 * v63;
        double v71 = (float *)(v6 + 4 * v64);
        do
        {
          float v72 = v65 * *v71;
          *double v71 = v72;
          double v71 = (float *)((char *)v71 + v70);
          --v69;
        }
        while (v69);
      }
LABEL_41:
      v61 += v58;
      ++v56;
      uint64_t v60 = (float32x2_t *)((char *)v60 + 4 * v58);
      if (v56 == v51) {
        goto LABEL_38;
      }
    }
  }
  if (v15 == 2)
  {
    unint64_t v28 = *v3;
    if (!*v3) {
      return;
    }
    uint64_t v29 = 0;
    uint64_t v30 = a1[8];
    unint64_t v31 = v3[1];
    uint64_t v32 = (uint64_t *)a1[5];
    uint64_t v33 = *v32;
    unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = v6 + 4 * v30 + 16;
    uint64_t v36 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        unint64_t v37 = 0;
        uint64_t v38 = v32[1];
        uint64_t v39 = v30;
        if (v31 < 8)
        {
          double v40 = a2;
        }
        else
        {
          double v40 = a2;
          if (v38 == 1)
          {
            uint64_t v39 = v30 + v34;
            unint64_t v41 = (float32x2_t *)v35;
            unint64_t v42 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float32x4_t v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v41), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v41->f32), a2));
              *(float32x4_t *)v41[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v41[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v41[-2].f32), a2));
              *(float32x4_t *)v41->f32 = v43;
              v41 += 4;
              v42 -= 8;
            }
            while (v42);
            unint64_t v37 = v31 & 0xFFFFFFFFFFFFFFF8;
            if (v31 == v34) {
              goto LABEL_24;
            }
          }
        }
        unint64_t v44 = v31 - v37;
        uint64_t v45 = 4 * v38;
        long long v46 = (float *)(v6 + 4 * v39);
        do
        {
          float v47 = v40 * *v46;
          *long long v46 = v47;
          long long v46 = (float *)((char *)v46 + v45);
          --v44;
        }
        while (v44);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v35 += v36;
      if (v29 == v28) {
        return;
      }
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1) {
      unint64_t v74 = 1;
    }
    else {
      unint64_t v74 = v4 >> 3;
    }
    uint64_t v75 = a1[5];
    while (v74 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      uint64_t v81 = (void *)(v75 + 8);
      unint64_t v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      uint64_t v76 = v79 + v78;
      uint64_t v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL)) {
        goto LABEL_63;
      }
LABEL_65:
      uint64_t v90 = 4 * v76;
      float v91 = a2 * *(float *)(v6 + v90);
      *(float *)(v6 + v90) = v91;
      if ((int)(v4 >> 3) >= 1)
      {
        uint64_t v92 = (v4 >> 3) + 1;
        size_t v93 = v4 >> 3;
        while (1)
        {
          uint64_t v94 = (v92 - 2);
          unint64_t v95 = v73[v94] + 1;
          v73[v94] = v95;
          if (v95 < v3[v94]) {
            break;
          }
          v73[(v92 - 2)] = 0;
          LODWORD(v93) = v93 - 1;
          if ((unint64_t)--v92 <= 1) {
            goto LABEL_71;
          }
        }
        if ((int)v93 > 0) {
          continue;
        }
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    uint64_t v76 = 0;
    uint64_t v77 = 0;
LABEL_63:
    unint64_t v83 = v74 - v77;
    uint64_t v84 = v77;
    unint64_t v85 = (uint64_t *)(v75 + 8 * v77);
    uint64_t v86 = &v73[v84];
    do
    {
      uint64_t v88 = *v86++;
      uint64_t v87 = v88;
      uint64_t v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  unint64_t v16 = *v3;
  if (*v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = a1[8];
    uint64_t v19 = *(void *)a1[5];
    if (v16 < 8) {
      goto LABEL_19;
    }
    if (v19 != 1) {
      goto LABEL_19;
    }
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (float32x2_t *)(v6 + 4 * v18 + 16);
    unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*v21), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v21->f32), a2));
      *(float32x4_t *)v21[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21[-2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)v21[-2].f32), a2));
      *(float32x4_t *)v21->f32 = v23;
      v21 += 4;
      v22 -= 8;
    }
    while (v22);
    uint64_t v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      unint64_t v24 = v16 - v17;
      uint64_t v25 = 4 * v19;
      float64x2_t v26 = (float *)(v6 + 4 * v18);
      do
      {
        float v27 = a2 * *v26;
        *float64x2_t v26 = v27;
        float64x2_t v26 = (float *)((char *)v26 + v25);
        --v24;
      }
      while (v24);
    }
  }
}

void sub_1925D7EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::result_of<double ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator*=<double>(double)::{lambda(double)#1}>(double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        size_t v4 = __p;
      }
      else {
        size_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925D8014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925D8028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925D8020);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925D8238(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A2D8;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A2D8;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A2D8;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925D8520(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A2D8;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3::$_3((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__r.__words[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  double v4 = *(double *)&__dst.__r_.__value_.__r.__words[2];
  uint64_t v5 = v101;
  unsigned int v87 = v101 - 2;
  if (v87 < 4 || v101 == 9) {
    atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__r.__words[2], 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__r.__words[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  double v7 = *(double *)&__dst.__r_.__value_.__r.__words[2];
  int v8 = v101;
  unsigned int v9 = v101 - 2;
  if (v9 <= 4) {
    atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__r.__words[2], 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
  uint64_t v10 = 0;
  uint64_t v11 = v5;
  switch(v8)
  {
    case 0:
      uint64_t v10 = *(void *)&v4;
      break;
    case 1:
      uint64_t v10 = (uint64_t)v4;
      break;
    case 2:
      __idx.__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = (const char *)(*(void *)&v4 + 8);
      if (*(char *)(*(void *)&v4 + 31) < 0) {
        uint64_t v12 = *(const char **)(*(void *)&v4 + 8);
      }
      size_t v13 = strlen(v12);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_201:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v14 = v13;
      if (v13 >= 0x17)
      {
        uint64_t v50 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v50 = v13 | 7;
        }
        uint64_t v51 = v50 + 1;
        p_dst = (std::string *)operator new(v50 + 1);
        __dst.__r_.__value_.__l.__size_ = v14;
        __dst.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
        p_dst = &__dst;
        if (!v13) {
          goto LABEL_102;
        }
      }
      memmove(p_dst, v12, v14);
LABEL_102:
      p_dst->__r_.__value_.__s.__data_[v14] = 0;
      uint64_t v10 = std::stoll(&__dst, (size_t *)&__idx, 10);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v4 + 31) < 0)
      {
        if (__idx.__r_.__value_.__r.__words[0] != *(void *)(*(void *)&v4 + 16)) {
          goto LABEL_124;
        }
      }
      else if (__idx.__r_.__value_.__r.__words[0] != *(unsigned __int8 *)(*(void *)&v4 + 31))
      {
LABEL_124:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v57 = std::string::append(&__str, " cannot be interpreted as an integer");
        long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v58;
        v57->__r_.__value_.__l.__size_ = 0;
        v57->__r_.__value_.__r.__words[2] = 0;
        v57->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      return;
    case 3:
      memset(&__dst, 0, sizeof(__dst));
      uint64_t v20 = *(unsigned char **)(*(void *)&v4 + 8);
      uint64_t v19 = *(unsigned char **)(*(void *)&v4 + 16);
      int64_t v21 = v19 - v20;
      if (v19 != v20)
      {
        if (v21 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v19 - v20);
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        std::string::size_type v22 = __dst.__r_.__value_.__r.__words[0] + 8 * (v21 >> 3);
        __dst.__r_.__value_.__r.__words[2] = v22;
        memcpy(__dst.__r_.__value_.__l.__data_, v20, v21);
        __dst.__r_.__value_.__l.__size_ = v22;
      }
      nitro::flexible_type_fail(0);
      uint64_t v18 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    case 4:
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(*(void *)&v4 + 8), *(void **)(*(void *)&v4 + 16), (uint64_t)(*(void *)(*(void *)&v4 + 16) - *(void *)(*(void *)&v4 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v16 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      uint64_t v18 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
        {
          size -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
        }
        while (size != v16);
        uint64_t v18 = (void *)__dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v16;
      goto LABEL_42;
    case 5:
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(*(void *)&v4 + 8), *(char **)(*(void *)&v4 + 16), (uint64_t)(*(void *)(*(void *)&v4 + 16) - *(void *)(*(void *)&v4 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
      if (!__dst.__r_.__value_.__r.__words[0]) {
        goto LABEL_43;
      }
      std::string::size_type v24 = __dst.__r_.__value_.__l.__size_;
      std::string::size_type v25 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
      {
        do
          std::string::size_type v24 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v24 - 32);
        while (v24 != v23);
        std::string::size_type v25 = __dst.__r_.__value_.__r.__words[0];
      }
      __dst.__r_.__value_.__l.__size_ = v23;
      uint64_t v18 = (void *)v25;
LABEL_42:
      operator delete(v18);
      goto LABEL_43;
    case 6:
    case 8:
LABEL_204:
      __break(1u);
      goto LABEL_205;
    case 7:
      break;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)&v4 + 8));
      nitro::flexible_type_fail(0);
      if (__p)
      {
        unint64_t v104 = __p;
        operator delete(__p);
      }
      if (v101)
      {
        unint64_t v102 = v101;
        operator delete(v101);
      }
      uint64_t v10 = __dst.__r_.__value_.__r.__words[2];
      if (!__dst.__r_.__value_.__r.__words[2]) {
        break;
      }
      if (!atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
      }
LABEL_43:
      uint64_t v10 = 0;
      break;
    default:
LABEL_205:
      JUMPOUT(0);
  }
  uint64_t v26 = 0;
  switch(v11)
  {
    case 0:
      uint64_t v26 = *(void *)&v7;
      goto LABEL_53;
    case 1:
      uint64_t v26 = (uint64_t)v7;
      goto LABEL_53;
    case 2:
      size_t v98 = 0;
      float v27 = (const char *)(*(void *)&v7 + 8);
      if (*(char *)(*(void *)&v7 + 31) < 0) {
        float v27 = *(const char **)(*(void *)&v7 + 8);
      }
      size_t v28 = strlen(v27);
      if (v28 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_201;
      }
      std::string::size_type v29 = v28;
      if (v28 >= 0x17)
      {
        uint64_t v52 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v28 | 7) != 0x17) {
          uint64_t v52 = v28 | 7;
        }
        uint64_t v53 = v52 + 1;
        p_str = operator new(v52 + 1);
        __str.__r_.__value_.__l.__size_ = v29;
        __str.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
      }
      else
      {
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = v28;
        p_str = &__str;
        if (!v28) {
          goto LABEL_111;
        }
      }
      memmove(p_str, v27, v29);
LABEL_111:
      *((unsigned char *)p_str + v29) = 0;
      uint64_t v54 = std::stoll(&__str, &v98, 10);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v7 + 31) < 0)
      {
        if (v98 == *(void *)(*(void *)&v7 + 16)) {
          goto LABEL_115;
        }
LABEL_198:
        uint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v85 = std::string::append(&__idx, " cannot be interpreted as an integer");
        long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v84, &__str);
        __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v98 != *(unsigned __int8 *)(*(void *)&v7 + 31)) {
        goto LABEL_198;
      }
LABEL_115:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v10 / v54;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_116:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
      {
        if (*(char *)(*(void *)&v7 + 31) < 0) {
          operator delete(*(void **)(*(void *)&v7 + 8));
        }
        double v36 = v7;
        uint64_t v37 = 0x1012C404EF22A49;
LABEL_147:
        MEMORY[0x192FF16B0](*(void *)&v36, v37);
      }
LABEL_148:
      switch(v87)
      {
        case 0u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
          {
            if (*(char *)(*(void *)&v4 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v4 + 8));
            }
            double v68 = v4;
            uint64_t v69 = 0x1012C404EF22A49;
            goto LABEL_195;
          }
          break;
        case 1u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
          {
            uint64_t v75 = *(void **)(*(void *)&v4 + 8);
            if (v75)
            {
              *(void *)(*(void *)&v4 + 16) = v75;
              operator delete(v75);
            }
            double v68 = v4;
            uint64_t v69 = 0x1080C409938AC02;
            goto LABEL_195;
          }
          break;
        case 2u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
          {
            uint64_t v71 = *(void *)(*(void *)&v4 + 8);
            if (!v71) {
              goto LABEL_182;
            }
            uint64_t v72 = *(void *)(*(void *)&v4 + 16);
            unint64_t v73 = *(void **)(*(void *)&v4 + 8);
            if (v72 != v71)
            {
              do
              {
                v72 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v4 + 24, v72);
              }
              while (v72 != v71);
              unint64_t v73 = *(void **)(*(void *)&v4 + 8);
            }
            *(void *)(*(void *)&v4 + 16) = v71;
            goto LABEL_181;
          }
          break;
        case 3u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
          {
            uint64_t v77 = *(void *)(*(void *)&v4 + 8);
            if (v77)
            {
              uint64_t v78 = *(void *)(*(void *)&v4 + 16);
              uint64_t v79 = *(void **)(*(void *)&v4 + 8);
              if (v78 != v77)
              {
                do
                  uint64_t v78 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v78 - 32);
                while (v78 != v77);
                uint64_t v79 = *(void **)(*(void *)&v4 + 8);
              }
              *(void *)(*(void *)&v4 + 16) = v77;
              unint64_t v73 = v79;
LABEL_181:
              operator delete(v73);
            }
LABEL_182:
            double v68 = v4;
            uint64_t v69 = 0x1020C405E66F15BLL;
            goto LABEL_195;
          }
          break;
        case 7u:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v4 != 0)
          {
            uint64_t v81 = *(void **)(*(void *)&v4 + 56);
            if (v81)
            {
              *(void *)(*(void *)&v4 + 64) = v81;
              operator delete(v81);
            }
            unint64_t v82 = *(void **)(*(void *)&v4 + 32);
            if (v82)
            {
              *(void *)(*(void *)&v4 + 40) = v82;
              operator delete(v82);
            }
            unint64_t v83 = *(std::__shared_weak_count **)(*(void *)&v4 + 24);
            if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
            double v68 = v4;
            uint64_t v69 = 0x10B0C4002311774;
LABEL_195:
            MEMORY[0x192FF16B0](*(void *)&v68, v69);
          }
          break;
        default:
          return;
      }
      return;
    case 3:
      unint64_t v95 = 0;
      unint64_t v96 = 0;
      uint64_t v94 = 0;
      unint64_t v42 = *(unsigned char **)(*(void *)&v7 + 8);
      unint64_t v41 = *(unsigned char **)(*(void *)&v7 + 16);
      int64_t v43 = v41 - v42;
      if (v41 != v42)
      {
        if (v43 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v44 = (char *)operator new(v41 - v42);
        uint64_t v45 = &v44[8 * (v43 >> 3)];
        uint64_t v94 = v44;
        unint64_t v96 = v45;
        memcpy(v44, v42, v43);
        unint64_t v95 = v45;
      }
      nitro::flexible_type_fail(0);
      if (v94) {
        operator delete(v94);
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_85:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v7 == 0) {
        goto LABEL_148;
      }
      float v47 = *(void **)(*(void *)&v7 + 8);
      if (v47)
      {
        *(void *)(*(void *)&v7 + 16) = v47;
        operator delete(v47);
      }
      double v36 = v7;
      uint64_t v37 = 0x1080C409938AC02;
      goto LABEL_147;
    case 4:
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      float v91 = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v91, *(void **)(*(void *)&v7 + 8), *(void **)(*(void *)&v7 + 16), (uint64_t)(*(void *)(*(void *)&v7 + 16) - *(void *)(*(void *)&v7 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      uint64_t v38 = v91;
      if (v91)
      {
        uint64_t v39 = v92;
        double v40 = v91;
        if ((void *)v92 != v91)
        {
          do
          {
            v39 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v93, v39);
          }
          while ((void *)v39 != v38);
          double v40 = v91;
        }
        uint64_t v92 = (uint64_t)v38;
        goto LABEL_97;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_126:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v7 == 0) {
        goto LABEL_148;
      }
      uint64_t v60 = *(void *)(*(void *)&v7 + 8);
      if (!v60) {
        goto LABEL_146;
      }
      uint64_t v61 = *(void *)(*(void *)&v7 + 16);
      unint64_t v62 = *(void **)(*(void *)&v7 + 8);
      if (v61 != v60)
      {
        do
        {
          v61 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](*(void *)&v7 + 24, v61);
        }
        while (v61 != v60);
        unint64_t v62 = *(void **)(*(void *)&v7 + 8);
      }
      *(void *)(*(void *)&v7 + 16) = v60;
      goto LABEL_145;
    case 5:
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v88 = 0;
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v88, *(char **)(*(void *)&v7 + 8), *(char **)(*(void *)&v7 + 16), (uint64_t)(*(void *)(*(void *)&v7 + 16) - *(void *)(*(void *)&v7 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      unint64_t v48 = v88;
      if (v88)
      {
        uint64_t v49 = (uint64_t)v89;
        double v40 = v88;
        if (v89 != v88)
        {
          do
          {
            v49 -= 32;
            std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v49);
          }
          while ((void *)v49 != v48);
          double v40 = v88;
        }
        uint64_t v89 = v48;
LABEL_97:
        operator delete(v40);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        switch(v9)
        {
          case 0u:
            goto LABEL_116;
          case 1u:
            goto LABEL_85;
          case 2u:
            goto LABEL_126;
          case 3u:
            goto LABEL_136;
          case 7u:
            goto LABEL_62;
          default:
            goto LABEL_148;
        }
        goto LABEL_148;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_136:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v7 == 0) {
        goto LABEL_148;
      }
      uint64_t v64 = *(void *)(*(void *)&v7 + 8);
      if (v64)
      {
        uint64_t v65 = *(void *)(*(void *)&v7 + 16);
        uint64_t v66 = *(void **)(*(void *)&v7 + 8);
        if (v65 != v64)
        {
          do
            uint64_t v65 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v65 - 32);
          while (v65 != v64);
          uint64_t v66 = *(void **)(*(void *)&v7 + 8);
        }
        *(void *)(*(void *)&v7 + 16) = v64;
        unint64_t v62 = v66;
LABEL_145:
        operator delete(v62);
      }
LABEL_146:
      double v36 = v7;
      uint64_t v37 = 0x1020C405E66F15BLL;
      goto LABEL_147;
    case 6:
    case 8:
      goto LABEL_204;
    case 7:
LABEL_53:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v10 / v26;
      *(unsigned char *)(a2 + 24) = 0;
      goto LABEL_148;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(void *)&v7 + 8));
      nitro::flexible_type_fail(0);
      if (__p)
      {
        unint64_t v104 = __p;
        operator delete(__p);
      }
      if (v101)
      {
        unint64_t v102 = v101;
        operator delete(v101);
      }
      unint64_t v31 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 24) = 0;
LABEL_62:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v7 == 0) {
        goto LABEL_148;
      }
      uint64_t v33 = *(void **)(*(void *)&v7 + 56);
      if (v33)
      {
        *(void *)(*(void *)&v7 + 64) = v33;
        operator delete(v33);
      }
      unint64_t v34 = *(void **)(*(void *)&v7 + 32);
      if (v34)
      {
        *(void *)(*(void *)&v7 + 40) = v34;
        operator delete(v34);
      }
      uint64_t v35 = *(std::__shared_weak_count **)(*(void *)&v7 + 24);
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      double v36 = v7;
      uint64_t v37 = 0x10B0C4002311774;
      goto LABEL_147;
    default:
      goto LABEL_205;
  }
}

void sub_1925D9170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a33);
  switch((int)a9)
  {
    case 0:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      if (*(char *)(v43 + 31) < 0) {
        operator delete(*(void **)(v43 + 8));
      }
      uint64_t v46 = v43;
      uint64_t v47 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 1:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v49 = *(void **)(v43 + 8);
      if (v49)
      {
        *(void *)(v43 + 16) = v49;
        operator delete(v49);
      }
      uint64_t v46 = v43;
      uint64_t v47 = 0x1080C409938AC02;
      goto LABEL_49;
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v51 = *(void *)(v43 + 8);
      if (!v51) {
        goto LABEL_35;
      }
      uint64_t v52 = *(void *)(v43 + 16);
      uint64_t v53 = *(void **)(v43 + 8);
      if (v52 != v51)
      {
        do
        {
          v52 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v43 + 24, v52);
        }
        while (v52 != v51);
        uint64_t v53 = *(void **)(v43 + 8);
      }
      *(void *)(v43 + 16) = v51;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v55 = *(void *)(v43 + 8);
      if (!v55) {
        goto LABEL_35;
      }
      uint64_t v56 = *(void *)(v43 + 16);
      unint64_t v57 = *(void **)(v43 + 8);
      if (v56 != v55)
      {
        do
          uint64_t v56 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v56 - 32);
        while (v56 != v55);
        unint64_t v57 = *(void **)(v43 + 8);
      }
      *(void *)(v43 + 16) = v55;
      uint64_t v53 = v57;
LABEL_34:
      operator delete(v53);
LABEL_35:
      uint64_t v46 = v43;
      uint64_t v47 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 7:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      unint64_t v59 = *(void **)(v43 + 56);
      if (v59)
      {
        *(void *)(v43 + 64) = v59;
        operator delete(v59);
        uint64_t v60 = *(void **)(v43 + 32);
        if (!v60)
        {
LABEL_42:
          uint64_t v61 = *(std::__shared_weak_count **)(v43 + 24);
          if (!v61) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v60 = *(void **)(v43 + 32);
        if (!v60) {
          goto LABEL_42;
        }
      }
      *(void *)(v43 + 40) = v60;
      operator delete(v60);
      uint64_t v61 = *(std::__shared_weak_count **)(v43 + 24);
      if (!v61)
      {
LABEL_48:
        uint64_t v46 = v43;
        uint64_t v47 = 0x10B0C4002311774;
LABEL_49:
        MEMORY[0x192FF16B0](v46, v47);
        _Unwind_Resume(a1);
      }
LABEL_46:
      if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      goto LABEL_48;
    default:
LABEL_50:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_3>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    double v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925D9AE0(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A330;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A330;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A330;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925D9DC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A330;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4::$_4((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__r.__words[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = __dst.__r_.__value_.__r.__words[2];
  uint64_t v5 = v95;
  unsigned int v81 = v95 - 2;
  if (v81 < 4 || v95 == 9) {
    atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__r.__words[2], 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)&__dst);
  if (__dst.__r_.__value_.__r.__words[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  uint64_t v7 = __dst.__r_.__value_.__r.__words[2];
  int v8 = v95;
  unsigned int v9 = v95 - 2;
  if (v9 <= 4) {
    atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__r.__words[2], 1uLL);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&__dst);
  double v10 = 0.0;
  uint64_t v11 = v5;
  switch(v8)
  {
    case 0:
      double v10 = (double)v4;
      goto LABEL_51;
    case 1:
      double v10 = *(double *)&v4;
      goto LABEL_51;
    case 2:
      __idx.__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = (const char *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0) {
        uint64_t v12 = *(const char **)(v4 + 8);
      }
      size_t v13 = strlen(v12);
      if (v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_179:
      }
        std::string::__throw_length_error[abi:ne180100]();
      std::string::size_type v14 = v13;
      if (v13 >= 0x17)
      {
        uint64_t v27 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v27 = v13 | 7;
        }
        uint64_t v28 = v27 + 1;
        p_dst = (std::string *)operator new(v27 + 1);
        __dst.__r_.__value_.__l.__size_ = v14;
        __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v13;
        p_dst = &__dst;
        if (!v13) {
          goto LABEL_46;
        }
      }
      memmove(p_dst, v12, v14);
LABEL_46:
      p_dst->__r_.__value_.__s.__data_[v14] = 0;
      double v29 = std::stod(&__dst, (size_t *)&__idx);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v4 + 31) < 0)
      {
        if (__idx.__r_.__value_.__r.__words[0] == *(void *)(v4 + 16)) {
          goto LABEL_50;
        }
LABEL_116:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v58 = std::string::append(&__str, " cannot be interpreted as a float");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__dst);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (__idx.__r_.__value_.__r.__words[0] != *(unsigned __int8 *)(v4 + 31)) {
        goto LABEL_116;
      }
LABEL_50:
      float v30 = v29;
      double v10 = v30;
LABEL_51:
      double v31 = 0.0;
      switch(v11)
      {
        case 0:
          double v31 = (double)v7;
          goto LABEL_60;
        case 1:
          double v31 = *(double *)&v7;
          goto LABEL_60;
        case 2:
          size_t v92 = 0;
          uint64_t v32 = (const char *)(v7 + 8);
          if (*(char *)(v7 + 31) < 0) {
            uint64_t v32 = *(const char **)(v7 + 8);
          }
          size_t v33 = strlen(v32);
          if (v33 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_179;
          }
          std::string::size_type v34 = v33;
          if (v33 >= 0x17)
          {
            uint64_t v53 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v33 | 7) != 0x17) {
              uint64_t v53 = v33 | 7;
            }
            uint64_t v54 = v53 + 1;
            p_str = operator new(v53 + 1);
            __str.__r_.__value_.__l.__size_ = v34;
            __str.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
          }
          else
          {
            *((unsigned char *)&__str.__r_.__value_.__s + 23) = v33;
            p_str = &__str;
            if (!v33) {
              goto LABEL_105;
            }
          }
          memmove(p_str, v32, v34);
LABEL_105:
          *((unsigned char *)p_str + v34) = 0;
          double v55 = std::stod(&__str, &v92);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v7 + 31) < 0)
          {
            if (v92 == *(void *)(v7 + 16)) {
              goto LABEL_109;
            }
LABEL_176:
            uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v79 = std::string::append(&__idx, " cannot be interpreted as a float");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v78, &__str);
            __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v92 != *(unsigned __int8 *)(v7 + 31)) {
            goto LABEL_176;
          }
LABEL_109:
          float v56 = v55;
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / v56;
          *(unsigned char *)(a2 + 24) = 1;
LABEL_110:
          if (atomic_fetch_add((atomic_ullong *volatile)v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && v7)
          {
            if (*(char *)(v7 + 31) < 0) {
              operator delete(*(void **)(v7 + 8));
            }
            uint64_t v40 = v7;
            uint64_t v41 = 0x1012C404EF22A49;
LABEL_135:
            MEMORY[0x192FF16B0](v40, v41);
          }
LABEL_136:
          switch(v81)
          {
            case 0u:
              if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4)
              {
                if (*(char *)(v4 + 31) < 0) {
                  operator delete(*(void **)(v4 + 8));
                }
                uint64_t v66 = v4;
                uint64_t v67 = 0x1012C404EF22A49;
                goto LABEL_173;
              }
              break;
            case 1u:
              if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4)
              {
                uint64_t v71 = *(void **)(v4 + 8);
                if (v71)
                {
                  *(void *)(v4 + 16) = v71;
                  operator delete(v71);
                }
                uint64_t v66 = v4;
                uint64_t v67 = 0x1080C409938AC02;
                goto LABEL_173;
              }
              break;
            case 2u:
              if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4)
              {
                uint64_t v68 = *(void *)(v4 + 8);
                if (!v68) {
                  goto LABEL_162;
                }
                uint64_t v69 = *(void *)(v4 + 16);
                uint64_t v70 = *(void **)(v4 + 8);
                if (v69 != v68)
                {
                  do
                  {
                    v69 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v4 + 24, v69);
                  }
                  while (v69 != v68);
                  uint64_t v70 = *(void **)(v4 + 8);
                }
                *(void *)(v4 + 16) = v68;
                goto LABEL_161;
              }
              break;
            case 3u:
              if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4)
              {
                uint64_t v72 = *(void *)(v4 + 8);
                if (v72)
                {
                  uint64_t v73 = *(void *)(v4 + 16);
                  unint64_t v74 = *(void **)(v4 + 8);
                  if (v73 != v72)
                  {
                    do
                      uint64_t v73 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v73 - 32);
                    while (v73 != v72);
                    unint64_t v74 = *(void **)(v4 + 8);
                  }
                  *(void *)(v4 + 16) = v72;
                  uint64_t v70 = v74;
LABEL_161:
                  operator delete(v70);
                }
LABEL_162:
                uint64_t v66 = v4;
                uint64_t v67 = 0x1020C405E66F15BLL;
                goto LABEL_173;
              }
              break;
            case 7u:
              if (atomic_fetch_add((atomic_ullong *volatile)v4, 0xFFFFFFFFFFFFFFFFLL) == 1 && v4)
              {
                uint64_t v75 = *(void **)(v4 + 56);
                if (v75)
                {
                  *(void *)(v4 + 64) = v75;
                  operator delete(v75);
                }
                uint64_t v76 = *(void **)(v4 + 32);
                if (v76)
                {
                  *(void *)(v4 + 40) = v76;
                  operator delete(v76);
                }
                uint64_t v77 = *(std::__shared_weak_count **)(v4 + 24);
                if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                  std::__shared_weak_count::__release_weak(v77);
                }
                uint64_t v66 = v4;
                uint64_t v67 = 0x10B0C4002311774;
LABEL_173:
                MEMORY[0x192FF16B0](v66, v67);
              }
              break;
            default:
              return;
          }
          return;
        case 3:
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          uint64_t v88 = 0;
          uint64_t v46 = *(unsigned char **)(v7 + 8);
          uint64_t v45 = *(unsigned char **)(v7 + 16);
          int64_t v47 = v45 - v46;
          if (v45 != v46)
          {
            if (v47 < 0) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v48 = (char *)operator new(v45 - v46);
            uint64_t v49 = &v48[8 * (v47 >> 3)];
            uint64_t v88 = v48;
            uint64_t v90 = v49;
            memcpy(v48, v46, v47);
            uint64_t v89 = v49;
          }
          nitro::flexible_type_fail(0);
          if (v88) {
            operator delete(v88);
          }
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / 0.0;
          *(unsigned char *)(a2 + 24) = 1;
LABEL_90:
          if (atomic_fetch_add((atomic_ullong *volatile)v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v7) {
            goto LABEL_136;
          }
          uint64_t v50 = *(void **)(v7 + 8);
          if (v50)
          {
            *(void *)(v7 + 16) = v50;
            operator delete(v50);
          }
          uint64_t v40 = v7;
          uint64_t v41 = 0x1080C409938AC02;
          goto LABEL_135;
        case 4:
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          unint64_t v85 = 0;
          std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v85, *(void **)(v7 + 8), *(void **)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 4);
          nitro::flexible_type_fail(0);
          unint64_t v42 = v85;
          if (v85)
          {
            uint64_t v43 = v86;
            unint64_t v44 = v85;
            if ((void *)v86 != v85)
            {
              do
              {
                v43 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v87, v43);
              }
              while ((void *)v43 != v42);
              unint64_t v44 = v85;
            }
            uint64_t v86 = (uint64_t)v42;
            goto LABEL_100;
          }
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / 0.0;
          *(unsigned char *)(a2 + 24) = 1;
LABEL_118:
          if (atomic_fetch_add((atomic_ullong *volatile)v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v7) {
            goto LABEL_136;
          }
          uint64_t v60 = *(void *)(v7 + 8);
          if (!v60) {
            goto LABEL_134;
          }
          uint64_t v61 = *(void *)(v7 + 16);
          unint64_t v62 = *(void **)(v7 + 8);
          if (v61 != v60)
          {
            do
            {
              v61 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v7 + 24, v61);
            }
            while (v61 != v60);
            unint64_t v62 = *(void **)(v7 + 8);
          }
          *(void *)(v7 + 16) = v60;
          goto LABEL_133;
        case 5:
          unint64_t v83 = 0;
          uint64_t v84 = 0;
          unint64_t v82 = 0;
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&v82, *(char **)(v7 + 8), *(char **)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 5);
          nitro::flexible_type_fail(0);
          uint64_t v51 = v82;
          if (v82)
          {
            uint64_t v52 = (uint64_t)v83;
            unint64_t v44 = v82;
            if (v83 != v82)
            {
              do
              {
                v52 -= 32;
                std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v52);
              }
              while ((void *)v52 != v51);
              unint64_t v44 = v82;
            }
            unint64_t v83 = v51;
LABEL_100:
            operator delete(v44);
            *(void *)a2 = 0;
            *(void *)(a2 + 8) = 0;
            *(double *)(a2 + 16) = v10 / 0.0;
            *(unsigned char *)(a2 + 24) = 1;
            switch(v9)
            {
              case 0u:
                goto LABEL_110;
              case 1u:
                goto LABEL_90;
              case 2u:
                goto LABEL_118;
              case 3u:
                goto LABEL_126;
              case 7u:
                goto LABEL_69;
              default:
                goto LABEL_136;
            }
            goto LABEL_136;
          }
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / 0.0;
          *(unsigned char *)(a2 + 24) = 1;
LABEL_126:
          if (atomic_fetch_add((atomic_ullong *volatile)v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v7) {
            goto LABEL_136;
          }
          uint64_t v63 = *(void *)(v7 + 8);
          if (v63)
          {
            uint64_t v64 = *(void *)(v7 + 16);
            uint64_t v65 = *(void **)(v7 + 8);
            if (v64 != v63)
            {
              do
                uint64_t v64 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v64 - 32);
              while (v64 != v63);
              uint64_t v65 = *(void **)(v7 + 8);
            }
            *(void *)(v7 + 16) = v63;
            unint64_t v62 = v65;
LABEL_133:
            operator delete(v62);
          }
LABEL_134:
          uint64_t v40 = v7;
          uint64_t v41 = 0x1020C405E66F15BLL;
          goto LABEL_135;
        case 6:
        case 8:
          goto LABEL_182;
        case 7:
LABEL_60:
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / v31;
          *(unsigned char *)(a2 + 24) = 1;
          goto LABEL_136;
        case 9:
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(v7 + 8));
          nitro::flexible_type_fail(0);
          if (__p)
          {
            size_t v98 = __p;
            operator delete(__p);
          }
          if (v95)
          {
            unint64_t v96 = v95;
            operator delete(v95);
          }
          double v36 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
          if (__dst.__r_.__value_.__r.__words[2]
            && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(double *)(a2 + 16) = v10 / 0.0;
          *(unsigned char *)(a2 + 24) = 1;
LABEL_69:
          if (atomic_fetch_add((atomic_ullong *volatile)v7, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v7) {
            goto LABEL_136;
          }
          uint64_t v37 = *(void **)(v7 + 56);
          if (v37)
          {
            *(void *)(v7 + 64) = v37;
            operator delete(v37);
          }
          uint64_t v38 = *(void **)(v7 + 32);
          if (v38)
          {
            *(void *)(v7 + 40) = v38;
            operator delete(v38);
          }
          uint64_t v39 = *(std::__shared_weak_count **)(v7 + 24);
          if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
          uint64_t v40 = v7;
          uint64_t v41 = 0x10B0C4002311774;
          goto LABEL_135;
        default:
          goto LABEL_183;
      }
    case 3:
      memset(&__dst, 0, sizeof(__dst));
      int64_t v21 = *(unsigned char **)(v4 + 8);
      uint64_t v20 = *(unsigned char **)(v4 + 16);
      int64_t v22 = v20 - v21;
      if (v20 != v21)
      {
        if (v22 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(v20 - v21);
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0] + 8 * (v22 >> 3);
        __dst.__r_.__value_.__r.__words[2] = v23;
        memcpy(__dst.__r_.__value_.__l.__data_, v21, v22);
        __dst.__r_.__value_.__l.__size_ = v23;
      }
      nitro::flexible_type_fail(0);
      if (__dst.__r_.__value_.__r.__words[0])
      {
        __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      goto LABEL_51;
    case 4:
      memset(&__dst, 0, sizeof(__dst));
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__dst, *(void **)(v4 + 8), *(void **)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 4);
      nitro::flexible_type_fail(0);
      std::string::size_type v17 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
        {
          do
          {
            size -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&__dst.__r_.__value_.__r.__words[2], size);
          }
          while (size != v17);
          uint64_t v19 = (void *)__dst.__r_.__value_.__r.__words[0];
        }
        __dst.__r_.__value_.__l.__size_ = v17;
        operator delete(v19);
      }
      goto LABEL_51;
    case 5:
      memset(&__dst, 0, sizeof(__dst));
      std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&__dst, *(char **)(v4 + 8), *(char **)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 5);
      nitro::flexible_type_fail(0);
      std::string::size_type v24 = __dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v25 = __dst.__r_.__value_.__l.__size_;
        uint64_t v26 = (void *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__l.__size_ != __dst.__r_.__value_.__r.__words[0])
        {
          do
            std::string::size_type v25 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v25 - 32);
          while (v25 != v24);
          uint64_t v26 = (void *)__dst.__r_.__value_.__r.__words[0];
        }
        __dst.__r_.__value_.__l.__size_ = v24;
        operator delete(v26);
      }
      goto LABEL_51;
    case 6:
    case 8:
LABEL_182:
      __break(1u);
      goto LABEL_183;
    case 7:
      goto LABEL_51;
    case 9:
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(v4 + 8));
      nitro::flexible_type_fail(0);
      if (__p)
      {
        size_t v98 = __p;
        operator delete(__p);
      }
      if (v95)
      {
        unint64_t v96 = v95;
        operator delete(v95);
      }
      std::string::size_type v16 = (std::__shared_weak_count *)__dst.__r_.__value_.__r.__words[2];
      if (__dst.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(__dst.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      goto LABEL_51;
    default:
LABEL_183:
      JUMPOUT(0);
  }
}

void sub_1925DAA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)&a33);
  switch((int)a9)
  {
    case 0:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      if (*(char *)(v43 + 31) < 0) {
        operator delete(*(void **)(v43 + 8));
      }
      uint64_t v46 = v43;
      uint64_t v47 = 0x1012C404EF22A49;
      goto LABEL_49;
    case 1:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v49 = *(void **)(v43 + 8);
      if (v49)
      {
        *(void *)(v43 + 16) = v49;
        operator delete(v49);
      }
      uint64_t v46 = v43;
      uint64_t v47 = 0x1080C409938AC02;
      goto LABEL_49;
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v51 = *(void *)(v43 + 8);
      if (!v51) {
        goto LABEL_35;
      }
      uint64_t v52 = *(void *)(v43 + 16);
      uint64_t v53 = *(void **)(v43 + 8);
      if (v52 != v51)
      {
        do
        {
          v52 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v43 + 24, v52);
        }
        while (v52 != v51);
        uint64_t v53 = *(void **)(v43 + 8);
      }
      *(void *)(v43 + 16) = v51;
      goto LABEL_34;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      uint64_t v55 = *(void *)(v43 + 8);
      if (!v55) {
        goto LABEL_35;
      }
      uint64_t v56 = *(void *)(v43 + 16);
      unint64_t v57 = *(void **)(v43 + 8);
      if (v56 != v55)
      {
        do
          uint64_t v56 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v56 - 32);
        while (v56 != v55);
        unint64_t v57 = *(void **)(v43 + 8);
      }
      *(void *)(v43 + 16) = v55;
      uint64_t v53 = v57;
LABEL_34:
      operator delete(v53);
LABEL_35:
      uint64_t v46 = v43;
      uint64_t v47 = 0x1020C405E66F15BLL;
      goto LABEL_49;
    case 7:
      if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1 || v43 == 0) {
        goto LABEL_50;
      }
      long long v59 = *(void **)(v43 + 56);
      if (v59)
      {
        *(void *)(v43 + 64) = v59;
        operator delete(v59);
        uint64_t v60 = *(void **)(v43 + 32);
        if (!v60)
        {
LABEL_42:
          uint64_t v61 = *(std::__shared_weak_count **)(v43 + 24);
          if (!v61) {
            goto LABEL_48;
          }
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v60 = *(void **)(v43 + 32);
        if (!v60) {
          goto LABEL_42;
        }
      }
      *(void *)(v43 + 40) = v60;
      operator delete(v60);
      uint64_t v61 = *(std::__shared_weak_count **)(v43 + 24);
      if (!v61)
      {
LABEL_48:
        uint64_t v46 = v43;
        uint64_t v47 = 0x10B0C4002311774;
LABEL_49:
        MEMORY[0x192FF16B0](v46, v47);
        _Unwind_Resume(a1);
      }
LABEL_46:
      if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
      goto LABEL_48;
    default:
LABEL_50:
      _Unwind_Resume(a1);
      return;
  }
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_4>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    uint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925DB3EC(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A388;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A388;
  uint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A388;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925DB6D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A388;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5::$_5((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v79);
  if (v79[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v76);
  if (v76[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v78)
  {
    case 1:
      unsigned int v4 = 0;
      switch(v81)
      {
        case 1:
          unsigned int v4 = *(double *)&v80 == *(double *)&v77;
          goto LABEL_48;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          uint64_t v46 = *(char **)(v80 + 32);
          uint64_t v45 = *(char **)(v80 + 40);
          if (v45 == v46 || !*(void *)(v80 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_76;
          }
          unint64_t v47 = v45 - v46 - 8;
          if (v47 >= 8)
          {
            uint64_t v69 = (v47 >> 3) + 1;
            uint64_t v49 = &v46[8 * (v69 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v70 = v46 + 8;
            uint64_t v71 = 1;
            uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v73 = 1;
            do
            {
              v71 *= *(v70 - 1);
              v73 *= *v70;
              v70 += 2;
              v72 -= 2;
            }
            while (v72);
            uint64_t v48 = v73 * v71;
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_101:
              uint64_t v75 = v48;
              if (v48 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), *(double *)&v77);
                goto LABEL_103;
              }
LABEL_76:
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v48 = 1;
            uint64_t v49 = *(char **)(v80 + 32);
          }
          do
          {
            uint64_t v74 = *(void *)v49;
            v49 += 8;
            v48 *= v74;
          }
          while (v49 != v45);
          goto LABEL_101;
        default:
          uint64_t v22 = v77;
          uint64_t v23 = v80;
          goto LABEL_51;
      }
    case 2:
      if (v81 != 2) {
        goto LABEL_47;
      }
      if (*(char *)(v80 + 31) < 0) {
        size_t v15 = *(void *)(v80 + 16);
      }
      else {
        size_t v15 = *(unsigned __int8 *)(v80 + 31);
      }
      uint64_t v24 = *(unsigned __int8 *)(v77 + 31);
      if ((*(char *)(v77 + 31) & 0x80000000) == 0)
      {
        if (v15 == v24) {
          goto LABEL_35;
        }
LABEL_47:
        unsigned int v4 = 0;
        goto LABEL_48;
      }
      if (v15 != *(void *)(v77 + 16)) {
        goto LABEL_47;
      }
LABEL_35:
      std::string::size_type v25 = (void *)(v80 + 8);
      if ((*(unsigned char *)(v80 + 31) & 0x80) != 0)
      {
        std::string::size_type v25 = (void *)*v25;
        uint64_t v26 = (void *)(v77 + 8);
        if ((v24 & 0x80) == 0)
        {
LABEL_37:
          if ((*(unsigned char *)(v80 + 31) & 0x80) == 0) {
            goto LABEL_38;
          }
LABEL_68:
          unsigned int v4 = memcmp(v25, v26, v15) == 0;
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v26 = (void *)(v77 + 8);
        if ((v24 & 0x80) == 0) {
          goto LABEL_37;
        }
      }
      uint64_t v26 = (void *)*v26;
      if ((*(unsigned char *)(v80 + 31) & 0x80) != 0) {
        goto LABEL_68;
      }
LABEL_38:
      if (v15)
      {
        size_t v27 = v15 - 1;
        do
        {
          int v29 = *(unsigned __int8 *)v25;
          std::string::size_type v25 = (void *)((char *)v25 + 1);
          int v28 = v29;
          int v31 = *(unsigned __int8 *)v26;
          uint64_t v26 = (void *)((char *)v26 + 1);
          int v30 = v31;
          BOOL v33 = v27-- != 0;
          unsigned int v4 = v28 == v30;
        }
        while (v28 == v30 && v33);
      }
      else
      {
LABEL_49:
        unsigned int v4 = 1;
      }
LABEL_48:
      uint64_t v34 = v4;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v76);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v79);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v34;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    case 3:
      if (v81 != 3) {
        goto LABEL_47;
      }
      uint64_t v6 = *(double **)(v80 + 8);
      uint64_t v5 = *(double **)(v80 + 16);
      unint64_t v7 = v5 - v6;
      int v8 = *(double **)(v77 + 8);
      if (v7 != (uint64_t)(*(void *)(v77 + 16) - (void)v8) >> 3) {
        goto LABEL_47;
      }
      if (v5 == v6) {
        goto LABEL_49;
      }
      if (v7 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v5 - v6;
      }
      if (*v6 != *v8) {
        goto LABEL_47;
      }
      unint64_t v10 = 0;
      uint64_t v11 = v8 + 1;
      uint64_t v12 = v6 + 1;
      while (v9 - 1 != v10)
      {
        double v13 = v12[v10];
        double v14 = v11[v10++];
        if (v13 != v14) {
          goto LABEL_78;
        }
      }
      unint64_t v10 = v9;
LABEL_78:
      unsigned int v4 = v10 >= v7;
      goto LABEL_48;
    case 4:
      if (v81 != 4) {
        goto LABEL_47;
      }
      unsigned int v4 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v75, (uint64_t *)(v80 + 8), (void *)(v77 + 8));
      goto LABEL_48;
    case 5:
      if (v81 != 5) {
        goto LABEL_47;
      }
      nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v75, (uint64_t *)(v80 + 8), (uint64_t *)(v77 + 8));
      goto LABEL_48;
    case 6:
    case 8:
LABEL_106:
      __break(1u);
      return;
    case 7:
      unsigned int v4 = v81 == 7;
      goto LABEL_48;
    case 9:
      std::string::size_type v16 = (_DWORD *)(v77 + 8);
      unsigned int v4 = 0;
      switch(v81)
      {
        case 1:
          uint64_t v41 = *(char **)(v77 + 32);
          uint64_t v40 = *(char **)(v77 + 40);
          unint64_t v42 = (char *)(v40 - v41);
          if (v40 == v41 || !*(void *)(v77 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_74;
          }
          if ((unint64_t)(v42 - 8) >= 8)
          {
            unint64_t v63 = ((unint64_t)(v42 - 8) >> 3) + 1;
            unint64_t v44 = &v41[8 * (v63 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v64 = v41 + 8;
            uint64_t v65 = 1;
            uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v67 = 1;
            do
            {
              v65 *= *(v64 - 1);
              v67 *= *v64;
              v64 += 2;
              v66 -= 2;
            }
            while (v66);
            uint64_t v43 = v67 * v65;
            if (v63 == (v63 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_95:
              uint64_t v75 = v43;
              if (v43 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v16, *(double *)&v80);
                goto LABEL_103;
              }
LABEL_74:
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v43 = 1;
            unint64_t v44 = *(char **)(v77 + 32);
          }
          do
          {
            uint64_t v68 = *(void *)v44;
            v44 += 8;
            v43 *= v68;
          }
          while (v44 != v40);
          goto LABEL_95;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          unsigned int v4 = nitro::ndarray_container::operator==((_DWORD *)(v80 + 8), (_DWORD *)(v77 + 8));
          goto LABEL_48;
        default:
          uint64_t v18 = *(char **)(v77 + 32);
          std::string::size_type v17 = *(char **)(v77 + 40);
          uint64_t v19 = (char *)(v17 - v18);
          if (v17 == v18 || !*(void *)(v77 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_70;
          }
          if ((unint64_t)(v19 - 8) >= 8)
          {
            unint64_t v50 = ((unint64_t)(v19 - 8) >> 3) + 1;
            int64_t v21 = &v18[8 * (v50 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v51 = v18 + 8;
            uint64_t v52 = 1;
            uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v54 = 1;
            do
            {
              v52 *= *(v51 - 1);
              v54 *= *v51;
              v51 += 2;
              v53 -= 2;
            }
            while (v53);
            uint64_t v20 = v54 * v52;
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_83:
              uint64_t v75 = v20;
              if (v20 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v16, v80);
LABEL_103:
                unsigned int v4 = v56;
                goto LABEL_48;
              }
LABEL_70:
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v20 = 1;
            int64_t v21 = *(char **)(v77 + 32);
          }
          do
          {
            uint64_t v55 = *(void *)v21;
            v21 += 8;
            v20 *= v55;
          }
          while (v21 != v17);
          goto LABEL_83;
      }
    default:
      unsigned int v4 = 0;
      switch(v81)
      {
        case 1:
          uint64_t v22 = v80;
          uint64_t v23 = v77;
LABEL_51:
          unsigned int v4 = *(double *)&v22 == (double)v23;
          goto LABEL_48;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          double v36 = *(char **)(v80 + 32);
          uint64_t v35 = *(char **)(v80 + 40);
          if (v35 == v36 || !*(void *)(v80 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_72;
          }
          unint64_t v37 = v35 - v36 - 8;
          if (v37 >= 8)
          {
            uint64_t v57 = (v37 >> 3) + 1;
            uint64_t v39 = &v36[8 * (v57 & 0x3FFFFFFFFFFFFFFELL)];
            long long v58 = v36 + 8;
            uint64_t v59 = 1;
            uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v61 = 1;
            do
            {
              v59 *= *(v58 - 1);
              v61 *= *v58;
              v58 += 2;
              v60 -= 2;
            }
            while (v60);
            uint64_t v38 = v61 * v59;
            if (v57 == (v57 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_89:
              uint64_t v75 = v38;
              if (v38 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), v77);
                goto LABEL_103;
              }
LABEL_72:
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v38 = 1;
            uint64_t v39 = *(char **)(v80 + 32);
          }
          do
          {
            uint64_t v62 = *(void *)v39;
            v39 += 8;
            v38 *= v62;
          }
          while (v39 != v35);
          goto LABEL_89;
        default:
          unsigned int v4 = v80 == v77;
          goto LABEL_48;
      }
  }
}

void sub_1925DBDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_5>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    size_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      std::string::size_type v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v17 = __p;
      }
      else {
        std::string::size_type v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925DC234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) == a2;
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      unsigned int v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) == a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        double v36 = v35;
        operator delete(v35);
      }
      unsigned int v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) == (float)a2;
      if (v16)
      {
        std::string::size_type v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        size_t v15 = v14;
        operator delete(v14);
      }
      unsigned int v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H0 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S0, H0 }
      BOOL v3 = _S0 == (float)a2;
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      unsigned int v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 256, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DC5C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DC5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DC5CCLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925DC87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DCA04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DCA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DCA10);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 252, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      std::string::size_type v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v17 = __p;
      }
      else {
        std::string::size_type v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925DCD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 == _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 == _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        std::string::size_type v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 == _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 == _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 == _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 252, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DD0D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DD0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DD0DCLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925DD38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DD514(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DD528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DD520);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      std::string::size_type v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v17 = __p;
      }
      else {
        std::string::size_type v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925DD860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) == a2;
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      unsigned int v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) == a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        double v36 = v35;
        operator delete(v35);
      }
      unsigned int v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) == (float)a2;
      if (v16)
      {
        std::string::size_type v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      unsigned int v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H1 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S1, H1 }
      BOOL v3 = (float)a2 == _S1;
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      unsigned int v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 248, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DDBEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DDC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DDBF8);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925DDEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DE030(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DE044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DE03CLL);
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 244, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      std::string::size_type v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v17 = __p;
      }
      else {
        std::string::size_type v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925DE37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        int v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 == _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 == _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        std::string::size_type v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 == _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 == _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 == _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 244, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DE6FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DE708);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925DE9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925DEB40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925DEB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925DEB4CLL);
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925DED64(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A3E0;
  unint64_t v2 = a1 + 1;
  BOOL v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A3E0;
  unint64_t v2 = a1 + 1;
  BOOL v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A3E0;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925DF04C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A3E0;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6::$_6((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v79);
  if (v79[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v76);
  if (v76[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v78)
  {
    case 1:
      int v4 = 0;
      switch(v81)
      {
        case 1:
          int v4 = *(double *)&v80 == *(double *)&v77;
          goto LABEL_48;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          uint64_t v46 = *(char **)(v80 + 32);
          uint64_t v45 = *(char **)(v80 + 40);
          if (v45 == v46 || !*(void *)(v80 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_76;
          }
          unint64_t v47 = v45 - v46 - 8;
          if (v47 >= 8)
          {
            uint64_t v69 = (v47 >> 3) + 1;
            uint64_t v49 = &v46[8 * (v69 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v70 = v46 + 8;
            uint64_t v71 = 1;
            uint64_t v72 = v69 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v73 = 1;
            do
            {
              v71 *= *(v70 - 1);
              v73 *= *v70;
              v70 += 2;
              v72 -= 2;
            }
            while (v72);
            uint64_t v48 = v73 * v71;
            if (v69 == (v69 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_101:
              uint64_t v75 = v48;
              if (v48 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), *(double *)&v77);
                goto LABEL_103;
              }
LABEL_76:
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v48 = 1;
            uint64_t v49 = *(char **)(v80 + 32);
          }
          do
          {
            uint64_t v74 = *(void *)v49;
            v49 += 8;
            v48 *= v74;
          }
          while (v49 != v45);
          goto LABEL_101;
        default:
          uint64_t v22 = v77;
          uint64_t v23 = v80;
          goto LABEL_51;
      }
    case 2:
      if (v81 != 2) {
        goto LABEL_47;
      }
      if (*(char *)(v80 + 31) < 0) {
        size_t v15 = *(void *)(v80 + 16);
      }
      else {
        size_t v15 = *(unsigned __int8 *)(v80 + 31);
      }
      uint64_t v24 = *(unsigned __int8 *)(v77 + 31);
      if ((*(char *)(v77 + 31) & 0x80000000) == 0)
      {
        if (v15 == v24) {
          goto LABEL_35;
        }
LABEL_47:
        int v4 = 0;
        goto LABEL_48;
      }
      if (v15 != *(void *)(v77 + 16)) {
        goto LABEL_47;
      }
LABEL_35:
      uint64_t v25 = (void *)(v80 + 8);
      if ((*(unsigned char *)(v80 + 31) & 0x80) != 0)
      {
        uint64_t v25 = (void *)*v25;
        uint64_t v26 = (void *)(v77 + 8);
        if ((v24 & 0x80) == 0)
        {
LABEL_37:
          if ((*(unsigned char *)(v80 + 31) & 0x80) == 0) {
            goto LABEL_38;
          }
LABEL_68:
          int v4 = memcmp(v25, v26, v15) == 0;
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v26 = (void *)(v77 + 8);
        if ((v24 & 0x80) == 0) {
          goto LABEL_37;
        }
      }
      uint64_t v26 = (void *)*v26;
      if ((*(unsigned char *)(v80 + 31) & 0x80) != 0) {
        goto LABEL_68;
      }
LABEL_38:
      if (v15)
      {
        size_t v27 = v15 - 1;
        do
        {
          int v29 = *(unsigned __int8 *)v25;
          uint64_t v25 = (void *)((char *)v25 + 1);
          int v28 = v29;
          int v31 = *(unsigned __int8 *)v26;
          uint64_t v26 = (void *)((char *)v26 + 1);
          int v30 = v31;
          BOOL v33 = v27-- != 0;
          int v4 = v28 == v30;
        }
        while (v28 == v30 && v33);
      }
      else
      {
LABEL_49:
        int v4 = 1;
      }
LABEL_48:
      uint64_t v34 = v4 ^ 1u;
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v76);
      nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v79);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = v34;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    case 3:
      if (v81 != 3) {
        goto LABEL_47;
      }
      uint64_t v6 = *(double **)(v80 + 8);
      uint64_t v5 = *(double **)(v80 + 16);
      unint64_t v7 = v5 - v6;
      int v8 = *(double **)(v77 + 8);
      if (v7 != (uint64_t)(*(void *)(v77 + 16) - (void)v8) >> 3) {
        goto LABEL_47;
      }
      if (v5 == v6) {
        goto LABEL_49;
      }
      if (v7 <= 1) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = v5 - v6;
      }
      if (*v6 != *v8) {
        goto LABEL_47;
      }
      unint64_t v10 = 0;
      uint64_t v11 = v8 + 1;
      uint64_t v12 = v6 + 1;
      while (v9 - 1 != v10)
      {
        double v13 = v12[v10];
        double v14 = v11[v10++];
        if (v13 != v14) {
          goto LABEL_78;
        }
      }
      unint64_t v10 = v9;
LABEL_78:
      int v4 = v10 >= v7;
      goto LABEL_48;
    case 4:
      if (v81 != 4) {
        goto LABEL_47;
      }
      int v4 = nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v75, (uint64_t *)(v80 + 8), (void *)(v77 + 8));
      goto LABEL_48;
    case 5:
      if (v81 != 5) {
        goto LABEL_47;
      }
      nitro::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v75, (uint64_t *)(v80 + 8), (uint64_t *)(v77 + 8));
      goto LABEL_48;
    case 6:
    case 8:
LABEL_106:
      __break(1u);
      return;
    case 7:
      int v4 = v81 == 7;
      goto LABEL_48;
    case 9:
      std::string::size_type v16 = (_DWORD *)(v77 + 8);
      int v4 = 0;
      switch(v81)
      {
        case 1:
          uint64_t v41 = *(char **)(v77 + 32);
          uint64_t v40 = *(char **)(v77 + 40);
          unint64_t v42 = (char *)(v40 - v41);
          if (v40 == v41 || !*(void *)(v77 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_74;
          }
          if ((unint64_t)(v42 - 8) >= 8)
          {
            unint64_t v63 = ((unint64_t)(v42 - 8) >> 3) + 1;
            unint64_t v44 = &v41[8 * (v63 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v64 = v41 + 8;
            uint64_t v65 = 1;
            uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v67 = 1;
            do
            {
              v65 *= *(v64 - 1);
              v67 *= *v64;
              v64 += 2;
              v66 -= 2;
            }
            while (v66);
            uint64_t v43 = v67 * v65;
            if (v63 == (v63 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_95:
              uint64_t v75 = v43;
              if (v43 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v16, *(double *)&v80);
                goto LABEL_103;
              }
LABEL_74:
              nitro::flexible_type_impl::approx_equality_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v43 = 1;
            unint64_t v44 = *(char **)(v77 + 32);
          }
          do
          {
            uint64_t v68 = *(void *)v44;
            v44 += 8;
            v43 *= v68;
          }
          while (v44 != v40);
          goto LABEL_95;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          int v4 = nitro::ndarray_container::operator==((_DWORD *)(v80 + 8), (_DWORD *)(v77 + 8));
          goto LABEL_48;
        default:
          uint64_t v18 = *(char **)(v77 + 32);
          std::string::size_type v17 = *(char **)(v77 + 40);
          uint64_t v19 = (char *)(v17 - v18);
          if (v17 == v18 || !*(void *)(v77 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_70;
          }
          if ((unint64_t)(v19 - 8) >= 8)
          {
            unint64_t v50 = ((unint64_t)(v19 - 8) >> 3) + 1;
            uint64_t v21 = &v18[8 * (v50 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v51 = v18 + 8;
            uint64_t v52 = 1;
            uint64_t v53 = v50 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v54 = 1;
            do
            {
              v52 *= *(v51 - 1);
              v54 *= *v51;
              v51 += 2;
              v53 -= 2;
            }
            while (v53);
            uint64_t v20 = v54 * v52;
            if (v50 == (v50 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_83:
              uint64_t v75 = v20;
              if (v20 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v16, v80);
LABEL_103:
                int v4 = v56;
                goto LABEL_48;
              }
LABEL_70:
              nitro::flexible_type_impl::approx_equality_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v20 = 1;
            uint64_t v21 = *(char **)(v77 + 32);
          }
          do
          {
            uint64_t v55 = *(void *)v21;
            v21 += 8;
            v20 *= v55;
          }
          while (v21 != v17);
          goto LABEL_83;
      }
    default:
      int v4 = 0;
      switch(v81)
      {
        case 1:
          uint64_t v22 = v80;
          uint64_t v23 = v77;
LABEL_51:
          int v4 = *(double *)&v22 == (double)v23;
          goto LABEL_48;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_48;
        case 6:
        case 8:
          goto LABEL_106;
        case 9:
          double v36 = *(char **)(v80 + 32);
          uint64_t v35 = *(char **)(v80 + 40);
          if (v35 == v36 || !*(void *)(v80 + 16))
          {
            uint64_t v75 = 0;
            goto LABEL_72;
          }
          unint64_t v37 = v35 - v36 - 8;
          if (v37 >= 8)
          {
            uint64_t v57 = (v37 >> 3) + 1;
            uint64_t v39 = &v36[8 * (v57 & 0x3FFFFFFFFFFFFFFELL)];
            long long v58 = v36 + 8;
            uint64_t v59 = 1;
            uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v61 = 1;
            do
            {
              v59 *= *(v58 - 1);
              v61 *= *v58;
              v58 += 2;
              v60 -= 2;
            }
            while (v60);
            uint64_t v38 = v61 * v59;
            if (v57 == (v57 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_89:
              uint64_t v75 = v38;
              if (v38 == 1)
              {
                BOOL v56 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl24approx_equality_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), v77);
                goto LABEL_103;
              }
LABEL_72:
              nitro::flexible_type_impl::approx_equality_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v38 = 1;
            uint64_t v39 = *(char **)(v80 + 32);
          }
          do
          {
            uint64_t v62 = *(void *)v39;
            v39 += 8;
            v38 *= v62;
          }
          while (v39 != v35);
          goto LABEL_89;
        default:
          int v4 = v80 == v77;
          goto LABEL_48;
      }
  }
}

void sub_1925DF760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_6>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

uint64_t nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = (atomic_ullong *volatile *)(a1 + 56);
  *(unsigned char *)(a1 + 64) = 0;
  if (a2 != a1)
  {
    unint64_t v7 = *(atomic_ullong **)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    atomic_ullong *volatile *v6 = v7;
    int v8 = *(unsigned __int8 *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v8;
    if ((v8 - 2) < 4 || v8 == 9) {
      atomic_fetch_add(*v6, 1uLL);
    }
  }
  uint64_t v9 = *(void *)(a2 + 96);
  if (!v9) {
    goto LABEL_14;
  }
  if (v9 != a2 + 72)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
LABEL_14:
    *(void *)(a1 + 96) = v9;
    goto LABEL_16;
  }
  *(void *)(a1 + 96) = a1 + 72;
  (*(void (**)(void))(**(void **)(a2 + 96) + 24))(*(void *)(a2 + 96));
LABEL_16:
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 128) = 0;
  uint64_t v11 = (atomic_ullong *volatile *)(a1 + 128);
  *(unsigned char *)(a1 + 136) = 0;
  if (a2 != a1)
  {
    uint64_t v12 = *(atomic_ullong **)(a2 + 128);
    *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
    *uint64_t v11 = v12;
    int v13 = *(unsigned __int8 *)(a2 + 136);
    *(unsigned char *)(a1 + 136) = v13;
    if ((v13 - 2) < 4 || v13 == 9) {
      atomic_fetch_add(*v11, 1uLL);
    }
  }
  return a1;
}

void sub_1925DFA84(_Unwind_Exception *a1)
{
  nitro::nitro_variable::~nitro_variable(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  if (v4 == v1)
  {
    nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v1);
    _Unwind_Resume(a1);
  }
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0::$_0(v4);
  _Unwind_Resume(a1);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A438;
  unint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  return a1;
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::~__func(void *a1)
{
  *a1 = &unk_1EE37A438;
  unint64_t v2 = a1 + 1;
  unint64_t v3 = a1 + 10;
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 15));
  uint64_t v4 = (void *)a1[13];
  if (v4 == v3)
  {
    (*(void (**)(void *))(*v3 + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)(a1 + 6));
  uint64_t v5 = (void *)a1[4];
  if (v5 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }

  JUMPOUT(0x192FF16B0);
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x98uLL);
  void *v2 = &unk_1EE37A438;
  nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1925DFD6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37A438;
  return nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7::$_7((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_0>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  nitro::impl::delayed_variable::operator()(a1 + 8, (uint64_t)v83);
  if (v83[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  nitro::impl::delayed_variable::operator()(a1 + 80, (uint64_t)v80);
  if (v80[0]) {
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  switch(v82)
  {
    case 1:
      switch(v85)
      {
        case 1:
          double v26 = v84;
          double v27 = v81;
          goto LABEL_51;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_29;
        case 6:
        case 8:
          goto LABEL_108;
        case 9:
          uint64_t v34 = *(char **)(*(void *)&v84 + 32);
          BOOL v33 = *(char **)(*(void *)&v84 + 40);
          if (v33 == v34 || !*(void *)(*(void *)&v84 + 16))
          {
            uint64_t v79 = 0;
            goto LABEL_70;
          }
          unint64_t v35 = v33 - v34 - 8;
          if (v35 >= 8)
          {
            uint64_t v61 = (v35 >> 3) + 1;
            unint64_t v37 = &v34[8 * (v61 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v62 = v34 + 8;
            uint64_t v63 = 1;
            uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v65 = 1;
            do
            {
              v63 *= *(v62 - 1);
              v65 *= *v62;
              v62 += 2;
              v64 -= 2;
            }
            while (v64);
            uint64_t v36 = v65 * v63;
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_91:
              uint64_t v79 = v36;
              if (v36 == 1)
              {
                BOOL v54 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v84 + 8), v81);
                goto LABEL_105;
              }
LABEL_70:
              nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v36 = 1;
            unint64_t v37 = *(char **)(*(void *)&v84 + 32);
          }
          do
          {
            uint64_t v66 = *(void *)v37;
            v37 += 8;
            v36 *= v66;
          }
          while (v37 != v33);
          goto LABEL_91;
        default:
          BOOL v5 = v81 > (double)*(uint64_t *)&v84;
          goto LABEL_30;
      }
    case 2:
      if (v85 != 2) {
        goto LABEL_29;
      }
      char v18 = *(unsigned char *)(*(void *)&v81 + 31);
      if (*(char *)(*(void *)&v84 + 31) < 0)
      {
        uint64_t v19 = *(const void **)(*(void *)&v84 + 8);
        size_t v20 = *(void *)(*(void *)&v84 + 16);
      }
      else
      {
        uint64_t v19 = (const void *)(*(void *)&v84 + 8);
        size_t v20 = *(unsigned __int8 *)(*(void *)&v84 + 31);
      }
      if (v18 >= 0) {
        size_t v22 = *(unsigned __int8 *)(*(void *)&v81 + 31);
      }
      else {
        size_t v22 = *(void *)(*(void *)&v81 + 16);
      }
      if (v18 >= 0) {
        uint64_t v23 = (const void *)(*(void *)&v81 + 8);
      }
      else {
        uint64_t v23 = *(const void **)(*(void *)&v81 + 8);
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v19, v23, v24);
      if (v25) {
        BOOL v5 = v25 < 0;
      }
      else {
        BOOL v5 = v20 < v22;
      }
      goto LABEL_30;
    case 3:
      if (v85 != 3) {
        goto LABEL_29;
      }
      uint64_t v12 = *(double **)(*(void *)&v84 + 8);
      int v13 = *(double **)(*(void *)&v81 + 8);
      unint64_t v14 = (uint64_t)(*(void *)(*(void *)&v81 + 16) - (void)v13) >> 3;
      unint64_t v15 = (uint64_t)(*(void *)(*(void *)&v84 + 16) - (void)v12) >> 3;
      if (*(double **)(*(void *)&v84 + 16) == v12) {
        goto LABEL_23;
      }
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = (uint64_t)(*(void *)(*(void *)&v84 + 16) - (void)v12) >> 3;
      }
      uint64_t v17 = (uint64_t)(*(void *)(*(void *)&v81 + 16) - (void)v13) >> 3;
      while (2)
      {
        if (v17 && *v12 <= *v13)
        {
          if (*v12 >= *v13)
          {
            ++v13;
            ++v12;
            --v17;
            if (!--v16)
            {
LABEL_23:
              BOOL v5 = v15 < v14;
              goto LABEL_30;
            }
            continue;
          }
          BOOL v5 = 1;
        }
        else
        {
          BOOL v5 = 0;
        }
        goto LABEL_30;
      }
    case 4:
      if (v85 != 4) {
        goto LABEL_29;
      }
      BOOL v5 = nitro::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v79, (uint64_t *)(*(void *)&v84 + 8), (void *)(*(void *)&v81 + 8));
      goto LABEL_30;
    case 5:
    case 7:
LABEL_29:
      nitro::flexible_type_fail(0);
      BOOL v5 = 0;
      goto LABEL_30;
    case 6:
    case 8:
LABEL_108:
      __break(1u);
      return;
    case 9:
      uint64_t v6 = (_DWORD *)(*(void *)&v81 + 8);
      switch(v85)
      {
        case 1:
          uint64_t v39 = *(char **)(*(void *)&v81 + 32);
          uint64_t v38 = *(char **)(*(void *)&v81 + 40);
          uint64_t v40 = (char *)(v38 - v39);
          if (v38 == v39 || !*(void *)(*(void *)&v81 + 16))
          {
            uint64_t v79 = 0;
            goto LABEL_72;
          }
          if ((unint64_t)(v40 - 8) >= 8)
          {
            unint64_t v67 = ((unint64_t)(v40 - 8) >> 3) + 1;
            unint64_t v42 = &v39[8 * (v67 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v68 = v39 + 8;
            uint64_t v69 = 1;
            uint64_t v70 = v67 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v71 = 1;
            do
            {
              v69 *= *(v68 - 1);
              v71 *= *v68;
              v68 += 2;
              v70 -= 2;
            }
            while (v70);
            uint64_t v41 = v71 * v69;
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_97:
              uint64_t v79 = v41;
              if (v41 == 1)
              {
                BOOL v54 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, v84);
                goto LABEL_105;
              }
LABEL_72:
              nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v41 = 1;
            unint64_t v42 = *(char **)(*(void *)&v81 + 32);
          }
          do
          {
            uint64_t v72 = *(void *)v42;
            v42 += 8;
            v41 *= v72;
          }
          while (v42 != v38);
          goto LABEL_97;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_29;
        case 6:
        case 8:
          goto LABEL_108;
        case 9:
          unint64_t v44 = *(char **)(*(void *)&v81 + 32);
          uint64_t v43 = *(char **)(*(void *)&v81 + 40);
          uint64_t v45 = (char *)(v43 - v44);
          if (v43 == v44 || !*(void *)(*(void *)&v81 + 16))
          {
            uint64_t v79 = 0;
            goto LABEL_74;
          }
          if ((unint64_t)(v45 - 8) >= 8)
          {
            unint64_t v73 = ((unint64_t)(v45 - 8) >> 3) + 1;
            unint64_t v47 = &v44[8 * (v73 & 0x3FFFFFFFFFFFFFFELL)];
            uint64_t v74 = v44 + 8;
            uint64_t v75 = 1;
            uint64_t v76 = v73 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v77 = 1;
            do
            {
              v75 *= *(v74 - 1);
              v77 *= *v74;
              v74 += 2;
              v76 -= 2;
            }
            while (v76);
            uint64_t v46 = v77 * v75;
            if (v73 == (v73 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_103:
              uint64_t v79 = v46;
              if (v46 == 1)
              {
                BOOL v54 = _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(*(void *)&v84 + 8), v6);
                goto LABEL_105;
              }
LABEL_74:
              nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v46 = 1;
            unint64_t v47 = *(char **)(*(void *)&v81 + 32);
          }
          do
          {
            uint64_t v78 = *(void *)v47;
            v47 += 8;
            v46 *= v78;
          }
          while (v47 != v43);
          goto LABEL_103;
        default:
          int v8 = *(char **)(*(void *)&v81 + 32);
          unint64_t v7 = *(char **)(*(void *)&v81 + 40);
          uint64_t v9 = (char *)(v7 - v8);
          if (v7 == v8 || !*(void *)(*(void *)&v81 + 16))
          {
            uint64_t v79 = 0;
            goto LABEL_66;
          }
          if ((unint64_t)(v9 - 8) < 8)
          {
            uint64_t v10 = 1;
            uint64_t v11 = *(char **)(*(void *)&v81 + 32);
            do
            {
LABEL_78:
              uint64_t v53 = *(void *)v11;
              v11 += 8;
              v10 *= v53;
            }
            while (v11 != v7);
            goto LABEL_79;
          }
          unint64_t v48 = ((unint64_t)(v9 - 8) >> 3) + 1;
          uint64_t v11 = &v8[8 * (v48 & 0x3FFFFFFFFFFFFFFELL)];
          uint64_t v49 = v8 + 8;
          uint64_t v50 = 1;
          uint64_t v51 = v48 & 0x3FFFFFFFFFFFFFFELL;
          uint64_t v52 = 1;
          do
          {
            v50 *= *(v49 - 1);
            v52 *= *v49;
            v49 += 2;
            v51 -= 2;
          }
          while (v51);
          uint64_t v10 = v52 * v50;
          if (v48 != (v48 & 0x3FFFFFFFFFFFFFFELL)) {
            goto LABEL_78;
          }
LABEL_79:
          uint64_t v79 = v10;
          if (v10 != 1) {
LABEL_66:
          }
            nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
          BOOL v54 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v6, *(uint64_t *)&v84);
LABEL_105:
          BOOL v5 = v54;
LABEL_30:
          BOOL v21 = v5;
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v80);
          nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)v83);
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = v21;
          *(unsigned char *)(a2 + 24) = 0;
          return;
      }
    default:
      switch(v85)
      {
        case 1:
          double v26 = v84;
          double v27 = (double)*(uint64_t *)&v81;
LABEL_51:
          BOOL v5 = v26 < v27;
          goto LABEL_30;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          goto LABEL_29;
        case 6:
        case 8:
          goto LABEL_108;
        case 9:
          int v29 = *(char **)(*(void *)&v84 + 32);
          int v28 = *(char **)(*(void *)&v84 + 40);
          if (v28 == v29 || !*(void *)(*(void *)&v84 + 16))
          {
            uint64_t v79 = 0;
            goto LABEL_68;
          }
          unint64_t v30 = v28 - v29 - 8;
          if (v30 >= 8)
          {
            uint64_t v55 = (v30 >> 3) + 1;
            uint64_t v32 = &v29[8 * (v55 & 0x3FFFFFFFFFFFFFFELL)];
            BOOL v56 = v29 + 8;
            uint64_t v57 = 1;
            uint64_t v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
            uint64_t v59 = 1;
            do
            {
              v57 *= *(v56 - 1);
              v59 *= *v56;
              v56 += 2;
              v58 -= 2;
            }
            while (v58);
            uint64_t v31 = v59 * v57;
            if (v55 == (v55 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_85:
              uint64_t v79 = v31;
              if (v31 == 1)
              {
                BOOL v54 = _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(*(void *)&v84 + 8), *(uint64_t *)&v81);
                goto LABEL_105;
              }
LABEL_68:
              nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
            }
          }
          else
          {
            uint64_t v31 = 1;
            uint64_t v32 = *(char **)(*(void *)&v84 + 32);
          }
          do
          {
            uint64_t v60 = *(void *)v32;
            v32 += 8;
            v31 *= v60;
          }
          while (v32 != v28);
          goto LABEL_85;
        default:
          BOOL v5 = *(void *)&v84 < *(void *)&v81;
          goto LABEL_30;
      }
  }
}

void sub_1925E0478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  nitro::nitro_variable::~nitro_variable((nitro::nitro_variable *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7"
    || ((v3 & (unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro4impl15nitro_lazy_eval4execERKNS_2ir14BINARYOPERATOREE3$_7" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7,std::allocator<nitro::impl::nitro_lazy_eval::exec(nitro::ir::BINARYOPERATOR const&)::$_7>,nitro::nitro_variable ()(nitro::impl::nitro_eval &)>::target_type()
{
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  BOOL v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 100, 1);
    std::stringbuf::str();
    unint64_t v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E08C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) < a2;
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      __n128 v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) < a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        uint64_t v36 = v35;
        operator delete(v35);
      }
      __n128 v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) < (float)a2;
      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H0 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S0, H0 }
      BOOL v3 = _S0 < (float)a2;
      if (__p)
      {
        size_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      __n128 v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 100, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E0C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E0C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E0C5CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E0F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E1094(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E10A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E10A0);
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E13E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 > _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 > _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 > _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        size_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 > _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 > _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E1760(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E1774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E176CLL);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E1A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E1BA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E1BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E1BB0);
}

void nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E1EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) > a2;
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      __n128 v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) > a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        uint64_t v36 = v35;
        operator delete(v35);
      }
      __n128 v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) > (float)a2;
      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H1 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S1, H1 }
      BOOL v3 = (float)a2 < _S1;
      if (__p)
      {
        size_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      __n128 v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E227C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E2290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E2288);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E2538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E26C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E26D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E26CCLL);
}

void nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E2A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        uint64_t v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 < _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        uint64_t v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 < _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        uint64_t v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 < _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        size_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 < _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 < _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E2D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E2DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E2D98);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    int v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E3048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E31D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E31E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E31DCLL);
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"t.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 104, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_(_DWORD *a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v36, (uint64_t)a2);
      unint64_t v42 = &v62;
      nitro::ndarray<int>::ndarray(&v43, &v36);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v42);
      if (v47)
      {
        unint64_t v48 = v47;
        operator delete(v47);
      }
      if (v45)
      {
        uint64_t v46 = v45;
        operator delete(v45);
      }
      __n128 v4 = v44;
      if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v40)
      {
        uint64_t v41 = v40;
        operator delete(v40);
      }
      if (v38)
      {
        uint64_t v39 = v38;
        operator delete(v38);
      }
      uint64_t v5 = v37;
      if (!v37) {
        return v3;
      }
      goto LABEL_53;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v49, (uint64_t)a2);
      uint64_t v55 = &v62;
      nitro::ndarray<unsigned char>::ndarray(&v56, &v49);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v55);
      if (v60)
      {
        uint64_t v61 = v60;
        operator delete(v60);
      }
      if (v58)
      {
        uint64_t v59 = v58;
        operator delete(v58);
      }
      unint64_t v7 = v57;
      if (v57 && !atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v53)
      {
        BOOL v54 = v53;
        operator delete(v53);
      }
      if (v51)
      {
        uint64_t v52 = v51;
        operator delete(v51);
      }
      uint64_t v5 = v50;
      if (!v50) {
        return v3;
      }
      goto LABEL_53;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v10, (uint64_t)a2);
      uint64_t v16 = &v62;
      nitro::ndarray<float>::ndarray(&v17, &v10);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(a1, (uint64_t)&v16);
      if (__p)
      {
        std::locale v22 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        unsigned __int8 v20 = v19;
        operator delete(v19);
      }
      int v8 = v18;
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      if (v12)
      {
        unsigned __int8 v13 = v12;
        operator delete(v12);
      }
      uint64_t v5 = v11;
      if (v11) {
        goto LABEL_53;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v23, (uint64_t)a2);
      int v29 = &v62;
      nitro::ndarray<half>::ndarray(&v30, &v23);
      BOOL v3 = _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(a1, (uint64_t)&v29);
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      uint64_t v6 = v31;
      if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      if (v27)
      {
        uint64_t v28 = v27;
        operator delete(v27);
      }
      if (v25)
      {
        uint64_t v26 = v25;
        operator delete(v25);
      }
      uint64_t v5 = v24;
      if (!v24) {
        return v3;
      }
LABEL_53:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv();
  }
}

void sub_1925E391C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va1);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E3940(_Unwind_Exception *a1)
{
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 120));
  nitro::ndarray<float>::~ndarray((void *)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_1925E3964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1925E3988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 104, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      uint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        __n128 v4 = __p;
      }
      else {
        __n128 v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E3B18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E3B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E3B24);
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      __n128 v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      __n128 v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      __n128 v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925E3D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E3D20(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925E3D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E3D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      __n128 v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      __n128 v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      __n128 v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925E3F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E3F58(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925E3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      __n128 v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      __n128 v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      __n128 v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925E417C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E4190(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925E41A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E41B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

BOOL _ZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v18, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v18);
      if (v22)
      {
        uint64_t v23 = v22;
        operator delete(v22);
      }
      if (v20)
      {
        uint64_t v21 = v20;
        operator delete(v20);
      }
      __n128 v4 = v19;
      if (!v19) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v24, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v24);
      if (v28)
      {
        int v29 = v28;
        operator delete(v28);
      }
      if (v26)
      {
        uint64_t v27 = v26;
        operator delete(v26);
      }
      __n128 v4 = v25;
      if (!v25) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v6, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v6);
      if (v10)
      {
        uint64_t v11 = v10;
        operator delete(v10);
      }
      if (v8)
      {
        uint64_t v9 = v8;
        operator delete(v8);
      }
      __n128 v4 = v7;
      if (v7) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(a2, &v12);
      if (__p)
      {
        uint64_t v17 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      __n128 v4 = v13;
      if (!v13) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv();
  }
}

void sub_1925E43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E43C8(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1925E43DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1925E43F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void _ZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  __n128 v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E46B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v15 + v21);
  unsigned int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    unsigned __int8 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < v4;
}

void sub_1925E4828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    unsigned __int8 v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < v4;
}

void sub_1925E4970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<unsigned char>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  unsigned int v4 = *(unsigned __int8 *)(v13 + v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return _S0 < (float)v4;
}

void sub_1925E4AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<unsigned char>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  unsigned int v4 = *(unsigned __int8 *)(v8 + v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < (float)v4;
}

void sub_1925E4C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unsigned int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E4EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        unsigned int v4 = __p;
      }
      else {
        unsigned int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E5034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E5048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E5040);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(unsigned __int8 *)(v15 + v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 > v3;
}

void sub_1925E5198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < v4;
}

void sub_1925E52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<int>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  int v4 = *(_DWORD *)(v13 + 4 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return _S0 < (float)v4;
}

void sub_1925E5430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIiEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<int>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  int v4 = *(_DWORD *)(v8 + 4 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < (float)v4;
}

void sub_1925E557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E581C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIiEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        int v4 = __p;
      }
      else {
        int v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E59A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E59B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E59B0);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v20 + v26);
  _H8 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 < _S1;
}

void sub_1925E5B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v20 + 4 * v26);
  _H8 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S1, H8 }
  return (float)v3 < _S1;
}

void sub_1925E5C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v15, a2);
  nitro::ndarray<half>::ndarray(&v8, (void *)(a1 + 8));
  short float v3 = *(short float *)(v15 + 2 * v21);
  short float v4 = *(short float *)(v8 + 2 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < v4;
}

void sub_1925E5DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIDhEEEclINSA_IfEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v20, a2);
  nitro::ndarray<half>::ndarray(&v13, (void *)(a1 + 8));
  float v3 = *(float *)(v20 + 4 * v26);
  _H9 = *(_WORD *)(v13 + 2 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H9 }
  return v3 < _S0;
}

void sub_1925E5EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  short float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E6194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIDhEEEEEENSt3__19result_ofIFS8_RKNSB_IfEEEE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        short float v4 = __p;
      }
      else {
        short float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E631C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E6330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E6328);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<unsigned char>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  unsigned int v3 = *(unsigned __int8 *)(v15 + v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 > (float)v3;
}

void sub_1925E6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IiEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<int>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  int v3 = *(_DWORD *)(v15 + 4 * v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    unsigned __int8 v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v4 > (float)v3;
}

void sub_1925E65D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclINSA_IDhEEEEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<half>::ndarray(&v20, a2);
  nitro::ndarray<float>::ndarray(&v13, (void *)(a1 + 8));
  _H8 = *(_WORD *)(v20 + 2 * v26);
  float v4 = *(float *)(v13 + 4 * v19);
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  uint64_t v5 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  uint64_t v6 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  __asm { FCVT            S0, H8 }
  return v4 > _S0;
}

void sub_1925E671C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKNS_17ndarray_containerES6_EUlT_T0_E_NS_7ndarrayIfEEEclISB_EEDTcldtdefpT1vfp_dtdefpT1uEES7_(uint64_t a1, void *a2)
{
  nitro::ndarray<float>::ndarray(&v15, a2);
  nitro::ndarray<float>::ndarray(&v8, (void *)(a1 + 8));
  float v3 = *(float *)(v15 + 4 * v21);
  float v4 = *(float *)(v8 + 4 * v14);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  uint64_t v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  uint64_t v6 = v16;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v3 < v4;
}

void sub_1925E6864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void _ZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E6B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitINS_4impl22binary_visitor_wrapperIZNKS_18flexible_type_impl11lt_operatorclERKS0_S7_EUlT_T0_E_NS_7ndarrayIfEEEEEENSt3__19result_ofIFS8_RKSC_EE4typeES8_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E6C8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E6CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E6C98);
}

void _ZZZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 190, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      float v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E6E04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E6E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E6E10);
}

BOOL nitro::flexible_type_impl::lt_operator::operator()(__n128 a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = *a3;
  if (a3[1] == *a3)
  {
    uint64_t v8 = 0;
    return (unint64_t)v8 < a4[1] - *a4;
  }
  else
  {
    unint64_t v7 = 0;
    while (v7 < (uint64_t)(a4[1] - *a4) >> 4)
    {
      uint64_t v9 = 16 * v7;
      unsigned __int8 v10 = (unsigned char *)(v5 + 16 * v7);
      uint64_t v11 = (unsigned char *)(*a4 + 16 * v7);
      switch(v11[8])
      {
        case 1:
          switch(v10[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v10;
              if (*(double *)v10 > *(double *)v11) {
                return 0;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v87 = *(void *)v10;
              double v88 = *(double *)v11;
              uint64_t v196 = 0;
              uint64_t v90 = *(char **)(v87 + 32);
              uint64_t v89 = *(char **)(v87 + 40);
              if (v89 == v90 || !*(void *)(v87 + 16)) {
                goto LABEL_159;
              }
              unint64_t v91 = v89 - v90 - 8;
              if (v91 < 8)
              {
                uint64_t v92 = 1;
                uint64_t v93 = *(char **)(v87 + 32);
                do
                {
LABEL_157:
                  uint64_t v150 = *(void *)v93;
                  v93 += 8;
                  v92 *= v150;
                }
                while (v93 != v89);
                goto LABEL_158;
              }
              uint64_t v145 = (v91 >> 3) + 1;
              uint64_t v93 = &v90[8 * (v145 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v146 = v90 + 8;
              uint64_t v147 = v145 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v148 = 1;
              uint64_t v149 = 1;
              do
              {
                v148 *= *(v146 - 1);
                v149 *= *v146;
                v146 += 2;
                v147 -= 2;
              }
              while (v147);
              uint64_t v92 = v149 * v148;
              if (v145 != (v145 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_157;
              }
LABEL_158:
              uint64_t v196 = v92;
              if (v92 != 1)
              {
LABEL_159:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v87 + 8), v88))
              {
                return 0;
              }
              goto LABEL_54;
            default:
              a1.n128_u64[0] = *(void *)v11;
              if (*(double *)v11 < (double)*(uint64_t *)v10) {
                return 0;
              }
              goto LABEL_54;
          }
        case 2:
          if (v10[8] != 2) {
            goto LABEL_53;
          }
          double v31 = *(double *)v11;
          unint64_t v32 = *(void *)v10;
          uint64_t v35 = *(const void **)(v32 + 8);
          unint64_t v33 = v32 + 8;
          uint64_t v34 = v35;
          int v36 = *(char *)(v33 + 23);
          uint64_t v39 = *(const void **)(*(void *)&v31 + 8);
          uint64_t v37 = *(void *)&v31 + 8;
          uint64_t v38 = v39;
          int v40 = *(char *)(v37 + 23);
          if (v40 >= 0) {
            size_t v41 = *(unsigned __int8 *)(v37 + 23);
          }
          else {
            size_t v41 = *(void *)(v37 + 8);
          }
          if (v40 >= 0) {
            unint64_t v42 = (const void *)v37;
          }
          else {
            unint64_t v42 = v38;
          }
          if (v36 >= 0) {
            size_t v43 = *(unsigned __int8 *)(v33 + 23);
          }
          else {
            size_t v43 = *(void *)(v33 + 8);
          }
          if (v36 >= 0) {
            unint64_t v44 = (const void *)v33;
          }
          else {
            unint64_t v44 = v34;
          }
          if (v43 >= v41) {
            size_t v45 = v41;
          }
          else {
            size_t v45 = v43;
          }
          int v46 = memcmp(v42, v44, v45);
          BOOL v47 = v41 < v43;
          if (v46) {
            BOOL v47 = v46 < 0;
          }
          if (v47) {
            return 0;
          }
          break;
        case 3:
          if (v10[8] != 3) {
            goto LABEL_53;
          }
          uint64_t v14 = *(void *)v10 + 8;
          uint64_t v12 = *(unint64_t **)v14;
          uint64_t v13 = *(void *)(v14 + 8);
          uint64_t v16 = *(void *)v11 + 8;
          std::locale v15 = *(double **)v16;
          unint64_t v17 = (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 3;
          uint64_t v19 = v13 - (void)v12;
          BOOL v18 = v19 == 0;
          unint64_t v20 = v19 >> 3;
          if (v18) {
            goto LABEL_23;
          }
          if (v20 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v20;
          }
          unint64_t v22 = v17;
          do
          {
            if (!v22) {
              return 0;
            }
            a1.n128_u64[0] = *v12;
            if (*(double *)v12 > *v15) {
              return 0;
            }
            if (*(double *)v12 < *v15) {
              goto LABEL_54;
            }
            --v22;
            ++v12;
            ++v15;
            --v21;
          }
          while (v21);
LABEL_23:
          if (v20 > v17) {
            return 0;
          }
          break;
        case 4:
          if (v10[8] != 4) {
            goto LABEL_53;
          }
          if (nitro::flexible_type_impl::gt_operator::operator()(a1, (uint64_t)&v194, (uint64_t *)(*(void *)v10 + 8), (void *)(*(void *)v11 + 8)))
          {
            return 0;
          }
          break;
        case 5:
        case 7:
LABEL_53:
          nitro::flexible_type_fail(0);
          break;
        case 6:
        case 8:
LABEL_221:
          __break(1u);
          JUMPOUT(0x1925E7A20);
        case 9:
          uint64_t v23 = *(void **)v11;
          uint64_t v24 = v23 + 1;
          switch(v10[8])
          {
            case 1:
              double v94 = *(double *)v10;
              uint64_t v196 = 0;
              unint64_t v96 = (char *)v23[4];
              unint64_t v95 = (char *)v23[5];
              uint64_t v97 = (char *)(v95 - v96);
              if (v95 == v96 || !v23[2]) {
                goto LABEL_167;
              }
              if ((unint64_t)(v97 - 8) < 8)
              {
                uint64_t v98 = 1;
                uint64_t v99 = (char *)v23[4];
                do
                {
LABEL_165:
                  uint64_t v156 = *(void *)v99;
                  v99 += 8;
                  v98 *= v156;
                }
                while (v99 != v95);
                goto LABEL_166;
              }
              unint64_t v151 = ((unint64_t)(v97 - 8) >> 3) + 1;
              uint64_t v99 = &v96[8 * (v151 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v152 = v96 + 8;
              uint64_t v153 = v151 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v154 = 1;
              uint64_t v155 = 1;
              do
              {
                v154 *= *(v152 - 1);
                v155 *= *v152;
                v152 += 2;
                v153 -= 2;
              }
              while (v153);
              uint64_t v98 = v155 * v154;
              if (v151 != (v151 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_165;
              }
LABEL_166:
              uint64_t v196 = v98;
              if (v98 != 1)
              {
LABEL_167:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v24, v94))
              {
                return 0;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v100 = *(void *)v10;
              uint64_t v196 = 0;
              unint64_t v102 = (char *)v23[4];
              unint64_t v101 = (char *)v23[5];
              size_t v103 = (char *)(v101 - v102);
              if (v101 == v102 || !v23[2]) {
                goto LABEL_175;
              }
              if ((unint64_t)(v103 - 8) < 8)
              {
                uint64_t v104 = 1;
                uint64_t v105 = (char *)v23[4];
                do
                {
LABEL_173:
                  uint64_t v162 = *(void *)v105;
                  v105 += 8;
                  v104 *= v162;
                }
                while (v105 != v101);
                goto LABEL_174;
              }
              unint64_t v157 = ((unint64_t)(v103 - 8) >> 3) + 1;
              uint64_t v105 = &v102[8 * (v157 & 0x3FFFFFFFFFFFFFFELL)];
              float32x4_t v158 = v102 + 8;
              uint64_t v159 = v157 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v160 = 1;
              uint64_t v161 = 1;
              do
              {
                v160 *= *(v158 - 1);
                v161 *= *v158;
                v158 += 2;
                v159 -= 2;
              }
              while (v159);
              uint64_t v104 = v161 * v160;
              if (v157 != (v157 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_173;
              }
LABEL_174:
              uint64_t v196 = v104;
              if (v104 != 1)
              {
LABEL_175:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11gt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(v100 + 8), v24))
              {
                return 0;
              }
              goto LABEL_54;
            default:
              uint64_t v25 = *(void *)v10;
              uint64_t v196 = 0;
              uint64_t v27 = (char *)v23[4];
              uint64_t v26 = (char *)v23[5];
              uint64_t v28 = (char *)(v26 - v27);
              if (v26 == v27 || !v23[2]) {
                goto LABEL_143;
              }
              if ((unint64_t)(v28 - 8) < 8)
              {
                uint64_t v29 = 1;
                uint64_t v30 = (char *)v23[4];
                do
                {
LABEL_141:
                  uint64_t v138 = *(void *)v30;
                  v30 += 8;
                  v29 *= v138;
                }
                while (v30 != v26);
                goto LABEL_142;
              }
              unint64_t v133 = ((unint64_t)(v28 - 8) >> 3) + 1;
              uint64_t v30 = &v27[8 * (v133 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v134 = v27 + 8;
              uint64_t v135 = v133 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v136 = 1;
              uint64_t v137 = 1;
              do
              {
                v136 *= *(v134 - 1);
                v137 *= *v134;
                v134 += 2;
                v135 -= 2;
              }
              while (v135);
              uint64_t v29 = v137 * v136;
              if (v133 != (v133 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_141;
              }
LABEL_142:
              uint64_t v196 = v29;
              if (v29 != 1)
              {
LABEL_143:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v24, v25))
              {
                return 0;
              }
              goto LABEL_54;
          }
        default:
          switch(v10[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v10;
              if (*(double *)v10 > (double)*(uint64_t *)v11) {
                return 0;
              }
              goto LABEL_54;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_53;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v80 = *(void *)v10;
              uint64_t v81 = *(void *)v11;
              uint64_t v196 = 0;
              unint64_t v83 = *(char **)(v80 + 32);
              char v82 = *(char **)(v80 + 40);
              if (v82 == v83 || !*(void *)(v80 + 16)) {
                goto LABEL_151;
              }
              unint64_t v84 = v82 - v83 - 8;
              if (v84 < 8)
              {
                uint64_t v85 = 1;
                uint64_t v86 = *(char **)(v80 + 32);
                do
                {
LABEL_149:
                  uint64_t v144 = *(void *)v86;
                  v86 += 8;
                  v85 *= v144;
                }
                while (v86 != v82);
                goto LABEL_150;
              }
              uint64_t v139 = (v84 >> 3) + 1;
              uint64_t v86 = &v83[8 * (v139 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v140 = v83 + 8;
              uint64_t v141 = v139 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v142 = 1;
              uint64_t v143 = 1;
              do
              {
                v142 *= *(v140 - 1);
                v143 *= *v140;
                v140 += 2;
                v141 -= 2;
              }
              while (v141);
              uint64_t v85 = v143 * v142;
              if (v139 != (v139 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_149;
              }
LABEL_150:
              uint64_t v196 = v85;
              if (v85 != 1)
              {
LABEL_151:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v80 + 8), v81))
              {
                return 0;
              }
              break;
            default:
              if (*(void *)v10 > *(void *)v11) {
                return 0;
              }
              goto LABEL_54;
          }
          break;
      }
LABEL_54:
      unint64_t v48 = (unsigned char *)(*a3 + v9);
      uint64_t v49 = *a4 + v9;
      switch(*(unsigned char *)(v49 + 8))
      {
        case 1:
          switch(v48[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v48;
              double v106 = *(double *)v49;
              goto LABEL_124;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              unint64_t v114 = *(void *)v48;
              double v115 = *(double *)v49;
              uint64_t v196 = 0;
              uint64_t v117 = *(char **)(v114 + 32);
              unint64_t v116 = *(char **)(v114 + 40);
              if (v116 == v117 || !*(void *)(v114 + 16)) {
                goto LABEL_199;
              }
              unint64_t v118 = v116 - v117 - 8;
              if (v118 < 8)
              {
                uint64_t v119 = 1;
                uint64_t v120 = *(char **)(v114 + 32);
                do
                {
LABEL_197:
                  uint64_t v180 = *(void *)v120;
                  v120 += 8;
                  v119 *= v180;
                }
                while (v120 != v116);
                goto LABEL_198;
              }
              uint64_t v175 = (v118 >> 3) + 1;
              uint64_t v120 = &v117[8 * (v175 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v176 = v117 + 8;
              uint64_t v177 = v175 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v178 = 1;
              uint64_t v179 = 1;
              do
              {
                v178 *= *(v176 - 1);
                v179 *= *v176;
                v176 += 2;
                v177 -= 2;
              }
              while (v177);
              uint64_t v119 = v179 * v178;
              if (v175 != (v175 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_197;
              }
LABEL_198:
              uint64_t v196 = v119;
              if (v119 != 1)
              {
LABEL_199:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v114 + 8), v115))
              {
                return 1;
              }
              goto LABEL_4;
            default:
              a1.n128_u64[0] = *(void *)v49;
              if (*(double *)v49 > (double)*(uint64_t *)v48) {
                return 1;
              }
              goto LABEL_4;
          }
        case 2:
          if (v48[8] != 2) {
            goto LABEL_3;
          }
          unint64_t v58 = *(void *)v48;
          if (*(char *)(v58 + 31) < 0)
          {
            uint64_t v59 = *(const void **)(v58 + 8);
            size_t v60 = *(void *)(v58 + 16);
          }
          else
          {
            uint64_t v59 = (const void *)(v58 + 8);
            size_t v60 = *(unsigned __int8 *)(v58 + 31);
          }
          double v70 = *(double *)v49;
          uint64_t v71 = (const void *)(*(void *)&v70 + 8);
          size_t v72 = *(unsigned __int8 *)(*(void *)&v70 + 31);
          uint64_t v74 = *(const void **)(*(void *)&v70 + 8);
          size_t v73 = *(void *)(*(void *)&v70 + 16);
          if ((v72 & 0x80u) == 0) {
            size_t v75 = v72;
          }
          else {
            size_t v75 = v73;
          }
          if ((v72 & 0x80u) == 0) {
            uint64_t v76 = v71;
          }
          else {
            uint64_t v76 = v74;
          }
          if (v75 >= v60) {
            size_t v77 = v60;
          }
          else {
            size_t v77 = v75;
          }
          int v78 = memcmp(v59, v76, v77);
          BOOL v79 = v60 < v75;
          if (v78) {
            BOOL v79 = v78 < 0;
          }
          if (v79) {
            return 1;
          }
          goto LABEL_4;
        case 3:
          if (v48[8] != 3) {
            goto LABEL_3;
          }
          double v61 = *(double *)v49;
          char v62 = *(unint64_t **)(*(void *)v48 + 8);
          uint64_t v63 = *(void *)(*(void *)v48 + 16);
          uint64_t v64 = *(double **)(*(void *)&v61 + 8);
          unint64_t v65 = (uint64_t)(*(void *)(*(void *)&v61 + 16) - (void)v64) >> 3;
          uint64_t v66 = v63 - (void)v62;
          BOOL v18 = v66 == 0;
          unint64_t v67 = v66 >> 3;
          if (v18) {
            goto LABEL_79;
          }
          if (v67 <= 1) {
            uint64_t v68 = 1;
          }
          else {
            uint64_t v68 = v67;
          }
          unint64_t v69 = v65;
          do
          {
            if (!v69) {
              goto LABEL_4;
            }
            a1.n128_u64[0] = *v62;
            if (*(double *)v62 > *v64) {
              goto LABEL_4;
            }
            if (*(double *)v62 < *v64) {
              return 1;
            }
            --v69;
            ++v62;
            ++v64;
            --v68;
          }
          while (v68);
LABEL_79:
          if (v67 < v65) {
            return 1;
          }
          goto LABEL_4;
        case 4:
          if (v48[8] != 4) {
            goto LABEL_3;
          }
          if (nitro::flexible_type_impl::lt_operator::operator()(&v194, *(void *)v48 + 8, *(void *)v49 + 8, a1))return 1; {
          goto LABEL_4;
          }
        case 5:
        case 7:
LABEL_3:
          nitro::flexible_type_fail(0);
          goto LABEL_4;
        case 6:
        case 8:
          goto LABEL_221;
        case 9:
          uint64_t v50 = *(void **)v49;
          uint64_t v51 = (_DWORD *)(*(void *)v49 + 8);
          switch(v48[8])
          {
            case 1:
              double v121 = *(double *)v48;
              uint64_t v196 = 0;
              unint64_t v123 = (char *)v50[4];
              uint64_t v122 = (char *)v50[5];
              if (v122 == v123 || !v50[2]) {
                goto LABEL_207;
              }
              unint64_t v124 = v122 - v123 - 8;
              if (v124 < 8)
              {
                uint64_t v125 = 1;
                uint64_t v126 = (char *)v50[4];
                do
                {
LABEL_205:
                  uint64_t v186 = *(void *)v126;
                  v126 += 8;
                  v125 *= v186;
                }
                while (v126 != v122);
                goto LABEL_206;
              }
              uint64_t v181 = (v124 >> 3) + 1;
              uint64_t v126 = &v123[8 * (v181 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v182 = v123 + 8;
              uint64_t v183 = v181 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v184 = 1;
              uint64_t v185 = 1;
              do
              {
                v184 *= *(v182 - 1);
                v185 *= *v182;
                v182 += 2;
                v183 -= 2;
              }
              while (v183);
              uint64_t v125 = v185 * v184;
              if (v181 != (v181 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_205;
              }
LABEL_206:
              uint64_t v196 = v125;
              if (v125 != 1)
              {
LABEL_207:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v51, v121))
              {
                return 1;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v127 = *(void *)v48;
              uint64_t v196 = 0;
              uint64_t v129 = (char *)v50[4];
              uint64_t v128 = (char *)v50[5];
              if (v128 == v129 || !v50[2]) {
                goto LABEL_215;
              }
              unint64_t v130 = v128 - v129 - 8;
              if (v130 < 8)
              {
                uint64_t v131 = 1;
                unint64_t v132 = (char *)v50[4];
                do
                {
LABEL_213:
                  uint64_t v192 = *(void *)v132;
                  v132 += 8;
                  v131 *= v192;
                }
                while (v132 != v128);
                goto LABEL_214;
              }
              uint64_t v187 = (v130 >> 3) + 1;
              unint64_t v132 = &v129[8 * (v187 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v188 = v129 + 8;
              uint64_t v189 = v187 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v190 = 1;
              uint64_t v191 = 1;
              do
              {
                v190 *= *(v188 - 1);
                v191 *= *v188;
                v188 += 2;
                v189 -= 2;
              }
              while (v189);
              uint64_t v131 = v191 * v190;
              if (v187 != (v187 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_213;
              }
LABEL_214:
              uint64_t v196 = v131;
              if (v131 != 1)
              {
LABEL_215:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIKS0_ZNKS_18flexible_type_impl11lt_operatorclERS2_S5_EUlT_T0_E_LPv0EEENSt3__19result_ofIFS7_RNS_7ndarrayIfEERKSD_EE4typeERS6_S7_((_DWORD *)(v127 + 8), v51))
              {
                return 1;
              }
              goto LABEL_4;
            default:
              uint64_t v52 = *(void *)v48;
              uint64_t v196 = 0;
              BOOL v54 = (char *)v50[4];
              uint64_t v53 = (char *)v50[5];
              if (v53 == v54 || !v50[2]) {
                goto LABEL_183;
              }
              unint64_t v55 = v53 - v54 - 8;
              if (v55 < 8)
              {
                uint64_t v56 = 1;
                uint64_t v57 = (char *)v50[4];
                do
                {
LABEL_181:
                  uint64_t v168 = *(void *)v57;
                  v57 += 8;
                  v56 *= v168;
                }
                while (v57 != v53);
                goto LABEL_182;
              }
              uint64_t v163 = (v55 >> 3) + 1;
              uint64_t v57 = &v54[8 * (v163 & 0x3FFFFFFFFFFFFFFELL)];
              unint64_t v164 = v54 + 8;
              uint64_t v165 = v163 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v166 = 1;
              uint64_t v167 = 1;
              do
              {
                v166 *= *(v164 - 1);
                v167 *= *v164;
                v164 += 2;
                v165 -= 2;
              }
              while (v165);
              uint64_t v56 = v167 * v166;
              if (v163 != (v163 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_181;
              }
LABEL_182:
              uint64_t v196 = v56;
              if (v56 != 1)
              {
LABEL_183:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(v51, v52))
              {
                return 1;
              }
              goto LABEL_4;
          }
        default:
          switch(v48[8])
          {
            case 1:
              a1.n128_u64[0] = *(void *)v48;
              double v106 = (double)*(uint64_t *)v49;
LABEL_124:
              if (a1.n128_f64[0] < v106) {
                return 1;
              }
              goto LABEL_4;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
              goto LABEL_3;
            case 6:
            case 8:
              goto LABEL_221;
            case 9:
              uint64_t v107 = *(void *)v48;
              double v108 = *(double *)v49;
              uint64_t v196 = 0;
              uint64_t v110 = *(char **)(v107 + 32);
              uint64_t v109 = *(char **)(v107 + 40);
              if (v109 == v110 || !*(void *)(v107 + 16)) {
                goto LABEL_191;
              }
              unint64_t v111 = v109 - v110 - 8;
              if (v111 < 8)
              {
                uint64_t v112 = 1;
                uint64_t v113 = *(char **)(v107 + 32);
                do
                {
LABEL_189:
                  uint64_t v174 = *(void *)v113;
                  v113 += 8;
                  v112 *= v174;
                }
                while (v113 != v109);
                goto LABEL_190;
              }
              uint64_t v169 = (v111 >> 3) + 1;
              uint64_t v113 = &v110[8 * (v169 & 0x3FFFFFFFFFFFFFFELL)];
              uint64_t v170 = v110 + 8;
              uint64_t v171 = v169 & 0x3FFFFFFFFFFFFFFELL;
              uint64_t v172 = 1;
              uint64_t v173 = 1;
              do
              {
                v172 *= *(v170 - 1);
                v173 *= *v170;
                v170 += 2;
                v171 -= 2;
              }
              while (v171);
              uint64_t v112 = v173 * v172;
              if (v169 != (v169 & 0x3FFFFFFFFFFFFFFELL)) {
                goto LABEL_189;
              }
LABEL_190:
              uint64_t v196 = v112;
              if (v112 != 1)
              {
LABEL_191:
                __int16 v195 = &v196;
                nitro::flexible_type_impl::lt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()();
              }
              if (_ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11lt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_((_DWORD *)(v107 + 8), *(uint64_t *)&v108))
              {
                return 1;
              }
LABEL_4:
              ++v7;
              uint64_t v5 = *a3;
              uint64_t v8 = a3[1] - *a3;
              if (v7 >= v8 >> 4) {
                return (unint64_t)v8 < a4[1] - *a4;
              }
              break;
            default:
              if (*(void *)v48 < *(void *)v49) {
                return 1;
              }
              goto LABEL_4;
          }
          break;
      }
    }
    return 0;
  }
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E7E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) > a2;
      if (v30)
      {
        double v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      float v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) > a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        int v36 = v35;
        operator delete(v35);
      }
      float v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) > (float)a2;
      if (v16)
      {
        unint64_t v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      float v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H0 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S0, H0 }
      BOOL v3 = _S0 > (float)a2;
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      float v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E8208(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E8214);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E84C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_xEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E864C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E8660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E8658);
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 149, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E8998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        double v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 < _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 < _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        unint64_t v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 < _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 < _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 < _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::gt_operator::operator()(nitro::ndarray_container const&,double)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 149, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E8D18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E8D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E8D24);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E8FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclERKS0_dEUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E915C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E9170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E9168);
}

void nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 145, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E94A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v26, (uint64_t)a1);
      BOOL v3 = *(int *)(v26 + 4 * v32) < a2;
      if (v30)
      {
        double v31 = v30;
        operator delete(v30);
      }
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      float v4 = v27;
      if (!v27) {
        return v3;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v33, (uint64_t)a1);
      BOOL v3 = *(unsigned __int8 *)(v33 + v39) < a2;
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v35)
      {
        int v36 = v35;
        operator delete(v35);
      }
      float v4 = v34;
      if (!v34) {
        return v3;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v12, (uint64_t)a1);
      BOOL v3 = *(float *)(v12 + 4 * v18) < (float)a2;
      if (v16)
      {
        unint64_t v17 = v16;
        operator delete(v16);
      }
      if (v14)
      {
        std::locale v15 = v14;
        operator delete(v14);
      }
      float v4 = v13;
      if (v13) {
        goto LABEL_25;
      }
      return v3;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v19, (uint64_t)a1);
      _H1 = *(_WORD *)(v19 + 2 * v25);
      __asm { FCVT            S1, H1 }
      BOOL v3 = (float)a2 > _S1;
      if (__p)
      {
        uint64_t v24 = __p;
        operator delete(__p);
      }
      if (v21)
      {
        std::locale v22 = v21;
        operator delete(v21);
      }
      float v4 = v20;
      if (!v20) {
        return v3;
      }
LABEL_25:
      if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return v3;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}

void nitro::flexible_type_impl::gt_operator::operator()(long long,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 145, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E9834(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E9848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E9840);
}

void _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unsigned __int8 v10 = __p;
      }
      else {
        unsigned __int8 v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv();
}

void sub_1925E9AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void _ZZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclExRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEvENKUlvE_clEv()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    unint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      BOOL v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        float v4 = __p;
      }
      else {
        float v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1925E9C78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1925E9C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1925E9C84);
}

void nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v21);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  BOOL v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  float v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"u.num_elem()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v22.__locale_) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v22, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v22.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v22, 1);
  unsigned __int8 v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet(&v22, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unsigned __int8 v13 = (file_logger *)global_logger();
    started = file_logger::start_stream(v13, 6, "Nitro/EspressoNitro/src/flexible_type/flexible_type_detail.hpp", "operator()", 141, 1);
    std::stringbuf::str();
    std::locale v15 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v15 && v15[280])
    {
      uint64_t v16 = v15 + 16;
      if ((v20 & 0x80u) == 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      if ((v20 & 0x80u) == 0) {
        uint64_t v18 = v20;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    }
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v22.__locale_ = (std::locale::__imp *)&v21;
  nitro::flexible_type_impl::gt_operator::operator()(double,nitro::ndarray_container const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1925E9FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL _ZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_(_DWORD *a1, double a2)
{
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v28, (uint64_t)a1);
      uint64_t v13 = *(int *)(v28 + 4 * v34);
      if (v32)
      {
        uint64_t v33 = v32;
        operator delete(v32);
      }
      if (v30)
      {
        double v31 = v30;
        operator delete(v30);
      }
      _D9 = (double)v13;
      uint64_t v5 = v29;
      if (!v29) {
        return a2 > _D9;
      }
      goto LABEL_25;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v35, (uint64_t)a1);
      LOBYTE(v2) = *(unsigned char *)(v35 + v41);
      if (v39)
      {
        int v40 = v39;
        operator delete(v39);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      _D9 = (double)v2;
      uint64_t v5 = v36;
      if (!v36) {
        return a2 > _D9;
      }
      goto LABEL_25;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v14, (uint64_t)a1);
      float v11 = *(float *)(v14 + 4 * v20);
      if (v18)
      {
        uint64_t v19 = v18;
        operator delete(v18);
      }
      if (v16)
      {
        unint64_t v17 = v16;
        operator delete(v16);
      }
      _D9 = v11;
      uint64_t v5 = v15;
      if (v15) {
        goto LABEL_25;
      }
      return a2 > _D9;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v21, (uint64_t)a1);
      _H9 = *(_WORD *)(v21 + 2 * v27);
      if (__p)
      {
        uint64_t v26 = __p;
        operator delete(__p);
      }
      if (v23)
      {
        uint64_t v24 = v23;
        operator delete(v23);
      }
      __asm { FCVT            D9, H9 }
      uint64_t v5 = v22;
      if (!v22) {
        return a2 > _D9;
      }
LABEL_25:
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return a2 > _D9;
    default:
      _ZZNK5nitro17ndarray_container5visitIZNKS_18flexible_type_impl11gt_operatorclEdRKS0_EUlT_E_EENSt3__19result_ofIFS6_RKNS_7ndarrayIfEEEE4typeES6_ENKUlvE_clEv();
  }
}