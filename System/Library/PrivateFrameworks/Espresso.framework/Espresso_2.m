void sub_1921BAD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::ANECompilerEngine::ane_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::ane_kernel *this, Espresso::net *a2)
{
  return 0;
}

uint64_t non-virtual thunk to'Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::net *a2, unint64_t a3)
{
  return Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size((Espresso::ANECompilerEngine::elementwise_kernel *)((char *)this - 336), a2, a3);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::get_mutable_weights_size(Espresso::ANECompilerEngine::elementwise_kernel *this, Espresso::net *a2, unint64_t a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  unint64_t v69 = a3;
  *((unsigned char *)this + 392) = 0;
  v5 = (uint64_t *)(*((void *)a2 + 4) + 16 * a3);
  uint64_t v7 = *v5;
  v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::net::get_producers_of_blobs(a2, (uint64_t)v68);
  uint64_t v8 = 0;
  v65 = 0;
  v66 = 0;
  uint64_t v67 = 0;
  uint64_t v9 = (uint64_t)(*(void *)(v7 + 88) - *(void *)(v7 + 80)) >> 4;
  if (v9 != 1)
  {
    if (v9 != 2)
    {
      if (v9 != 3)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported configuration in elementwise_kernel for platform.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_25;
    }
    *(void *)&long long v60 = &v69;
    v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v69, (uint64_t)&std::piecewise_construct, (uint64_t **)&v60);
    v12 = (char *)a2 + 136;
    *(void *)&long long v55 = v11[3];
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v55, (long long **)&v55);
    Espresso::abstract_blob_container::shape((char *)&v60, *((void *)v13 + 5));
    *(void *)&long long __src = v11[3] + 24;
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)__src, (long long **)&__src);
    Espresso::abstract_blob_container::shape((char *)&v55, *((void *)v14 + 5));
    uint64_t v15 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v60);
    uint64_t v16 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&v55);
    if (v15 < v16)
    {
      long long v17 = v60;
      long long __src = v60;
      long long v71 = v61;
      uint64_t v18 = v62;
      uint64_t v72 = v62;
      uint64_t v19 = v64;
      long long v60 = v55;
      long long v61 = v56;
      uint64_t v62 = v57;
      uint64_t v64 = v59;
      uint64_t v57 = v18;
      long long v55 = v17;
      long long v56 = v71;
      long long v20 = *(_OWORD *)v63;
      *(_OWORD *)v63 = *(_OWORD *)__p;
      *(_OWORD *)__p = v20;
      uint64_t v59 = v19;
    }
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
    v21 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    if (!Espresso::ANECompilerEngine::is_mix(v21, v22)) {
      goto LABEL_18;
    }
    uint64_t v8 = 0;
    if (v55 != 1 || __PAIR64__(DWORD1(v55), 1) != (HIDWORD(v55) | 0x100000000)) {
      goto LABEL_19;
    }
    if (DWORD2(v55) == DWORD2(v60))
    {
      uint64_t v8 = 0;
      unsigned int v23 = *((_DWORD *)this + 70);
      if (v23 <= 8 && ((1 << v23) & 0x123) != 0)
      {
        v24 = (std::string *)(v11[3] + 24 * (v15 >= v16));
        if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v68, (uint64_t)v24))
        {
          v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v68, (uint64_t)v24);
          if (!v25) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          *(void *)&long long __src = v25[5];
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v65, (char *)&__src, (char *)&__src + 8, 1uLL);
        }
        else
        {
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v65, 0, 0, 0);
        }
        uint64_t v28 = (v66 - (unsigned char *)v65) >> 3;
        if (!v28)
        {
          *(void *)&long long __src = v24;
          v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a2 + 136, (unsigned __int8 *)v24, (long long **)&__src);
          v31 = (std::__shared_weak_count *)*((void *)v34 + 6);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v36 = v35[2];
          int v37 = v35[3];
          uint64_t v38 = (int)v35[4];
          uint64_t v39 = (int)v35[5];
          int v40 = v35[6];
          *((unsigned char *)this + 392) = 1;
          std::string::operator=((std::string *)((char *)this + 344), v24);
          if (v40 <= 1) {
            uint64_t v41 = 1;
          }
          else {
            uint64_t v41 = v40;
          }
          uint64_t v8 = 2 * v36 * (uint64_t)v37 * v38 * v39 * v41;
          goto LABEL_51;
        }
        if (v28 != 1)
        {
          v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "blob is produced by multiple layers.");
          __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v29 = (uint64_t *)(*((void *)a2 + 4) + 16 * *(void *)v65);
        uint64_t v30 = *v29;
        v31 = (std::__shared_weak_count *)v29[1];
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v32 = (void *)(v30 + 40);
        int v33 = *(char *)(v30 + 63);
        if (v33 < 0)
        {
          if (*(void *)(v30 + 48) != 16) {
            goto LABEL_50;
          }
          v32 = (void *)*v32;
        }
        else if (v33 != 16)
        {
          goto LABEL_50;
        }
        v43 = (void *)*v32;
        uint64_t v42 = v32[1];
        if (v43 == (void *)0x5F747865746E6F63 && v42 == 0x726566736E617274)
        {
          *(void *)&long long __src = v24;
          v45 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, (unsigned __int8 *)v24, (long long **)&__src);
          v47 = (std::__shared_weak_count *)*((void *)v45 + 6);
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v48 = v46[3];
          int v54 = v46[2];
          uint64_t v49 = (int)v46[4];
          uint64_t v50 = (int)v46[5];
          int v51 = v46[6];
          if (v51 <= 1) {
            uint64_t v52 = 1;
          }
          else {
            uint64_t v52 = v51;
          }
          *((unsigned char *)this + 392) = 1;
          std::string::operator=((std::string *)((char *)this + 344), v24);
          uint64_t v8 = 2 * v54 * (uint64_t)v48 * v49 * v50 * v52;
          if (v47) {
            nitro::nitro_function::nitro_function(v47);
          }
          goto LABEL_51;
        }
LABEL_50:
        uint64_t v8 = 0;
LABEL_51:
        if (v31) {
          nitro::nitro_function::nitro_function(v31);
        }
      }
    }
    else
    {
LABEL_18:
      uint64_t v8 = 0;
    }
LABEL_19:

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
  }
LABEL_25:
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v68[2]);
  v26 = v68[0];
  v68[0] = 0;
  if (v26) {
    operator delete(v26);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v8;
}

void sub_1921BB384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }

  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a28) {
    operator delete(a28);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a31);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::reset(Espresso::ANERuntimeEngine::compiler *this)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  v75[0] = 1;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  int v76 = 723714928;
  kdebug_trace();
  *((void *)this + 52) = *((void *)this + 51);
  v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2 && (uint64_t v62 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v3 = *((void *)this + 1);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v62 = 0;
  }
  id v60 = *((id *)this + 20);
  long long v61 = (Espresso *)*((id *)this + 19);
  v5 = Espresso::espresso_os_log_subsystem(v61, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v54 = [v60 absoluteString];
    uint64_t v55 = [v54 UTF8String];
    uint64_t v56 = [(Espresso *)v61 UTF8String];
    int v57 = *((unsigned __int8 *)this + 144);
    int v58 = [*((id *)this + 22) count];
    int v59 = *((unsigned __int8 *)this + 200);
    *(_DWORD *)buf = 136316418;
    uint64_t v84 = v55;
    __int16 v85 = 2080;
    uint64_t v86 = v56;
    __int16 v87 = 1024;
    int v88 = v57;
    __int16 v89 = 1024;
    int v90 = v58;
    __int16 v91 = 1024;
    BOOL v92 = v3 != 0;
    __int16 v93 = 1024;
    int v94 = v59;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::reset] url=%s bid=%s loaded=%d loaded_keys_count=%d network=%d is_in_memory_model=%d", buf, 0x2Eu);
  }
  uint64_t qos = Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)this);
  if (!*((unsigned char *)this + 144))
  {
    id v8 = 0;
    goto LABEL_49;
  }
  uint64_t v7 = qos;
  if (!*((unsigned char *)this + 200))
  {
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id obj = *((id *)this + 22);
    id v8 = (id)[obj countByEnumeratingWithState:&v66 objects:v81 count:16];
    if (!v8) {
      goto LABEL_48;
    }
    long long v20 = 0;
    uint64_t v21 = *(void *)v67;
    while (1)
    {
      v22 = 0;
      do
      {
        if (*(void *)v67 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v23 = *(void *)(*((void *)&v66 + 1) + 8 * (void)v22);
        v24 = [*((id *)this + 24) objectForKeyedSubscript:v23];
        v25 = (void *)*((void *)this + 17);
        v26 = (void *)*((void *)this + 23);
        if (*(unsigned char *)(*((void *)this + 13) + 139))
        {
          v27 = [v26 objectForKeyedSubscript:v23];
          id v65 = v20;
          char v28 = [v25 unloadRealTimeModel:v24 options:v27 qos:v7 error:&v65];
          id v29 = v65;

          if (v28) {
            goto LABEL_43;
          }
          uint64_t v30 = [v29 localizedDescription];
          if (v30) {
            v32 = (__CFString *)v30;
          }
          else {
            v32 = &stru_1EE39BDB0;
          }
          int v33 = Espresso::espresso_os_log_subsystem(v30, v31);
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            goto LABEL_42;
          }
LABEL_45:
          v32 = v32;
          uint64_t v38 = [(__CFString *)v32 UTF8String];
          *(_DWORD *)buf = 136315138;
          uint64_t v84 = v38;
          _os_log_error_impl(&dword_1920CB000, v33, OS_LOG_TYPE_ERROR, "ANECF error: %s ", buf, 0xCu);
          goto LABEL_42;
        }
        v34 = [v26 objectForKeyedSubscript:v23];
        id v64 = v20;
        char v35 = [v25 unloadModel:v24 options:v34 qos:v7 error:&v64];
        id v29 = v64;

        if (v35) {
          goto LABEL_43;
        }
        int v36 = [v29 localizedDescription];
        if (v36) {
          v32 = (__CFString *)v36;
        }
        else {
          v32 = &stru_1EE39BDB0;
        }
        int v33 = Espresso::espresso_os_log_subsystem(v36, v37);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          goto LABEL_45;
        }
LABEL_42:

LABEL_43:
        long long v20 = v29;

        v22 = (char *)v22 + 1;
      }
      while (v8 != v22);
      uint64_t v39 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
      id v8 = (id)v39;
      if (!v39)
      {
        id v8 = v29;
        goto LABEL_48;
      }
    }
  }
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  id obj = *((id *)this + 22);
  id v8 = 0;
  uint64_t v9 = [obj countByEnumeratingWithState:&v71 objects:v82 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v72;
    do
    {
      uint64_t v11 = 0;
      v12 = v8;
      do
      {
        if (*(void *)v72 != v10) {
          objc_enumerationMutation(obj);
        }
        v13 = [*((id *)this + 24) objectForKeyedSubscript:*(void *)(*((void *)&v71 + 1) + 8 * v11)];
        id v70 = v12;
        char v14 = [v13 unloadWithQoS:v7 error:&v70];
        id v8 = v70;

        if ((v14 & 1) == 0)
        {
          uint64_t v15 = [v8 localizedDescription];
          if (v15) {
            long long v17 = (__CFString *)v15;
          }
          else {
            long long v17 = &stru_1EE39BDB0;
          }
          uint64_t v18 = Espresso::espresso_os_log_subsystem(v15, v16);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = [(__CFString *)v17 UTF8String];
            *(_DWORD *)buf = 136315138;
            uint64_t v84 = v19;
            _os_log_error_impl(&dword_1920CB000, v18, OS_LOG_TYPE_ERROR, "ANECF error: %s ", buf, 0xCu);
          }
        }
        ++v11;
        v12 = v8;
      }
      while (v9 != v11);
      uint64_t v9 = [obj countByEnumeratingWithState:&v71 objects:v82 count:16];
    }
    while (v9);
  }
LABEL_48:

LABEL_49:
  *((unsigned char *)this + 144) = 0;
  uint64_t v40 = objc_opt_new();
  uint64_t v41 = (void *)*((void *)this + 21);
  *((void *)this + 21) = v40;

  uint64_t v42 = objc_opt_new();
  v43 = (void *)*((void *)this + 22);
  *((void *)this + 22) = v42;

  uint64_t v44 = objc_opt_new();
  v45 = (void *)*((void *)this + 23);
  *((void *)this + 23) = v44;

  uint64_t v46 = objc_opt_new();
  v47 = (void *)*((void *)this + 24);
  *((void *)this + 24) = v46;

  uint64_t v48 = objc_opt_new();
  uint64_t v49 = (void *)*((void *)this + 26);
  *((void *)this + 26) = v48;

  uint64_t v50 = objc_opt_new();
  int v51 = (void *)*((void *)this + 27);
  *((void *)this + 27) = v50;

  uint64_t v52 = (void *)*((void *)this + 48);
  if (v52 && [v52 ioSurfaceForMultiBufferFrame:0])
  {
    CFRelease((CFTypeRef)[*((id *)this + 48) ioSurfaceForMultiBufferFrame:0]);
    v53 = (void *)*((void *)this + 48);
    *((void *)this + 48) = 0;
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v75);
}

void sub_1921BBAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a38);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::get_qos(uint64_t this)
{
  if (*(unsigned char *)(this + 289))
  {
    int v1 = *(_DWORD *)(this + 292);
    this = 33;
    switch(v1)
    {
      case 0:
        goto LABEL_5;
      case 1:
        return this;
      case 2:
        this = 25;
        break;
      case 3:
        this = 17;
        break;
      case 4:
        this = 9;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (*(unsigned char *)(*(void *)(this + 104) + 139))
    {
LABEL_5:
      v2 = (void *)MEMORY[0x1E4F4E080];
      return [v2 aneRealTimeTaskQoS];
    }
    else
    {
      proc_pidoriginatorinfo();
      LODWORD(this) = qos_class_self();
      if (this) {
        return this;
      }
      else {
        return 21;
      }
    }
  }
  return this;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t *a3)
{
  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        v5 = *v7;
        v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = *a3;
    v9[5] = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return v9;
  }
  return (uint64_t *)v7;
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "load_constant");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921BBEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_load_constant_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  long long v11 = xmmword_192DC3600;
  unint64_t v12 = 0xFFFFFFFF00000001;
  Espresso::SerDes::params_io<Espresso::load_constant_params>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "load_constant");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921BBFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::load_constant_params>(uint64_t a1, _DWORD *a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 1);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 3);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 5);
    goto LABEL_66;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 1);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "n");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 3);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (a2[4] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = a2[5];
  uint64_t v5 = a2 + 5;
  if (v6 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, v5);
LABEL_66:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1921BC51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::load_constant_params,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

void Espresso::net::~net(Espresso::net *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 1440);
  if (*((char *)this + 1439) < 0) {
    operator delete(*((void **)this + 177));
  }
  if (*((char *)this + 1407) < 0) {
    operator delete(*((void **)this + 173));
  }
  v2 = (std::__shared_weak_count *)*((void *)this + 172);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 165);
  if (v3)
  {
    do
    {
      v4 = (void *)*v3;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>((uint64_t)(v3 + 2));
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = (void *)*((void *)this + 163);
  *((void *)this + 163) = 0;
  if (v5) {
    operator delete(v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 162);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  char v7 = (std::__shared_weak_count *)*((void *)this + 158);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (*((char *)this + 1239) < 0) {
    operator delete(*((void **)this + 152));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 1176);
  char v8 = (std::__shared_weak_count *)*((void *)this + 146);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node(this + 1120, *((void **)this + 142));
  uint64_t v9 = (void *)*((void *)this + 140);
  *((void *)this + 140) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 139);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)this + 137);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(*((void **)this + 133));
  char v12 = (void *)*((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v12) {
    operator delete(v12);
  }
  if (*((char *)this + 1047) < 0) {
    operator delete(*((void **)this + 128));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 984);
  int v13 = (std::__shared_weak_count *)*((void *)this + 122);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 928);
  char v14 = (void *)*((void *)this + 113);
  if (v14)
  {
    do
    {
      uint64_t v15 = (void *)*v14;
      operator delete(v14);
      char v14 = v15;
    }
    while (v15);
  }
  uint64_t v16 = (void *)*((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v16) {
    operator delete(v16);
  }
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table((uint64_t)this + 848);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 824, *((char **)this + 104));
  v26 = (void **)((char *)this + 800);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)this + 776, *((char **)this + 98));
  long long v17 = (void *)*((void *)this + 94);
  if (v17)
  {
    *((void *)this + 95) = v17;
    operator delete(v17);
  }
  if (*((char *)this + 751) < 0) {
    operator delete(*((void **)this + 91));
  }
  uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  v26 = (void **)((char *)this + 688);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  v26 = (void **)((char *)this + 664);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  v26 = (void **)((char *)this + 640);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
  if (*((char *)this + 639) < 0) {
    operator delete(*((void **)this + 77));
  }
  if (*((char *)this + 615) < 0) {
    operator delete(*((void **)this + 74));
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  long long v20 = (void *)*((void *)this + 68);
  if (v20)
  {
    do
    {
      uint64_t v21 = (void *)*v20;
      v22 = (std::__shared_weak_count *)v20[4];
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      operator delete(v20);
      long long v20 = v21;
    }
    while (v21);
  }
  uint64_t v23 = (void *)*((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v23) {
    operator delete(v23);
  }
  std::__tree<int>::destroy(*((void **)this + 64));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((void *)this + 60));
  if (*((char *)this + 471) < 0) {
    operator delete(*((void **)this + 56));
  }
  if (*((char *)this + 447) < 0) {
    operator delete(*((void **)this + 53));
  }
  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*((void **)this + 51));
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*((void **)this + 48));
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*((void **)this + 45));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 42));
  std::__tree<std::string>::destroy((uint64_t)this + 304, *((char **)this + 39));
  std::__tree<std::string>::destroy((uint64_t)this + 280, *((char **)this + 36));
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 208, *((char **)this + 27));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 184, *((char **)this + 24));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 56);
  v26 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v26);
  v24 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  v25 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
}

void Espresso::load_network_metadata(uint64_t a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, Espresso::abstract_context **a4@<X3>, std::__shared_weak_count **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a6);
  v232 = a6;
  uint64_t v10 = *a6;
  char v12 = *a4;
  long long v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
  }
  int v13 = *(std::__shared_weak_count **)(v10 + 24);
  *(void *)(v10 + 16) = v12;
  *(void *)(v10 + 24) = v11;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  std::string::operator=((std::string *)(v10 + 592), a2);
  std::string::operator=((std::string *)(v10 + 1024), a3);
  if ((***((unsigned int (****)(void))*a4 + 1))(*((void *)*a4 + 1)) == 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Legacy metal engine Deprecated. It will removed soon");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "name");
  int v14 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v15 = v14;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_16;
    }
  }
  else if (!v14)
  {
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "name");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, v10 + 424);
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  int v16 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v17 = v16;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v17) {
      goto LABEL_28;
    }
  }
  else if (!v16)
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "properties");
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 120))(&v256);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  memset(buf, 0, 24);
  (*(void (**)(std::string::size_type, unsigned char *))(*(void *)v256.__r_.__value_.__l.__data_ + 32))(v256.__r_.__value_.__r.__words[0], buf);
  uint64_t v18 = *(void **)buf;
  for (i = *(void **)&buf[8]; v18 != i; v18 += 3)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 112))(__p);
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    long long v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 472), v18, (uint64_t)&std::piecewise_construct, (long long **)&v254);
    uint64_t v21 = v20 + 7;
    if (*((char *)v20 + 79) < 0) {
      operator delete((void *)*v21);
    }
    *(_OWORD *)uint64_t v21 = *(_OWORD *)__p;
    v21[2] = (uint64_t)v250;
  }
  __p[0] = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v256.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v256.__r_.__value_.__l.__size_);
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(buf, "training");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v10 + 480), buf))
  {
    BOOL v25 = 0;
    goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 472), __p, (uint64_t)&std::piecewise_construct, &v256);
  uint64_t v23 = (void *)v22 + 7;
  int v24 = *((char *)v22 + 79);
  if (v24 < 0)
  {
    if (*((void *)v22 + 8) != 1) {
      goto LABEL_37;
    }
    uint64_t v23 = (void *)*v23;
  }
  else if (v24 != 1)
  {
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(&v256, "training");
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
    v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 472), &v256, (uint64_t)&std::piecewise_construct, &v254);
    v27 = (void *)v26 + 7;
    int v28 = *((char *)v26 + 79);
    if (v28 < 0)
    {
      if (*((void *)v26 + 8) != 4)
      {
LABEL_43:
        BOOL v25 = 0;
LABEL_44:
        if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v256.__r_.__value_.__l.__data_);
        }
        goto LABEL_46;
      }
      v27 = (void *)*v27;
    }
    else if (v28 != 4)
    {
      goto LABEL_43;
    }
    BOOL v25 = *(_DWORD *)v27 == 1702195828;
    goto LABEL_44;
  }
  if (*(unsigned char *)v23 != 49) {
    goto LABEL_37;
  }
  BOOL v25 = 1;
LABEL_46:
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
LABEL_48:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v25) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v25) {
LABEL_52:
  }
    (*(void (**)(void))(*(void *)*a4 + 96))();
LABEL_53:
  std::string::basic_string[abi:ne180100]<0>(buf, "disable_bnns_client_ptr");
  id v29 = (void **)(v10 + 480);
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v10 + 480), buf))
  {
    BOOL v33 = 0;
    goto LABEL_73;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable_bnns_client_ptr");
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 472), __p, (uint64_t)&std::piecewise_construct, &v256);
  v31 = (void *)v30 + 7;
  int v32 = *((char *)v30 + 79);
  if (v32 < 0)
  {
    if (*((void *)v30 + 8) != 1) {
      goto LABEL_62;
    }
    v31 = (void *)*v31;
  }
  else if (v32 != 1)
  {
LABEL_62:
    std::string::basic_string[abi:ne180100]<0>(&v256, "disable_bnns_client_ptr");
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
    v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 472), &v256, (uint64_t)&std::piecewise_construct, &v254);
    char v35 = (void *)v34 + 7;
    int v36 = *((char *)v34 + 79);
    if (v36 < 0)
    {
      if (*((void *)v34 + 8) != 4)
      {
LABEL_68:
        BOOL v33 = 0;
LABEL_69:
        if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v256.__r_.__value_.__l.__data_);
        }
        goto LABEL_71;
      }
      char v35 = (void *)*v35;
    }
    else if (v36 != 4)
    {
      goto LABEL_68;
    }
    BOOL v33 = *(_DWORD *)v35 == 1702195828;
    goto LABEL_69;
  }
  if (*(unsigned char *)v31 != 49) {
    goto LABEL_62;
  }
  BOOL v33 = 1;
LABEL_71:
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
LABEL_73:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if (v33)
  {
LABEL_77:
    int v37 = *a4;
    Espresso::abstract_context::set_generic_option(*a4, "disable_bnns_client_ptr", 1);
    (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(void *)v37 + 144))(v37, "disable_bnns_client_ptr", 1);
  }
LABEL_78:
  std::string::basic_string[abi:ne180100]<0>(buf, "disable_all_tracepoints");
  uint64_t v38 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v29, buf);
  if (!v38)
  {
    BOOL v42 = 0;
    goto LABEL_89;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "disable_all_tracepoints");
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v38 = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v10 + 472), __p, (uint64_t)&std::piecewise_construct, &v256);
  uint64_t v40 = (unsigned __int8 *)(v38 + 56);
  int v41 = *(char *)(v38 + 79);
  if ((v41 & 0x80000000) == 0)
  {
    if (v41 != 1) {
      goto LABEL_86;
    }
LABEL_85:
    BOOL v42 = *v40 == 49;
    goto LABEL_87;
  }
  if (*(void *)(v38 + 64) == 1)
  {
    uint64_t v40 = *(unsigned __int8 **)v40;
    goto LABEL_85;
  }
LABEL_86:
  BOOL v42 = 0;
LABEL_87:
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
LABEL_89:
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v42) {
      goto LABEL_96;
    }
  }
  else if (!v42)
  {
    goto LABEL_96;
  }
  v43 = Espresso::espresso_os_log_subsystem((Espresso *)v38, v39);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1920CB000, v43, OS_LOG_TYPE_DEBUG, "[Espresso Tracepoints Disabled] since disable_all_tracepoints property present ", buf, 2u);
  }

  *(unsigned char *)(v10 + 1352) = 0;
LABEL_96:
  std::string::basic_string[abi:ne180100]<0>(buf, "bnns_n_threads");
  uint64_t v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*v29, buf);
  uint64_t v45 = v44;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v45) {
      goto LABEL_103;
    }
  }
  else if (!v44)
  {
    goto LABEL_103;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "bnns_n_threads");
  uint64_t v46 = (const std::string *)std::map<std::string,Espresso::blob_numerical_properties>::at(v10 + 472, buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v47 = std::stoul(v46, 0, 10);
  uint64_t v48 = *a4;
  Espresso::abstract_context::set_generic_option(*a4, "bnns_n_threads", v47);
  (*(void (**)(Espresso::abstract_context *, const char *, unint64_t))(*(void *)v48 + 144))(v48, "bnns_n_threads", v47);
LABEL_103:
  uint64_t v49 = *(void **)(v10 + 472);
  if (v49 != v29)
  {
    do
    {
      uint64_t v50 = v49 + 4;
      int v51 = *((unsigned __int8 *)v49 + 55);
      if (*((char *)v49 + 55) < 0)
      {
        uint64_t v52 = (unsigned char *)v49[4];
        unint64_t v53 = v49[5];
      }
      else
      {
        uint64_t v52 = v49 + 4;
        unint64_t v53 = *((unsigned __int8 *)v49 + 55);
      }
      if (v53 >= 0x11) {
        unint64_t v53 = 17;
      }
      if (!v53) {
        goto LABEL_126;
      }
      id v54 = &v52[v53];
      uint64_t v55 = v52;
      uint64_t v56 = v54;
      do
      {
        if (*v55 == 98)
        {
          uint64_t v57 = 1u;
          while (v57 != 17)
          {
            if (&v55[v57] == v54) {
              goto LABEL_120;
            }
            int v58 = v55[v57];
            int v59 = aBnnsExperiment[v57++];
            if (v58 != v59) {
              goto LABEL_112;
            }
          }
          uint64_t v56 = v55;
        }
LABEL_112:
        ++v55;
      }
      while (v55 != v54);
LABEL_120:
      if (v56 != v54 && v56 == v52)
      {
        id v60 = v49 + 7;
        if (*((char *)v49 + 79) < 0)
        {
          uint64_t v72 = v49[8];
          if (v72 != 1)
          {
            if (v72 != 4) {
              goto LABEL_247;
            }
            id v60 = (void *)*v60;
            goto LABEL_168;
          }
          id v60 = (void *)*v60;
        }
        else
        {
          int v61 = *((unsigned __int8 *)v49 + 79);
          if (v61 != 1)
          {
            if (v61 != 4) {
              goto LABEL_247;
            }
LABEL_168:
            if (*(_DWORD *)v60 == 1702195828) {
              goto LABEL_215;
            }
            goto LABEL_247;
          }
        }
        if (*(unsigned char *)v60 == 49)
        {
LABEL_215:
          v81 = *a4;
          if ((v51 & 0x80) != 0) {
            uint64_t v50 = (void *)*v50;
          }
          uint64_t v86 = 1;
          goto LABEL_223;
        }
      }
      else
      {
LABEL_126:
        if ((v51 & 0x80) == 0)
        {
          if (*((unsigned __int8 *)v49 + 55) > 0x13u)
          {
            if (v51 == 20) {
              goto LABEL_183;
            }
            if (v51 != 24)
            {
              if (v51 != 25) {
                goto LABEL_247;
              }
              _ZF = *v50 == 0x7774656E5F726570 && v49[5] == 0x666E6F635F6B726FLL;
              BOOL v63 = _ZF && v49[6] == 0x6F69746172756769;
              if (!v63 || *((unsigned char *)v49 + 56) != 110) {
                goto LABEL_247;
              }
LABEL_158:
              long long v69 = *a4;
              id v70 = v49 + 7;
              if (*((char *)v49 + 79) < 0)
              {
                uint64_t v87 = v49[8];
                if (v87 != 1)
                {
                  if (v87 != 4) {
                    goto LABEL_232;
                  }
                  id v70 = (void *)*v70;
                  goto LABEL_227;
                }
                id v70 = (void *)*v70;
              }
              else
              {
                int v71 = *((unsigned __int8 *)v49 + 79);
                if (v71 != 1)
                {
                  if (v71 != 4)
                  {
LABEL_232:
                    uint64_t v91 = 0;
LABEL_239:
                    BOOL v92 = "is_reload_info_caching_enabled";
                    goto LABEL_246;
                  }
LABEL_227:
                  BOOL v88 = *(_DWORD *)v70 == 1702195828;
LABEL_236:
                  uint64_t v91 = v88;
                  goto LABEL_239;
                }
              }
              BOOL v88 = *(unsigned char *)v70 == 49;
              goto LABEL_236;
            }
LABEL_188:
            uint64_t v76 = v50[2];
            BOOL v77 = *v50 == 0x746963696C706D69 && v50[1] == 0x676E69747361635FLL;
            uint64_t v78 = 0x64656C62616E655FLL;
            goto LABEL_192;
          }
          if (v51 != 12)
          {
            if (v51 != 15) {
              goto LABEL_247;
            }
LABEL_173:
            if (*v50 != 0x726F6D656D5F6E69 || *(void *)((char *)v50 + 7) != 0x6C65646F6D5F7972) {
              goto LABEL_247;
            }
            long long v69 = *a4;
            long long v74 = v49 + 7;
            if (*((char *)v49 + 79) < 0)
            {
              uint64_t v89 = v49[8];
              if (v89 != 1)
              {
                if (v89 != 4) {
                  goto LABEL_233;
                }
                long long v74 = (void *)*v74;
                goto LABEL_231;
              }
              long long v74 = (void *)*v74;
            }
            else
            {
              int v75 = *((unsigned __int8 *)v49 + 79);
              if (v75 != 1)
              {
                if (v75 != 4)
                {
LABEL_233:
                  uint64_t v91 = 0;
                  goto LABEL_245;
                }
LABEL_231:
                BOOL v90 = *(_DWORD *)v74 == 1702195828;
LABEL_242:
                uint64_t v91 = v90;
LABEL_245:
                BOOL v92 = "in_memory_model";
LABEL_246:
                Espresso::abstract_context::set_generic_option(v69, v92, v91);
                (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(void *)v69 + 144))(v69, v92, v91);
                goto LABEL_247;
              }
            }
            BOOL v90 = *(unsigned char *)v74 == 49;
            goto LABEL_242;
          }
LABEL_199:
          if (*v50 != 0x7365725F74736166 || *((_DWORD *)v50 + 2) != 1701863784) {
            goto LABEL_247;
          }
LABEL_204:
          v81 = *a4;
          v82 = v49 + 7;
          if (*((char *)v49 + 79) < 0)
          {
            uint64_t v84 = v49[8];
            if (v84 != 1)
            {
              if (v84 != 4) {
                goto LABEL_212;
              }
              v82 = (void *)*v82;
              goto LABEL_211;
            }
            v82 = (void *)*v82;
          }
          else
          {
            int v83 = *((unsigned __int8 *)v49 + 79);
            if (v83 != 1)
            {
              if (v83 != 4)
              {
LABEL_212:
                uint64_t v86 = 0;
LABEL_223:
                Espresso::abstract_context::set_generic_option(v81, (const char *)v50, v86);
                (*(void (**)(Espresso::abstract_context *, void *, uint64_t))(*(void *)v81 + 144))(v81, v50, v86);
                goto LABEL_247;
              }
LABEL_211:
              BOOL v85 = *(_DWORD *)v82 == 1702195828;
LABEL_220:
              uint64_t v86 = v85;
              goto LABEL_223;
            }
          }
          BOOL v85 = *(unsigned char *)v82 == 49;
          goto LABEL_220;
        }
        uint64_t v65 = v49[5];
        if (v65 > 19)
        {
          if (v65 != 20)
          {
            if (v65 != 24)
            {
              if (v65 != 25) {
                goto LABEL_247;
              }
              BOOL v66 = *(void *)*v50 == 0x7774656E5F726570 && *(void *)(*v50 + 8) == 0x666E6F635F6B726FLL;
              BOOL v67 = v66 && *(void *)(*v50 + 16) == 0x6F69746172756769;
              if (!v67 || *(unsigned char *)(*v50 + 24) != 110) {
                goto LABEL_247;
              }
              goto LABEL_158;
            }
            uint64_t v50 = (void *)*v50;
            goto LABEL_188;
          }
          uint64_t v50 = (void *)*v50;
LABEL_183:
          uint64_t v76 = *((unsigned int *)v50 + 4);
          BOOL v77 = *v50 == 0x757165735F657375 && v50[1] == 0x635F6C6169746E65;
          uint64_t v78 = 1935764578;
LABEL_192:
          if (!v77 || v76 != v78) {
            goto LABEL_247;
          }
          goto LABEL_204;
        }
        if (v65 == 12)
        {
          uint64_t v50 = (void *)*v50;
          goto LABEL_199;
        }
        if (v65 == 15)
        {
          uint64_t v50 = (void *)*v50;
          goto LABEL_173;
        }
      }
LABEL_247:
      __int16 v93 = (void *)v49[1];
      if (v93)
      {
        do
        {
          int v94 = v93;
          __int16 v93 = (void *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          int v94 = (void *)v49[2];
          _ZF = *v94 == (void)v49;
          uint64_t v49 = v94;
        }
        while (!_ZF);
      }
      uint64_t v10 = *v232;
      uint64_t v49 = v94;
    }
    while (v94 != (void *)(*v232 + 480));
  }
  uint64_t v95 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v229 = [v95 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  v96 = [v229 objectForKeyedSubscript:@"com.apple.espresso.threads"];
  v97 = v96;
  if (v96)
  {
    uint64_t v98 = [v96 integerValue];
    v99 = *a4;
    Espresso::abstract_context::set_generic_option(*a4, "bnns_n_threads", v98);
    (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(void *)v99 + 144))(v99, "bnns_n_threads", v98);
    v100 = *a4;
    BOOL v101 = v98 == 1;
    Espresso::abstract_context::set_generic_option(*a4, "use_sequential_cblas", v101);
    (*(void (**)(Espresso::abstract_context *, const char *, BOOL))(*(void *)v100 + 144))(v100, "use_sequential_cblas", v101);
  }
  v228 = v97;
  int v255 = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "format_version");
  int v102 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v103 = v102;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v103) {
      goto LABEL_265;
    }
  }
  else if (!v102)
  {
    goto LABEL_265;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "format_version");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, &v255);
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
LABEL_265:
  if (*((unsigned char *)*a4 + 72))
  {
    v105 = *a5;
    v104 = a5[1];
    if (v104) {
      atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v10 + 576) = v105;
    v106 = *(std::__shared_weak_count **)(v10 + 584);
    *(void *)(v10 + 584) = v104;
    if (v106) {
      nitro::nitro_function::nitro_function(v106);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "transform_params");
  int v107 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v107)
  {
    v241 = 0;
    v242 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "transform_params");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v241);
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    if (SHIBYTE(v250) < 0) {
      operator delete(__p[0]);
    }
    v108 = v241;
    memset(&v256, 0, sizeof(v256));
    (*(void (**)(void *, std::string *))(*(void *)v241 + 32))(v241, &v256);
    std::string::size_type size = v256.__r_.__value_.__l.__size_;
    std::string::size_type v109 = v256.__r_.__value_.__r.__words[0];
    if (v256.__r_.__value_.__r.__words[0] != v256.__r_.__value_.__l.__size_)
    {
      __asm { FMOV            V9.2S, #1.0 }
      do
      {
        if (*(char *)(v109 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v254, *(const std::string::value_type **)v109, *(void *)(v109 + 8));
        }
        else
        {
          long long v115 = *(_OWORD *)v109;
          v254.__r_.__value_.__r.__words[2] = *(void *)(v109 + 16);
          *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v115;
        }
        *(_DWORD *)buf = 1065353216;
        memset(&buf[12], 0, 36);
        *(void *)&uint8_t buf[4] = 0x100000000;
        *(void *)&buf[48] = _D9;
        memset(&buf[56], 0, 20);
        uint64_t v252 = 0;
        v253 = 0;
        Espresso::SerDes::generic_serdes_object::operator[]((uint64_t)v108, (uint64_t)&v254, __p);
        Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, (uint64_t)&v252);
        if (v251 < 0) {
          operator delete(v250);
        }
        if (__p[1]) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
        }
        Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(v252, (uint64_t)buf, 0);
        __p[0] = &v254;
        v116 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 328), &v254, (uint64_t)&std::piecewise_construct, (long long **)__p);
        long long v117 = *(_OWORD *)&buf[60];
        long long v118 = *(_OWORD *)buf;
        *(_OWORD *)(v116 + 72) = *(_OWORD *)&buf[16];
        long long v119 = *(_OWORD *)&buf[48];
        *(_OWORD *)(v116 + 88) = *(_OWORD *)&buf[32];
        *(_OWORD *)(v116 + 104) = v119;
        *(_OWORD *)(v116 + 116) = v117;
        *(_OWORD *)(v116 + 56) = v118;
        if (v253) {
          nitro::nitro_function::nitro_function(v253);
        }
        if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v254.__r_.__value_.__l.__data_);
        }
        v109 += 24;
      }
      while (v109 != size);
    }
    *(void *)buf = &v256;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v242) {
      nitro::nitro_function::nitro_function(v242);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "numerical_parameters");
  int v120 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v121 = v120;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v121) {
      goto LABEL_312;
    }
  }
  else if (!v120)
  {
    goto LABEL_312;
  }
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "numerical_parameters");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v256);
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
  v122 = (std::__shared_weak_count *)v256.__r_.__value_.__l.__size_;
  long long v248 = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
  if (v256.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v256.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, (uint64_t *)&v248);
  v123 = (void *)*v232;
  v124 = (void **)(*v232 + 360);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v124);
  v125 = *(void **)&buf[8];
  v123[44] = *(void *)buf;
  v123[45] = v125;
  uint64_t v126 = *(void *)&buf[16];
  v123[46] = *(void *)&buf[16];
  if (v126)
  {
    v125[2] = v124;
    *(void *)buf = &buf[8];
    *(void *)&buf[8] = 0;
    *(void *)&buf[16] = 0;
    v125 = 0;
  }
  else
  {
    v123[44] = v124;
  }
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v125);
  if (v122)
  {
    nitro::nitro_function::nitro_function(v122);
    nitro::nitro_function::nitro_function(v122);
  }
LABEL_312:
  std::string::basic_string[abi:ne180100]<0>(buf, "io_bind_info");
  int v127 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v128 = v127;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v128) {
      goto LABEL_329;
    }
  }
  else if (!v127)
  {
    goto LABEL_329;
  }
  *(_OWORD *)&v256.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "io_bind_info");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v256);
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
  v129 = (std::__shared_weak_count *)v256.__r_.__value_.__l.__size_;
  long long v247 = *(_OWORD *)&v256.__r_.__value_.__l.__data_;
  if (v256.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v256.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, (uint64_t *)&v247);
  v130 = (void *)*v232;
  v131 = (void **)(*v232 + 384);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*v131);
  v132 = *(void **)&buf[8];
  v130[47] = *(void *)buf;
  v130[48] = v132;
  uint64_t v133 = *(void *)&buf[16];
  v130[49] = *(void *)&buf[16];
  if (v133)
  {
    v132[2] = v131;
    *(void *)buf = &buf[8];
    *(void *)&buf[8] = 0;
    *(void *)&buf[16] = 0;
    v132 = 0;
  }
  else
  {
    v130[47] = v131;
  }
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v132);
  if (v129)
  {
    nitro::nitro_function::nitro_function(v129);
    nitro::nitro_function::nitro_function(v129);
  }
LABEL_329:
  std::string::basic_string[abi:ne180100]<0>(buf, "numerical_properties");
  int v134 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v135 = v134;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v135) {
      goto LABEL_359;
    }
  }
  else if (!v134)
  {
    goto LABEL_359;
  }
  *(_OWORD *)&v254.__r_.__value_.__l.__data_ = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(__p, "numerical_properties");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)__p, buf);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v254);
  if ((buf[39] & 0x80000000) != 0) {
    operator delete(*(void **)&buf[16]);
  }
  if (*(void *)&buf[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v136 = v254.__r_.__value_.__r.__words[0];
  __p[0] = 0;
  __p[1] = 0;
  v250 = 0;
  (*(void (**)(std::string::size_type, void **))(*(void *)v254.__r_.__value_.__l.__data_ + 32))(v254.__r_.__value_.__r.__words[0], __p);
  v137 = (char *)__p[0];
  for (j = (char *)__p[1]; v137 != j; v137 += 24)
  {
    if (v137[23] < 0)
    {
      std::string::__init_copy_ctor_external(&v256, *(const std::string::value_type **)v137, *((void *)v137 + 1));
    }
    else
    {
      long long v139 = *(_OWORD *)v137;
      v256.__r_.__value_.__r.__words[2] = *((void *)v137 + 2);
      *(_OWORD *)&v256.__r_.__value_.__l.__data_ = v139;
    }
    LODWORD(v252) = 0;
    uint64_t v140 = Espresso::keys_translation::c_api_engine_from_name(&v256);
    int v141 = Espresso::keys_translation::cpp_platform_from_c_api(v140);
    LODWORD(v252) = v141;
    v241 = 0;
    v242 = 0;
    Espresso::SerDes::generic_serdes_object::operator[](v136, (uint64_t)&v256, buf);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(buf, (uint64_t)&v241);
    if ((buf[39] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[16]);
    }
    if (*(void *)&buf[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&buf[8]);
    }
    v142 = v242;
    v246[0] = (uint64_t)v241;
    v246[1] = (uint64_t)v242;
    if (v242) {
      atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::load_network_metadata(Espresso::SerDes::generic_serdes_object &,std::string const&,std::string const&,std::shared_ptr<Espresso::abstract_context> const&,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()((uint64_t)buf, v246);
    v143 = std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>((uint64_t **)(*v232 + 400), v141, &v252);
    v144 = (uint64_t *)(v143 + 6);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v143[6]);
    v145 = *(uint64_t **)&buf[8];
    v143[5] = *(uint64_t **)buf;
    v143[6] = v145;
    uint64_t v146 = *(void *)&buf[16];
    v143[7] = *(uint64_t **)&buf[16];
    if (v146)
    {
      v145[2] = (uint64_t)v144;
      *(void *)buf = &buf[8];
      *(void *)&buf[8] = 0;
      *(void *)&buf[16] = 0;
      v145 = 0;
    }
    else
    {
      v143[5] = v144;
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v145);
    if (v142)
    {
      nitro::nitro_function::nitro_function(v142);
      nitro::nitro_function::nitro_function(v142);
    }
    if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v256.__r_.__value_.__l.__data_);
    }
  }
  *(void *)buf = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v254.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
  }
LABEL_359:
  std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
  int v147 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v148 = v147;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v148) {
      goto LABEL_372;
    }
  }
  else if (!v147)
  {
    goto LABEL_372;
  }
  uint64_t v149 = *v232;
  std::string::basic_string[abi:ne180100]<0>(buf, "configurations");
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 120))(&v244);
  char v151 = Espresso::net::restore_additional_configurations(v149, &v244);
  v152 = (Espresso *)v245;
  if (v245) {
    nitro::nitro_function::nitro_function(v245);
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v151) {
      goto LABEL_372;
    }
  }
  else if (v151)
  {
    goto LABEL_372;
  }
  v153 = Espresso::espresso_os_log_subsystem(v152, v150);
  if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1920CB000, v153, OS_LOG_TYPE_ERROR, "Cannot load configurations", buf, 2u);
  }

LABEL_372:
  std::string::basic_string[abi:ne180100]<0>(buf, "analyses");
  int v154 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v155 = v154;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v155) {
      goto LABEL_458;
    }
  }
  else if (!v154)
  {
    goto LABEL_458;
  }
  uint64_t v156 = MEMORY[0x192FF2020]();
  memset(buf, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "analyses");
  (*(void (**)(std::string *__return_ptr))(*(void *)a1 + 120))(&v256);
  context = (void *)v156;
  if (SHIBYTE(v250) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(std::string::size_type, unsigned char *))(*(void *)v256.__r_.__value_.__l.__data_ + 32))(v256.__r_.__value_.__r.__words[0], buf);
  uint64_t v157 = *(void *)buf;
  uint64_t v158 = *(void *)&buf[8];
  while (v157 != v158)
  {
    size_t v159 = strlen((const char *)((unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL));
    size_t v160 = v159;
    uint64_t v161 = *(unsigned __int8 *)(v157 + 23);
    if (*(char *)(v157 + 23) < 0)
    {
      size_t v164 = *(void *)(v157 + 8);
      if (v159 != v164)
      {
        size_t v163 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
        goto LABEL_398;
      }
      if (v159 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      v162 = *(const void **)v157;
    }
    else
    {
      v162 = (const void *)v157;
      if (v160 != v161)
      {
        size_t v163 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_393:
        if (v163 != v161)
        {
          size_t v172 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_409:
          if (v172 != v161)
          {
            size_t v180 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_424:
            size_t v164 = v180;
            v183 = (const void *)v157;
            if (v180 != v161)
            {
              size_t v184 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
LABEL_440:
              size_t v164 = v184;
              v188 = (const void *)v157;
              if (v184 == v161) {
                goto LABEL_447;
              }
              goto LABEL_454;
            }
            goto LABEL_431;
          }
          size_t v164 = v172;
          v179 = (const void *)v157;
          goto LABEL_417;
        }
        size_t v164 = v163;
        v171 = (const void *)v157;
        goto LABEL_401;
      }
    }
    if (!memcmp(v162, (const void *)((unint64_t)"N8Espresso27pass_constant_if_conditionsE" & 0x7FFFFFFFFFFFFFFFLL), v160))
    {
      v165 = (std::__shared_weak_count *)operator new(0x48uLL);
      v165->__shared_owners_ = 0;
      v165->__shared_weak_owners_ = 0;
      v165->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389338;
      v166 = v165 + 1;
      v165[2].__shared_weak_owners_ = 0;
      v165[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE369630;
      *(_OWORD *)&v165[1].__shared_owners_ = 0u;
      v165[2].std::__shared_count = 0u;
      LODWORD(v165[2].__shared_weak_owners_) = 1065353216;
      (*(void (**)(void **__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 120))(__p);
      int v167 = ((uint64_t (*)(std::__shared_weak_count *, void **))v166->__on_zero_shared)(v166, __p);
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v167)
      {
        uint64_t v168 = *v232 + 1120;
        v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v166->__vftable[-1].__on_zero_shared_weak;
        __p[0] = &v254;
        v169 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v168, (uint64_t)&v254, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
        v170 = (std::__shared_weak_count *)v169[4];
        v169[3] = v166;
        v169[4] = v165;
        if (v170) {
          nitro::nitro_function::nitro_function(v170);
        }
      }
      nitro::nitro_function::nitro_function(v165);
      uint64_t v161 = *(unsigned __int8 *)(v157 + 23);
    }
    size_t v163 = strlen((const char *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL));
    if ((v161 & 0x80) == 0) {
      goto LABEL_393;
    }
    size_t v164 = *(void *)(v157 + 8);
LABEL_398:
    if (v163 != v164)
    {
      size_t v172 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_414;
    }
    if (v164 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v171 = *(const void **)v157;
LABEL_401:
    if (!memcmp(v171, (const void *)((unint64_t)"N8Espresso31analysis_multi_head_program_genE" & 0x7FFFFFFFFFFFFFFFLL), v164))
    {
      v173 = (std::__shared_weak_count *)operator new(0x20uLL);
      v173->__shared_owners_ = 0;
      v173->__shared_weak_owners_ = 0;
      v173->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388F80;
      v174 = v173 + 1;
      v173[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE366218;
      (*(void (**)(void **__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 120))(__p);
      int v175 = ((uint64_t (*)(std::__shared_weak_count *, void **))v174->__on_zero_shared)(v174, __p);
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v175)
      {
        uint64_t v176 = *v232 + 1120;
        v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v174->__vftable[-1].__on_zero_shared_weak;
        __p[0] = &v254;
        v177 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v176, (uint64_t)&v254, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
        v178 = (std::__shared_weak_count *)v177[4];
        v177[3] = v174;
        v177[4] = v173;
        if (v178) {
          nitro::nitro_function::nitro_function(v178);
        }
      }
      nitro::nitro_function::nitro_function(v173);
      uint64_t v161 = *(unsigned __int8 *)(v157 + 23);
    }
    size_t v172 = strlen((const char *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL));
    if ((v161 & 0x80) == 0) {
      goto LABEL_409;
    }
    size_t v164 = *(void *)(v157 + 8);
LABEL_414:
    if (v172 != v164)
    {
      size_t v180 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_428;
    }
    if (v164 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v179 = *(const void **)v157;
LABEL_417:
    if (!memcmp(v179, (const void *)((unint64_t)"N8Espresso30analysis_to_preserve_mil_typesE" & 0x7FFFFFFFFFFFFFFFLL), v164))
    {
      v181 = (std::__shared_weak_count *)operator new(0x48uLL);
      v181->__shared_owners_ = 0;
      v181->__shared_weak_owners_ = 0;
      v181->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388DF8;
      v181[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE364DE0;
      *(_OWORD *)&v181[1].__shared_owners_ = 0u;
      v181[2].std::__shared_count = 0u;
      LODWORD(v181[2].__shared_weak_owners_) = 1065353216;
      __p[0] = &v181[1];
      __p[1] = v181;
      (*(void (**)(std::string *__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 120))(&v254);
      int v182 = ((uint64_t (*)(std::__shared_weak_count *, std::string *))v181[1].__on_zero_shared)(&v181[1], &v254);
      if (v254.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
      }
      if (v182) {
        Espresso::net::set_analysis<Espresso::analysis_to_preserve_mil_types>(*v232, __p);
      }
      nitro::nitro_function::nitro_function(v181);
      uint64_t v161 = *(unsigned __int8 *)(v157 + 23);
    }
    size_t v180 = strlen((const char *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL));
    if ((v161 & 0x80) == 0) {
      goto LABEL_424;
    }
    size_t v164 = *(void *)(v157 + 8);
LABEL_428:
    if (v180 != v164)
    {
      size_t v184 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
      goto LABEL_444;
    }
    if (v164 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v183 = *(const void **)v157;
LABEL_431:
    if (!memcmp(v183, (const void *)((unint64_t)"N8Espresso23analysis_debug_metadataE" & 0x7FFFFFFFFFFFFFFFLL), v164))
    {
      v185 = operator new(0xF0uLL);
      v185[1] = 0;
      v185[2] = 0;
      void *v185 = &unk_1EE387A80;
      v186 = (char *)(v185 + 3);
      v185[3] = &unk_1EE359F38;
      *((_OWORD *)v185 + 2) = 0u;
      *((_OWORD *)v185 + 3) = 0u;
      *((_OWORD *)v185 + 4) = 0u;
      *((_OWORD *)v185 + 5) = 0u;
      *((_OWORD *)v185 + 6) = 0u;
      *((_OWORD *)v185 + 7) = 0u;
      *((_OWORD *)v185 + 8) = 0u;
      *((_OWORD *)v185 + 9) = 0u;
      *((_OWORD *)v185 + 10) = 0u;
      *((_OWORD *)v185 + 11) = 0u;
      *((_OWORD *)v185 + 12) = 0u;
      *((_OWORD *)v185 + 13) = 0u;
      v185[28] = 0;
      *((_DWORD *)v185 + 58) = 1065353216;
      __p[0] = v185 + 3;
      __p[1] = v185;
      (*(void (**)(std::string *__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 120))(&v254);
      int v187 = (*(uint64_t (**)(char *, std::string *))(*(void *)v186 + 16))(v186, &v254);
      if (v254.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v254.__r_.__value_.__l.__size_);
      }
      if (v187) {
        Espresso::net::set_analysis<Espresso::analysis_debug_metadata>(*v232, __p);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      uint64_t v161 = *(unsigned __int8 *)(v157 + 23);
    }
    size_t v184 = strlen((const char *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL));
    if ((v161 & 0x80) == 0) {
      goto LABEL_440;
    }
    size_t v164 = *(void *)(v157 + 8);
LABEL_444:
    if (v184 == v164)
    {
      if (v164 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      v188 = *(const void **)v157;
LABEL_447:
      if (!memcmp(v188, (const void *)((unint64_t)"N8Espresso26analysis_pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL), v164))
      {
        v189 = (std::__shared_weak_count *)operator new(0x48uLL);
        v189->__shared_owners_ = 0;
        v189->__shared_weak_owners_ = 0;
        v189->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388458;
        v190 = v189 + 1;
        v189[2].__shared_weak_owners_ = 0;
        v189[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE35E0A0;
        *(_OWORD *)&v189[1].__shared_owners_ = 0u;
        v189[2].std::__shared_count = 0u;
        LODWORD(v189[2].__shared_weak_owners_) = 1065353216;
        (*(void (**)(void **__return_ptr))(*(void *)v256.__r_.__value_.__l.__data_ + 120))(__p);
        int v191 = ((uint64_t (*)(std::__shared_weak_count *, void **))v190->__on_zero_shared)(v190, __p);
        if (__p[1]) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
        }
        if (v191)
        {
          uint64_t v192 = *v232 + 1120;
          v254.__r_.__value_.__r.__words[0] = (std::string::size_type)v190->__vftable[-1].__on_zero_shared_weak;
          __p[0] = &v254;
          v193 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(v192, (uint64_t)&v254, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          atomic_fetch_add_explicit(&v189->__shared_owners_, 1uLL, memory_order_relaxed);
          v194 = (std::__shared_weak_count *)v193[4];
          v193[3] = v190;
          v193[4] = v189;
          if (v194) {
            nitro::nitro_function::nitro_function(v194);
          }
        }
        nitro::nitro_function::nitro_function(v189);
      }
    }
LABEL_454:
    v157 += 24;
  }
  if (v256.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v256.__r_.__value_.__l.__size_);
  }
  __p[0] = buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_458:
  uint64_t v195 = *v232;
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v252, *v232);
  if (v252)
  {
    if (*(void *)(v195 + 368))
    {
      for (k = *(uint64_t **)(v252 + 24); k; k = (uint64_t *)*k)
      {
        int v197 = *((_DWORD *)k + 10);
        v198 = (uint64_t **)(*v232 + 352);
        *(void *)buf = k + 2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v198, k + 2, (uint64_t)&std::piecewise_construct, (long long **)buf)+ 16) = v197;
      }
    }
    else
    {
      *(void *)&buf[8] = 0;
      *(void *)&buf[16] = 0;
      *(void *)buf = &buf[8];
      v199 = *(uint64_t **)(v252 + 24);
      if (v199)
      {
        do
        {
          int v200 = *((_DWORD *)v199 + 10);
          __p[0] = v199 + 2;
          v201 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)buf, v199 + 2, (uint64_t)&std::piecewise_construct, (long long **)__p);
          *((void *)v201 + 7) = 1065353216;
          *((_DWORD *)v201 + 16) = v200;
          *((_DWORD *)v201 + 17) = 1;
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v201 + 72, 0, 0, 0);
          v199 = (uint64_t *)*v199;
        }
        while (v199);
        uint64_t v195 = *v232;
      }
      uint64_t v202 = v195 + 360;
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(void **)(v195 + 360));
      v203 = *(void **)&buf[8];
      *(void *)(v195 + 352) = *(void *)buf;
      *(void *)(v195 + 360) = v203;
      uint64_t v204 = *(void *)&buf[16];
      *(void *)(v195 + 368) = *(void *)&buf[16];
      if (v204)
      {
        v203[2] = v202;
        *(void *)buf = &buf[8];
        *(void *)&buf[8] = 0;
        *(void *)&buf[16] = 0;
        v203 = 0;
      }
      else
      {
        *(void *)(v195 + 352) = v202;
      }
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v203);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "metadata_in_weights");
  v205 = v228;
  int v206 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 24))(a1, buf);
  int v207 = v206;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v207) {
      goto LABEL_563;
    }
LABEL_474:
    memset(&v256, 0, sizeof(v256));
    std::string::basic_string[abi:ne180100]<0>(__p, "metadata_in_weights");
    (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 128))(buf);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)&v256);
    std::string v256 = *(std::string *)buf;
    memset(buf, 0, 24);
    v254.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
    if (SHIBYTE(v250) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type v209 = v256.__r_.__value_.__l.__size_;
    v208 = (uint64_t *)v256.__r_.__value_.__r.__words[0];
    if (v256.__r_.__value_.__r.__words[0] == v256.__r_.__value_.__l.__size_)
    {
LABEL_562:
      *(void *)buf = &v256;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v205 = v228;
      goto LABEL_563;
    }
    while (1)
    {
      memset(&buf[24], 0, 40);
      *(_OWORD *)buf = xmmword_192DC3600;
      *(void *)&buf[16] = 0xFFFFFFFF00000001;
      memset(&v254, 0, sizeof(v254));
      uint64_t v210 = *v208;
      std::string::basic_string[abi:ne180100]<0>(&v241, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v210, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, (uint64_t)&v254);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      uint64_t v239 = 0;
      v240 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v241, "shape");
      Espresso::SerDes::generic_serdes_object::operator[](v210, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, (uint64_t)&v239);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      uint64_t v211 = v239;
      std::string::basic_string[abi:ne180100]<0>(&v241, "n");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, (_DWORD *)((unint64_t)buf | 0xC));
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      std::string::basic_string[abi:ne180100]<0>(&v241, "k");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, &buf[8]);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      std::string::basic_string[abi:ne180100]<0>(&v241, "h");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, &buf[4]);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      std::string::basic_string[abi:ne180100]<0>(&v241, "w");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, buf);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      std::string::basic_string[abi:ne180100]<0>(&v241, "_rank");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, &buf[20]);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "seq");
      int v212 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v211 + 24))(v211, __p);
      int v213 = v212;
      if (SHIBYTE(v250) < 0)
      {
        operator delete(__p[0]);
        if (!v213) {
          goto LABEL_529;
        }
      }
      else if (!v212)
      {
        goto LABEL_529;
      }
      std::string::basic_string[abi:ne180100]<0>(&v241, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](v211, (uint64_t)&v241, __p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(__p, &buf[16]);
      if (v251 < 0) {
        operator delete(v250);
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      if (v243 < 0) {
        operator delete(v241);
      }
LABEL_529:
      std::string::basic_string[abi:ne180100]<0>(__p, "data");
      if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v210 + 24))(v210, __p))
      {
        v214 = *a5;
        if (SHIBYTE(v250) < 0)
        {
          operator delete(__p[0]);
          if (!v214)
          {
LABEL_540:
            v218 = 0;
            goto LABEL_541;
          }
        }
        else if (!v214)
        {
          goto LABEL_540;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "data");
        uint64_t v215 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v210 + 80))(v210, __p);
        if (SHIBYTE(v250) < 0) {
          operator delete(__p[0]);
        }
        size_t v216 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t))(*a5)->__get_deleter)(*a5, v215);
        uint64_t v217 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t))(*a5)->__vftable[2].~__shared_weak_count)(*a5, v215);
        if ((v217 & 0x3F) != 0)
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,5>,std::allocator<Espresso::blob<float,5>>,int &,int &,int &,int &,int &,void>(__p, *(int *)buf, *(int *)&buf[4], *(int *)&buf[8], *(int *)&buf[12], *(int *)&buf[16]);
          v218 = __p[0];
          v214 = (std::__shared_weak_count *)__p[1];
          memcpy(*((void **)__p[0] + 4), (const void *)v217, v216);
        }
        else
        {
          v221 = (char *)operator new(0x68uLL);
          v214 = (std::__shared_weak_count *)v221;
          *((void *)v221 + 1) = 0;
          *((void *)v221 + 2) = 0;
          *(void *)v221 = &unk_1EE389A00;
          v218 = v221 + 24;
          int v222 = *(_DWORD *)&buf[16];
          *((void *)v221 + 3) = &unk_1EE36BF30;
          *(_OWORD *)(v221 + 72) = 0u;
          *(_OWORD *)(v221 + 88) = 0u;
          *((_OWORD *)v221 + 2) = *(_OWORD *)buf;
          *((_DWORD *)v221 + 12) = v222;
          *((void *)v221 + 7) = v217;
          v221[64] = 0;
          v223 = *a5;
          uint64_t v224 = (uint64_t)a5[1];
          if (v224)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v224 + 8), 1uLL, memory_order_relaxed);
            v225 = (std::__shared_weak_count *)*((void *)v221 + 10);
            v214[3].__vftable = (std::__shared_weak_count_vtbl *)v223;
            v214[3].__shared_owners_ = v224;
            if (v225) {
              nitro::nitro_function::nitro_function(v225);
            }
          }
          else
          {
            *((void *)v221 + 9) = v223;
            *((void *)v221 + 10) = 0;
          }
        }
      }
      else
      {
        if (SHIBYTE(v250) < 0) {
          operator delete(__p[0]);
        }
        v218 = 0;
        v214 = 0;
      }
LABEL_541:
      uint64_t v219 = *v232;
      v234[0] = *(_OWORD *)buf;
      v234[1] = *(_OWORD *)&buf[16];
      v220 = *(void **)&buf[40];
      uint64_t v235 = *(void *)&buf[32];
      v237 = 0;
      uint64_t v238 = 0;
      v236 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v236, *(const void **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(void *)&buf[48] - *(void *)&buf[40]) >> 2);
      v233[0] = v218;
      v233[1] = v214;
      if (v214) {
        atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::net::set_metadata_for_key(v219, (uint64_t)&v254, v234, v233);
      if (v214) {
        nitro::nitro_function::nitro_function(v214);
      }
      if (v236)
      {
        v237 = v236;
        operator delete(v236);
      }
      if (v240) {
        nitro::nitro_function::nitro_function(v240);
      }
      if (v214) {
        nitro::nitro_function::nitro_function(v214);
      }
      if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v254.__r_.__value_.__l.__data_);
        if (!v220) {
          goto LABEL_554;
        }
LABEL_553:
        operator delete(v220);
        goto LABEL_554;
      }
      if (v220) {
        goto LABEL_553;
      }
LABEL_554:
      v208 += 2;
      if (v208 == (uint64_t *)v209) {
        goto LABEL_562;
      }
    }
  }
  if (v206) {
    goto LABEL_474;
  }
LABEL_563:
  memset(buf, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&v256, "layers");
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 128))(__p);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)buf);
  *(_OWORD *)buf = *(_OWORD *)__p;
  *(void *)&buf[16] = v250;
  __p[1] = 0;
  v250 = 0;
  __p[0] = 0;
  v254.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v254);
  if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v256.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(*v232 + 1281) = Espresso::check_3d_layer_from_serdes((uint64_t **)buf);
  __p[0] = buf;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v253) {
    nitro::nitro_function::nitro_function(v253);
  }
}

void sub_1921BF41C()
{
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  *(void *)(v0 - 208) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v0 - 208);
  if (!*(void *)&v1[72]) {
    JUMPOUT(0x1921BFB10);
  }
  JUMPOUT(0x1921BFB0CLL);
}

void sub_1921BF424(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (*(char *)(v55 - 217) < 0) {
    operator delete(*(void **)(v55 - 240));
  }
  if (a50 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v55 - 185) < 0) {
    operator delete(*(void **)(v55 - 208));
  }
  uint64_t v56 = *(std::__shared_weak_count **)(v57 + 8);
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  JUMPOUT(0x1921BFB38);
}

void sub_1921BF7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54)
{
  if (a54) {
    nitro::nitro_function::nitro_function(a54);
  }
  JUMPOUT(0x1921BF838);
}

void sub_1921BF800()
{
  int v1 = *(std::__shared_weak_count **)(v0 - 232);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  *(void *)(v0 - 240) = v0 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 240));
  JUMPOUT(0x1921BFB10);
}

void sub_1921BF808(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1921BF81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a46) {
    JUMPOUT(0x1921BF828);
  }
  JUMPOUT(0x1921BF838);
}

void sub_1921BF834()
{
  nitro::nitro_function::nitro_function(v0);
  JUMPOUT(0x1921BF840);
}

void sub_1921BF860()
{
}

void sub_1921BF8A0()
{
}

void sub_1921BF8B0()
{
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*(void **)(v0 - 200));
  JUMPOUT(0x1921BF8BCLL);
}

void sub_1921BF8C4()
{
}

void sub_1921BF8CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1921BF9B0);
}

void sub_1921BF90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    JUMPOUT(0x1921BF9A8);
  }
  JUMPOUT(0x1921BF9ACLL);
}

void sub_1921BF920(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_1921BF980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

void sub_1921BF990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  if (a61 < 0) {
    operator delete(__p);
  }
  uint64_t v62 = *(void **)(v61 - 168);
  if (v62) {
    operator delete(v62);
  }
  *(void *)(v61 - 208) = v61 - 240;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 208));
  if (a55) {
    nitro::nitro_function::nitro_function(a55);
  }
  JUMPOUT(0x1921BFB14);
}

void sub_1921BFA08()
{
  if (*(char *)(v0 - 217) < 0) {
    operator delete(*(void **)(v0 - 240));
  }
  *(void *)(v0 - 208) = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 208));
  if (!v1[9]) {
    JUMPOUT(0x1921BFB10);
  }
  JUMPOUT(0x1921BFB0CLL);
}

void sub_1921BFA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
}

void sub_1921BFAA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  __p = (void *)(v50 - 208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int v51 = *(std::__shared_weak_count **)(v50 - 232);
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  JUMPOUT(0x1921BFB20);
}

void sub_1921BFAD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a52) {
    nitro::nitro_function::nitro_function(a52);
  }
  if (a58 < 0) {
    operator delete(__p);
  }
  *(void *)(v58 - 208) = v58 - 240;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 208));
  if (a35) {
    JUMPOUT(0x1921BFB0CLL);
  }
  JUMPOUT(0x1921BFB10);
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,Espresso::blob_numerical_properties>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  v2 = operator new(0x5E0uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_1EE389680;
  Espresso::net::net((Espresso::net *)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;

  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

double Espresso::net::net(Espresso::net *this)
{
  *((void *)this + 10) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((unsigned char *)this + 180) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((void *)this + 23) = (char *)this + 192;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((void *)this + 26) = (char *)this + 216;
  *((_OWORD *)this + 15) = 0u;
  *((void *)this + 29) = (char *)this + 240;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((void *)this + 32) = (char *)this + 264;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 35) = (char *)this + 288;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((void *)this + 38) = (char *)this + 312;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 41) = (char *)this + 336;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((void *)this + 44) = (char *)this + 360;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((void *)this + 47) = (char *)this + 384;
  *((void *)this + 50) = (char *)this + 408;
  *((_OWORD *)this + 30) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 59) = (char *)this + 480;
  *((_DWORD *)this + 124) = 0;
  *((unsigned char *)this + 500) = 0;
  *((void *)this + 63) = (char *)this + 512;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 140) = 1065353216;
  *((unsigned char *)this + 568) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((void *)this + 96) = 0;
  *((void *)this + 97) = (char *)this + 784;
  *((void *)this + 102) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((void *)this + 103) = (char *)this + 832;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_DWORD *)this + 220) = 1065353216;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 230) = 1065353216;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 240) = 1065353216;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 254) = 1065353216;
  *((void *)this + 134) = 0;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 270) = 1065353216;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 288) = 1065353216;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_DWORD *)this + 302) = 1065353216;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *(_DWORD *)((char *)this + 1279) = 0;
  *((void *)this + 159) = 0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 334) = 1065353216;
  *((void *)this + 168) = 0;
  *((unsigned char *)this + 1352) = 1;
  *((_WORD *)this + 704) = 0;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((void *)this + 183) = 0;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_DWORD *)this + 368) = 1065353216;
  *((_DWORD *)this + 44) = 1;
  return result;
}

uint64_t Espresso::check_3d_layer_from_serdes(uint64_t **a1)
{
  int v1 = *a1;
  v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *v1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "type");
    int v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 24))(v3, &__p);
    int v5 = v4;
    if (v24 < 0)
    {
      operator delete(__p);
      if (!v5) {
        goto LABEL_55;
      }
    }
    else if (!v4)
    {
      goto LABEL_55;
    }
    uint64_t v6 = *v1;
    std::string::basic_string[abi:ne180100]<0>(v20, "type");
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v6 + 112))(&__p, v6, v20);
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    int v7 = v24;
    if (v24 < 0)
    {
      p_p = __p;
      if (v23 == 6)
      {
        if (*(_DWORD *)__p == 1819242352 && *((_WORD *)__p + 2) == 25651) {
          goto LABEL_59;
        }
        if (*(_DWORD *)__p == 1986948963 && *((_WORD *)__p + 2) == 25651) {
          goto LABEL_59;
        }
        goto LABEL_54;
      }
      if (v23 == 8)
      {
        if (*(void *)__p == 0x6433766E6F636564) {
          goto LABEL_59;
        }
        goto LABEL_54;
      }
      if (v23 != 9) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v24 == 6)
      {
        if (__p == 1819242352 && WORD2(__p) == 25651) {
          return 1;
        }
        if (__p == 1986948963 && WORD2(__p) == 25651) {
          return 1;
        }
        goto LABEL_55;
      }
      if (v24 == 8)
      {
        if (__p == (void *)0x6433766E6F636564) {
          return 1;
        }
        goto LABEL_55;
      }
      if (v24 != 9) {
        goto LABEL_55;
      }
      p_p = &__p;
    }
    if (*(void *)p_p == 0x726F6E6863746162 && p_p[8] == 109)
    {
      uint64_t v10 = *v1;
      std::string::basic_string[abi:ne180100]<0>(v20, "spatial_rank");
      if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v10 + 24))(v10, v20))
      {
        uint64_t v11 = *v1;
        std::string::basic_string[abi:ne180100]<0>(v18, "spatial_rank");
        BOOL v12 = (*(unsigned int (**)(uint64_t, void **))(*(void *)v11 + 40))(v11, v18) == 3;
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      else
      {
        BOOL v12 = 0;
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      int v7 = v24;
      if (v12) {
        break;
      }
    }
    if (v7 < 0)
    {
      p_p = __p;
LABEL_54:
      operator delete(p_p);
    }
LABEL_55:
    v1 += 2;
    if (v1 == v2) {
      return 0;
    }
  }
  if ((v24 & 0x80000000) == 0) {
    return 1;
  }
  p_p = __p;
LABEL_59:
  operator delete(p_p);
  return 1;
}

void sub_1921C00F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(*(void **)(a1 + 16));
  v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    int v1 = a1;
    do
    {
      v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      int v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void Espresso::SerDes::params_io<Espresso::vimage2espresso_param>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "center_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_network_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_image_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 8));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "bias_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 16));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "bias_g");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 20));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "bias_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 24));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "bias_a");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 28));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "no_alpha_premultiply");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 72));
    goto LABEL_102;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "center_mean");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "is_network_bgr");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 12);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "is_image_bgr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 8);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "scale");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "bias_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 16);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "bias_g");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 20);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "bias_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 24);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "bias_a");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 28);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 72))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "no_alpha_premultiply");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 72);
LABEL_102:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "ane_direct_cvpixelbuffer");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  uint64_t v6 = (_DWORD *)(a2 + 68);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, v6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0)
  {
    operator delete(v7[0]);
    if (!a3) {
      goto LABEL_118;
    }
  }
  else if (!a3)
  {
    goto LABEL_118;
  }
  if (*v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "use_direct_cvpixelbuffer");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, v6);
    goto LABEL_120;
  }
LABEL_118:
  if (a3) {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "use_direct_cvpixelbuffer");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, v6);
LABEL_120:
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
}

void sub_1921C0B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(*(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(char *a1)
{
  if (a1)
  {
    int v1 = a1;
    do
    {
      v2 = *(char **)v1;
      uint64_t v3 = (void **)(v1 + 24);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
      operator delete(v1);
      int v1 = v2;
    }
    while (v2);
  }
}

void std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*a1);
    std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy((void *)a1[6]);
    operator delete(a1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    int v1 = a1;
    do
    {
      v2 = (void *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<unsigned long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      int v1 = v2;
    }
    while (v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    v2 = __p;
    do
    {
      uint64_t v3 = v2;
      v2 = (void *)*v2;
      int v4 = (std::__shared_weak_count *)v3[4];
      if (v4)
      {
        if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t Espresso::analysis_to_preserve_mil_types::deserialize(uint64_t a1, void *a2)
{
  int v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  (*(void (**)(void, long long **))(*(void *)*a2 + 32))(*a2, &v13);
  int v4 = v13;
  int v5 = v14;
  if (v13 != v14)
  {
    uint64_t v6 = a1 + 8;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 120))(&v11);
      uint64_t v7 = v11;
      std::string::basic_string[abi:ne180100]<0>(__p, "compute_path");
      LODWORD(v7) = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 40))(v7, __p);
      int v16 = v4;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)v4, (uint64_t)&std::piecewise_construct, &v16)+ 10) = v7;
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      int v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
  }
  __p[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return 1;
}

void sub_1921C0F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_to_preserve_mil_types>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_pass_unpack_layers>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_debug_metadata>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::analysis_to_preserve_mil_types::~analysis_to_preserve_mil_types(Espresso::analysis_to_preserve_mil_types *this)
{
  *(void *)this = &unk_1EE364DE0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE364DE0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

void Espresso::analysis_pass_unpack_layers::~analysis_pass_unpack_layers(Espresso::analysis_pass_unpack_layers *this)
{
  *(void *)this = &unk_1EE35FDD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE35FDD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x192FF16B0);
}

uint64_t e5rt_tensor_desc_get_strides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE399598;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1921C115C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t e5rt_tensor_desc_dtype_get_num_components(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398BF8;
  v4[1] = a1;
  v4[2] = a2;
  int v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921C12D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_component_size(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398CF8;
  v4[1] = a1;
  v4[2] = a2;
  int v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921C13D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_component_dtype(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398D78;
  v4[1] = a1;
  v4[2] = a2;
  int v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921C14CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_float(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    int v5 = a2;
  }
  else {
    int v5 = (uint64_t *)*a2;
  }
  id v9 = [NSString stringWithUTF8String:v5];
  LODWORD(v6) = *a3;
  if (*(float *)a3 == INFINITY)
  {
    uint64_t v7 = "inf";
LABEL_8:
    char v8 = objc_msgSend(NSString, "stringWithUTF8String:", v7, v6);
    [*(id *)(a1 + 24) setObject:v8 forKeyedSubscript:v9];
    goto LABEL_9;
  }
  if (*(float *)&v6 == -INFINITY)
  {
    uint64_t v7 = "-inf";
    goto LABEL_8;
  }
  char v8 = objc_msgSend(NSNumber, "numberWithFloat:");
  [*(id *)(a1 + 24) setObject:v8 forKeyedSubscript:v9];
LABEL_9:
}

void sub_1921C15E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_dtype_get_element_size(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE398C78;
  v4[1] = a1;
  v4[2] = a2;
  int v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921C16F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_create_from_iosurface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397AF8;
  v4[1] = a1;
  v4[2] = a2;
  int v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921C17F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void E5RT::TensorDescriptor::AllocateMemory(uint64_t a1, unsigned int a2, unint64_t a3)
{
  uint64_t Size = E5RT::TensorDescriptorImpl::GetSize(*(E5RT::TensorDescriptorImpl **)(a1 + 8));
  if (a3)
  {
    uint64_t v6 = (a3 + Size - 1) / a3 * a3;
    if (!v6) {
      uint64_t v6 = a3;
    }
    E5RT::BufferObject::AllocMemory(v6, a2);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Invalid argument.");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1921C18DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::IOPortImpl::BindMemoryObject(uint64_t a1, long long *a2, char a3)
{
  if (*(unsigned char *)(a1 + 48))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
    std::string::basic_string[abi:ne180100]<0>(v28, "Port bindings cannot be changed while operation is in use in an execution stream.");
    E5RT::Status::Status(v29, 2, v28);
    E5RT::E5RTError::E5RTError(exception, &v30, v29);
  }
  if (*(void *)a2)
  {
    if (E5RT::OperandDescriptor::TryAsTensorDescriptor(*(void **)(a1 + 16)))
    {
      if (!E5RT::MemoryObject::TryAsBuffer(*(void **)a2))
      {
        uint64_t v23 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v28, "Invalid operation : Binding surface objects to tensor ports isn't allowed.");
        E5RT::Status::Status(v29, 2, v28);
        E5RT::E5RTError::E5RTError(v23, &v30, v29);
      }
      if (*(unsigned char *)(a1 + 97))
      {
        uint64_t v6 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(*(E5RT::MemoryObject **)a2);
        unint64_t Size = E5RT::BufferObject::GetSize(v6);
        char v8 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(*(E5RT::OperandDescriptor **)(a1 + 16));
        if (Size < E5RT::TensorDescriptor::GetSize(v8))
        {
          id v9 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v28, "Buffer size is insufficient for tensor.");
          E5RT::Status::Status(v29, 2, v28);
          E5RT::E5RTError::E5RTError(v9, &v30, v29);
        }
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 32);
        char v12 = *(std::__shared_weak_count **)(a1 + 40);
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (!v13)
        {
          BOOL v25 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v28, "You can only bind memory to a dynamic port if you first set a max port descriptor.");
          E5RT::Status::Status(v29, 2, v28);
          E5RT::E5RTError::E5RTError(v25, &v30, v29);
        }
        int v14 = (E5RT::BufferObject *)E5RT::MemoryObject::Buffer(*(E5RT::MemoryObject **)a2);
        unint64_t v15 = E5RT::BufferObject::GetSize(v14);
        int v16 = *(E5RT::OperandDescriptor **)(a1 + 32);
        int v17 = *(std::__shared_weak_count **)(a1 + 40);
        *(void *)&long long v30 = v16;
        *((void *)&v30 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(v16);
        unint64_t v19 = E5RT::TensorDescriptor::GetSize(v18);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        if (v15 < v19)
        {
          v26 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
          std::string::basic_string[abi:ne180100]<0>(v28, "Buffer size is insufficient for max tensor descriptor.");
          E5RT::Status::Status(v29, 2, v28);
          E5RT::E5RTError::E5RTError(v26, &v30, v29);
        }
      }
    }
    else
    {
      if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(*(void **)(a1 + 16)))
      {
        v27 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v28, "Unknown port descriptor type.");
        E5RT::Status::Status(v29, 2, v28);
        E5RT::E5RTError::E5RTError(v27, &v30, v29);
      }
      if (!E5RT::MemoryObject::TryAsSurface(*(void **)a2))
      {
        char v24 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v30, "BindMemoryObject");
        std::string::basic_string[abi:ne180100]<0>(v28, "Invalid operation : Binding buffer objects to surface ports isn't allowed.");
        E5RT::Status::Status(v29, 2, v28);
        E5RT::E5RTError::E5RTError(v24, &v30, v29);
      }
      char v10 = (E5RT::SurfaceObject *)E5RT::MemoryObject::TryAsSurface(*(void **)a2);
      uint64_t v11 = (const E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(*(E5RT::OperandDescriptor **)(a1 + 16));
      E5RT::SurfaceObject::ValidateSurfaceObjectMatchesWithDescriptor(v10, v11);
    }
    long long v20 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    char v21 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  else
  {
    long long v30 = 0uLL;
    std::shared_ptr<E5RT::SharedResource>::operator=[abi:ne180100](a1, &v30);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&v30);
    a3 = 0;
  }
  *(unsigned char *)(a1 + 98) = a3;
}

void sub_1921C1E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_7;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::TensorDescriptorImpl::GetSize(E5RT::TensorDescriptorImpl *this)
{
  if (!*((unsigned char *)this + 104))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetSize");
    std::string::basic_string[abi:ne180100]<0>(v3, "Tensor size cannot be queried because all dimensions are not known.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return *((void *)this + 12);
}

void sub_1921C20A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptor::GetSize(E5RT::TensorDescriptorImpl **this)
{
  return E5RT::TensorDescriptorImpl::GetSize(this[1]);
}

void *E5RT::OperandDescriptor::TensorDescriptor(E5RT::OperandDescriptor *this)
{
  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "TensorDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operand Descriptor is not a Tensor descriptor.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_1921C220C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::IOBufferObject::GetSize(E5RT::IOBufferObject *this)
{
  return *((void *)this + 1);
}

uint64_t E5RT::BufferObject::GetSize(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 16))();
}

void *E5RT::MemoryObject::Buffer(E5RT::MemoryObject *this)
{
  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Buffer");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

{
  void *result;
  void *exception;
  void v3[3];
  unsigned char v4[8];
  void v5[3];

  if (!this
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "Buffer");
    std::string::basic_string[abi:ne180100]<0>(v3, "Bad cast failure.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_1921C239C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::MemoryObject::TryAsBuffer(void *this)
{
  if (this) {
  return this;
  }
}

{
  if (this) {
  return this;
  }
}

void *E5RT::MemoryObject::TryAsSurface(void *this)
{
  if (this) {
  return this;
  }
}

{
  if (this) {
  return this;
  }
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::Impl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v250 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v227 = (void *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = a4;
  *(void *)(a1 + 160) = a5;
  v223 = (E5RT::BufferObject **)(a1 + 120);
  uint64_t v217 = (void *)(a1 + 168);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 168, a6);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 208, a7);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 248, a8);
  *(void *)(a1 + 288) = a9;
  *(void *)(a1 + 296) = a12;
  *(unsigned char *)(a1 + 304) = a10;
  *(unsigned char *)(a1 + 305) = a11;
  *(void *)(a1 + 312) = a13;
  int v16 = (E5RT *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  if (*((void *)v16 + 1) - *(void *)v16 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v242, "Impl");
    std::string::basic_string[abi:ne180100]<0>(v240, "Execution of functions with multiple blocks not supported yet.");
    E5RT::Status::Status(v237, 1, v240);
    E5RT::E5RTError::E5RTError(exception, &v242, v237);
  }
  int IsIOSurfaceSharedEventAvailable = E5RT::IsIOSurfaceSharedEventAvailable(v16);
  if (IsIOSurfaceSharedEventAvailable)
  {
    uint64_t v18 = (E5RT::BufferObjectPriv *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
    if (v18) {
      E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool(v18);
    }
  }
  InputPorts = (void *)E5RT::ExecutionStreamOperationInternal::GetInputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  context = (void *)E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  v220 = (void *)E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*(E5RT::ExecutionStreamOperationInternal **)a1);
  long long v20 = (void **)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)**v20 + 16))(**v20);
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateDynamicCallables((void **)a1, (const void ***)v21);
  E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateMutableMILWeightPaths(a1, (const void ***)v21);
  int v23 = *(const void ***)v21;
  uint64_t v219 = *(const void ***)(v21 + 8);
  if (*(const void ***)v21 != v219)
  {
    v218 = InputPorts;
    while (1)
    {
      char v24 = *v23;
      BOOL v25 = (std::__shared_weak_count *)v23[1];
      v221 = v23;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v222 = v25;
      uint64_t v224 = v24;
      v26 = (void *)(*(uint64_t (**)(void))(*(void *)v24 + 32))();
      uint64_t v27 = v26[1] - *v26;
      if (v27)
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        uint64_t v30 = v27 / 24;
        do
        {
          if (v29 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26[1] - *v26) >> 3))
          {
            v208 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v208, "iterator out of range");
            v208->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v208, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v26 + 8, *v26 + v28)+ 2;
          int v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)v31);
          BOOL v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(InputPorts, (uint64_t)v31);
          if (!v32)
          {
            v34 = v33;
            if (!v33)
            {
              int v200 = __cxa_allocate_exception(0x18uLL);
              BYTE7(v243) = 4;
              strcpy((char *)&v242, "Impl");
              *(void *)&v240[0] = operator new(0x38uLL);
              *(long long *)((char *)v240 + 8) = xmmword_192DAB900;
              strcpy(*(char **)&v240[0], "Operations in block must be topologically sorted.");
              E5RT::Status::Status(v237, 2, v240);
              E5RT::E5RTError::E5RTError(v200, &v242, v237);
            }
            if (!v33[5])
            {
              v201 = __cxa_allocate_exception(0x18uLL);
              BYTE7(v243) = 4;
              strcpy((char *)&v242, "Impl");
              *(void *)&v240[0] = operator new(0x28uLL);
              *(long long *)((char *)v240 + 8) = xmmword_192DAB6B0;
              strcpy(*(char **)&v240[0], "Extern input port not initialized.");
              E5RT::Status::Status(v237, 2, v240);
              E5RT::E5RTError::E5RTError(v201, &v242, v237);
            }
            *(void *)&long long v242 = v31;
            char v35 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227, (uint64_t)v31, (uint64_t)&std::piecewise_construct, (long long **)&v242);
            uint64_t v37 = v34[5];
            uint64_t v36 = v34[6];
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v38 = (std::__shared_weak_count *)v35[6];
            v35[5] = v37;
            v35[6] = v36;
            if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          ++v29;
          v28 += 24;
        }
        while (v30 != v29);
      }
      uint64_t v39 = (void *)(*(uint64_t (**)(const void *))(*(void *)v224 + 40))(v224);
      uint64_t v40 = v39[1] - *v39;
      if (v40) {
        break;
      }
LABEL_53:
      v22 = (uint64_t *)(*(uint64_t (**)(const void *))(*(void *)v224 + 48))(v224);
      uint64_t v62 = v22;
      uint64_t v63 = v22[1] - *v22;
      if (v63)
      {
        uint64_t v64 = 0;
        unint64_t v65 = 0;
        uint64_t v66 = v63 / 24;
        do
        {
          if (v65 >= 0xAAAAAAAAAAAAAAABLL * ((v62[1] - *v62) >> 3))
          {
            std::string::size_type v209 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v209, "iterator out of range");
            v209->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
            __cxa_throw(v209, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
          }
          BOOL v67 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v62 + 8, *v62 + v64)+ 2;
          long long v68 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)v67);
          v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v220, (uint64_t)v67);
          long long v69 = v22;
          if (!v22)
          {
            v199 = __cxa_allocate_exception(0x18uLL);
            BYTE7(v243) = 4;
            strcpy((char *)&v242, "Impl");
            *(void *)&v240[0] = operator new(0x38uLL);
            *(long long *)((char *)v240 + 8) = xmmword_192DA90A0;
            strcpy(*(char **)&v240[0], "An inOut operand must be an external function inOut.");
            E5RT::Status::Status(v237, 2, v240);
            E5RT::E5RTError::E5RTError(v199, &v242, v237);
          }
          if (!v68)
          {
            *(void *)&long long v242 = v67;
            v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227, (uint64_t)v67, (uint64_t)&std::piecewise_construct, (long long **)&v242);
            uint64_t v71 = v69[5];
            uint64_t v70 = v69[6];
            if (v70) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v72 = (std::__shared_weak_count *)v22[6];
            v22[5] = v71;
            v22[6] = v70;
            if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          ++v65;
          v64 += 24;
        }
        while (v66 != v65);
      }
      InputPorts = v218;
      if (v222 && !atomic_fetch_add(&v222->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
      int v23 = v221 + 2;
      if (v221 + 2 == v219) {
        goto LABEL_67;
      }
    }
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    uint64_t v43 = v40 / 24;
    while (1)
    {
      if (v42 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39[1] - *v39) >> 3))
      {
        int v207 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v207, "iterator out of range");
        v207->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v207, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v39 + 8, *v39 + v41);
      uint64_t v45 = (uint64_t)(v44 + 2);
      uint64_t v46 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)(v44 + 2));
      unint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(context, (uint64_t)(v44 + 2));
      if (v46) {
        goto LABEL_24;
      }
      uint64_t v48 = v47;
      if (v47) {
        break;
      }
      (*(void (**)(long long *__return_ptr))(*(void *)v44[5] + 16))(v240);
      (*(void (**)(uint64_t))(*(void *)v44[5] + 56))(v44[5]);
      unint64_t v53 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v53, v240);
      *(void *)&long long v242 = v53 + 24;
      *((void *)&v242 + 1) = v53;
      id v54 = (std::__shared_weak_count *)*((void *)&v240[0] + 1);
      if (*((void *)&v240[0] + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v240[0] + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      if (E5RT::IOPort::HasKnownShape((E5RT::IOPortImpl **)v242))
      {
        PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef((E5RT::IOPortImpl **)v242);
        uint64_t v56 = (E5RT::TensorDescriptorImpl **)E5RT::OperandDescriptor::TensorDescriptor(PortDescriptorRef);
        unint64_t Size = (E5RT::BufferObjectPriv *)E5RT::TensorDescriptor::GetSize(v56);
        if (IsIOSurfaceSharedEventAvailable)
        {
          (*(void (**)(uint64_t))(*(void *)v44[5] + 48))(v44[5]);
          E5RT::BufferObject::CreateBufferAlias(*v223);
        }
        E5RT::BufferObjectPriv::AllocBufferObjectFromIOSurfaceMemoryPool(Size);
      }
      uint64_t v245 = 0;
      v246 = 0;
      E5RT::IOPortPriv::BindMemoryObject(v242, (uint64_t)&v245, 1);
      uint64_t v58 = v246;
      if (v246 && !atomic_fetch_add(&v246->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
      *(void *)&v240[0] = v44 + 2;
      int v59 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227, v45, (uint64_t)&std::piecewise_construct, (long long **)v240);
      long long v60 = v242;
      if (*((void *)&v242 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v242 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v61 = (std::__shared_weak_count *)v59[6];
      *(_OWORD *)(v59 + 5) = v60;
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        uint64_t v52 = (std::__shared_weak_count *)*((void *)&v242 + 1);
        if (*((void *)&v242 + 1)) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v52 = (std::__shared_weak_count *)*((void *)&v242 + 1);
        if (*((void *)&v242 + 1)) {
          goto LABEL_47;
        }
      }
LABEL_24:
      ++v42;
      v41 += 24;
      if (v43 == v42) {
        goto LABEL_53;
      }
    }
    if (!v47[5])
    {
      uint64_t v202 = __cxa_allocate_exception(0x18uLL);
      BYTE7(v243) = 4;
      strcpy((char *)&v242, "Impl");
      *(void *)&v240[0] = operator new(0x28uLL);
      *(long long *)((char *)v240 + 8) = xmmword_192DB16A0;
      strcpy(*(char **)&v240[0], "Extern output port not initialized.");
      E5RT::Status::Status(v237, 2, v240);
      E5RT::E5RTError::E5RTError(v202, &v242, v237);
    }
    *(void *)&long long v242 = v44 + 2;
    uint64_t v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v227, v45, (uint64_t)&std::piecewise_construct, (long long **)&v242);
    uint64_t v51 = v48[5];
    uint64_t v50 = v48[6];
    if (v50) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = (std::__shared_weak_count *)v49[6];
    v49[5] = v51;
    v49[6] = v50;
    if (!v52) {
      goto LABEL_24;
    }
LABEL_47:
    if (!atomic_fetch_add(&v52->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
    goto LABEL_24;
  }
LABEL_67:
  E5RT::IsAVirtualMachine((E5RT *)v22);
  long long v73 = (void **)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  uint64_t v74 = (*(uint64_t (**)(void))(*(void *)**v73 + 16))(**v73);
  int v75 = *(const void ***)v74;
  if (*(void *)v74 != *(void *)(v74 + 8))
  {
    MEMORY[0x192FF2020]();
    long long v242 = 0u;
    long long v243 = 0u;
    int v244 = 1065353216;
    memset(v240, 0, sizeof(v240));
    int v241 = 1065353216;
    *(_OWORD *)v237 = 0u;
    *(_OWORD *)uint64_t v238 = 0u;
    int v239 = 1065353216;
    uint64_t v76 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 32))();
    uint64_t v77 = v76[1] - *v76;
    if (v77)
    {
      uint64_t v78 = 0;
      unint64_t v79 = 0;
      uint64_t v80 = v77 / 24;
      while (1)
      {
        if (v79 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76[1] - *v76) >> 3))
        {
          uint64_t v204 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v204, "iterator out of range");
          v204->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v204, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
        }
        v81 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v76 + 8, *v76 + v78);
        v82 = v81;
        if (*((char *)v81 + 39) < 0) {
          std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v81[2], v81[3]);
        }
        else {
          std::string __dst = *(std::string *)(v81 + 2);
        }
        int v83 = (std::__shared_weak_count *)v82[6];
        uint64_t v235 = v82[5];
        v236 = v83;
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)&__dst);
        if (!v84) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v231, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v231 = __dst;
        }
        uint64_t v85 = v84[6];
        uint64_t v232 = v84[5];
        v233 = (std::__shared_weak_count *)v85;
        if (v85) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)&v242, (uint64_t)&v231, (uint64_t)&v231);
        uint64_t v86 = v233;
        if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
          if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_87:
            uint64_t v87 = v236;
            if (v236) {
              goto LABEL_93;
            }
            goto LABEL_70;
          }
        }
        else if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_87;
        }
        operator delete(v231.__r_.__value_.__l.__data_);
        uint64_t v87 = v236;
        if (v236)
        {
LABEL_93:
          if (!atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
LABEL_70:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          ++v79;
          v78 += 24;
          if (v80 == v79) {
            break;
          }
        }
        else
        {
          ++v79;
          v78 += 24;
          if (v80 == v79) {
            break;
          }
        }
      }
    }
    BOOL v88 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 40))();
    uint64_t v89 = v88[1] - *v88;
    if (v89)
    {
      uint64_t v90 = 0;
      unint64_t v91 = 0;
      uint64_t v92 = v89 / 24;
      while (1)
      {
        if (v91 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88[1] - *v88) >> 3))
        {
          v205 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v205, "iterator out of range");
          v205->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v205, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
        }
        __int16 v93 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v88 + 8, *v88 + v90);
        int v94 = v93;
        if (*((char *)v93 + 39) < 0) {
          std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v93[2], v93[3]);
        }
        else {
          std::string __dst = *(std::string *)(v93 + 2);
        }
        uint64_t v95 = (std::__shared_weak_count *)v94[6];
        uint64_t v235 = v94[5];
        v236 = v95;
        if (v95) {
          atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v96 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)&__dst);
        if (!v96) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v231, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v231 = __dst;
        }
        uint64_t v97 = v96[6];
        uint64_t v232 = v96[5];
        v233 = (std::__shared_weak_count *)v97;
        if (v97) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)v240, (uint64_t)&v231, (uint64_t)&v231);
        uint64_t v98 = v233;
        if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
          if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_114:
            v99 = v236;
            if (v236) {
              goto LABEL_120;
            }
            goto LABEL_97;
          }
        }
        else if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_114;
        }
        operator delete(v231.__r_.__value_.__l.__data_);
        v99 = v236;
        if (v236)
        {
LABEL_120:
          if (!atomic_fetch_add(&v99->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
LABEL_97:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          ++v91;
          v90 += 24;
          if (v92 == v91) {
            break;
          }
        }
        else
        {
          ++v91;
          v90 += 24;
          if (v92 == v91) {
            break;
          }
        }
      }
    }
    v100 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 48))();
    uint64_t v101 = v100[1] - *v100;
    if (v101)
    {
      uint64_t v102 = 0;
      unint64_t v103 = 0;
      uint64_t v104 = v101 / 24;
      while (1)
      {
        if (v103 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100[1] - *v100) >> 3))
        {
          int v206 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v206, "iterator out of range");
          v206->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v206, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
        }
        v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v100 + 8, *v100 + v102);
        v106 = v105;
        if (*((char *)v105 + 39) < 0) {
          std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v105[2], v105[3]);
        }
        else {
          std::string __dst = *(std::string *)(v105 + 2);
        }
        int v107 = (std::__shared_weak_count *)v106[6];
        uint64_t v235 = v106[5];
        v236 = v107;
        if (v107) {
          atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v108 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(v227, (uint64_t)&__dst);
        if (!v108) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v231, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else {
          std::string v231 = __dst;
        }
        uint64_t v109 = v108[6];
        uint64_t v232 = v108[5];
        v233 = (std::__shared_weak_count *)v109;
        if (v109) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>((uint64_t)v237, (uint64_t)&v231, (uint64_t)&v231);
        v110 = v233;
        if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
          std::__shared_weak_count::__release_weak(v110);
          if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_141:
            v111 = v236;
            if (v236) {
              goto LABEL_147;
            }
            goto LABEL_124;
          }
        }
        else if ((SHIBYTE(v231.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_141;
        }
        operator delete(v231.__r_.__value_.__l.__data_);
        v111 = v236;
        if (v236)
        {
LABEL_147:
          if (!atomic_fetch_add(&v111->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
LABEL_124:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          ++v103;
          v102 += 24;
          if (v104 == v103) {
            break;
          }
        }
        else
        {
          ++v103;
          v102 += 24;
          if (v104 == v103) {
            break;
          }
        }
      }
    }
    memset(&v231, 0, sizeof(v231));
    uint64_t OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)a1);
    uint64_t v113 = *(unsigned __int8 *)(OpName + 23);
    if ((v113 & 0x80u) != 0) {
      uint64_t v113 = *(void *)(OpName + 8);
    }
    if (!v113)
    {
      int v120 = (const std::string *)(*(uint64_t (**)(void))(*(void *)*v75 + 24))();
      std::string::operator=(&v231, v120);
      goto LABEL_177;
    }
    uint64_t v114 = E5RT::ExecutionStreamOperationInternal::GetOpName(*(E5RT::ExecutionStreamOperationInternal **)a1);
    long long v115 = (const void **)v114;
    int v116 = *(char *)(v114 + 23);
    if (v116 >= 0) {
      size_t v117 = *(unsigned __int8 *)(v114 + 23);
    }
    else {
      size_t v117 = *(void *)(v114 + 8);
    }
    unint64_t v118 = v117 + 1;
    if (v117 + 1 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v118 >= 0x17)
    {
      uint64_t v121 = (v118 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v118 | 7) != 0x17) {
        uint64_t v121 = v118 | 7;
      }
      uint64_t v122 = v121 + 1;
      p_dst = (char *)operator new(v121 + 1);
      __dst.__r_.__value_.__l.__size_ = v117 + 1;
      __dst.__r_.__value_.__r.__words[2] = v122 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = (char *)&__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v117 + 1;
      if (!v117)
      {
LABEL_167:
        *(_WORD *)&p_dst[v117] = 95;
        uint64_t v124 = (*(uint64_t (**)(void))(*(void *)*v75 + 24))();
        int v125 = *(char *)(v124 + 23);
        if (v125 >= 0) {
          uint64_t v126 = (const std::string::value_type *)v124;
        }
        else {
          uint64_t v126 = *(const std::string::value_type **)v124;
        }
        if (v125 >= 0) {
          std::string::size_type v127 = *(unsigned __int8 *)(v124 + 23);
        }
        else {
          std::string::size_type v127 = *(void *)(v124 + 8);
        }
        int v128 = std::string::append(&__dst, v126, v127);
        std::string::size_type v129 = v128->__r_.__value_.__r.__words[0];
        *(void *)&long long v248 = v128->__r_.__value_.__l.__size_;
        *(void *)((char *)&v248 + 7) = *(std::string::size_type *)((char *)&v128->__r_.__value_.__r.__words[1] + 7);
        char v130 = HIBYTE(v128->__r_.__value_.__r.__words[2]);
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v231.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        v231.__r_.__value_.__r.__words[0] = v129;
        v231.__r_.__value_.__l.__size_ = v248;
        *(std::string::size_type *)((char *)&v231.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v248 + 7);
        *((unsigned char *)&v231.__r_.__value_.__s + 23) = v130;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
LABEL_177:
        long long v230 = 0uLL;
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 1)
        {
          E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 8)
        {
          memset(&__dst, 0, sizeof(__dst));
          long long v248 = 0uLL;
          unint64_t v249 = 0;
          memset(&__p, 0, sizeof(__p));
          v131 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 32))();
          uint64_t v132 = v131[1] - *v131;
          if (v132)
          {
            uint64_t v133 = 0;
            unint64_t v134 = 0;
            uint64_t v135 = v132 / 24;
            do
            {
              if (v134 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131[1] - *v131) >> 3))
              {
                uint64_t v210 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v210, "iterator out of range");
                v210->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
                __cxa_throw(v210, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
              }
              v137 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v131 + 8, *v131 + v133);
              v138 = (long long *)(v137 + 2);
              long long v139 = (_OWORD *)__dst.__r_.__value_.__l.__size_;
              if (__dst.__r_.__value_.__l.__size_ >= __dst.__r_.__value_.__r.__words[2])
              {
                uint64_t v136 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__dst.__r_.__value_.__l.__data_, (uint64_t)v138);
              }
              else
              {
                if (*((char *)v137 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__dst.__r_.__value_.__l.__size_, (const std::string::value_type *)v137[2], v137[3]);
                }
                else
                {
                  long long v140 = *v138;
                  *(void *)(__dst.__r_.__value_.__l.__size_ + 16) = v137[4];
                  *long long v139 = v140;
                }
                uint64_t v136 = (std::string *)((char *)v139 + 24);
              }
              __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v136;
              ++v134;
              v133 += 24;
            }
            while (v135 != v134);
          }
          int v141 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 40))();
          uint64_t v142 = v141[1] - *v141;
          if (v142)
          {
            uint64_t v143 = 0;
            unint64_t v144 = 0;
            uint64_t v145 = v142 / 24;
            do
            {
              if (v144 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141[1] - *v141) >> 3))
              {
                uint64_t v211 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v211, "iterator out of range");
                v211->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
                __cxa_throw(v211, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
              }
              int v147 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v141 + 8, *v141 + v143);
              int v148 = (long long *)(v147 + 2);
              uint64_t v149 = (_OWORD *)*((void *)&v248 + 1);
              if (*((void *)&v248 + 1) >= v249)
              {
                uint64_t v146 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v248, (uint64_t)v148);
              }
              else
              {
                if (*((char *)v147 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(*((std::string **)&v248 + 1), (const std::string::value_type *)v147[2], v147[3]);
                }
                else
                {
                  long long v150 = *v148;
                  *(void *)(*((void *)&v248 + 1) + 16) = v147[4];
                  *uint64_t v149 = v150;
                }
                uint64_t v146 = (std::string *)((char *)v149 + 24);
              }
              *((void *)&v248 + 1) = v146;
              ++v144;
              v143 += 24;
            }
            while (v145 != v144);
          }
          char v151 = (void *)(*(uint64_t (**)(void))(*(void *)*v75 + 48))();
          uint64_t v152 = v151[1] - *v151;
          if (v152)
          {
            uint64_t v153 = 0;
            unint64_t v154 = 0;
            uint64_t v155 = v152 / 24;
            do
            {
              if (v154 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v151[1] - *v151) >> 3))
              {
                int v212 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v212, "iterator out of range");
                v212->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
                __cxa_throw(v212, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
              }
              uint64_t v157 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v151 + 8, *v151 + v153);
              uint64_t v158 = (long long *)(v157 + 2);
              size_t v159 = (_OWORD *)__p.__r_.__value_.__l.__size_;
              if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
              {
                uint64_t v156 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, (uint64_t)v158);
              }
              else
              {
                if (*((char *)v157 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, (const std::string::value_type *)v157[2], v157[3]);
                }
                else
                {
                  long long v160 = *v158;
                  *(void *)(__p.__r_.__value_.__l.__size_ + 16) = v157[4];
                  *size_t v159 = v160;
                }
                uint64_t v156 = (std::string *)((char *)v159 + 24);
              }
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v156;
              ++v154;
              v153 += 24;
            }
            while (v155 != v154);
          }
          E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(*v75, &v228);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 2)
        {
          E5RT::E5Operation::GetOperationAttributes<CpuInferenceOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 3)
        {
          E5RT::E5Operation::GetOperationAttributes<CastOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 4)
        {
          E5RT::E5Operation::GetOperationAttributes<QuantOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 5)
        {
          E5RT::E5Operation::GetOperationAttributes<DequantOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 7)
        {
          E5RT::E5Operation::GetOperationAttributes<MlcCpuInferenceOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 12)
        {
          E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 11)
        {
          E5RT::E5Operation::GetOperationAttributes<EirInferenceOpT>(*v75, &v248);
          operator new();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 13)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          LOBYTE(v235) = 0;
          E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(*v75, &v248);
          uint64_t v161 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v217, v248 + 24);
          if (v161) {
            std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__dst, (const std::string *)(v161 + 5));
          }
          std::make_unique[abi:ne180100]<E5RT::Ops::JitCallOperation,std::string &,std::shared_ptr<JitCallOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::optional<std::string> &>();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 14)
        {
          E5RT::E5Operation::GetOperationAttributes<E5MinimalCpuOpT>(*v75, &__dst);
          std::make_unique[abi:ne180100]<E5RT::Ops::E5MinimalCpuOperation,std::string &,std::shared_ptr<E5MinimalCpuOpT const>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>,std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>>();
        }
        if ((*(unsigned int (**)(void))(*(void *)*v75 + 16))() == 9) {
          std::make_unique[abi:ne180100]<E5RT::Ops::BarrierOperation,std::string &>();
        }
        int v213 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__dst, "Impl");
        unsigned int v214 = (*(uint64_t (**)(void))(*(void *)*v75 + 16))();
        std::to_string(&__p, v214);
        uint64_t v215 = std::string::insert(&__p, 0, "Unknown opcode type: ");
        long long v216 = *(_OWORD *)&v215->__r_.__value_.__l.__data_;
        unint64_t v249 = v215->__r_.__value_.__r.__words[2];
        long long v248 = v216;
        v215->__r_.__value_.__l.__size_ = 0;
        v215->__r_.__value_.__r.__words[2] = 0;
        v215->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(&v247, 2, &v248);
        E5RT::E5RTError::E5RTError(v213, &__dst, &v247);
      }
    }
    if (v116 >= 0) {
      v123 = v115;
    }
    else {
      v123 = *v115;
    }
    memmove(p_dst, v123, v117);
    goto LABEL_167;
  }
  long long v242 = 0u;
  long long v243 = 0u;
  int v244 = 1065353216;
  v162 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 48);
  size_t v163 = *(E5RT::ExecutionStreamOperationInternal ***)(a1 + 56);
  if (v162 != v163)
  {
    do
    {
      *(void *)&v240[0] = *(void *)E5RT::ExecutionStreamOperationInternal::GetOpSupportedBufferTypes(*v162);
      uint64_t v164 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*v162);
      sub_1923452B4(*(uint64_t **)(v164 + 16), v240, &v242);
      uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*v162);
      sub_1923452B4(*(uint64_t **)(OutputPorts + 16), v240, &v242);
      v162 += 2;
    }
    while (v162 != v163);
    v166 = (void *)v243;
    if (!(void)v243) {
      goto LABEL_286;
    }
    while (1)
    {
      int v167 = 0;
      uint64_t v168 = 0;
      uint64_t v169 = v166[2];
      uint64_t v170 = v166[3];
      memset(v240, 0, 24);
      if (v170)
      {
        v171 = (char *)operator new(4uLL);
        *(_DWORD *)v171 = 0;
        uint64_t v168 = v171 + 4;
        *((void *)&v240[0] + 1) = v171 + 4;
        *(void *)&v240[1] = v171 + 4;
        *(void *)&v240[0] = v171;
        int v167 = v171;
      }
      if ((v170 & 2) != 0) {
        break;
      }
      size_t v172 = v167;
      v173 = v168;
      if ((v170 & 4) == 0) {
        goto LABEL_282;
      }
LABEL_256:
      if (v173 >= v168)
      {
        uint64_t v181 = (v173 - v172) >> 2;
        unint64_t v182 = v181 + 1;
        if ((unint64_t)(v181 + 1) >> 62) {
LABEL_307:
        }
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((v168 - v172) >> 1 > v182) {
          unint64_t v182 = (v168 - v172) >> 1;
        }
        if ((unint64_t)(v168 - v172) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v183 = v182;
        }
        if (v183)
        {
          if (v183 >> 62) {
LABEL_308:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          size_t v184 = operator new(4 * v183);
          v185 = &v184[4 * v181];
          _DWORD *v185 = 2;
          uint64_t v180 = (uint64_t)(v185 + 1);
          if (v173 == v172) {
            goto LABEL_279;
          }
LABEL_271:
          unint64_t v186 = v173 - 4 - v172;
          if (v186 < 0x2C)
          {
            int v187 = v173;
            goto LABEL_278;
          }
          if ((unint64_t)(v172 - v184) < 0x20)
          {
            int v187 = v173;
            goto LABEL_278;
          }
          uint64_t v188 = (v186 >> 2) + 1;
          uint64_t v189 = 4 * (v188 & 0x7FFFFFFFFFFFFFF8);
          int v187 = &v173[-v189];
          v185 = (_DWORD *)((char *)v185 - v189);
          v190 = &v184[4 * v181 - 16];
          int v191 = v173 - 16;
          uint64_t v192 = v188 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v193 = *(_OWORD *)v191;
            *(v190 - 1) = *((_OWORD *)v191 - 1);
            _OWORD *v190 = v193;
            v190 -= 2;
            v191 -= 32;
            v192 -= 8;
          }
          while (v192);
          if (v188 != (v188 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_278:
              int v194 = *((_DWORD *)v187 - 1);
              v187 -= 4;
              *--v185 = v194;
            }
            while (v187 != v172);
          }
        }
        else
        {
          size_t v184 = 0;
          v185 = (_DWORD *)(4 * v181);
          *(_DWORD *)(4 * v181) = 2;
          uint64_t v180 = 4 * v181 + 4;
          if (v173 != v172) {
            goto LABEL_271;
          }
        }
LABEL_279:
        *(void *)&v240[0] = v185;
        *(void *)&v240[1] = &v184[4 * v183];
        if (v172) {
          operator delete(v172);
        }
        goto LABEL_281;
      }
      *(_DWORD *)v173 = 2;
      uint64_t v180 = (uint64_t)(v173 + 4);
LABEL_281:
      *((void *)&v240[0] + 1) = v180;
LABEL_282:
      E5RT::IOPortPriv::SetSupportedBufferTypes(v169, (char **)v240);
      if (*(void *)&v240[0])
      {
        *((void *)&v240[0] + 1) = *(void *)&v240[0];
        operator delete(*(void **)&v240[0]);
      }
      v166 = (void *)*v166;
      if (!v166) {
        goto LABEL_284;
      }
    }
    uint64_t v174 = v168 - v167;
    uint64_t v175 = (v168 - v167) >> 2;
    unint64_t v176 = v175 + 1;
    if ((unint64_t)(v175 + 1) >> 62) {
      goto LABEL_307;
    }
    if (v174 >> 1 > v176) {
      unint64_t v176 = v174 >> 1;
    }
    if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v177 = v176;
    }
    if (v177)
    {
      if (v177 >> 62) {
        goto LABEL_308;
      }
      v178 = (char *)operator new(4 * v177);
      size_t v172 = &v178[4 * v175];
      *(_DWORD *)size_t v172 = 1;
      v173 = v172 + 4;
      if (v168 != v167) {
        goto LABEL_252;
      }
    }
    else
    {
      v178 = 0;
      size_t v172 = (char *)(4 * v175);
      *(_DWORD *)size_t v172 = 1;
      v173 = v172 + 4;
      if (v168 != v167)
      {
LABEL_252:
        unint64_t v179 = (v168 - 4 - v167) & 0xFFFFFFFFFFFFFFFCLL;
        size_t v172 = &v178[v174 - v179 - 4];
        memcpy(v172, &v168[-v179 - 4], v179 + 4);
      }
    }
    uint64_t v168 = &v178[4 * v177];
    *(void *)&v240[0] = v172;
    *(void *)&v240[1] = v168;
    if (v167) {
      operator delete(v167);
    }
    *((void *)&v240[0] + 1) = v173;
    if ((v170 & 4) == 0) {
      goto LABEL_282;
    }
    goto LABEL_256;
  }
LABEL_284:
  uint64_t v195 = (void *)v243;
  if ((void)v243)
  {
    do
    {
      v196 = (void *)*v195;
      operator delete(v195);
      uint64_t v195 = v196;
    }
    while (v196);
  }
LABEL_286:
  int v197 = (void *)v242;
  *(void *)&long long v242 = 0;
  if (v197) {
    operator delete(v197);
  }
  return a1;
}

void sub_1921C5390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t *a24,uint64_t a25,void *a26,uint64_t a27,void **a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,char a58)
{
  E5RT::Status::~Status((E5RT::Status *)(v60 - 144));
  if (*(char *)(v60 - 105) < 0)
  {
    operator delete(*(void **)(v60 - 128));
    if (a37 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a54 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a37 < 0)
  {
    goto LABEL_5;
  }
  if ((a54 & 0x80000000) == 0)
  {
LABEL_6:
    if (!v58)
    {
LABEL_11:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
      if (a45 < 0) {
        operator delete(a40);
      }
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a58);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v60 - 256);
      std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v60 - 208);
      uint64_t v62 = (char *)a26[33];
      if (!v62)
      {
LABEL_20:
        uint64_t v64 = *a15;
        *a15 = 0;
        if (v64) {
          operator delete(v64);
        }
        unint64_t v65 = (char *)a26[28];
        if (!v65)
        {
LABEL_29:
          BOOL v67 = *a16;
          *a16 = 0;
          if (v67) {
            operator delete(v67);
          }
          long long v68 = (char *)a26[23];
          if (!v68)
          {
LABEL_38:
            uint64_t v70 = *a14;
            *a14 = 0;
            if (v70)
            {
              operator delete(v70);
              uint64_t v71 = (void *)a26[16];
              if (!v71)
              {
LABEL_40:
                uint64_t v72 = *a24;
                *a24 = 0;
                if (!v72) {
                  goto LABEL_41;
                }
LABEL_46:
                (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
                long long v73 = (std::__shared_weak_count *)a26[12];
                if (!v73) {
                  goto LABEL_49;
                }
                goto LABEL_47;
              }
            }
            else
            {
              uint64_t v71 = (void *)a26[16];
              if (!v71) {
                goto LABEL_40;
              }
            }
            uint64_t v74 = (void *)a26[17];
            if (v74 == v71)
            {
              a26[17] = v71;
              operator delete(v71);
              uint64_t v72 = *a24;
              *a24 = 0;
              if (v72) {
                goto LABEL_46;
              }
            }
            else
            {
              do
              {
                uint64_t v80 = *--v74;
                uint64_t v79 = v80;
                *uint64_t v74 = 0;
                if (v80) {
                  (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
                }
              }
              while (v74 != v71);
              v82 = (void *)a26[16];
              a26[17] = v71;
              operator delete(v82);
              uint64_t v72 = *a24;
              *a24 = 0;
              if (v72) {
                goto LABEL_46;
              }
            }
LABEL_41:
            long long v73 = (std::__shared_weak_count *)a26[12];
            if (!v73) {
              goto LABEL_49;
            }
LABEL_47:
            if (!atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
LABEL_49:
            int v75 = (std::__shared_weak_count *)a26[10];
            if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
            uint64_t v76 = (char *)*a17;
            if (*a17)
            {
              uint64_t v77 = (char *)a26[7];
              uint64_t v78 = *a17;
              if (v77 != v76)
              {
                do
                {
                  v81 = (std::__shared_weak_count *)*((void *)v77 - 1);
                  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                  v77 -= 16;
                }
                while (v77 != v76);
                uint64_t v78 = *a17;
              }
              a26[7] = v76;
              operator delete(v78);
            }
            int v83 = (void **)a26[3];
            if (v83)
            {
              do
              {
                while (1)
                {
                  uint64_t v84 = (void **)*v83;
                  uint64_t v85 = (std::__shared_weak_count *)v83[6];
                  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v85);
                  }
                  if (*((char *)v83 + 39) < 0) {
                    break;
                  }
                  operator delete(v83);
                  int v83 = v84;
                  if (!v84) {
                    goto LABEL_74;
                  }
                }
                operator delete(v83[2]);
                operator delete(v83);
                int v83 = v84;
              }
              while (v84);
            }
LABEL_74:
            uint64_t v86 = *a28;
            *a28 = 0;
            if (!v86) {
              _Unwind_Resume(a1);
            }
            operator delete(v86);
            _Unwind_Resume(a1);
          }
          while (1)
          {
            long long v69 = *(char **)v68;
            if (v68[63] < 0)
            {
              operator delete(*((void **)v68 + 5));
              if ((v68[39] & 0x80000000) == 0) {
                goto LABEL_34;
              }
LABEL_37:
              operator delete(*((void **)v68 + 2));
              operator delete(v68);
              long long v68 = v69;
              if (!v69) {
                goto LABEL_38;
              }
            }
            else
            {
              if (v68[39] < 0) {
                goto LABEL_37;
              }
LABEL_34:
              operator delete(v68);
              long long v68 = v69;
              if (!v69) {
                goto LABEL_38;
              }
            }
          }
        }
        while (1)
        {
          uint64_t v66 = *(char **)v65;
          if (v65[63] < 0)
          {
            operator delete(*((void **)v65 + 5));
            if ((v65[39] & 0x80000000) == 0) {
              goto LABEL_25;
            }
LABEL_28:
            operator delete(*((void **)v65 + 2));
            operator delete(v65);
            unint64_t v65 = v66;
            if (!v66) {
              goto LABEL_29;
            }
          }
          else
          {
            if (v65[39] < 0) {
              goto LABEL_28;
            }
LABEL_25:
            operator delete(v65);
            unint64_t v65 = v66;
            if (!v66) {
              goto LABEL_29;
            }
          }
        }
      }
      while (1)
      {
        uint64_t v63 = *(char **)v62;
        if (v62[63] < 0)
        {
          operator delete(*((void **)v62 + 5));
          if ((v62[39] & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_19:
          operator delete(*((void **)v62 + 2));
          operator delete(v62);
          uint64_t v62 = v63;
          if (!v63) {
            goto LABEL_20;
          }
        }
        else
        {
          if (v62[39] < 0) {
            goto LABEL_19;
          }
LABEL_16:
          operator delete(v62);
          uint64_t v62 = v63;
          if (!v63) {
            goto LABEL_20;
          }
        }
      }
    }
LABEL_10:
    __cxa_free_exception(v59);
    goto LABEL_11;
  }
LABEL_9:
  operator delete(a49);
  if ((v58 & 1) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

void *std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  id v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    id v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    unint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    id v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    unint64_t v19 = v9;
    long long __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      size_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            size_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          size_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  BOOL v25 = (char *)operator new(0x38uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  *(void *)BOOL v25 = 0;
  *((void *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      unint64_t v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      uint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  unint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  size_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1921C6B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921C6B34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char **E5RT::IOPortPriv::SetSupportedBufferTypes(uint64_t a1, char **a2)
{
  return E5RT::IOPortImpl::SetSupportedBufferTypes(*(void *)(a1 + 8), a2);
}

char **E5RT::IOPortImpl::SetSupportedBufferTypes(uint64_t a1, char **a2)
{
  uint64_t result = (char **)(a1 + 104);
  if (result != a2) {
    return (char **)std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  }
  return result;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetInputs(uint64_t a1)
{
  return a1 + 64;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOutputs(uint64_t a1)
{
  return a1 + 168;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetInOuts(uint64_t a1)
{
  return a1 + 272;
}

void **E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateDynamicCallables(void **result, const void ***a2)
{
  unint64_t v2 = (unint64_t)result[24];
  if (v2)
  {
    unint64_t v3 = result;
    uint64_t v15 = 0;
    *(void *)uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v4 = *a2;
    int v5 = a2[1];
    if (*a2 == v5)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      do
      {
        if ((*(unsigned int (**)(void))(*(void *)*v4 + 16))() == 13)
        {
          E5RT::E5Operation::GetOperationAttributes<JitCallOpT>(*v4, v14);
          std::vector<std::string>::push_back[abi:ne180100]((uint64_t)&v15, v14[0] + 24);
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        else if ((*(unsigned int (**)(void))(*(void *)*v4 + 16))() == 12)
        {
          E5RT::E5Operation::GetOperationAttributes<BnnsCpuInferenceOpT>(*v4, v14);
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v15, *(uint64_t *)v16, *(std::string **)(v14[0] + 48), *(std::string **)(v14[0] + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14[0] + 56) - *(void *)(v14[0] + 48)) >> 3));
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        else if ((*(unsigned int (**)(void))(*(void *)*v4 + 16))() == 8)
        {
          E5RT::E5Operation::GetOperationAttributes<MpsGraphInferenceOpT>(*v4, v14);
          std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v15, *(uint64_t *)v16, *(std::string **)(v14[0] + 64), *(std::string **)(v14[0] + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v14[0] + 72) - *(void *)(v14[0] + 64)) >> 3));
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)v14);
        }
        v4 += 2;
      }
      while (v4 != v5);
      unint64_t v2 = (unint64_t)v3[24];
      uint64_t v7 = v15;
      uint64_t v6 = *(void *)v16;
    }
    if (v2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3))
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v14, "ValidateDynamicCallables");
      std::string::basic_string[abi:ne180100]<0>(v12, "# of dynamic callables is greater than # of callable functions across all operations.");
      E5RT::Status::Status(v13, 1, v12);
      E5RT::E5RTError::E5RTError(exception, v14, v13);
    }
    unint64_t v8 = v3 + 23;
    while (1)
    {
      unint64_t v8 = (void **)*v8;
      if (!v8) {
        break;
      }
      uint64_t v9 = std::find[abi:ne180100]<std::__wrap_iter<std::string const*>,std::string>(v15, *(uint64_t *)v16, (unsigned __int8 **)v8 + 2);
      if (*(void *)v16 == v9)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is not found as a callable function across all operations.", (const void **)v8 + 2, v14);
        unint64_t v10 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v12, "ValidateDynamicCallables");
        E5RT::Status::Status(v13, 1, v14);
        E5RT::E5RTError::E5RTError(v10, v12, v13);
      }
    }
    return std::vector<std::string>::~vector[abi:ne180100]((void **)&v15);
  }
  return result;
}

void sub_1921C6E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1921C6EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
}

void sub_1921C6F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5FunctionImpl::GetIntermediateBufferSize(E5RT::E5FunctionImpl *this)
{
  return *((void *)this + 2);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpSupportedBufferTypes(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 232;
}

uint64_t espresso_network_declare_output(EspressoLight::espresso_plan *a1, int a2, char *a3)
{
  uint64_t v6 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    EspressoLight::espresso_plan::declare_output(a1, a2, a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294967290;
  }
  return v7;
}

void Espresso::load_network_layers_post_dispatch(uint64_t *a1, uint64_t *a2, void *a3, uint64_t **a4, int a5, uint64_t a6, unsigned int a7, char a8, std::string::size_type *a9)
{
  void (***v14)(long long *__return_ptr);
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  std::__shared_weak_count *v20;
  __n128 v21;
  int v22;
  char *v23;
  std::string *v24;
  int data;
  int v26;
  BOOL v27;
  double v28;
  unsigned char *v29;
  NSString *v30;
  Class v31;
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  long long v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  long long v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unsigned __int8 *i;
  std::string::size_type v58;
  int v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string *v63;
  int64_t v65;
  std::string *v70;
  uint64_t v74;
  const void *v75;
  void *v76;
  std::__shared_weak_count *v77;
  uint64_t v79;
  const void *v80;
  void *v81;
  std::__shared_weak_count *v83;
  int v86;
  int v87;
  std::string::size_type v88;
  uint64_t v89;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  BOOL v95;
  BOOL v96;
  BOOL v99;
  BOOL v100;
  uint64_t v104;
  uint64_t v105;
  uint64_t (***v106)(void);
  uint64_t v108;
  const void *v109;
  void **v110;
  long long *v111;
  long long *v112;
  char *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  std::__shared_weak_count *v116;
  std::string::size_type v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  long long *v121;
  long long *v122;
  uint64_t v123;
  const void *v124;
  char *v125;
  std::__shared_weak_count *v126;
  int v127;
  int v128;
  uint64_t v129;
  long long v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  uint64_t v134;
  const void *v135;
  void *v136;
  std::__shared_weak_count *v137;
  int v138;
  int v139;
  std::__shared_weak_count *v140;
  std::string::size_type v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  std::__shared_weak_count *shared_owners;
  int v149;
  int v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  int v154;
  int v155;
  std::__shared_weak_count *v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  const void *v159;
  void *v160;
  uint64_t v161;
  long long *v162;
  long long *v163;
  uint64_t v164;
  long long v165;
  std::string *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  std::__shared_weak_count *v175;
  uint64_t v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  std::string::size_type v179;
  std::__shared_weak_count *v180;
  long long v181;
  std::__shared_weak_count *v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  void (***v186)(unsigned char *__return_ptr);
  std::__shared_weak_count *v187;
  std::__shared_weak_count *v188;
  long long v189;
  std::__shared_weak_count *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  int v195;
  int v196;
  std::__shared_weak_count *v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  uint64_t *v201;
  int v202;
  int v203;
  uint64_t k;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  unsigned char *v210;
  const void *v211;
  int v212;
  const std::string::value_type *v213;
  std::string::size_type v214;
  std::string *v215;
  std::string::size_type v216;
  char v217;
  uint64_t v218;
  std::string::size_type v219;
  uint64_t v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  int v223;
  int v224;
  Espresso *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  unsigned __int8 **v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  size_t v236;
  uint64_t v237;
  const void **v238;
  unsigned __int8 *v239;
  NSObject *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  unint64_t v244;
  uint64_t v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  std::__shared_weak_count *v257;
  uint64_t v258;
  std::vector<std::string> *v259;
  uint64_t v260;
  std::vector<std::string> *v261;
  long long v262;
  std::__shared_weak_count *v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  const void *v268;
  uint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t j;
  std::__shared_weak_count *v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  int v285;
  BOOL v286;
  uint64_t v287;
  BOOL v288;
  void *v289;
  atomic_ullong *v290;
  int v291;
  uint64_t v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  Espresso::net *v299;
  uint64_t v300;
  void *v301;
  atomic_ullong *v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  Espresso::net *v306;
  char v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  std::__shared_weak_count *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  std::__shared_weak_count *v315;
  uint64_t v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  uint64_t *v319;
  uint64_t *v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  void **v323;
  char *v324;
  uint64_t **v325;
  std::string::size_type v326;
  void *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  std::runtime_error *v332;
  std::runtime_error *exception;
  std::string *v334;
  long long v335;
  std::string *v336;
  long long v337;
  std::string *v338;
  std::string::size_type size;
  std::string *v340;
  long long v341;
  std::runtime_error *v342;
  uint64_t *v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  std::__shared_weak_count *v346;
  std::__shared_weak_count *v347;
  uint64_t v349;
  uint64_t v350;
  void *v352;
  int v353;
  void *context;
  long long v357;
  std::__shared_weak_count *v358;
  uint64_t *v359;
  uint64_t v360[2];
  uint64_t v361;
  std::__shared_weak_count *v362;
  Espresso::net *v363[2];
  uint64_t v364[2];
  Espresso::net *v365[2];
  void v366[2];
  uint64_t *v367[2];
  uint64_t v368;
  std::__shared_weak_count *v369;
  void v370[2];
  uint64_t v371[2];
  uint64_t v372;
  std::__shared_weak_count *v373;
  void v374[2];
  void v375[2];
  void v376[2];
  void v377[2];
  void v378[2];
  void v379[2];
  uint64_t v380[2];
  uint64_t v381;
  std::__shared_weak_count *v382;
  void v383[2];
  void v384[2];
  void v385[2];
  uint64_t v386[2];
  void v387[2];
  uint64_t *v388[2];
  int v389;
  int v390;
  void v391[2];
  uint64_t v392[2];
  uint64_t v393;
  std::__shared_weak_count *v394;
  void v395[2];
  void v396[2];
  void v397[2];
  long long v398;
  long long v399;
  void v400[2];
  void v401[2];
  void v402[2];
  uint64_t v403[2];
  long long v404;
  uint64_t v405;
  std::__shared_weak_count *v406;
  void v407[2];
  uint64_t v408;
  std::__shared_weak_count *v409;
  void v410[2];
  char *v411;
  std::__shared_weak_count *v412;
  std::string v413;
  std::string *v414;
  std::string v415;
  std::__shared_weak_count *v416;
  long long v417;
  std::string::size_type v418;
  std::__shared_weak_count *v419;
  uint64_t v420;
  std::__shared_weak_count *v421;
  std::string v422;
  std::string v423;
  long long v424;
  unsigned int v425;
  std::string v426;
  std::string __str;
  std::string v428;
  std::string v429;
  unint64_t v430;
  long long v431;
  std::string::size_type v432;
  std::__shared_weak_count *v433;
  std::string v434;
  unsigned char v435[40];
  uint64_t v436;

  uint8x8_t v12 = a1;
  v436 = *MEMORY[0x1E4F143B8];
  v349 = *a2;
  uint64_t v13 = *a1;
  size_t v14 = *(void (****)(long long *__return_ptr))(*a1 + 16);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  v432 = (std::string::size_type)v14;
  v433 = v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *v12;
  }
  v350 = *(void *)(v13 + 712);
  (**v14)(&v431);
  v430 = 0;
  memset(&v429, 0, sizeof(v429));
  uint64_t v16 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v435, "layers");
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v16 + 128))(&v415, v16, v435);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate((uint64_t *)&v429);
  v429 = v415;
  memset(&v415, 0, sizeof(v415));
  v413.__r_.__value_.__r.__words[0] = (std::string::size_type)&v415;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v413);
  if ((v435[23] & 0x80000000) != 0) {
    operator delete(*(void **)v435);
  }
  v343 = a2;
  v344 = a6;
  v352 = a3;
  if (v429.__r_.__value_.__l.__size_ != v429.__r_.__value_.__r.__words[0])
  {
    uint64_t v17 = 0;
    v353 = *(unsigned __int8 *)(v432 + 56);
    v359 = v12;
    do
    {
      context = (void *)MEMORY[0x192FF2020]();
      uint64_t v18 = v17;
      if (a5) {
        uint64_t v18 = *(int *)(*(void *)(v350 + 24) + 4 * v17);
      }
      uint64_t v19 = *(_OWORD *)(v429.__r_.__value_.__r.__words[0] + 16 * v18);
      v357 = v19;
      uint64_t v20 = *(std::__shared_weak_count **)(v429.__r_.__value_.__r.__words[0] + 16 * v18 + 8);
      if (*((void *)&v19 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      memset(&v428, 0, sizeof(v428));
      memset(&__str, 0, sizeof(__str));
      memset(&v426, 0, sizeof(v426));
      v358 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      std::string::basic_string[abi:ne180100]<0>(v435, "type");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (uint64_t)&v428);
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0) {
        operator delete(*(void **)v435);
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "name");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (uint64_t)&__str);
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0) {
        operator delete(*(void **)v435);
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "debug_info");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      v21.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (uint64_t)&v426);
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0) {
        operator delete(*(void **)v435);
      }
      v425 = a7;
      uint64_t v22 = (***(uint64_t (****)(void, __n128))(v432 + 8))(*(void *)(v432 + 8), v21);
      int v23 = (char *)operator new(0xF8uLL);
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      *(void *)int v23 = &unk_1EE389DF0;
      *((void *)v23 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v23 + 56) = 0u;
      *(_OWORD *)(v23 + 72) = 0u;
      *(_OWORD *)(v23 + 88) = 0u;
      *(_OWORD *)(v23 + 104) = 0u;
      *(_OWORD *)(v23 + 120) = 0u;
      *(_OWORD *)(v23 + 136) = 0u;
      *(_OWORD *)(v23 + 152) = 0u;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 161) = 0u;
      *((_OWORD *)v23 + 13) = 0u;
      *((_OWORD *)v23 + 14) = 0u;
      *((void *)v23 + 30) = 0;
      *(void *)&v424 = v23 + 24;
      *((void *)&v424 + 1) = v23;
      std::string::operator=((std::string *)(v23 + 40), &__str);
      std::string::operator=((std::string *)(v424 + 40), &v428);
      std::string::operator=((std::string *)(v424 + 200), &v426);
      if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v428.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_53;
        }
        uint64_t v24 = (std::string *)v428.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_53;
        }
        uint64_t v24 = &v428;
      }
      data = (int)v24->__r_.__value_.__l.__data_;
      v26 = v24->__r_.__value_.__s.__data_[4];
      float v27 = data == 1667854946 && v26 == 107;
      if (v27)
      {
        memset(v435, 0, 24);
        std::string::basic_string[abi:ne180100]<0>(&v413, "class_name");
        Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v413, &v415);
        float v28 = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (uint64_t)v435);
        if (SBYTE7(v417) < 0) {
          operator delete((void *)v415.__r_.__value_.__r.__words[2]);
        }
        if (v415.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v413.__r_.__value_.__l.__data_);
        }
        if (v435[23] >= 0) {
          unint64_t v29 = v435;
        }
        else {
          unint64_t v29 = *(unsigned char **)v435;
        }
        objc_msgSend(NSString, "stringWithUTF8String:", v29, v28);
        uint64_t v30 = (NSString *)objc_claimAutoreleasedReturnValue();
        BOOL v31 = NSClassFromString(v30);

        if (v31)
        {
          uint64_t v20 = v358;
          +[EspressoBrickRegistry registerBrickClass:v31];
        }
        else
        {
          uint64_t v20 = v358;
          if (v22 != 10008)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v334 = std::string::append(&v423, ".");
            v335 = *(_OWORD *)&v334->__r_.__value_.__l.__data_;
            v434.__r_.__value_.__r.__words[2] = v334->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v335;
            v334->__r_.__value_.__l.__size_ = 0;
            v334->__r_.__value_.__r.__words[2] = 0;
            v334->__r_.__value_.__r.__words[0] = 0;
            v336 = std::string::append(&v434, " platform=");
            v337 = *(_OWORD *)&v336->__r_.__value_.__l.__data_;
            v413.__r_.__value_.__r.__words[2] = v336->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v413.__r_.__value_.__l.__data_ = v337;
            v336->__r_.__value_.__l.__size_ = 0;
            v336->__r_.__value_.__r.__words[2] = 0;
            v336->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v422, v22);
            if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v338 = &v422;
            }
            else {
              v338 = (std::string *)v422.__r_.__value_.__r.__words[0];
            }
            if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v422.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v422.__r_.__value_.__l.__size_;
            }
            v340 = std::string::append(&v413, (const std::string::value_type *)v338, size);
            v341 = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
            v415.__r_.__value_.__r.__words[2] = v340->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v415.__r_.__value_.__l.__data_ = v341;
            v340->__r_.__value_.__l.__size_ = 0;
            v340->__r_.__value_.__r.__words[2] = 0;
            v340->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &v415);
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        if ((v435[23] & 0x80000000) != 0) {
          operator delete(*(void **)v435);
        }
      }
LABEL_53:
      if (v353 && *(_DWORD *)(*(void *)(*(void *)(*v359 + 712) + 48) + 4 * v17))
      {
        unint64_t v32 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
        Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(v435, (uint64_t)v32, &v428);
        unint64_t v33 = *(void *)v435;
        v34 = *(std::__shared_weak_count **)(*v352 + 80);
        v420 = *(void *)(*v352 + 72);
        v421 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(std::string *__return_ptr))(*(void *)v33 + 16))(&v415);
        int8x8_t v35 = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
        *(_OWORD *)&v415.__r_.__value_.__l.__data_ = 0uLL;
        unint64_t v36 = *(std::__shared_weak_count **)(v424 + 72);
        *(_OWORD *)(v424 + 64) = v35;
        if (v36)
        {
          nitro::nitro_function::nitro_function(v36);
          if (v415.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
          }
        }
        if (v421) {
          nitro::nitro_function::nitro_function(v421);
        }
        if (*(void *)&v435[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
        }
        uint8x8_t v37 = *v352;
        uint64_t v38 = v424;
        *(_DWORD *)(v424 + 12) = *(_DWORD *)(*v352 + 20);
        unint64_t v39 = *(_DWORD *)(v37 + 16);
      }
      else
      {
        unint64_t v40 = **a4;
        uint64_t v38 = v424;
        if (v17 < 0x6DB6DB6DB6DB6DB7 * (((*a4)[1] - v40) >> 5))
        {
          uint64_t v41 = v40 + 224 * v17;
          char v43 = *(void *)(v41 + 88);
          unint64_t v42 = *(void *)(v41 + 96);
          if (v42) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v44 = *(std::__shared_weak_count **)(v38 + 72);
          *(void *)(v38 + 64) = v43;
          *(void *)(v38 + 72) = v42;
          if (v44)
          {
            nitro::nitro_function::nitro_function(v44);
            uint64_t v38 = v424;
          }
        }
        uint64_t v45 = a7;
        if (!*(void *)(v38 + 64))
        {
          uint64_t v46 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
          Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(v435, (uint64_t)v46, &v428);
          unint64_t v47 = *(void *)v435;
          v418 = v432;
          v419 = v433;
          if (v433) {
            atomic_fetch_add_explicit(&v433->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v47 + 16))(&v415);
          uint64_t v48 = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
          *(_OWORD *)&v415.__r_.__value_.__l.__data_ = 0uLL;
          uint64_t v49 = *(std::__shared_weak_count **)(v424 + 72);
          *(_OWORD *)(v424 + 64) = v48;
          if (v49)
          {
            nitro::nitro_function::nitro_function(v49);
            if (v415.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
            }
          }
          if (v419) {
            nitro::nitro_function::nitro_function(v419);
          }
          if (*(void *)&v435[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
          }
          uint64_t v38 = v424;
          uint64_t v45 = v425;
        }
        *(_DWORD *)(v38 + 12) = v45;
        unint64_t v39 = v22;
      }
      *(_DWORD *)(v38 + 8) = v39;
      std::string::basic_string[abi:ne180100]<0>(&v415, "hint_fallback_from_metal");
      if (!(*(unsigned int (**)(void, std::string *))(*(void *)v357 + 24))(v357, &v415))
      {
        if ((SHIBYTE(v415.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_96;
        }
        uint64_t v51 = (void *)v415.__r_.__value_.__r.__words[0];
        goto LABEL_95;
      }
      uint64_t v50 = *(void *)(v424 + 64);
      if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v415.__r_.__value_.__l.__data_);
        if (!v50) {
          goto LABEL_96;
        }
      }
      else if (!v50)
      {
        goto LABEL_96;
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "hint_fallback_from_metal");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (_DWORD *)(*(void *)(v424 + 64) + 136));
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0)
      {
        uint64_t v51 = *(void **)v435;
LABEL_95:
        operator delete(v51);
      }
LABEL_96:
      std::string::basic_string[abi:ne180100]<0>(&v415, "hint_fallback_from_cpu");
      if (!(*(unsigned int (**)(void, std::string *))(*(void *)v357 + 24))(v357, &v415))
      {
        if ((SHIBYTE(v415.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_110;
        }
        unint64_t v53 = (void *)v415.__r_.__value_.__r.__words[0];
        goto LABEL_109;
      }
      uint64_t v52 = *(void *)(v424 + 64);
      if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v415.__r_.__value_.__l.__data_);
        if (!v52) {
          goto LABEL_110;
        }
      }
      else if (!v52)
      {
        goto LABEL_110;
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "hint_fallback_from_cpu");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (_DWORD *)(*(void *)(v424 + 64) + 144));
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0)
      {
        unint64_t v53 = *(void **)v435;
LABEL_109:
        operator delete(v53);
      }
LABEL_110:
      std::string::basic_string[abi:ne180100]<0>(&v415, "hint_fallback_from_ane");
      if (!(*(unsigned int (**)(void, std::string *))(*(void *)v357 + 24))(v357, &v415))
      {
        if ((SHIBYTE(v415.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_124;
        }
        uint64_t v55 = (void *)v415.__r_.__value_.__r.__words[0];
        goto LABEL_123;
      }
      id v54 = *(void *)(v424 + 64);
      if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v415.__r_.__value_.__l.__data_);
        if (!v54) {
          goto LABEL_124;
        }
      }
      else if (!v54)
      {
        goto LABEL_124;
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "hint_fallback_from_ane");
      Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)v435, &v415);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v415, (_DWORD *)(*(void *)(v424 + 64) + 140));
      if (SBYTE7(v417) < 0) {
        operator delete((void *)v415.__r_.__value_.__r.__words[2]);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if ((v435[23] & 0x80000000) != 0)
      {
        uint64_t v55 = *(void **)v435;
LABEL_123:
        operator delete(v55);
      }
LABEL_124:
      std::string::basic_string[abi:ne180100]<0>(&v415, "attributes");
      if ((*(unsigned int (**)(void, std::string *))(*(void *)v357 + 24))(v357, &v415))
      {
        uint64_t v56 = *(void *)(v424 + 64);
        if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v415.__r_.__value_.__l.__data_);
          if (!v56) {
            goto LABEL_139;
          }
        }
        else if (!v56)
        {
          goto LABEL_139;
        }
        memset(&v415, 0, sizeof(v415));
        std::string::basic_string[abi:ne180100]<0>(v435, "attributes");
        (*(void (**)(std::string *__return_ptr, void, unsigned char *))(*(void *)v357 + 120))(&v413, v357, v435);
        if ((v435[23] & 0x80000000) != 0) {
          operator delete(*(void **)v435);
        }
        (*(void (**)(std::string::size_type, std::string *))(*(void *)v413.__r_.__value_.__l.__data_ + 32))(v413.__r_.__value_.__r.__words[0], &v415);
        int v58 = v415.__r_.__value_.__l.__size_;
        for (i = (unsigned __int8 *)v415.__r_.__value_.__r.__words[0]; i != (unsigned __int8 *)v58; i += 24)
        {
          int v59 = (*(uint64_t (**)(std::string::size_type, unsigned __int8 *))(*(void *)v413.__r_.__value_.__l.__data_
                                                                                     + 40))(v413.__r_.__value_.__r.__words[0], i);
          uint64_t v60 = *(void *)(v424 + 64) + 240;
          v434.__r_.__value_.__r.__words[0] = (std::string::size_type)i;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v60, i, (uint64_t)&std::piecewise_construct, (long long **)&v434)+ 10) = v59;
        }
        if (v413.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v413.__r_.__value_.__l.__size_);
        }
        *(void *)v435 = &v415;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
      }
      else if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v415.__r_.__value_.__l.__data_);
      }
LABEL_139:
      v422.__r_.__value_.__r.__words[0] = v357;
      v422.__r_.__value_.__l.__size_ = (std::string::size_type)a9;
      uint64_t v61 = a9[1];
      v415.__r_.__value_.__r.__words[0] = *a9;
      v415.__r_.__value_.__l.__size_ = v61;
      if (v61) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v62 = v432;
      v415.__r_.__value_.__r.__words[2] = v432;
      v416 = v433;
      if (v433) {
        atomic_fetch_add_explicit(&v433->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v417 = v431;
      if (*((void *)&v431 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v431 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v413.__r_.__value_.__r.__words[0] = v357;
      v413.__r_.__value_.__l.__size_ = (std::string::size_type)&v430;
      v413.__r_.__value_.__r.__words[2] = (std::string::size_type)&v415;
      v414 = &v422;
      if (*a9)
      {
        if ((*((unsigned char *)&v428.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          unint64_t v65 = v428.__r_.__value_.__l.__size_;
          switch(v428.__r_.__value_.__l.__size_)
          {
            case 6uLL:
              if (*(_DWORD *)v428.__r_.__value_.__l.__data_ != 1986948963
                || *(_WORD *)(v428.__r_.__value_.__r.__words[0] + 4) != 25651)
              {
                goto LABEL_650;
              }
              goto LABEL_205;
            case 8uLL:
              uint64_t v63 = (std::string *)v428.__r_.__value_.__r.__words[0];
LABEL_204:
              if (v63->__r_.__value_.__r.__words[0] != 0x6433766E6F636564) {
                goto LABEL_210;
              }
LABEL_205:
              if ((a8 & 1) == 0)
              {
                uint64_t v79 = v424;
                uint64_t v80 = *(const void **)(v424 + 64);
                if (v80)
                {
                  if (v81)
                  {
                    uint64_t v77 = *(std::__shared_weak_count **)(v79 + 72);
                    if (v77) {
                      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    uint64_t v77 = 0;
                  }
                }
                else
                {
                  uint64_t v77 = 0;
                  v81 = 0;
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights");
                std::string::basic_string[abi:ne180100]<0>(&v434, "W");
                v385[0] = v81;
                v385[1] = v77;
                if (v77) {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v385);
                if (v77) {
                  nitro::nitro_function::nitro_function(v77);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v435);
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights_f16");
                std::string::basic_string[abi:ne180100]<0>(&v434, "W_f16");
                v384[0] = v81;
                v384[1] = v77;
                if (v77) {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v384);
                if (v77) {
                  nitro::nitro_function::nitro_function(v77);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v435);
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases");
                v173 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                uint64_t v174 = v173;
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (!v174) {
                    goto LABEL_578;
                  }
                }
                else if (!v173)
                {
                  goto LABEL_578;
                }
                (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v81 + 432))(v435, v81);
                uint64_t v175 = (std::__shared_weak_count *)a9[1];
                v383[0] = *a9;
                v383[1] = v175;
                if (v175) {
                  atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if (v175) {
                  nitro::nitro_function::nitro_function(v175);
                }
                unint64_t v176 = v408;
                unint64_t v177 = v409;
                v381 = v408;
                v382 = v409;
                if (v409) {
                  atomic_fetch_add_explicit(&v409->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(void *, uint64_t *))(*(void *)v81 + 392))(v81, &v381);
                if (v382) {
                  nitro::nitro_function::nitro_function(v382);
                }
                v430 += 4 * *(int *)(v176 + 8);
                v380[0] = (uint64_t)v81;
                v380[1] = (uint64_t)v77;
                if (v77) {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
                std::string::basic_string[abi:ne180100]<0>(&v423, "b");
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v422, v380, (uint64_t)&v434, (uint64_t)&v423);
                if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v423.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if (v77) {
                  nitro::nitro_function::nitro_function(v77);
                }
                if (v177) {
                  nitro::nitro_function::nitro_function(v177);
                }
LABEL_578:
                std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases_f16");
                std::string::basic_string[abi:ne180100]<0>(&v434, "b_f16");
                v379[0] = v81;
                v379[1] = v77;
                if (v77) {
                  atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v379);
LABEL_642:
                if (v77) {
                  nitro::nitro_function::nitro_function(v77);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) == 0)
                {
LABEL_647:
                  if (!v77) {
                    goto LABEL_650;
                  }
LABEL_648:
                  uint64_t v132 = v77;
LABEL_649:
                  nitro::nitro_function::nitro_function(v132);
                  goto LABEL_650;
                }
                operator delete(*(void **)v435);
                if (v77) {
                  goto LABEL_648;
                }
                goto LABEL_650;
              }
LABEL_210:
              if ((*((unsigned char *)&v428.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (HIBYTE(v428.__r_.__value_.__r.__words[2]) == 3) {
                  goto LABEL_272;
                }
                if (HIBYTE(v428.__r_.__value_.__r.__words[2]) == 5) {
                  goto LABEL_243;
                }
                if (HIBYTE(v428.__r_.__value_.__r.__words[2]) != 16) {
                  goto LABEL_650;
                }
                goto LABEL_292;
              }
              unint64_t v65 = v428.__r_.__value_.__l.__size_;
              if (v428.__r_.__value_.__l.__size_ != 13) {
                goto LABEL_245;
              }
              uint64_t v70 = (std::string *)v428.__r_.__value_.__r.__words[0];
              break;
            case 9uLL:
              if (*(void *)v428.__r_.__value_.__l.__data_ != 0x726F6E6863746162
                || *(unsigned char *)(v428.__r_.__value_.__r.__words[0] + 8) != 109)
              {
                goto LABEL_650;
              }
LABEL_193:
              uint64_t v74 = v424;
              int v75 = *(const void **)(v424 + 64);
              if (v75)
              {
                if (v76)
                {
                  uint64_t v77 = *(std::__shared_weak_count **)(v74 + 72);
                  if (v77) {
                    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v77 = 0;
                }
              }
              else
              {
                uint64_t v77 = 0;
                uint64_t v76 = 0;
              }
              std::string::basic_string[abi:ne180100]<0>(v435, "blob_batchnorm_params");
              uint64_t v195 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
              v196 = v195;
              if ((v435[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v435);
                if (!v196) {
                  goto LABEL_639;
                }
              }
              else if (!v195)
              {
                goto LABEL_639;
              }
              (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v76 + 400))(v435, v76);
              int v197 = (std::__shared_weak_count *)a9[1];
              v395[0] = *a9;
              v395[1] = v197;
              if (v197) {
                atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v434, "blob_batchnorm_params");
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v434.__r_.__value_.__l.__data_);
              }
              if (v197) {
                nitro::nitro_function::nitro_function(v197);
              }
              v198 = v408;
              v199 = v409;
              v393 = v408;
              v394 = v409;
              if (v409) {
                atomic_fetch_add_explicit(&v409->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *, uint64_t *))(*(void *)v76 + 392))(v76, &v393);
              if (v394) {
                nitro::nitro_function::nitro_function(v394);
              }
              v430 += 4 * *(int *)(v198 + 8);
              v392[0] = (uint64_t)v76;
              v392[1] = (uint64_t)v77;
              if (v77) {
                atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&v434, "blob_batchnorm_params");
              std::string::basic_string[abi:ne180100]<0>(&v423, "blob_batchnorm_params");
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v422, v392, (uint64_t)&v434, (uint64_t)&v423);
              if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v423.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v434.__r_.__value_.__l.__data_);
              }
              if (v77) {
                nitro::nitro_function::nitro_function(v77);
              }
              if (v199) {
                nitro::nitro_function::nitro_function(v199);
              }
LABEL_639:
              std::string::basic_string[abi:ne180100]<0>(v435, "blob_batchnorm_params_f16");
              std::string::basic_string[abi:ne180100]<0>(&v434, "batchnorm_params_f16");
              v391[0] = v76;
              v391[1] = v77;
              if (v77) {
                atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v391);
              goto LABEL_642;
            case 0xBuLL:
              if (*(void *)v428.__r_.__value_.__l.__data_ != 0x74756C6F766E6F63
                || *(void *)(v428.__r_.__value_.__r.__words[0] + 3) != 0x6E6F6974756C6F76)
              {
                goto LABEL_650;
              }
              goto LABEL_220;
            case 0xDuLL:
              uint64_t v70 = (std::string *)v428.__r_.__value_.__r.__words[0];
              if (*(void *)v428.__r_.__value_.__l.__data_ == 0x6C6F766E6F636564
                && *(void *)(v428.__r_.__value_.__r.__words[0] + 5) == 0x6E6F6974756C6F76)
              {
                goto LABEL_371;
              }
              if (*(void *)v428.__r_.__value_.__l.__data_ != 0x6E6F635F64616F6CLL
                || *(void *)(v428.__r_.__value_.__r.__words[0] + 5) != 0x746E6174736E6F63)
              {
                break;
              }
              goto LABEL_230;
            case 0x10uLL:
              if (*(void *)v428.__r_.__value_.__l.__data_ != 0x6E6F635F6174656DLL
                || *(void *)(v428.__r_.__value_.__r.__words[0] + 8) != 0x6E6F6974756C6F76)
              {
                goto LABEL_298;
              }
LABEL_220:
              LODWORD(v83) = 0;
              goto LABEL_377;
            default:
              goto LABEL_245;
          }
        }
        else
        {
          uint64_t v63 = &v428;
          switch(*((unsigned char *)&v428.__r_.__value_.__s + 23))
          {
            case 3:
              goto LABEL_272;
            case 4:
            case 7:
            case 0xA:
            case 0xC:
            case 0xE:
            case 0xF:
              goto LABEL_650;
            case 5:
              goto LABEL_249;
            case 6:
              if (LODWORD(v428.__r_.__value_.__l.__data_) != 1986948963
                || WORD2(v428.__r_.__value_.__r.__words[0]) != 25651)
              {
                goto LABEL_650;
              }
              goto LABEL_205;
            case 8:
              goto LABEL_204;
            case 9:
              if (v428.__r_.__value_.__r.__words[0] != 0x726F6E6863746162 || v428.__r_.__value_.__s.__data_[8] != 109) {
                goto LABEL_650;
              }
              goto LABEL_193;
            case 0xB:
              if (v428.__r_.__value_.__r.__words[0] != 0x74756C6F766E6F63
                || *(std::string::size_type *)((char *)v428.__r_.__value_.__r.__words + 3) != 0x6E6F6974756C6F76)
              {
                goto LABEL_650;
              }
              goto LABEL_220;
            case 0xD:
              if (v428.__r_.__value_.__r.__words[0] == 0x6C6F766E6F636564
                && *(std::string::size_type *)((char *)v428.__r_.__value_.__r.__words + 5) == 0x6E6F6974756C6F76)
              {
                uint64_t v70 = &v428;
LABEL_371:
                LODWORD(v83) = v70->__r_.__value_.__r.__words[0] == 0x6C6F766E6F636564
                            && *(std::string::size_type *)((char *)v70->__r_.__value_.__r.__words + 5) == 0x6E6F6974756C6F76;
LABEL_377:
                unint64_t v134 = v424;
                uint64_t v135 = *(const void **)(v424 + 64);
                if (v135)
                {
                  if (v136)
                  {
                    v137 = *(std::__shared_weak_count **)(v134 + 72);
                    if (v137) {
                      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    v137 = 0;
                  }
                }
                else
                {
                  v137 = 0;
                  uint64_t v136 = 0;
                }
                if ((a8 & 1) == 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(v435, "blob_shuffled_weights");
                  v138 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                  long long v139 = v138;
                  if ((v435[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v435);
                    if (!v139) {
                      goto LABEL_405;
                    }
                  }
                  else if (!v138)
                  {
                    goto LABEL_405;
                  }
                  if (v83)
                  {
                    v342 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v342, "Unsupported weights format");
                    __cxa_throw(v342, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  (*(void (**)(std::string *__return_ptr, void *))(*(void *)v136 + 536))(&v434, v136);
                  int v141 = *a9;
                  long long v140 = (std::__shared_weak_count *)a9[1];
                  if (v140) {
                    atomic_fetch_add_explicit(&v140->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v346 = v140;
                  std::string::basic_string[abi:ne180100]<0>(&v423, "blob_shuffled_weights");
                  uint64_t v142 = (*(uint64_t (**)(void, std::string *))(*(void *)v357 + 80))(v357, &v423);
                  uint64_t v143 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)v141 + 80))(v141, v142);
                  if (!v143) {
                    Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
                  }
                  Espresso::layer_nd_shape::shape_vector((std::vector<int> *)v435, (uint64_t)&v434);
                  unint64_t v144 = *(char **)v435;
                  uint64_t v145 = (char *)operator new(0x68uLL);
                  int v83 = (std::__shared_weak_count *)v145;
                  uint64_t v146 = 0;
                  *((void *)v145 + 1) = 0;
                  *((void *)v145 + 2) = 0;
                  *(void *)uint64_t v145 = &unk_1EE389A38;
                  int v147 = v145 + 24;
                  *((void *)v145 + 3) = &unk_1EE36BF50;
                  *(_OWORD *)(v145 + 72) = 0u;
                  *(_OWORD *)(v145 + 88) = 0u;
                  do
                  {
                    *(_DWORD *)&v145[v146 + 32] = *(_DWORD *)&v144[v146];
                    v146 += 4;
                  }
                  while (v146 != 24);
                  *((void *)v145 + 7) = v143;
                  v145[64] = 0;
                  *(void *)&v435[8] = v144;
                  operator delete(v144);
                  if (v346) {
                    atomic_fetch_add_explicit(&v346->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  shared_owners = (std::__shared_weak_count *)v83[3].__shared_owners_;
                  v83[3].__vftable = (std::__shared_weak_count_vtbl *)v141;
                  v83[3].__shared_owners_ = (uint64_t)v346;
                  if (shared_owners) {
                    nitro::nitro_function::nitro_function(shared_owners);
                  }
                  uint64_t v20 = v358;
                  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v423.__r_.__value_.__l.__data_);
                  }
                  if (v346) {
                    nitro::nitro_function::nitro_function(v346);
                  }
                  v411 = v147;
                  v412 = v83;
                  atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
                  (*(void (**)(void *, char **))(*(void *)v136 + 408))(v136, &v411);
                  if (v412) {
                    nitro::nitro_function::nitro_function(v412);
                  }
                  nitro::nitro_function::nitro_function(v83);
                  LOBYTE(v83) = 0;
LABEL_405:
                  std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights");
                  std::string::basic_string[abi:ne180100]<0>(&v434, "W");
                  v410[0] = v136;
                  v410[1] = v137;
                  if (v137) {
                    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v410);
                  if (v137) {
                    nitro::nitro_function::nitro_function(v137);
                  }
                  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v434.__r_.__value_.__l.__data_);
                  }
                  if ((v435[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v435);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases");
                  uint64_t v149 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                  long long v150 = v149;
                  if ((v435[23] & 0x80000000) != 0)
                  {
                    operator delete(*(void **)v435);
                    if (!v150) {
                      goto LABEL_441;
                    }
                  }
                  else if (!v149)
                  {
                    goto LABEL_441;
                  }
                  (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v136 + 520))(v435, v136);
                  char v151 = (std::__shared_weak_count *)a9[1];
                  v407[0] = *a9;
                  v407[1] = v151;
                  if (v151) {
                    atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
                  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v434.__r_.__value_.__l.__data_);
                  }
                  if (v151) {
                    nitro::nitro_function::nitro_function(v151);
                  }
                  uint64_t v152 = v408;
                  uint64_t v153 = v409;
                  v405 = v408;
                  v406 = v409;
                  if (v409) {
                    atomic_fetch_add_explicit(&v409->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v404 = v431;
                  if (*((void *)&v431 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v431 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(void *, uint64_t *, long long *))(*(void *)v136 + 416))(v136, &v405, &v404);
                  if (*((void *)&v404 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v404 + 1));
                  }
                  if (v406) {
                    nitro::nitro_function::nitro_function(v406);
                  }
                  v430 += 4 * *(int *)(v152 + 8);
                  v403[0] = (uint64_t)v136;
                  v403[1] = (uint64_t)v137;
                  if (v137) {
                    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
                  std::string::basic_string[abi:ne180100]<0>(&v423, "b");
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v422, v403, (uint64_t)&v434, (uint64_t)&v423);
                  if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v423.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v434.__r_.__value_.__l.__data_);
                  }
                  if (v137) {
                    nitro::nitro_function::nitro_function(v137);
                  }
                  if (v153) {
                    nitro::nitro_function::nitro_function(v153);
                  }
LABEL_441:
                  std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases_f16");
                  std::string::basic_string[abi:ne180100]<0>(&v434, "b_f16");
                  v402[0] = v136;
                  v402[1] = v137;
                  if (v137) {
                    atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v402);
                  if (v137) {
                    nitro::nitro_function::nitro_function(v137);
                  }
                  if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v434.__r_.__value_.__l.__data_);
                  }
                  if ((v435[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v435);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "quantization_lut_weights_blob");
                std::string::basic_string[abi:ne180100]<0>(&v434, "W_u8");
                v401[0] = v136;
                v401[1] = v137;
                if (v137) {
                  atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v401);
                if (v137) {
                  nitro::nitro_function::nitro_function(v137);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (v83) {
                    goto LABEL_479;
                  }
                }
                else if (v83)
                {
                  goto LABEL_479;
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "quantization_lut_blob");
                unint64_t v154 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                uint64_t v155 = v154;
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (!v155) {
                    goto LABEL_479;
                  }
                }
                else if (!v154)
                {
                  goto LABEL_479;
                }
                (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v136 + 528))(v435, v136);
                uint64_t v156 = (std::__shared_weak_count *)a9[1];
                v400[0] = *a9;
                v400[1] = v156;
                if (v156) {
                  atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "quantization_lut_blob");
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if (v156) {
                  nitro::nitro_function::nitro_function(v156);
                }
                uint64_t v157 = (std::__shared_weak_count *)v423.__r_.__value_.__l.__size_;
                v399 = *(_OWORD *)&v423.__r_.__value_.__l.__data_;
                if (v423.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v423.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                }
                v398 = v431;
                if (*((void *)&v431 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v431 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                (*(void (**)(void *, long long *, long long *))(*(void *)v136 + 576))(v136, &v399, &v398);
                if (*((void *)&v398 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v398 + 1));
                }
                if (*((void *)&v399 + 1)) {
                  nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v399 + 1));
                }
                if (v157) {
                  nitro::nitro_function::nitro_function(v157);
                }
LABEL_479:
                std::string::basic_string[abi:ne180100]<0>(v435, "quantization_ranges_blob");
                std::string::basic_string[abi:ne180100]<0>(&v434, "q_u8_range");
                v397[0] = v136;
                v397[1] = v137;
                if (v137) {
                  atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v397);
                if (v137) {
                  nitro::nitro_function::nitro_function(v137);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v435);
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights_f16");
                std::string::basic_string[abi:ne180100]<0>(&v434, "W_f16");
                v396[0] = v136;
                v396[1] = v137;
                if (v137) {
                  atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v396);
LABEL_490:
                if (v137) {
                  nitro::nitro_function::nitro_function(v137);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (!v137) {
                    goto LABEL_650;
                  }
LABEL_498:
                  uint64_t v132 = v137;
                  goto LABEL_649;
                }
                if (v137) {
                  goto LABEL_498;
                }
                goto LABEL_650;
              }
              if (v428.__r_.__value_.__r.__words[0] == 0x6E6F635F64616F6CLL
                && *(std::string::size_type *)((char *)v428.__r_.__value_.__r.__words + 5) == 0x746E6174736E6F63)
              {
LABEL_230:
                std::string::basic_string[abi:ne180100]<0>(v435, "constant_blob");
                uint64_t v86 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                uint64_t v87 = v86;
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (!v87) {
                    goto LABEL_650;
                  }
                }
                else if (!v86)
                {
                  goto LABEL_650;
                }
                LODWORD(v423.__r_.__value_.__l.__data_) = 0;
                LODWORD(v408) = 0;
                LODWORD(v368) = 0;
                v390 = 0;
                v389 = 1;
                std::string::basic_string[abi:ne180100]<0>(&v434, "w");
                Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
                Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, &v423);
                if ((v435[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&v435[16]);
                }
                if (*(void *)&v435[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "h");
                Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
                Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, &v408);
                if ((v435[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&v435[16]);
                }
                if (*(void *)&v435[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "k");
                Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
                Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, &v368);
                if ((v435[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&v435[16]);
                }
                if (*(void *)&v435[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "n");
                Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
                Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, &v390);
                if ((v435[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&v435[16]);
                }
                if (*(void *)&v435[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(v435, "seq");
                v265 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
                v266 = v265;
                if ((v435[23] & 0x80000000) != 0)
                {
                  operator delete(*(void **)v435);
                  if (!v266)
                  {
LABEL_812:
                    v267 = v424;
                    v268 = *(const void **)(v424 + 64);
                    if (v268)
                    {
                      if (v269)
                      {
                        uint64_t v77 = *(std::__shared_weak_count **)(v267 + 72);
                        if (v77) {
                          atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        uint64_t v77 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v77 = 0;
                      v269 = 0;
                    }
                    std::string::basic_string[abi:ne180100]<0>(v435, "constant_blob");
                    v270 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 80))(v357, v435);
                    if ((v435[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v435);
                    }
                    if (v22 != 100 && v22)
                    {
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(v435, (int)v423.__r_.__value_.__l.__data_, v408, v368, v389 * v390);
                      v272 = *(void *)v435;
                      v273 = *(int *)(*(void *)v435 + 8);
                      for (j = 12; j != 24; j += 4)
                        v273 *= *(int *)(*(void *)v435 + j);
                      (*(void (**)(std::string::size_type, unint64_t, void, uint64_t))(*(void *)*a9 + 16))(*a9, v270, *(void *)(*(void *)v435 + 24), 4 * v273);
                      v275 = *(std::__shared_weak_count **)&v435[8];
                      v387[0] = v272;
                      v387[1] = *(void *)&v435[8];
                      if (*(void *)&v435[8]) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v435[8] + 8), 1uLL, memory_order_relaxed);
                      }
                      Espresso::generic_load_constant_kernel::set_constant_blob(v269, (uint64_t)v387);
                      if (v275) {
                        nitro::nitro_function::nitro_function(v275);
                      }
                      v276 = 0;
                      v277 = *(int *)(v272 + 8);
                      do
                      {
                        v277 *= *(int *)(v272 + 12 + v276);
                        v276 += 4;
                      }
                      while (v276 != 12);
                      if (v275) {
                        nitro::nitro_function::nitro_function(v275);
                      }
                      v271 = 4 * v277;
                    }
                    else
                    {
                      std::string::basic_string[abi:ne180100]<0>(v435, "constant_blob");
                      v388[0] = v269;
                      v388[1] = (uint64_t *)v77;
                      if (v77) {
                        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v271 = Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()((std::string::size_type *)&v415, (uint64_t)v435, v270, v388, 0);
                      if (v77) {
                        nitro::nitro_function::nitro_function(v77);
                      }
                      if ((v435[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v435);
                      }
                    }
                    v386[0] = (uint64_t)v269;
                    v386[1] = (uint64_t)v77;
                    if (v77) {
                      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    std::string::basic_string[abi:ne180100]<0>(v435, "constant_blob");
                    std::string::basic_string[abi:ne180100]<0>(&v434, "constant_blob");
                    Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v422, v386, (uint64_t)v435, (uint64_t)&v434);
                    if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v434.__r_.__value_.__l.__data_);
                    }
                    if ((v435[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)v435);
                      if (v77)
                      {
LABEL_846:
                        nitro::nitro_function::nitro_function(v77);
                        v430 += v271;
                        goto LABEL_648;
                      }
                    }
                    else if (v77)
                    {
                      goto LABEL_846;
                    }
                    v430 += v271;
                    goto LABEL_650;
                  }
                }
                else if (!v265)
                {
                  goto LABEL_812;
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, "seq");
                Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
                Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, &v389);
                if ((v435[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&v435[16]);
                }
                if (*(void *)&v435[8]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                goto LABEL_812;
              }
              uint64_t v70 = &v428;
              break;
            case 0x10:
              if (v428.__r_.__value_.__r.__words[0] != 0x6E6F635F6174656DLL
                || v428.__r_.__value_.__l.__size_ != 0x6E6F6974756C6F76)
              {
                goto LABEL_292;
              }
              goto LABEL_220;
            default:
              goto LABEL_259;
          }
        }
        BOOL v88 = v70->__r_.__value_.__r.__words[0];
        uint64_t v89 = *(std::string::size_type *)((char *)v70->__r_.__value_.__r.__words + 5);
        if (v88 == 0x72705F72656E6E69 && v89 == 0x746375646F72705FLL)
        {
          if (a8) {
            goto LABEL_650;
          }
          uint64_t v158 = v424;
          size_t v159 = *(const void **)(v424 + 64);
          if (v159)
          {
            if (v160)
            {
              v137 = *(std::__shared_weak_count **)(v158 + 72);
              if (v137) {
                atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              v137 = 0;
            }
          }
          else
          {
            v137 = 0;
            long long v160 = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights_f16");
          std::string::basic_string[abi:ne180100]<0>(&v434, "W_f16");
          v378[0] = v160;
          v378[1] = v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v378);
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if ((v435[23] & 0x80000000) != 0) {
            operator delete(*(void **)v435);
          }
          std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights");
          std::string::basic_string[abi:ne180100]<0>(&v434, "W");
          v377[0] = v160;
          v377[1] = v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v377);
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if ((v435[23] & 0x80000000) != 0) {
            operator delete(*(void **)v435);
          }
          std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights_f16_t");
          std::string::basic_string[abi:ne180100]<0>(&v434, "w_f16_t");
          v376[0] = v160;
          v376[1] = v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v376);
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if ((v435[23] & 0x80000000) != 0) {
            operator delete(*(void **)v435);
          }
          std::string::basic_string[abi:ne180100]<0>(v435, "blob_weights_t");
          std::string::basic_string[abi:ne180100]<0>(&v434, "w_f32_t");
          v375[0] = v160;
          v375[1] = v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v375);
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if ((v435[23] & 0x80000000) != 0) {
            operator delete(*(void **)v435);
          }
          std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases");
          v278 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
          v279 = v278;
          if ((v435[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)v435);
            if (!v279)
            {
LABEL_906:
              std::string::basic_string[abi:ne180100]<0>(v435, "blob_biases_f16");
              std::string::basic_string[abi:ne180100]<0>(&v434, "b_f16");
              v370[0] = v160;
              v370[1] = v137;
              if (v137) {
                atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(&v413, (uint64_t)v435, (uint64_t)&v434, (uint64_t)v370);
              goto LABEL_490;
            }
          }
          else if (!v278)
          {
            goto LABEL_906;
          }
          (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v160 + 440))(v435, v160);
          v280 = (std::__shared_weak_count *)a9[1];
          v374[0] = *a9;
          v374[1] = v280;
          if (v280) {
            atomic_fetch_add_explicit(&v280->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if (v280) {
            nitro::nitro_function::nitro_function(v280);
          }
          v281 = v409;
          v372 = v408;
          v373 = v409;
          if (v409) {
            atomic_fetch_add_explicit(&v409->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, uint64_t *))(*(void *)v160 + 392))(v160, &v372);
          if (v373) {
            nitro::nitro_function::nitro_function(v373);
          }
          v371[0] = (uint64_t)v160;
          v371[1] = (uint64_t)v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v434, "blob_biases");
          std::string::basic_string[abi:ne180100]<0>(&v423, "b");
          Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(&v422, v371, (uint64_t)&v434, (uint64_t)&v423);
          if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v423.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v434.__r_.__value_.__l.__data_);
          }
          if (v137) {
            nitro::nitro_function::nitro_function(v137);
          }
          if (v281) {
            nitro::nitro_function::nitro_function(v281);
          }
          goto LABEL_906;
        }
      }
      if ((*((unsigned char *)&v428.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        unint64_t v65 = v428.__r_.__value_.__l.__size_;
LABEL_245:
        if (v65 <= 15)
        {
          if (v65 != 3)
          {
            if (v65 != 5) {
              goto LABEL_650;
            }
            uint64_t v63 = (std::string *)v428.__r_.__value_.__r.__words[0];
            goto LABEL_249;
          }
          if (*(_WORD *)v428.__r_.__value_.__l.__data_ != 28274
            || *(unsigned char *)(v428.__r_.__value_.__r.__words[0] + 2) != 110)
          {
            goto LABEL_650;
          }
          goto LABEL_312;
        }
        if (v65 != 16)
        {
          if (v65 == 28)
          {
            v99 = *(void *)v428.__r_.__value_.__l.__data_ == 0x6F727072656E6E69
               && *(void *)(v428.__r_.__value_.__r.__words[0] + 8) == 0x79616C5F74637564;
            v100 = v99 && *(void *)(v428.__r_.__value_.__r.__words[0] + 16) == 0x746E6175715F7265;
            if (v100 && *(_DWORD *)(v428.__r_.__value_.__r.__words[0] + 24) == 1684372073)
            {
LABEL_1004:
              v332 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v332, "Unmaintained layer");
              __cxa_throw(v332, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
          }
          goto LABEL_650;
        }
LABEL_298:
        if (*(void *)v428.__r_.__value_.__l.__data_ != 0x5F747865746E6F63
          || *(void *)(v428.__r_.__value_.__r.__words[0] + 8) != 0x726566736E617274)
        {
          goto LABEL_650;
        }
        goto LABEL_303;
      }
      if (HIBYTE(v428.__r_.__value_.__r.__words[2]) <= 0xFu)
      {
        if (HIBYTE(v428.__r_.__value_.__r.__words[2]) != 3)
        {
          if (HIBYTE(v428.__r_.__value_.__r.__words[2]) != 5) {
            goto LABEL_650;
          }
LABEL_243:
          uint64_t v63 = &v428;
LABEL_249:
          if (LODWORD(v63->__r_.__value_.__l.__data_) == 1667854946 && v63->__r_.__value_.__s.__data_[4] == 107)
          {
            uint64_t v92 = v424;
            __int16 v93 = *(void **)(v424 + 64);
            if (v93
            {
              v345 = *(std::__shared_weak_count **)(v92 + 72);
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
            }
            else
            {
              v345 = 0;
            }
            v111 = (long long *)v93[48];
            v112 = (long long *)(v93 + 49);
            if (v111 != (long long *)(v93 + 49))
            {
              do
              {
                std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)v435, v111 + 2);
                if (v435[23] >= 0) {
                  uint64_t v113 = v435;
                }
                else {
                  uint64_t v113 = *(char **)v435;
                }
                std::string::basic_string[abi:ne180100]<0>(&v434, v113);
                uint64_t v114 = *(void *)&v435[24];
                long long v115 = *(std::__shared_weak_count **)&v435[32];
                if (*(void *)&v435[32]) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v435[32] + 8), 1uLL, memory_order_relaxed);
                }
                size_t v117 = *a9;
                int v116 = (std::__shared_weak_count *)a9[1];
                if (v116) {
                  atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                unint64_t v118 = (*(uint64_t (**)(void, std::string *))(*(void *)v357 + 80))(v357, &v434);
                if (*(unsigned char *)(v114 + 24)) {
                  free(*(void **)(v114 + 16));
                }
                long long v119 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)v117 + 80))(v117, v118);
                *(void *)(v114 + 16) = v119;
                if (!v119) {
                  Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
                }
                if (v116) {
                  atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v120 = *(std::__shared_weak_count **)(v114 + 40);
                *(void *)(v114 + 32) = v117;
                *(void *)(v114 + 40) = v116;
                if (v120) {
                  nitro::nitro_function::nitro_function(v120);
                }
                *(unsigned char *)(v114 + 24) = 0;
                if (v116) {
                  nitro::nitro_function::nitro_function(v116);
                }
                if (v115) {
                  nitro::nitro_function::nitro_function(v115);
                }
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                if (*(void *)&v435[32]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[32]);
                }
                if ((v435[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v435);
                }
                uint64_t v121 = (long long *)*((void *)v111 + 1);
                if (v121)
                {
                  do
                  {
                    uint64_t v122 = v121;
                    uint64_t v121 = *(long long **)v121;
                  }
                  while (v121);
                }
                else
                {
                  do
                  {
                    uint64_t v122 = (long long *)*((void *)v111 + 2);
                    float v27 = *(void *)v122 == (void)v111;
                    v111 = v122;
                  }
                  while (!v27);
                }
                v111 = v122;
              }
              while (v122 != v112);
            }
            if (v345) {
              nitro::nitro_function::nitro_function(v345);
            }
            uint64_t v20 = v358;
          }
          goto LABEL_650;
        }
LABEL_272:
        if (LOWORD(v428.__r_.__value_.__l.__data_) != 28274 || v428.__r_.__value_.__s.__data_[2] != 110) {
          goto LABEL_650;
        }
LABEL_312:
        v108 = v424;
        uint64_t v109 = *(const void **)(v424 + 64);
        if (v109)
        {
          if (v110)
          {
            uint64_t v77 = *(std::__shared_weak_count **)(v108 + 72);
            if (v77) {
              atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
            }
LABEL_357:
            ((void (*)(void **, void))(*v110)[44])(v110, v425);
            if (!*a9) {
              goto LABEL_647;
            }
            std::string::basic_string[abi:ne180100]<0>(v435, "weights");
            std::string::size_type v127 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
            int v128 = v127;
            if ((v435[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)v435);
              if (!v128) {
                goto LABEL_647;
              }
            }
            else if (!v127)
            {
              goto LABEL_647;
            }
            v409 = 0;
            v408 = 0;
            v347 = v77;
            std::string::basic_string[abi:ne180100]<0>(&v434, "weights");
            Espresso::SerDes::generic_serdes_object::operator[](v357, (uint64_t)&v434, v435);
            Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v435, (uint64_t)&v408);
            if ((v435[39] & 0x80000000) != 0) {
              operator delete(*(void **)&v435[16]);
            }
            if (*(void *)&v435[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
            }
            if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v434.__r_.__value_.__l.__data_);
            }
            uint64_t v161 = v408;
            memset(v435, 0, 24);
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v408 + 32))(v408, v435);
            size_t v163 = *(long long **)&v435[8];
            v162 = *(long long **)v435;
            if (*(void *)v435 != *(void *)&v435[8])
            {
              uint64_t v164 = v425;
              do
              {
                if (*((char *)v162 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v434, *(const std::string::value_type **)v162, *((void *)v162 + 1));
                }
                else
                {
                  v165 = *v162;
                  v434.__r_.__value_.__r.__words[2] = *((void *)v162 + 2);
                  *(_OWORD *)&v434.__r_.__value_.__l.__data_ = v165;
                }
                if ((v434.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v166 = &v434;
                }
                else {
                  v166 = (std::string *)v434.__r_.__value_.__r.__words[0];
                }
                std::string::basic_string[abi:ne180100]<0>(&v423, (char *)v166);
                Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v368, v110, (uint64_t)&v423, v164);
                if (SHIBYTE(v423.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v423.__r_.__value_.__l.__data_);
                }
                int v167 = v368;
                if (v368)
                {
                  uint64_t v168 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v161 + 80))(v161, &v434);
                  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v167 + 56))(&v423, v167);
                  uint64_t v169 = 0;
                  uint64_t v170 = *(int *)(v423.__r_.__value_.__r.__words[0] + 8);
                  do
                  {
                    v170 *= *(int *)(v423.__r_.__value_.__r.__words[0] + 12 + v169);
                    v169 += 4;
                  }
                  while (v169 != 12);
                  (*(void (**)(std::string::size_type, uint64_t, void, uint64_t))(*(void *)*a9 + 16))(*a9, v168, *(void *)(v423.__r_.__value_.__r.__words[0] + 24), 4 * v170);
                  (*(void (**)(uint64_t, long long *, std::string *))(*(void *)v167 + 48))(v167, &v431, &v423);
                  v171 = 0;
                  size_t v172 = *(int *)(v423.__r_.__value_.__r.__words[0] + 8);
                  do
                  {
                    v172 *= *(int *)(v423.__r_.__value_.__r.__words[0] + 12 + v171);
                    v171 += 4;
                  }
                  while (v171 != 12);
                  v430 += 4 * v172;
                  if (v423.__r_.__value_.__l.__size_) {
                    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v423.__r_.__value_.__l.__size_);
                  }
                }
                if (v369) {
                  nitro::nitro_function::nitro_function(v369);
                }
                uint64_t v20 = v358;
                if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v434.__r_.__value_.__l.__data_);
                }
                v162 = (long long *)((char *)v162 + 24);
              }
              while (v162 != v163);
            }
            v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
            if (v409) {
              nitro::nitro_function::nitro_function(v409);
            }
            uint64_t v77 = v347;
            if (v347) {
              goto LABEL_648;
            }
            goto LABEL_650;
          }
        }
        else
        {
          v110 = 0;
        }
        uint64_t v77 = 0;
        goto LABEL_357;
      }
      if (HIBYTE(v428.__r_.__value_.__r.__words[2]) != 16)
      {
LABEL_259:
        if (HIBYTE(v428.__r_.__value_.__r.__words[2]) == 28)
        {
          uint64_t v95 = v428.__r_.__value_.__r.__words[0] == 0x6F727072656E6E69
             && v428.__r_.__value_.__l.__size_ == 0x79616C5F74637564;
          v96 = v95 && v428.__r_.__value_.__r.__words[2] == 0x746E6175715F7265;
          if (v96 && LODWORD(v429.__r_.__value_.__l.__data_) == 1684372073) {
            goto LABEL_1004;
          }
        }
        goto LABEL_650;
      }
LABEL_292:
      if (v428.__r_.__value_.__r.__words[0] != 0x5F747865746E6F63
        || v428.__r_.__value_.__l.__size_ != 0x726566736E617274)
      {
        goto LABEL_650;
      }
LABEL_303:
      LODWORD(v368) = (***(uint64_t (****)(void))(v62 + 8))(*(void *)(v62 + 8));
      if ((v368 - 10006) > 2)
      {
        v123 = v424;
        uint64_t v124 = *(const void **)(v424 + 64);
        if (v124)
        {
          if (v125)
          {
            uint64_t v126 = *(std::__shared_weak_count **)(v123 + 72);
            if (v126) {
              atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            goto LABEL_584;
          }
        }
        else
        {
          int v125 = 0;
        }
        uint64_t v126 = 0;
LABEL_584:
        unint64_t v179 = v432;
        v178 = v433;
        if (v433) {
          atomic_fetch_add_explicit(&v433->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v180 = (std::__shared_weak_count *)*((void *)v125 + 42);
        *((void *)v125 + 41) = v179;
        *((void *)v125 + 42) = v178;
        if (v180) {
          nitro::nitro_function::nitro_function(v180);
        }
        LODWORD(v434.__r_.__value_.__l.__data_) = *(_DWORD *)((*(uint64_t (**)(char *))(*(void *)v125 + 320))(v125)
                                                            + 20);
        Espresso::create_context((int *)&v434, v435);
        uint64_t v181 = *(_OWORD *)v435;
        *(_OWORD *)v435 = 0uLL;
        unint64_t v182 = (std::__shared_weak_count *)*((void *)v125 + 2);
        *(_OWORD *)(v125 + 8) = v181;
        if (v182) {
          nitro::nitro_function::nitro_function(v182);
        }
        if (*(void *)&v435[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
        }
        unint64_t v183 = *((void *)v125 + 1);
        *(unsigned char *)(v183 + 53) = *(unsigned char *)(v432 + 53);
        size_t v184 = *((void *)v125 + 2);
        if (v184) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v184 + 8), 1uLL, memory_order_relaxed);
        }
        v185 = (std::__shared_weak_count *)*((void *)v125 + 40);
        *((void *)v125 + 39) = v183;
        *((void *)v125 + 40) = v184;
        if (v185) {
          nitro::nitro_function::nitro_function(v185);
        }
        if ((void)v431)
        {
          (*(void (**)(void))(*(void *)v431 + 16))(v431);
          (*(void (**)(void))(*(void *)v431 + 24))(v431);
        }
        unint64_t v186 = (void (***)(unsigned char *__return_ptr))*((void *)v125 + 1);
        int v187 = (std::__shared_weak_count *)*((void *)v125 + 2);
        if (v187) {
          atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v188 = v433;
        v432 = (std::string::size_type)v186;
        v433 = v187;
        if (v188)
        {
          nitro::nitro_function::nitro_function(v188);
          unint64_t v186 = (void (***)(unsigned char *__return_ptr))v432;
        }
        (**v186)(v435);
        uint64_t v189 = *(_OWORD *)v435;
        *(_OWORD *)v435 = 0uLL;
        v190 = (std::__shared_weak_count *)*((void *)&v431 + 1);
        v431 = v189;
        if (v190)
        {
          nitro::nitro_function::nitro_function(v190);
          if (*(void *)&v435[8]) {
            nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
          }
        }
        *(_DWORD *)(v424 + 12) = 0;
        int v191 = (***(uint64_t (****)(void))(v432 + 8))(*(void *)(v432 + 8));
        *(_DWORD *)(v424 + 8) = v191;
        if (*v352)
        {
          uint64_t v192 = **a4;
          long long v193 = (*a4)[1];
          while (v192 != v193)
          {
            int v194 = *(std::__shared_weak_count **)(v192 + 96);
            *(void *)(v192 + 88) = 0;
            *(void *)(v192 + 96) = 0;
            if (v194) {
              nitro::nitro_function::nitro_function(v194);
            }
            v192 += 224;
          }
        }
        if (v126) {
          nitro::nitro_function::nitro_function(v126);
        }
        a7 = 0;
        goto LABEL_650;
      }
      *(_OWORD *)&v435[20] = 0uLL;
      *(_OWORD *)&v435[4] = 0x3F800000uLL;
      *(_DWORD *)v435 = 6;
      MEMORY[0x192FF0F50](v424 + 40, "activation");
      if (v353 && *(_DWORD *)(*(void *)(*(void *)(*v359 + 712) + 48) + 4 * v17))
      {
        Espresso::abstract_engine_factory::shared(&v408);
        uint64_t v104 = v408;
        v105 = *v352;
        std::string::basic_string[abi:ne180100]<0>(&v434, "activation");
        v106 = *(uint64_t (****)(void))(*(void *)(*v352 + 72) + 8);
        v390 = (**v106)(v106);
        Espresso::abstract_engine_factory::make_kernel_priv(v104, v105 + 72, (uint64_t)&v434, (uint64_t)v435, &v390);
      }
      else
      {
        Espresso::abstract_engine_factory::shared(&v408);
        std::string::size_type v129 = v408;
        std::string::basic_string[abi:ne180100]<0>(&v434, "activation");
        Espresso::abstract_engine_factory::make_kernel_priv(v129, (uint64_t)&v432, (uint64_t)&v434, (uint64_t)v435, (int *)&v368);
      }
      char v130 = *(_OWORD *)&v423.__r_.__value_.__l.__data_;
      *(_OWORD *)&v423.__r_.__value_.__l.__data_ = 0uLL;
      v131 = *(std::__shared_weak_count **)(v424 + 72);
      *(_OWORD *)(v424 + 64) = v130;
      if (v131)
      {
        nitro::nitro_function::nitro_function(v131);
        if (v423.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v423.__r_.__value_.__l.__size_);
        }
      }
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v434.__r_.__value_.__l.__data_);
      }
      uint64_t v132 = v409;
      if (v409) {
        goto LABEL_649;
      }
LABEL_650:
      if (!*a9) {
        goto LABEL_671;
      }
      v201 = *(uint64_t **)(v424 + 64);
      int v200 = *(std::__shared_weak_count **)(v424 + 72);
      if (v200) {
        atomic_fetch_add_explicit(&v200->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v201)
      {
        std::string::basic_string[abi:ne180100]<0>(v435, "weights");
        uint64_t v202 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
        v203 = v202;
        if ((v435[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v435);
          if (v203)
          {
LABEL_658:
            std::string::basic_string[abi:ne180100]<0>(v435, "weights");
            (*(void (**)(std::string *__return_ptr, void, unsigned char *))(*(void *)v357 + 120))(&v434, v357, v435);
            if ((v435[23] & 0x80000000) != 0) {
              operator delete(*(void **)v435);
            }
            memset(v435, 0, 24);
            (*(void (**)(std::string::size_type, unsigned char *))(*(void *)v434.__r_.__value_.__l.__data_ + 32))(v434.__r_.__value_.__r.__words[0], v435);
            v205 = *(void *)&v435[8];
            for (k = *(void *)v435; k != v205; k += 24)
            {
              int v206 = (*(uint64_t (**)(std::string::size_type, uint64_t))(*(void *)v434.__r_.__value_.__l.__data_
                                                                                + 80))(v434.__r_.__value_.__r.__words[0], k);
              v367[0] = v201;
              v367[1] = (uint64_t *)v200;
              if (v200) {
                atomic_fetch_add_explicit(&v200->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v207 = Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()((std::string::size_type *)&v415, k, v206, v367, 1);
              if (v200) {
                nitro::nitro_function::nitro_function(v200);
              }
              v430 += v207;
            }
            v423.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v423);
            if (v434.__r_.__value_.__l.__size_) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v434.__r_.__value_.__l.__size_);
            }
          }
        }
        else if (v202)
        {
          goto LABEL_658;
        }
      }
      if (v200) {
        nitro::nitro_function::nitro_function(v200);
      }
LABEL_671:
      v208 = v424;
      if (*(void *)(v424 + 64))
      {
        if (*(char *)(v424 + 63) >= 0) {
          std::string::size_type v209 = *(unsigned __int8 *)(v424 + 63);
        }
        else {
          std::string::size_type v209 = *(void *)(v424 + 48);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)v435, v209 + 1);
        if (v435[23] >= 0) {
          uint64_t v210 = v435;
        }
        else {
          uint64_t v210 = *(unsigned char **)v435;
        }
        if (v209)
        {
          if (*(char *)(v208 + 63) >= 0) {
            uint64_t v211 = (const void *)(v208 + 40);
          }
          else {
            uint64_t v211 = *(const void **)(v208 + 40);
          }
          memmove(v210, v211, v209);
        }
        *(_WORD *)&v210[v209] = 58;
        int v212 = *(char *)(v424 + 39);
        if (v212 >= 0) {
          int v213 = (const std::string::value_type *)(v424 + 16);
        }
        else {
          int v213 = *(const std::string::value_type **)(v424 + 16);
        }
        if (v212 >= 0) {
          unsigned int v214 = *(unsigned __int8 *)(v424 + 39);
        }
        else {
          unsigned int v214 = *(void *)(v424 + 24);
        }
        uint64_t v215 = std::string::append((std::string *)v435, v213, v214);
        long long v216 = v215->__r_.__value_.__r.__words[0];
        v434.__r_.__value_.__r.__words[0] = v215->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v215->__r_.__value_.__r.__words[1] + 7);
        uint64_t v217 = HIBYTE(v215->__r_.__value_.__r.__words[2]);
        v215->__r_.__value_.__l.__size_ = 0;
        v215->__r_.__value_.__r.__words[2] = 0;
        v215->__r_.__value_.__r.__words[0] = 0;
        v218 = *(void *)(v424 + 64);
        if (*(char *)(v218 + 199) < 0) {
          operator delete(*(void **)(v218 + 176));
        }
        uint64_t v219 = v434.__r_.__value_.__r.__words[0];
        *(void *)(v218 + 176) = v216;
        *(void *)(v218 + 184) = v219;
        *(void *)(v218 + 191) = *(std::string::size_type *)((char *)v434.__r_.__value_.__r.__words + 7);
        *(unsigned char *)(v218 + 199) = v217;
        if ((v435[23] & 0x80000000) != 0) {
          operator delete(*(void **)v435);
        }
        v220 = v424;
        if (*(unsigned char *)(v432 + 72))
        {
          v221 = *(void *)(v424 + 64);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v222 = *(std::__shared_weak_count **)(v221 + 232);
          *(_OWORD *)(v221 + 224) = v357;
          if (v222)
          {
            nitro::nitro_function::nitro_function(v222);
            v220 = v424;
          }
        }
        (*(void (**)(void, long long *))(**(void **)(v220 + 64) + 176))(*(void *)(v220 + 64), &v431);
      }
      std::string::basic_string[abi:ne180100]<0>(v435, "share_weights_from_layer_named");
      v223 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v357 + 24))(v357, v435);
      uint64_t v224 = v223;
      if ((v435[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v435);
        if (!v224) {
          goto LABEL_732;
        }
      }
      else if (!v223)
      {
        goto LABEL_732;
      }
      std::string::basic_string[abi:ne180100]<0>(&v434, "share_weights_from_layer_named");
      v225 = (Espresso *)(*(void *(**)(unsigned char *__return_ptr, void, std::string *))(*(void *)v357 + 112))(v435, v357, &v434);
      v226 = v424 + 128;
      if (*(char *)(v424 + 151) < 0) {
        operator delete(*(void **)v226);
      }
      *(_OWORD *)v226 = *(_OWORD *)v435;
      *(void *)(v226 + 16) = *(void *)&v435[16];
      v435[23] = 0;
      v435[0] = 0;
      if (SHIBYTE(v434.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v434.__r_.__value_.__l.__data_);
      }
      long long v228 = *(void *)(*v359 + 32);
      v227 = *(void *)(*v359 + 40);
      if (v227 != v228)
      {
        v229 = 0;
        long long v230 = *(char *)(v424 + 151);
        std::string v231 = (unsigned __int8 **)(v424 + 128);
        if (v230 >= 0) {
          uint64_t v232 = *(unsigned __int8 *)(v424 + 151);
        }
        else {
          uint64_t v232 = *(void *)(v424 + 136);
        }
        if ((unint64_t)((v227 - v228) >> 4) <= 1) {
          v233 = 1;
        }
        else {
          v233 = (v227 - v228) >> 4;
        }
        do
        {
          v234 = *(void *)(v228 + 16 * v229);
          uint64_t v235 = *(unsigned __int8 *)(v234 + 39);
          v236 = *(void *)(v234 + 24);
          if ((v235 & 0x80u) == 0) {
            v237 = *(unsigned __int8 *)(v234 + 39);
          }
          else {
            v237 = *(void *)(v234 + 24);
          }
          if (v237 == v232)
          {
            uint64_t v238 = (const void **)(v234 + 16);
            if (v230 >= 0) {
              int v239 = (unsigned __int8 *)v231;
            }
            else {
              int v239 = *v231;
            }
            if ((v235 & 0x80) != 0)
            {
              v225 = (Espresso *)memcmp(*v238, v239, v236);
              if (!v225)
              {
LABEL_729:
                v240 = Espresso::espresso_os_log_subsystem(v225, (const char *)v239);
                if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
                {
                  v264 = (uint64_t)(*(void *)(*v359 + 40) - *(void *)(*v359 + 32)) >> 4;
                  *(_DWORD *)v435 = 134218240;
                  *(void *)&v435[4] = v229;
                  *(_WORD *)&v435[12] = 2048;
                  *(void *)&v435[14] = v264;
                  _os_log_debug_impl(&dword_1920CB000, v240, OS_LOG_TYPE_DEBUG, "Sharing weights from layer %zu to layer %zu", v435, 0x16u);
                }

                int v241 = *(void *)(*(void *)(*v359 + 32) + 16 * v229);
                (*(void (**)(uint64_t, long long *))(*(void *)v241 + 16))(v241, &v424);
                break;
              }
            }
            else
            {
              if (!v235) {
                goto LABEL_729;
              }
              while (*(unsigned __int8 *)v238 == *v239)
              {
                uint64_t v238 = (const void **)((char *)v238 + 1);
                ++v239;
                if (!--v235) {
                  goto LABEL_729;
                }
              }
            }
          }
          ++v229;
        }
        while (v229 != v233);
      }
LABEL_732:
      if ((void)v424)
      {
        long long v242 = *v359;
        long long v243 = *(void **)(*v359 + 40);
        int v244 = *(void *)(*v359 + 48);
        if ((unint64_t)v243 >= v244)
        {
          long long v247 = *(void *)(v242 + 32);
          long long v248 = ((uint64_t)v243 - v247) >> 4;
          unint64_t v249 = v248 + 1;
          if ((unint64_t)(v248 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v250 = v244 - v247;
          if (v250 >> 3 > v249) {
            unint64_t v249 = v250 >> 3;
          }
          if ((unint64_t)v250 >= 0x7FFFFFFFFFFFFFF0) {
            char v251 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            char v251 = v249;
          }
          *(void *)&v435[32] = *v359 + 48;
          uint64_t v252 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v251);
          v253 = &v252[16 * v248];
          *(void *)v435 = v252;
          *(void *)&v435[8] = v253;
          *(void *)&v435[24] = &v252[16 * v254];
          int v255 = *((void *)&v424 + 1);
          *(_OWORD *)v253 = v424;
          if (v255) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v255 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)&v435[16] = v253 + 16;
          std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer((uint64_t *)(v242 + 32), v435);
          v246 = *(void **)(v242 + 40);
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v435);
        }
        else
        {
          *long long v243 = v424;
          uint64_t v245 = *((void *)&v424 + 1);
          v243[1] = *((void *)&v424 + 1);
          if (v245) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v245 + 8), 1uLL, memory_order_relaxed);
          }
          v246 = v243 + 2;
          *(void *)(v242 + 40) = v243 + 2;
        }
        *(void *)(v242 + 40) = v246;
        std::string v256 = v424;
        v257 = *(std::__shared_weak_count **)(v424 + 72);
        v366[0] = *(void *)(v424 + 64);
        v366[1] = v257;
        if (v257) {
          atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::top_names_from_serdes(v357, v366, v256 + 16, (std::vector<std::string> *)v435);
        uint64_t v258 = *v359 + 96;
        v434.__r_.__value_.__r.__words[0] = (((*(void *)(*v359 + 40) - *(void *)(*v359 + 32)) << 28) - 0x100000000) >> 32;
        v259 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v258, v434.__r_.__value_.__r.__words[0], &v434);
        std::vector<std::string>::__vdeallocate(v259 + 1);
        *(_OWORD *)&v259[1].__begin_ = *(_OWORD *)v435;
        v259[1].__end_cap_.__value_ = *(std::string **)&v435[16];
        memset(v435, 0, 24);
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
        if (v257) {
          nitro::nitro_function::nitro_function(v257);
        }
        Espresso::bottom_names_from_serdes((Espresso *)v357, v435);
        v260 = *v359 + 56;
        v434.__r_.__value_.__r.__words[0] = (((*(void *)(*v359 + 40) - *(void *)(*v359 + 32)) << 28) - 0x100000000) >> 32;
        v261 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v260, v434.__r_.__value_.__r.__words[0], &v434);
        std::vector<std::string>::__vdeallocate(v261 + 1);
        *(_OWORD *)&v261[1].__begin_ = *(_OWORD *)v435;
        v261[1].__end_cap_.__value_ = *(std::string **)&v435[16];
        memset(v435, 0, 24);
        v434.__r_.__value_.__r.__words[0] = (std::string::size_type)v435;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v434);
      }
      if (v430 >= 0x200000)
      {
        v430 = 0;
        if ((void)v431)
        {
          (*(void (**)(void))(*(void *)v431 + 16))(v431);
          (*(void (**)(void))(*(void *)v431 + 24))(v431);
          (**(void (***)(unsigned char *__return_ptr))v432)(v435);
          v262 = *(_OWORD *)v435;
          *(_OWORD *)v435 = 0uLL;
          v263 = (std::__shared_weak_count *)*((void *)&v431 + 1);
          v431 = v262;
          if (v263)
          {
            nitro::nitro_function::nitro_function(v263);
            if (*(void *)&v435[8]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v435[8]);
            }
          }
        }
      }
      if (*((void *)&v417 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v417 + 1));
      }
      if (v416) {
        nitro::nitro_function::nitro_function(v416);
      }
      if (v415.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v415.__r_.__value_.__l.__size_);
      }
      if (*((void *)&v424 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v424 + 1));
      }
      if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v426.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v428.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v428.__r_.__value_.__l.__data_);
        if (!v358) {
          goto LABEL_771;
        }
LABEL_770:
        nitro::nitro_function::nitro_function(v358);
        goto LABEL_771;
      }
      if (v358) {
        goto LABEL_770;
      }
LABEL_771:
      ++v17;
      uint8x8_t v12 = v359;
    }
    while (v17 < (uint64_t)(v429.__r_.__value_.__l.__size_ - v429.__r_.__value_.__r.__words[0]) >> 4);
  }
  if ((void)v431)
  {
    (*(void (**)(void))(*(void *)v431 + 16))(v431);
    (*(void (**)(void))(*(void *)v431 + 24))(v431);
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_to_preserve_mil_types>(&v428, *v12);
  if (v428.__r_.__value_.__r.__words[0])
  {
    v282 = *v12;
    *(unsigned char *)(*(void *)(*v12 + 16) + 54) = 1;
    v283 = *(void *)(v282 + 1256);
    if (v283) {
      *(unsigned char *)(v283 + 54) = 1;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v415, "script");
  v284 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v349 + 24))(v349, &v415);
  v285 = v284;
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v415.__r_.__value_.__l.__data_);
    if (!v285) {
      goto LABEL_919;
    }
    goto LABEL_918;
  }
  if (v284) {
LABEL_918:
  }
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>(*v12);
LABEL_919:
  if ((***(unsigned int (****)(void))(v432 + 8))(*(void *)(v432 + 8))) {
    v286 = (***(uint64_t (****)(void))(v432 + 8))(*(void *)(v432 + 8)) == 40000;
  }
  else {
    v286 = 1;
  }
  v287 = *v12;
  std::string::basic_string[abi:ne180100]<0>(v435, "multi_head");
  std::string::basic_string[abi:ne180100]<0>(&v413, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(v287 + 472, (uint64_t)v435, (uint64_t)&v413, &v415);
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
  {
    v288 = v415.__r_.__value_.__l.__size_ == 1 && *v415.__r_.__value_.__l.__data_ == 49;
    operator delete(v415.__r_.__value_.__l.__data_);
  }
  else
  {
    v288 = SHIBYTE(v415.__r_.__value_.__r.__words[2]) == 1 && v415.__r_.__value_.__s.__data_[0] == 49;
  }
  if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v413.__r_.__value_.__l.__data_);
  }
  if ((v435[23] & 0x80000000) != 0) {
    operator delete(*(void **)v435);
  }
  if (!v288 || v286)
  {
    if (*(unsigned char *)(v432 + 56))
    {
      v289 = (void *)*v352;
      v290 = (atomic_ullong *)v12[1];
      v363[0] = (Espresso::net *)*v12;
      v363[1] = (Espresso::net *)v290;
      if (v290) {
        atomic_fetch_add_explicit(v290 + 1, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v415, "script");
      v291 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v349 + 24))(v349, &v415);
      Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(v289, v363, v292, a7, v291);
      if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v415.__r_.__value_.__l.__data_);
      }
      if (v290) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v290);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v415, "script");
    v293 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v349 + 24))(v349, &v415);
    v294 = v293;
    if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v415.__r_.__value_.__l.__data_);
      if (!v294) {
        goto LABEL_957;
      }
    }
    else if (!v293)
    {
      goto LABEL_957;
    }
    v304 = *v12;
    std::string::basic_string[abi:ne180100]<0>(&v415, "script");
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v349 + 120))(&v361);
    Espresso::net::setup_script(v304, &v361, a7);
    if (v362) {
      nitro::nitro_function::nitro_function(v362);
    }
    if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v415.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v296 = *(void *)(*v12 + 32);
    v295 = *(void *)(*v12 + 40);
    Espresso::run_pass_on_network<Espresso::pass_multi_head_program_gen>(*v12);
    v298 = v295 - v296;
    v299 = (Espresso::net *)*v12;
    v300 = *(void *)(*v12 + 40) - *(void *)(*v12 + 32);
    if (*(unsigned char *)(v432 + 56))
    {
      v301 = (void *)*v352;
      *(unsigned char *)(*(void *)(*v352 + 56) + 120) = 1;
      v302 = (atomic_ullong *)v12[1];
      v365[0] = v299;
      v365[1] = (Espresso::net *)v302;
      if (v302) {
        atomic_fetch_add_explicit(v302 + 1, 1uLL, memory_order_relaxed);
      }
      Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(v301, v365, v297, a7, v298 != v300);
      if (v302) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v302);
      }
    }
    if (v298 != v300)
    {
      v303 = *v12;
      v364[0] = 0;
      v364[1] = 0;
      Espresso::net::setup_script(v303, v364, *(unsigned int *)(**(void **)(v303 + 32) + 12));
    }
  }
LABEL_957:
  std::string::basic_string[abi:ne180100]<0>(&v415, "skip_script_setup");
  if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v349 + 24))(v349, &v415))
  {
    std::string::basic_string[abi:ne180100]<0>(v435, "skip_script_setup");
    v305 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v349 + 88))(v349, v435);
    if ((v435[23] & 0x80000000) != 0) {
      operator delete(*(void **)v435);
    }
  }
  else
  {
    v305 = 0;
  }
  if (SHIBYTE(v415.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v415.__r_.__value_.__l.__data_);
  }
  v306 = (Espresso::net *)*v12;
  if (!*(void *)(*v12 + 968))
  {
    v307 = Espresso::net::needs_interpreter(v306) ^ 1 | v305;
    v306 = (Espresso::net *)*v12;
    if ((v307 & 1) == 0)
    {
      Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v306);
      v308 = *v12;
      v360[0] = 0;
      v360[1] = 0;
      Espresso::net::setup_script(v308, v360, a7);
      v306 = (Espresso::net *)*v12;
    }
  }
  Espresso::net::_tag_inputs_and_outputs(v306);
  if (*(unsigned char *)(v432 + 55))
  {
    v309 = (char *)operator new(0x98uLL);
    *((void *)v309 + 1) = 0;
    *((void *)v309 + 2) = 0;
    *(void *)v309 = &unk_1EE389648;
    *(_OWORD *)(v309 + 72) = 0u;
    *(_OWORD *)(v309 + 56) = 0u;
    *(_OWORD *)(v309 + 24) = 0u;
    *(_OWORD *)(v309 + 88) = 0u;
    *((void *)v309 + 10) = v309 + 88;
    *((void *)v309 + 14) = 0;
    *(_OWORD *)(v309 + 40) = 0u;
    *((void *)v309 + 13) = v309 + 112;
    *((void *)v309 + 18) = 0;
    *((void *)v309 + 17) = 0;
    *((void *)v309 + 15) = 0;
    *((void *)v309 + 16) = v309 + 136;
    v310 = *v12;
    *(void *)(v310 + 1288) = v309 + 24;
    v311 = *(std::__shared_weak_count **)(v310 + 1296);
    *(void *)(v310 + 1296) = v309;
    if (v311) {
      nitro::nitro_function::nitro_function(v311);
    }
    v312 = *(void *)(*v12 + 1288);
    v314 = *v343;
    v313 = v343[1];
    if (v313) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v313 + 8), 1uLL, memory_order_relaxed);
    }
    v315 = *(std::__shared_weak_count **)(v312 + 8);
    *(void *)v312 = v314;
    *(void *)(v312 + 8) = v313;
    if (v315) {
      nitro::nitro_function::nitro_function(v315);
    }
    *(_DWORD *)(v312 + 48) = a7;
    v317 = *v352;
    v316 = v352[1];
    if (v316) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v316 + 8), 1uLL, memory_order_relaxed);
    }
    v318 = *(std::__shared_weak_count **)(v312 + 24);
    *(void *)(v312 + 16) = v317;
    *(void *)(v312 + 24) = v316;
    if (v318) {
      nitro::nitro_function::nitro_function(v318);
    }
    v320 = *a4;
    v319 = a4[1];
    if (v319) {
      atomic_fetch_add_explicit(v319 + 1, 1uLL, memory_order_relaxed);
    }
    v321 = *(std::__shared_weak_count **)(v312 + 40);
    *(void *)(v312 + 32) = v320;
    *(void *)(v312 + 40) = v319;
    if (v321) {
      nitro::nitro_function::nitro_function(v321);
    }
    *(unsigned char *)(v312 + 52) = a5;
    if (v312 + 56 != v344)
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v312 + 56), *(long long **)v344, (long long *)(v344 + 8));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)(v312 + 80), *(long long **)(v344 + 24), (long long *)(v344 + 32));
    }
    v322 = *v12;
    if (v312 + 104 != *v12 + 776)
    {
      std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)(v312 + 104), *(uint64_t **)(v322 + 776), (uint64_t *)(v322 + 784));
      v322 = *v12;
    }
    Espresso::net::infer_configuration_for_shapes((Espresso::net *)v322, (const Espresso::network_shape *)v344, (uint64_t)&v415);
    std::string::basic_string[abi:ne180100]<0>(&v413, "default");
    v323 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(v312 + 104, &__str, &v413);
    v324 = (char *)*v323;
    if (!*v323)
    {
      v325 = (uint64_t **)v323;
      v324 = (char *)operator new(0x68uLL);
      *(void *)&v435[8] = v312 + 112;
      *((_OWORD *)v324 + 2) = *(_OWORD *)&v413.__r_.__value_.__l.__data_;
      v326 = v413.__r_.__value_.__r.__words[2];
      memset(&v413, 0, sizeof(v413));
      *((void *)v324 + 6) = v326;
      *((void *)v324 + 7) = 0;
      *((void *)v324 + 8) = 0;
      *((void *)v324 + 9) = 0;
      *((void *)v324 + 12) = 0;
      *((void *)v324 + 11) = 0;
      *((void *)v324 + 10) = v324 + 88;
      v435[16] = 1;
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)(v312 + 104), (uint64_t)__str.__r_.__value_.__l.__data_, v325, (uint64_t *)v324);
      *(void *)v435 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *>>>>::reset[abi:ne180100]((uint64_t)v435);
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v324 + 56));
    *(_OWORD *)(v324 + 56) = *(_OWORD *)&v415.__r_.__value_.__l.__data_;
    v328 = (char *)*((void *)v324 + 11);
    v327 = v324 + 88;
    *(v327 - 2) = *((void *)&v415.__r_.__value_.__l + 2);
    memset(&v415, 0, sizeof(v415));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)(v327 - 1), v328);
    v329 = v417;
    *(v327 - 1) = v416;
    *v327 = v329;
    v330 = *((void *)&v417 + 1);
    v327[1] = *((void *)&v417 + 1);
    if (v330)
    {
      *(void *)(v329 + 16) = v327;
      v416 = (std::__shared_weak_count *)&v417;
      v417 = 0uLL;
      v329 = 0;
    }
    else
    {
      *(v327 - 1) = v327;
    }
    if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v413.__r_.__value_.__l.__data_);
      v329 = v417;
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v416, (char *)v329);
    *(void *)v435 = &v415;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v435);
  }
  (*(void (**)(void))(**(void **)(*v12 + 16) + 160))(*(void *)(*v12 + 16));
  v331 = *(void *)(*v12 + 1256);
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 160))(v331);
  }
  if (v428.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v428.__r_.__value_.__l.__size_);
  }
  v415.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v415);
  if (*((void *)&v431 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v431 + 1));
  }
  if (v433) {
    nitro::nitro_function::nitro_function(v433);
  }
}

void sub_1921CB7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3EF]) < 0) {
    operator delete((void *)STACK[0x3D8]);
  }
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  if (*(char *)(v30 - 169) < 0) {
    operator delete(*(void **)(v30 - 192));
  }
  if (SLOBYTE(STACK[0x407]) < 0)
  {
    operator delete((void *)STACK[0x3F0]);
    if ((v28 & 1) == 0)
    {
LABEL_14:
      if (*(char *)(v30 - 137) < 0) {
        operator delete(*(void **)(v30 - 160));
      }
      if (STACK[0x418]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x418]);
      }
      if (SLOBYTE(STACK[0x43F]) < 0) {
        operator delete((void *)STACK[0x428]);
      }
      if (SLOBYTE(STACK[0x457]) < 0) {
        operator delete((void *)STACK[0x440]);
      }
      if (SLOBYTE(STACK[0x46F]) < 0) {
        operator delete((void *)STACK[0x458]);
      }
      if (a28) {
        nitro::nitro_function::nitro_function(a28);
      }
      STACK[0x380] = v30 - 256;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x380]);
      unint64_t v32 = *(std::__shared_weak_count **)(v30 - 216);
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
      unint64_t v33 = *(std::__shared_weak_count **)(v30 - 200);
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v29);
  goto LABEL_14;
}

void Espresso::BNNSEngine::context::network_transform_post_load(Espresso::BNNSEngine::context *this, Espresso::net *a2)
{
  if ((***((unsigned int (****)(void))this + 1))(*((void *)this + 1)) != 80000 && *((unsigned char *)this + 54))
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(&v8, (uint64_t)a2);
    uint64_t v4 = v8;
    if (!v8
      || (unsigned int v5 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1)),
          !Espresso::analysis_pass_insert_casts::has_platform(v4, v5)))
    {
      int v6 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
      uint64_t v7 = operator new(0x28uLL);
      v7[1] = 0;
      v7[2] = 0;
      *uint64_t v7 = &unk_1EE388068;
      v7[3] = &unk_1EE35CD30;
      *((_DWORD *)v7 + 8) = v6;
      Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>();
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
}

void sub_1921CC440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  nitro::nitro_function::nitro_function(v12);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::context::network_transform_post_load(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  long long v92 = 0u;
  long long v93 = 0u;
  int v94 = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, &v92, (uint64_t)v95);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v92);
  unint64_t v3 = (char *)&v92 + 8;
  *(void *)&long long v93 = 0;
  unint64_t v91 = 0;
  long long v92 = (unint64_t)&v92 + 8;
  uint64_t v4 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) == v4) {
    goto LABEL_117;
  }
  unint64_t v5 = 0;
  int v6 = (char *)a2 + 96;
  uint64_t v84 = (char *)a2 + 56;
  do
  {
    uint64_t v7 = *(void *)(v4 + 16 * v5);
    uint64_t v8 = (void *)(v7 + 40);
    int v9 = *(char *)(v7 + 63);
    if (v9 < 0)
    {
      if (*(void *)(v7 + 48) != 4) {
        goto LABEL_109;
      }
      uint64_t v8 = (void *)*v8;
    }
    else if (v9 != 4)
    {
      goto LABEL_109;
    }
    if (*(_DWORD *)v8 == 1953718627)
    {
      uint64_t v87 = &v91;
      unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
      if (v10[4] - v10[3] == 24)
      {
        uint64_t v87 = &v91;
        unint64_t v11 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87)[3];
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 30), v11))
        {
          uint64_t v87 = (unint64_t *)v11;
          uint8x8_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v11, (long long **)&v87);
          if (*((void *)v12 + 6) - *((void *)v12 + 5) <= 8uLL)
          {
            uint64_t v87 = &v91;
            uint64_t v13 = (unint64_t *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v91, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87)[3];
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v95, (unsigned __int8 *)v13))
            {
              uint64_t v87 = v13;
              size_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v13, (long long **)&v87);
              if (*((void *)v14 + 6) - *((void *)v14 + 5) == 8)
              {
                unint64_t v90 = 0;
                uint64_t v87 = v13;
                unint64_t v90 = **((void **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v13, (long long **)&v87)+ 5);
                uint64_t v15 = *(void *)(*((void *)a2 + 4) + 16 * v90);
                uint64_t v16 = (void *)(v15 + 40);
                int v17 = *(char *)(v15 + 63);
                if (v17 < 0)
                {
                  if (*(void *)(v15 + 48) != 16) {
                    goto LABEL_109;
                  }
                  uint64_t v16 = (void *)*v16;
                }
                else if (v17 != 16)
                {
                  goto LABEL_109;
                }
                uint64_t v19 = (void *)*v16;
                uint64_t v18 = v16[1];
                BOOL v20 = v19 == (void *)0x5F747865746E6F63 && v18 == 0x726566736E617274;
                if (v20)
                {
                  uint64_t v87 = &v90;
                  v82 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v90, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
                  uint64_t v87 = &v90;
                  uint64_t v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, &v90, (uint64_t)&std::piecewise_construct, (uint64_t **)&v87);
                  uint64_t v80 = v13;
                  uint64_t v87 = 0;
                  BOOL v88 = 0;
                  uint64_t v89 = 0;
                  std::vector<unsigned long>::reserve((void **)&v87, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21[4] - v21[3]) >> 3));
                  uint64_t v78 = v6;
                  uint64_t v79 = v3;
                  unint64_t v86 = 0;
                  v81 = v21;
                  uint64_t v24 = v21 + 3;
                  uint64_t v23 = v21[3];
                  uint64_t v22 = v24[1];
                  if (v22 == v23)
                  {
LABEL_75:
                    uint64_t v54 = *((void *)a2 + 4);
                    uint64_t v55 = *(char **)(*(void *)(v54 + 16 * v90) + 64);
                    uint64_t v56 = *(void *)(*(void *)(v54 + 16 * v91) + 64);
                    uint64_t v57 = (uint64_t *)operator new(8uLL);
                    *uint64_t v57 = v56;
                    v85[1] = v57 + 1;
                    v85[2] = v57 + 1;
                    v85[0] = v57;
                    Espresso::merge_kernel_attributes(v55, (uint64_t *)v85);
                    unint64_t v3 = v79;
                    operator delete(v57);
                    int v58 = (uint64_t *)*((void *)&v92 + 1);
                    int v59 = (uint64_t **)v79;
                    uint64_t v60 = (uint64_t **)v79;
                    if (*((void *)&v92 + 1))
                    {
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v60 = (uint64_t **)v58;
                          unint64_t v61 = v58[4];
                          if (v91 <= v61) {
                            break;
                          }
                          int v58 = *v60;
                          int v59 = v60;
                          if (!*v60) {
                            goto LABEL_82;
                          }
                        }
                        if (v61 <= v91) {
                          break;
                        }
                        int v58 = v60[1];
                        if (!v58)
                        {
                          int v59 = v60 + 1;
                          goto LABEL_82;
                        }
                      }
                    }
                    else
                    {
LABEL_82:
                      uint64_t v62 = (uint64_t *)operator new(0x28uLL);
                      v62[4] = v91;
                      *uint64_t v62 = 0;
                      v62[1] = 0;
                      v62[2] = (uint64_t)v60;
                      *int v59 = v62;
                      if (*(void *)v92)
                      {
                        *(void *)&long long v92 = *(void *)v92;
                        uint64_t v62 = *v59;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v92 + 1), v62);
                      *(void *)&long long v93 = v93 + 1;
                    }
                    uint64_t v64 = v87;
                    uint64_t v63 = v88;
                    if (v87 != v88)
                    {
                      do
                      {
                        unint64_t v65 = *v64;
                        uint64_t v66 = v81[4];
                        uint64_t v67 = v81[3] + 24 * *v64;
                        uint64_t v68 = v67 + 24;
                        if (v67 + 24 != v66)
                        {
                          do
                          {
                            if (*(char *)(v67 + 23) < 0) {
                              operator delete(*(void **)v67);
                            }
                            *(_OWORD *)uint64_t v67 = *(_OWORD *)(v67 + 24);
                            *(void *)(v67 + 16) = *(void *)(v67 + 40);
                            *(unsigned char *)(v67 + 47) = 0;
                            uint64_t v69 = v67 + 48;
                            *(unsigned char *)(v67 + 24) = 0;
                            v67 += 24;
                          }
                          while (v69 != v66);
                          uint64_t v68 = v81[4];
                        }
                        while (v68 != v67)
                        {
                          if (*(char *)(v68 - 1) < 0) {
                            operator delete(*(void **)(v68 - 24));
                          }
                          v68 -= 24;
                        }
                        v81[4] = v67;
                        uint64_t v70 = v82[4];
                        uint64_t v71 = v82[3] + 24 * v65;
                        uint64_t v72 = v71 + 24;
                        if (v71 + 24 != v70)
                        {
                          do
                          {
                            if (*(char *)(v71 + 23) < 0) {
                              operator delete(*(void **)v71);
                            }
                            *(_OWORD *)uint64_t v71 = *(_OWORD *)(v71 + 24);
                            *(void *)(v71 + 16) = *(void *)(v71 + 40);
                            *(unsigned char *)(v71 + 47) = 0;
                            uint64_t v73 = v71 + 48;
                            *(unsigned char *)(v71 + 24) = 0;
                            v71 += 24;
                          }
                          while (v73 != v70);
                          uint64_t v72 = v82[4];
                        }
                        while (v72 != v71)
                        {
                          if (*(char *)(v72 - 1) < 0) {
                            operator delete(*(void **)(v72 - 24));
                          }
                          v72 -= 24;
                        }
                        v82[4] = v71;
                        ++v64;
                      }
                      while (v64 != v63);
                      uint64_t v64 = v87;
                    }
                    if (v64)
                    {
                      BOOL v88 = v64;
                      operator delete(v64);
                    }
                    int v6 = v78;
                    goto LABEL_109;
                  }
                  unint64_t v25 = 0;
                  while (1)
                  {
                    uint64_t v26 = v23 + 24 * v25;
                    uint64_t v27 = *(unsigned __int8 *)(v26 + 23);
                    if ((v27 & 0x80u) == 0) {
                      uint64_t v28 = *(unsigned __int8 *)(v26 + 23);
                    }
                    else {
                      uint64_t v28 = *(void *)(v26 + 8);
                    }
                    unint64_t v29 = *((unsigned __int8 *)v80 + 23);
                    int v30 = (char)v29;
                    if ((v29 & 0x80u) != 0) {
                      unint64_t v29 = v80[1];
                    }
                    if (v28 == v29)
                    {
                      uint64_t v31 = v82[3];
                      if (v30 >= 0) {
                        unint64_t v32 = (unsigned __int8 *)v80;
                      }
                      else {
                        unint64_t v32 = (unsigned __int8 *)*v80;
                      }
                      if ((v27 & 0x80) != 0)
                      {
                        if (memcmp(*(const void **)v26, v32, *(void *)(v26 + 8))) {
                          goto LABEL_74;
                        }
                      }
                      else if (*(unsigned char *)(v26 + 23))
                      {
                        uint64_t v33 = 24 * v25;
                        do
                        {
                          if (*(unsigned __int8 *)(v23 + v33) != *v32) {
                            goto LABEL_74;
                          }
                          ++v32;
                          ++v33;
                          --v27;
                        }
                        while (v27);
                      }
                      v34 = (uint64_t *)(v31 + 24 * v25);
                      v85[0] = v34;
                      int8x8_t v35 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v95, (unsigned __int8 *)v34, (long long **)v85);
                      uint8x8_t v37 = (uint64_t *)*((void *)v35 + 5);
                      unint64_t v36 = (uint64_t *)*((void *)v35 + 6);
                      int v83 = v36;
LABEL_43:
                      if (v37 != v36)
                      {
                        v85[0] = v37;
                        uint64_t v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v84, (unint64_t *)v37, (uint64_t)&std::piecewise_construct, v85);
                        uint64_t v39 = v38[3];
                        uint64_t v40 = v38[4];
                        while (1)
                        {
                          if (v39 == v40)
                          {
                            ++v37;
                            unint64_t v36 = v83;
                            goto LABEL_43;
                          }
                          uint64_t v41 = *(unsigned __int8 *)(v39 + 23);
                          if ((v41 & 0x80u) == 0) {
                            uint64_t v42 = *(unsigned __int8 *)(v39 + 23);
                          }
                          else {
                            uint64_t v42 = *(void *)(v39 + 8);
                          }
                          uint64_t v43 = *((unsigned __int8 *)v34 + 23);
                          int v44 = (char)v43;
                          if ((v43 & 0x80u) != 0) {
                            uint64_t v43 = v34[1];
                          }
                          if (v42 == v43)
                          {
                            if (v44 >= 0) {
                              uint64_t v45 = (unsigned __int8 *)v34;
                            }
                            else {
                              uint64_t v45 = (unsigned __int8 *)*v34;
                            }
                            if ((v41 & 0x80) != 0)
                            {
                              if (memcmp(*(const void **)v39, v45, *(void *)(v39 + 8))) {
                                goto LABEL_71;
                              }
LABEL_62:
                              std::string::operator=((std::string *)v39, v11);
                              if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), v11))
                              {
                                v85[0] = v34;
                                int v47 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (long long **)v85)+ 16);
                                v85[0] = (uint64_t *)v11;
                                uint64_t v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (long long **)v85);
                              }
                              else
                              {
                                v85[0] = (uint64_t *)v11;
                                uint64_t v49 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (long long **)v85);
                                *((_DWORD *)v49 + 14) = 1065353216;
                                *(void *)(v49 + 60) = 0xFFFFFFFF00000000;
                                *((_DWORD *)v49 + 17) = 1;
                                uint64_t v51 = v49 + 72;
                                uint64_t v50 = (void *)*((void *)v49 + 9);
                                if (v50)
                                {
                                  *((void *)v49 + 10) = v50;
                                  operator delete(v50);
                                  *uint64_t v51 = 0;
                                  v51[1] = 0;
                                  v51[2] = 0;
                                }
                                *uint64_t v51 = 0;
                                v51[1] = 0;
                                v51[2] = 0;
                                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), v34))
                                {
                                  v85[0] = v34;
                                  int v47 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (long long **)v85)+ 16);
                                  v85[0] = v34;
                                  float v52 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (long long **)v85)+ 14);
                                  v85[0] = v34;
                                  int v53 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (long long **)v85)+ 15);
                                }
                                else
                                {
                                  int v53 = 0;
                                  int v47 = -1;
                                  float v52 = 1.0;
                                }
                                v85[0] = (uint64_t *)v11;
                                uint64_t v48 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v11, (uint64_t)&std::piecewise_construct, (long long **)v85);
                                *((float *)v48 + 14) = v52;
                                *((_DWORD *)v48 + 15) = v53;
                              }
                              *((_DWORD *)v48 + 16) = v47;
                              goto LABEL_71;
                            }
                            if (!*(unsigned char *)(v39 + 23)) {
                              goto LABEL_62;
                            }
                            uint64_t v46 = 0;
                            while (*(unsigned __int8 *)(v39 + v46) == v45[v46])
                            {
                              if (v41 == ++v46) {
                                goto LABEL_62;
                              }
                            }
                          }
LABEL_71:
                          v39 += 24;
                        }
                      }
                      std::vector<unsigned long>::insert((void **)&v87, v87, (char *)&v86);
                      unint64_t v25 = v86;
                      uint64_t v23 = v81[3];
                      uint64_t v22 = v81[4];
                    }
LABEL_74:
                    unint64_t v86 = ++v25;
                    if (v25 >= 0xAAAAAAAAAAAAAAABLL * ((v22 - v23) >> 3)) {
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_109:
    unint64_t v5 = v91 + 1;
    unint64_t v91 = v5;
    uint64_t v4 = *((void *)a2 + 4);
  }
  while (v5 < (*((void *)a2 + 5) - v4) >> 4);
  uint64_t v74 = (char *)v92;
  if ((char *)v92 != v3)
  {
    do
    {
      Espresso::net::remove_layer(a2, *((_DWORD *)v74 + 8));
      int v75 = (char *)*((void *)v74 + 1);
      if (v75)
      {
        do
        {
          uint64_t v76 = v75;
          int v75 = *(char **)v75;
        }
        while (v75);
      }
      else
      {
        do
        {
          uint64_t v76 = (char *)*((void *)v74 + 2);
          BOOL v20 = *(void *)v76 == (void)v74;
          uint64_t v74 = v76;
        }
        while (!v20);
      }
      uint64_t v74 = v76;
    }
    while (v76 != v3);
  }
LABEL_117:
  std::__tree<int>::destroy(*((void **)&v92 + 1));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v95[2]);
  uint64_t v77 = (void *)v95[0];
  v95[0] = 0;
  if (v77) {
    operator delete(v77);
  }
}

void sub_1921CCD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  operator delete(v26);
  if (__p) {
    operator delete(__p);
  }
  std::__tree<int>::destroy(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table(v27 - 152);
  _Unwind_Resume(a1);
}

void Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1921CCFA0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void Espresso::inner_product_kernel_cpu::__set_weights_finalize(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 440);
  if (!v3 || !*(void *)v3) {
    return;
  }
  if (*(void *)(v3 + 32))
  {
    if (!*(_DWORD *)(*(void *)(a1 + 8) + 76)) {
      goto LABEL_14;
    }
  }
  else
  {
    if (!*(void *)(v3 + 48) && !*(void *)(v3 + 64) && !*(void *)(v3 + 80)) {
      return;
    }
    if (!*(_DWORD *)(*(void *)(a1 + 8) + 76))
    {
      if (!*(void *)(v3 + 48) && !*(void *)(v3 + 64))
      {
LABEL_15:
        if (*(int *)(v3 + 156) <= 7)
        {
          Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
        }
        return;
      }
LABEL_14:
      Espresso::quantized_weights_helper::make_fp16_lut_from_fp32((Espresso::quantized_weights_helper *)v3, a2);
      uint64_t v3 = *(void *)(a1 + 440);
      goto LABEL_15;
    }
  }
  Espresso::quantized_weights_helper::dequantize_to_float32_2d((Espresso::quantized_weights_helper *)v3, (uint64_t *)&v5);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 568);
  *(_OWORD *)(a1 + 560) = v5;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::pass_insert_casts::~pass_insert_casts(Espresso::pass_insert_casts *this)
{
  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1EE3719B0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

void Espresso::pass_insert_casts::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

void Espresso::SerDes::layer_io<Espresso::generic_general_slice_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v20 = a4;
  v11[0] = 0;
  v11[1] = 0;
  int v12 = 0;
  int v14 = 1;
  long long v13 = xmmword_192E06E0C;
  int v16 = 1;
  long long v15 = xmmword_192E06E0C;
  long long v17 = 0u;
  long long v18 = 0u;
  unint64_t v19 = 0xFFFFFFFF00000000;
  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_slice");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921CD254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::generic_inner_product_kernel::get_biases_shape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(this + 304) << (*(_DWORD *)(this + 332) != 0);
  *(void *)(a2 + 12) = 0;
  *(void *)(a2 + 4) = 0;
  *(_DWORD *)(a2 + 20) = 1;
  return this;
}

uint64_t e5rt_execution_stream_operation_retain_output_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE392318;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1921CD3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<KernelInfoT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  int v13 = 257;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (v3 >= 0x7FFFFFFB) {
    sub_192429E1C();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
LABEL_8:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v12, v10);
}

void sub_1921CD534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<KernelInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<KernelInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t KernelInfo::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  if (v12 + 1 > v15 || v13 > v14) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 >= 5)
  {
    uint64_t v23 = v21[2];
    if (v21[2])
    {
      uint64_t v24 = &v3[v23];
      BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      BOOL v26 = v25;
      if (v8 < (unint64_t)v24 || !v26) {
        return 0;
      }
    }
    if (v22 >= 7)
    {
      uint64_t v27 = v21[3];
      if (v27)
      {
        unint64_t v28 = (unint64_t)&v3[v27];
        BOOL v30 = (v28 & 3) == 0 || v4 == 0;
        if (v8 < v28 || !v30) {
          return 0;
        }
        uint64_t v31 = *(unsigned int *)(v2 + v28);
        if ((int)v31 < 1
          || v7 - 1 < v28 + v31
          || !KernelArgFrame::Verify((int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27)), a2))
        {
          return 0;
        }
        int v12 = *(_DWORD *)(a2 + 40) - 1;
      }
    }
  }
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t VerifySizePrefixedKernelInfoBuffer(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (BOOL v3 = v1 - 4 == **a1) : (BOOL v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, uint64_t v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return KernelInfo::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

void UnPackSizePrefixedKernelInfo()
{
}

void sub_1921CD830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<KernelInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void KernelInfo::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 5u)
  {
    *(_DWORD *)a2 = 0;
    uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v4 < 7u) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v3 = v2[2];
    if (v3) {
      LODWORD(v3) = *(int *)((char *)a1 + v3);
    }
    *(_DWORD *)a2 = v3;
    uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v4 < 7u) {
      goto LABEL_12;
    }
  }
  uint64_t v5 = v4[3];
  if (!v5)
  {
LABEL_12:
    BOOL v9 = *(void **)(a2 + 8);
    if (v9)
    {
      *(void *)(a2 + 8) = 0;
      uint64_t v10 = (void *)v9[11];
      if (v10)
      {
        v9[12] = v10;
        operator delete(v10);
      }
      uint64_t v11 = (void *)v9[7];
      if (v11)
      {
        v9[8] = v11;
        operator delete(v11);
      }
      int v12 = (void *)v9[4];
      if (v12)
      {
        v9[5] = v12;
        operator delete(v12);
      }
      unsigned int v13 = (void *)v9[1];
      if (v13)
      {
        v9[2] = v13;
        operator delete(v13);
      }
      JUMPOUT(0x192FF16B0);
    }
    return;
  }
  int v6 = (unsigned int *)((char *)a1 + v5);
  uint64_t v7 = *v6;
  unint64_t v8 = *(void **)(a2 + 8);
  if (!v8) {
    operator new();
  }

  KernelArgFrame::UnPackTo((int *)((char *)v6 + v7), v8);
}

void sub_1921CD9E0(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[11];
  if (v3)
  {
    v1[12] = v3;
    operator delete(v3);
  }
  sub_192429E48(v1);
  MEMORY[0x192FF16B0](v1, 0x1010C40FAD225F3);
  _Unwind_Resume(a1);
}

__n128 KernelArgFrame::UnPackTo(int *a1, void *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 <= 4)
  {
    *a2 = 0;
LABEL_9:
    uint64_t v14 = a2[1];
    if (a2[2] != v14) {
      a2[2] = v14;
    }
    goto LABEL_11;
  }
  uint64_t v6 = v4[2];
  if (v4[2]) {
    uint64_t v6 = *(void *)((char *)a1 + v6);
  }
  *a2 = v6;
  if (v5 < 7) {
    goto LABEL_9;
  }
  uint64_t v7 = v4[3];
  if (!v4[3]) {
    goto LABEL_9;
  }
  uint64_t v8 = *(unsigned int *)((char *)a1 + v7);
  uint64_t v9 = a2[1];
  uint64_t v10 = (__n128 **)(a2 + 1);
  unint64_t v11 = *(unsigned int *)((char *)a1 + v7 + v8);
  unint64_t v12 = (a2[2] - v9) >> 3;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      a2[2] = v9 + 8 * v11;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 1), v11 - v12);
    LODWORD(v11) = *(int *)((char *)a1 + v7 + v8);
  }
  if (v11)
  {
    float v52 = *v10;
    uint64_t v53 = v11;
    if (v11 < 0xA || (unint64_t)((char *)v52 - ((char *)a1 + v7) - v8 - 4) < 0x20)
    {
      uint64_t v54 = 0;
LABEL_56:
      uint64_t v55 = (uint64_t *)((char *)&a1[2 * v54 + 1] + v8 + v7);
      uint64_t v56 = &v52->n128_u64[v54];
      uint64_t v57 = v53 - v54;
      do
      {
        unint64_t v58 = *v55++;
        *v56++ = v58;
        --v57;
      }
      while (v57);
      goto LABEL_11;
    }
    uint64_t v54 = v11 & 0xFFFFFFFC;
    uint64_t v74 = (__n128 *)((char *)a1 + v8 + v7 + 20);
    int v75 = v52 + 1;
    uint64_t v76 = v53 & 0xFFFFFFFC;
    do
    {
      __n128 result = v74[-1];
      __n128 v77 = *v74;
      v75[-1] = result;
      *int v75 = v77;
      v74 += 2;
      v75 += 2;
      v76 -= 4;
    }
    while (v76);
    if (v54 != v53) {
      goto LABEL_56;
    }
  }
LABEL_11:
  unsigned int v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 >= 9u && (uint64_t v16 = v15[4]) != 0)
  {
    uint64_t v17 = *(unsigned int *)((char *)a1 + v16);
    uint64_t v18 = a2[4];
    unint64_t v19 = *(unsigned int *)((char *)a1 + v16 + v17);
    unint64_t v20 = (a2[5] - v18) >> 3;
    if (v19 <= v20)
    {
      if (v19 < v20) {
        a2[5] = v18 + 8 * v19;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 4), v19 - v20);
      LODWORD(v19) = *(int *)((char *)a1 + v16 + v17);
    }
    if (v19)
    {
      unsigned int v22 = (__n128 *)a2[4];
      uint64_t v23 = v19;
      if (v19 < 0xA || (unint64_t)((char *)v22 - ((char *)a1 + v16) - v17 - 4) < 0x20)
      {
        uint64_t v24 = 0;
LABEL_23:
        BOOL v25 = (uint64_t *)((char *)&a1[2 * v24 + 1] + v17 + v16);
        BOOL v26 = &v22->n128_u64[v24];
        uint64_t v27 = v23 - v24;
        do
        {
          unint64_t v28 = *v25++;
          *v26++ = v28;
          --v27;
        }
        while (v27);
        goto LABEL_25;
      }
      uint64_t v24 = v19 & 0xFFFFFFFC;
      uint64_t v66 = (__n128 *)((char *)a1 + v17 + v16 + 20);
      uint64_t v67 = v22 + 1;
      uint64_t v68 = v23 & 0xFFFFFFFC;
      do
      {
        __n128 result = v66[-1];
        __n128 v69 = *v66;
        v67[-1] = result;
        *uint64_t v67 = v69;
        v66 += 2;
        v67 += 2;
        v68 -= 4;
      }
      while (v68);
      if (v24 != v23) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v21 = a2[4];
    if (a2[5] != v21) {
      a2[5] = v21;
    }
  }
LABEL_25:
  unint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 >= 0xBu && (uint64_t v30 = v29[5]) != 0)
  {
    uint64_t v31 = *(unsigned int *)((char *)a1 + v30);
    uint64_t v32 = a2[7];
    unint64_t v33 = *(unsigned int *)((char *)a1 + v30 + v31);
    unint64_t v34 = (a2[8] - v32) >> 3;
    if (v33 <= v34)
    {
      if (v33 < v34) {
        a2[8] = v32 + 8 * v33;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 7), v33 - v34);
      LODWORD(v33) = *(int *)((char *)a1 + v30 + v31);
    }
    if (v33)
    {
      unint64_t v36 = (__n128 *)a2[7];
      uint64_t v37 = v33;
      if (v33 < 0xA || (unint64_t)((char *)v36 - ((char *)a1 + v30) - v31 - 4) < 0x20)
      {
        uint64_t v38 = 0;
LABEL_37:
        uint64_t v39 = (uint64_t *)((char *)&a1[2 * v38 + 1] + v31 + v30);
        uint64_t v40 = &v36->n128_u64[v38];
        uint64_t v41 = v37 - v38;
        do
        {
          unint64_t v42 = *v39++;
          *v40++ = v42;
          --v41;
        }
        while (v41);
        goto LABEL_39;
      }
      uint64_t v38 = v33 & 0xFFFFFFFC;
      uint64_t v70 = (__n128 *)((char *)a1 + v31 + v30 + 20);
      uint64_t v71 = v36 + 1;
      uint64_t v72 = v37 & 0xFFFFFFFC;
      do
      {
        __n128 result = v70[-1];
        __n128 v73 = *v70;
        v71[-1] = result;
        *uint64_t v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v38 != v37) {
        goto LABEL_37;
      }
    }
  }
  else
  {
    uint64_t v35 = a2[7];
    if (a2[8] != v35) {
      a2[8] = v35;
    }
  }
LABEL_39:
  uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v44 = *v43;
  if (v44 <= 0xC)
  {
    a2[10] = 0;
LABEL_47:
    uint64_t v51 = a2[11];
    if (a2[12] != v51) {
      a2[12] = v51;
    }
    return result;
  }
  uint64_t v45 = v43[6];
  if (v43[6]) {
    uint64_t v45 = *(void *)((char *)a1 + v45);
  }
  a2[10] = v45;
  if (v44 < 0xF) {
    goto LABEL_47;
  }
  uint64_t v46 = v43[7];
  if (!v43[7]) {
    goto LABEL_47;
  }
  uint64_t v47 = *(unsigned int *)((char *)a1 + v46);
  uint64_t v48 = a2[11];
  unint64_t v49 = *(unsigned int *)((char *)a1 + v46 + v47);
  unint64_t v50 = (a2[12] - v48) >> 3;
  if (v49 <= v50)
  {
    if (v49 < v50) {
      a2[12] = v48 + 8 * v49;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 11), v49 - v50);
    LODWORD(v49) = *(int *)((char *)a1 + v46 + v47);
  }
  if (v49)
  {
    int v59 = (__n128 *)a2[11];
    uint64_t v60 = v49;
    if (v49 < 0xA || (unint64_t)((char *)v59 - ((char *)a1 + v46) - v47 - 4) < 0x20)
    {
      uint64_t v61 = 0;
LABEL_65:
      uint64_t v62 = (uint64_t *)((char *)&a1[2 * v61 + 1] + v47 + v46);
      uint64_t v63 = &v59->n128_u64[v61];
      uint64_t v64 = v60 - v61;
      do
      {
        unint64_t v65 = *v62++;
        *v63++ = v65;
        --v64;
      }
      while (v64);
      return result;
    }
    uint64_t v61 = v49 & 0xFFFFFFFC;
    uint64_t v78 = (__n128 *)((char *)a1 + v47 + v46 + 20);
    uint64_t v79 = v59 + 1;
    uint64_t v80 = v60 & 0xFFFFFFFC;
    do
    {
      __n128 result = v78[-1];
      __n128 v81 = *v78;
      v79[-1] = result;
      *uint64_t v79 = v81;
      v78 += 2;
      v79 += 2;
      v80 -= 4;
    }
    while (v80);
    if (v61 != v60) {
      goto LABEL_65;
    }
  }
  return result;
}

void UnPackSizePrefixedFunction()
{
}

void sub_1921CDF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

__n128 Function::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = *(unsigned int *)((char *)a1 + v5);
    unint64_t v7 = *(unsigned int *)((char *)a1 + v5 + v6);
    unint64_t v8 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
    if (v7 <= v8)
    {
      if (v7 < v8) {
        *(void *)(a2 + 8) = *(void *)a2 + 8 * v7;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a2, v7 - v8);
      LODWORD(v7) = *(int *)((char *)a1 + v5 + v6);
    }
    if (v7)
    {
      uint64_t v10 = *(__n128 **)a2;
      uint64_t v11 = v7;
      if (v7 < 0xA || (unint64_t)((char *)v10 - ((char *)a1 + v5) - v6 - 4) < 0x20)
      {
        uint64_t v12 = 0;
LABEL_13:
        unsigned int v13 = (uint64_t *)((char *)&a1[2 * v12 + 1] + v6 + v5);
        uint64_t v14 = &v10->n128_u64[v12];
        uint64_t v15 = v11 - v12;
        do
        {
          unint64_t v16 = *v13++;
          *v14++ = v16;
          --v15;
        }
        while (v15);
        goto LABEL_15;
      }
      uint64_t v12 = v7 & 0xFFFFFFFC;
      uint64_t v66 = (__n128 *)((char *)a1 + v6 + v5 + 20);
      uint64_t v67 = v10 + 1;
      uint64_t v68 = v11 & 0xFFFFFFFC;
      do
      {
        __n128 result = v66[-1];
        __n128 v69 = *v66;
        v67[-1] = result;
        *uint64_t v67 = v69;
        v66 += 2;
        v67 += 2;
        v68 -= 4;
      }
      while (v68);
      if (v12 != v11) {
        goto LABEL_13;
      }
    }
  }
  else if (*(void *)(a2 + 8) != *(void *)a2)
  {
    *(void *)(a2 + 8) = *(void *)a2;
  }
LABEL_15:
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 7u && (uint64_t v18 = v17[3]) != 0)
  {
    uint64_t v19 = *(unsigned int *)((char *)a1 + v18);
    uint64_t v20 = *(void *)(a2 + 24);
    unint64_t v21 = *(unsigned int *)((char *)a1 + v18 + v19);
    unint64_t v22 = (*(void *)(a2 + 32) - v20) >> 3;
    if (v21 <= v22)
    {
      if (v21 < v22) {
        *(void *)(a2 + 32) = v20 + 8 * v21;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a2 + 24, v21 - v22);
      LODWORD(v21) = *(int *)((char *)a1 + v18 + v19);
    }
    if (v21)
    {
      uint64_t v24 = *(__n128 **)(a2 + 24);
      uint64_t v25 = v21;
      if (v21 < 0xA || (unint64_t)((char *)v24 - ((char *)a1 + v18) - v19 - 4) < 0x20)
      {
        uint64_t v26 = 0;
LABEL_27:
        uint64_t v27 = (uint64_t *)((char *)&a1[2 * v26 + 1] + v19 + v18);
        unint64_t v28 = &v24->n128_u64[v26];
        uint64_t v29 = v25 - v26;
        do
        {
          unint64_t v30 = *v27++;
          *v28++ = v30;
          --v29;
        }
        while (v29);
        goto LABEL_29;
      }
      uint64_t v26 = v21 & 0xFFFFFFFC;
      uint64_t v70 = (__n128 *)((char *)a1 + v19 + v18 + 20);
      uint64_t v71 = v24 + 1;
      uint64_t v72 = v25 & 0xFFFFFFFC;
      do
      {
        __n128 result = v70[-1];
        __n128 v73 = *v70;
        v71[-1] = result;
        *uint64_t v71 = v73;
        v70 += 2;
        v71 += 2;
        v72 -= 4;
      }
      while (v72);
      if (v26 != v25) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v23 = *(void *)(a2 + 24);
    if (*(void *)(a2 + 32) != v23) {
      *(void *)(a2 + 32) = v23;
    }
  }
LABEL_29:
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0)
  {
    unint64_t v33 = (int *)((char *)a1 + v32 + *(unsigned int *)((char *)a1 + v32));
    unint64_t v34 = *v33;
    uint64_t v35 = *(void *)(a2 + 48);
    unint64_t v36 = (*(void *)(a2 + 56) - v35) >> 3;
    if (v34 <= v36)
    {
      if (v34 < v36) {
        std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](a2 + 48, (void *)(v35 + 8 * v34));
      }
    }
    else
    {
      std::vector<std::unique_ptr<BlockT>>::__append((void *)(a2 + 48), v34 - v36);
    }
    if (*v33)
    {
      unint64_t v38 = 0;
      uint64_t v39 = v33 + 1;
      do
      {
        uint64_t v40 = *(__n128 ***)(*(void *)(a2 + 48) + 8 * v38);
        if (!v40) {
          operator new();
        }
        result.n128_u64[0] = Block::UnPackTo((int *)((char *)v39 + *v39), v40).n128_u64[0];
        ++v38;
        ++v39;
      }
      while (v38 < *v33);
    }
  }
  else
  {
    uint64_t v37 = *(void **)(a2 + 48);
    if (*(void **)(a2 + 56) != v37) {
      std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](a2 + 48, v37);
    }
  }
  uint64_t v41 = *a1;
  uint64_t v42 = -v41;
  uint64_t v43 = (unsigned __int16 *)((char *)a1 - v41);
  if (*v43 >= 0xBu)
  {
    uint64_t v44 = v43[5];
    if (v44)
    {
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = *(unsigned int *)((char *)a1 + v44);
      uint64_t v48 = &v45[v46 + 4];
      size_t v47 = *(unsigned int *)&v45[v46];
      if (v47 >= 0x17)
      {
        if ((v47 | 7) == 0x17) {
          uint64_t v58 = (v47 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v58 = v47 | 7;
        }
        p_dst = (long long *)operator new(v58 + 1);
        *((void *)&__dst + 1) = v47;
        uint64_t v79 = v58 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v79) = *(_DWORD *)&v45[v46];
        p_dst = &__dst;
        if (!v47)
        {
          *((unsigned char *)&__dst + v47) = 0;
          uint64_t v50 = a2 + 72;
          if ((*(char *)(a2 + 95) & 0x80000000) == 0)
          {
LABEL_47:
            result.n128_u64[0] = __dst;
            *(_OWORD *)uint64_t v50 = __dst;
            *(void *)(v50 + 16) = v79;
            uint64_t v42 = -(uint64_t)*a1;
            goto LABEL_48;
          }
LABEL_59:
          operator delete(*(void **)v50);
          goto LABEL_47;
        }
      }
      memcpy(p_dst, v48, v47);
      *((unsigned char *)p_dst + v47) = 0;
      uint64_t v50 = a2 + 72;
      if ((*(char *)(a2 + 95) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      goto LABEL_59;
    }
  }
LABEL_48:
  uint64_t v51 = (unsigned __int16 *)((char *)a1 + v42);
  if (*v51 >= 0xDu && (uint64_t v52 = v51[6]) != 0)
  {
    uint64_t v53 = *(unsigned int *)((char *)a1 + v52);
    uint64_t v54 = *(void *)(a2 + 96);
    unint64_t v55 = *(unsigned int *)((char *)a1 + v52 + v53);
    unint64_t v56 = (*(void *)(a2 + 104) - v54) >> 3;
    if (v55 <= v56)
    {
      if (v55 < v56) {
        *(void *)(a2 + 104) = v54 + 8 * v55;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append(a2 + 96, v55 - v56);
      LODWORD(v55) = *(int *)((char *)a1 + v52 + v53);
    }
    if (v55)
    {
      int v59 = *(__n128 **)(a2 + 96);
      uint64_t v60 = v55;
      if (v55 < 0xA || (unint64_t)((char *)v59 - ((char *)a1 + v52 + v53) - 4) < 0x20)
      {
        uint64_t v61 = 0;
LABEL_66:
        uint64_t v62 = (uint64_t *)((char *)&a1[2 * v61 + 1] + v53 + v52);
        uint64_t v63 = &v59->n128_u64[v61];
        uint64_t v64 = v60 - v61;
        do
        {
          unint64_t v65 = *v62++;
          *v63++ = v65;
          --v64;
        }
        while (v64);
        return result;
      }
      uint64_t v61 = v55 & 0xFFFFFFFC;
      uint64_t v74 = (__n128 *)((char *)a1 + v53 + v52 + 20);
      int v75 = v59 + 1;
      uint64_t v76 = v60 & 0xFFFFFFFC;
      do
      {
        __n128 result = v74[-1];
        __n128 v77 = *v74;
        v75[-1] = result;
        *int v75 = v77;
        v74 += 2;
        v75 += 2;
        v76 -= 4;
      }
      while (v76);
      if (v61 != v60) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    uint64_t v57 = *(void *)(a2 + 96);
    if (*(void *)(a2 + 104) != v57) {
      *(void *)(a2 + 104) = v57;
    }
  }
  return result;
}

void sub_1921CE4DC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }
  sub_19243EDA8(v1);
  MEMORY[0x192FF16B0](v1, 0x10C40F9E379B3);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<BlockT>>::__append(void *a1, unint64_t a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    unint64_t v7 = (char *)*a1;
    uint64_t v8 = (uint64_t)&v5[-*a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v4 - v7) >> 2 > v10) {
      unint64_t v10 = (v4 - v7) >> 2;
    }
    if ((unint64_t)(v4 - v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v32 = a1 + 2;
    uint64_t v28 = v8;
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unsigned int v13 = &v12[8 * v9];
    uint64_t v14 = &v12[8 * v11];
    uint64_t v31 = v14;
    size_t v15 = 8 * a2;
    bzero(v13, v15);
    unint64_t v16 = &v13[v15];
    v30.i64[1] = (uint64_t)&v13[v15];
    uint64_t v17 = (char *)(v5 - v7);
    if (v5 == v7)
    {
      int64x2_t v27 = vdupq_n_s64((unint64_t)v5);
    }
    else
    {
      uint64_t v18 = v17 - 8;
      if ((unint64_t)(v17 - 8) < 0x78
        || &v5[-((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v13
        && &v12[v28 - ((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_32;
      }
      uint64_t v19 = ((unint64_t)v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v13 -= v20;
      uint64_t v6 = &v5[-v20];
      unint64_t v21 = v5 - 16;
      unint64_t v22 = &v12[8 * v9 - 16];
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *((_OWORD *)v21 - 1);
        long long v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)unint64_t v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)unint64_t v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v26 = *((void *)v6 - 1);
          v6 -= 8;
          *(void *)uint64_t v6 = 0;
          *((void *)v13 - 1) = v26;
          v13 -= 8;
        }
        while (v6 != v7);
      }
      int64x2_t v27 = *(int64x2_t *)a1;
      uint64_t v4 = (char *)a1[2];
      unint64_t v16 = (char *)v30.i64[1];
      uint64_t v14 = v31;
    }
    *a1 = v13;
    a1[1] = v16;
    int64x2_t v30 = v27;
    a1[2] = v14;
    uint64_t v31 = v4;
    std::string __p = (void *)v27.i64[0];
    std::__split_buffer<std::unique_ptr<BlockT>>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v27.i64[0]);
    if (__p) {
      operator delete(__p);
    }
  }
}

uint64_t std::__split_buffer<std::unique_ptr<BlockT>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t v5 = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (v5)
      {
        uint64_t v6 = *(void **)(v5 + 72);
        if (v6)
        {
          *(void *)(v5 + 80) = v6;
          operator delete(v6);
        }
        unint64_t v7 = *(void **)(v5 + 48);
        if (v7)
        {
          *(void *)(v5 + 56) = v7;
          operator delete(v7);
        }
        uint64_t v8 = *(void **)(v5 + 24);
        if (v8)
        {
          *(void *)(v5 + 32) = v8;
          operator delete(v8);
        }
        uint64_t v9 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v9;
          operator delete(v9);
        }
        __n128 result = MEMORY[0x192FF16B0](v5, 0x10C40F9E379B3);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

__n128 Block::UnPackTo(int *a1, __n128 **a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = *(unsigned int *)((char *)a1 + v5);
    unint64_t v7 = *(unsigned int *)((char *)a1 + v5 + v6);
    unint64_t v8 = ((char *)a2[1] - (char *)*a2) >> 3;
    if (v7 <= v8)
    {
      if (v7 < v8) {
        a2[1] = (__n128 *)((char *)*a2 + 8 * v7);
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)a2, v7 - v8);
      LODWORD(v7) = *(int *)((char *)a1 + v5 + v6);
    }
    if (v7)
    {
      unint64_t v10 = *a2;
      uint64_t v11 = v7;
      if (v7 < 0xA || (unint64_t)((char *)v10 - ((char *)a1 + v5) - v6 - 4) < 0x20)
      {
        uint64_t v12 = 0;
LABEL_13:
        unsigned int v13 = (uint64_t *)((char *)&a1[2 * v12 + 1] + v6 + v5);
        uint64_t v14 = &v10->n128_u64[v12];
        uint64_t v15 = v11 - v12;
        do
        {
          unint64_t v16 = *v13++;
          *v14++ = v16;
          --v15;
        }
        while (v15);
        goto LABEL_15;
      }
      uint64_t v12 = v7 & 0xFFFFFFFC;
      int v59 = (__n128 *)((char *)a1 + v6 + v5 + 20);
      uint64_t v60 = v10 + 1;
      uint64_t v61 = v11 & 0xFFFFFFFC;
      do
      {
        __n128 result = v59[-1];
        __n128 v62 = *v59;
        v60[-1] = result;
        *uint64_t v60 = v62;
        v59 += 2;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      if (v12 != v11) {
        goto LABEL_13;
      }
    }
  }
  else if (a2[1] != *a2)
  {
    a2[1] = *a2;
  }
LABEL_15:
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 7u && (uint64_t v18 = v17[3]) != 0)
  {
    uint64_t v19 = *(unsigned int *)((char *)a1 + v18);
    uint64_t v20 = a2[3];
    unint64_t v21 = *(unsigned int *)((char *)a1 + v18 + v19);
    unint64_t v22 = ((char *)a2[4] - (char *)v20) >> 3;
    if (v21 <= v22)
    {
      if (v21 < v22) {
        a2[4] = (__n128 *)((char *)v20 + 8 * v21);
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 3), v21 - v22);
      LODWORD(v21) = *(int *)((char *)a1 + v18 + v19);
    }
    if (v21)
    {
      long long v24 = a2[3];
      uint64_t v25 = v21;
      if (v21 < 0xA || (unint64_t)((char *)v24 - ((char *)a1 + v18) - v19 - 4) < 0x20)
      {
        uint64_t v26 = 0;
LABEL_27:
        int64x2_t v27 = (uint64_t *)((char *)&a1[2 * v26 + 1] + v19 + v18);
        uint64_t v28 = &v24->n128_u64[v26];
        uint64_t v29 = v25 - v26;
        do
        {
          unint64_t v30 = *v27++;
          *v28++ = v30;
          --v29;
        }
        while (v29);
        goto LABEL_29;
      }
      uint64_t v26 = v21 & 0xFFFFFFFC;
      uint64_t v63 = (__n128 *)((char *)a1 + v19 + v18 + 20);
      uint64_t v64 = v24 + 1;
      uint64_t v65 = v25 & 0xFFFFFFFC;
      do
      {
        __n128 result = v63[-1];
        __n128 v66 = *v63;
        v64[-1] = result;
        *uint64_t v64 = v66;
        v63 += 2;
        v64 += 2;
        v65 -= 4;
      }
      while (v65);
      if (v26 != v25) {
        goto LABEL_27;
      }
    }
  }
  else
  {
    uint64_t v23 = a2[3];
    if (a2[4] != v23) {
      a2[4] = v23;
    }
  }
LABEL_29:
  uint64_t v31 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0)
  {
    uint64_t v33 = *(unsigned int *)((char *)a1 + v32);
    unint64_t v34 = a2[6];
    unint64_t v35 = *(unsigned int *)((char *)a1 + v32 + v33);
    unint64_t v36 = ((char *)a2[7] - (char *)v34) >> 3;
    if (v35 <= v36)
    {
      if (v35 < v36) {
        a2[7] = (__n128 *)((char *)v34 + 8 * v35);
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 6), v35 - v36);
      LODWORD(v35) = *(int *)((char *)a1 + v32 + v33);
    }
    if (v35)
    {
      unint64_t v38 = a2[6];
      uint64_t v39 = v35;
      if (v35 < 0xA || (unint64_t)((char *)v38 - ((char *)a1 + v32) - v33 - 4) < 0x20)
      {
        uint64_t v40 = 0;
LABEL_41:
        uint64_t v41 = (uint64_t *)((char *)&a1[2 * v40 + 1] + v33 + v32);
        uint64_t v42 = &v38->n128_u64[v40];
        uint64_t v43 = v39 - v40;
        do
        {
          unint64_t v44 = *v41++;
          *v42++ = v44;
          --v43;
        }
        while (v43);
        goto LABEL_43;
      }
      uint64_t v40 = v35 & 0xFFFFFFFC;
      uint64_t v67 = (__n128 *)((char *)a1 + v33 + v32 + 20);
      uint64_t v68 = v38 + 1;
      uint64_t v69 = v39 & 0xFFFFFFFC;
      do
      {
        __n128 result = v67[-1];
        __n128 v70 = *v67;
        v68[-1] = result;
        *uint64_t v68 = v70;
        v67 += 2;
        v68 += 2;
        v69 -= 4;
      }
      while (v69);
      if (v40 != v39) {
        goto LABEL_41;
      }
    }
  }
  else
  {
    uint64_t v37 = a2[6];
    if (a2[7] != v37) {
      a2[7] = v37;
    }
  }
LABEL_43:
  uint64_t v45 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v45 >= 0xBu && (uint64_t v46 = v45[5]) != 0)
  {
    uint64_t v47 = *(unsigned int *)((char *)a1 + v46);
    uint64_t v48 = a2[9];
    unint64_t v49 = *(unsigned int *)((char *)a1 + v46 + v47);
    unint64_t v50 = ((char *)a2[10] - (char *)v48) >> 3;
    if (v49 <= v50)
    {
      if (v49 < v50) {
        a2[10] = (__n128 *)((char *)v48 + 8 * v49);
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 9), v49 - v50);
      LODWORD(v49) = *(int *)((char *)a1 + v46 + v47);
    }
    if (v49)
    {
      uint64_t v52 = a2[9];
      uint64_t v53 = v49;
      if (v49 < 0xA || (unint64_t)((char *)v52 - ((char *)a1 + v46) - v47 - 4) < 0x20)
      {
        uint64_t v54 = 0;
LABEL_55:
        unint64_t v55 = (uint64_t *)((char *)&a1[2 * v54 + 1] + v47 + v46);
        unint64_t v56 = &v52->n128_u64[v54];
        uint64_t v57 = v53 - v54;
        do
        {
          unint64_t v58 = *v55++;
          *v56++ = v58;
          --v57;
        }
        while (v57);
        return result;
      }
      uint64_t v54 = v49 & 0xFFFFFFFC;
      uint64_t v71 = (__n128 *)((char *)a1 + v47 + v46 + 20);
      uint64_t v72 = v52 + 1;
      uint64_t v73 = v53 & 0xFFFFFFFC;
      do
      {
        __n128 result = v71[-1];
        __n128 v74 = *v71;
        v72[-1] = result;
        *uint64_t v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 4;
      }
      while (v73);
      if (v54 != v53) {
        goto LABEL_55;
      }
    }
  }
  else
  {
    uint64_t v51 = a2[9];
    if (a2[10] != v51) {
      a2[10] = v51;
    }
  }
  return result;
}

__n128 E5RT_FB::TensorDesc::UnPackTo(int *a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (uint64_t v5 = v4[2]) != 0)
  {
    uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
    uint64_t v7 = *a2;
    if (!*a2) {
      operator new();
    }
    unint64_t v8 = (unsigned __int16 *)((char *)v6 - *v6);
    unsigned int v9 = *v8;
    if (v9 <= 4)
    {
      *(unsigned char *)uint64_t v7 = 0;
      *(_DWORD *)(v7 + 4) = 0;
    }
    else
    {
      uint64_t v10 = v8[2];
      if (v8[2]) {
        LOBYTE(v10) = *((unsigned char *)v6 + v10);
      }
      *(unsigned char *)uint64_t v7 = v10;
      if (v9 < 7)
      {
        *(_DWORD *)(v7 + 4) = 0;
      }
      else
      {
        uint64_t v11 = v8[3];
        if (v11) {
          LODWORD(v11) = *(int *)((char *)v6 + v11);
        }
        *(_DWORD *)(v7 + 4) = v11;
      }
    }
  }
  else if (*a2)
  {
    *a2 = 0;
    MEMORY[0x192FF16B0]();
  }
  unsigned int v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 7u && (uint64_t v14 = v13[3]) != 0)
  {
    uint64_t v15 = *(unsigned int *)((char *)a1 + v14);
    uint64_t v16 = a2[1];
    unint64_t v17 = *(unsigned int *)((char *)a1 + v14 + v15);
    unint64_t v18 = (a2[2] - v16) >> 3;
    if (v17 <= v18)
    {
      if (v17 < v18) {
        a2[2] = v16 + 8 * v17;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 1), v17 - v18);
      LODWORD(v17) = *(int *)((char *)a1 + v14 + v15);
    }
    if (v17)
    {
      uint64_t v20 = (__n128 *)a2[1];
      uint64_t v21 = v17;
      if (v17 < 0xA || (unint64_t)((char *)v20 - ((char *)a1 + v14) - v15 - 4) < 0x20)
      {
        uint64_t v22 = 0;
LABEL_25:
        uint64_t v23 = (uint64_t *)((char *)&a1[2 * v22 + 1] + v15 + v14);
        long long v24 = &v20->n128_u64[v22];
        uint64_t v25 = v21 - v22;
        do
        {
          unint64_t v26 = *v23++;
          *v24++ = v26;
          --v25;
        }
        while (v25);
        goto LABEL_27;
      }
      uint64_t v22 = v17 & 0xFFFFFFFC;
      uint64_t v51 = (__n128 *)((char *)a1 + v15 + v14 + 20);
      uint64_t v52 = v20 + 1;
      uint64_t v53 = v21 & 0xFFFFFFFC;
      do
      {
        __n128 result = v51[-1];
        __n128 v54 = *v51;
        v52[-1] = result;
        *uint64_t v52 = v54;
        v51 += 2;
        v52 += 2;
        v53 -= 4;
      }
      while (v53);
      if (v22 != v21) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    uint64_t v19 = a2[1];
    if (a2[2] != v19) {
      a2[2] = v19;
    }
  }
LABEL_27:
  int64x2_t v27 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0)
  {
    uint64_t v29 = *(unsigned int *)((char *)a1 + v28);
    uint64_t v30 = a2[4];
    unint64_t v31 = *(unsigned int *)((char *)a1 + v28 + v29);
    unint64_t v32 = (a2[5] - v30) >> 3;
    if (v31 <= v32)
    {
      if (v31 < v32) {
        a2[5] = v30 + 8 * v31;
      }
    }
    else
    {
      std::vector<unsigned long long>::__append((uint64_t)(a2 + 4), v31 - v32);
      LODWORD(v31) = *(int *)((char *)a1 + v28 + v29);
    }
    if (v31)
    {
      unint64_t v34 = (__n128 *)a2[4];
      uint64_t v35 = v31;
      if (v31 < 0xA || (unint64_t)((char *)v34 - ((char *)a1 + v28) - v29 - 4) < 0x20)
      {
        uint64_t v36 = 0;
LABEL_39:
        uint64_t v37 = (uint64_t *)((char *)&a1[2 * v36 + 1] + v29 + v28);
        unint64_t v38 = &v34->n128_u64[v36];
        uint64_t v39 = v35 - v36;
        do
        {
          unint64_t v40 = *v37++;
          *v38++ = v40;
          --v39;
        }
        while (v39);
        goto LABEL_41;
      }
      uint64_t v36 = v31 & 0xFFFFFFFC;
      unint64_t v55 = (__n128 *)((char *)a1 + v29 + v28 + 20);
      unint64_t v56 = v34 + 1;
      uint64_t v57 = v35 & 0xFFFFFFFC;
      do
      {
        __n128 result = v55[-1];
        __n128 v58 = *v55;
        v56[-1] = result;
        *unint64_t v56 = v58;
        v55 += 2;
        v56 += 2;
        v57 -= 4;
      }
      while (v57);
      if (v36 != v35) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    uint64_t v33 = a2[4];
    if (a2[5] != v33) {
      a2[5] = v33;
    }
  }
LABEL_41:
  uint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v42 = *v41;
  if (v42 <= 0xA)
  {
    a2[7] = 0;
LABEL_52:
    a2[8] = 0;
LABEL_53:
    uint64_t v50 = a2[9];
    if (a2[10] != v50) {
      a2[10] = v50;
    }
    return result;
  }
  uint64_t v43 = v41[5];
  if (v41[5]) {
    uint64_t v43 = *(void *)((char *)a1 + v43);
  }
  a2[7] = v43;
  if (v42 < 0xD) {
    goto LABEL_52;
  }
  uint64_t v44 = v41[6];
  if (v41[6]) {
    uint64_t v44 = *(void *)((char *)a1 + v44);
  }
  a2[8] = v44;
  if (v42 < 0xF) {
    goto LABEL_53;
  }
  uint64_t v45 = v41[7];
  if (!v41[7]) {
    goto LABEL_53;
  }
  uint64_t v46 = *(unsigned int *)((char *)a1 + v45);
  uint64_t v47 = a2[9];
  unint64_t v48 = *(unsigned int *)((char *)a1 + v45 + v46);
  unint64_t v49 = (a2[10] - v47) >> 3;
  if (v48 <= v49)
  {
    if (v48 < v49) {
      a2[10] = v47 + 8 * v48;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)(a2 + 9), v48 - v49);
    LODWORD(v48) = *(int *)((char *)a1 + v45 + v46);
  }
  if (v48)
  {
    int v59 = (__n128 *)a2[9];
    uint64_t v60 = v48;
    if (v48 < 0xA || (unint64_t)((char *)v59 - ((char *)a1 + v45) - v46 - 4) < 0x20)
    {
      uint64_t v61 = 0;
LABEL_73:
      __n128 v62 = (uint64_t *)((char *)&a1[2 * v61 + 1] + v46 + v45);
      uint64_t v63 = &v59->n128_u64[v61];
      uint64_t v64 = v60 - v61;
      do
      {
        unint64_t v65 = *v62++;
        *v63++ = v65;
        --v64;
      }
      while (v64);
      return result;
    }
    uint64_t v61 = v48 & 0xFFFFFFFC;
    __n128 v66 = (__n128 *)((char *)a1 + v46 + v45 + 20);
    uint64_t v67 = v59 + 1;
    uint64_t v68 = v60 & 0xFFFFFFFC;
    do
    {
      __n128 result = v66[-1];
      __n128 v69 = *v66;
      v67[-1] = result;
      *uint64_t v67 = v69;
      v66 += 2;
      v67 += 2;
      v68 -= 4;
    }
    while (v68);
    if (v61 != v60) {
      goto LABEL_73;
    }
  }
  return result;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v13 = operator new(8 * v12);
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t E5RT_FB::Program::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 5u) {
    return 0;
  }
  uint64_t v21 = v20[2];
  if (!v21) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v22 = (unint64_t)&v3[v21];
  BOOL v24 = (v22 & 3) == 0 || v4 == 0;
  if (v8 >= v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v7 - 1 < v22 + v25) {
      return 0;
    }
    uint64_t result = E5RT_FB::ProgramHeader::Verify((int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21)), (uint64_t *)a2);
    if (result)
    {
      unint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v26 < 7u) {
        return 0;
      }
      uint64_t v27 = v26[3];
      if (!v26[3]) {
        return 0;
      }
      uint64_t v28 = *(void *)a2;
      unint64_t v29 = (unint64_t)a1 + v27 - *(void *)a2;
      if ((v29 & 3) != 0)
      {
        if (*(unsigned char *)(a2 + 24)) {
          return 0;
        }
      }
      uint64_t result = 0;
      unint64_t v30 = *(void *)(a2 + 8);
      if (v30 >= 5 && v30 - 4 >= v29)
      {
        uint64_t v31 = *(unsigned int *)(v28 + v29);
        if ((int)v31 < 1 || v30 - 1 < v29 + v31) {
          return 0;
        }
        uint64_t result = 0;
        unint64_t v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
        unint64_t v33 = (unint64_t)v32 - v28;
        BOOL v34 = (((unint64_t)v32 - v28) & 3) == 0 || *(unsigned char *)(a2 + 24) == 0;
        BOOL v35 = v34;
        if (v30 - 4 >= v33 && v35)
        {
          uint64_t v36 = *v32;
          if (v36 > 0x1FFFFFFE) {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v37 = 4 * v36 + 4;
          BOOL v15 = v30 > v37;
          unint64_t v38 = v30 - v37;
          if (v15 && v38 >= v33)
          {
            if (v36)
            {
              unint64_t v39 = 0;
              unint64_t v40 = v32 + 1;
              while (E5RT_FB::Section::Verify((int *)((char *)v40 + *v40), a2))
              {
                ++v39;
                ++v40;
                if (v39 >= *v32) {
                  goto LABEL_67;
                }
              }
              return 0;
            }
LABEL_67:
            uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 8u);
            if (result)
            {
              uint64_t v41 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v41 < 9u
                || (uint64_t v42 = v41[4]) == 0
                || (uint64_t result = E5RT_FB::Symtab::Verify((int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42)), a2), result))
              {
                uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
                if (result)
                {
                  uint64_t v43 = (unsigned __int16 *)((char *)a1 - *a1);
                  if (*v43 >= 0xBu && (uint64_t v44 = v43[5]) != 0) {
                    uint64_t v45 = (unsigned int *)((char *)a1 + v44 + *(unsigned int *)((char *)a1 + v44));
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v45);
                  if (result)
                  {
                    uint64_t v46 = (unsigned __int16 *)((char *)a1 - *a1);
                    if (*v46 >= 0xBu && (uint64_t v47 = v46[5]) != 0) {
                      unint64_t v48 = (int *)((char *)a1 + v47 + *(unsigned int *)((char *)a1 + v47));
                    }
                    else {
                      unint64_t v48 = 0;
                    }
                    uint64_t result = flatbuffers::Verifier::VerifyVectorOfTables<E5RT_FB::SectionData>((uint64_t *)a2, v48);
                    if (result)
                    {
                      --*(_DWORD *)(a2 + 40);
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL E5RT_FB::Section::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  uint64_t v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_80;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    uint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_80;
  }
  uint64_t v36 = v20[3];
  if (!v20[3]
    || ((result = 0, unint64_t v37 = &v3[v36], ((unint64_t)&v3[v36] & 3) != 0) ? (v38 = v4 == 0) : (v38 = 1),
        !v38 ? (int v39 = 0) : (int v39 = 1),
        v8 >= (unint64_t)v37 && v39))
  {
    if (v21 < 9) {
      goto LABEL_80;
    }
    if (!v20[4]) {
      goto LABEL_79;
    }
    unint64_t v40 = (unint64_t)&v3[v20[4]];
    if ((v40 & 7) != 0 && v4) {
      return 0;
    }
    BOOL result = 0;
    if (v7 >= 9 && v7 - 8 >= v40)
    {
LABEL_79:
      if (v21 < 0xB || !v20[5]) {
        goto LABEL_80;
      }
      unint64_t v41 = (unint64_t)&v3[v20[5]];
      if ((v41 & 7) != 0 && v4) {
        return 0;
      }
      BOOL result = 0;
      if (v7 >= 9 && v7 - 8 >= v41)
      {
LABEL_80:
        BOOL result = flatbuffers::Table::VerifyField<unsigned int>(a1, a2, 0xCu, 4);
        if (result)
        {
          uint64_t v42 = (unsigned __int16 *)((char *)a1 - *a1);
          if (*v42 < 0xFu
            || (uint64_t v43 = v42[7]) == 0
            || (result = 0, unint64_t v44 = *(void *)(a2 + 8), v44 >= 2)
            && v44 - 1 >= (unint64_t)a1 + v43 - *(void *)a2)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyField<unsigned int>(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 4;
  unint64_t v10 = v8 - 4;
  return v9 && v10 >= v6;
}

BOOL flatbuffers::Verifier::VerifyVectorOfTables<Block>(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    BOOL result = Block::Verify((int *)((char *)v5 + *v5), a1);
    if (!result) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

BOOL Block::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if (v15)
  {
    BOOL result = 0;
    if (v4 || v6 - 2 < v15) {
      return result;
    }
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    return 0;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v22 = &v3[v21];
  BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1) {
      return 0;
    }
    unint64_t v26 = (unint64_t)&v22[v25];
    unint64_t v27 = v6 - 1;
    if (v6 - 1 < v26) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v28 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    BOOL v29 = (char *)v28 - v2;
    BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      uint64_t v32 = *v28;
      if (v32 > 0xFFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      if (v20 < 7) {
        return result;
      }
      unint64_t v33 = (8 * v32) | 4;
      if (v6 <= v33 || v6 - v33 < (unint64_t)v29) {
        return result;
      }
      __n128 v54 = a1;
      uint64_t v34 = v19[3];
      if (!v19[3]) {
        return 0;
      }
      BOOL result = 0;
      BOOL v35 = &v3[v34];
      BOOL v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v35) {
        return result;
      }
      if (!v37) {
        return result;
      }
      BOOL result = 0;
      uint64_t v38 = *(unsigned int *)&v35[v2];
      if ((int)v38 < 1 || v27 < (unint64_t)&v35[v38]) {
        return result;
      }
      BOOL result = 0;
      int v39 = (unsigned int *)((char *)v54 + v34 + *(unsigned int *)((char *)v54 + v34));
      unint64_t v40 = (char *)v39 - v2;
      BOOL v41 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
      BOOL v42 = v41;
      if (v7 < (unint64_t)v40 || !v42) {
        return result;
      }
      uint64_t v43 = *v39;
      if (v43 > 0xFFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      if (v20 < 9) {
        return result;
      }
      unint64_t v44 = (8 * v43) | 4;
      if (v6 <= v44 || v6 - v44 < (unint64_t)v40) {
        return result;
      }
      uint64_t v45 = v19[4];
      if (!v19[4]) {
        return 0;
      }
      BOOL result = 0;
      uint64_t v46 = &v3[v45];
      BOOL v48 = ((unint64_t)&v3[v45] & 3) == 0 || v4 == 0;
      if (v7 >= (unint64_t)v46 && v48)
      {
        BOOL result = 0;
        uint64_t v49 = *(unsigned int *)&v46[v2];
        if ((int)v49 >= 1 && v27 >= (unint64_t)&v46[v49])
        {
          BOOL result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, (unsigned int *)((char *)v54 + v45 + *(unsigned int *)((char *)v54 + v45)));
          if (result)
          {
            BOOL result = flatbuffers::Table::VerifyOffset(v54, a2, 0xAu);
            if (result)
            {
              uint64_t v50 = (unsigned __int16 *)((char *)v54 - *v54);
              if (*v50 >= 0xBu && (uint64_t v51 = v50[5]) != 0) {
                uint64_t v52 = (unsigned int *)((char *)v54 + v51 + *(unsigned int *)((char *)v54 + v51));
              }
              else {
                uint64_t v52 = 0;
              }
              BOOL result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v52);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL KernelArgFrame::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  BOOL v15 = v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20);
  if (v15) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_82;
  }
  if (!v20[2]) {
    goto LABEL_98;
  }
  unint64_t v22 = (unint64_t)&v3[v20[2]];
  if ((v22 & 7) != 0 && v4) {
    return 0;
  }
  BOOL result = 0;
  if (v7 >= 9 && v7 - 8 >= v22)
  {
LABEL_98:
    if (v21 < 7) {
      goto LABEL_82;
    }
    uint64_t v23 = v20[3];
    if (v20[3])
    {
      BOOL result = 0;
      BOOL v24 = &v3[v23];
      BOOL v26 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v24 || !v26) {
        return result;
      }
      uint64_t v27 = *(unsigned int *)&v24[v2];
      if ((int)v27 < 1 || v7 - 1 < (unint64_t)&v24[v27]) {
        return 0;
      }
      BOOL result = 0;
      uint64_t v28 = (unsigned int *)((char *)a1 + v23 + *(unsigned int *)((char *)a1 + v23));
      BOOL v29 = (char *)v28 - v2;
      BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
      BOOL v31 = v30;
      if (v8 < (unint64_t)v29 || !v31) {
        return result;
      }
      uint64_t v32 = *v28;
      if (v32 > 0xFFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v33 = (8 * v32) | 4;
      BOOL v9 = v7 >= v33;
      unint64_t v34 = v7 - v33;
      if (v34 == 0 || !v9 || v34 < (unint64_t)v29) {
        return result;
      }
    }
    if (v21 < 9 || (uint64_t v35 = v20[4]) == 0)
    {
LABEL_82:
      BOOL result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
      if (result)
      {
        uint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
          uint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
        }
        else {
          uint64_t v49 = 0;
        }
        BOOL result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v49);
        if (result)
        {
          BOOL result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
          if (result)
          {
            BOOL result = flatbuffers::Table::VerifyOffset(a1, a2, 0xEu);
            if (result)
            {
              uint64_t v50 = (unsigned __int16 *)((char *)a1 - *a1);
              if (*v50 >= 0xFu && (uint64_t v51 = v50[7]) != 0) {
                uint64_t v52 = (unsigned int *)((char *)a1 + v51 + *(unsigned int *)((char *)a1 + v51));
              }
              else {
                uint64_t v52 = 0;
              }
              BOOL result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v52);
              if (result)
              {
                --*(_DWORD *)(a2 + 40);
                return 1;
              }
            }
          }
        }
      }
      return result;
    }
    BOOL result = 0;
    unint64_t v36 = (unint64_t)&v3[v35];
    BOOL v38 = (v36 & 3) == 0 || v4 == 0;
    if (v8 >= v36 && v38)
    {
      uint64_t v39 = *(unsigned int *)(v2 + v36);
      if ((int)v39 < 1 || v7 - 1 < v36 + v39) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v40 = (unsigned int *)((char *)a1 + v35 + *(unsigned int *)((char *)a1 + v35));
      BOOL v41 = (char *)v40 - v2;
      BOOL v42 = (v41 & 3) == 0 || v4 == 0;
      BOOL v43 = v42;
      if (v8 >= (unint64_t)v41 && v43)
      {
        uint64_t v44 = *v40;
        if (v44 <= 0xFFFFFFE)
        {
          BOOL result = 0;
          unint64_t v45 = (8 * v44) | 4;
          BOOL v15 = v7 > v45;
          unint64_t v46 = v7 - v45;
          if (!v15 || v46 < (unint64_t)v41) {
            return result;
          }
          goto LABEL_82;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t E5RT_FB::TensorDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v20 < 5u) {
    return 0;
  }
  uint64_t v21 = v20[2];
  if (!v21) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v22 = (unint64_t)&v3[v21];
  BOOL v24 = (v22 & 3) == 0 || v4 == 0;
  if (v8 >= v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)(v2 + v22);
    if ((int)v25 < 1 || v7 - 1 < v22 + v25) {
      return 0;
    }
    uint64_t result = E5RT_FB::TensorDataType::Verify((int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21)), (uint64_t *)a2);
    if (result)
    {
      BOOL v26 = (unsigned __int16 *)((char *)a1 - *a1);
      unsigned int v27 = *v26;
      if (v27 < 7) {
        return 0;
      }
      uint64_t v28 = v26[3];
      if (!v26[3]) {
        return 0;
      }
      uint64_t v29 = *(void *)a2;
      BOOL v30 = (char *)a1 - *(void *)a2;
      unint64_t v31 = (unint64_t)&v30[v28];
      int v32 = *(unsigned __int8 *)(a2 + 24);
      if (((unint64_t)&v30[v28] & 3) != 0)
      {
        if (*(unsigned char *)(a2 + 24)) {
          return 0;
        }
      }
      uint64_t result = 0;
      unint64_t v33 = *(void *)(a2 + 8);
      if (v33 >= 5)
      {
        unint64_t v34 = v33 - 4;
        if (v33 - 4 >= v31)
        {
          uint64_t v35 = *(unsigned int *)(v29 + v31);
          if ((int)v35 < 1 || v33 - 1 < v31 + v35) {
            return 0;
          }
          uint64_t result = 0;
          unint64_t v36 = (unsigned int *)((char *)a1 + v28 + *(unsigned int *)((char *)a1 + v28));
          BOOL v37 = (char *)v36 - v29;
          BOOL v38 = (((unint64_t)v36 - v29) & 3) == 0 || v32 == 0;
          BOOL v39 = v38;
          if (v34 >= (unint64_t)v37 && v39)
          {
            uint64_t v40 = *v36;
            if (v40 > 0xFFFFFFE) {
              return 0;
            }
            uint64_t result = 0;
            if (v27 < 9) {
              return result;
            }
            unint64_t v41 = (8 * v40) | 4;
            if (v33 <= v41 || v33 - v41 < (unint64_t)v37) {
              return result;
            }
            uint64_t v42 = v26[4];
            if (!v42) {
              return 0;
            }
            uint64_t result = 0;
            unint64_t v43 = (unint64_t)&v30[v42];
            BOOL v45 = (v43 & 3) == 0 || v32 == 0;
            if (v34 >= v43 && v45)
            {
              uint64_t result = 0;
              uint64_t v46 = *(unsigned int *)(v29 + v43);
              if ((int)v46 >= 1 && v33 - 1 >= v43 + v46)
              {
                uint64_t result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, (unsigned int *)((char *)a1 + v42 + *(unsigned int *)((char *)a1 + v42)));
                if (result)
                {
                  uint64_t result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xAu, 8);
                  if (result)
                  {
                    uint64_t result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
                    if (result)
                    {
                      uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xEu);
                      if (result)
                      {
                        uint64_t v47 = (unsigned __int16 *)((char *)a1 - *a1);
                        if (*v47 >= 0xFu && (uint64_t v48 = v47[7]) != 0) {
                          uint64_t v49 = (unsigned int *)((char *)a1 + v48 + *(unsigned int *)((char *)a1 + v48));
                        }
                        else {
                          uint64_t v49 = 0;
                        }
                        uint64_t result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v49);
                        if (result)
                        {
                          --*(_DWORD *)(a2 + 40);
                          return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVector<unsigned long long>(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0xFFFFFFE) {
    return 0;
  }
  unint64_t v6 = (8 * v5) | 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

BOOL flatbuffers::Table::VerifyOffset(int *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 <= a3) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int16 *)((char *)v3 + a3);
  if (!v4) {
    return 1;
  }
  unint64_t v5 = (unint64_t)a1 + v4 - *(void *)a2;
  BOOL result = 0;
  if ((v5 & 3) == 0 || *(unsigned char *)(a2 + 24) == 0)
  {
    unint64_t v8 = *(void *)(a2 + 8);
    if (v8 >= 5 && v8 - 4 >= v5)
    {
      uint64_t v9 = *(unsigned int *)(*(void *)a2 + v5);
      return (int)v9 >= 1 && v8 - 1 >= v5 + v9;
    }
  }
  return result;
}

uint64_t E5RT_FB::TensorDataType::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_40;
  }
  if (v19[2] && v6 - 1 < (unint64_t)&v3[v19[2]]) {
    return 0;
  }
  if (v20 < 7
    || (uint64_t v21 = v19[3]) == 0
    || ((v14 = 0, v22 = (unint64_t)&v3[v21], (v22 & 3) != 0) ? (BOOL v23 = v4 == 0) : (BOOL v23 = 1),
        !v23 ? (int v24 = 0) : (int v24 = 1),
        v7 >= v22 && v24))
  {
LABEL_40:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t E5RT_FB::Symtab::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      unsigned int v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        unint64_t v36 = v27 + 1;
        while (E5RT_FB::Symbol::Verify((int *)((char *)v36 + *v36), a2))
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

BOOL E5RT_FB::Symbol::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    BOOL result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_84;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    BOOL result = 0;
    unint64_t v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    BOOL result = 0;
    unsigned int v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7) {
    goto LABEL_84;
  }
  uint64_t v36 = v20[3];
  if (!v20[3]
    || ((result = 0, BOOL v37 = &v3[v36], ((unint64_t)&v3[v36] & 3) != 0) ? (v38 = v4 == 0) : (v38 = 1),
        !v38 ? (int v39 = 0) : (int v39 = 1),
        v8 >= (unint64_t)v37 && v39))
  {
    if (v21 < 9) {
      goto LABEL_84;
    }
    uint64_t v40 = v20[4];
    if (!v20[4]
      || ((result = 0, unint64_t v41 = &v3[v40], ((unint64_t)&v3[v40] & 3) != 0) ? (v42 = v4 == 0) : (v42 = 1),
          !v42 ? (int v43 = 0) : (int v43 = 1),
          v8 >= (unint64_t)v41 && v43))
    {
      if (v21 < 0xB || !v20[5]) {
        goto LABEL_84;
      }
      unint64_t v44 = (unint64_t)&v3[v20[5]];
      if ((v44 & 7) != 0 && v4) {
        return 0;
      }
      BOOL result = 0;
      if (v7 >= 9 && v7 - 8 >= v44)
      {
LABEL_84:
        BOOL result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8);
        if (result)
        {
          BOOL result = flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xEu, 8);
          if (result)
          {
            --*(_DWORD *)(a2 + 40);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

BOOL flatbuffers::Table::VerifyField<unsigned long long>(int *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 <= a3) {
    return 1;
  }
  uint64_t v5 = *(unsigned __int16 *)((char *)v4 + a3);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (unint64_t)a1 + v5 - *(void *)a2;
  if ((v6 & (a4 - 1)) != 0 && *(unsigned char *)(a2 + 24) != 0) {
    return 0;
  }
  unint64_t v8 = *(void *)(a2 + 8);
  BOOL v9 = v8 > 8;
  unint64_t v10 = v8 - 8;
  return v9 && v10 >= v6;
}

uint64_t E5RT_FB::ProgramHeader::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (unint64_t)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  BOOL v7 = v6 >= 5 && v6 - 4 >= v3;
  if (!v7) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = v3 - v9;
  if (v14)
  {
    uint64_t result = 0;
    if (v4 || v6 - 2 < v14) {
      return result;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v14);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v7 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v7 || v16 < v14) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    goto LABEL_65;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]
    || ((result = 0, unint64_t v21 = v3 + v20, ((v3 + v20) & 1) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (int v23 = 0) : (int v23 = 1),
        v6 - 2 >= v21 && v23))
  {
    if (v19 < 7) {
      goto LABEL_65;
    }
    uint64_t v24 = v18[3];
    if (!v18[3]
      || ((result = 0, unint64_t v25 = v3 + v24, ((v3 + v24) & 1) != 0) ? (v26 = v4 == 0) : (v26 = 1),
          !v26 ? (int v27 = 0) : (int v27 = 1),
          v6 - 2 >= v25 && v27))
    {
      if (v19 < 9) {
        goto LABEL_65;
      }
      uint64_t v28 = v18[4];
      if (!v18[4]
        || ((result = 0, v29 = v3 + v28, ((v3 + v28) & 1) != 0) ? (BOOL v30 = v4 == 0) : (BOOL v30 = 1),
            !v30 ? (int v31 = 0) : (int v31 = 1),
            v6 - 2 >= v29 && v31))
      {
        if (v19 < 0xB) {
          goto LABEL_65;
        }
        uint64_t v32 = v18[5];
        if (!v32) {
          goto LABEL_65;
        }
        unint64_t v33 = v3 + v32;
        if ((v33 & 7) != 0 && v4) {
          return 0;
        }
        uint64_t result = 0;
        if (v6 >= 9 && v6 - 8 >= v33)
        {
LABEL_65:
          *((_DWORD *)a2 + 10) = v10;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfTables<E5RT_FB::SectionData>(uint64_t *a1, _DWORD *a2)
{
  if (!a2) {
    return 1;
  }
  if (!*a2) {
    return 1;
  }
  unint64_t v4 = 0;
  uint64_t v5 = a2 + 1;
  do
  {
    uint64_t result = E5RT_FB::SectionData::Verify((int *)((char *)v5 + *v5), a1);
    if ((result & 1) == 0) {
      break;
    }
    ++v4;
    ++v5;
  }
  while (v4 < *a2);
  return result;
}

uint64_t E5RT_FB::SectionData::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  unsigned int v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u) {
    goto LABEL_55;
  }
  uint64_t v20 = v19[2];
  if (!v19[2]) {
    goto LABEL_55;
  }
  uint64_t v15 = 0;
  unint64_t v21 = (unint64_t)&v3[v20];
  BOOL v23 = (v21 & 3) == 0 || v4 == 0;
  if (v7 >= v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)(v2 + v21);
    if ((int)v24 < 1 || v6 - 1 < v21 + v24) {
      return 0;
    }
    uint64_t v15 = 0;
    unint64_t v25 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    BOOL v26 = (char *)v25 - v2;
    BOOL v27 = (v26 & 3) == 0 || v4 == 0;
    BOOL v28 = v27;
    if (v7 >= (unint64_t)v26 && v28)
    {
      uint64_t v29 = *v25;
      if (v29 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v30 = v29 + 4;
      BOOL v8 = v6 >= v30;
      unint64_t v31 = v6 - v30;
      if (v31 == 0 || !v8 || v31 < (unint64_t)v26) {
        return 0;
      }
LABEL_55:
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v15;
}

void Espresso::blob_storage_memory::~blob_storage_memory(Espresso::blob_storage_memory *this)
{
  *(void *)this = &unk_1EE34F130;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE34F130;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::E5OperationImpl(uint64_t a1, long long *a2, int a3, void *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unint64_t v18 = E5RT::E5Operation::E5Operation((void *)a1) + 1;
  E5RT::E5OperationBuilder::E5OperationBuilder(v18);
  *(void *)a1 = &unk_1EE324F48;
  *(void *)(a1 + 8) = &unk_1EE324FD8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    *(void *)(a1 + 32) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 16) = v19;
  }
  uint64_t v20 = a4[1];
  *(void *)(a1 + 48) = *a4;
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 56) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 64), a5);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 168), a6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap((void *)(a1 + 272), a7);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  unint64_t v21 = *(const void **)a8;
  int64_t v22 = *(void *)(a8 + 8) - *(void *)a8;
  if (v22)
  {
    if (v22 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL v23 = (char *)operator new(v22);
    *(void *)(a1 + 376) = v23;
    *(void *)(a1 + 384) = v23;
    uint64_t v24 = &v23[8 * (v22 >> 3)];
    *(void *)(a1 + 392) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 384) = v24;
  }
  *(void *)(a1 + 400) = a9;
  *(void *)(a1 + 408) = a10;
  return a1;
}

void sub_1921D0F5C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1921D0F78(_Unwind_Exception *a1)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v6);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::~OrderedMap(v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  if (v1[39] < 0) {
    operator delete(*v3);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl(v2);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void *E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::OrderedMap(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  std::unordered_map<std::string,unsigned long>::unordered_map((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  return a1;
}

void sub_1921D1074(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void **)v1[5];
  if (v4) {
    Espresso::AOT::E5RTGroupMatcher::TagStateOpsGroupsInBlockWithShrinking(v4);
  }
  uint64_t v5 = *v2;
  E5RT::AsyncEventImpl *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    unint64_t v6 = (void **)*v1;
    if (!*v1) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v6 = (void **)*v1;
    if (!*v1) {
      goto LABEL_5;
    }
  }
  unint64_t v7 = (void **)v1[1];
  BOOL v8 = v6;
  if (v7 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0) {
        operator delete(*(v7 - 3));
      }
      v7 -= 3;
    }
    while (v7 != v6);
    BOOL v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::E5Operand const>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1921D1220(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921D1234(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::E5Operand const>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unsigned int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = operator new(0x38uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  char v44 = 0;
  void *v25 = 0;
  v25[1] = v10;
  BOOL v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  uint64_t v27 = *(void *)(a3 + 32);
  v25[5] = *(void *)(a3 + 24);
  v25[6] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        unint64_t v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v3 = v10;
        unint64_t v30 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      unint64_t v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      unint64_t v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_59;
      }
    }
LABEL_83:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_94;
  }
  unint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_83;
  }
LABEL_59:
  void *v31 = *v30;
  *unint64_t v30 = v43[0];
LABEL_94:
  unint64_t v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1921D16A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921D16B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (i = *(void **)(a2 + 16); i; i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1921D17E8(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921D17FC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unsigned int v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = operator new(0x30uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  char v43 = 0;
  void *v25 = 0;
  v25[1] = v10;
  BOOL v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  v25[5] = *(void *)(a3 + 24);
  char v43 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v29 = *(void **)(*(void *)a1 + 8 * v10);
        unint64_t v30 = (void *)v42[0];
        if (v29) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v39 & v10;
      float v29 = *(void **)(*(void *)a1 + 8 * (v39 & v10));
      unint64_t v30 = (void *)v42[0];
      if (v29) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v30 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v42[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v42[0])
    {
      unint64_t v40 = *(void *)(*(void *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  float v29 = *(void **)(*(void *)a1 + 8 * v3);
  unint64_t v30 = (void *)v42[0];
  if (!v29) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v30 = *v29;
  void *v29 = v42[0];
LABEL_92:
  unint64_t v14 = (uint64_t *)v42[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1921D1C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921D1C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *E5RT::E5OperationBuilder::E5OperationBuilder(void *this)
{
  *this = &unk_1EE325A98;
  return this;
}

void *E5RT::E5Operation::E5Operation(void *this)
{
  *this = &unk_1EE324770;
  return this;
}

void *nitro::ndarray<unsigned char>::assign<float>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v3 = (char *)a1[3];
  unint64_t v5 = (v3 - v4) >> 3;
  BOOL v6 = (void *)a2[2];
  if (v5 != (uint64_t)(a2[3] - (void)v6) >> 3) {
    goto LABEL_13;
  }
  if (v3 == v4) {
    return a1;
  }
  uint64_t v7 = v5 <= 1 ? 1 : (v3 - v4) >> 3;
  if (*(void *)v4 != *v6) {
    goto LABEL_13;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
    uint64_t v10 = *(void *)&v4[8 * v8];
    uint64_t v11 = v6[v8++];
  }
  while (v10 == v11);
  if (v9 < v5) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(void)#1}::operator()();
  if (v3 != v4 && *a1)
  {
    unint64_t v12 = v3 - v4 - 8;
    if (v12 >= 8)
    {
      uint64_t v15 = (v12 >> 3) + 1;
      unint64_t v14 = &v4[8 * (v15 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v16 = v4 + 8;
      uint64_t v17 = 1;
      uint64_t v18 = v15 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v19 = 1;
      do
      {
        v17 *= *(v16 - 1);
        v19 *= *v16;
        v16 += 2;
        v18 -= 2;
      }
      while (v18);
      uint64_t v13 = v19 * v17;
      if (v15 == (v15 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_21:
        if (v13) {
          nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(a1, a2);
        }
        return a1;
      }
    }
    else
    {
      uint64_t v13 = 1;
      unint64_t v14 = (char *)a1[2];
    }
    do
    {
      uint64_t v20 = *(void *)v14;
      v14 += 8;
      v13 *= v20;
    }
    while (v14 != v3);
    goto LABEL_21;
  }
  return a1;
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[3];
  unint64_t v6 = (v5 - v4) >> 3;
  uint64_t v7 = (void *)a2[2];
  if (v6 != (uint64_t)(a2[3] - (void)v7) >> 3) {
    goto LABEL_13;
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v8 = v6 <= 1 ? 1 : (v5 - v4) >> 3;
  if (*(void *)v4 != *v7) {
    goto LABEL_13;
  }
  uint64_t v9 = 1;
  do
  {
    unint64_t v10 = v9;
    if (v8 == v9) {
      break;
    }
    uint64_t v11 = *(void *)&v4[8 * v9];
    uint64_t v12 = v7[v9++];
  }
  while (v11 == v12);
  if (v10 < v6) {
LABEL_13:
  }
    nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()();
  int64_t v13 = v5 - v4;
  if (v5 == v4 || !*a1) {
    return;
  }
  if ((unint64_t)(v13 - 8) < 8)
  {
    uint64_t v14 = 1;
    uint64_t v15 = (char *)a1[2];
    do
    {
LABEL_20:
      uint64_t v21 = *(void *)v15;
      v15 += 8;
      v14 *= v21;
    }
    while (v15 != v5);
    goto LABEL_21;
  }
  unint64_t v16 = ((unint64_t)(v13 - 8) >> 3) + 1;
  uint64_t v15 = &v4[8 * (v16 & 0x3FFFFFFFFFFFFFFELL)];
  uint64_t v17 = v4 + 8;
  uint64_t v18 = 1;
  uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v20 = 1;
  do
  {
    v18 *= *(v17 - 1);
    v20 *= *v17;
    v17 += 2;
    v19 -= 2;
  }
  while (v19);
  uint64_t v14 = v20 * v18;
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v14) {
    return;
  }
  unint64_t v22 = v13 >> 3;
  if (v13 >> 3 == 3)
  {
    unint64_t v35 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v36 = 0;
      uint64_t v37 = a2[8];
      uint64_t v38 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v39 = 0;
          uint64_t v40 = v37;
          uint64_t v41 = v38;
          do
          {
            if (*((void *)v4 + 2))
            {
              unint64_t v44 = 0;
              uint64_t v45 = v40;
              uint64_t v46 = v41;
              do
              {
                *(unsigned char *)(*a1 + v46) = (int)*(float *)(*a2 + 4 * v45);
                BOOL v42 = (void *)a1[5];
                v46 += v42[2];
                char v43 = (void *)a2[5];
                v45 += v43[2];
                ++v44;
                uint64_t v4 = (char *)a1[2];
              }
              while (v44 < *((void *)v4 + 2));
            }
            else
            {
              BOOL v42 = (void *)a1[5];
              char v43 = (void *)a2[5];
            }
            v41 += v42[1];
            v40 += v43[1];
            ++v39;
          }
          while (v39 < *((void *)v4 + 1));
          unint64_t v35 = *(void *)v4;
        }
        else
        {
          BOOL v42 = (void *)a1[5];
          char v43 = (void *)a2[5];
        }
        v38 += *v42;
        v37 += *v43;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v22 != 2)
    {
      if (v22 == 1)
      {
        if (*(void *)v4)
        {
          unint64_t v23 = 0;
          uint64_t v24 = a2[8];
          uint64_t v25 = a1[8];
          do
          {
            *(unsigned char *)(*a1 + v25) = (int)*(float *)(*a2 + 4 * v24);
            v25 += *(void *)a1[5];
            v24 += *(void *)a2[5];
            ++v23;
          }
          while (v23 < *(void *)a1[2]);
        }
        return;
      }
      if (v13 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = operator new(v13);
      bzero(v47, v13 & 0xFFFFFFFFFFFFFFF8);
      if (v22 <= 1) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v13 >> 3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
      while (1)
      {
        uint64_t v50 = a1[5];
        if (v48 < 2) {
          break;
        }
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = (void *)(v50 + 8);
        unint64_t v56 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v57 = v47 + 1;
        do
        {
          v53 += *(v55 - 1) * *(v57 - 1);
          v54 += *v55 * *v57;
          v57 += 2;
          v55 += 2;
          v56 -= 2;
        }
        while (v56);
        uint64_t v51 = v54 + v53;
        unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_60;
        }
LABEL_62:
        uint64_t v65 = a2[5];
        if (v48 < 2)
        {
          uint64_t v66 = 0;
          unint64_t v67 = 0;
LABEL_67:
          unint64_t v73 = v48 - v67;
          uint64_t v74 = v67;
          int v75 = (uint64_t *)(v65 + v74 * 8);
          uint64_t v76 = &v47[v74];
          do
          {
            uint64_t v78 = *v76++;
            uint64_t v77 = v78;
            uint64_t v79 = *v75++;
            v66 += v79 * v77;
            --v73;
          }
          while (v73);
          goto LABEL_69;
        }
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        __n128 v70 = (void *)(v65 + 8);
        unint64_t v71 = v48 & 0xFFFFFFFFFFFFFFFELL;
        uint64_t v72 = v47 + 1;
        do
        {
          v68 += *(v70 - 1) * *(v72 - 1);
          v69 += *v70 * *v72;
          v72 += 2;
          v70 += 2;
          v71 -= 2;
        }
        while (v71);
        uint64_t v66 = v69 + v68;
        unint64_t v67 = v48 & 0xFFFFFFFFFFFFFFFELL;
        if (v48 != v49) {
          goto LABEL_67;
        }
LABEL_69:
        *(unsigned char *)(*a1 + v51) = (int)*(float *)(*a2 + 4 * (a2[8] + v66));
        if ((int)((unint64_t)v13 >> 3) >= 1)
        {
          uint64_t v80 = a1[2];
          uint64_t v81 = ((unint64_t)v13 >> 3) + 1;
          unint64_t v82 = (unint64_t)v13 >> 3;
          while (1)
          {
            uint64_t v83 = (v81 - 2);
            unint64_t v84 = v47[v83] + 1;
            v47[v83] = v84;
            if (v84 < *(void *)(v80 + v83 * 8)) {
              break;
            }
            v47[(v81 - 2)] = 0;
            LODWORD(v82) = v82 - 1;
            if ((unint64_t)--v81 <= 1) {
              goto LABEL_75;
            }
          }
          if ((int)v82 > 0) {
            continue;
          }
        }
LABEL_75:
        operator delete(v47);
        return;
      }
      uint64_t v51 = 0;
      unint64_t v52 = 0;
LABEL_60:
      unint64_t v58 = v48 - v52;
      uint64_t v59 = v52;
      uint64_t v60 = (uint64_t *)(v50 + v59 * 8);
      uint64_t v61 = &v47[v59];
      do
      {
        uint64_t v63 = *v61++;
        uint64_t v62 = v63;
        uint64_t v64 = *v60++;
        v51 += v64 * v62;
        --v58;
      }
      while (v58);
      goto LABEL_62;
    }
    unint64_t v26 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v27 = 0;
      uint64_t v28 = a2[8];
      uint64_t v29 = a1[8];
      do
      {
        if (*((void *)v4 + 1))
        {
          unint64_t v32 = 0;
          uint64_t v33 = v28;
          uint64_t v34 = v29;
          do
          {
            *(unsigned char *)(*a1 + v34) = (int)*(float *)(*a2 + 4 * v33);
            unint64_t v30 = (void *)a1[5];
            v34 += v30[1];
            BOOL v31 = (void *)a2[5];
            v33 += v31[1];
            ++v32;
            uint64_t v4 = (char *)a1[2];
          }
          while (v32 < *((void *)v4 + 1));
          unint64_t v26 = *(void *)v4;
        }
        else
        {
          unint64_t v30 = (void *)a1[5];
          BOOL v31 = (void *)a2[5];
        }
        v29 += *v30;
        v28 += *v31;
        ++v27;
      }
      while (v27 < v26);
    }
  }
}

void sub_1921D22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"same_shape(other)", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  unint64_t v5 = std::locale::use_facet(&v15, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v6 = (file_logger *)global_logger();
    started = file_logger::start_stream(v6, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 885, 1);
    std::stringbuf::str();
    uint64_t v8 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v8 && v8[280])
    {
      uint64_t v9 = v8 + 16;
      if ((v13 & 0x80u) == 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    }
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
  }
  __print_back_trace();
  v15.__locale_ = (std::locale::__imp *)&v14;
  void nitro::ndarray<unsigned char>::pairwise_element_visitor<float,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1}>(nitro::ndarray<float> const&,nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::assign<float>(nitro::ndarray<float> const&)::{lambda(unsigned char &,float const&)#1})::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1921D2594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_gather_nd_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "gather_nd");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921D26E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "inner_product");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921D2828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_inner_product_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v30 = a4;
  char v21 = 0;
  int v23 = -1;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v24 = _D0;
  uint64_t v29 = 0;
  long long v16 = xmmword_192DCA240;
  int v17 = 0;
  uint64_t v18 = _D0;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  int v20 = 0;
  uint64_t v26 = 0;
  uint64_t v28 = 0;
  uint64_t v27 = 0;
  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a2, (uint64_t)&v16, 0);
  Espresso::abstract_engine_factory::shared(&v14);
  uint64_t v10 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "inner_product");
  int v11 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v10, a3, (uint64_t)__p, (uint64_t)&v16, &v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_1921D2974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nC");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nB");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "has_biases");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 8));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "has_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "has_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 16));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "has_prelu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 28));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_lookup");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 32));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "add_to_output");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 44));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "use_raw_buffers");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 48));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 36));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 20));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 24));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "argmax_tree_n_clusters");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 100));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "argmax_tree_n_clusters_keep");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 104));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "sparse_block_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 108));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "sparse_block_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 112));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 40));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 116));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "compute_every");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 120));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 52));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 56));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 60));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_lookup_rounds_to_nearest");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 124));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "disable_bnns_client_ptr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 128));
    goto LABEL_298;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "nC");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 168))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "nB");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 168))(v9, __p, a2 + 4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "has_biases");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 8);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "has_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 12);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "has_tanh");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 16);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "has_prelu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 28);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "is_lookup");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 32);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 44))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "add_to_output");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 44);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "use_raw_buffers");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 48);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 36))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "quantization_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 36);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(float *)(a2 + 20) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 20);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(float *)(a2 + 24) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 24);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 100))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "argmax_tree_n_clusters");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 100);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 104))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "argmax_tree_n_clusters_keep");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 104);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 108))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "sparse_block_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 108);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 112))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "sparse_block_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 112);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(unsigned char *)(a2 + 40))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 40);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 116))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 116);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "compute_every");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 120);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 52) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 52);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(float *)(a2 + 56) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 56);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(float *)(a2 + 60) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_activation_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 216))(v9, __p, a2 + 60);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 124))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "is_lookup_rounds_to_nearest");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 124);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(_DWORD *)(a2 + 128);
  uint64_t v5 = a2 + 128;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "disable_bnns_client_ptr");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, v5);
LABEL_298:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1921D3EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::set_uint(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  id v7 = [NSNumber numberWithUnsignedInteger:*a3];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = (uint64_t *)*a2;
  }
  int v6 = [NSString stringWithUTF8String:v5];
  [*(id *)(a1 + 24) setObject:v7 forKeyedSubscript:v6];
}

void sub_1921D4110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "reduce");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921D4244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_reduce_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  v11[0] = 0x358637BD00000000;
  v11[1] = 0x100000007;
  void v11[2] = 0;
  v11[3] = 0;
  v11[4] = 0xFFFFFFFF00000000;
  char v12 = 0;
  Espresso::SerDes::params_io<Espresso::reduce_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921D4368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::reduce_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "axis_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 8));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (*(_DWORD *)a2 == 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "eps");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (float *)(a2 + 4));
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      if (v8 < 0) {
        operator delete(v7[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "use_version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 36));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 40));
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 8) != 7)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "axis_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 8);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "use_version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 12);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 36) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 36);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 40);
  uint64_t v5 = a2 + 40;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_63:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1921D486C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "cast");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921D49FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_cast_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v12 = a4;
  uint64_t v11 = 0;
  Espresso::SerDes::params_io<Espresso::cast_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921D4AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::cast_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "destination_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "mil_original_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2 + 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "destination_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "mil_original_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2 + 1);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1921D4CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_elementwise_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::elementwise_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "elementwise");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1921D4E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(uint64_t *a1, char *a2)
{
  uint64_t v2 = a1 + 2;
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  (*(void (**)(uint64_t, void *, void **))(*(void *)v3 + 232))(v3, v2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1921D4ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      char v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      int v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        char v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    int v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      std::locale v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        long long v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          uint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          char v21 = 0;
          uint64_t v22 = 0;
          int v23 = 0;
          BOOL v31 = (void **)&v21;
          char v32 = 0;
          char v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          int v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          BOOL v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          BOOL v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          BOOL v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1921D523C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context16transform_ew_powEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v141 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v3 || v3 == 0)
  {
    long long v6 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
    if (*(_DWORD *)v6 == 13)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40) + 96;
      *(void *)&long long v135 = a2[3].i32[2];
      uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v135, &v135);
      if (v9[4] - v9[3] != 24) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW POW cannot have more than one output.");
      }
      uint64_t v10 = *(void *)(a1 + 40) + 56;
      *(void *)&long long v135 = a2[3].i32[2];
      uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v135, &v135);
      if (v11[4] - v11[3] != 24) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("EW POW cannot have more than one input.");
      }
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v12 + 16);
      int v13 = *(std::__shared_weak_count **)(v12 + 24);
      uint64_t v124 = v14;
      int v125 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v15 = v7[2];
      if (v15 == 0.5)
      {
        v138.__r_.__value_.__r.__words[2] = 897988541;
        char v139 = 0;
        uint64_t v140 = 0;
        v138.__r_.__value_.__r.__words[0] = 11;
        v138.__r_.__value_.__l.__size_ = 1065353216;
        Espresso::abstract_engine_factory::shared(__str);
        uint64_t v16 = *(void *)__str;
        std::string::basic_string[abi:ne180100]<0>(&v135, "elementwise");
        LODWORD(v123.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v124 + 8))(*(void *)(v124 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v16, (uint64_t)&v124, (uint64_t)&v135, (uint64_t)&v138, (int *)&v123);
        if (lpsrc[0])
        {
          if (v17)
          {
            uint64_t v18 = (std::__shared_weak_count *)lpsrc[1];
            if (lpsrc[1]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v18 = 0;
          }
        }
        else
        {
          uint64_t v18 = 0;
          int v17 = 0;
        }
        if (lpsrc[1]) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc[1]);
        }
        if ((v136[7] & 0x80000000) != 0) {
          operator delete((void *)v135);
        }
        if (*(void *)&__str[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__str[8]);
        }
        uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
        if (*(char *)(v23 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)(v23 + 16), *(void *)(v23 + 24));
        }
        else {
          std::string v123 = *(std::string *)(v23 + 16);
        }
        Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
        v122[0] = v17;
        v122[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v135, "elementwise");
        uint64_t v24 = *(void *)(a1 + 40) + 56;
        unint64_t v25 = a2[3].i32[2];
        lpsrc[0] = (void *)v25;
        uint64_t v26 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v24, v25, lpsrc);
        uint64_t v27 = *(void *)(a1 + 40) + 96;
        unint64_t v28 = a2[3].i32[2];
        *(void *)__str = v28;
        uint64_t v29 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v28, __str);
        Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(a2, v122, (const std::string *)&v135, &v123, v26 + 3, v29 + 3, 0);
        if ((v136[7] & 0x80000000) != 0) {
          operator delete((void *)v135);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        uint64_t v30 = *(void *)(a1 + 40);
        unint64_t v31 = a2[3].i32[2];
        *(void *)__str = v31;
        lpsrc[0] = *((void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30 + 56, v31, __str)+ 3);
        char v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v30 + 184), (void *)lpsrc[0], (long long **)lpsrc);
        long long v33 = *(_OWORD *)(v32 + 72);
        long long v135 = *(_OWORD *)(v32 + 56);
        *(_OWORD *)uint64_t v136 = v33;
        uint64_t v34 = (const void *)*((void *)v32 + 12);
        *(void *)&v136[16] = *((void *)v32 + 11);
        *(void *)&v136[24] = 0;
        long long v137 = 0uLL;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136[24], v34, *((void *)v32 + 13), (uint64_t)(*((void *)v32 + 13) - (void)v34) >> 2);
        *(_OWORD *)__str = v135;
        *(_OWORD *)&__str[16] = *(_OWORD *)v136;
        uint64_t v131 = *(void *)&v136[16];
        std::string __p = 0;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)&v136[24], v137, (uint64_t)(v137 - *(void *)&v136[24]) >> 2);
        memset(&v114, 0, sizeof(v114));
        uint64_t v109 = &v114;
        LOBYTE(v110) = 0;
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        v114.__r_.__value_.__l.__size_ = v114.__r_.__value_.__r.__words[0];
        v114.__r_.__value_.__r.__words[2] = v114.__r_.__value_.__r.__words[0] + 64;
        v114.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v114.__r_.__value_.__r.__words[2], (long long *)__str, &v135, (uint64_t)v114.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr, void *, std::string *))(*(void *)v17 + 64))(&v115, v17, &v114);
        uint64_t v35 = *(void *)(v115.__r_.__value_.__r.__words[0] + 32);
        long long v36 = *(_OWORD *)(v115.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)lpsrc = *(_OWORD *)v115.__r_.__value_.__l.__data_;
        long long v117 = v36;
        uint64_t v118 = v35;
        long long v119 = 0;
        int v120 = 0;
        uint64_t v121 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v119, *(const void **)(v115.__r_.__value_.__r.__words[0] + 40), *(void *)(v115.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v115.__r_.__value_.__r.__words[0] + 48)- *(void *)(v115.__r_.__value_.__r.__words[0] + 40)) >> 2);
        uint64_t v109 = &v115;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
        uint64_t v109 = &v114;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
        if (__p)
        {
          uint64_t v133 = __p;
          operator delete(__p);
        }
        uint64_t v37 = *(void *)(a1 + 40);
        unint64_t v38 = a2[3].i32[2];
        v115.__r_.__value_.__r.__words[0] = v38;
        *(void *)__str = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v37 + 96, v38, &v115)[3];
        unint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v37 + 184), *(void **)__str, (long long **)__str);
        *(_OWORD *)(v39 + 56) = *(_OWORD *)lpsrc;
        *(_OWORD *)(v39 + 72) = v117;
        *((void *)v39 + 11) = v118;
        if (v39 + 56 != (char *)lpsrc) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, (char *)v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
        }
        if (v119)
        {
          int v120 = v119;
          operator delete(v119);
        }
        if (*(void *)&v136[24])
        {
          *(void *)&long long v137 = *(void *)&v136[24];
          operator delete(*(void **)&v136[24]);
        }
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
        goto LABEL_178;
      }
      if (v15 == 1.0)
      {
        uint64_t v19 = *(void **)(a1 + 40);
        if (v19[5] - v19[4] == 16) {
          goto LABEL_178;
        }
        unint64_t v20 = a2[3].i32[2];
        v115.__r_.__value_.__r.__words[0] = v20;
        char v21 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v19 + 12), v20, &v115)[3];
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v138, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v22 = *v21;
          v138.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v22;
        }
        std::unordered_set<std::string>::unordered_set((uint64_t)lpsrc, (uint64_t)&v138, 1);
        Espresso::net::get_consumers_of_blobs(v19, lpsrc, (uint64_t)&v135);
        uint64_t v43 = *(void *)(a1 + 40) + 96;
        unint64_t v44 = a2[3].i32[2];
        v114.__r_.__value_.__r.__words[0] = v44;
        v123.__r_.__value_.__r.__words[0] = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v43, v44, &v114)[3];
        uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v135, (unsigned __int8 *)v123.__r_.__value_.__l.__data_, (long long **)&v123);
        memset(__str, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__str, *((const void **)v45 + 5), *((void *)v45 + 6), (uint64_t)(*((void *)v45 + 6) - *((void *)v45 + 5)) >> 3);
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(void **)v136);
        uint64_t v46 = (void *)v135;
        *(void *)&long long v135 = 0;
        if (v46) {
          operator delete(v46);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)lpsrc);
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        unint64_t v48 = *(unint64_t **)&__str[8];
        uint64_t v47 = *(unint64_t **)__str;
        if (*(void *)&__str[8] == *(void *)__str)
        {
          uint64_t v49 = *(void *)(a1 + 40) + 56;
          unint64_t v50 = a2[3].i32[2];
          *(void *)&long long v135 = v50;
          uint64_t v51 = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v49, v50, &v135)[3];
          uint64_t v52 = *(void *)(a1 + 40) + 96;
          unint64_t v53 = a2[3].i32[2];
          v138.__r_.__value_.__r.__words[0] = v53;
          uint64_t v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v52, v53, &v138);
          unint64_t v55 = *(Espresso::net **)(a1 + 40);
          Espresso::net::get_producers_of_blobs(v55, (uint64_t)&v135);
          lpsrc[0] = v51;
          lpsrc[0] = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v135, (uint64_t)v51, (uint64_t)&std::piecewise_construct, (long long **)lpsrc)+ 5;
          unint64_t v56 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v55 + 96, (unint64_t *)lpsrc[0], (uint64_t)&std::piecewise_construct, (uint64_t **)lpsrc);
          if (v56 != v54) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v56 + 3), (std::string *)v54[3], (std::string *)v54[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54[4] - v54[3]) >> 3));
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&v135);
          unint64_t v48 = *(unint64_t **)&__str[8];
          uint64_t v47 = *(unint64_t **)__str;
        }
        for (; v47 != v48; ++v47)
        {
          uint64_t v57 = *(void *)(a1 + 40) + 56;
          *(void *)&long long v135 = v47;
          unint64_t v58 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v57, v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v135);
          uint64_t v59 = v58[3];
          uint64_t v60 = v58[4];
          while (v59 != v60)
          {
            uint64_t v61 = *(void *)(a1 + 40) + 96;
            unint64_t v62 = a2[3].i32[2];
            *(void *)&long long v135 = v62;
            uint64_t v63 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v61, v62, &v135);
            uint64_t v64 = (unsigned __int8 **)v63[3];
            uint64_t v65 = *(unsigned __int8 *)(v59 + 23);
            if ((v65 & 0x80u) == 0) {
              uint64_t v66 = (unsigned __int8 *)*(unsigned __int8 *)(v59 + 23);
            }
            else {
              uint64_t v66 = *(unsigned __int8 **)(v59 + 8);
            }
            unint64_t v67 = (unsigned __int8 *)*((unsigned __int8 *)v64 + 23);
            int v68 = (char)v67;
            if ((char)v67 < 0) {
              unint64_t v67 = v64[1];
            }
            if (v66 == v67)
            {
              if (v68 >= 0) {
                uint64_t v69 = (unsigned __int8 *)v63[3];
              }
              else {
                uint64_t v69 = *v64;
              }
              if ((v65 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v59, v69, *(void *)(v59 + 8))) {
                  goto LABEL_82;
                }
LABEL_81:
                uint64_t v71 = *(void *)(a1 + 40) + 56;
                unint64_t v72 = a2[3].i32[2];
                *(void *)&long long v135 = v72;
                unint64_t v73 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v71, v72, &v135);
                std::string::operator=((std::string *)v59, (const std::string *)v73[3]);
                goto LABEL_82;
              }
              if (!*(unsigned char *)(v59 + 23)) {
                goto LABEL_81;
              }
              uint64_t v70 = 0;
              while (*(unsigned __int8 *)(v59 + v70) == v69[v70])
              {
                if (v65 == ++v70) {
                  goto LABEL_81;
                }
              }
            }
LABEL_82:
            v59 += 24;
          }
        }
        Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
        uint64_t v74 = *(void **)__str;
        if (!*(void *)__str)
        {
LABEL_178:
          if (v125) {
            nitro::nitro_function::nitro_function(v125);
          }
          return;
        }
        *(void *)&__str[8] = *(void *)__str;
LABEL_177:
        operator delete(v74);
        goto LABEL_178;
      }
      if (floorf(v15) != v15) {
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Invalid alpha for EW POW on ANE.");
      }
      if (v15 < 2.0) {
        goto LABEL_178;
      }
      *(void *)&long long v117 = 897988541;
      BYTE8(v117) = 0;
      HIDWORD(v119) = 0;
      LODWORD(v120) = 0;
      lpsrc[0] = (void *)1;
      lpsrc[1] = (void *)1065353216;
      Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::remove_layer(a2);
      std::string::basic_string[abi:ne180100]<0>(__str, "");
      std::string::basic_string[abi:ne180100]<0>(&v138, "");
      uint64_t v40 = *(void *)(a1 + 40) + 56;
      *(void *)&long long v135 = a2[3].i32[2];
      uint64_t v41 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v40, v135, &v135)[3];
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v41, *((void *)v41 + 1));
      }
      else
      {
        long long v42 = *v41;
        v123.__r_.__value_.__r.__words[2] = *((void *)v41 + 2);
        *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v42;
      }
      int v75 = (int)v7[2];
      if (v75 < 2)
      {
LABEL_171:
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v123.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        if ((__str[23] & 0x80000000) == 0) {
          goto LABEL_178;
        }
        uint64_t v74 = *(void **)__str;
        goto LABEL_177;
      }
      unint64_t v105 = v75;
      uint64_t v76 = 2;
      while (1)
      {
        Espresso::abstract_engine_factory::shared(&v114);
        uint64_t v77 = v114.__r_.__value_.__r.__words[0];
        std::string::basic_string[abi:ne180100]<0>(&v135, "elementwise");
        LODWORD(v109) = (***(uint64_t (****)(void))(v124 + 8))(*(void *)(v124 + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v77, (uint64_t)&v124, (uint64_t)&v135, (uint64_t)lpsrc, (int *)&v109);
        if (!v115.__r_.__value_.__r.__words[0]) {
          break;
        }
        if (!v78) {
          goto LABEL_94;
        }
        std::string::size_type size = (std::__shared_weak_count *)v115.__r_.__value_.__l.__size_;
        if (v115.__r_.__value_.__l.__size_)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v115.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          goto LABEL_95;
        }
LABEL_97:
        if ((v136[7] & 0x80000000) != 0) {
          operator delete((void *)v135);
        }
        if (v114.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v114.__r_.__value_.__l.__size_);
        }
        uint64_t v80 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
        if (*(char *)(v80 + 39) >= 0) {
          size_t v81 = *(unsigned __int8 *)(v80 + 39);
        }
        else {
          size_t v81 = *(void *)(v80 + 24);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v135, v81 + 14);
        if (v136[7] >= 0) {
          unint64_t v82 = &v135;
        }
        else {
          unint64_t v82 = (long long *)v135;
        }
        if (v81)
        {
          if (*(char *)(v80 + 39) >= 0) {
            uint64_t v83 = (const void *)(v80 + 16);
          }
          else {
            uint64_t v83 = *(const void **)(v80 + 16);
          }
          memmove(v82, v83, v81);
        }
        strcpy((char *)v82 + v81, "_ew_pow_xform_");
        std::to_string(&v114, v76 - 2);
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v84 = &v114;
        }
        else {
          unint64_t v84 = (std::string *)v114.__r_.__value_.__r.__words[0];
        }
        if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v85 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v85 = v114.__r_.__value_.__l.__size_;
        }
        unint64_t v86 = std::string::append((std::string *)&v135, (const std::string::value_type *)v84, v85);
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        if ((v136[7] & 0x80000000) != 0) {
          operator delete((void *)v135);
        }
        if (v76 == 2)
        {
          uint64_t v88 = *(void *)(a1 + 40) + 56;
          unint64_t v89 = a2[3].i32[2];
          *(void *)&long long v135 = v89;
          unint64_t v90 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v88, v89, &v135);
          std::string::operator=(&v138, (const std::string *)v90[3]);
        }
        else
        {
          std::string::operator=(&v138, (const std::string *)__str);
        }
        if (v76 == v105)
        {
          uint64_t v91 = *(void *)(a1 + 40) + 96;
          unint64_t v92 = a2[3].i32[2];
          *(void *)&long long v135 = v92;
          long long v93 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v91, v92, &v135);
          std::string::operator=((std::string *)__str, (const std::string *)v93[3]);
        }
        else
        {
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v94 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v94 = v115.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v135, v94 + 7);
          if (v136[7] >= 0) {
            uint64_t v95 = &v135;
          }
          else {
            uint64_t v95 = (long long *)v135;
          }
          if (v94)
          {
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v96 = &v115;
            }
            else {
              v96 = (std::string *)v115.__r_.__value_.__r.__words[0];
            }
            memmove(v95, v96, v94);
          }
          strcpy((char *)v95 + v94, "_output");
          if ((__str[23] & 0x80000000) != 0) {
            operator delete(*(void **)__str);
          }
          *(_OWORD *)__str = v135;
          *(void *)&__str[16] = *(void *)v136;
        }
        v112 = v78;
        uint64_t v113 = size;
        if (size) {
          atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v114, "elementwise");
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v135, v138.__r_.__value_.__l.__data_, v138.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v135 = *(_OWORD *)&v138.__r_.__value_.__l.__data_;
          *(void *)uint64_t v136 = *((void *)&v138.__r_.__value_.__l + 2);
        }
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external((std::string *)&v136[8], v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&v136[8] = v123;
        }
        uint64_t v109 = 0;
        v110 = 0;
        p_data = 0;
        v106 = (std::string *)&v109;
        LOBYTE(v107) = 0;
        uint64_t v109 = (std::string *)operator new(0x30uLL);
        v110 = v109;
        p_data = (void **)&v109[2].__r_.__value_.__l.__data_;
        v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v135, &v137, v109);
        if ((__str[23] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v128, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
        }
        else {
          std::string v128 = *(std::string *)__str;
        }
        v106 = 0;
        int v107 = 0;
        v108 = 0;
        uint64_t v126 = (void ***)&v106;
        char v127 = 0;
        v106 = (std::string *)operator new(0x18uLL);
        int v107 = v106;
        v108 = (void **)&v106[1].__r_.__value_.__l.__data_;
        int v107 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v108, (long long *)&v128, (long long *)&v129, v106);
        Espresso::single_match_state<Espresso::ANECompilerEngine::elementwise_kernel>::add_kernel(a2, &v112, &v114, &v115, &v109, &v106, 0);
        uint64_t v126 = (void ***)&v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v126);
        if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v128.__r_.__value_.__l.__data_);
        }
        v106 = (std::string *)&v109;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
        for (uint64_t i = 0; i != -48; i -= 24)
        {
          if ((char)v136[i + 31] < 0) {
            operator delete(*(void **)&v136[i + 8]);
          }
        }
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v114.__r_.__value_.__l.__data_);
        }
        if (v113) {
          nitro::nitro_function::nitro_function(v113);
        }
        uint64_t v98 = (uint64_t **)(*(void *)(a1 + 40) + 184);
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
        v99 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v98, &v138, (long long **)&v114);
        long long v100 = *(_OWORD *)(v99 + 72);
        long long v135 = *(_OWORD *)(v99 + 56);
        *(_OWORD *)uint64_t v136 = v100;
        uint64_t v101 = (const void *)*((void *)v99 + 12);
        *(void *)&v136[16] = *((void *)v99 + 11);
        *(void *)&v136[24] = 0;
        long long v137 = 0uLL;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136[24], v101, *((void *)v99 + 13), (uint64_t)(*((void *)v99 + 13) - (void)v101) >> 2);
        uint64_t v102 = (uint64_t **)(*(void *)(a1 + 40) + 184);
        v114.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        unint64_t v103 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v102, __str, (long long **)&v114);
        long long v104 = *(_OWORD *)v136;
        *(_OWORD *)(v103 + 56) = v135;
        *(_OWORD *)(v103 + 72) = v104;
        *((void *)v103 + 11) = *(void *)&v136[16];
        if (v103 + 56 != (char *)&v135) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v103 + 96, *(char **)&v136[24], v137, (uint64_t)(v137 - *(void *)&v136[24]) >> 2);
        }
        if (*(void *)&v136[24])
        {
          *(void *)&long long v137 = *(void *)&v136[24];
          operator delete(*(void **)&v136[24]);
        }
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v115.__r_.__value_.__l.__data_);
        }
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        if (++v76 > v105) {
          goto LABEL_171;
        }
      }
      uint64_t v78 = 0;
LABEL_94:
      std::string::size_type size = 0;
LABEL_95:
      if (v115.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v115.__r_.__value_.__l.__size_);
      }
      goto LABEL_97;
    }
  }
}

void sub_1921D6234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a46) {
    nitro::nitro_function::nitro_function(a46);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::elementwise_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::reduce_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gather_nd_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::SerDes::layer_io<Espresso::generic_copy_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v11[0] = 0;
  v11[1] = a4;
  Espresso::SerDes::params_io<Espresso::copy_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "copy");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921D667C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::copy_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "flag");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, &__p, a2);
  }
  else
  {
    if (a3) {
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "flag");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2);
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1921D67A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5RTError::~E5RTError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE326BD0;
  uint64_t v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0) {
      operator delete(v2->~runtime_error);
    }
    MEMORY[0x192FF16B0](v2, 0x1032C402ED93987);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE326BD0;
  uint64_t v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0) {
      operator delete(v2->~runtime_error);
    }
    MEMORY[0x192FF16B0](v2, 0x1032C402ED93987);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1EE326BD0;
  uint64_t v2 = this[1].__vftable;
  this[1].__vftable = 0;
  if (v2)
  {
    E5RT::Status::~Status((E5RT::Status *)&v2[1]);
    if (SHIBYTE(v2->what) < 0) {
      operator delete(v2->~runtime_error);
    }
    MEMORY[0x192FF16B0](v2, 0x1032C402ED93987);
  }
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::AbstractMILCompiler::Options::AssertValid(std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Input must be non-empty.");
    goto LABEL_22;
  }
  if (!this->__r_.__value_.__l.__size_) {
    goto LABEL_17;
  }
LABEL_3:
  memset(&__p, 0, sizeof(__p));
  if ((size & 0x80u) == 0) {
    uint64_t v3 = this;
  }
  else {
    uint64_t v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + size));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  unsigned __int8 v4 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 == 255 || !v4)
  {
    char v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not exist.", (const void **)&this->__r_.__value_.__l.__data_, &__p);
    std::logic_error::logic_error(v6, &__p);
    v6->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v6, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this[1].__r_.__value_.__s + 23)) {
      goto LABEL_14;
    }
LABEL_19:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is a required argument");
    goto LABEL_22;
  }
  if (!this[1].__r_.__value_.__l.__size_) {
    goto LABEL_19;
  }
LABEL_14:
  if (this[2].__r_.__value_.__r.__words[0] == this[2].__r_.__value_.__l.__size_)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "mil-entry-points must be non-empty.");
LABEL_22:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
}

void sub_1921D6A10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D6A24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D6A38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D6A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (v3 & 0x80000000) != 0;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

{
  std::string::size_type v3;
  BOOL v4;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  BOOL v4 = (v3 & 0x80000000) != 0;
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0) {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  std::string::size_type v3 = v3;
  if (v4) {
    std::string::size_type v3 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_1921D6AF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  v11[19] = *MEMORY[0x1E4F143B8];
  E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<MIL::IRProgram>(*(void *)(a1 + 24), a2, &v9);
  std::__fs::filesystem::__create_directories(&v9, 0);
  memset(__p, 0, 24);
  std::string::append[abi:ne180100]<char const*,0>(__p, (std::string *)"model.milhash", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)__p, (uint64_t)&v9, a3);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__status(a3, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 255 && __p[0].__r_.__value_.__s.__data_[0]) {
    goto LABEL_14;
  }
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, (uint64_t)v7);
  std::ofstream::basic_ofstream((uint64_t *)__p);
  uint64_t v5 = (v8 & 0x80u) == 0 ? v7 : (void **)v7[0];
  char v6 = (v8 & 0x80u) == 0 ? (void *)v8 : v7[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v5, (uint64_t)v6);
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)((char *)__p + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) | 4);
  }
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA400];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA400]
                                                                                                 + 24);
  MEMORY[0x192FF1040](&__p[0].__r_.__value_.__r.__words[1]);
  std::ostream::~ostream();
  MEMORY[0x192FF15B0](v11);
  if (((char)v8 & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_15;
  }
  operator delete(v7[0]);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0) {
LABEL_15:
  }
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
}

void sub_1921D6D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,_Unwind_Exception *exception_objecta,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 23) < 0) {
    operator delete(*(void **)v26);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5BundleCacheManager::GetPathToAllBundlesForInput<MIL::IRProgram>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__fs::filesystem::path *a3@<X8>)
{
  memset(&v11, 0, sizeof(v11));
  int v6 = *(char *)(a1 + 55);
  if (v6 >= 0) {
    uint64_t v7 = (std::string *)(a1 + 32);
  }
  else {
    uint64_t v7 = *(std::string **)(a1 + 32);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v11.__pn_, v7, (std::string *)((char *)v7 + v8));
  std::__fs::filesystem::operator/[abi:ne180100](&v11, a1 + 8, &v12);
  E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(a2, 0, (uint64_t)&v9);
  std::__fs::filesystem::path __p = v9;
  memset(&v9, 0, sizeof(v9));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v12, a3);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v12.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_14:
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
    return;
  }
LABEL_13:
  operator delete(v12.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_14;
  }
}

void sub_1921D6EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((a28 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_1921D6F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0) {
    JUMPOUT(0x1921D6F14);
  }
  JUMPOUT(0x1921D6F0CLL);
}

void E5RT::GetE5PathFromCompositeBundle(uint64_t a1@<X0>, long long *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  E5RT::PathWrapper::PathWrapper(&v77, a1);
  BYTE7(v81) = 3;
  LODWORD(__p[0]) = 3499310;
  BOOL HasExtension = E5RT::PathWrapper::HasExtension((const std::__fs::filesystem::path *)&v77, (uint64_t)__p);
  BOOL v6 = HasExtension;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_3:
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(a3, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
      }
      else {
        *a3 = v77;
      }
      goto LABEL_76;
    }
  }
  else if (HasExtension)
  {
    goto LABEL_3;
  }
  BYTE7(v81) = 7;
  strcpy((char *)__p, ".bundle");
  BOOL v7 = E5RT::PathWrapper::HasExtension((const std::__fs::filesystem::path *)&v77, (uint64_t)__p);
  BOOL v8 = v7;
  if (SBYTE7(v81) < 0) {
    operator delete(__p[0]);
  }
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "GetE5PathFromCompositeBundle");
    std::string::basic_string[abi:ne180100]<0>(&__x, "Invalid E5 path specified.");
    E5RT::Status::Status(&v79, 8, &__x);
    E5RT::E5RTError::E5RTError(exception, __p, &v79);
  }
  if (*((unsigned char *)a2 + 16))
  {
    long long v76 = *a2;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = *a2;
    if (LODWORD(v83.__r_.__value_.__r.__words[1]))
    {
      if (LODWORD(v83.__r_.__value_.__r.__words[1]) != 1311977521)
      {
        char v32 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "GetBundleNamesForPlatformIdentifierOverride");
        std::string::basic_string[abi:ne180100]<0>(&__x, "Unexpected input platform identifier with specialization.");
        E5RT::Status::Status(&v79, 1, &__x);
        E5RT::E5RTError::E5RTError(v32, __p, &v79);
      }
      E5RT::GetDeviceBundleNamesCompatibleWithPlatform((uint64_t)v83.__r_.__value_.__l.__data_, __p);
      if (__p[1] == __p[0])
      {
        std::to_string((std::string *)&v79, v83.__r_.__value_.__r.__words[0]);
        uint64_t v71 = std::string::insert((std::string *)&v79, 0, "N301 specialization provided for incompatible BasePlatform = ");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        __x.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v79.__end_cap_.__value_) < 0) {
          operator delete(v79.__begin_);
        }
        unint64_t v73 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v79, "GetBundleNamesForPlatformIdentifierOverride");
        E5RT::Status::Status(&__dst, 1, &__x);
        E5RT::E5RTError::E5RTError(v73, &v79, &__dst);
      }
      if (*((char *)__p[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)__p[0], *((void *)__p[0] + 1));
      }
      else
      {
        long long v30 = *(_OWORD *)__p[0];
        __x.__r_.__value_.__r.__words[2] = *((void *)__p[0] + 2);
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v30;
      }
      std::vector<std::string>::vector[abi:ne180100](&v78, (uint64_t)&__x, 1uLL);
      if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__x.__r_.__value_.__l.__data_);
      }
      std::vector<std::string>::~vector[abi:ne180100](__p);
    }
    else
    {
      int data = (int)v83.__r_.__value_.__l.__data_;
      uint64_t v10 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v7);
      (*(void (**)(void **__return_ptr))(*(void *)v10 + 136))(__p);
      if (__p[1] == __p[0])
      {
        std::to_string((std::string *)&v79, data);
        long long v33 = std::string::insert((std::string *)&v79, 0, "No bundles found for platform = ");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        __x.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v79.__end_cap_.__value_) < 0) {
          operator delete(v79.__begin_);
        }
        uint64_t v35 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v79, "GetBundleNamesForPlatformIdentifierOverride");
        E5RT::Status::Status(&__dst, 8, &__x);
        E5RT::E5RTError::E5RTError(v35, &v79, &__dst);
      }
      std::vector<std::string>::vector<std::__wrap_iter<std::string_view *>,0>(&v78, (uint64_t)__p[0], (uint64_t)__p[1]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v83);
    std::string::size_type size = v78.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v78.__r_.__value_.__r.__words[0]; ; i += 24)
    {
      if (i == size)
      {
        long long v36 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "GetE5PathFromCompositeBundleForPlatformIdentifierOverride");
        std::string::basic_string[abi:ne180100]<0>(&__x, "Unable to find requested override platform in provided E5 bundle.");
        E5RT::Status::Status(&v79, 8, &__x);
        E5RT::E5RTError::E5RTError(v36, __p, &v79);
      }
      E5RT::PathWrapper::Append((uint64_t)&v77, (std::string *)i, (std::string *)__p);
      if (E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)__p)) {
        break;
      }
      if (SBYTE7(v81) < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__x, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)i;
      __x.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v13;
    }
    sub_19243D01C(a3, (uint64_t)__p, (uint64_t)&__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__x.__r_.__value_.__l.__data_);
      if ((SBYTE7(v81) & 0x80000000) == 0)
      {
LABEL_30:
        std::string::size_type v17 = v78.__r_.__value_.__r.__words[0];
        if (!v78.__r_.__value_.__r.__words[0]) {
          goto LABEL_41;
        }
        goto LABEL_34;
      }
    }
    else if ((SBYTE7(v81) & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(__p[0]);
    std::string::size_type v17 = v78.__r_.__value_.__r.__words[0];
    if (!v78.__r_.__value_.__r.__words[0])
    {
LABEL_41:
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v76);
      goto LABEL_76;
    }
LABEL_34:
    std::string::size_type v18 = v78.__r_.__value_.__l.__size_;
    uint64_t v19 = (void *)v17;
    if (v78.__r_.__value_.__l.__size_ != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0) {
          operator delete(*(void **)(v18 - 24));
        }
        v18 -= 24;
      }
      while (v18 != v17);
      uint64_t v19 = (void *)v78.__r_.__value_.__r.__words[0];
    }
    v78.__r_.__value_.__l.__size_ = v17;
    operator delete(v19);
    goto LABEL_41;
  }
  CurrentPlatform = E5RT::GetCurrentPlatform((E5RT *)v7);
  *(_OWORD *)std::__fs::filesystem::path __p = xmmword_192DBBB10;
  long long v81 = unk_192DBBB20;
  int v15 = (void **)v82;
  if ((uint64_t)CurrentPlatform > 33039)
  {
    if (CurrentPlatform == (E5Common::E5PlatformManager *)33040)
    {
      uint64_t v16 = 0;
      goto LABEL_47;
    }
    if (CurrentPlatform == (E5Common::E5PlatformManager *)33042)
    {
      uint64_t v16 = 1;
      goto LABEL_47;
    }
  }
  else
  {
    if (CurrentPlatform == (E5Common::E5PlatformManager *)24608)
    {
      uint64_t v16 = 2;
      goto LABEL_47;
    }
    if (CurrentPlatform == (E5Common::E5PlatformManager *)24609)
    {
      uint64_t v16 = 3;
LABEL_47:
      int v15 = &__p[v16];
    }
  }
  if ((char *)v15 - (char *)__p == 32)
  {
    memset(&v79, 0, sizeof(v79));
  }
  else
  {
    *((unsigned char *)&__x.__r_.__value_.__s + 23) = 16;
    strcpy((char *)&__x, "H14G.N301.bundle");
    CurrentPlatform = (E5Common::E5PlatformManager *)std::vector<std::string>::vector[abi:ne180100](&v79, (uint64_t)&__x, 1uLL);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v20 = E5Common::E5PlatformManager::Instance(CurrentPlatform);
  (*(void (**)(void **__return_ptr))(*(void *)v20 + 136))(__p);
  char v21 = std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string_view *>,std::__wrap_iter<std::string_view *>>(&v79, (uint64_t)v79.__end_, (const void **)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
  if (E5RT::IsAVirtualMachine((E5RT *)v21))
  {
    v22.__i_ = v79.__begin_;
    *((unsigned char *)&__x.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&__x, "jit.bundle");
    std::vector<std::string>::insert(&v79, v22, &__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
  }
  std::vector<std::string>::pointer begin = v79.__begin_;
  std::vector<std::string>::pointer end = v79.__end_;
  while (1)
  {
    if (begin == end)
    {
      if (!E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&v77))
      {
        unint64_t v44 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&__x, "GetE5PathFromCompositeBundle");
        std::operator+<char>();
        E5RT::Status::Status(&v83, 8, &v78);
        E5RT::E5RTError::E5RTError(v44, &__x, &v83);
      }
      std::operator+<char>();
      uint64_t v37 = std::string::append(&v78, ". Found bundles : { ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __x.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v83, ".bundle");
      E5RT::PathWrapper::FindFilesWithExtension((uint64_t)&v77, (uint64_t)&v83, 1, (uint64_t)&v78);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      std::string::size_type v40 = v78.__r_.__value_.__l.__size_;
      std::string::size_type v39 = v78.__r_.__value_.__r.__words[0];
      if (v78.__r_.__value_.__r.__words[0] == v78.__r_.__value_.__l.__size_)
      {
LABEL_102:
        std::vector<std::string>::~vector[abi:ne180100]((void **)&v78.__r_.__value_.__l.__data_);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("}. Expected : { ", (const void **)&__x.__r_.__value_.__l.__data_, &v78);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        std::string __x = v78;
        std::vector<std::string>::pointer v41 = v79.__begin_;
        for (std::vector<std::string>::pointer j = v79.__end_; v41 != j; ++v41)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__x.__r_.__value_.__l.__data_, (const void **)&v41->__r_.__value_.__l.__data_, (uint64_t)&v78);
          int v68 = std::string::append(&v78, " ");
          std::string::size_type v69 = v68->__r_.__value_.__r.__words[0];
          v83.__r_.__value_.__r.__words[0] = v68->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7);
          char v70 = HIBYTE(v68->__r_.__value_.__r.__words[2]);
          v68->__r_.__value_.__l.__size_ = 0;
          v68->__r_.__value_.__r.__words[2] = 0;
          v68->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__x.__r_.__value_.__l.__data_);
          }
          __x.__r_.__value_.__r.__words[0] = v69;
          __x.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&__x.__r_.__value_.__s + 23) = v70;
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v78.__r_.__value_.__l.__data_);
          }
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("}.", (const void **)&__x.__r_.__value_.__l.__data_, &v78);
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        std::string __x = v78;
        uint64_t v43 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v78, "GetE5PathFromCompositeBundle");
        E5RT::Status::Status(&v83, 8, &__x);
        E5RT::E5RTError::E5RTError(v43, &v78, &v83);
      }
      while (1)
      {
        unint64_t v45 = *(unsigned __int8 *)(v39 + 23);
        if (*(char *)(v39 + 23) < 0)
        {
          std::string::size_type v46 = *(void *)v39;
          uint64_t v47 = *(void *)(v39 + 8);
        }
        else
        {
          std::string::size_type v46 = v39;
          uint64_t v47 = *(unsigned __int8 *)(v39 + 23);
        }
        unint64_t v48 = (unsigned __int8 *)(v46 + v47);
        if (v47)
        {
          uint64_t v49 = (unsigned __int8 *)v46;
          unint64_t v50 = (unsigned __int8 *)(v46 + v47);
          do
          {
            uint64_t v51 = v49;
            uint64_t v52 = v49;
            while (1)
            {
              int v53 = *v52++;
              if (v53 == 47) {
                break;
              }
              uint64_t v51 = v52;
              if (v52 == v48)
              {
                uint64_t v51 = v50;
                goto LABEL_124;
              }
            }
            uint64_t v49 = v51 + 1;
            unint64_t v50 = v51;
          }
          while (v52 != v48);
        }
        else
        {
          uint64_t v51 = (unsigned __int8 *)v46;
        }
LABEL_124:
        uint64_t v54 = &v51[-v46];
        if (v51 == v48) {
          unint64_t v55 = 0;
        }
        else {
          unint64_t v55 = v54 + 1;
        }
        if ((v45 & 0x80) != 0)
        {
          unint64_t v45 = *(void *)(v39 + 8);
          if (v45 < (unint64_t)v55) {
LABEL_158:
          }
            std::string::__throw_out_of_range[abi:ne180100]();
          std::string::size_type v56 = *(void *)v39;
        }
        else
        {
          std::string::size_type v56 = v39;
          if ((unint64_t)v55 > v45) {
            goto LABEL_158;
          }
        }
        std::string::size_type v57 = v45 - (void)v55;
        if (v45 - (unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v57 >= 0x17)
        {
          uint64_t v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v57 | 7) != 0x17) {
            uint64_t v59 = v57 | 7;
          }
          uint64_t v60 = v59 + 1;
          p_dst = (std::string *)operator new(v59 + 1);
          __dst.__r_.__value_.__l.__size_ = v57;
          __dst.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v45 - (_BYTE)v55;
          p_dst = &__dst;
          if ((unsigned __int8 *)v45 == v55) {
            goto LABEL_140;
          }
        }
        memmove(p_dst, &v55[v56], v57);
LABEL_140:
        p_dst->__r_.__value_.__s.__data_[v57] = 0;
        if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_x = &__x;
        }
        else {
          p_x = (std::string *)__x.__r_.__value_.__r.__words[0];
        }
        if ((__x.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v62 = HIBYTE(__x.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v62 = __x.__r_.__value_.__l.__size_;
        }
        uint64_t v63 = std::string::insert(&__dst, 0, (const std::string::value_type *)p_x, v62);
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        uint64_t v65 = std::string::append(&v83, " ");
        std::string::size_type v66 = v65->__r_.__value_.__r.__words[0];
        v82[0] = v65->__r_.__value_.__l.__size_;
        *(void *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
        char v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__x.__r_.__value_.__l.__data_);
        }
        __x.__r_.__value_.__r.__words[0] = v66;
        __x.__r_.__value_.__l.__size_ = v82[0];
        *(std::string::size_type *)((char *)&__x.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v82 + 7);
        *((unsigned char *)&__x.__r_.__value_.__s + 23) = v67;
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v83.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_111;
          }
LABEL_150:
          operator delete(__dst.__r_.__value_.__l.__data_);
          v39 += 24;
          if (v39 == v40) {
            goto LABEL_102;
          }
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_150;
          }
LABEL_111:
          v39 += 24;
          if (v39 == v40) {
            goto LABEL_102;
          }
        }
      }
    }
    E5RT::PathWrapper::Append((uint64_t)&v77, begin, &__x);
    if (E5RT::PathWrapper::PathExists((const std::__fs::filesystem::path *)&__x)) {
      break;
    }
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    ++begin;
  }
  if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v25 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v25;
  }
  sub_19243D01C(a3, (uint64_t)&__x, (uint64_t)&v75);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__x.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_66;
    }
LABEL_80:
    operator delete(__x.__r_.__value_.__l.__data_);
    uint64_t v26 = __p[0];
    if (!__p[0]) {
      goto LABEL_68;
    }
LABEL_67:
    __p[1] = v26;
    operator delete(v26);
    goto LABEL_68;
  }
  operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_80;
  }
LABEL_66:
  uint64_t v26 = __p[0];
  if (__p[0]) {
    goto LABEL_67;
  }
LABEL_68:
  uint64_t v27 = v79.__begin_;
  if (v79.__begin_)
  {
    std::vector<std::string>::pointer v28 = v79.__end_;
    std::vector<std::string>::pointer v29 = v79.__begin_;
    if (v79.__end_ != v79.__begin_)
    {
      do
      {
        if (SHIBYTE(v28[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28[-1].__r_.__value_.__l.__data_);
        }
        --v28;
      }
      while (v28 != v27);
      std::vector<std::string>::pointer v29 = v79.__begin_;
    }
    v79.__end_ = v27;
    operator delete(v29);
  }
LABEL_76:
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
}

void sub_1921D7C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((v50 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v51 - 105) < 0) {
        operator delete(*(void **)(v51 - 128));
      }
      std::vector<std::string>::~vector[abi:ne180100](&a44);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v51 - 160));
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a23);
      if (a31 < 0) {
        operator delete(a26);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v50)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v49);
  goto LABEL_6;
}

BOOL E5RT::PathWrapper::PathExists(const std::__fs::filesystem::path *this)
{
  std::__fs::filesystem::__status(this, 0);
  if (v3) {
    BOOL v1 = v3 == 255;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

void E5RT::PathWrapper::Append(uint64_t a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  memset(&v10, 0, sizeof(v10));
  std::string::size_type v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) != 0)
  {
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    std::string::size_type v5 = size;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v10, a2, (std::string *)((char *)a2 + v5));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v10, a1, &__p);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = __p.__pn_;
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!pn.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v13, pn.__r_.__value_.__l.__data_, 0);
      goto LABEL_19;
    }
    std::string::__init_copy_ctor_external(&v13, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
LABEL_12:
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(v13.__r_.__value_.__r.__words[0] + v13.__r_.__value_.__l.__size_ - 1) != 47) {
        goto LABEL_19;
      }
      uint64_t v7 = --v13.__r_.__value_.__l.__size_;
    }
    else
    {
      if (v13.__r_.__value_.__s.__data_[HIBYTE(v13.__r_.__value_.__r.__words[2]) - 1] != 47) {
        goto LABEL_19;
      }
      uint64_t v7 = HIBYTE(v13.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v13.__r_.__value_.__s + 23) = (*((unsigned char *)&v13.__r_.__value_.__s + 23) - 1) & 0x7F;
      BOOL v8 = &v13;
    }
    v8->__r_.__value_.__s.__data_[v7] = 0;
LABEL_19:
    int v9 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
    *a3 = v13;
    if (v9 < 0)
    {
      operator delete(pn.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_24;
      }
    }
    else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  std::string v13 = pn;
  if (*((unsigned char *)&pn.__r_.__value_.__s + 23)) {
    goto LABEL_12;
  }
  *a3 = pn;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_24:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_25;
    }
    return;
  }
LABEL_21:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
LABEL_25:
  }
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1921D8368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(a21);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_1921D83C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0) {
    JUMPOUT(0x1921D838CLL);
  }
  JUMPOUT(0x1921D8384);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *__src, std::string *a3)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  size_t v7 = (char *)a3 - (char *)__src;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src) {
      goto LABEL_12;
    }
  }
  else
  {
    if (a3 == __src) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    std::string v10 = this;
    if (this > __src)
    {
LABEL_12:
      if (v9 - size < v7)
      {
        std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
        this->__r_.__value_.__l.__size_ = size;
        std::string v13 = this;
        if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_14:
          uint64_t v14 = (char *)v13 + size;
          if (a3 == __src) {
            goto LABEL_38;
          }
          goto LABEL_18;
        }
      }
      else
      {
        std::string v13 = this;
        if ((v6 & 0x80) == 0) {
          goto LABEL_14;
        }
      }
      std::string v13 = (std::string *)this->__r_.__value_.__r.__words[0];
      uint64_t v14 = (std::string::value_type *)(this->__r_.__value_.__r.__words[0] + size);
      if (a3 == __src) {
        goto LABEL_38;
      }
LABEL_18:
      if (v7 >= 0x20)
      {
        uint64_t v20 = (char *)v13 + size;
        if ((unint64_t)((char *)v13 + size - (char *)__src) >= 0x20)
        {
          int v15 = (std::string *)((char *)__src + (v7 & 0xFFFFFFFFFFFFFFE0));
          v14 += v7 & 0xFFFFFFFFFFFFFFE0;
          char v21 = v20 + 16;
          std::vector<std::string>::const_iterator v22 = &__src->__r_.__value_.__r.__words[2];
          unint64_t v23 = v7 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            long long v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            _OWORD *v21 = v24;
            v21 += 2;
            v22 += 4;
            v23 -= 32;
          }
          while (v23);
          if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
            goto LABEL_38;
          }
        }
        else
        {
          int v15 = __src;
        }
      }
      else
      {
        int v15 = __src;
      }
      do
      {
        std::string::value_type v25 = v15->__r_.__value_.__s.__data_[0];
        int v15 = (std::string *)((char *)v15 + 1);
        *v14++ = v25;
      }
      while (v15 != a3);
LABEL_38:
      std::string::value_type *v14 = 0;
      std::string::size_type v26 = v7 + size;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
        this->__r_.__value_.__l.__size_ = v26;
      }
      else {
        *((unsigned char *)&this->__r_.__value_.__s + 23) = v26 & 0x7F;
      }
      return this;
    }
  }
  if ((std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= __src) {
    goto LABEL_12;
  }
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 > 0x16)
  {
    uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v16 = v7 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    size_t v29 = v7;
    int64_t v30 = v17 | 0x8000000000000000;
    std::string __dst = p_dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  else
  {
    HIBYTE(v30) = v7;
    p_dst = (void **)&__dst;
    if (a3 == __src) {
      goto LABEL_24;
    }
  }
  memcpy(p_dst, __src, v7);
  p_dst = (void **)((char *)p_dst + v7);
LABEL_24:
  *(unsigned char *)p_dst = 0;
  if (v30 >= 0) {
    std::string::size_type v18 = (const std::string::value_type *)&__dst;
  }
  else {
    std::string::size_type v18 = (const std::string::value_type *)__dst;
  }
  if (v30 >= 0) {
    std::string::size_type v19 = HIBYTE(v30);
  }
  else {
    std::string::size_type v19 = v29;
  }
  std::string::append(this, v18, v19);
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst);
  }
  return this;
}

void sub_1921D8624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_) {
    return std::string::operator=(&a3->__pn_, &this->__pn_);
  }
  if (std::__fs::filesystem::path::__filename(a3).__size_) {
    std::string::push_back(&a3->__pn_, 47);
  }
  int v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    size_t v7 = this;
  }
  else {
    size_t v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__pn_.__r_.__value_.__l.__size_;
  }
  return std::string::append(&a3->__pn_, (const std::string::value_type *)v7, size);
}

void sub_1921D86E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL E5RT::PathWrapper::HasExtension(const std::__fs::filesystem::path *a1, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__extension(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3.__size_;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v3.__size_;
  p_dst = &__dst;
  if (v3.__size_) {
LABEL_8:
  }
    memmove(p_dst, v3.__data_, v3.__size_);
  p_dst->__r_.__value_.__s.__data_[v3.__size_] = 0;
  __p.__pn_ = __dst;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    BOOL v8 = (std::string *)a2;
  }
  else {
    BOOL v8 = *(std::string **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v8, (std::string *)((char *)v8 + v7));
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v9.__data_ = (const std::string_view::value_type *)&__dst;
  }
  else {
    v9.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v9.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    v9.__size_ = __dst.__r_.__value_.__l.__size_;
  }
  int v10 = std::__fs::filesystem::path::__compare(&__p, v9);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v10 == 0;
    }
LABEL_24:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    return v10 == 0;
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_24;
  }
  return v10 == 0;
}

void sub_1921D8848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    std::__fs::filesystem::path::__string_view v3 = (void **)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void Espresso::AOT::CompilerOptionsForE5::AssertValid(std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_19:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--input is a required argument");
    goto LABEL_42;
  }
  if (!this->__r_.__value_.__l.__size_) {
    goto LABEL_19;
  }
LABEL_3:
  memset(&__p, 0, sizeof(__p));
  if ((size & 0x80u) == 0) {
    std::__fs::filesystem::path::__string_view v3 = this;
  }
  else {
    std::__fs::filesystem::path::__string_view v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v3, (std::string *)((char *)v3 + size));
  BOOL v4 = (E5RT *)std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  unsigned __int8 v5 = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5 == 255 || !v5)
  {
    std::string::size_type v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" does not exist", (const void **)&this->__r_.__value_.__l.__data_, &__p);
    std::logic_error::logic_error(v19, &__p);
    v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v19, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&this[1].__r_.__value_.__s + 23)) {
      goto LABEL_14;
    }
LABEL_21:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "--output is a required argument");
    goto LABEL_42;
  }
  if (!this[1].__r_.__value_.__l.__size_) {
    goto LABEL_21;
  }
LABEL_14:
  if (!this[3].__r_.__value_.__r.__words[0])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Either -p/--e5-platforms and/or --e5-platform-families is a required argument");
    goto LABEL_42;
  }
  std::string::size_type v6 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[9].__r_.__value_.__l.__size_) {
      goto LABEL_32;
    }
  }
  else if (!*((unsigned char *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_32;
  }
  memset(&__p, 0, sizeof(__p));
  if ((v6 & 0x80u) == 0) {
    int data = this + 9;
  }
  else {
    int data = (std::string *)this[9].__r_.__value_.__l.__data_;
  }
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = this[9].__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, data, (std::string *)((char *)data + v6));
  BOOL v4 = (E5RT *)std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  unsigned __int8 v9 = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 == 255 || !v9)
  {
    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(v20, &__p);
    v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v20, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
LABEL_32:
  if (this[11].__r_.__value_.__r.__words[0])
  {
    if (!this[13].__r_.__value_.__s.__data_[19])
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "--ane-options not implemented for Espresso IR model");
      goto LABEL_42;
    }
    if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
    {
      if (!this[9].__r_.__value_.__l.__size_)
      {
LABEL_36:
        int v10 = &this[10].__r_.__value_.__s.__data_[16];
        do
        {
          while (1)
          {
            int v10 = *(std::string::value_type **)v10;
            if (!v10) {
              goto LABEL_43;
            }
            if ((v10[63] & 0x80000000) == 0) {
              break;
            }
            if (!*((void *)v10 + 6)) {
              goto LABEL_41;
            }
          }
        }
        while (v10[63]);
LABEL_41:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid --ane-options value, expect key=value pair(s)");
LABEL_42:
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
    }
    else if (!*((unsigned char *)&this[9].__r_.__value_.__s + 23))
    {
      goto LABEL_36;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Either --ane-options-plist or --ane-options can be set, not both.");
    goto LABEL_42;
  }
LABEL_43:
  if (this[12].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[12].__r_.__value_.__r.__words[0]) {
      goto LABEL_70;
    }
  }
  else if (!this[12].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_70;
  }
  unint64_t v11 = &this[11].__r_.__value_.__s.__data_[16];
  std::string::pointer v12 = this[12].__r_.__value_.__l.__data_;
  if (this[12].__r_.__value_.__s.__data_[15] < 0) {
    unint64_t v11 = (std::string::value_type *)this[11].__r_.__value_.__r.__words[2];
  }
  else {
    std::string::pointer v12 = (std::string::pointer)this[12].__r_.__value_.__s.__data_[15];
  }
  if (v12 == (std::string::pointer)9)
  {
    uint64_t v16 = *(void *)v11;
    int v17 = v11[8];
    if (v16 == 0x636E657265666E69 && v17 == 101)
    {
      if ((char *)&off_1E5746BC8 - (char *)&c_validAneResidencyRequirements != 48) {
        goto LABEL_70;
      }
LABEL_55:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid --e5-require-ane-resident value");
      goto LABEL_42;
    }
    goto LABEL_69;
  }
  if (v12 == (std::string::pointer)6)
  {
    int v13 = *(_DWORD *)v11;
    int v14 = *((unsigned __int16 *)v11 + 2);
    if (v13 == 1769108595 && v14 == 29795)
    {
      if ((char *)&off_1E5746BD8 - (char *)&c_validAneResidencyRequirements != 48) {
        goto LABEL_70;
      }
      goto LABEL_55;
    }
    goto LABEL_69;
  }
  if (v12 != (std::string::pointer)2 || *(_WORD *)v11 != 28526)
  {
LABEL_69:
    if ((char *)off_1E5746BE8 - (char *)&c_validAneResidencyRequirements != 48) {
      goto LABEL_70;
    }
    goto LABEL_55;
  }
LABEL_70:
  if (this[13].__r_.__value_.__s.__data_[17])
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)E5RT::GetCurrentPlatform(v4);
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    if (this[3].__r_.__value_.__r.__words[0] != 1
      || E5Common::PlatformIdentifier::operator!=((uint64_t)&__p, this[2].__r_.__value_.__r.__words[2] + 16))
    {
      char v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v21, "With --e5-on-device-compilation, -p/--e5-platforms is optional & can only be provided the current SoC.");
      v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(v21, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&__p);
  }
}

void sub_1921D8DF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1921D8E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1921D8E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&a9);
  _Unwind_Resume(a1);
}

void sub_1921D8E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1921D8EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if (v15) {
      goto LABEL_6;
    }
  }
  else if (v15)
  {
LABEL_6:
    __cxa_free_exception(v14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

E5RT *E5RT::GetCurrentPlatform(E5RT *this)
{
  if (qword_1E9301C68 == -1)
  {
    if (!byte_1E9301C50)
    {
LABEL_3:
      if (E5RT::GetChipID(void)::onceToken != -1) {
        dispatch_once(&E5RT::GetChipID(void)::onceToken, &unk_1EE398FE8);
      }
      uint64_t result = E5RT::GetPlatformFromChipID((E5RT *)E5RT::GetChipID(void)::chipID);
      if (!v2) {
        return 0;
      }
      return result;
    }
  }
  else
  {
    dispatch_once(&qword_1E9301C68, &unk_1EE398F88);
    if (!byte_1E9301C50) {
      goto LABEL_3;
    }
  }
  uint64_t result = (E5RT *)E5RT::GetPlatformFromANEInformation(this);
  if (!v3) {
    return 0;
  }
  return result;
}

E5RT *E5RT::GetPlatformFromChipID(E5RT *this)
{
  if ((uint64_t)this <= 32773)
  {
    if ((uint64_t)this >= 24576)
    {
      uint64_t v1 = 0;
      switch((unint64_t)this)
      {
        case 0x6000uLL:
        case 0x6001uLL:
        case 0x6002uLL:
        case 0x6020uLL:
        case 0x6021uLL:
        case 0x6022uLL:
        case 0x6030uLL:
        case 0x6031uLL:
        case 0x6032uLL:
        case 0x6034uLL:
        case 0x6040uLL:
        case 0x6041uLL:
          return this;
        case 0x6003uLL:
        case 0x6004uLL:
        case 0x6005uLL:
        case 0x6006uLL:
        case 0x6007uLL:
        case 0x6008uLL:
        case 0x6009uLL:
        case 0x600AuLL:
        case 0x600BuLL:
        case 0x600CuLL:
        case 0x600DuLL:
        case 0x600EuLL:
        case 0x600FuLL:
        case 0x6010uLL:
        case 0x6011uLL:
        case 0x6012uLL:
        case 0x6013uLL:
        case 0x6014uLL:
        case 0x6015uLL:
        case 0x6016uLL:
        case 0x6017uLL:
        case 0x6018uLL:
        case 0x6019uLL:
        case 0x601AuLL:
        case 0x601BuLL:
        case 0x601CuLL:
        case 0x601DuLL:
        case 0x601EuLL:
        case 0x601FuLL:
        case 0x6023uLL:
        case 0x6024uLL:
        case 0x6025uLL:
        case 0x6026uLL:
        case 0x6027uLL:
        case 0x6028uLL:
        case 0x6029uLL:
        case 0x602AuLL:
        case 0x602BuLL:
        case 0x602CuLL:
        case 0x602DuLL:
        case 0x602EuLL:
        case 0x602FuLL:
        case 0x6033uLL:
        case 0x6035uLL:
        case 0x6036uLL:
        case 0x6037uLL:
        case 0x6038uLL:
        case 0x6039uLL:
        case 0x603AuLL:
        case 0x603BuLL:
        case 0x603CuLL:
        case 0x603DuLL:
        case 0x603EuLL:
        case 0x603FuLL:
          return (E5RT *)v1;
        default:
          if (this == (E5RT *)28672) {
            return this;
          }
          break;
      }
      return (E5RT *)v1;
    }
    if (!this) {
      return this;
    }
    uint64_t v1 = 0;
    if (this == (E5RT *)256) {
      return this;
    }
    return (E5RT *)v1;
  }
  if ((uint64_t)this > 33024)
  {
    if (((unint64_t)this - 33025 > 0x3F || ((1 << (this - 1)) & 0x8002800280028005) == 0)
      && this != (E5RT *)33552)
    {
      uint64_t v1 = 0;
      if (this != (E5RT *)33537) {
        return (E5RT *)v1;
      }
    }
    return this;
  }
  if ((unint64_t)this - 32774 <= 0x2A)
  {
    uint64_t v1 = 0;
    if (((1 << (this - 6)) & 0x40204009C01) != 0) {
      return this;
    }
    return (E5RT *)v1;
  }
  return 0;
}

BOOL E5Common::PlatformIdentifier::operator!=(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 != *(void *)a2 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void *a3@<X8>)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  uint64_t result = (void *)strlen(__s);
  unint64_t v9 = (unint64_t)result + v7;
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    *((unsigned char *)a3 + 23) = v9;
    if (!v7) {
      goto LABEL_15;
    }
LABEL_11:
    if (v6 >= 0) {
      int v13 = a2;
    }
    else {
      int v13 = *a2;
    }
    uint64_t result = memmove(a3, v13, v7);
    goto LABEL_15;
  }
  uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17) {
    uint64_t v11 = v9 | 7;
  }
  uint64_t v12 = v11 + 1;
  uint64_t result = operator new(v11 + 1);
  a3[1] = v9;
  a3[2] = v12 | 0x8000000000000000;
  *a3 = result;
  a3 = result;
  if (v7) {
    goto LABEL_11;
  }
LABEL_15:
  int v14 = (char *)a3 + v7;
  if (v10) {
    uint64_t result = memmove(v14, __s, v10);
  }
  v14[v10] = 0;
  return result;
}

void E5RT::BufferObject::AllocMemory(uint64_t a1, unsigned int a2)
{
  if (a1)
  {
    uint64_t v11 = 0x2B23404000000000;
    long long v12 = 0u;
    long long v13 = 0u;
    kdebug_trace();
    if (a2 != 2)
    {
      if (a2 != 1)
      {
        if (!a2) {
          operator new();
        }
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v14, "AllocMemory");
        std::to_string(&v7, a2);
        unsigned __int8 v5 = std::string::insert(&v7, 0, "Invalid BufferType: ");
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        std::string::size_type v9 = v5->__r_.__value_.__r.__words[2];
        long long v8 = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        E5RT::Status::Status(v10, 1, &v8);
        E5RT::E5RTError::E5RTError(exception, v14, v10);
      }
      operator new();
    }
    operator new();
  }
  char v3 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(&v11, "AllocMemory");
  std::string::basic_string[abi:ne180100]<0>(v14, "Invalid size(=0) specified.");
  E5RT::Status::Status(&v8, 1, v14);
  E5RT::E5RTError::E5RTError(v3, &v11, &v8);
}

void sub_1921D94DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  E5RT::Status::~Status((E5RT::Status *)&a22);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((*(char *)(v28 - 33) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v28 - 33) & 0x80000000) == 0)
  {
LABEL_6:
    if (!v27)
    {
LABEL_11:
      E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
      _Unwind_Resume(a1);
    }
LABEL_10:
    __cxa_free_exception(v26);
    E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a24);
    _Unwind_Resume(a1);
  }
LABEL_9:
  operator delete(*(void **)(v28 - 56));
  if ((v27 & 1) == 0) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

void sub_1921D973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a13);
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  if (a22 < 0)
  {
    operator delete(__p);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::BufferObject::CreateBufferFromHandle<__IOSurface *>(__IOSurface *a1)
{
  if (IOSurfaceGetBaseAddress(a1))
  {
    IOSurfaceGetAllocSize(a1);
    IOSurfaceGetOffsetOfPlane();
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "CreateBufferFromHandle");
  std::string::basic_string[abi:ne180100]<0>(v3, "Invalid IOSurfaceRef handle.");
  E5RT::Status::Status(v4, 1, v3);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_1921D9920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a2) {
    sub_19239C714(a2);
  }
  MEMORY[0x192FF16B0](v6, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va);
  _Unwind_Resume(a1);
}

void sub_1921D995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::IOBufferObject>::~unique_ptr[abi:ne180100]((CFTypeRef **)va);
  _Unwind_Resume(a1);
}

void sub_1921D9970(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B1C404997464DLL);
  _Unwind_Resume(a1);
}

void sub_1921D9994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::BufferObject::BufferObject(void *a1, uint64_t *a2)
{
  uint64_t result = E5RT::MemoryObject::MemoryObject(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE3247C8;
  result[1] = v4;
  return result;
}

{
  void *result;
  uint64_t v4;

  uint64_t result = E5RT::MemoryObject::MemoryObject(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE3247C8;
  result[1] = v4;
  return result;
}

void *E5RT::MemoryObject::MemoryObject(void *this)
{
  *this = &unk_1EE3247E8;
  return this;
}

{
  *this = &unk_1EE3247E8;
  return this;
}

E5RT::IOBufferObject *E5RT::IOBufferObject::IOBufferObject(E5RT::IOBufferObject *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  void *v6 = &unk_1EE324B78;
  v6[1] = a2;
  v6[2] = 0;
  *((unsigned char *)v6 + 24) = 0;
  v6[5] = 0;
  v6[6] = a3;
  E5RT::IOBufferObject::InitBufferObject((CFTypeRef *)v6, (E5RT::Status *)v13);
  if (!E5RT::Status::Success((E5RT::Status *)v13))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "IOBufferObject");
    uint64_t ErrorCode = E5RT::Status::GetErrorCode((E5RT::Status *)v13);
    uint64_t ErrorMessage = E5RT::Status::GetErrorMessage((E5RT::Status *)v13);
    E5RT::Status::Status(v11, ErrorCode, ErrorMessage);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  E5RT::Status::~Status((E5RT::Status *)v13);
  return this;
}

void sub_1921D9B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::Status::~Status((E5RT::Status *)va);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v6);
  _Unwind_Resume(a1);
}

void sub_1921D9B8C(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1921D9BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      E5RT::Status::~Status((E5RT::Status *)&a17);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

E5RT::IOBufferObject *E5RT::IOBufferObject::IOBufferObject(E5RT::IOBufferObject *this, __IOSurface *a2, uint64_t a3, uint64_t a4)
{
  long long v8 = E5RT::BufferObjectImpl::BufferObjectImpl(this);
  *long long v8 = &unk_1EE324B78;
  v8[1] = a4;
  v8[2] = a3;
  *((unsigned char *)v8 + 24) = 1;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = a2;
  E5RT::IOBufferObject::InitBufferObject((CFTypeRef *)v8, (E5RT::Status *)v15);
  if (!E5RT::Status::Success((E5RT::Status *)v15))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "IOBufferObject");
    uint64_t ErrorCode = E5RT::Status::GetErrorCode((E5RT::Status *)v15);
    uint64_t ErrorMessage = E5RT::Status::GetErrorMessage((E5RT::Status *)v15);
    E5RT::Status::Status(v13, ErrorCode, ErrorMessage);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  E5RT::Status::~Status((E5RT::Status *)v15);
  return this;
}

void sub_1921D9D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  E5RT::Status::~Status((E5RT::Status *)va);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v6);
  _Unwind_Resume(a1);
}

void sub_1921D9D30(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void sub_1921D9D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      E5RT::Status::~Status((E5RT::Status *)&a17);
      E5RT::AsyncEventImpl::~AsyncEventImpl(v17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void E5RT::Status::~Status(E5RT::Status *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x192FF16B0](v1, 0x1012C405C87E9CELL);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    MEMORY[0x192FF16B0](v1, 0x1012C405C87E9CELL);
  }
}

void *E5RT::BufferObjectImpl::BufferObjectImpl(void *this)
{
  *this = &unk_1EE325820;
  return this;
}

void E5RT::IOBufferObject::InitBufferObject(CFTypeRef *this@<X0>, E5RT::Status *a2@<X8>)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 24))
  {
    CFRetain(this[4]);
    goto LABEL_5;
  }
  v16[0] = *MEMORY[0x1E4F2F2C0];
  uint64_t v4 = [NSNumber numberWithUnsignedLong:this[1]];
  uint64_t v5 = *MEMORY[0x1E4F2F0E8];
  v17[0] = v4;
  v17[1] = &unk_1EE3AED28;
  uint64_t v6 = *MEMORY[0x1E4F2EFE0];
  v16[1] = v5;
  int v16[2] = v6;
  std::string v7 = [NSNumber numberWithUnsignedLong:this[1]];
  uint64_t v8 = *MEMORY[0x1E4F2EFD8];
  v17[2] = v7;
  v17[3] = &unk_1EE3AED28;
  uint64_t v9 = *MEMORY[0x1E4F2F150];
  v16[3] = v8;
  v16[4] = v9;
  size_t v10 = [NSNumber numberWithUnsignedInt:1278226488];
  v17[4] = v10;
  v16[5] = *MEMORY[0x1E4F2EFC0];
  uint64_t v11 = [NSNumber numberWithUnsignedLongLong:this[6]];
  v17[5] = v11;
  CFDictionaryRef v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v17 forKeys:v16 count:6];

  long long v13 = IOSurfaceCreate(v12);
  this[4] = v13;
  if (IOSurfaceGetBaseAddress(v13))
  {

LABEL_5:
    this[5] = IOSurfaceGetBaseAddress((IOSurfaceRef)this[4]);
    E5RT::Status::Status(a2);
  }
  std::string __p = operator new(0x30uLL);
  long long v15 = xmmword_192DA90C0;
  strcpy((char *)__p, "Failed to allocate memory IOSurface object.");
  E5RT::Status::Status(a2, 3, &__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_1921DA02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL E5RT::Status::Success(E5RT::Status *this)
{
  return *(_DWORD *)(*(void *)this + 24) == 0;
}

void E5RT::Status::Status(E5RT::Status *this)
{
  *(void *)this = 0;
  operator new();
}

{
  *(void *)this = 0;
  operator new();
}

void sub_1921DA124(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_1924583D4(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *E5RT::PathWrapper::PathWrapper(std::string *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    std::string v7 = *(const std::string::value_type **)a2;
    std::string::size_type v8 = *(void *)(a2 + 8);
    if (!v8)
    {
      std::string::__init_copy_ctor_external(&v11, v7, 0);
      goto LABEL_12;
    }
    std::string::__init_copy_ctor_external(&v11, v7, v8);
    unsigned __int8 v4 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_4:
      if (v11.__r_.__value_.__s.__data_[v4 - 1] == 47)
      {
        uint64_t v5 = v4 - 1;
        *((unsigned char *)&v11.__r_.__value_.__s + 23) = (v4 - 1) & 0x7F;
        uint64_t v6 = &v11;
LABEL_10:
        v6->__r_.__value_.__s.__data_[v5] = 0;
        goto LABEL_12;
      }
      goto LABEL_12;
    }
  }
  else
  {
    std::string v11 = *(std::string *)a2;
    if (!v3) {
      goto LABEL_12;
    }
    unsigned __int8 v4 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (*(unsigned char *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1) == 47)
  {
    uint64_t v5 = --v11.__r_.__value_.__l.__size_;
    goto LABEL_10;
  }
LABEL_12:
  *a1 = v11;
  return a1;
}

char *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string_view *>,std::__wrap_iter<std::string_view *>>(void *a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = (void *)*a1;
  uint64_t v6 = (a2 - *a1) / 24;
  uint64_t v7 = *a1 + 24 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  uint64_t v9 = a3;
  uint64_t v13 = a1[2];
  std::string v11 = a1 + 2;
  uint64_t v12 = v13;
  unint64_t v14 = *(v11 - 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
    {
      uint64_t v20 = (uint64_t)&a3[2 * a5];
      char v21 = (unsigned char *)*(v11 - 1);
    }
    else
    {
      uint64_t v20 = (uint64_t)&a3[0xF555555555555556 * ((uint64_t)(v14 - v7) >> 3)];
      char v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string_view *,std::string_view *,std::string*>((int)v11, v20, a4, (unsigned char *)*(v11 - 1));
      a1[1] = v21;
      if ((uint64_t)(v14 - v7) < 1) {
        return (char *)v7;
      }
    }
    uint64_t v22 = v7 + 24 * a5;
    int v23 = &v21[-24 * a5];
    uint64_t v24 = v21;
    if ((unint64_t)v23 < v14)
    {
      uint64_t v24 = v21;
      do
      {
        long long v25 = *(_OWORD *)v23;
        *((void *)v24 + 2) = *((void *)v23 + 2);
        *(_OWORD *)uint64_t v24 = v25;
        v24 += 24;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = 0;
        *(void *)int v23 = 0;
        v23 += 24;
      }
      while ((unint64_t)v23 < v14);
    }
    a1[1] = v24;
    if (v21 != (unsigned char *)v22)
    {
      std::string::size_type v26 = v21 - 24;
      uint64_t v27 = 8 * ((uint64_t)&v21[-v22] >> 3);
      do
      {
        if ((char)v26[23] < 0) {
          operator delete(*(void **)v26);
        }
        uint64_t v28 = (long long *)(v7 + v27 - 24);
        long long v29 = *v28;
        *((void *)v26 + 2) = *(void *)(v7 + v27 - 8);
        *(_OWORD *)std::string::size_type v26 = v29;
        v26 -= 24;
        *(unsigned char *)(v7 + v27 - 1) = 0;
        *(unsigned char *)uint64_t v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if ((const void **)v20 != v9)
    {
      uint64_t v30 = v7;
      do
      {
        unint64_t v31 = *v9;
        char v32 = v9[1];
        v9 += 2;
        MEMORY[0x192FF0F60](v30, v31, v32);
        v30 += 24;
      }
      while (v9 != (const void **)v20);
    }
    return (char *)v7;
  }
  unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (void)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (uint64_t)v5) >> 3);
  uint64_t v17 = 2 * v16;
  if (2 * v16 <= v15) {
    uint64_t v17 = v15;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v18 = v17;
  }
  uint64_t v51 = (void **)a1;
  if (v18)
  {
    if (v18 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v19 = (char *)operator new(24 * v18);
  }
  else
  {
    int v19 = 0;
  }
  long long v34 = &v19[24 * v6];
  uint64_t v52 = v34;
  int v53 = &v19[24 * v18];
  uint64_t v35 = 24 * a5;
  long long v36 = &v34[24 * a5];
  do
  {
    size_t v38 = (size_t)v9[1];
    if (v38 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v39 = *v9;
    if (v38 < 0x17)
    {
      v34[23] = v38;
      uint64_t v37 = v34;
      if (!v38) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v40 = v38 | 7;
      }
      uint64_t v41 = v40 + 1;
      uint64_t v37 = operator new(v40 + 1);
      *((void *)v34 + 1) = v38;
      *((void *)v34 + 2) = v41 | 0x8000000000000000;
      *(void *)long long v34 = v37;
    }
    memmove(v37, v39, v38);
LABEL_32:
    *((unsigned char *)v37 + v38) = 0;
    v34 += 24;
    v9 += 2;
    v35 -= 24;
  }
  while (v35);
  long long v33 = v52;
  long long v42 = *v51;
  uint64_t v43 = v52;
  if (*v51 != (void *)v7)
  {
    unint64_t v44 = v52;
    uint64_t v45 = v7;
    do
    {
      uint64_t v43 = v44 - 24;
      long long v46 = *(_OWORD *)(v45 - 24);
      *((void *)v44 - 1) = *(void *)(v45 - 8);
      *(_OWORD *)(v44 - 24) = v46;
      *(void *)(v45 - 16) = 0;
      *(void *)(v45 - 8) = 0;
      *(void *)(v45 - 24) = 0;
      v44 -= 24;
      v45 -= 24;
    }
    while ((void *)v45 != v42);
  }
  uint64_t v47 = v51[1];
  if (v47 != (void *)v7)
  {
    do
    {
      long long v48 = *(_OWORD *)v7;
      *((void *)v36 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)long long v36 = v48;
      v36 += 24;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v47);
    uint64_t v7 = (uint64_t)v51[1];
  }
  uint64_t v49 = *v51;
  *uint64_t v51 = v43;
  v51[1] = v36;
  v51[2] = v53;
  while ((void *)v7 != v49)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v49) {
    operator delete(v49);
  }
  return v33;
}

void sub_1921DA5C0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1921DA5C8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1921DA5E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void E5RT::Status::Status(void *a1)
{
  *a1 = 0;
  operator new();
}

{
  *a1 = 0;
  operator new();
}

void sub_1921DA6B0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_1921DA6DC(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void E5RT::PathWrapper::FindFilesWithExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  MEMORY[0x192FF13C0](&v42, a1, 0, 0);
  uint64_t v6 = v42;
  uint64_t v7 = v43;
  if (!v43)
  {
    v41.__imp_.__ptr_ = v42;
    v41.__imp_.__cntrl_ = 0;
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v8 = v43;
  v41.__imp_.__ptr_ = v6;
  v41.__imp_.__cntrl_ = v7;
  if (!v43)
  {
LABEL_6:
    std::string::size_type v39 = 0;
    uint64_t v40 = 0;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v39 = 0;
  uint64_t v40 = 0;
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_10:
  while (v41.__imp_.__ptr_ != v39)
  {
    size_t v10 = std::__fs::filesystem::directory_iterator::__dereference(&v41);
    std::__fs::filesystem::path::__string_view v11 = std::__fs::filesystem::path::__extension(&v10->__p_);
    if (v11.__size_ > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v11.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v13 = v11.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v14 = v13 + 1;
      p_dst = (std::string *)operator new(v13 + 1);
      __dst.__pn_.__r_.__value_.__l.__size_ = v11.__size_;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_18:
      memmove(p_dst, v11.__data_, v11.__size_);
      goto LABEL_19;
    }
    *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v11.__size_;
    p_dst = (std::string *)&__dst;
    if (v11.__size_) {
      goto LABEL_18;
    }
LABEL_19:
    p_dst->__r_.__value_.__s.__data_[v11.__size_] = 0;
    std::__fs::filesystem::path v38 = __dst;
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    if ((v15 & 0x80u) == 0) {
      unint64_t v16 = (std::string *)a2;
    }
    else {
      unint64_t v16 = *(std::string **)a2;
    }
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a2 + 8);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__dst.__pn_, v16, (std::string *)((char *)v16 + v15));
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v17.__data_ = (const std::string_view::value_type *)&__dst;
    }
    else {
      v17.__data_ = (const std::string_view::value_type *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v17.__size_ = HIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      v17.__size_ = __dst.__pn_.__r_.__value_.__l.__size_;
    }
    int v18 = std::__fs::filesystem::path::__compare(&v38, v17);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_32:
        if (v18) {
          goto LABEL_9;
        }
        goto LABEL_36;
      }
    }
    else if ((SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v38.__pn_.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_9;
    }
LABEL_36:
    if (a3)
    {
      if (SHIBYTE(v10->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__dst.__pn_, v10->__p_.__pn_.__r_.__value_.__l.__data_, v10->__p_.__pn_.__r_.__value_.__l.__size_);
      }
      else {
        __dst.__pn_ = (std::__fs::filesystem::path::string_type)v10->__p_;
      }
      unint64_t v25 = *(void *)(a4 + 8);
      if (v25 < *(void *)(a4 + 16))
      {
        long long v9 = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
        *(void *)(v25 + 16) = *((void *)&__dst.__pn_.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v25 = v9;
        *(void *)(a4 + 8) = v25 + 24;
        goto LABEL_9;
      }
      std::string::size_type v26 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a4, (uint64_t)&__dst);
      int v27 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
      *(void *)(a4 + 8) = v26;
      if (v27 < 0)
      {
        uint64_t v28 = (void *)__dst.__pn_.__r_.__value_.__r.__words[0];
LABEL_60:
        operator delete(v28);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    std::__fs::filesystem::path::__string_view v19 = std::__fs::filesystem::path::__filename(&v10->__p_);
    if (v19.__size_ > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v19.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v21 = (v19.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v21 = v19.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v22 = v21 + 1;
      uint64_t v20 = (std::string *)operator new(v21 + 1);
      __dst.__pn_.__r_.__value_.__l.__size_ = v19.__size_;
      __dst.__pn_.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    }
    else
    {
      *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23) = v19.__size_;
      uint64_t v20 = (std::string *)&__dst;
      if (!v19.__size_) {
        goto LABEL_47;
      }
    }
    memmove(v20, v19.__data_, v19.__size_);
LABEL_47:
    v20->__r_.__value_.__s.__data_[v19.__size_] = 0;
    std::string::size_type v23 = __dst.__pn_.__r_.__value_.__r.__words[0];
    int v37 = __dst.__pn_.__r_.__value_.__r.__words[2];
    HIBYTE(v37) = __dst.__pn_.__r_.__value_.__s.__data_[19];
    int v24 = SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v38.__pn_, __dst.__pn_.__r_.__value_.__l.__data_, __dst.__pn_.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v38.__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)&__dst.__pn_.__r_.__value_.__l.__data_;
      LODWORD(v38.__pn_.__r_.__value_.__r.__words[2]) = v37;
      *(_DWORD *)((char *)&v38.__pn_.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&__dst.__pn_.__r_.__value_.__r.__words[2]
                                                                                   + 3);
      *((unsigned char *)&v38.__pn_.__r_.__value_.__s + 23) = *((unsigned char *)&__dst.__pn_.__r_.__value_.__s + 23);
    }
    unint64_t v29 = *(void *)(a4 + 8);
    if (v29 < *(void *)(a4 + 16))
    {
      long long v30 = *(_OWORD *)&v38.__pn_.__r_.__value_.__l.__data_;
      *(void *)(v29 + 16) = *((void *)&v38.__pn_.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v29 = v30;
      memset(&v38, 0, sizeof(v38));
      *(void *)(a4 + 8) = v29 + 24;
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_9;
      }
LABEL_59:
      uint64_t v28 = (void *)v23;
      goto LABEL_60;
    }
    unint64_t v31 = std::vector<std::string>::__push_back_slow_path<std::string>((void **)a4, (uint64_t)&v38);
    int v32 = SHIBYTE(v38.__pn_.__r_.__value_.__r.__words[2]);
    *(void *)(a4 + 8) = v31;
    if ((v32 & 0x80000000) == 0)
    {
      if ((v24 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_59;
    }
    operator delete(v38.__pn_.__r_.__value_.__l.__data_);
    if (v24 < 0) {
      goto LABEL_59;
    }
LABEL_9:
    std::__fs::filesystem::directory_iterator::__increment(&v41, 0);
  }
  long long v33 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
  cntrl = v41.__imp_.__cntrl_;
  if (v41.__imp_.__cntrl_ && !atomic_fetch_add(&v41.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  uint64_t v35 = v43;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
}

void sub_1921DABA8(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921DABBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::vector<std::string>::~vector[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::AliasDescT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  int v13 = 257;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (v3 >= 0x7FFFFFFB) {
    sub_192429E1C();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
LABEL_8:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v12, v10);
}

void sub_1921DADD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::AliasDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::AliasDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t E5RT_FB::AliasDesc::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  std::__fs::filesystem::path::__string_view v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 5u
    || (uint64_t v20 = v19[2]) == 0
    || ((uint64_t v14 = 0, v21 = (unint64_t)&v3[v20], (v21 & 3) != 0) ? (v22 = v4 == 0) : (v22 = 1),
        !v22 ? (int v23 = 0) : (int v23 = 1),
        v7 >= v21 && v23))
  {
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  return v14;
}

uint64_t E5RT_FB::VerifySizePrefixedAliasDescBuffer(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >= 5
    && ((v2 = *a1, v1 >= 0xC) ? (BOOL v3 = v1 - 4 == *(unsigned int *)*a1) : (BOOL v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, uint64_t v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::AliasDesc::Verify((int *)(v4 + v5), a1);
  }
  else
  {
    return 0;
  }
}

void E5RT_FB::UnPackSizePrefixedAliasDesc()
{
}

void Espresso::AOT::OpPlacementPass::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v9[2] = 0x2B23829800000000;
  long long v10 = 0u;
  long long v11 = 0u;
  kdebug_trace();
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 48))(v9, a2);
  MEMORY[0x192FEFD50](v8, a2);
  MIL::Transform::ProgramTransformer::GetProgramBuilder(&v7, (MIL::Transform::ProgramTransformer *)v8);
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  int v6 = 1065353216;
  for (std::string::size_type i = *(uint64_t ***)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2) + 16); i; std::string::size_type i = (uint64_t **)*i)
  {
    (*(void (**)(uint64_t *))(*i[5] + 48))(i[5]);
    v12[0] = &unk_1EE379AF0;
    v12[1] = __p;
    unint64_t v13 = v12;
    MIL::Util::Walk();
    if (v13 == v12)
    {
      (*(void (**)(void *))(v12[0] + 32))(v12);
    }
    else if (v13)
    {
      (*(void (**)(void *))(*v13 + 40))(v13);
    }
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string>>();
}

void sub_1921DB5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va5, a3);
  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v10 = va_arg(va2, Espresso::MILTranslator::NameGenerator *);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v17 = va_arg(va4, void);
  va_copy(va5, va4);
  uint64_t v19 = va_arg(va5, void);
  uint64_t v21 = va_arg(va5, void);
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100]((Espresso::MILTranslator::NameGenerator **)va1);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va5);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::Run(uint64_t a1@<X0>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a2@<X1>, uint64_t *a3@<X2>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **a4@<X8>)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = 0x2B23828400000000;
  long long v71 = 0u;
  long long v72 = 0u;
  kdebug_trace();
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)int v68 = 0u;
  int v69 = 1065353216;
  uint64_t v63 = a3;
  uint64_t v9 = (uint64_t *)*a3;
  for (std::string::size_type i = (uint64_t *)a3[1]; v9 != i; v9 += 3)
  {
    if ((Espresso::AOT::IsFunctionSegmented(a2) & 1) == 0)
    {
      long long v11 = Espresso::espresso_os_log_subsystem(0, v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = v9;
        if (*((char *)v9 + 23) < 0) {
          uint64_t v12 = (uint64_t *)*v9;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v12;
        _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "Start segmenting function: %s", (uint8_t *)&buf, 0xCu);
      }
      Espresso::AOT::SegmenterShortestPath::SegmentFunction(a1, (uint64_t)a2);
    }
  }
  uint64_t v65 = 0;
  std::string::size_type v66 = 0;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  if (v14 == v13) {
    goto LABEL_31;
  }
  uint64_t v15 = *(void *)(a1 + 56);
  do
  {
    if (*(char *)(v15 + 23) < 0)
    {
      uint64_t v19 = *(uint64_t **)v15;
      if (*(void *)(v15 + 8) != 14) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v19 = (uint64_t *)v15;
      if (*(unsigned char *)(v15 + 23) != 14) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = *v19;
    uint64_t v17 = *(uint64_t *)((char *)v19 + 6);
    if (v16 == 0x6D696E696D5F3565 && v17 == 0x7570635F6C616D69) {
      goto LABEL_23;
    }
LABEL_16:
    v15 += 24;
  }
  while (v15 != v13);
  uint64_t v15 = *(void *)(a1 + 64);
LABEL_23:
  if (v15 == v13)
  {
LABEL_31:
    uint64_t v21 = 0;
    goto LABEL_93;
  }
  (*(void (**)(uint64_t *__return_ptr, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)a2 + 48))(&v87, a2);
  uint64_t v84 = v87;
  uint64_t v85 = v88;
  if (v88) {
    atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
  MIL::IRTensorValueType::MakeBoolValue(Scalar);
  uint64_t v82 = buf;
  uint64_t v62 = a1;
  if ((void)buf) {
    operator new();
  }
  std::string v83 = 0;
  BOOL v22 = v68[0];
  if (!v68[0]) {
    goto LABEL_77;
  }
  unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3);
  while (2)
  {
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::SelectedSpecialization(v79);
    MIL::Builder::FunctionBuilder::GetBlock();
    uint64_t Function = MIL::IRProgram::GetFunction();
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
    E5Common::MinimalCpu::MatchAllPatterns(v87, v25, (uint64_t)&buf);
    std::string::size_type v26 = (void *)*((void *)&buf + 1);
    int v27 = (void *)buf;
    if ((void)buf == *((void *)&buf + 1))
    {
      if (!(void)buf) {
        goto LABEL_68;
      }
      goto LABEL_37;
    }
    while (2)
    {
      long long v30 = (unint64_t *)v27[1];
      unint64_t v31 = (unint64_t *)v27[2];
      int v32 = v30 + 1;
      if (v30 != v31 && v32 != v31)
      {
        unint64_t v34 = *v30;
        uint64_t v35 = v30 + 1;
        do
        {
          unint64_t v37 = *v35++;
          unint64_t v36 = v37;
          if (v37 < v34)
          {
            unint64_t v34 = v36;
            long long v30 = v32;
          }
          int v32 = v35;
        }
        while (v35 != v31);
      }
      if (*(void *)(v22[5] + 8 * *v30) == v23)
      {
        MIL::Builder::BlockBuilder::GetOperation(v77);
        strcpy((char *)v90, "EndOfSegment");
        BYTE5(v90[1]) = 0;
        HIWORD(v90[1]) = 0;
        LODWORD(v91) = v81[0];
        *(_DWORD *)((char *)&v91 + 3) = *(_DWORD *)((char *)v81 + 3);
        HIBYTE(v91) = 12;
        uint64_t v73 = v82;
        uint64_t v74 = v83;
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::Builder::OperationBuilder::SetAttribute();
        if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
          std::__fs::filesystem::path v38 = v74;
          if (v74) {
            goto LABEL_55;
          }
        }
        else
        {
          std::__fs::filesystem::path v38 = v74;
          if (v74)
          {
LABEL_55:
            if (!atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        if (SHIBYTE(v91) < 0)
        {
          operator delete(v90[0]);
          std::string::size_type v39 = v75;
          if (!v75) {
            goto LABEL_40;
          }
        }
        else
        {
          std::string::size_type v39 = v75;
          if (!v75) {
            goto LABEL_40;
          }
        }
        if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
LABEL_40:
      v27 += 4;
      if (v27 != v26) {
        continue;
      }
      break;
    }
    int v27 = (void *)buf;
    if (!(void)buf)
    {
LABEL_68:
      unint64_t v29 = v78;
      if (!v78) {
        goto LABEL_72;
      }
LABEL_71:
      if (atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        goto LABEL_72;
      }
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      std::__fs::filesystem::directory_iterator v41 = v80;
      if (!v80) {
        goto LABEL_34;
      }
LABEL_73:
      if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
      goto LABEL_34;
    }
LABEL_37:
    uint64_t v28 = (void *)*((void *)&buf + 1);
    if (*((void **)&buf + 1) == v27)
    {
      *((void *)&buf + 1) = v27;
      operator delete(v27);
      unint64_t v29 = v78;
      if (!v78) {
        goto LABEL_72;
      }
      goto LABEL_71;
    }
    do
    {
      uint64_t v40 = (void *)*(v28 - 3);
      if (v40)
      {
        *(v28 - 2) = v40;
        operator delete(v40);
      }
      v28 -= 4;
    }
    while (v28 != v27);
    *((void *)&buf + 1) = v27;
    operator delete((void *)buf);
    unint64_t v29 = v78;
    if (v78) {
      goto LABEL_71;
    }
LABEL_72:
    std::__fs::filesystem::directory_iterator v41 = v80;
    if (v80) {
      goto LABEL_73;
    }
LABEL_34:
    BOOL v22 = (void *)*v22;
    if (v22) {
      continue;
    }
    break;
  }
LABEL_77:
  MIL::Builder::ProgramBuilder::CreateProgramWithoutValidation(&v64, v86);
  long long v42 = v83;
  a1 = v62;
  if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  uint64_t v43 = v86;
  unint64_t v86 = 0;
  if (v43) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v43 + 8))(v43);
  }
  unint64_t v44 = v88;
  if (v88 && !atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    uint64_t v45 = v64;
    if (v64) {
LABEL_85:
    }
      operator new();
  }
  else
  {
    uint64_t v45 = v64;
    if (v64) {
      goto LABEL_85;
    }
  }
  uint64_t v64 = 0;
  uint64_t v65 = v45;
  long long v46 = v66;
  std::string::size_type v66 = 0;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  uint64_t v47 = v64;
  uint64_t v64 = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v21 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)v65;
  uint64_t v14 = *(void *)(v62 + 56);
  uint64_t v13 = *(void *)(v62 + 64);
LABEL_93:
  if (v21) {
    long long v48 = v21;
  }
  else {
    long long v48 = a2;
  }
  v90[0] = 0;
  v90[1] = 0;
  uint64_t v91 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v90, v14, v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3));
  uint64_t ShouldMerge = Espresso::AOT::MILSegmenterOptions::GetSegmentsShouldMerge(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
  int v50 = (Espresso::AOT::SegmentsLowerer *)Espresso::AOT::SegmentsLowerer::SegmentsLowerer(&buf, v48, __p, v90, ShouldMerge, 0);
  Espresso::AOT::SegmentsLowerer::Run(v50, a4);
  Espresso::AOT::SegmentsLowerer::~SegmentsLowerer((Espresso::AOT::SegmentsLowerer *)&buf);
  uint64_t v51 = (void **)v90[0];
  if (v90[0])
  {
    uint64_t v52 = (void **)v90[1];
    int v53 = v90[0];
    if (v90[1] != v90[0])
    {
      do
      {
        if (*((char *)v52 - 1) < 0) {
          operator delete(*(v52 - 3));
        }
        v52 -= 3;
      }
      while (v52 != v51);
      int v53 = v90[0];
    }
    v90[1] = v51;
    operator delete(v53);
  }
  uint64_t v55 = *v63;
  uint64_t v54 = v63[1];
  if (*v63 != v54)
  {
    do
    {
      if ((Espresso::AOT::IsFunctionSegmented(*a4) & 1) == 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Invalid e5backend program: Invalid segments.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      v55 += 24;
    }
    while (v55 != v54);
  }
  std::string::size_type v56 = v66;
  if (v66 && !atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
  }
  std::string::size_type v57 = (char *)v68[0];
  if (v68[0])
  {
    do
    {
      uint64_t v59 = *(char **)v57;
      uint64_t v60 = (void *)*((void *)v57 + 5);
      if (v60)
      {
        *((void *)v57 + 6) = v60;
        operator delete(v60);
      }
      if (v57[39] < 0) {
        operator delete(*((void **)v57 + 2));
      }
      operator delete(v57);
      std::string::size_type v57 = v59;
    }
    while (v59);
  }
  unint64_t v58 = __p[0];
  __p[0] = 0;
  if (v58) {
    operator delete(v58);
  }
  if (E5RT::g_trace_analysis_level >= v70) {
    kdebug_trace();
  }
}

void sub_1921DC1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  if (a9) {
    Espresso::AOT::MILCompilerForE5::Run();
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRProgram  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::string const&,std::vector<unsigned long>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                int v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (std::string::size_type i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    int v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              BOOL v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (std::vector<std::string>::pointer j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  BOOL v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  unint64_t v29 = (char *)operator new(0x40uLL);
  v46[0] = v29;
  v46[1] = a1 + 16;
  char v47 = 0;
  *(void *)unint64_t v29 = 0;
  *((void *)v29 + 1) = v12;
  long long v30 = (std::string *)(v29 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v29 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *((void *)v29 + 7) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (!v13 || (float)(v32 * (float)v13) < v31)
  {
    BOOL v35 = 1;
    if (v13 >= 3) {
      BOOL v35 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v13);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_68:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v43 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        long long v33 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        unint64_t v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        long long v33 = *(void **)(*(void *)a1 + 8 * v12);
        unint64_t v34 = (void *)v46[0];
        if (v33) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v12;
      long long v33 = *(void **)(*(void *)a1 + 8 * (v43 & v12));
      unint64_t v34 = (void *)v46[0];
      if (v33) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v34 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v46[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v46[0])
    {
      unint64_t v44 = *(void *)(*(void *)v46[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v44 >= v13) {
          v44 %= v13;
        }
      }
      else
      {
        v44 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v44) = v46[0];
    }
    goto LABEL_92;
  }
  long long v33 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v34 = (void *)v46[0];
  if (!v33) {
    goto LABEL_81;
  }
LABEL_57:
  void *v34 = *v33;
  *long long v33 = v46[0];
LABEL_92:
  uint64_t v16 = (uint64_t *)v46[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_1921DC860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921DC874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetSegmentsShouldMerge(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 58);
}

void Espresso::AOT::SegmentsLowerer::~SegmentsLowerer(Espresso::AOT::SegmentsLowerer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    BOOL v3 = (void **)*((void *)this + 7);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v3 = (void **)*((void *)this + 7);
    if (v3)
    {
      do
      {
        while (1)
        {
LABEL_7:
          unint64_t v4 = (void **)*v3;
          uint64_t v5 = (std::__shared_weak_count *)v3[6];
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          if (*((char *)v3 + 39) < 0) {
            break;
          }
          operator delete(v3);
          BOOL v3 = v4;
          if (!v4) {
            goto LABEL_13;
          }
        }
        operator delete(v3[2]);
        operator delete(v3);
        BOOL v3 = v4;
      }
      while (v4);
    }
  }
LABEL_13:
  uint64_t v6 = (void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

Espresso::MILTranslator::NameGenerator *std::__shared_ptr_pointer<Espresso::MILTranslator::NameGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(Espresso::MILTranslator::NameGenerator **)(a1 + 24);
  if (result)
  {
    Espresso::MILTranslator::NameGenerator::~NameGenerator(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void Espresso::AOT::SegmentsLowerer::SegmentsLowerer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  int v7 = 1065353216;
  for (std::string::size_type i = (void *)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 72))(a2) + 16);
        ;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)(i + 2), (uint64_t)(i + 2)))
  {
    std::string::size_type i = (void *)*i;
    if (!i) {
      break;
    }
  }
  std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>();
}

void sub_1921DCEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<Espresso::MILTranslator::NameGenerator>::~unique_ptr[abi:ne180100]((Espresso::MILTranslator::NameGenerator **)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1921DCF20(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string> &>()
{
}

void sub_1921DD03C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  MEMORY[0x192FF16B0](v2, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::AOT::SegmentsLowerer::Run(Espresso::AOT::SegmentsLowerer *this@<X0>, E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **a2@<X8>)
{
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  unint64_t v19 = 0;
  uint64_t v4 = *(uint64_t **)(*((void *)this + 1) + 16);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      unint64_t v7 = (long long *)(v4 + 2);
      if ((unint64_t)v5 < v21)
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          long long v6 = *v7;
          v5->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
        }
        ++v5;
      }
      else
      {
        uint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v19, (uint64_t)v7);
      }
      uint64_t v20 = (unsigned __int8 *)v5;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
    for (std::string::size_type i = v19; i != (unsigned __int8 *)v5; i += 24)
    {
      Espresso::AOT::SegmentsLowerer::FindSegmentMeta((uint64_t)this, i, (uint64_t **)__p);
      Espresso::AOT::SegmentsLowerer::LowerFunction((uint64_t)this, (uint64_t)i, (long long **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void, char *))(**(void **)this + 88))(*(void *)this, (char *)this + 40);
  Espresso::AOT::AlignCalleeWithCallOp(*a2, &v19);
  unint64_t v9 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__p[0];
  __p[0] = 0;
  unint64_t v10 = *a2;
  *a2 = v9;
  if (v10)
  {
    (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)v10 + 8))(v10);
    unint64_t v11 = __p[0];
    __p[0] = 0;
    if (v11) {
      (*(void (**)(void *))(*(void *)v11 + 8))(v11);
    }
  }
  MIL::IRProgramValidator::Validate();
  if ((MIL::ValidationResult::IsGood((MIL::ValidationResult *)__p) & 1) == 0)
  {
    MIL::MILResult::GetMessage((MIL::MILResult *)__p);
    std::operator+<char>();
    if (v17 >= 0) {
      uint64_t v15 = (const char *)&v16;
    }
    else {
      uint64_t v15 = v16;
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v15);
  }
  MEMORY[0x192FEF390](__p);
  unint64_t v12 = v19;
  if (v19)
  {
    unint64_t v13 = v20;
    uint8x8_t v14 = v19;
    if (v20 != v19)
    {
      do
      {
        if ((char)*(v13 - 1) < 0) {
          operator delete(*((void **)v13 - 3));
        }
        v13 -= 24;
      }
      while (v13 != v12);
      uint8x8_t v14 = v19;
    }
    uint64_t v20 = v12;
    operator delete(v14);
  }
}

void sub_1921DD320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FEF390](&a16);
  uint64_t v20 = *v17;
  *char v17 = 0;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    std::vector<std::string>::~vector[abi:ne180100]((void **)(v18 - 56));
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v18 - 56));
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::FindSegmentMeta(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t Function = MIL::IRProgram::GetFunction();
  unint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(void **)(a1 + 8), a2);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v8 = v7;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v13 = -1;
  do
  {
    uint64_t v16 = *(void *)(*((void *)v8 + 5) + 8 * v12);
    if (v13 != v16 || (char v28 = 12, strcpy((char *)__p, "EndOfSegment"), MIL::IRObject::TryGetAttribute()))
    {
      if (v12) {
        *(v11 - 1) = v12;
      }
      unint64_t v17 = (unint64_t)a3[2];
      if ((unint64_t)v11 < v17)
      {
        uint64_t *v11 = v16;
        v11[1] = v12;
        uint8x8_t v14 = v11 + 3;
        _DWORD v11[2] = 0;
      }
      else
      {
        uint64_t v18 = *a3;
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v11 - *a3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v18) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          if (v22 > 0xAAAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v23 = (char *)operator new(24 * v22);
        }
        else
        {
          unint64_t v23 = 0;
        }
        uint64_t v24 = (uint64_t *)&v23[24 * v19];
        uint64_t *v24 = v16;
        v24[1] = v12;
        v24[2] = 0;
        uint64_t v25 = v24;
        if (v11 != v18)
        {
          do
          {
            long long v26 = *(_OWORD *)(v11 - 3);
            *(v25 - 1) = *(v11 - 1);
            *(_OWORD *)(v25 - 3) = v26;
            v25 -= 3;
            v11 -= 3;
          }
          while (v11 != v18);
          unint64_t v11 = *a3;
        }
        uint8x8_t v14 = v24 + 3;
        *a3 = v25;
        a3[1] = v24 + 3;
        a3[2] = (uint64_t *)&v23[24 * v22];
        if (v11) {
          operator delete(v11);
        }
      }
      a3[1] = v14;
      unint64_t v11 = v14;
      uint64_t v13 = v16;
    }
    ++v12;
    unint64_t v15 = (uint64_t)(*(void *)(*(void *)v10 + 8) - **(void **)v10) >> 4;
  }
  while (v12 < v15);
  *(v11 - 1) = v15;
}

void sub_1921DD69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  unint64_t v17 = *(void **)v15;
  if (*(void *)v15)
  {
    *(void *)(v15 + 8) = v17;
    operator delete(v17);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmenterShortestPath::SegmentFunction(uint64_t a1, uint64_t a2)
{
}

void sub_1921DD774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921DD788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl(&a13);
  _Unwind_Resume(a1);
}

void *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,Espresso::AOT::SegmenterShortestPath::StateGraph,std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>,std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>,BOOL>::~__tuple_impl(void *a1)
{
  uint64_t v2 = (void **)a1[10];
  a1[10] = 0;
  if (v2)
  {
    Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(v2);
    MEMORY[0x192FF16B0]();
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    uint64_t v4 = (void *)a1[8];
    uint64_t v5 = (void *)a1[7];
    if (v4 != v3)
    {
      do
      {
        long long v6 = (void *)*(v4 - 3);
        if (v6)
        {
          do
          {
            uint64_t v9 = (void *)*v6;
            uint64_t v10 = (void *)v6[3];
            if (v10)
            {
              v6[4] = v10;
              operator delete(v10);
            }
            operator delete(v6);
            long long v6 = v9;
          }
          while (v9);
        }
        unint64_t v8 = (void *)*(v4 - 5);
        v4 -= 5;
        unint64_t v7 = v8;
        void *v4 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[7];
    }
    a1[8] = v3;
    operator delete(v5);
  }
  uint64_t v11 = a1[4];
  if (v11)
  {
    uint64_t v12 = a1[5];
    uint64_t v13 = (void *)a1[4];
    if (v12 != v11)
    {
      uint64_t v14 = a1[5];
      do
      {
        uint64_t v16 = *(void **)(v14 - 24);
        v14 -= 24;
        uint64_t v15 = v16;
        if (v16)
        {
          *(void *)(v12 - 16) = v15;
          operator delete(v15);
        }
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      uint64_t v13 = (void *)a1[4];
    }
    a1[5] = v11;
    operator delete(v13);
  }
  return a1;
}

void Espresso::AOT::SegmenterShortestPath::WriteAnalytics(uint64_t a1, uint64_t *a2, void *a3)
{
  if (*(unsigned char *)Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48)))
  {
    unint64_t v23 = a3;
    uint64_t OutputBundlePath = Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
    uint64_t v7 = *(unsigned __int8 *)(OutputBundlePath + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(OutputBundlePath + 8);
    }
    if (!v7) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("If saving analytics was enabled, an output path should be specified");
    }
    if (*(void *)(a1 + 64) != *(void *)(a1 + 56))
    {
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *a2;
        double v10 = Espresso::AOT::SegmenterShortestPath::EstimateLaunchCost((Espresso::AOT::SegmenterShortestPath *)a1, v8);
        Espresso::AOT::MILSegmenterAnalytics::UpdateLaunchCost(v9, v10);
        uint64_t v12 = *(void *)(a1 + 56);
        uint64_t v11 = *(void *)(a1 + 64);
        if (v11 == v12) {
          break;
        }
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        do
        {
          if (v8 != v14)
          {
            Espresso::AOT::BackendRegistry::GetCostEstimator((void *)(a1 + 8), v12 + v13, &v25);
            memset(&__p, 0, sizeof(__p));
            (*(void (**)(std::__fs::filesystem::path *__return_ptr))(*(void *)v25.__r_.__value_.__l.__data_
                                                                              + 24))(&v24);
            double Runtime = Espresso::AOT::CostEstimate::GetRuntime((Espresso::AOT::CostEstimate *)v24.__pn_.__r_.__value_.__l.__data_);
            std::string::size_type v17 = v24.__pn_.__r_.__value_.__r.__words[0];
            v24.__pn_.__r_.__value_.__r.__words[0] = 0;
            if (v17) {
              (*(void (**)(std::string::size_type))(*(void *)v17 + 8))(v17);
            }
            if (__p.__pn_.__r_.__value_.__r.__words[0])
            {
              __p.__pn_.__r_.__value_.__l.__size_ = __p.__pn_.__r_.__value_.__r.__words[0];
              operator delete(__p.__pn_.__r_.__value_.__l.__data_);
            }
            std::string::size_type size = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
            if (v25.__r_.__value_.__l.__size_
              && !atomic_fetch_add((atomic_ullong *volatile)(v25.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
            Espresso::AOT::MILSegmenterAnalytics::UpdateTransferCost(*a2, Runtime, *(void *)(a1 + 56) + v13, *(void *)(a1 + 56) + 24 * v8);
            uint64_t v12 = *(void *)(a1 + 56);
            uint64_t v11 = *(void *)(a1 + 64);
          }
          ++v14;
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 3);
          v13 += 24;
        }
        while (v14 < v15);
        ++v8;
      }
      while (v8 < v15);
    }
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithOpToBackend(*a2, v23);
    unint64_t v19 = (Espresso::AOT::MILSegmenterAnalytics *)*a2;
    uint64_t v20 = Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
    memset(&v25, 0, sizeof(v25));
    uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
    if ((v21 & 0x80u) == 0) {
      unint64_t v22 = (std::string *)v20;
    }
    else {
      unint64_t v22 = *(std::string **)v20;
    }
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(v20 + 8);
    }
    std::string::append[abi:ne180100]<char const*,0>(&v25, v22, (std::string *)((char *)v22 + v21));
    memset(&v24, 0, sizeof(v24));
    std::string::append[abi:ne180100]<char const*,0>(&v24.__pn_, (std::string *)"analytics.mil", (std::string *)"");
    std::__fs::filesystem::operator/[abi:ne180100](&v24, (uint64_t)&v25, &__p);
    Espresso::AOT::MILSegmenterAnalytics::Serialize(v19, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_27:
        if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_31:
        operator delete(v25.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if ((SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v24.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_31;
    }
  }
}

void sub_1921DDBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(a22);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_1921DDC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0) {
    JUMPOUT(0x1921DDBD0);
  }
  JUMPOUT(0x1921DDBC8);
}

void sub_1921DDC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a10) {
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults();
  }
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmenterShortestPath::ValidateGroup(uint64_t a1, void *a2)
{
  uint64_t v4 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int64_t v5 = v3 - *(void *)a1;
  if (v3 == *(void *)a1)
  {
    long long v6 = 0;
    MEMORY[0] = 0;
    if ((unint64_t)v5 < 9) {
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  if (v5 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  long long v6 = operator new(v3 - (void)v4);
  bzero(v6, v5);
  void *v6 = 0;
  if ((unint64_t)v5 >= 9)
  {
LABEL_6:
    uint64_t v7 = 0;
    uint64_t v8 = 2;
    if ((unint64_t)(v5 >> 3) > 2) {
      uint64_t v8 = v5 >> 3;
    }
    uint64_t v9 = v4 + 1;
    uint64_t v10 = *v4;
    uint64_t v11 = v8 - 1;
    uint64_t v12 = v6 + 1;
    do
    {
      uint64_t v14 = *v9++;
      uint64_t v13 = v14;
      if (v14 != v10) {
        ++v7;
      }
      *v12++ = v7;
      uint64_t v10 = v13;
      --v11;
    }
    while (v11);
  }
LABEL_12:
  uint64_t v15 = a2[1];
  uint64_t v16 = v15 - *a2;
  if (v15 != *a2)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 40;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    do
    {
      for (std::string::size_type i = *(void **)(*a2 + 16 + 40 * v17); i; std::string::size_type i = (void *)*i)
      {
        uint64_t v20 = (char *)i[3];
        uint64_t v21 = (char *)i[4];
        unint64_t v22 = v20;
        if (v20 != v21)
        {
          while (v4[*(void *)v22] != v17)
          {
            v22 += 8;
            if (v22 == v21) {
              goto LABEL_19;
            }
          }
          uint64_t v23 = v21 - v20;
          if ((unint64_t)v23 >= 9)
          {
            unint64_t v24 = v23 >> 3;
            if (v24 <= 2) {
              uint64_t v25 = 2;
            }
            else {
              uint64_t v25 = v24;
            }
            uint64_t v27 = *(void *)v20;
            long long v26 = (uint64_t *)(v20 + 8);
            uint64_t v28 = v6[v27];
            uint64_t v29 = v25 - 1;
            do
            {
              uint64_t v30 = *v26++;
              if (v6[v30] != v28) {
                Espresso::throw_exception_selector<Espresso::not_implemented_error>("Segmentation failed: ops in a op group fall in different segments");
              }
              --v29;
            }
            while (v29);
          }
        }
LABEL_19:
        ;
      }
      ++v17;
    }
    while (v17 != v18);
  }

  operator delete(v6);
}

void sub_1921DDE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILSegmenterAnalytics::~MILSegmenterAnalytics(void **this)
{
  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    uint64_t v2 = (void **)this[2];
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = this[1];
      this[1] = 0;
      if (!v3) {
        return;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v2 = (void **)this[2];
    if (!v2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = (void **)this[3];
  if (v4 == v2)
  {
    this[3] = v2;
    operator delete(v2);
    uint64_t v3 = this[1];
    this[1] = 0;
    if (!v3) {
      return;
    }
LABEL_4:
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    return;
  }
  do
  {
    if (*((char *)v4 - 1) < 0) {
      operator delete(*(v4 - 3));
    }
    v4 -= 3;
  }
  while (v4 != v2);
  int64_t v5 = this[2];
  this[3] = v2;
  operator delete(v5);
  uint64_t v3 = this[1];
  this[1] = 0;
  if (v3) {
    goto LABEL_4;
  }
}

{
  void **v2;
  void *v3;
  void **v4;
  void *v5;

  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    uint64_t v2 = (void **)this[2];
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = this[1];
      this[1] = 0;
      if (!v3) {
        return;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v2 = (void **)this[2];
    if (!v2) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = (void **)this[3];
  if (v4 == v2)
  {
    this[3] = v2;
    operator delete(v2);
    uint64_t v3 = this[1];
    this[1] = 0;
    if (!v3) {
      return;
    }
LABEL_4:
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    return;
  }
  do
  {
    if (*((char *)v4 - 1) < 0) {
      operator delete(*(v4 - 3));
    }
    v4 -= 3;
  }
  while (v4 != v2);
  int64_t v5 = this[2];
  this[3] = v2;
  operator delete(v5);
  uint64_t v3 = this[1];
  this[1] = 0;
  if (v3) {
    goto LABEL_4;
  }
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::FindOpToBackend(Espresso::AOT::SegmenterShortestPath::StateGraph *this@<X0>, void *a2@<X8>)
{
  Espresso::AOT::CostGraph::CostGraph((uint64_t **)&__p, (uint64_t)this + 32);
  Espresso::AOT::CostGraph::FindShortestPath((Espresso::AOT::CostGraph *)&__p, *((void *)this + 2), *((void *)this + 3), &v45);
  uint64_t v4 = v45;
  int64_t v5 = v46;
  if (v45 == v46) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Segmenter failed: No valid segmentation can be generated for this model. It should not reach here, please file a radar to Espresso | all.");
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((int)((unint64_t)(v5 - v4) >> 3) > 3)
  {
    long long v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = *((void *)this + 2);
    uint64_t v10 = 1;
    unint64_t v43 = (unint64_t **)a2;
    while (1)
    {
      unint64_t v11 = *(void *)&v4[8 * v10];
      if (v9 >= v11 || (unint64_t v12 = *((void *)this + 3), v12 <= v11)) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
      }
      unint64_t v13 = *(void *)&v4[8 * v10 + 8];
      if (v9 >= v13 || v12 <= v13) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
      }
      unint64_t v14 = v11 - 1;
      uint64_t v15 = *((void *)this + 1);
      unint64_t v44 = v14 / (v15 + 1);
      if (v44 == (v13 - 1) / (v15 + 1)) {
        break;
      }
LABEL_5:
      if (++v10 >= (((v5 - v4) << 29) - 0x200000000) >> 32) {
        goto LABEL_43;
      }
    }
    uint64_t v42 = v10;
    if (v9 >= v13) {
LABEL_55:
    }
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("node idx out of range");
    unint64_t v16 = v14 % (v15 + 1);
    while (1)
    {
      if (*((void *)this + 3) <= v13) {
        goto LABEL_55;
      }
      uint64_t v15 = *((void *)this + 1);
      if (v16 >= (v13 - 1) % (v15 + 1))
      {
        uint64_t v4 = v45;
        int64_t v5 = v46;
        uint64_t v10 = v42;
        goto LABEL_5;
      }
      if (v8 < v6)
      {
        *(void *)uint64_t v8 = v44;
        uint64_t v17 = (uint64_t)(v8 + 8);
      }
      else
      {
        unint64_t v18 = (char *)*a2;
        uint64_t v19 = (uint64_t)&v8[-*a2];
        uint64_t v20 = v19 >> 3;
        unint64_t v21 = (v19 >> 3) + 1;
        if (v21 >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((v6 - v18) >> 2 > v21) {
          unint64_t v21 = (v6 - v18) >> 2;
        }
        if ((unint64_t)(v6 - v18) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          if (v22 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v23 = v22;
          unint64_t v24 = operator new(8 * v22);
          unint64_t v22 = v23;
          uint64_t v7 = (unint64_t *)&v24[8 * v20];
          *uint64_t v7 = v44;
          uint64_t v17 = (uint64_t)(v7 + 1);
          if (v8 != v18)
          {
LABEL_27:
            unint64_t v25 = v8 - 8 - v18;
            if (v25 < 0x168
              || &v24[v19 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v24[v19 - 8]
              || &v8[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] > v8 - 8
              || (unint64_t)(v8 - v24 - v19) < 0x20)
            {
              long long v26 = v8;
              a2 = v43;
            }
            else
            {
              uint64_t v30 = (v25 >> 3) + 1;
              uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              long long v26 = &v8[-v31];
              uint64_t v7 = (unint64_t *)((char *)v7 - v31);
              float v32 = &v24[8 * v20 - 16];
              long long v33 = v8 - 16;
              uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v35 = *(_OWORD *)v33;
                *(v32 - 1) = *((_OWORD *)v33 - 1);
                _OWORD *v32 = v35;
                v32 -= 2;
                v33 -= 32;
                v34 -= 4;
              }
              while (v34);
              a2 = v43;
              if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_30:
                long long v6 = &v24[8 * v22];
                *a2 = v7;
                a2[1] = v17;
                a2[2] = v6;
                if (!v18) {
                  goto LABEL_14;
                }
LABEL_34:
                uint64_t v28 = v18;
                uint64_t v29 = v6;
                operator delete(v28);
                long long v6 = v29;
                goto LABEL_14;
              }
            }
            do
            {
              unint64_t v27 = *((void *)v26 - 1);
              v26 -= 8;
              *--uint64_t v7 = v27;
            }
            while (v26 != v18);
            goto LABEL_30;
          }
        }
        else
        {
          unint64_t v24 = 0;
          uint64_t v7 = (unint64_t *)(8 * v20);
          *(void *)(8 * v20) = v44;
          uint64_t v17 = 8 * v20 + 8;
          if (v8 != v18) {
            goto LABEL_27;
          }
        }
        a2 = v43;
        long long v6 = &v24[8 * v22];
        MIL::Builder::ProgramBuilder *v43 = v7;
        v43[1] = (unint64_t *)v17;
        void v43[2] = (unint64_t *)v6;
        if (v18) {
          goto LABEL_34;
        }
      }
LABEL_14:
      a2[1] = v17;
      ++v16;
      unint64_t v9 = *((void *)this + 2);
      uint64_t v8 = (char *)v17;
      if (v9 >= v13) {
        goto LABEL_55;
      }
    }
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v15 = *((void *)this + 1);
LABEL_43:
  if (v15 != (v8 - (char *)v7) >> 3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Segmenter failed: invalid shortest path generated");
  }
  if (v4)
  {
    long long v46 = v4;
    operator delete(v4);
  }
  unint64_t v36 = (char *)__p;
  if (__p)
  {
    unint64_t v37 = v48;
    std::__fs::filesystem::path v38 = __p;
    if (v48 != __p)
    {
      int8x8_t v39 = v48;
      do
      {
        uint8x8_t v41 = (void *)*((void *)v39 - 3);
        v39 -= 24;
        unint64_t v40 = v41;
        if (v41)
        {
          *((void *)v37 - 2) = v40;
          operator delete(v40);
        }
        unint64_t v37 = v39;
      }
      while (v39 != v36);
      std::__fs::filesystem::path v38 = __p;
    }
    long long v48 = v36;
    operator delete(v38);
  }
}

void sub_1921DE308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  unint64_t v18 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v18;
    operator delete(v18);
    uint64_t v19 = __p;
    if (!__p)
    {
LABEL_3:
      Espresso::AOT::CostGraph::~CostGraph((Espresso::AOT::CostGraph *)&a16);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v19 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  Espresso::AOT::CostGraph::~CostGraph((Espresso::AOT::CostGraph *)&a16);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CostGraph::FindShortestPath(Espresso::AOT::CostGraph *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3);
  if (v4 <= a2 || v4 <= a3) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("src or dst node index is out of range");
  }
  if (v4 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = a2;
  unint64_t v9 = (int64x2_t *)operator new(0xAAAAAAAAAAAAAAB0 * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
  uint64_t v10 = (double *)v9;
  unint64_t v11 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
  unint64_t v12 = (unint64_t *)v9;
  if (v11 < 3) {
    goto LABEL_126;
  }
  unint64_t v13 = v11 + 1;
  unint64_t v12 = (unint64_t *)&v9[v13 & 0x1FFFFFFFFFFFFFFCLL];
  int64x2_t v14 = vdupq_n_s64(v4);
  int64x2_t v15 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  int64x2_t v16 = vzip2q_s64(v14, v15);
  int64x2_t v17 = vzip1q_s64(v14, v15);
  unint64_t v18 = v9 + 2;
  uint64_t v19 = v13 & 0x1FFFFFFFFFFFFFFCLL;
  do
  {
    v18[-2] = v17;
    v18[-1] = v16;
    *unint64_t v18 = v17;
    v18[1] = v16;
    v18 += 4;
    v19 -= 4;
  }
  while (v19);
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFCLL))
  {
LABEL_126:
    do
    {
      unint64_t *v12 = v4;
      v12[1] = 0x7FEFFFFFFFFFFFFFLL;
      v12 += 2;
    }
    while (v12 != (unint64_t *)&v9[v4]);
  }
  *(_OWORD *)unint64_t v90 = 0u;
  *(_OWORD *)std::__fs::filesystem::path __p = 0u;
  int v92 = 1065353216;
  uint64_t v20 = &v9[v7];
  v20->i64[0] = v7;
  v20->i64[1] = 0;
  uint64_t v88 = (double *)v9;
  unint64_t v89 = v4;
  if (v4 != 1)
  {
    uint64_t v21 = 0;
    if (v4 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v4;
    }
    unint64_t v23 = &v9->i8[8];
    do
    {
      if (v90[1])
      {
        unint64_t v24 = (unint64_t)v90[1] - 1;
        if (((unint64_t)v90[1] & ((unint64_t)v90[1] - 1)) != 0)
        {
          unint64_t v53 = 0;
          double v54 = 1.79769313e308;
          unint64_t v27 = v4;
          do
          {
            unint64_t v55 = v53;
            if ((void *)v53 >= v90[1])
            {
              unint64_t v55 = v53 % (unint64_t)v90[1];
              std::string::size_type v56 = (void *)*((void *)v90[0] + v53 % (unint64_t)v90[1]);
              if (v56)
              {
LABEL_69:
                while (1)
                {
                  std::string::size_type v56 = (void *)*v56;
                  if (!v56) {
                    break;
                  }
                  unint64_t v57 = v56[1];
                  if (v57 == v53)
                  {
                    if (v56[2] == v53) {
                      goto LABEL_61;
                    }
                  }
                  else
                  {
                    if ((void *)v57 >= v90[1]) {
                      v57 %= (unint64_t)v90[1];
                    }
                    if (v57 != v55) {
                      break;
                    }
                  }
                }
              }
            }
            else
            {
              std::string::size_type v56 = (void *)*((void *)v90[0] + v53);
              if (v56) {
                goto LABEL_69;
              }
            }
            if (*(double *)&v23[16 * v53] <= v54)
            {
              unint64_t v27 = v53;
              double v54 = *(double *)&v23[16 * v53];
            }
LABEL_61:
            ++v53;
          }
          while (v53 != v22);
        }
        else
        {
          unint64_t v25 = 0;
          double v26 = 1.79769313e308;
          unint64_t v27 = v4;
          do
          {
            uint64_t v28 = (void *)*((void *)v90[0] + (v25 & v24));
            if (v28)
            {
              while (1)
              {
                uint64_t v28 = (void *)*v28;
                if (!v28) {
                  break;
                }
                uint64_t v29 = v28[1];
                if (v29 == v25)
                {
                  if (v28[2] == v25) {
                    goto LABEL_21;
                  }
                }
                else if ((v29 & v24) != (v25 & v24))
                {
                  break;
                }
              }
            }
            if (*(double *)&v23[16 * v25] <= v26)
            {
              unint64_t v27 = v25;
              double v26 = *(double *)&v23[16 * v25];
            }
LABEL_21:
            ++v25;
          }
          while (v25 != v22);
        }
      }
      else
      {
        unint64_t v30 = 0;
        double v31 = 1.79769313e308;
        float v32 = v10 + 1;
        unint64_t v27 = v4;
        do
        {
          double v33 = *v32;
          v32 += 2;
          double v34 = v33;
          if (v33 <= v31) {
            unint64_t v27 = v30;
          }
          double v31 = fmin(v34, v31);
          ++v30;
        }
        while (v22 != v30);
      }
      unint64_t v93 = v27;
      std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v90, &v93, &v93);
      unint64_t v35 = v93;
      double v36 = *(double *)&v23[16 * v93];
      if (v36 != 1.79769313e308)
      {
        unint64_t v37 = (uint64_t *)(*(void *)this + 24 * v93);
        uint64_t v38 = *v37;
        uint64_t v39 = v37[1];
        if (v38 != v39)
        {
          unint64_t v40 = v90[0];
          unint64_t v41 = (unint64_t)v90[1];
          uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v90[1]);
          v42.i16[0] = vaddlv_u8(v42);
          unint64_t v43 = v42.u32[0];
          unint64_t v44 = (unint64_t)v90[1] - 1;
          do
          {
            unint64_t v45 = *(void *)v38;
            if (v41)
            {
              if (v43 > 1)
              {
                unint64_t v46 = *(void *)v38;
                if (v45 >= v41) {
                  unint64_t v46 = v45 % v41;
                }
              }
              else
              {
                unint64_t v46 = v45 & v44;
              }
              char v47 = (void *)v40[v46];
              if (v47)
              {
                long long v48 = (void *)*v47;
                if (v48)
                {
                  if (v43 < 2)
                  {
                    while (1)
                    {
                      uint64_t v49 = v48[1];
                      if (v49 == v45)
                      {
                        if (v48[2] == v45) {
                          goto LABEL_37;
                        }
                      }
                      else if ((v49 & v44) != v46)
                      {
                        goto LABEL_58;
                      }
                      long long v48 = (void *)*v48;
                      if (!v48) {
                        goto LABEL_58;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v50 = v48[1];
                    if (v50 == v45)
                    {
                      if (v48[2] == v45) {
                        goto LABEL_37;
                      }
                    }
                    else
                    {
                      if (v50 >= v41) {
                        v50 %= v41;
                      }
                      if (v50 != v46) {
                        break;
                      }
                    }
                    long long v48 = (void *)*v48;
                  }
                  while (v48);
                }
              }
            }
LABEL_58:
            double v51 = *(double *)(v38 + 8) + v36;
            uint64_t v52 = 16 * v45;
            if (v51 < *(double *)&v23[v52])
            {
              *(void *)&v10[(unint64_t)v52 / 8] = v35;
              *(double *)&v23[v52] = v51;
            }
LABEL_37:
            v38 += 16;
          }
          while (v38 != v39);
        }
      }
      ++v21;
    }
    while (v21 != v4 - 1);
    unint64_t v58 = __p[0];
    if (__p[0])
    {
      do
      {
        uint64_t v59 = (void *)*v58;
        operator delete(v58);
        unint64_t v58 = v59;
      }
      while (v59);
    }
  }
  uint64_t v60 = v90[0];
  v90[0] = 0;
  if (v60) {
    operator delete(v60);
  }
  v90[0] = 0;
  v90[1] = 0;
  __p[0] = 0;
  uint64_t v61 = (char *)operator new(8uLL);
  *(void *)uint64_t v61 = a3;
  uint64_t v62 = v61 + 8;
  v90[1] = v61 + 8;
  uint64_t v63 = v61 + 8;
  unint64_t v87 = v7;
  unint64_t v64 = v89;
  while (1)
  {
    double v65 = v10[2 * *((void *)v62 - 1)];
    if (*(void *)&v65 == v64) {
      break;
    }
    if (v62 < v63)
    {
      *(double *)uint64_t v62 = v65;
      v62 += 8;
      if (*(void *)&v65 == v7) {
        goto LABEL_111;
      }
    }
    else
    {
      uint64_t v66 = (v62 - v61) >> 3;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61)
      {
        v90[1] = v62;
        __p[0] = v63;
        v90[0] = v61;
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((v63 - v61) >> 2 > v67) {
        unint64_t v67 = (v63 - v61) >> 2;
      }
      if ((unint64_t)(v63 - v61) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68)
      {
        if (v68 >> 61)
        {
          __p[0] = v63;
          v90[0] = v61;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v69 = operator new(8 * v68);
        uint64_t v70 = &v69[8 * v66];
        *(double *)uint64_t v70 = v65;
        uint64_t v71 = (uint64_t)(v70 + 8);
        if (v62 == v61)
        {
LABEL_100:
          unint64_t v64 = v89;
          uint64_t v63 = &v69[8 * v68];
          if (!v61) {
            goto LABEL_97;
          }
LABEL_96:
          operator delete(v61);
          goto LABEL_97;
        }
      }
      else
      {
        int v69 = 0;
        uint64_t v70 = (char *)(8 * v66);
        *(double *)(8 * v66) = v65;
        uint64_t v71 = 8 * v66 + 8;
        if (v62 == v61) {
          goto LABEL_100;
        }
      }
      unint64_t v72 = v62 - 8 - v61;
      if (v72 < 0x168
        || &v69[v62 - v61 - 8 - (v72 & 0xFFFFFFFFFFFFFFF8)] > &v69[v62 - v61 - 8]
        || &v62[-(v72 & 0xFFFFFFFFFFFFFFF8) - 8] > v62 - 8
        || (unint64_t)(v61 - v69) < 0x20)
      {
        uint64_t v73 = v62;
        unint64_t v64 = v89;
        do
        {
LABEL_94:
          uint64_t v74 = *((void *)v73 - 1);
          v73 -= 8;
          *((void *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v73 != v61);
        goto LABEL_95;
      }
      uint64_t v75 = (v72 >> 3) + 1;
      uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v73 = &v62[-v76];
      v70 -= v76;
      std::string v77 = &v69[8 * v66 - 16];
      std::string v78 = (long long *)(v62 - 16);
      uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
      unint64_t v64 = v89;
      do
      {
        long long v80 = *v78;
        *(v77 - 1) = *(v78 - 1);
        *std::string v77 = v80;
        v77 -= 2;
        v78 -= 2;
        v79 -= 4;
      }
      while (v79);
      if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_94;
      }
LABEL_95:
      uint64_t v63 = &v69[8 * v68];
      if (v61) {
        goto LABEL_96;
      }
LABEL_97:
      uint64_t v61 = v70;
      uint64_t v62 = (char *)v71;
      unint64_t v7 = v87;
      uint64_t v10 = v88;
      if (*(void *)&v65 == v87)
      {
LABEL_111:
        long long v81 = v62 - 8;
        if (v61 != v62 && v81 > v61)
        {
          std::string v83 = v61 + 8;
          do
          {
            uint64_t v84 = *((void *)v83 - 1);
            *((void *)v83 - 1) = *(void *)v81;
            *(void *)long long v81 = v84;
            v81 -= 8;
            BOOL v85 = v83 >= v81;
            v83 += 8;
          }
          while (!v85);
        }
        *a4 = v61;
        a4[1] = v62;
        a4[2] = v63;
        goto LABEL_120;
      }
    }
  }
  v90[1] = v62;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (v61) {
    operator delete(v61);
  }
LABEL_120:
  operator delete(v10);
}

void sub_1921DE9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
}

void sub_1921DEA0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15)
  {
    operator delete(v15);
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (std::string::size_type i = *v9; i; std::string::size_type i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1921DEC6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::AOT::CostGraph::CostGraph(uint64_t **result, uint64_t a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  result[2] = *(uint64_t **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (*result == v3) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Input graph cannot be empty");
  }
  do
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*(double *)(v4 + 8) < 0.0) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input graph has negative edge cost");
        }
        v4 += 16;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  *(_OWORD *)uint64_t result = *(_OWORD *)a2;
  result[2] = *(uint64_t **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (*result == v3) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Input graph cannot be empty");
  }
  do
  {
    uint64_t v4 = *v2;
    uint64_t v5 = v2[1];
    if (*v2 != v5)
    {
      do
      {
        if (*(double *)(v4 + 8) < 0.0) {
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Input graph has negative edge cost");
        }
        v4 += 16;
      }
      while (v4 != v5);
    }
    v2 += 3;
  }
  while (v2 != v3);
  return result;
}

void sub_1921DED24(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    Espresso::AOT::CostGraph::CostGraph((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<Espresso::MILTranslator::NameGenerator,std::unordered_set<std::string>>()
{
}

void sub_1921DEE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)va);
  MEMORY[0x192FF16B0](v2, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso25espresso_os_log_subsystemEPKc_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.espresso", "espresso");
  uint64_t v1 = Espresso::espresso_os_log_subsystem(char const*)::log_t;
  Espresso::espresso_os_log_subsystem(char const*)::log_t = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_0>,MIL::ValidationResult ()(MIL::IROperation const&)>::operator()(MIL::IRObject *a1@<X1>, MIL::ValidationResult *a2@<X8>)
{
  strcpy(__p, "backend");
  E5AOT::Operators::ValidationUtils::ValidateHasStringAttribute(a1, a2);
}

void sub_1921DEF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void E5AOT::Operators::ValidationUtils::ValidateHasStringAttribute(MIL::IRObject *a1@<X0>, MIL::ValidationResult *a2@<X8>)
{
  if (!MIL::IRObject::TryGetAttribute())
  {
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v5 = (std::__shared_weak_count *)LocationPtr[1];
    uint64_t v20 = *LocationPtr;
    uint64_t v21 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    unint64_t v6 = std::string::append(&v17, "' is a required attribute.");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::__fs::filesystem::path __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x192FEF370](a2, &v20, 321, __p);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_10:
        uint8x8_t v8 = v21;
        if (!v21) {
          return;
        }
        goto LABEL_23;
      }
    }
    else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v17.__r_.__value_.__l.__data_);
    uint8x8_t v8 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_23;
  }
  if (MEMORY[0x192FF09C0]())
  {
    MIL::ValidationResult::ValidationResult(a2);
    return;
  }
  unint64_t v9 = (uint64_t *)MIL::IRObject::GetLocationPtr(a1);
  uint64_t v10 = (std::__shared_weak_count *)v9[1];
  uint64_t v15 = *v9;
  unint64_t v16 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::operator+<char>();
  unint64_t v11 = std::string::append(&v17, "' must be a string.");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v14 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)float v13 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  MEMORY[0x192FEF370](a2, &v15, 307, v13);
  if (SHIBYTE(v14) < 0)
  {
    operator delete(v13[0]);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_16:
      uint8x8_t v8 = v16;
      if (!v16) {
        return;
      }
      goto LABEL_23;
    }
  }
  else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v17.__r_.__value_.__l.__data_);
  uint8x8_t v8 = v16;
  if (!v16) {
    return;
  }
LABEL_23:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1921DF168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1921DF1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v25 - 48);
  _Unwind_Resume(a1);
}

void sub_1921DF1E8(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE393768;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1921DF2E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso8hardware18is_virtual_machineEv_block_invoke()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!result) {
    Espresso::hardware::is_virtual_machine(void)::uint64_t result = v2;
  }
  return result;
}

void Espresso::single_match_replace<Espresso::generic_activation_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint8x8_t v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      long long v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    float v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        unint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          std::string::size_type v19 = (std::__shared_weak_count *)*(v15 - 2);
          double v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          unint64_t v23 = 0;
          double v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          unint64_t v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          double v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          double v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          double v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_1921DF694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context20transform_leaky_reluEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v65 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.transform_leaky_relu");
    std::string::basic_string[abi:ne180100]<0>(&v60, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&__p, (uint64_t)&v60, &v53);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57[1]) < 0) {
      operator delete(__p);
    }
    char v7 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      uint8x8_t v8 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if (v53.__r_.__value_.__l.__size_ != 1)
      {
LABEL_124:
        operator delete(v8);
        return;
      }
    }
    else
    {
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) != 1) {
        return;
      }
      uint8x8_t v8 = &v53;
    }
    if (v8->__r_.__value_.__s.__data_[0] != 49)
    {
LABEL_122:
      if ((v7 & 0x80) == 0) {
        return;
      }
      uint8x8_t v8 = (std::string *)v53.__r_.__value_.__r.__words[0];
      goto LABEL_124;
    }
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(v9 + 16);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
    uint64_t v51 = v10;
    uint64_t v52 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v12 = (***(uint64_t (****)(void))(v10 + 8))(*(void *)(v10 + 8));
    int v49 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]) + 12);
    int v50 = v12;
    Espresso::abstract_engine_factory::shared(&v47);
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)a2->i64[0] + 384))();
    int v14 = *(_DWORD *)v13;
    float v15 = *(float *)(v13 + 4);
    uint64_t v16 = *(void *)(a1 + 40) + 96;
    unint64_t v17 = a2[3].i32[2];
    std::__fs::filesystem::path __p = (void *)v17;
    uint64_t v18 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, v17, &__p)[3];
    if (*((char *)v18 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v18, *((void *)v18 + 1));
    }
    else
    {
      long long v19 = *v18;
      v46.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    }
    uint64_t v20 = *(void *)(a1 + 40) + 56;
    unint64_t v21 = a2[3].i32[2];
    std::__fs::filesystem::path __p = (void *)v21;
    uint64_t v22 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v20, v21, &__p)[3];
    if (*((char *)v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v22, *((void *)v22 + 1));
    }
    else
    {
      long long v23 = *v22;
      v45.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v23;
    }
    if (v14 != 2 || v15 > 1.0)
    {
LABEL_113:
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v52) {
        nitro::nitro_function::nitro_function(v52);
      }
      char v7 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      goto LABEL_122;
    }
    LODWORD(__p) = a2[3].i32[2];
    memset(v57, 0, sizeof(v57));
    unint64_t v24 = a2[2].u64[1];
    if (v24 >= a2[3].i64[0])
    {
      uint64_t v25 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a2 + 2, (uint64_t)&__p);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a2[2].i64[1], (uint64_t)&__p);
      uint64_t v25 = v24 + 72;
      a2[2].i64[1] = v24 + 72;
    }
    a2[2].i64[1] = v25;
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57[5];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57[2];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
    if (v57[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57[1]);
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v45.__r_.__value_.__l.__size_;
    }
    unint64_t v27 = &v44;
    std::string::basic_string[abi:ne180100]((uint64_t)&v44, size + 27);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v27 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = &v45;
      }
      else {
        uint64_t v28 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      memmove(v27, v28, size);
    }
    strcpy((char *)v27 + size, "__@leaky_relu__scaled_input");
    LODWORD(__p) = 6;
    *((float *)&__p + 1) = v15;
    memset(v57, 0, 28);
    uint64_t v29 = v47;
    std::string::basic_string[abi:ne180100]<0>(&v60, "activation");
    Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)&v51, (uint64_t)&v60, (uint64_t)&__p, &v50);
    if (lpsrc.__r_.__value_.__r.__words[0])
    {
      if (v30)
      {
        double v31 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
LABEL_46:
        if (lpsrc.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        v43[0] = v30;
        v43[1] = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v60, "activation");
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v64, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
        }
        else {
          std::string v64 = v45;
        }
        memset(&lpsrc, 0, sizeof(lpsrc));
        p_std::string lpsrc = &lpsrc;
        LOBYTE(v40) = 0;
        lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        lpsrc.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__r.__words[0];
        lpsrc.__r_.__value_.__r.__words[2] = lpsrc.__r_.__value_.__r.__words[0] + 24;
        lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&lpsrc.__r_.__value_.__r.__words[2], (long long *)&v64, &v65, (std::string *)lpsrc.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v62, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        }
        else {
          std::string v62 = v44;
        }
        p_std::string lpsrc = 0;
        unint64_t v40 = 0;
        p_int data = 0;
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
        v58.__r_.__value_.__s.__data_[8] = 0;
        p_std::string lpsrc = (std::string *)operator new(0x18uLL);
        unint64_t v40 = p_lpsrc;
        p_int data = (void **)&p_lpsrc[1].__r_.__value_.__l.__data_;
        unint64_t v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v62, (long long *)&v63, p_lpsrc);
        Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v43, &v60, &v44, (std::string **)&lpsrc, &p_lpsrc, 0);
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        p_std::string lpsrc = &lpsrc;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_lpsrc);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (v31)
        {
          nitro::nitro_function::nitro_function(v31);
          nitro::nitro_function::nitro_function(v31);
        }
        v57[1] = 897988541;
        LOBYTE(v57[2]) = 0;
        *(void *)((char *)&v57[4] + 4) = 0;
        std::__fs::filesystem::path __p = (void *)23;
        v57[0] = 1065353216;
        std::string::basic_string[abi:ne180100]<0>(&v60, "elementwise");
        Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)&v51, (uint64_t)&v60, (uint64_t)&__p, &v50);
        if (lpsrc.__r_.__value_.__r.__words[0])
        {
          if (v32)
          {
            double v33 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
            if (lpsrc.__r_.__value_.__l.__size_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
            }
            goto LABEL_72;
          }
        }
        else
        {
          char v32 = 0;
        }
        double v33 = 0;
LABEL_72:
        if (lpsrc.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v34 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v34 = v45.__r_.__value_.__l.__size_;
        }
        unint64_t v35 = &lpsrc;
        std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v34 + 32);
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v35 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        }
        if (v34)
        {
          if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v36 = &v45;
          }
          else {
            double v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
          }
          memmove(v35, v36, v34);
        }
        strcpy((char *)v35 + v34, "__@leaky_relu__elementwise_max_k");
        v38[0] = v32;
        v38[1] = v33;
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v64, "elementwise");
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v60, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
        }
        else {
          std::string v60 = v45;
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v61, v44.__r_.__value_.__l.__data_, v44.__r_.__value_.__l.__size_);
        }
        else {
          std::string v61 = v44;
        }
        p_std::string lpsrc = 0;
        unint64_t v40 = 0;
        p_int data = 0;
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
        v62.__r_.__value_.__s.__data_[8] = 0;
        p_std::string lpsrc = (std::string *)operator new(0x30uLL);
        unint64_t v40 = p_lpsrc;
        p_int data = (void **)&p_lpsrc[2].__r_.__value_.__l.__data_;
        unint64_t v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v60, (long long *)&v62, p_lpsrc);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v46;
        }
        memset(&v62, 0, sizeof(v62));
        double v54 = &v62;
        char v55 = 0;
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
        v62.__r_.__value_.__r.__words[2] = v62.__r_.__value_.__r.__words[0] + 24;
        v62.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v62.__r_.__value_.__r.__words[2], (long long *)&v58, (long long *)&v59, (std::string *)v62.__r_.__value_.__l.__data_);
        Espresso::single_match_state<Espresso::generic_activation_kernel>::add_kernel(a2, v38, &v64, &lpsrc, &p_lpsrc, (std::string **)&v62, 0);
        double v54 = &v62;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_lpsrc;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
        for (uint64_t i = 0; i != -6; i -= 3)
        {
          if (SHIBYTE(v61.__r_.__value_.__r.__words[i + 2]) < 0) {
            operator delete(*(void **)((char *)&v60 + i * 8 + 24));
          }
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
        if (v33) {
          nitro::nitro_function::nitro_function(v33);
        }
        if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(lpsrc.__r_.__value_.__l.__data_);
        }
        if (v33) {
          nitro::nitro_function::nitro_function(v33);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        goto LABEL_113;
      }
    }
    else
    {
      unint64_t v30 = 0;
    }
    double v31 = 0;
    goto LABEL_46;
  }
}

void sub_1921E0074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  *(void *)(v61 - 144) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v61 - 144));
  uint64_t v63 = 0;
  uint64_t v64 = v61 - 192;
  while (1)
  {
    if (*(char *)(v64 + v63 + 47) < 0) {
      operator delete(*(void **)(v64 + v63 + 24));
    }
    v63 -= 24;
    if (v63 == -48)
    {
      if (*(char *)(v61 - 89) < 0) {
        operator delete(*(void **)(v61 - 112));
      }
      if (v60) {
        nitro::nitro_function::nitro_function(v60);
      }
      if (a20 < 0) {
        operator delete(__p);
      }
      if (v60) {
        nitro::nitro_function::nitro_function(v60);
      }
      if (a28 < 0) {
        operator delete(a23);
      }
      if (a34 < 0) {
        operator delete(a29);
      }
      if (a41 < 0) {
        operator delete(a36);
      }
      if (a43) {
        nitro::nitro_function::nitro_function(a43);
      }
      if (a46) {
        nitro::nitro_function::nitro_function(a46);
      }
      if (a52 < 0) {
        operator delete(a47);
      }
      _Unwind_Resume(a1);
    }
  }
}

void E5RT::E5ProgramImpl::LoadFunctionInfo(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(&v208, a2, 1, 5);
  if (v209 - v208 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v210, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v213, "Expect only a single text section in Compute Program.");
    E5RT::Status::Status(v198, 8, &v213);
    E5RT::E5RTError::E5RTError(exception, &v210, v198);
  }
  uint64_t v8 = *(void *)v208;
  char v7 = (std::__shared_weak_count *)*((void *)v208 + 1);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t v10 = (std::string *)operator new(0x1D8uLL);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EE3809D8;
  uint64_t v11 = (uint64_t)&v10[1];
  E5RT::E5FunctionImpl::E5FunctionImpl((E5RT::E5FunctionImpl *)&v10[1]);
  int v12 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 16))(a3);
  E5RT::E5FunctionImpl::SetName(v10 + 1, v12);
  p_size_t size = (atomic_ullong *)&v10->__r_.__value_.__l.__size_;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  int v207 = 0;
  float v15 = (unsigned int *)(v14 + v13);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2)) {
    operator new();
  }
  *(void *)&long long v210 = &unk_1EE377EC0;
  *((void *)&v210 + 1) = VerifySizePrefixedFunctionBuffer;
  *((void *)&v211 + 1) = &v210;
  *(void *)&long long v213 = &unk_1EE377AF8;
  *((void *)&v213 + 1) = UnPackSizePrefixedFunction;
  unsigned int v214 = &v213;
  E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<FunctionT>(v15, (uint64_t)&v210, (uint64_t)&v213);
  uint64_t v16 = (const std::string *)v198[0];
  v198[0] = 0;
  int v207 = v16;
  if (v214 != &v213)
  {
    if (v214) {
      (*(void (**)(long long *))(*(void *)v214 + 40))(v214);
    }
    uint64_t v17 = *((void *)&v211 + 1);
    if (*((long long **)&v211 + 1) != &v210) {
      goto LABEL_10;
    }
LABEL_13:
    (*(void (**)(long long *))(v210 + 32))(&v210);
    goto LABEL_14;
  }
  (*(void (**)(long long *))(v213 + 32))(&v213);
  uint64_t v17 = *((void *)&v211 + 1);
  if (*((long long **)&v211 + 1) == &v210) {
    goto LABEL_13;
  }
LABEL_10:
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 40))(v17);
  }
LABEL_14:
  uint64_t v18 = (std::string::__raw *)v207;
  std::string::pointer data = v207[2].__r_.__value_.__l.__data_;
  if (v207[2].__r_.__value_.__l.__size_ - (void)data != 8)
  {
    v171 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v210, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v213, "Function can only have an entry block. No support for control flow yet.");
    E5RT::Status::Status(v198, 8, &v213);
    E5RT::E5RTError::E5RTError(v171, &v210, v198);
  }
  uint64_t v20 = *(uint64_t ***)data;
  size_t v21 = v207->__r_.__value_.__l.__size_ - v207->__r_.__value_.__r.__words[0];
  uint64_t v22 = *(const void **)(*(void *)data + 24);
  if (v21 != *(void *)(*(void *)data + 32) - (void)v22 || memcmp(v207->__r_.__value_.__l.__data_, v22, v21))
  {
    size_t v172 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v210, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v213, "Function and entry block inputs must match.");
    E5RT::Status::Status(v198, 8, &v213);
    E5RT::E5RTError::E5RTError(v172, &v210, v198);
  }
  long long v23 = (const void *)v18[1].__words[0];
  size_t v24 = v18[1].__words[1] - (void)v23;
  uint64_t v25 = v20[6];
  if (v24 != (char *)v20[7] - (char *)v25 || memcmp(v23, v25, v24))
  {
    v173 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v210, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v213, "Function and entry block outputs must match, since only one block per function is supported at this time.");
    E5RT::Status::Status(v198, 8, &v213);
    E5RT::E5RTError::E5RTError(v173, &v210, v198);
  }
  double v26 = (const void *)v18[4].__words[0];
  size_t v27 = v18[4].__words[1] - (void)v26;
  uint64_t v28 = v20[9];
  if (v27 != (char *)v20[10] - (char *)v28 || memcmp(v26, v28, v27))
  {
    uint64_t v174 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v210, "LoadFunctionInfo");
    std::string::basic_string[abi:ne180100]<0>(&v213, "Function and entry block inouts must match, since only one block per function is supported at this time.");
    E5RT::Status::Status(v198, 8, &v213);
    E5RT::E5RTError::E5RTError(v174, &v210, v198);
  }
  unint64_t v183 = v20;
  uint64_t v29 = (std::__shared_weak_count *)operator new(0x178uLL);
  v29->__shared_owners_ = 0;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE380968;
  unint64_t v30 = (E5RT::E5BlockImpl *)&v29[1];
  E5RT::E5BlockImpl::E5BlockImpl((E5RT::E5BlockImpl *)&v29[1]);
  v205 = &v29[1].__vftable;
  int v206 = v29;
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  E5RT::E5FunctionImpl::AddBlock(v11, (uint64_t)&v205);
  p_shared_owners = &v29->__shared_owners_;
  uint64_t v175 = v29;
  uint64_t v181 = (std::__shared_weak_count *)v10;
  double v31 = v206;
  if (v206 && !atomic_fetch_add(&v206->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v180 = a1;
  char v32 = v207;
  double v33 = (uint64_t *)v207->__r_.__value_.__r.__words[0];
  size_t size = (void *)v207->__r_.__value_.__l.__size_;
  size_t v184 = (E5RT::E5FunctionImpl *)&v10[1];
  if (v207->__r_.__value_.__l.__data_ != (std::string::pointer)size)
  {
    while (1)
    {
      long long v35 = *(_OWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) + 16 * *v33);
      long long v213 = v35;
      uint64_t v36 = *((void *)&v35 + 1);
      if (*((void *)&v35 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v210 = 0u;
      long long v211 = 0u;
      int v212 = 1065353216;
      int8x8_t v37 = (int8x8_t)a4[1];
      if (v37)
      {
        uint64_t v38 = *v33;
        unint64_t v39 = *v33;
        uint8x8_t v40 = (uint8x8_t)vcnt_s8(v37);
        v40.i16[0] = vaddlv_u8(v40);
        if (v40.u32[0] > 1uLL)
        {
          unint64_t v41 = *v33;
          if (*(void *)&v37 <= v39) {
            unint64_t v41 = v39 % *(void *)&v37;
          }
        }
        else
        {
          unint64_t v41 = (v37.i32[0] - 1) & v39;
        }
        uint8x8_t v42 = *(uint64_t ***)(*a4 + 8 * v41);
        if (v42)
        {
          unint64_t v43 = *v42;
          if (v43)
          {
            if (v40.u32[0] < 2uLL)
            {
              uint64_t v44 = *(void *)&v37 - 1;
              while (1)
              {
                uint64_t v46 = v43[1];
                if (v46 == v39)
                {
                  if (*((_DWORD *)v43 + 4) == v38) {
                    goto LABEL_50;
                  }
                }
                else if ((v46 & v44) != v41)
                {
                  goto LABEL_52;
                }
                unint64_t v43 = (uint64_t *)*v43;
                if (!v43) {
                  goto LABEL_52;
                }
              }
            }
            do
            {
              unint64_t v45 = v43[1];
              if (v45 == v39)
              {
                if (*((_DWORD *)v43 + 4) == v38)
                {
LABEL_50:
                  if (&v210 != (long long *)(v43 + 3))
                  {
                    int v212 = *((_DWORD *)v43 + 14);
                    long long v176 = v35;
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v210, (uint64_t *)v43[5], 0);
                    long long v35 = v176;
                  }
                  break;
                }
              }
              else
              {
                if (v45 >= *(void *)&v37) {
                  v45 %= *(void *)&v37;
                }
                if (v45 != v41) {
                  break;
                }
              }
              unint64_t v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
        }
      }
LABEL_52:
      long long v202 = v35;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      E5RT::E5FunctionImpl::LoadOperandInfo(v11, (uint64_t **)&v202, a2, &v203);
      uint64_t v47 = v204;
      if (v204 && !atomic_fetch_add(&v204->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
        long long v48 = (std::__shared_weak_count *)*((void *)&v202 + 1);
        if (*((void *)&v202 + 1))
        {
LABEL_57:
          if (!atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
      }
      else
      {
        long long v48 = (std::__shared_weak_count *)*((void *)&v202 + 1);
        if (*((void *)&v202 + 1)) {
          goto LABEL_57;
        }
      }
      int v49 = (void **)v211;
      if ((void)v211)
      {
        do
        {
          uint64_t v52 = (void **)*v49;
          if (*((char *)v49 + 39) < 0) {
            operator delete(v49[2]);
          }
          operator delete(v49);
          int v49 = v52;
        }
        while (v52);
      }
      int v50 = (void *)v210;
      *(void *)&long long v210 = 0;
      if (v50) {
        operator delete(v50);
      }
      uint64_t v51 = (std::__shared_weak_count *)*((void *)&v213 + 1);
      if (*((void *)&v213 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v213 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      ++v33;
      uint64_t v11 = (uint64_t)&v10[1];
      if (v33 == size)
      {
        char v32 = v207;
        break;
      }
    }
  }
  std::string v53 = v32[4].__r_.__value_.__l.__data_;
  double v54 = (void *)v32[4].__r_.__value_.__l.__size_;
  while (v53 != v54)
  {
    long long v55 = *(_OWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) + 16 * *v53);
    long long v213 = v55;
    uint64_t v56 = *((void *)&v55 + 1);
    if (*((void *)&v55 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v55 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v210 = 0u;
    long long v211 = 0u;
    int v212 = 1065353216;
    int8x8_t v57 = (int8x8_t)a4[1];
    if (v57)
    {
      uint64_t v58 = *v53;
      unint64_t v59 = *v53;
      uint8x8_t v60 = (uint8x8_t)vcnt_s8(v57);
      v60.i16[0] = vaddlv_u8(v60);
      if (v60.u32[0] > 1uLL)
      {
        unint64_t v61 = *v53;
        if (*(void *)&v57 <= v59) {
          unint64_t v61 = v59 % *(void *)&v57;
        }
      }
      else
      {
        unint64_t v61 = (v57.i32[0] - 1) & v59;
      }
      std::string v62 = *(uint64_t ***)(*a4 + 8 * v61);
      if (v62)
      {
        uint64_t v63 = *v62;
        if (v63)
        {
          if (v60.u32[0] < 2uLL)
          {
            uint64_t v64 = *(void *)&v57 - 1;
            while (1)
            {
              uint64_t v66 = v63[1];
              if (v66 == v59)
              {
                if (*((_DWORD *)v63 + 4) == v58) {
                  goto LABEL_96;
                }
              }
              else if ((v66 & v64) != v61)
              {
                goto LABEL_98;
              }
              uint64_t v63 = (uint64_t *)*v63;
              if (!v63) {
                goto LABEL_98;
              }
            }
          }
          do
          {
            unint64_t v65 = v63[1];
            if (v65 == v59)
            {
              if (*((_DWORD *)v63 + 4) == v58)
              {
LABEL_96:
                if (&v210 != (long long *)(v63 + 3))
                {
                  int v212 = *((_DWORD *)v63 + 14);
                  long long v177 = v55;
                  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&v210, (uint64_t *)v63[5], 0);
                  long long v55 = v177;
                }
                break;
              }
            }
            else
            {
              if (v65 >= *(void *)&v57) {
                v65 %= *(void *)&v57;
              }
              if (v65 != v61) {
                break;
              }
            }
            uint64_t v63 = (uint64_t *)*v63;
          }
          while (v63);
        }
      }
    }
LABEL_98:
    long long v199 = v55;
    if (v56) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5FunctionImpl::LoadOperandInfo((uint64_t)v184, (uint64_t **)&v199, a2, &v200);
    unint64_t v67 = v201;
    if (v201 && !atomic_fetch_add(&v201->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
      unint64_t v68 = (std::__shared_weak_count *)*((void *)&v199 + 1);
      if (*((void *)&v199 + 1))
      {
LABEL_103:
        if (!atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
    }
    else
    {
      unint64_t v68 = (std::__shared_weak_count *)*((void *)&v199 + 1);
      if (*((void *)&v199 + 1)) {
        goto LABEL_103;
      }
    }
    int v69 = (void **)v211;
    if ((void)v211)
    {
      do
      {
        unint64_t v72 = (void **)*v69;
        if (*((char *)v69 + 39) < 0) {
          operator delete(v69[2]);
        }
        operator delete(v69);
        int v69 = v72;
      }
      while (v72);
    }
    uint64_t v70 = (void *)v210;
    *(void *)&long long v210 = 0;
    if (v70) {
      operator delete(v70);
    }
    uint64_t v71 = (std::__shared_weak_count *)*((void *)&v213 + 1);
    if (*((void *)&v213 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v213 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
    ++v53;
  }
  unint64_t v182 = v7;
  if (*v183 != v183[1])
  {
    uint64_t v73 = **v183;
    long long v74 = *(_OWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) + 16 * v73);
    long long v210 = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5FunctionImpl::LoadOperationInfo((uint64_t)v184, v74, a2, (uint64_t)a4, &v213);
  }
  uint64_t OperandMap = E5RT::E5FunctionImpl::GetOperandMap(v184);
  std::unordered_map<std::string,std::shared_ptr<E5RT::E5Operand const>>::unordered_map((uint64_t)&v210, OperandMap);
  E5RT::E5BlockImpl::ReserveInputsAndOutputs(v30, v183[4] - v183[3], v183[7] - v183[6], v183[10] - v183[9]);
  uint64_t v76 = v183[3];
  for (uint64_t i = v183[4]; v76 != i; ++v76)
  {
    uint64_t v78 = *v76;
    uint64_t v79 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v80 = 16 * v78;
    uint64_t v81 = (*(uint64_t (**)(void))(**(void **)(*v79 + v80) + 16))(*(void *)(*v79 + v80));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v81))
    {
      size_t v163 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v198, "Block input operand missing.");
      E5RT::Status::Status(&v188, 8, v198);
      E5RT::E5RTError::E5RTError(v163, &v213, &v188);
    }
    uint64_t v82 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v83 = (*(uint64_t (**)(void))(**(void **)(*v82 + v80) + 16))(*(void *)(*v82 + v80));
    *(void *)&long long v213 = v83;
    uint64_t v84 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v83, (uint64_t)&std::piecewise_construct, (long long **)&v213);
    uint64_t v85 = v84[6];
    uint64_t v196 = v84[5];
    int v197 = (std::__shared_weak_count *)v85;
    if (v85) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v85 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5BlockImpl::AddInput((uint64_t)v30, v83, &v196);
    unint64_t v86 = v197;
    if (v197 && !atomic_fetch_add(&v197->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
  unint64_t v87 = v183[6];
  for (std::vector<std::string>::pointer j = v183[7]; v87 != j; ++v87)
  {
    uint64_t v89 = *v87;
    unint64_t v90 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v91 = 16 * v89;
    uint64_t v92 = (*(uint64_t (**)(void))(**(void **)(*v90 + v91) + 16))(*(void *)(*v90 + v91));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v92))
    {
      uint64_t v164 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v198, "Block output operand missing.");
      E5RT::Status::Status(&v188, 8, v198);
      E5RT::E5RTError::E5RTError(v164, &v213, &v188);
    }
    unint64_t v93 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v94 = (*(uint64_t (**)(void))(**(void **)(*v93 + v91) + 16))(*(void *)(*v93 + v91));
    *(void *)&long long v213 = v94;
    uint64_t v95 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v94, (uint64_t)&std::piecewise_construct, (long long **)&v213);
    uint64_t v96 = v95[6];
    uint64_t v194 = v95[5];
    uint64_t v195 = (std::__shared_weak_count *)v96;
    if (v96) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5BlockImpl::AddOutput((uint64_t)v30, v94, &v194);
    uint64_t v97 = v195;
    if (v195 && !atomic_fetch_add(&v195->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  uint64_t v98 = v183[9];
  for (k = v183[10]; v98 != k; ++v98)
  {
    uint64_t v100 = *v98;
    uint64_t v101 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v102 = 16 * v100;
    uint64_t v103 = (*(uint64_t (**)(void))(**(void **)(*v101 + v102) + 16))(*(void *)(*v101 + v102));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v103))
    {
      v165 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v198, "Block inout operand missing.");
      E5RT::Status::Status(&v188, 8, v198);
      E5RT::E5RTError::E5RTError(v165, &v213, &v188);
    }
    long long v104 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v105 = (*(uint64_t (**)(void))(**(void **)(*v104 + v102) + 16))(*(void *)(*v104 + v102));
    *(void *)&long long v213 = v105;
    v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v105, (uint64_t)&std::piecewise_construct, (long long **)&v213);
    uint64_t v107 = v106[6];
    uint64_t v192 = v106[5];
    long long v193 = (std::__shared_weak_count *)v107;
    if (v107) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5BlockImpl::AddInOut((uint64_t)v30, v105, &v192);
    v108 = v193;
    if (v193 && !atomic_fetch_add(&v193->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  uint64_t v109 = (std::string::__raw *)v207;
  E5RT::E5FunctionImpl::ReserveInputsAndOutputs(v184, (uint64_t)(v109->__words[1] - v109->__words[0]) >> 3, (uint64_t)(v109[1].__words[1] - v109[1].__words[0]) >> 3, (uint64_t)(v207[4].__r_.__value_.__l.__size_ - v207[4].__r_.__value_.__r.__words[0]) >> 3);
  v110 = (uint64_t *)v109->__words[0];
  v111 = (uint64_t *)v109->__words[1];
  v112 = v109;
  if ((uint64_t *)v109->__words[0] != v111)
  {
    do
    {
      uint64_t v113 = *v110;
      std::string v114 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      uint64_t v115 = 16 * v113;
      uint64_t v116 = (*(uint64_t (**)(void))(**(void **)(*v114 + v115) + 16))(*(void *)(*v114 + v115));
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v116))
      {
        v166 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
        std::string::basic_string[abi:ne180100]<0>(v198, "Function input operand missing.");
        E5RT::Status::Status(&v188, 8, v198);
        E5RT::E5RTError::E5RTError(v166, &v213, &v188);
      }
      long long v117 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      uint64_t v118 = (*(uint64_t (**)(void))(**(void **)(*v117 + v115) + 16))(*(void *)(*v117 + v115));
      *(void *)&long long v213 = v118;
      long long v119 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v118, (uint64_t)&std::piecewise_construct, (long long **)&v213);
      uint64_t v120 = v119[6];
      *(void *)&long long v191 = v119[5];
      *((void *)&v191 + 1) = v120;
      if (v120) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
      }
      E5RT::E5FunctionImpl::AddInput((uint64_t)v184, v118, &v191);
      uint64_t v121 = (std::__shared_weak_count *)*((void *)&v191 + 1);
      if (*((void *)&v191 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v191 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
      ++v110;
    }
    while (v110 != v111);
  }
  uint64_t v122 = (uint64_t *)v112[1].__words[0];
  for (m = (uint64_t *)v112[1].__words[1]; v122 != m; ++v122)
  {
    uint64_t v124 = *v122;
    int v125 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v126 = 16 * v124;
    uint64_t v127 = (*(uint64_t (**)(void))(**(void **)(*v125 + v126) + 16))(*(void *)(*v125 + v126));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v127))
    {
      int v167 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v198, "Function output operand missing.");
      E5RT::Status::Status(&v188, 8, v198);
      E5RT::E5RTError::E5RTError(v167, &v213, &v188);
    }
    std::string v128 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v129 = (*(uint64_t (**)(void))(**(void **)(*v128 + v126) + 16))(*(void *)(*v128 + v126));
    *(void *)&long long v213 = v129;
    char v130 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v129, (uint64_t)&std::piecewise_construct, (long long **)&v213);
    uint64_t v131 = v130[6];
    *(void *)&long long v190 = v130[5];
    *((void *)&v190 + 1) = v131;
    if (v131) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5FunctionImpl::AddOutput((uint64_t)v184, v129, &v190);
    uint64_t v132 = (std::__shared_weak_count *)*((void *)&v190 + 1);
    if (*((void *)&v190 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  uint64_t v134 = (uint64_t *)v112[4].__words[0];
  for (n = (uint64_t *)v112[4].__words[1]; v134 != n; ++v134)
  {
    uint64_t v135 = *v134;
    uint64_t v136 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v137 = 16 * v135;
    uint64_t v138 = (*(uint64_t (**)(void))(**(void **)(*v136 + v137) + 16))(*(void *)(*v136 + v137));
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(&v210, v138))
    {
      uint64_t v168 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
      std::string::basic_string[abi:ne180100]<0>(v198, "Function inout operand missing.");
      E5RT::Status::Status(&v188, 8, v198);
      E5RT::E5RTError::E5RTError(v168, &v213, &v188);
    }
    char v139 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    uint64_t v140 = (*(uint64_t (**)(void))(**(void **)(*v139 + v137) + 16))(*(void *)(*v139 + v137));
    *(void *)&long long v213 = v140;
    uint64_t v141 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v210, v140, (uint64_t)&std::piecewise_construct, (long long **)&v213);
    uint64_t v142 = v141[6];
    *(void *)&long long v189 = v141[5];
    *((void *)&v189 + 1) = v142;
    if (v142) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
    }
    E5RT::E5FunctionImpl::AddInOut((uint64_t)v184, v140, &v189);
    uint64_t v143 = (std::__shared_weak_count *)*((void *)&v189 + 1);
    if (*((void *)&v189 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v189 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
  __n128 v188 = 0uLL;
  for (iuint64_t i = *(uint64_t ***)(E5RT::E5FunctionImpl::GetOperandMap(v184) + 16); ii; iuint64_t i = (uint64_t **)*ii)
  {
    uint64_t v145 = (*(uint64_t (**)(uint64_t *))(*ii[5] + 32))(ii[5]);
    unsigned int v146 = (*(uint64_t (**)(uint64_t))(*(void *)v145 + 32))(v145);
    __n128 v147 = *(__n128 *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2) + 16 * v146);
    __n128 v187 = v147;
    if (v147.n128_u64[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v147.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
    }
    if ((*(unsigned int (**)(unint64_t, __n128))(*(void *)v147.n128_u64[0] + 24))(v147.n128_u64[0], v147) == 3)
    {
      unint64_t v148 = v188.n128_u64[0];
      if (!v188.n128_u64[0])
      {
        if (v187.n128_u64[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v187.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v149 = (std::__shared_weak_count *)v188.n128_u64[1];
        __n128 v188 = v187;
        if (v149 && !atomic_fetch_add(&v149->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
        uint64_t v150 = (*(uint64_t (**)(unint64_t))(*(void *)v188.n128_u64[0] + 48))(v188.n128_u64[0]);
        E5RT::E5FunctionImpl::SetIntermediateBufferSize((uint64_t)v184, v150);
        unint64_t v148 = v188.n128_u64[0];
      }
      if (v187.n128_u64[0] != v148)
      {
        uint64_t v169 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v213, "LoadFunctionInfo");
        E5RT::E5FunctionImpl::GetName(v184);
        std::operator+<char>();
        E5RT::Status::Status(v186, 8, v198);
        E5RT::E5RTError::E5RTError(v169, &v213, v186);
      }
    }
    if (v187.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v187.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(unint64_t))(*(void *)v187.n128_u64[1] + 16))(v187.n128_u64[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v187.n128_u64[1]);
    }
  }
  E5RT::E5FunctionImpl::SetUserVersion((std::string *)v184, v207 + 3);
  *(void *)&long long v213 = v184;
  *((void *)&v213 + 1) = v181;
  atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
  char v151 = *(E5RT::E5FunctionImpl ***)(v180 + 24);
  if ((unint64_t)v151 >= *(void *)(v180 + 32))
  {
    uint64_t v152 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(v180 + 16), (uint64_t)&v213);
    uint64_t v153 = (std::__shared_weak_count *)*((void *)&v213 + 1);
    *(void *)(v180 + 24) = v152;
    if (v153 && !atomic_fetch_add(&v153->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  else
  {
    *char v151 = v184;
    v151[1] = (E5RT::E5FunctionImpl *)v181;
    *(void *)(v180 + 24) = v151 + 2;
  }
  if (v188.n128_u64[1] && !atomic_fetch_add((atomic_ullong *volatile)(v188.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    (*(void (**)(unint64_t))(*(void *)v188.n128_u64[1] + 16))(v188.n128_u64[1]);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v188.n128_u64[1]);
  }
  unint64_t v154 = (void **)v211;
  if ((void)v211)
  {
    do
    {
      while (1)
      {
        uint64_t v155 = (void **)*v154;
        uint64_t v156 = (std::__shared_weak_count *)v154[6];
        if (v156 && !atomic_fetch_add(&v156->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
        if (*((char *)v154 + 39) < 0) {
          break;
        }
        operator delete(v154);
        unint64_t v154 = v155;
        if (!v155) {
          goto LABEL_206;
        }
      }
      operator delete(v154[2]);
      operator delete(v154);
      unint64_t v154 = v155;
    }
    while (v155);
  }
LABEL_206:
  uint64_t v157 = (void *)v210;
  *(void *)&long long v210 = 0;
  if (v157) {
    operator delete(v157);
  }
  if (!atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
    std::__shared_weak_count::__release_weak(v175);
  }
  uint64_t v158 = (uint64_t)v207;
  int v207 = 0;
  if (v158) {
    std::default_delete<FunctionT>::operator()[abi:ne180100]((uint64_t)&v207, v158);
  }
  if (!atomic_fetch_add(p_size, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
    std::__shared_weak_count::__release_weak(v181);
  }
  if (v182 && !atomic_fetch_add(&v182->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
    std::__shared_weak_count::__release_weak(v182);
  }
  size_t v159 = v208;
  if (v208)
  {
    long long v160 = v209;
    uint64_t v161 = v208;
    if (v209 != v208)
    {
      do
      {
        v162 = (std::__shared_weak_count *)*((void *)v160 - 1);
        if (v162 && !atomic_fetch_add(&v162->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
        v160 -= 16;
      }
      while (v160 != v159);
      uint64_t v161 = v208;
    }
    std::string::size_type v209 = v159;
    operator delete(v161);
  }
}

void sub_1921E2334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_ullong *a14, atomic_ullong *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v56 - 144);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  uint64_t v58 = *(void ***)(v56 - 176);
  if (v58)
  {
    do
    {
      while (1)
      {
        unint64_t v59 = (void **)*v58;
        uint8x8_t v60 = (std::__shared_weak_count *)v58[6];
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
        if (*((char *)v58 + 39) < 0) {
          break;
        }
        operator delete(v58);
        uint64_t v58 = v59;
        if (!v59) {
          goto LABEL_9;
        }
      }
      operator delete(v58[2]);
      operator delete(v58);
      uint64_t v58 = v59;
    }
    while (v59);
  }
LABEL_9:
  unint64_t v61 = *(void **)(v56 - 192);
  *(void *)(v56 - 192) = 0;
  if (v61) {
    operator delete(v61);
  }
  if (!atomic_fetch_add(a14, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  uint64_t v62 = *(void *)(v56 - 224);
  *(void *)(v56 - 224) = 0;
  if (v62) {
    std::default_delete<FunctionT>::operator()[abi:ne180100](v56 - 224, v62);
  }
  if (!atomic_fetch_add(a15, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
  }
  uint64_t v63 = *(void *)(v56 - 216);
  if (v63)
  {
    uint64_t v64 = *(void *)(v56 - 208);
    unint64_t v65 = *(void **)(v56 - 216);
    if (v64 != v63)
    {
      do
      {
        uint64_t v66 = *(std::__shared_weak_count **)(v64 - 8);
        if (v66)
        {
          if (!atomic_fetch_add(&v66->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        v64 -= 16;
      }
      while (v64 != v63);
      unint64_t v65 = *(void **)(v56 - 216);
    }
    *(void *)(v56 - 208) = v63;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

uint64_t *E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 64;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((void *)(a1 + 64), a2))
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 >= *(void *)(a1 + 16))
    {
      char v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a1, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v6 = *(_OWORD *)a2;
        *(void *)(v5 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)unint64_t v5 = v6;
      }
      char v7 = (std::string *)(v5 + 24);
      *(void *)(a1 + 8) = v5 + 24;
    }
    *(void *)(a1 + 8) = v7;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 3) - 1;
    uint64_t v10 = (long long *)a2;
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, a2, (uint64_t)&std::piecewise_construct, &v10)[5] = v8;
  }
  uint64_t v10 = (long long *)a2;
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, a2, (uint64_t)&std::piecewise_construct, &v10)+ 5;
}

void sub_1921E2B24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  long long v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      float v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          long long v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            float v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          float v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  double v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  size_t v27 = (std::string *)(v26 + 2);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        char v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        double v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        char v32 = *(void **)(*(void *)a1 + 8 * v11);
        double v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      char v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      double v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *double v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  char v32 = *(void **)(*(void *)a1 + 8 * v4);
  double v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *double v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  float v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1921E2F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921E2F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetComputeProgramSymbol(E5RT::E5OperandImpl *this)
{
  return *((void *)this + 14);
}

void E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve(uint64_t a1, std::vector<std::string>::size_type a2)
{
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, a2);
  float v4 = (float)a2;
  unint64_t prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 56));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v6 = *(int8x8_t *)(a1 + 32);
  if (prime > *(void *)&v6) {
    goto LABEL_18;
  }
  if (prime >= *(void *)&v6) {
    goto LABEL_19;
  }
  size_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
  if (*(void *)&v6 >= 3uLL)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] <= 1uLL)
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        size_t v7 = v9;
      }
      if (prime <= v7) {
        unint64_t prime = v7;
      }
      if (prime >= *(void *)&v6) {
        goto LABEL_19;
      }
LABEL_18:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1 + 24, prime);
      goto LABEL_19;
    }
  }
  size_t v10 = std::__next_prime(v7);
  if (prime <= v10) {
    unint64_t prime = v10;
  }
  if (prime < *(void *)&v6) {
    goto LABEL_18;
  }
LABEL_19:
  unint64_t v11 = vcvtps_u32_f32(v4 / *(float *)(a1 + 96));
  if (v11 == 1)
  {
    unint64_t v11 = 2;
  }
  else if ((v11 & (v11 - 1)) != 0)
  {
    unint64_t v11 = std::__next_prime(v11);
  }
  int8x8_t v12 = *(int8x8_t *)(a1 + 72);
  if (v11 > *(void *)&v12) {
    goto LABEL_36;
  }
  if (v11 >= *(void *)&v12) {
    return;
  }
  size_t v13 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
  if (*(void *)&v12 >= 3uLL)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] <= 1uLL)
    {
      uint64_t v15 = 1 << -(char)__clz(v13 - 1);
      if (v13 >= 2) {
        size_t v13 = v15;
      }
      if (v11 <= v13) {
        unint64_t v11 = v13;
      }
      if (v11 >= *(void *)&v12) {
        return;
      }
LABEL_36:
      std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1 + 64, v11);
      return;
    }
  }
  size_t v16 = std::__next_prime(v13);
  if (v11 <= v16) {
    unint64_t v11 = v16;
  }
  if (v11 < *(void *)&v12) {
    goto LABEL_36;
  }
}

void E5RT::E5FunctionImpl::AddOutput(uint64_t a1, uint64_t a2, long long *a3)
{
  float v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 200, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  int8x8_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)float v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void E5RT::E5BlockImpl::AddOutput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 144, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v7 = (std::__shared_weak_count *)v4[1];
  uint64_t *v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void E5RT::E5FunctionImpl::AddInput(uint64_t a1, uint64_t a2, long long *a3)
{
  float v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 96, a2);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)v4[1];
  *(_OWORD *)float v4 = v5;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void E5RT::E5BlockImpl::AddInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  float v4 = E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::operator[](a1 + 40, a2);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v7 = (std::__shared_weak_count *)v4[1];
  uint64_t *v4 = v6;
  v4[1] = v5;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t E5RT::E5FunctionImpl::GetOperandMap(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 408;
}

void std::default_delete<FunctionT>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = *(void **)(a2 + 96);
    if (v3)
    {
      *(void *)(a2 + 104) = v3;
      operator delete(v3);
    }
    if (*(char *)(a2 + 95) < 0)
    {
      operator delete(*(void **)(a2 + 72));
      uint64_t v5 = (void **)(a2 + 48);
      float v4 = *(void **)(a2 + 48);
      if (!v4)
      {
LABEL_7:
        uint64_t v6 = *(void **)(a2 + 24);
        if (v6)
        {
          *(void *)(a2 + 32) = v6;
          operator delete(v6);
        }
        size_t v7 = *(void **)a2;
        if (*(void *)a2)
        {
          *(void *)(a2 + 8) = v7;
          operator delete(v7);
        }
        JUMPOUT(0x192FF16B0);
      }
    }
    else
    {
      uint64_t v5 = (void **)(a2 + 48);
      float v4 = *(void **)(a2 + 48);
      if (!v4) {
        goto LABEL_7;
      }
    }
    std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v5, v4);
    operator delete(*v5);
    goto LABEL_7;
  }
}

uint64_t std::vector<std::unique_ptr<BlockT>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  float v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v6 = *--v4;
    uint64_t v5 = v6;
    void *v4 = 0;
    if (v6)
    {
      size_t v7 = *(void **)(v5 + 72);
      if (v7)
      {
        *(void *)(v5 + 80) = v7;
        operator delete(v7);
      }
      uint8x8_t v8 = *(void **)(v5 + 48);
      if (v8)
      {
        *(void *)(v5 + 56) = v8;
        operator delete(v8);
      }
      uint64_t v9 = *(void **)(v5 + 24);
      if (v9)
      {
        *(void *)(v5 + 32) = v9;
        operator delete(v9);
      }
      size_t v10 = *(void **)v5;
      if (*(void *)v5)
      {
        *(void *)(v5 + 8) = v10;
        operator delete(v10);
      }
      uint64_t result = MEMORY[0x192FF16B0](v5, 0x10C40F9E379B3);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void E5RT::E5FunctionImpl::ReserveInputsAndOutputs(E5RT::E5FunctionImpl *this, std::vector<std::string>::size_type a2, std::vector<std::string>::size_type a3, std::vector<std::string>::size_type a4)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 96, a2);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 200, a3);

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 304, a4);
}

std::string *E5RT::E5FunctionImpl::SetUserVersion(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void E5RT::E5BlockImpl::ReserveInputsAndOutputs(E5RT::E5BlockImpl *this, std::vector<std::string>::size_type a2, std::vector<std::string>::size_type a3, std::vector<std::string>::size_type a4)
{
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 40, a2);
  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 144, a3);

  E5Common::OrderedMap<std::string,std::shared_ptr<E5RT::E5Operand const>>::reserve((uint64_t)this + 248, a4);
}

_OWORD *E5RT::E5BlockImpl::AddOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 24);
  if ((unint64_t)v3 >= *(void *)(a1 + 32))
  {
    uint64_t result = std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(a1 + 16, (long long *)a2);
    *(void *)(a1 + 24) = result;
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *uint64_t v3 = *(void *)a2;
    v3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t result = v3 + 2;
    *(void *)(a1 + 24) = v3 + 2;
  }
  return result;
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<FunctionT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  int v13 = 257;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (v3 >= 0x7FFFFFFB) {
    sub_192429E1C();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
LABEL_8:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v12, v10);
}

void sub_1921E37EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<FunctionT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<FunctionT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

BOOL Function::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if (v15)
  {
    BOOL result = 0;
    if (v4 || v6 - 2 < v15) {
      return result;
    }
  }
  else if (v6 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    return 0;
  }
  uint64_t v21 = v19[2];
  if (!v19[2]) {
    return 0;
  }
  BOOL result = 0;
  uint64_t v22 = &v3[v21];
  BOOL v24 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v22 && v24)
  {
    uint64_t v25 = *(unsigned int *)&v22[v2];
    if ((int)v25 < 1) {
      return 0;
    }
    unint64_t v26 = (unint64_t)&v22[v25];
    unint64_t v27 = v6 - 1;
    if (v6 - 1 < v26) {
      return 0;
    }
    BOOL result = 0;
    uint64_t v28 = (unsigned int *)((char *)a1 + v21 + *(unsigned int *)((char *)a1 + v21));
    long long v29 = (char *)v28 - v2;
    BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      uint64_t v32 = *v28;
      if (v32 > 0xFFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      if (v20 < 7) {
        return result;
      }
      unint64_t v33 = (8 * v32) | 4;
      if (v6 <= v33 || v6 - v33 < (unint64_t)v29) {
        return result;
      }
      uint64_t v62 = a1;
      uint64_t v34 = v19[3];
      if (!v19[3]) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v35 = &v3[v34];
      BOOL v37 = ((unint64_t)&v3[v34] & 3) == 0 || v4 == 0;
      if (v7 < (unint64_t)v35) {
        return result;
      }
      if (!v37) {
        return result;
      }
      BOOL result = 0;
      uint64_t v38 = *(unsigned int *)&v35[v2];
      if ((int)v38 < 1 || v27 < (unint64_t)&v35[v38]) {
        return result;
      }
      BOOL result = 0;
      unint64_t v39 = (unsigned int *)((char *)v62 + v34 + *(unsigned int *)((char *)v62 + v34));
      uint8x8_t v40 = (char *)v39 - v2;
      BOOL v41 = (((unint64_t)v39 - v2) & 3) == 0 || v4 == 0;
      BOOL v42 = v41;
      if (v7 < (unint64_t)v40 || !v42) {
        return result;
      }
      uint64_t v43 = *v39;
      if (v43 > 0xFFFFFFE) {
        return 0;
      }
      BOOL result = 0;
      unint64_t v44 = (8 * v43) | 4;
      BOOL v14 = v6 > v44;
      unint64_t v45 = v6 - v44;
      if (!v14 || v45 < (unint64_t)v40) {
        return result;
      }
      if (v20 >= 9 && (uint64_t v46 = v19[4]) != 0)
      {
        BOOL result = 0;
        unint64_t v47 = (unint64_t)&v3[v46];
        BOOL v49 = (v47 & 3) == 0 || v4 == 0;
        if (v7 < v47) {
          return result;
        }
        if (!v49) {
          return result;
        }
        BOOL result = 0;
        uint64_t v50 = *(unsigned int *)(v2 + v47);
        if ((int)v50 < 1 || v27 < v47 + v50) {
          return result;
        }
        uint64_t v51 = (unsigned int *)((char *)v62 + v46 + *(unsigned int *)((char *)v62 + v46));
      }
      else
      {
        uint64_t v51 = 0;
      }
      BOOL result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v51);
      if (result)
      {
        uint64_t v52 = (unsigned __int16 *)((char *)v62 - *v62);
        if (*v52 >= 9u && (uint64_t v53 = v52[4]) != 0) {
          double v54 = (int *)((char *)v62 + v53 + *(unsigned int *)((char *)v62 + v53));
        }
        else {
          double v54 = 0;
        }
        BOOL result = flatbuffers::Verifier::VerifyVectorOfTables<Block>(a2, v54);
        if (result)
        {
          BOOL result = flatbuffers::Table::VerifyOffset(v62, a2, 0xAu);
          if (result)
          {
            long long v55 = (unsigned __int16 *)((char *)v62 - *v62);
            if (*v55 >= 0xBu && (uint64_t v56 = v55[5]) != 0) {
              int8x8_t v57 = (unsigned int *)((char *)v62 + v56 + *(unsigned int *)((char *)v62 + v56));
            }
            else {
              int8x8_t v57 = 0;
            }
            BOOL result = flatbuffers::Verifier::VerifyString((uint64_t *)a2, v57);
            if (result)
            {
              BOOL result = flatbuffers::Table::VerifyOffset(v62, a2, 0xCu);
              if (result)
              {
                uint64_t v58 = (unsigned __int16 *)((char *)v62 - *v62);
                if (*v58 >= 0xDu && (uint64_t v59 = v58[6]) != 0) {
                  uint8x8_t v60 = (unsigned int *)((char *)v62 + v59 + *(unsigned int *)((char *)v62 + v59));
                }
                else {
                  uint8x8_t v60 = 0;
                }
                BOOL result = flatbuffers::Verifier::VerifyVector<unsigned long long>(a2, v60);
                if (result)
                {
                  --*(_DWORD *)(a2 + 40);
                  return 1;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AneInferenceOp::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v12 = *a1;
  unsigned int v13 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v14 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v13;
  *(_DWORD *)(a2 + 44) = v14;
  if (v13 > *(_DWORD *)(a2 + 16) || v14 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v16 = (unint64_t)&v3[-v12];
  if (v16)
  {
    uint64_t result = 0;
    if (v4 || v7 - 2 < v16) {
      return result;
    }
  }
  else if (v7 - 2 < v16)
  {
    return 0;
  }
  unint64_t v17 = *(unsigned __int16 *)(v2 + v16);
  if ((v17 & 1) != 0 && v4 | v17 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v17;
  unint64_t v18 = v7 - v17;
  if (v18 == 0 || !v9 || v18 < v16) {
    return 0;
  }
  unsigned int v20 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v21 = *v20;
  if (v21 < 5) {
    goto LABEL_93;
  }
  uint64_t v22 = v20[2];
  if (v20[2])
  {
    uint64_t result = 0;
    int v23 = &v3[v22];
    BOOL v25 = ((unint64_t)&v3[v22] & 3) == 0 || v4 == 0;
    if (v8 < (unint64_t)v23 || !v25) {
      return result;
    }
    uint64_t v26 = *(unsigned int *)&v23[v2];
    if ((int)v26 < 1 || v7 - 1 < (unint64_t)&v23[v26]) {
      return 0;
    }
    uint64_t result = 0;
    unint64_t v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
    uint64_t v28 = (char *)v27 - v2;
    BOOL v29 = (((unint64_t)v27 - v2) & 3) == 0 || v4 == 0;
    BOOL v30 = v29;
    if (v8 < (unint64_t)v28 || !v30) {
      return result;
    }
    uint64_t v31 = *v27;
    if (v31 > 0x7FFFFFFE) {
      return 0;
    }
    unint64_t v32 = v31 + 4;
    unint64_t v33 = (unint64_t)&v28[v31 + 4];
    BOOL v34 = v7 - 1 >= v33 && v7 > v32;
    BOOL v35 = v34 && v7 - v32 >= (unint64_t)v28;
    if (!v35 || *(unsigned char *)(v2 + v33)) {
      return 0;
    }
  }
  if (v21 < 7)
  {
LABEL_93:
    uint64_t result = flatbuffers::Table::VerifyOffset(a1, a2, 0xAu);
    if (result)
    {
      uint64_t v51 = (unsigned __int16 *)((char *)a1 - *a1);
      if (*v51 >= 0xBu && (uint64_t v52 = v51[5]) != 0) {
        uint64_t v53 = (unsigned int *)((char *)a1 + v52 + *(unsigned int *)((char *)a1 + v52));
      }
      else {
        uint64_t v53 = 0;
      }
      uint64_t result = flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(a2, v53);
      if (result)
      {
        double v54 = (unsigned __int16 *)((char *)a1 - *a1);
        if (*v54 >= 0xBu && (uint64_t v55 = v54[5]) != 0) {
          uint64_t v56 = (unsigned int *)((char *)a1 + v55 + *(unsigned int *)((char *)a1 + v55));
        }
        else {
          uint64_t v56 = 0;
        }
        uint64_t result = flatbuffers::Verifier::VerifyVectorOfStrings(a2, v56);
        if (result)
        {
          --*(_DWORD *)(a2 + 40);
          return 1;
        }
      }
    }
    return result;
  }
  uint64_t v36 = v20[3];
  if (!v20[3]) {
    goto LABEL_83;
  }
  uint64_t result = 0;
  BOOL v37 = &v3[v36];
  BOOL v39 = ((unint64_t)&v3[v36] & 3) == 0 || v4 == 0;
  if (v8 >= (unint64_t)v37 && v39)
  {
    uint64_t v40 = *(unsigned int *)&v37[v2];
    if ((int)v40 < 1 || v7 - 1 < (unint64_t)&v37[v40]) {
      return 0;
    }
    uint64_t result = 0;
    BOOL v41 = (unsigned int *)((char *)a1 + v36 + *(unsigned int *)((char *)a1 + v36));
    BOOL v42 = (char *)v41 - v2;
    BOOL v43 = (((unint64_t)v41 - v2) & 3) == 0 || v4 == 0;
    BOOL v44 = v43;
    if (v8 >= (unint64_t)v42 && v44)
    {
      uint64_t v45 = *v41;
      if (v45 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t result = 0;
      unint64_t v46 = v45 + 4;
      unint64_t v47 = (unint64_t)&v42[v45 + 4];
      if (v7 - 1 < v47 || v7 <= v46 || v7 - v46 < (unint64_t)v42) {
        return result;
      }
      if (*(unsigned char *)(v2 + v47)) {
        return 0;
      }
LABEL_83:
      if (v21 >= 9 && v20[4])
      {
        uint64_t result = 0;
        unint64_t v48 = (unint64_t)&v3[v20[4]];
        BOOL v49 = (v48 & 3) == 0 || v4 == 0;
        BOOL v50 = v49;
        if (v8 < v48 || !v50) {
          return result;
        }
      }
      goto LABEL_93;
    }
  }
  return result;
}

BOOL flatbuffers::Verifier::VerifyVector<flatbuffers::Offset<flatbuffers::String>>(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  unint64_t v2 = (unint64_t)a2 - *(void *)a1;
  if ((v2 & 3) != 0 && *(unsigned char *)(a1 + 24)) {
    return 0;
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 < 5 || v3 - 4 < v2) {
    return 0;
  }
  uint64_t v5 = *a2;
  if (v5 > 0x1FFFFFFE) {
    return 0;
  }
  unint64_t v6 = 4 * v5 + 4;
  BOOL v7 = v3 > v6;
  unint64_t v8 = v3 - v6;
  return v7 && v8 >= v2;
}

uint64_t flatbuffers::Verifier::VerifyVectorOfStrings(uint64_t a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *a2;
  if (!v2) {
    return 1;
  }
  unint64_t v3 = 0;
  int v4 = a2 + 1;
  uint64_t v5 = (char *)a2 - *(void *)a1;
  uint64_t v6 = 4 * v2;
  while (1)
  {
    uint64_t v7 = v4[v3 / 4];
    unint64_t v8 = (unint64_t)&v5[v3 + 4 + v7];
    if ((v8 & 3) != 0)
    {
      if (*(unsigned char *)(a1 + 24)) {
        break;
      }
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (v9 < 5 || v9 - 4 < v8) {
      break;
    }
    uint64_t v11 = *(unsigned int *)((char *)v4 + v7 + v3);
    if (v11 > 0x7FFFFFFE) {
      break;
    }
    uint64_t v12 = v7 + v11;
    BOOL v13 = v9 - 1 >= (unint64_t)&v5[v3 + 8 + v12] && v9 > v11 + 4;
    BOOL v14 = v13 && v9 - (v11 + 4) >= v8;
    if (!v14 || *((unsigned char *)a2 + v12 + v3 + 8)) {
      break;
    }
    v3 += 4;
    if (v6 == v3) {
      return 1;
    }
  }
  return 0;
}

BOOL flatbuffers::Verifier::VerifyString(uint64_t *a1, unsigned int *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v2 = *a1;
  unint64_t v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((unsigned char *)a1 + 24)) {
    return 0;
  }
  unint64_t v4 = a1[1];
  if (v4 < 5 || v4 - 4 < v3) {
    return 0;
  }
  uint64_t v6 = *a2;
  if (v6 > 0x7FFFFFFE) {
    return 0;
  }
  BOOL result = 0;
  unint64_t v8 = v6 + 4;
  unint64_t v9 = v4 - v8;
  if (v4 > v8)
  {
    unint64_t v10 = v8 + v3;
    unint64_t v11 = v4 - 1;
    if (v9 >= v3 && v11 >= v10) {
      return *(unsigned char *)(v2 + v10) == 0;
    }
  }
  return result;
}

E5RT::E5FunctionImpl *E5RT::E5FunctionImpl::E5FunctionImpl(E5RT::E5FunctionImpl *this)
{
  uint64_t v2 = E5RT::E5Function::E5Function(this);
  E5RT::E5FunctionBuilder::E5FunctionBuilder(v2 + 1);
  *(void *)this = &unk_1EE324A78;
  *((void *)this + 1) = &unk_1EE324B18;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 74) = 1065353216;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((void *)this + 44) = 0;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  return this;
}

void sub_1921E41E0(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void *E5RT::E5FunctionBuilder::E5FunctionBuilder(void *this)
{
  *this = &unk_1EE3259A0;
  return this;
}

char *E5RT::E5FunctionImpl::AddBlock(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(_OWORD **)(a1 + 80);
  if ((unint64_t)v3 >= *(void *)(a1 + 88))
  {
    BOOL result = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>((char **)(a1 + 72), a2);
  }
  else
  {
    *unint64_t v3 = *(_OWORD *)a2;
    BOOL result = (char *)(v3 + 1);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  *(void *)(a1 + 80) = result;
  return result;
}

std::string *E5RT::E5FunctionImpl::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void *E5RT::E5Function::E5Function(void *this)
{
  *this = &unk_1EE324628;
  return this;
}

BOOL VerifySizePrefixedFunctionBuffer(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (BOOL v3 = v1 - 4 == **a1) : (BOOL v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, uint64_t v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return Function::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

E5RT::E5BlockImpl *E5RT::E5BlockImpl::E5BlockImpl(E5RT::E5BlockImpl *this)
{
  uint64_t v2 = E5RT::E5Block::E5Block(this);
  E5RT::E5BlockBuilder::E5BlockBuilder(v2 + 1);
  *(void *)this = &unk_1EE3246A8;
  *((void *)this + 1) = &unk_1EE324708;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((void *)this + 24) = 0;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((void *)this + 37) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_DWORD *)this + 76) = 1065353216;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_DWORD *)this + 86) = 1065353216;
  return this;
}

void sub_1921E43A8(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void *E5RT::E5Block::E5Block(void *this)
{
  *this = &unk_1EE326AE8;
  return this;
}

void *E5RT::E5BlockBuilder::E5BlockBuilder(void *this)
{
  *this = &unk_1EE324A38;
  return this;
}

#error "1921E43FC: too big function (funcsize=0)"

void sub_1921FD798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  BOOL v24 = *(std::__shared_weak_count **)(v19 + 296);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(v21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a12);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::~__hash_table(v20);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a11, *(char **)(v19 + 64));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::__emplace_unique_key_args<MIL::IROperator const*,std::piecewise_construct_t const&,std::tuple<MIL::IROperator const* const&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v14 = (void *)(a1 + 16);
  unint64_t v15 = operator new(0x38uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *unint64_t v15 = 0;
  v15[1] = v8;
  v15[2] = *a3;
  v15[6] = 0;
  char v38 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          int v23 = *(void **)a1;
          *(void *)a1 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          BOOL v25 = (void *)*v14;
          if (*v14)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v26) = v14;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v32))
                  {
                    *(void *)(*(void *)a1 + 8 * v32) = v25;
                    goto LABEL_55;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*(void *)a1 + 8 * v32);
                  **(void **)(*(void *)a1 + 8 * v32) = v31;
                  uint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_55:
                BOOL v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v36 = *(void **)a1;
        *(void *)a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t i = (void *)v37[0];
  if (v33)
  {
    *(void *)v37[0] = *v33;
LABEL_72:
    *unint64_t v33 = i;
    goto LABEL_73;
  }
  *(void *)v37[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  v37[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return i;
}

void sub_192202780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

uint64_t Espresso::MILUtil::GetOpsetVersionInfo(const std::string *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  std::string::size_type v1 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  unint64_t v3 = (char *)a1->__r_.__value_.__r.__words[0];
  std::string::size_type size = a1->__r_.__value_.__l.__size_;
  if ((v1 & 0x80u) == 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v1 & 0x80u) == 0) {
    unint64_t v5 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    unint64_t v5 = a1->__r_.__value_.__l.__size_;
  }
  uint64_t v6 = 3;
  if (v5 < 3) {
    uint64_t v6 = v5;
  }
  if (!v6) {
    goto LABEL_51;
  }
  unint64_t v8 = (const std::string *)((char *)v4 + v6);
  unint64_t v9 = v4;
  uint8x8_t v10 = v8;
  do
  {
    if (v9->__r_.__value_.__s.__data_[0] == 105)
    {
      uint64_t v11 = 1u;
      while (v11 != 3)
      {
        if ((const std::string *)((char *)v9 + v11) == v8) {
          goto LABEL_20;
        }
        int v12 = v9->__r_.__value_.__s.__data_[v11];
        int v13 = aIos[v11++];
        if (v12 != v13) {
          goto LABEL_12;
        }
      }
      uint8x8_t v10 = v9;
    }
LABEL_12:
    unint64_t v9 = (const std::string *)((char *)v9 + 1);
  }
  while (v9 != v8);
LABEL_20:
  if (v10 == v8 || v10 != v4) {
LABEL_51:
  }
    Espresso::throw_exception_selector<Espresso::network_translation_error>(v29);
  if ((v1 & 0x80) != 0)
  {
    std::string::size_type v14 = a1->__r_.__value_.__l.__size_;
    if (size <= 5)
    {
      BOOL v15 = 0;
      size_t __idx = 0;
      goto LABEL_39;
    }
  }
  else
  {
    std::string::size_type v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    unint64_t v3 = (char *)a1;
    if (v1 <= 5)
    {
      BOOL v15 = 0;
      size_t __idx = 0;
LABEL_37:
      std::string::size_type size = v1;
      goto LABEL_39;
    }
  }
  float v16 = &v3[v14];
  float v17 = &v3[v14 - 6];
  uint64_t v18 = 6;
  do
  {
    unint64_t v19 = (char *)memchr(v17, 95, v18 - 5);
    if (!v19) {
      break;
    }
    if (*(_DWORD *)v19 == 1634890847 && *((_WORD *)v19 + 2) == 28265) {
      goto LABEL_34;
    }
    float v17 = v19 + 1;
    uint64_t v18 = v16 - v17;
  }
  while (v16 - v17 > 5);
  unint64_t v19 = v16;
LABEL_34:
  uint64_t v21 = v19 - v3;
  if (v19 == v16) {
    uint64_t v21 = -1;
  }
  BOOL v15 = v21 == v5 - 6;
  size_t __idx = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_37;
  }
LABEL_39:
  std::string::basic_string(&__str, a1, 3uLL, size, (std::allocator<char> *)&v28);
  unsigned int v22 = std::stoi(&__str, &__idx, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string::size_type v23 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v15)
  {
    if ((v23 & 0x80u) != 0) {
      std::string::size_type v23 = a1->__r_.__value_.__l.__size_;
    }
    v23 -= 6;
  }
  else if ((v23 & 0x80) != 0)
  {
    std::string::size_type v23 = a1->__r_.__value_.__l.__size_;
  }
  if (__idx == v23) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>(v29);
  }
  uint64_t v24 = 0x100000000;
  if (!v15) {
    uint64_t v24 = 0;
  }
  return v24 | v22;
}

void sub_192202A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_precompiled_compute_op_create_options_create_with_program_function(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396C08;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192202B7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_execution_stream_operation_create_precompiled_compute_operation_with_options(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE391F98;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192202C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5Common::Utils::MILDictFromCpp<std::string,BOOL>@<X0>(uint64_t a1@<X1>, void **a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t Scalar = MIL::IRTensorValueType::MakeScalar();
  uint64_t v4 = MIL::IRTensorValueType::MakeScalar();
  MIL::IRDictionaryValueType::Make();
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v6 = *((unsigned __int8 *)i + 40);
    unsigned int v22 = operator new(8uLL);
    int64x2_t v23 = vdupq_n_s64(1uLL);
    *(void *)unsigned int v22 = v6;
    Espresso::MILUtil::MakeTensorValue<BOOL>(&v24, v4, &v22);
    if (*((char *)i + 39) < 0) {
      std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)i[2], i[3]);
    }
    else {
      std::string v28 = *(std::string *)(i + 2);
    }
    std::vector<std::string>::vector[abi:ne180100](&__p, (uint64_t)&v28, 1uLL);
    Espresso::MILUtil::MakeTensorValue<std::string>(&v19, Scalar, &__p);
    uint64_t v20 = v19;
    if (v19) {
      operator new();
    }
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint8x8_t v27 = &v20;
    unint64_t v7 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v25, (uint64_t)&v20, (uint64_t)&std::piecewise_construct, (_OWORD **)&v27);
    if (v24) {
      operator new();
    }
    uint64_t v24 = 0;
    unint64_t v8 = (std::__shared_weak_count *)v7[5];
    v7[4] = 0;
    v7[5] = 0;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      unint64_t v9 = v21;
      if (!v21) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v9 = v21;
      if (!v21) {
        goto LABEL_17;
      }
    }
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_17:
    uint64_t v10 = v19;
    uint64_t v19 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      int v12 = v18;
      int v13 = __p;
      if (v18 != __p)
      {
        do
        {
          if (*((char *)v12 - 1) < 0) {
            operator delete(*(v12 - 3));
          }
          v12 -= 3;
        }
        while (v12 != v11);
        int v13 = __p;
      }
      uint64_t v18 = v11;
      operator delete(v13);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v28.__r_.__value_.__l.__data_);
      uint64_t v14 = v24;
      uint64_t v24 = 0;
      if (!v14) {
        goto LABEL_30;
      }
LABEL_29:
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      goto LABEL_30;
    }
    uint64_t v14 = v24;
    uint64_t v24 = 0;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    if (v22) {
      operator delete(v22);
    }
  }
  MIL::IRDictionaryValueType::MakeValue();
  *a2 = v22;
  return std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v25);
}

void sub_192203054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

void sub_1922030A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1922030B4);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = MIL::IRValueMapHasher::operator()();
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (MIL::IRValueMapEq::operator()()) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  uint64_t v14 = operator new(0x30uLL);
  v28[0] = v14;
  v28[1] = a1 + 16;
  void *v14 = 0;
  v14[1] = v9;
  float v17 = *a4;
  *((_OWORD *)v14 + 1) = **a4;
  *float v17 = 0;
  v17[1] = 0;
  v14[4] = 0;
  v14[5] = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  BOOL v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *v14 = *v25;
LABEL_38:
    void *v25 = v14;
    goto LABEL_39;
  }
  void *v14 = *v16;
  *float v16 = v14;
  *(void *)(v24 + 8 * v4) = v16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    BOOL v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return v14;
}

void sub_1922033D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  std::string::size_type v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<Espresso::generic_convolution_kernel> const,std::shared_ptr<Espresso::blob<float,4>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  while (v2)
  {
    unint64_t v3 = v2;
    uint64_t v2 = (void *)*v2;
    unint64_t v4 = (std::__shared_weak_count *)v3[5];
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      unint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5)
      {
LABEL_7:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      unint64_t v5 = (std::__shared_weak_count *)v3[3];
      if (v5) {
        goto LABEL_7;
      }
    }
    operator delete(v3);
  }
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

uint64_t e5rt_precompiled_compute_op_create_options_set_allocate_intermediate_buffers(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE396E08;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192203634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_f16_weights(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5 = (const void *)a1[72];
  if (v5
  {
    unint64_t v7 = (std::__shared_weak_count *)a1[73];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          nitro::nitro_function::nitro_function(v7),
          (unint64_t v5 = (const void *)a1[72]) == 0))
    {
      unint64_t v8 = 0;
    }
    else
    {
      if (v8)
      {
        unint64_t v9 = (std::__shared_weak_count *)a1[73];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_16;
      }
    }
    unint64_t v9 = 0;
LABEL_16:
    int v13 = (std::__shared_weak_count *)a2[1];
    uint64_t v14 = *a2;
    unint64_t v15 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)v8 + 544))(v8, &v14, a3);
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    return;
  }
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  a1[81] = v11;
  unint64_t v12 = (std::__shared_weak_count *)a1[82];
  a1[82] = v10;
  if (v12)
  {
    nitro::nitro_function::nitro_function(v12);
  }
}

void sub_192203818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 592) = v2;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 600);
  *(void *)(a1 + 600) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void *espresso_context_destroy(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (Espresso *)MEMORY[0x192FF2020]();
  unint64_t v4 = v2;
  if (a1)
  {
    unint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v3);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v12 = 134217984;
      int v13 = a1;
      _os_log_impl(&dword_1920CB000, v5, OS_LOG_TYPE_INFO, "Destroying context %zu", (uint8_t *)&v12, 0xCu);
    }

    if (*a1 == 0x50FBC8A8A6F7B03CLL)
    {
      *a1 = 0;
      uint64_t v7 = a1[2];
      a1[2] = 0;
      if (v7) {
        std::default_delete<EspressoLight::espresso_context::priv_t>::operator()[abi:ne180100](v7);
      }
      MEMORY[0x192FF16B0](a1, 0x1020C406E52F545);
    }
    else
    {
      EspressoLight::very_bad_client(v6);
    }
    if (g_espresso_autoinitialize)
    {
      unint64_t v8 = (std::mutex *)g_autoinitialize_mutex;
      std::mutex::lock((std::mutex *)g_autoinitialize_mutex);
      if (!--g_autoinitialize_ctx_count) {
        espresso_deinitialize(v9, v10);
      }
      std::mutex::unlock(v8);
    }
    a1 = 0;
  }
  return a1;
}

void std::default_delete<EspressoLight::espresso_context::priv_t>::operator()[abi:ne180100](uint64_t a1)
{
  std::string::size_type v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t e5rt_execution_stream_operation_retain_input_port(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE392198;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  uint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192203B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_biases(void *a1, uint64_t *a2)
{
  unint64_t v4 = (const void *)a1[72];
  if (v4
  {
    unint64_t v5 = (std::__shared_weak_count *)a1[73];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          nitro::nitro_function::nitro_function(v5),
          (unint64_t v4 = (const void *)a1[72]) == 0))
    {
      uint64_t v6 = 0;
    }
    else
    {
      if (v6)
      {
        uint64_t v7 = (std::__shared_weak_count *)a1[73];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_16;
      }
    }
    uint64_t v7 = 0;
LABEL_16:
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v12 = *a2;
    int v13 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v6 + 392))(v6, &v12);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    return;
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[77] = v9;
  uint64_t v10 = (std::__shared_weak_count *)a1[78];
  a1[78] = v8;
  if (v10)
  {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192203D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 560) = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 568);
  *(void *)(a1 + 568) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 336) = *a2 != 0;
}

uint64_t e5rt_program_function_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE393D68;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192203EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_precompiled_compute_op_create_options_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE396C88;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192203FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___Z24initialize_static_memoryv_block_invoke()
{
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::vector<unsigned long>>*,std::unordered_map<unsigned long long,std::vector<unsigned long>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        BOOL result = std::unordered_map<unsigned long long,std::vector<unsigned long>>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1922040CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::unordered_map<unsigned long long,std::vector<unsigned long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<unsigned long>> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_192204228(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_19220423C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<unsigned long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<unsigned long>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::OpPlacementPass::PlaceOpsInBlock(uint64_t a1, MIL::Builder::BlockBuilder *a2, void *a3, void **a4)
{
  MIL::Builder::BlockBuilder::GetOperations((uint64_t *)&v63, a2);
  uint64_t v8 = (uint64_t)v63;
  uint64_t v52 = v64;
  if (v63 != (void *)v64)
  {
    while (1)
    {
      uint64_t v10 = *(MIL::Builder::OperationBuilder **)v8;
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
      unint64_t v61 = *(MIL::Builder::OperationBuilder **)v8;
      uint64_t v62 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!(*(unsigned int (**)(uint64_t, MIL::Builder::OperationBuilder *))(*(void *)a1 + 24))(a1, v10)) {
        break;
      }
      for (unint64_t i = 0; i < MIL::Builder::OperationBuilder::GetNumOutputs(v10); ++i)
      {
        *(void *)uint64_t v59 = MIL::Builder::OperationBuilder::GetOutputName(v10);
        uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, *(uint64_t *)v59, (uint64_t)&std::piecewise_construct, (long long **)v59);
        uint64_t v13 = (uint64_t)v62;
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = (std::__shared_weak_count *)v12[6];
        v12[5] = (uint64_t)v10;
        v12[6] = v13;
        if (v14)
        {
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        uint64_t v10 = v61;
      }
      MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)v59, v10);
      uint64_t v21 = *(void *)&v59[8];
      uint64_t v20 = *(void *)v59;
      if (*(void *)v59)
      {
        unint64_t v22 = *(void **)v59;
        if (*(void *)v59 != *(void *)&v59[8])
        {
          uint64_t v51 = *(void *)&v59[8];
          do
          {
            size_t v23 = *(std::__shared_weak_count **)(v21 - 8);
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            v21 -= 16;
          }
          while (v21 != v20);
          unint64_t v22 = *(void **)v59;
          uint64_t v21 = v51;
        }
        *(void *)&v59[8] = v20;
        operator delete(v22);
      }
      if (v20 != v21)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        Location = (MIL::Location *)MIL::Builder::OperationBuilder::GetLocation(v61);
        MIL::Location::GetDescription((uint64_t *)&v58, Location);
        unint64_t v48 = std::string::insert(&v58, 0, "Found an unsupported constant at ");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        *(void *)&v59[16] = *((void *)&v48->__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v59 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)v59);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
LABEL_78:
      uint64_t v40 = v62;
      if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
      v8 += 16;
      if (v8 == v52)
      {
        uint64_t v8 = (uint64_t)v63;
        goto LABEL_86;
      }
    }
    uint64_t v50 = v8;
    memset(v59, 0, sizeof(v59));
    int v60 = 1065353216;
    MIL::Builder::OperationBuilder::GetInputArguments((uint64_t *)&v58, v10);
    unint64_t v15 = (void *)v58.__r_.__value_.__r.__words[2];
    if (v58.__r_.__value_.__r.__words[2])
    {
      do
      {
        float v16 = (MIL::Builder::Variable *)v15[2];
        if (MIL::Builder::Variable::TryGetName(v16))
        {
          uint64_t Name = MIL::Builder::Variable::GetName(v16);
          if (*(char *)(Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)Name, *(void *)(Name + 8));
          }
          else
          {
            long long v18 = *(_OWORD *)Name;
            v57.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
            *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v18;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a3, (uint64_t)&v57))
          {
            unint64_t v65 = &v57;
            float v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a3, (uint64_t)&v57, (uint64_t)&std::piecewise_construct, (long long **)&v65);
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v59, v19 + 5, v19 + 5);
          }
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v57.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v15 = (void *)*v15;
      }
      while (v15);
      uint64_t v24 = (void *)v58.__r_.__value_.__r.__words[2];
      if (v58.__r_.__value_.__r.__words[2])
      {
        do
        {
          BOOL v25 = (void *)*v24;
          operator delete(v24);
          uint64_t v24 = v25;
        }
        while (v25);
      }
    }
    unint64_t v26 = (void *)v58.__r_.__value_.__r.__words[0];
    v58.__r_.__value_.__r.__words[0] = 0;
    if (v26) {
      operator delete(v26);
    }
    uint8x8_t v27 = *(void **)&v59[16];
    if (!*(void *)&v59[16])
    {
LABEL_38:
      MIL::Builder::OperationBuilder::GetBlocks((uint64_t *)&v58, v61);
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
      std::string v28 = (std::string::size_type *)v58.__r_.__value_.__r.__words[0];
      uint64_t v8 = v50;
      if (v58.__r_.__value_.__r.__words[0] == v58.__r_.__value_.__l.__size_)
      {
        if (v58.__r_.__value_.__r.__words[0]) {
          goto LABEL_40;
        }
      }
      else
      {
        do
        {
          v57.__r_.__value_.__r.__words[0] = *v28;
          BOOL v37 = (std::__shared_weak_count *)v28[1];
          v57.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
          if (v37) {
            atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::AOT::OpPlacementPass::PlaceOpsInBlock(a1);
          if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
          v28 += 2;
        }
        while (v28 != (std::string::size_type *)size);
        std::string v28 = (std::string::size_type *)v58.__r_.__value_.__r.__words[0];
        if (v58.__r_.__value_.__r.__words[0])
        {
LABEL_40:
          std::string::size_type v30 = v58.__r_.__value_.__l.__size_;
          if ((std::string::size_type *)v58.__r_.__value_.__l.__size_ == v28)
          {
            v58.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
            operator delete(v28);
            uint64_t v31 = *(void **)&v59[16];
            if (!*(void *)&v59[16]) {
              goto LABEL_76;
            }
          }
          else
          {
            do
            {
              char v38 = *(std::__shared_weak_count **)(v30 - 8);
              if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
              v30 -= 16;
            }
            while ((std::string::size_type *)v30 != v28);
            v58.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
            operator delete(v58.__r_.__value_.__l.__data_);
            uint64_t v31 = *(void **)&v59[16];
            if (!*(void *)&v59[16]) {
              goto LABEL_76;
            }
          }
          goto LABEL_82;
        }
      }
      uint64_t v31 = *(void **)&v59[16];
      if (!*(void *)&v59[16])
      {
LABEL_76:
        BOOL v39 = *(void **)v59;
        *(void *)uint64_t v59 = 0;
        if (v39) {
          operator delete(v39);
        }
        goto LABEL_78;
      }
      do
      {
LABEL_82:
        BOOL v41 = v31;
        uint64_t v31 = (void *)*v31;
        BOOL v42 = (std::__shared_weak_count *)v41[3];
        if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
        operator delete(v41);
      }
      while (v31);
      goto LABEL_76;
    }
    while (1)
    {
      unint64_t v32 = (MIL::Builder::OperationBuilder *)v27[2];
      std::string::size_type v33 = v27[3];
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v58.__r_.__value_.__l.__size_ = v33;
      if (!v33) {
        break;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      uint64_t v55 = v32;
      uint64_t v56 = (std::__shared_weak_count *)v33;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
      unint64_t v34 = v62;
      uint64_t v53 = v61;
      double v54 = v62;
      if (v62) {
        goto LABEL_46;
      }
LABEL_47:
      Espresso::AOT::OpPlacementPass::AddOpCopyForConsumer(a1, &v55, (uint64_t *)&v53, (uint64_t)a2, a3, a4);
      if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        BOOL v35 = v56;
        if (v56)
        {
LABEL_50:
          if (!atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        BOOL v35 = v56;
        if (v56) {
          goto LABEL_50;
        }
      }
      uint64_t v36 = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
      if (v58.__r_.__value_.__l.__size_
        && !atomic_fetch_add((atomic_ullong *volatile)(v58.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
      uint8x8_t v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_38;
      }
    }
    uint64_t v55 = v32;
    uint64_t v56 = 0;
    unint64_t v34 = v62;
    uint64_t v53 = v61;
    double v54 = v62;
    if (!v62) {
      goto LABEL_47;
    }
LABEL_46:
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_47;
  }
LABEL_86:
  if (v8)
  {
    uint64_t v43 = v64;
    BOOL v44 = (void *)v8;
    if (v64 != v8)
    {
      do
      {
        uint64_t v45 = *(std::__shared_weak_count **)(v43 - 8);
        if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
        v43 -= 16;
      }
      while (v43 != v8);
      BOOL v44 = v63;
    }
    uint64_t v64 = v8;
    operator delete(v44);
  }
}

void sub_19220498C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 144);
      std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v36 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v36 - 144);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v36 - 128));
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ConstantPlacementPass::MatchOp(Espresso::AOT::ConstantPlacementPass *this, MIL::Builder::OperationBuilder *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)MIL::Builder::OperationBuilder::GetOperator(a2) + 104);

  return v2();
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  BOOL v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          BOOL v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                unint64_t v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    unint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (std::vector<std::string>::pointer j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          unint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  std::string v28 = operator new(0x38uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *std::string v28 = 0;
  v28[1] = v11;
  char v29 = (std::string *)(v28 + 2);
  std::string::size_type v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    v28[4] = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[5] = 0;
  v28[6] = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        int v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      int v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  int v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  unint64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192204F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192204F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_program_library_retain_program_function(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  BOOL v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3948D0;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_192205098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  unint64_t v4 = v3;
  int8x8_t v5 = (const void *)v3[3];
  BOOL v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void Espresso::SerDes::layer_io<Espresso::generic_general_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  int v11 = 2;
  __int16 v12 = 0;
  Espresso::SerDes::params_io<Espresso::general_concat_params_t>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "general_concat");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192205260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::general_concat_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "interleave");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 5));
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(unsigned char *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 5);
  uint64_t v5 = a2 + 5;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "interleave");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_30:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_192205530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "expand_dims");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192205698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_expand_dims_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(a2, v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1922057B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::expand_dims_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v12 + 160))(v12, __p, a2);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v12 + 160))(v12, __p, a2 + 1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v12, a2);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v12, a2 + 1);
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = 0;
  char v7 = a2 + 2;
  do
  {
    if (a3 && v6 < (int)a2[1])
    {
      std::to_string(&v10, v6);
      char v8 = std::string::insert(&v10, 0, "axes_");
      std::string v11 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
      (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v12 + 160))(v12, __p, v7);
    }
    else
    {
      if (a3) {
        goto LABEL_36;
      }
      std::to_string(&v10, v6);
      uint64_t v9 = std::string::insert(&v10, 0, "axes_");
      std::string v11 = *v9;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v11, &v12);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v12, v7);
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
LABEL_36:
    ++v6;
    ++v7;
  }
  while (v6 != 32);
}

void sub_192205AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::expand_dims_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::BNNSEngine::deconvolution_kernel::set_weights(uint64_t a1, void *a2)
{
  unint64_t v4 = *(const void **)(a1 + 576);
  if (v4
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 584);
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          nitro::nitro_function::nitro_function(v5),
          (unint64_t v4 = *(const void **)(a1 + 576)) == 0))
    {
      uint64_t v6 = 0;
    }
    else
    {
      if (v6)
      {
        char v7 = *(std::__shared_weak_count **)(a1 + 584);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_23;
      }
    }
    char v7 = 0;
LABEL_23:
    unint64_t v26 = (std::__shared_weak_count *)a2[1];
    uint64_t v28 = *a2;
    char v29 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, uint64_t *))(*(void *)v6 + 400))(v6, &v28);
    if (v29) {
      nitro::nitro_function::nitro_function(v29);
    }
LABEL_27:
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    return;
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 632) = v9;
  std::string v10 = *(std::__shared_weak_count **)(a1 + 640);
  *(void *)(a1 + 640) = v8;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    std::string v11 = (void *)(a1 + 632);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v27, *a2 + 8);
    uint64_t v12 = v27;
    int v13 = *(std::__shared_weak_count **)(a1 + 656);
    *(_OWORD *)(a1 + 648) = v27;
    if (v13)
    {
      nitro::nitro_function::nitro_function(v13);
      uint64_t v14 = *(void *)(a1 + 648);
    }
    else
    {
      uint64_t v14 = v12;
    }
    uint64_t v15 = 0;
    char v16 = *(int **)(*a2 + 24);
    uint64_t v17 = *(_WORD **)(v14 + 24);
    uint64_t v18 = *(int *)(v14 + 8);
    uint64_t v19 = v14 + 12;
    do
    {
      v18 *= *(int *)(v19 + v15);
      v15 += 4;
    }
    while (v15 != 12);
    for (; v18; --v18)
    {
      int v20 = *v16++;
      _S0 = v20;
      __asm { FCVT            H0, S0 }
      *v17++ = _S0;
    }
    char v7 = *(std::__shared_weak_count **)(a1 + 640);
    void *v11 = 0;
    v11[1] = 0;
    goto LABEL_27;
  }
}

void sub_192205DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::convolution_kernel_cpu_base<Espresso::generic_deconvolution_kernel>::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 576) = v2;
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 584);
  *(void *)(a1 + 584) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::SerDes::layer_io<Espresso::generic_batchnorm_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v20 = a4;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0x3F6666663727C5ACLL;
  __int16 v14 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  int v17 = 1065353216;
  uint64_t v18 = 0;
  uint64_t v19 = 0x200000000;
  Espresso::SerDes::params_io<Espresso::batchnorm_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192205F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::batchnorm_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)a2);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "naive_backward");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 32));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 4));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 12));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 16));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_instancenorm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 8));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 28));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 24));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 36));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_subsampling");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 60));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "generate_mean_ivar");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 64));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "regularization_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (float *)(a2 + 68));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 20));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "training_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (unsigned char *)(a2 + 21));
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "spatial_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v10, (_DWORD *)(a2 + 72));
    goto LABEL_186;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "naive_backward");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 32);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  uint64_t v5 = (_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "training");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 4);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (*v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v8, "training_eps");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 12);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      if (v9 < 0) {
        operator delete(v8[0]);
      }
      if (*v5)
      {
        std::string::basic_string[abi:ne180100]<0>(v8, "training_momentum");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 16);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
        if (v9 < 0) {
          operator delete(v8[0]);
        }
        if (*v5)
        {
          std::string::basic_string[abi:ne180100]<0>(v8, "training_instancenorm");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 8);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
          if (v9 < 0) {
            operator delete(v8[0]);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 28);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "fused_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 24);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(_DWORD *)(a2 + 28) == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 36);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(_DWORD *)(a2 + 60))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "training_subsampling");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 60);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(_DWORD *)(a2 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "generate_mean_ivar");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, a2 + 64);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(float *)(a2 + 68) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "regularization_eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 216))(v10, __p, a2 + 68);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(unsigned char *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "training_mean");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 20);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  if (*(unsigned char *)(a2 + 21))
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "training_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 208))(v10, __p, a2 + 21);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
  int v7 = *(_DWORD *)(a2 + 72);
  uint64_t v6 = a2 + 72;
  if (v7 != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "spatial_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v8, &v10);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v10 + 160))(v10, __p, v6);
LABEL_186:
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_192206C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_match_e5_minimal_cpu_patterns_for_states(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395670;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192206E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_disable_data_dependent_shape(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3959F0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192206F88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_experimental_disable_compile_time_mpsgraph_type_inference(uint64_t a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE395BF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192207088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_compute_device_types_mask(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2;
  v5[0] = &unk_1EE394C70;
  v5[1] = &v4;
  v5[2] = a1;
  uint64_t v6 = v5;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v2;
}

void sub_19220718C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine16current_ane_archEv_block_invoke()
{
  id v2 = [MEMORY[0x1E4F4E038] aneSubType];
  uint64_t v0 = [v2 uppercaseString];
  uint64_t v1 = (void *)Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr;
  Espresso::ANECompilerEngine::current_ane_arch(void)::aneSubtypeStr = v0;
}

void sub_192207204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17generic_factory_t6sharedERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEU13block_pointerFNS1_10shared_ptrIS0_EEvE_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.espresso.factorylock", 0);
  uint64_t v1 = (void *)Espresso::factory_queue;
  Espresso::factory_queue = (uint64_t)v0;

  operator new();
}

void Espresso::AOT::ValidateAlignmentsAttrForE5Backend(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ((Espresso::AOT::IsFunctionSegmented(a1) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid e5backend program: Invalid segments.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t Function = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::IRProgram::GetFunction();
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(Function);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = OpsetName;
  uint64_t v6 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v8 = v4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t v7 = operator new(v8 + 1);
    v24[1] = v6;
    unint64_t v25 = v9 | 0x8000000000000000;
    v24[0] = v7;
    goto LABEL_9;
  }
  HIBYTE(v25) = v4;
  uint64_t v7 = v24;
  if (v4) {
LABEL_9:
  }
    memmove(v7, v5, (size_t)v6);
  *((unsigned char *)v6 + (void)v7) = 0;
  (*(void (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(void *)Function + 64))(Function, v24);
  uint64_t v10 = (void *)(*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *))(*(void *)Function
                                                                                               + 128))(Function);
  uint64_t v11 = v10 + 1;
  int v12 = (void *)*v10;
  if ((void *)*v10 != v10 + 1)
  {
    do
    {
      if (E5Common::Utils::IsTensor(v12[7]))
      {
        uint64_t v13 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v12[7]);
        char v27 = 10;
        strcpy((char *)__p, "alignments");
        uint64_t v14 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v13 + 64))(v13, __p);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (!v14)
        {
          uint64_t v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v21, "Invalid e5backend program: function input without alignments.");
          v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(v21, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
      }
      long long v15 = (void *)v12[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v12[2];
          BOOL v17 = *v16 == (void)v12;
          int v12 = v16;
        }
        while (!v17);
      }
      int v12 = v16;
    }
    while (v16 != v11);
  }
  __p[0] = &unk_1EE37D350;
  __p[1] = a1;
  uint64_t v28 = __p;
  char v20 = MIL::Util::Walk();
  if (v28 == __p)
  {
    (*((void (**)(void **))__p[0] + 4))(__p);
  }
  else if (v28)
  {
    (*((void (**)(void **, uint64_t, uint64_t))*v28 + 5))(v28, v18, v19);
  }
  if ((v20 & 1) == 0)
  {
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Invalid e5backend program.");
    v23->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(v23, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
}

void sub_192207638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::IRValueType *anonymous namespace'::MakeEntryPointIOType(_anonymous_namespace_ *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  uint64_t v3 = a2;
  if (E5Common::Utils::IsTensor((uint64_t)a2))
  {
    uint64_t v6 = MIL::IRValueType::AsTensorType(v3);
    (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 96))(v6);
    uint64_t v56 = 0;
    std::string v57 = 0;
    uint64_t v55 = 0;
    uint64_t v9 = *(const void **)v7;
    uint64_t v8 = *(void *)(v7 + 8);
    int64_t v10 = v8 - *(void *)v7;
    if (v8 != *(void *)v7)
    {
      if (v10 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(v8 - *(void *)v7);
      int v12 = &v11[8 * (v10 >> 3)];
      uint64_t v55 = v11;
      std::string v57 = v12;
      memcpy(v11, v9, v10);
      uint64_t v56 = v12;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 80))(v6);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v53, v13);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    std::__fs::filesystem::path __p = 0;
    uint64_t v14 = v56 - v55;
    if (v56 != v55)
    {
      if (v14 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      long long v15 = (char *)operator new(v56 - v55);
      long long v16 = &v15[8 * (v14 >> 3)];
      std::__fs::filesystem::path __p = v15;
      uint64_t v52 = v16;
      memset_pattern16(v15, &xmmword_192DBFE40, v14 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v51 = v16;
    }
    uint64_t v3 = (MIL::IRValueType *)MIL::IRTensorValueType::MakeWithShape();
    if (__p)
    {
      uint64_t v51 = __p;
      operator delete(__p);
    }
    BOOL v17 = (void **)v54;
    if (v54)
    {
      do
      {
        while (1)
        {
          uint64_t v18 = (void **)*v17;
          uint64_t v19 = (std::__shared_weak_count *)v17[6];
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          if (*((char *)v17 + 39) < 0) {
            break;
          }
          operator delete(v17);
          BOOL v17 = v18;
          if (!v18) {
            goto LABEL_18;
          }
        }
        operator delete(v17[2]);
        operator delete(v17);
        BOOL v17 = v18;
      }
      while (v18);
    }
LABEL_18:
    char v20 = v53[0];
    v53[0] = 0;
    if (!v20) {
      goto LABEL_47;
    }
    goto LABEL_19;
  }
  if (E5Common::Utils::IsTensorBuffer(v3, v5))
  {
    unint64_t v22 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v3);
    uint64_t v23 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v22);
    uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v23);
    uint64_t v56 = 0;
    std::string v57 = 0;
    uint64_t v55 = 0;
    unint64_t v26 = *(const void **)Shape;
    uint64_t v25 = *(void *)(Shape + 8);
    int64_t v27 = v25 - *(void *)Shape;
    if (v25 != *(void *)Shape)
    {
      if (v27 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v28 = (char *)operator new(v25 - *(void *)Shape);
      uint64_t v29 = &v28[8 * (v27 >> 3)];
      uint64_t v55 = v28;
      std::string v57 = v29;
      memcpy(v28, v26, v27);
      uint64_t v56 = v29;
    }
    if (!Espresso::AOT::ShapeHasUnknownDims(&v55)) {
      goto LABEL_47;
    }
    MIL::IRTensorBufferValueType::GetDataType(v23);
    uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v23);
    std::__fs::filesystem::path __p = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    float v32 = *(const void **)Strides;
    uint64_t v31 = *(void *)(Strides + 8);
    int64_t v33 = v31 - *(void *)Strides;
    if (v31 != *(void *)Strides)
    {
      if (v33 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::__fs::filesystem::path __p = operator new(v31 - *(void *)Strides);
      uint64_t v52 = (char *)__p + 8 * (v33 >> 3);
      memcpy(__p, v32, v33);
      uint64_t v51 = v52;
    }
    uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v23);
    unint64_t v47 = 0;
    char v48 = 0;
    long long v49 = 0;
    BOOL v36 = *(const void **)InterleaveFactors;
    uint64_t v35 = *(void *)(InterleaveFactors + 8);
    int64_t v37 = v35 - *(void *)InterleaveFactors;
    if (v35 != *(void *)InterleaveFactors)
    {
      if (v37 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v47 = operator new(v35 - *(void *)InterleaveFactors);
      long long v49 = (char *)v47 + 8 * (v37 >> 3);
      memcpy(v47, v36, v37);
      char v48 = v49;
    }
    uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v23);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v53, Attributes);
    Espresso::AOT::Make64ByteAlignmentsVec((uint64_t *)&v55, 0, v46);
    uint64_t v3 = (MIL::IRValueType *)MIL::IRTensorBufferValueType::MakeWithShape();
    if (v46[0])
    {
      v46[1] = v46[0];
      operator delete(v46[0]);
    }
    BOOL v39 = (void **)v54;
    if (v54)
    {
      do
      {
        while (1)
        {
          int8x8_t v40 = (void **)*v39;
          unint64_t v41 = (std::__shared_weak_count *)v39[6];
          if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          if (*((char *)v39 + 39) < 0) {
            break;
          }
          operator delete(v39);
          BOOL v39 = v40;
          if (!v40) {
            goto LABEL_41;
          }
        }
        operator delete(v39[2]);
        operator delete(v39);
        BOOL v39 = v40;
      }
      while (v40);
    }
LABEL_41:
    uint8x8_t v42 = v53[0];
    v53[0] = 0;
    if (v42) {
      operator delete(v42);
    }
    if (v47)
    {
      char v48 = v47;
      operator delete(v47);
    }
    char v20 = __p;
    if (!__p) {
      goto LABEL_47;
    }
    uint64_t v51 = __p;
LABEL_19:
    operator delete(v20);
LABEL_47:
    if (v55)
    {
      uint64_t v56 = v55;
      operator delete(v55);
    }
    return v3;
  }
  if ((E5Common::Utils::IsPixelBuffer(v3, v21) & 1) == 0 && !E5Common::Utils::IsState(v3, v43))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRValueType in MakeEntryPointIOType.");
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return v3;
}

void sub_192207BB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_192207BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (a13)
  {
    operator delete(a13);
    uint64_t v21 = a16;
    if (!a16)
    {
LABEL_5:
      unint64_t v22 = *(void **)(v19 - 72);
      if (!v22) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v21 = a16;
    if (!a16) {
      goto LABEL_5;
    }
  }
  operator delete(v21);
  unint64_t v22 = *(void **)(v19 - 72);
  if (!v22) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_6:
  *(void *)(v19 - 64) = v22;
  operator delete(v22);
  goto LABEL_7;
}

void sub_192207C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a19);
  if (!*(void *)(v19 - 72)) {
    JUMPOUT(0x192207C48);
  }
  JUMPOUT(0x192207C40);
}

void sub_192207CAC()
{
  if (!*(void *)(v0 - 72)) {
    JUMPOUT(0x192207C48);
  }
  JUMPOUT(0x192207C40);
}

uint64_t std::__function::__func<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::ValidateAlignmentsAttrForE5Backend(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      uint64_t v6 = *(MIL::IRNamedValueType **)v4;
      uint64_t v7 = *(std::__shared_weak_count **)(v4 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Type = (MIL::IRValueType *)MIL::IRNamedValueType::GetType(v6);
      if (E5Common::Utils::IsTensor((uint64_t)Type))
      {
        uint64_t v9 = MIL::IRValueType::AsTensorType(Type);
        char v36 = 10;
        strcpy((char *)__p, "alignments");
        uint64_t v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v9 + 64))(v9, __p);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (!v10)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Invalid e5backend program: operation output without alignments.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
      }
      if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 128))(v11))
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 120))(__p);
    uint64_t Function = MIL::IRProgram::GetFunction();
    uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Function + 128))(Function);
    long long v15 = v14 + 1;
    long long v16 = (void *)*v14;
    if ((void *)*v14 != v14 + 1)
    {
      do
      {
        if (E5Common::Utils::IsTensor(v16[7]))
        {
          uint64_t v17 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v16[7]);
          char v34 = 10;
          strcpy((char *)v33, "alignments");
          uint64_t v18 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v17 + 64))(v17, v33);
          if (v34 < 0) {
            operator delete(v33[0]);
          }
          if (!v18)
          {
            uint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v29, "Invalid e5backend program: callee input without alignments.");
            v29->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(v29, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
        }
        uint64_t v19 = (void *)v16[1];
        if (v19)
        {
          do
          {
            char v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            char v20 = (void *)v16[2];
            BOOL v21 = *v20 == (void)v16;
            long long v16 = v20;
          }
          while (!v21);
        }
        long long v16 = v20;
      }
      while (v20 != v15);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)Function + 160))(v33, Function);
    unint64_t v22 = (uint64_t *)v33[0];
    uint64_t v23 = (uint64_t *)v33[1];
    if (v33[0] != v33[1])
    {
      do
      {
        uint64_t v24 = (MIL::IRValueType *)*v22;
        if (E5Common::Utils::IsTensor(*v22))
        {
          uint64_t v25 = MIL::IRValueType::AsTensorType(v24);
          char v32 = 10;
          strcpy((char *)v31, "alignments");
          uint64_t v26 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v25 + 64))(v25, v31);
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if (!v26)
          {
            std::string::size_type v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v30, "Invalid e5backend program: callee output without alignments.");
            v30->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
            __cxa_throw(v30, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
          }
        }
        ++v22;
      }
      while (v22 != v23);
      unint64_t v22 = (uint64_t *)v33[0];
    }
    if (v22)
    {
      v33[1] = v22;
      operator delete(v22);
    }
    if (v36 < 0) {
      operator delete(__p[0]);
    }
  }
  return 1;
}

void sub_1922081C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL E5Common::Utils::IsTensor(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1) != 0;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19220842C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192208440(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::AddAlignmentsAttr(uint64_t a1, const void **a2, uint64_t a3)
{
  Espresso::AOT::MakeMILTensorValue(a1, a2);
  strcpy((char *)__p, "alignments");
  char v11 = 10;
  uint64_t v12 = v9;
  if (v9) {
    operator new();
  }
  uint64_t v13 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(a3, (uint64_t)__p, (uint64_t)__p);
  char v5 = v4;
  BOOL v6 = v13;
  if (!v13 || atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (v11 < 0) {
LABEL_6:
  }
    operator delete(__p[0]);
LABEL_7:
  uint64_t result = 0;
  if ((v5 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to insert alignment into the map of existing attributes.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1922085E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1922085FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a9) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (unint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              char v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (std::vector<std::string>::pointer j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  char v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  int64_t v27 = (char *)operator new(0x38uLL);
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)int64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  uint64_t v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v10);
        char v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v41 & v10;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      char v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v3);
  char v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  void *v31 = v44[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192208AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192208ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MakeMILTensorValue(uint64_t a1, const void **a2)
{
  char v4 = *a2;
  unint64_t v3 = a2[1];
  std::__fs::filesystem::path __p = operator new(8uLL);
  void *__p = (v3 - v4) >> 3;
  MIL::IRTensorValueType::Make();
  if (__p) {
    operator delete(__p);
  }
  __pa = 0;
  char v5 = *a2;
  size_t v6 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __pa = operator new(v6);
    memcpy(__pa, v5, v6);
  }
  MIL::IRTensorValueType::MakeUInt64Value();
  if (__pa) {
    operator delete(__pa);
  }
}

void sub_192208BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ValidateShapeOfMILType(uint64_t a1, E5Common::Utils *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  std::__fs::filesystem::path __p = operator new(0x20uLL);
  long long v26 = xmmword_192DAA350;
  strcpy((char *)__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  E5Common::Utils::GetMILShape(a2, v4, &__p);
  char v5 = __p;
  size_t v6 = (void *)v26;
  if (__p != (void *)v26)
  {
    while (1)
    {
      uint64_t v7 = *v5;
      if ((*(unsigned int (**)(void))(*(void *)*v5 + 32))(*v5))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Variadic dims not supported.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7)) {
        goto LABEL_3;
      }
      if (!v27)
      {
        char v15 = Espresso::espresso_os_log_subsystem(0, v8);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_3;
        }
      }
      MIL::Attributes::FlexibleShapeInfo::Make();
      uint64_t EnumeratedShapes = MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(v22);
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes(&v20, v22);
      if (*(void *)(EnumeratedShapes + 24)) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v20 == 0;
      }
      if (v11
        && (uint8x8_t v12 = Espresso::espresso_os_log_subsystem(0, v10), os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)))
      {
        uint64_t v13 = v21;
        if (v21)
        {
LABEL_14:
          if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      else
      {
        uint64_t v13 = v21;
        if (v21) {
          goto LABEL_14;
        }
      }
      uint64_t v14 = v22;
      uint64_t v22 = 0;
      if (v14)
      {
        MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v14);
        MEMORY[0x192FF16B0]();
      }
LABEL_3:
      if (++v5 == v6)
      {
        char v5 = __p;
        break;
      }
    }
  }
  if (v5)
  {
    *(void *)&long long v26 = v5;
    operator delete(v5);
  }
  uint64_t v16 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_192208F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

const void **E5Common::Utils::GetMILShape@<X0>(E5Common::Utils *this@<X0>, const MIL::IRValueType *a2@<X1>, void *a3@<X8>)
{
  WrappedType = this;
  if ((*(uint64_t (**)(E5Common::Utils *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2))
  {
LABEL_8:
    uint64_t v8 = MIL::IRValueType::AsTensorType(WrappedType);
    uint64_t result = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    BOOL v11 = *result;
    unint64_t v10 = result[1];
    int64_t v12 = v10 - (unsigned char *)*result;
    if (v10 == *result) {
      return result;
    }
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    while (1)
    {
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        char v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v5))
        {
          char v15 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
          uint64_t v16 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v15);
          uint64_t result = (const void **)MIL::IRTensorBufferValueType::GetShape(v16);
          a3[1] = 0;
          a3[2] = 0;
          *a3 = 0;
          BOOL v11 = *result;
          unint64_t v10 = result[1];
          int64_t v12 = v10 - (unsigned char *)*result;
          if (v10 == *result) {
            return result;
          }
          if (v12 < 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          goto LABEL_10;
        }
      }
      if (MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType))
      {
        size_t v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(WrappedType);
        if (MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v6)) {
          break;
        }
      }
      if (!MIL::IRValueType::TryCastAsStateType(WrappedType))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported IRValueType in GetMILShape.");
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      uint64_t v7 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(WrappedType);
      WrappedType = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v7);
      if ((*(uint64_t (**)(MIL::IRValueType *))(*(void *)WrappedType + 24))(WrappedType)) {
        goto LABEL_8;
      }
    }
    unint64_t v17 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(WrappedType);
    uint8_t v18 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v17);
    uint64_t result = (const void **)MIL::IRPixelBufferValueType::GetShape(v18);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    BOOL v11 = *result;
    unint64_t v10 = result[1];
    int64_t v12 = v10 - (unsigned char *)*result;
    if (v10 == *result) {
      return result;
    }
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
  }
LABEL_10:
  uint64_t v13 = (char *)operator new(v10 - (unsigned char *)*result);
  *a3 = v13;
  a3[1] = v13;
  uint64_t v14 = &v13[8 * (v12 >> 3)];
  a3[2] = v14;
  uint64_t result = (const void **)memcpy(v13, v11, v12);
  a3[1] = v14;
  return result;
}

void sub_1922091A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1922091CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0,std::allocator<Espresso::AOT::IsFunctionSegmented(MIL::IRProgram const&,std::string const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 128))(v4)) {
    return 1;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 120))(&__p);
  uint64_t Function = MIL::IRProgram::GetFunction();
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)Function + 200))(Function, a1[2]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void))(*(void *)Function + 200))(Function, a1[3]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void))(*(void *)Function + 200))(Function, a1[6]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void))(*(void *)Function + 200))(Function, a1[4]) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void))(*(void *)Function + 200))(Function, a1[5]) & 1) != 0)
  {
    int v7 = 1;
    if ((v10 & 0x80000000) == 0) {
      return v7 != 0;
    }
LABEL_11:
    operator delete(__p);
    return v7 != 0;
  }
  int v7 = 0;
  if (v10 < 0) {
    goto LABEL_11;
  }
  return v7 != 0;
}

void sub_1922093F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::operator()()
{
  strcpy((char *)__p, "function");
  MIL::IRObject::GetAttribute();
  MIL::IRValue::GetScalar<std::string>();
}

void sub_192209488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>::~meta_texarray_kernel(void **a1)
{
  *a1 = &unk_1EE374598;
  id v2 = a1 + 58;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  Espresso::MPSEngine::activation_kernel::~activation_kernel((Espresso::MPSEngine::activation_kernel *)a1);
}

{
  void **v2;
  uint64_t vars8;

  *a1 = &unk_1EE374598;
  id v2 = a1 + 58;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  id v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::MPSEngine::activation_kernel::~activation_kernel((Espresso::MPSEngine::activation_kernel *)a1);

  JUMPOUT(0x192FF16B0);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>::~meta_texarray_kernel(uint64_t a1)
{
  *(void *)a1 = &unk_1EE375950;
  uint64_t v3 = (void **)(a1 + 400);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);

  id v2 = *(std::__shared_weak_count **)(a1 + 352);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  std::__shared_weak_count *v2;
  void **v3;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE375950;
  uint64_t v3 = (void **)(a1 + 400);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 376);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);

  id v2 = *(std::__shared_weak_count **)(a1 + 352);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);

  JUMPOUT(0x192FF16B0);
}

void std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  id v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        size_t v6 = v4;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t e5rt_e5_compiler_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392B98;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_19220972C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE394BF0;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192209828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE394B70;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192209924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_create(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE392A98;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192209A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    __int16 v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3) << 8);
    uint64_t v8 = *(char **)(a1 + 120);
    unint64_t v7 = *(void *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      unint64_t v9 = (char **)(a1 + 112);
      char v10 = *(char **)(a1 + 112);
      uint64_t v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        uint64_t v12 = v11 >> 1;
        unint64_t v13 = v7 - (void)v10;
        if (v13 <= (v11 >> 1) + 1) {
          unint64_t v14 = v12 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v15 = v14;
        }
        if (!v15)
        {
          uint64_t v16 = 0;
          unint64_t v17 = (_WORD *)(2 * v12);
          uint8_t v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          uint64_t v19 = 2 * v12 + 2;
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E) {
            goto LABEL_71;
          }
          if (v8 - v16 - (v11 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
            goto LABEL_71;
          }
          uint64_t v31 = (v30 >> 1) + 1;
          unint64_t v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          BOOL v33 = &v8[-v32];
          unint64_t v17 = (_WORD *)((char *)v17 - v32);
          unint64_t v34 = &v16[2 * v12 - 16];
          unint64_t v35 = v8 - 16;
          unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            _OWORD *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          uint64_t v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              __int16 v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--unint64_t v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          uint64_t v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          uint64_t v16 = operator new(2 * v15);
          unint64_t v17 = &v16[2 * v12];
          uint8_t v18 = &v16[2 * v15];
          *unint64_t v17 = v6;
          uint64_t v19 = (uint64_t)(v17 + 1);
          uint64_t v20 = (char *)(v8 - v10);
          if (v8 == v10) {
            goto LABEL_64;
          }
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)uint64_t v8 = v6;
    uint64_t v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  unint64_t v9 = (char **)(a1 + 112);
  __int16 v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  uint64_t v8 = *(char **)(a1 + 120);
  unint64_t v21 = *(void *)(a1 + 128);
  if (*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21) {
      goto LABEL_28;
    }
    uint64_t v22 = *v9;
    uint64_t v23 = v8 - *v9;
    if (v23 <= -3) {
      goto LABEL_67;
    }
    uint64_t v24 = v23 >> 1;
    unint64_t v25 = v21 - (void)v22;
    if (v25 <= (v23 >> 1) + 1) {
      unint64_t v26 = v24 + 1;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 < 0) {
        goto LABEL_68;
      }
      uint64_t v28 = operator new(2 * v27);
      unint64_t v17 = &v28[2 * v24];
      uint8_t v18 = &v28[2 * v27];
      *unint64_t v17 = v6;
      uint64_t v19 = (uint64_t)(v17 + 1);
      float v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v28 = 0;
      unint64_t v17 = (_WORD *)(2 * v24);
      uint8_t v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      uint64_t v19 = 2 * v24 + 2;
      float v29 = (char *)(v8 - v22);
      if (v8 == v22) {
        goto LABEL_64;
      }
    }
    unint64_t v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E) {
      goto LABEL_72;
    }
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_72;
    }
    uint64_t v48 = (v47 >> 1) + 1;
    unint64_t v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v50 = &v8[-v49];
    unint64_t v17 = (_WORD *)((char *)v17 - v49);
    uint64_t v51 = &v28[2 * v24 - 16];
    uint64_t v52 = v8 - 16;
    unint64_t v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *uint64_t v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    uint64_t v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        __int16 v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--unint64_t v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21) {
    goto LABEL_28;
  }
  uint8x8_t v39 = *v9;
  uint64_t v40 = v8 - *v9;
  if (v40 <= -3) {
    goto LABEL_67;
  }
  uint64_t v41 = v40 >> 1;
  unint64_t v42 = v21 - (void)v39;
  if (v42 <= (v40 >> 1) + 1) {
    unint64_t v43 = v41 + 1;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v42 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v44 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v44 = v43;
  }
  if (!v44)
  {
    char v45 = 0;
    unint64_t v17 = (_WORD *)(2 * v41);
    uint8_t v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    uint64_t v19 = 2 * v41 + 2;
    unint64_t v46 = (char *)(v8 - v39);
    if (v8 == v39) {
      goto LABEL_64;
    }
    goto LABEL_57;
  }
  if (v44 < 0) {
    goto LABEL_68;
  }
  char v45 = operator new(2 * v44);
  unint64_t v17 = &v45[2 * v41];
  uint8_t v18 = &v45[2 * v44];
  *unint64_t v17 = v6;
  uint64_t v19 = (uint64_t)(v17 + 1);
  unint64_t v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    unint64_t v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E) {
      goto LABEL_73;
    }
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20) {
      goto LABEL_73;
    }
    uint64_t v57 = (v56 >> 1) + 1;
    unint64_t v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v59 = &v8[-v58];
    unint64_t v17 = (_WORD *)((char *)v17 - v58);
    int v60 = &v45[2 * v41 - 16];
    unint64_t v61 = v8 - 16;
    unint64_t v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *int v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    uint64_t v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        __int16 v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--unint64_t v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v19;
  *(void *)(a1 + 128) = v18;
  if (v8) {
    operator delete(v8);
  }
LABEL_66:
  *(void *)(a1 + 120) = v19;
}

void nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(uint64_t *a1, uint64_t *a2, float a3, double a4, int8x16_t a5, double a6, int8x16_t a7)
{
  unint64_t v9 = (unint64_t *)a1[2];
  uint64_t v8 = (char *)a1[3];
  unint64_t v10 = (v8 - (char *)v9) >> 3;
  uint64_t v11 = (void *)a2[2];
  if (v10 != (a2[3] - (uint64_t)v11) >> 3) {
    goto LABEL_13;
  }
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v12 = v10 <= 1 ? 1 : (v8 - (char *)v9) >> 3;
  if (*v9 != *v11) {
    goto LABEL_13;
  }
  uint64_t v13 = 1;
  do
  {
    unint64_t v14 = v13;
    if (v12 == v13) {
      break;
    }
    unint64_t v15 = v9[v13];
    uint64_t v16 = v11[v13++];
  }
  while (v15 == v16);
  if (v14 < v10) {
LABEL_13:
  }
    nitro::ndarray<float>::pairwise_element_visitor<unsigned char,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1}>(nitro::ndarray<unsigned char> const&,nitro::ndarray<float>& nitro::ndarray<float>::assign<unsigned char>(nitro::ndarray<unsigned char> const&)::{lambda(float &,unsigned char const&)#1})::{lambda(void)#1}::operator()();
  size_t v17 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    return;
  }
  uint64_t v18 = *a1;
  if (!*a1) {
    return;
  }
  if (v17 - 8 < 8)
  {
    uint64_t v19 = 1;
    uint64_t v20 = (unint64_t *)a1[2];
    do
    {
LABEL_20:
      uint64_t v26 = *v20++;
      v19 *= v26;
    }
    while (v20 != (unint64_t *)v8);
    goto LABEL_21;
  }
  unint64_t v21 = ((v17 - 8) >> 3) + 1;
  uint64_t v20 = &v9[v21 & 0x3FFFFFFFFFFFFFFELL];
  uint64_t v22 = v9 + 1;
  uint64_t v23 = 1;
  uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFELL;
  uint64_t v25 = 1;
  do
  {
    v23 *= *(v22 - 1);
    v25 *= *v22;
    v22 += 2;
    v24 -= 2;
  }
  while (v24);
  uint64_t v19 = v25 * v23;
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFELL)) {
    goto LABEL_20;
  }
LABEL_21:
  if (!v19) {
    return;
  }
  uint64_t v27 = (uint64_t)v17 >> 3;
  if ((uint64_t)v17 >> 3 == 3)
  {
    unint64_t v188 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v82 = 0;
    uint64_t v83 = a2[8];
    uint64_t v84 = a1[8];
    unint64_t v85 = v9[1];
    unint64_t v86 = (uint64_t *)a1[5];
    size_t v184 = (uint64_t *)a2[5];
    uint64_t v186 = *v184;
    uint64_t v187 = *v86;
    uint64_t v190 = 4 * *v86;
    uint64_t v183 = 4 * v84;
    uint64_t v87 = v18 + 4 * v84;
    uint64_t v185 = v84;
    while (!v85)
    {
LABEL_64:
      v84 += v187;
      v83 += v186;
      ++v82;
      v87 += v190;
      if (v82 == v188) {
        return;
      }
    }
    uint64_t v88 = 0;
    uint64_t v89 = v183 + v190 * v82;
    unint64_t v90 = v9[2];
    uint64_t v91 = *a2;
    uint64_t v92 = a2[5];
    uint64_t v93 = v86[1];
    uint64_t v94 = 4 * v93;
    uint64_t v95 = v190 * v82 + 4 * (v185 + v90);
    uint64_t v96 = v184[1];
    uint64_t v97 = v90 + v83;
    unint64_t v192 = v90 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v193 = v90 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v189 = v82;
    uint64_t v98 = v87;
    uint64_t v99 = *a2;
    uint64_t v100 = v83;
    uint64_t v101 = v84;
    while (!v90)
    {
LABEL_67:
      v101 += v93;
      v100 += v96;
      ++v88;
      v99 += v96;
      v98 += v94;
      if (v88 == v85) {
        goto LABEL_64;
      }
    }
    uint64_t v102 = v86[2];
    uint64_t v103 = *(void *)(v92 + 16);
    if (v90 < 8
      || (v102 == 1 ? (BOOL v104 = v103 == 1) : (BOOL v104 = 0),
          !v104
       || (v18 + v89 + v94 * v88 < (unint64_t)(v91 + v97 + v96 * v88)
         ? (BOOL v105 = v91 + v100 >= (unint64_t)(v18 + v95 + v94 * v88))
         : (BOOL v105 = 1),
           !v105)))
    {
      unint64_t v121 = 0;
      uint64_t v114 = v100;
      uint64_t v118 = v101;
      goto LABEL_87;
    }
    if (v90 >= 0x10)
    {
      uint64_t v126 = v98;
      uint64_t v127 = v99;
      unint64_t v128 = v90 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v129 = *(int8x16_t *)(v127 + v83);
        uint32x4_t v130 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD410);
        uint32x4_t v131 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD400);
        uint32x4_t v132 = (uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3F0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v129, (int8x16_t)xmmword_192DAD3E0));
        *(float32x4_t *)(v126 + 32) = vcvtq_f32_u32(v131);
        *(float32x4_t *)(v126 + 48) = vcvtq_f32_u32(v130);
        *(int8x16_t *)uint64_t v126 = a7;
        *(float32x4_t *)(v126 + 16) = vcvtq_f32_u32(v132);
        v126 += 64;
        v127 += 16;
        v128 -= 16;
      }
      while (v128);
      if (v90 == v193) {
        goto LABEL_67;
      }
      unint64_t v106 = v90 & 0xFFFFFFFFFFFFFFF0;
      if ((v90 & 8) == 0)
      {
        uint64_t v118 = v101 + v193 * v102;
        unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v114 = v100 + v193 * v103;
LABEL_87:
        unint64_t v122 = v90 - v121;
        std::string v123 = (unsigned __int8 *)(v91 + v114);
        uint64_t v124 = 4 * v102;
        int v125 = (_DWORD *)(v18 + 4 * v118);
        do
        {
          a7.i8[0] = *v123;
          *(float *)a7.i32 = (float)a7.u32[0];
          _DWORD *v125 = a7.i32[0];
          v123 += v103;
          int v125 = (_DWORD *)((char *)v125 + v124);
          --v122;
        }
        while (v122);
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v106 = 0;
    }
    uint64_t v107 = v84;
    uint64_t v108 = v87;
    uint64_t v109 = v97;
    v110 = v9;
    uint64_t v111 = v18;
    uint64_t v112 = v95;
    uint64_t v113 = v89;
    uint64_t v114 = v100 + v192 * v103;
    unint64_t v115 = v106 - (v90 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v116 = v83 + v106;
    uint64_t v117 = 4 * v106;
    uint64_t v118 = v101 + v192 * v102;
    do
    {
      uint64_t v119 = v98 + v117;
      a7.i64[0] = *(void *)(v99 + v116);
      uint32x4_t v120 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0));
      *(int8x16_t *)uint64_t v119 = a7;
      *(float32x4_t *)(v119 + 16) = vcvtq_f32_u32(v120);
      v116 += 8;
      v117 += 32;
      v115 += 8;
    }
    while (v115);
    unint64_t v121 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v89 = v113;
    uint64_t v95 = v112;
    uint64_t v18 = v111;
    unint64_t v9 = v110;
    uint64_t v97 = v109;
    uint64_t v87 = v108;
    uint64_t v84 = v107;
    uint64_t v82 = v189;
    if (v90 == v192) {
      goto LABEL_67;
    }
    goto LABEL_87;
  }
  if (v27 == 2)
  {
    unint64_t v41 = *v9;
    if (!*v9) {
      return;
    }
    uint64_t v42 = 0;
    uint64_t v43 = a2[8];
    uint64_t v44 = a1[8];
    unint64_t v45 = v9[1];
    uint64_t v46 = *a2;
    unint64_t v47 = (uint64_t *)a2[5];
    uint64_t v48 = (uint64_t *)a1[5];
    uint64_t v49 = *v48;
    uint64_t v50 = *v47;
    uint64_t v51 = 4 * *v48;
    uint64_t v52 = v43 + v45;
    unint64_t v53 = v45 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v54 = v45 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v55 = v18 + 4 * v44;
    uint64_t v56 = v18 + 4 * (v44 + v45);
    uint64_t v57 = v55;
    while (!v45)
    {
LABEL_34:
      v44 += v49;
      v43 += v50;
      ++v42;
      v57 += v51;
      if (v42 == v41) {
        return;
      }
    }
    uint64_t v58 = v48[1];
    uint64_t v59 = v47[1];
    if (v45 < 8
      || (v58 == 1 ? (BOOL v60 = v59 == 1) : (BOOL v60 = 0),
          !v60
       || (v55 + v51 * v42 < (unint64_t)(v46 + v52 + v50 * v42)
         ? (BOOL v61 = v46 + v43 >= (unint64_t)(v56 + v51 * v42))
         : (BOOL v61 = 1),
           !v61)))
    {
      unint64_t v70 = 0;
      uint64_t v63 = v43;
      uint64_t v67 = v44;
      goto LABEL_54;
    }
    if (v45 >= 0x10)
    {
      uint64_t v75 = v57;
      uint64_t v76 = v46;
      unint64_t v77 = v45 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v78 = *(int8x16_t *)(v76 + v43);
        uint32x4_t v79 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD410);
        uint32x4_t v80 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD400);
        uint32x4_t v81 = (uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3F0);
        a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_192DAD3E0));
        *(float32x4_t *)(v75 + 32) = vcvtq_f32_u32(v80);
        *(float32x4_t *)(v75 + 48) = vcvtq_f32_u32(v79);
        *(int8x16_t *)uint64_t v75 = a7;
        *(float32x4_t *)(v75 + 16) = vcvtq_f32_u32(v81);
        v75 += 64;
        v76 += 16;
        v77 -= 16;
      }
      while (v77);
      if (v45 == v53) {
        goto LABEL_34;
      }
      unint64_t v62 = v45 & 0xFFFFFFFFFFFFFFF0;
      if ((v45 & 8) == 0)
      {
        uint64_t v67 = v44 + v53 * v58;
        unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF0;
        uint64_t v63 = v43 + v53 * v59;
LABEL_54:
        unint64_t v71 = v45 - v70;
        unint64_t v72 = (unsigned __int8 *)(v46 + v63);
        uint64_t v73 = 4 * v58;
        long long v74 = (_DWORD *)(v18 + 4 * v67);
        do
        {
          a7.i8[0] = *v72;
          *(float *)a7.i32 = (float)a7.u32[0];
          *long long v74 = a7.i32[0];
          v72 += v59;
          long long v74 = (_DWORD *)((char *)v74 + v73);
          --v71;
        }
        while (v71);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v62 = 0;
    }
    uint64_t v63 = v43 + v54 * v59;
    unint64_t v64 = v62 - (v45 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v65 = v46 + v62;
    uint64_t v66 = 4 * v62;
    uint64_t v67 = v44 + v54 * v58;
    do
    {
      uint64_t v68 = v57 + v66;
      a7.i64[0] = *(void *)(v65 + v43);
      uint32x4_t v69 = (uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3F0);
      a7 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_192DAD3E0));
      *(int8x16_t *)uint64_t v68 = a7;
      *(float32x4_t *)(v68 + 16) = vcvtq_f32_u32(v69);
      v65 += 8;
      v66 += 32;
      v64 += 8;
    }
    while (v64);
    unint64_t v70 = v45 & 0xFFFFFFFFFFFFFFF8;
    if (v45 == v54) {
      goto LABEL_34;
    }
    goto LABEL_54;
  }
  if (v27 != 1)
  {
    if ((v17 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v133 = operator new(v17);
    bzero(v133, v17 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v135 = *a2;
    if (v17 >> 3 <= 1) {
      unint64_t v136 = 1;
    }
    else {
      unint64_t v136 = v17 >> 3;
    }
    uint64_t v137 = a2[5];
    uint64_t v138 = a2[8];
    uint64_t v139 = v136 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v140 = a1[5];
    while (v136 >= 2)
    {
      uint64_t v143 = 0;
      uint64_t v144 = 0;
      uint64_t v145 = v136 & 0x1FFFFFFFFFFFFFFELL;
      unsigned int v146 = (void *)(v140 + 8);
      __n128 v147 = v133 + 1;
      do
      {
        v143 += *(v146 - 1) * *(v147 - 1);
        v144 += *v146 * *v147;
        v147 += 2;
        v146 += 2;
        v145 -= 2;
      }
      while (v145);
      uint64_t v141 = v144 + v143;
      uint64_t v142 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_105;
      }
LABEL_107:
      if (v136 < 2)
      {
        uint64_t v155 = 0;
        uint64_t v156 = 0;
LABEL_112:
        unint64_t v162 = v136 - v156;
        uint64_t v163 = v156;
        uint64_t v164 = (uint64_t *)(v137 + 8 * v156);
        v165 = &v133[v163];
        do
        {
          uint64_t v167 = *v165++;
          uint64_t v166 = v167;
          uint64_t v168 = *v164++;
          v155 += v168 * v166;
          --v162;
        }
        while (v162);
        goto LABEL_114;
      }
      uint64_t v157 = 0;
      uint64_t v158 = 0;
      uint64_t v159 = v136 & 0x1FFFFFFFFFFFFFFELL;
      long long v160 = (void *)(v137 + 8);
      uint64_t v161 = v133 + 1;
      do
      {
        v157 += *(v160 - 1) * *(v161 - 1);
        v158 += *v160 * *v161;
        v161 += 2;
        v160 += 2;
        v159 -= 2;
      }
      while (v159);
      uint64_t v155 = v158 + v157;
      uint64_t v156 = v136 & 0x1FFFFFFFFFFFFFFELL;
      if (v136 != v139) {
        goto LABEL_112;
      }
LABEL_114:
      LOBYTE(v134) = *(unsigned char *)(v135 + v138 + v155);
      float v134 = (float)LODWORD(v134);
      *(float *)(v18 + 4 * v141) = v134;
      if ((int)(v17 >> 3) >= 1)
      {
        uint64_t v169 = (v17 >> 3) + 1;
        int v170 = v17 >> 3;
        while (1)
        {
          uint64_t v171 = (v169 - 2);
          unint64_t v172 = v133[v171] + 1;
          v133[v171] = v172;
          if (v172 < v9[v171]) {
            break;
          }
          v133[(v169 - 2)] = 0;
          --v170;
          if ((unint64_t)--v169 <= 1) {
            goto LABEL_120;
          }
        }
        if (v170 > 0) {
          continue;
        }
      }
LABEL_120:
      operator delete(v133);
      return;
    }
    uint64_t v141 = 0;
    uint64_t v142 = 0;
LABEL_105:
    unint64_t v148 = v136 - v142;
    uint64_t v149 = v142;
    uint64_t v150 = (uint64_t *)(v140 + 8 * v142);
    char v151 = &v133[v149];
    do
    {
      uint64_t v153 = *v151++;
      uint64_t v152 = v153;
      uint64_t v154 = *v150++;
      v141 += v154 * v152;
      --v148;
    }
    while (v148);
    goto LABEL_107;
  }
  unint64_t v28 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v29 = a2[8];
  uint64_t v30 = a1[8];
  uint64_t v31 = *a2;
  uint64_t v32 = *(void *)a1[5];
  uint64_t v33 = *(void *)a2[5];
  if (v28 < 8) {
    goto LABEL_27;
  }
  unint64_t v34 = 0;
  if (v32 != 1 || v33 != 1) {
    goto LABEL_28;
  }
  if (v18 + 4 * v30 < v31 + v28 + v29 && v31 + v29 < v18 + 4 * (v28 + v30))
  {
LABEL_27:
    unint64_t v34 = 0;
LABEL_28:
    uint64_t v35 = a2[8];
    uint64_t v36 = a1[8];
    goto LABEL_29;
  }
  if (v28 >= 0x10)
  {
    unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v179 = (int8x16_t *)(v31 + v29);
    uint64_t v180 = (float32x4_t *)(v18 + 4 * v30);
    a3 = NAN;
    a5.i64[1] = 0xFFFFFF07FFFFFF06;
    unint64_t v181 = v28 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int8x16_t v182 = *v179++;
      v180[2] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD400));
      v180[3] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD410));
      *uint64_t v180 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD3E0));
      v180[1] = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v182, (int8x16_t)xmmword_192DAD3F0));
      v180 += 4;
      v181 -= 16;
    }
    while (v181);
    if (v28 == v34) {
      return;
    }
    if ((v28 & 8) == 0)
    {
      uint64_t v36 = v30 + v34;
      uint64_t v35 = v29 + v34;
LABEL_29:
      unint64_t v37 = v28 - v34;
      __int16 v38 = (unsigned char *)(v31 + v35);
      uint64_t v39 = 4 * v32;
      uint64_t v40 = (float *)(v18 + 4 * v36);
      do
      {
        LOBYTE(a3) = *v38;
        a3 = (float)LODWORD(a3);
        *uint64_t v40 = a3;
        v38 += v33;
        uint64_t v40 = (float *)((char *)v40 + v39);
        --v37;
      }
      while (v37);
      return;
    }
  }
  else
  {
    unint64_t v34 = 0;
  }
  unint64_t v173 = v34;
  unint64_t v34 = v28 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = v29 + (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v30 + (v28 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v174 = v173 - (v28 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v175 = (unint64_t *)(v31 + v173 + v29);
  uint64_t v176 = v18 + 4 * (v173 + v30);
  a3 = NAN;
  do
  {
    unint64_t v177 = *v175++;
    a5.i64[0] = v177;
    uint32x4_t v178 = (uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3F0);
    a5 = (int8x16_t)vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_192DAD3E0));
    *(int8x16_t *)uint64_t v176 = a5;
    *(float32x4_t *)(v176 + 16) = vcvtq_f32_u32(v178);
    v176 += 32;
    v174 += 8;
  }
  while (v174);
  if (v28 != v34) {
    goto LABEL_29;
  }
}

void sub_19220A784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::operator-<unsigned char>(void *a1, void *a2)
{
  unsigned __int8 v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  size_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  uint64_t v8 = (char *)a2[2];
  unint64_t v9 = (char *)a2[3];
  uint64_t v10 = (v9 - v8) >> 3;
  if (v7 != v10) {
    goto LABEL_11;
  }
  if (v4 != v5)
  {
    uint64_t v11 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
    if (*(void *)v5 != *(void *)v8) {
      goto LABEL_11;
    }
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      if (v11 == v12) {
        break;
      }
      uint64_t v14 = *(void *)&v5[8 * v12];
      uint64_t v15 = *(void *)&v8[8 * v12++];
    }
    while (v14 == v15);
    if (v13 < v7)
    {
LABEL_11:
      __int16 v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (v4 != v5)
      {
        if ((v6 & 0x8000000000000000) != 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        __int16 v38 = (char *)operator new(v4 - v5);
        uint64_t v40 = &v38[8 * v7];
        memcpy(v38, v5, v6);
        uint64_t v39 = v40;
      }
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      size_t v17 = (unsigned char *)a1[5];
      uint64_t v16 = (unsigned char *)a1[6];
      int64_t v18 = v16 - v17;
      if (v16 != v17)
      {
        if (v18 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = (char *)operator new(v16 - v17);
        uint64_t v20 = &v19[8 * (v18 >> 3)];
        uint64_t v35 = v19;
        unint64_t v37 = v20;
        memcpy(v19, v17, v18);
        uint64_t v36 = v20;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (v9 != v8)
      {
        if (v9 - v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = (char *)operator new(v9 - v8);
        uint64_t v22 = &v21[8 * v10];
        uint64_t v32 = v21;
        unint64_t v34 = v22;
        memcpy(v21, v8, v9 - v8);
        uint64_t v33 = v22;
      }
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v24 = (unsigned char *)a2[5];
      uint64_t v23 = (unsigned char *)a2[6];
      int64_t v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = (char *)operator new(v23 - v24);
        uint64_t v27 = &v26[8 * (v25 >> 3)];
        uint64_t v29 = v26;
        uint64_t v31 = v27;
        memcpy(v26, v24, v25);
        uint64_t v30 = v27;
      }
      nitro::ndarray_impl::compute_broadcast((const void **)&v38, (const void **)&v35, (uint64_t)&v32, (uint64_t)&v29);
      nitro::ndarray<float>::ndarray(&v28, a1, (uint64_t)&v38, (uint64_t)&v35, 0);
      nitro::ndarray<float>::copy(&v28);
    }
  }
  nitro::ndarray<float>::copy(a1);
}

void sub_19220AB08(_Unwind_Exception *a1)
{
  nitro::ndarray<float>::~ndarray(v1);
  _Unwind_Resume(a1);
}

void sub_19220AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  nitro::ndarray<float>::~ndarray(&a9);
  nitro::ndarray<float>::~ndarray(v25);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
    uint64_t v28 = a21;
    if (!a21)
    {
LABEL_3:
      uint64_t v29 = a24;
      if (!a24) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = a21;
    if (!a21) {
      goto LABEL_3;
    }
  }
  a22 = (uint64_t)v28;
  operator delete(v28);
  uint64_t v29 = a24;
  if (!a24)
  {
LABEL_4:
    uint64_t v30 = *(void **)(v26 - 112);
    if (!v30) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  a25 = (uint64_t)v29;
  operator delete(v29);
  uint64_t v30 = *(void **)(v26 - 112);
  if (!v30) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_5:
  *(void *)(v26 - 104) = v30;
  operator delete(v30);
  goto LABEL_6;
}

void sub_19220ABB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a21) {
    JUMPOUT(0x19220AB94);
  }
  JUMPOUT(0x19220AB64);
}

void sub_19220ABC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a24) {
    JUMPOUT(0x19220ABA4);
  }
  JUMPOUT(0x19220AB6CLL);
}

void sub_19220ABD8()
{
  if (!*(void *)(v0 - 112)) {
    JUMPOUT(0x19220AB7CLL);
  }
  JUMPOUT(0x19220AB74);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  size_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v46, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          size_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = *((void *)v15 + 1);
            if (v23 == v11)
            {
              uint64_t v24 = v15[39];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = v15[39];
              }
              else {
                uint64_t v25 = *((void *)v15 + 3);
              }
              if (v25 == v17)
              {
                uint64_t v26 = (const void **)(v15 + 16);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    uint64_t v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              unint64_t v21 = (const void **)(v15 + 16);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                for (std::vector<std::string>::pointer j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  unint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v28 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x50uLL);
  v46[0] = v15;
  v46[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v29 = *a4;
  long long v30 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v30;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 2) = 0;
  *(void *)uint64_t v29 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *((void *)v15 + 9) = 0;
  char v47 = 1;
  float v31 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v32 = *(float *)(a1 + 32);
  if (v12 && (float)(v32 * (float)v12) >= v31)
  {
    uint64_t v33 = *(void *)a1;
    unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
    if (v34)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v34;
LABEL_89:
      void *v34 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v35 = 1;
    if (v12 >= 3) {
      BOOL v35 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v36 = v35 | (2 * v12);
    unint64_t v37 = vcvtps_u32_f32(v31 / v32);
    if (v36 <= v37) {
      size_t prime = v37;
    }
    else {
      size_t prime = v36;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v39 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v39) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v39)
    {
      unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v39 < 3uLL || (uint8x8_t v41 = (uint8x8_t)vcnt_s8(v39), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        unint64_t v40 = std::__next_prime(v40);
      }
      else
      {
        uint64_t v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2) {
          unint64_t v40 = v42;
        }
      }
      if (prime <= v40) {
        size_t prime = v40;
      }
      if (prime < *(void *)&v39) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v43 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v33 = *(void *)a1;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v34) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v33 = *(void *)a1;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        if (v34) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v43 & v11;
      uint64_t v33 = *(void *)a1;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v43 & v11));
      if (v34) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v28;
  *uint64_t v28 = v15;
  *(void *)(v33 + 8 * v4) = v28;
  if (*(void *)v15)
  {
    unint64_t v44 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v44 >= v12) {
        v44 %= v12;
      }
    }
    else
    {
      v44 &= v12 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v44);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19220B010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::AOT::AOTCompilerOptionsManager::Impl::OptionSpecification>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t anonymous namespace'::GetVariableTotalSizes(MIL::IRProgram const&,std::string const&)::$_1::operator()(MIL::IRValueType *a1)
{
  if (E5Common::Utils::IsTensor((uint64_t)a1))
  {
    uint64_t v3 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(a1);
    if (MIL::IRTensorValueType::Rank(v3) == 1)
    {
      unint64_t v4 = (void **)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v3 + 96))(v3);
      if ((*(uint64_t (**)(void))(*(void *)**v4 + 24))(**v4)) {
        return -1;
      }
    }
    uint64_t v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v3 + 16))(v3);
    int v14 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v3 + 88))(v3);
    uint64_t v15 = Espresso::AOT::IRDataTypeToByteSize(v14);
    goto LABEL_16;
  }
  if (!E5Common::Utils::IsTensorBuffer(a1, v2)) {
    return 0;
  }
  size_t v6 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a1);
  unint64_t v7 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v6);
  if (MIL::IRTensorBufferValueType::GetRank(v7) == 1)
  {
    uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides(v7);
    if (*(void *)(Strides + 8) == *(void *)Strides) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v9 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(**(MIL::IRProperty ***)Strides);
    uint64_t Int64ScalarValue = MIL::IRConstantProperty::GetInt64ScalarValue(v9);
    if (Int64ScalarValue > 0)
    {
      uint64_t v11 = Int64ScalarValue;
      uint64_t Shape = (void **)MIL::IRTensorBufferValueType::GetShape(v7);
      if ((*(uint64_t (**)(void))(*(void *)**Shape + 24))(**Shape)) {
        return -1;
      }
      goto LABEL_15;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Stride must be positive.");
LABEL_22:
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  if (MIL::IRTensorBufferValueType::GetRank(v7) >= 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Only 0D/1D are supported.");
    goto LABEL_22;
  }
  uint64_t v11 = 1;
LABEL_15:
  uint64_t v15 = (*(uint64_t (**)(MIL::IRTensorBufferValueType *))(*(void *)v7 + 16))(v7) * v11;
  int DataType = MIL::IRTensorBufferValueType::GetDataType(v7);
  uint64_t v13 = Espresso::AOT::IRDataTypeToByteSize(DataType);
LABEL_16:
  uint64_t v17 = v15 * v13 + 126;
  if (v15 * v13 >= -63) {
    uint64_t v17 = v15 * v13 + 63;
  }
  return v17 & 0xFFFFFFFFFFFFFFC0;
}

void sub_19220B2A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19220B2B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *nitro::ndarray<unsigned char>::canonicalize@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  if (!nitro::ndarray<float>::is_canonical(a1))
  {
    if (a1[3] - a1[2] == a1[6] - a1[5]) {
      nitro::ndarray<unsigned char>::ndarray((uint64_t)a2);
    }
    nitro::ndarray<unsigned char>::canonicalize(void)const::{lambda(void)#1}::operator()();
  }

  return nitro::ndarray<unsigned char>::ndarray(a2, a1);
}

void sub_19220B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  nitro::ndarray<float>::~ndarray(v15);
  _Unwind_Resume(a1);
}

BOOL nitro::ndarray<float>::is_canonical(uint64_t *a1)
{
  if (a1[8]) {
    return 0;
  }
  id v2 = (char *)a1[2];
  uint64_t v3 = (char *)a1[3];
  uint64_t v4 = v3 - v2;
  if (v3 == v2)
  {
    unint64_t v7 = (unint64_t *)a1[5];
    goto LABEL_22;
  }
  uint64_t v5 = *a1;
  if (*a1)
  {
    if ((unint64_t)(v4 - 8) < 8)
    {
      uint64_t v5 = 1;
      size_t v6 = (char *)a1[2];
      do
      {
LABEL_11:
        uint64_t v13 = *(void *)v6;
        v6 += 8;
        v5 *= v13;
      }
      while (v6 != v3);
      goto LABEL_12;
    }
    unint64_t v8 = ((unint64_t)(v4 - 8) >> 3) + 1;
    size_t v6 = &v2[8 * (v8 & 0x3FFFFFFFFFFFFFFELL)];
    unint64_t v9 = v2 + 8;
    uint64_t v10 = 1;
    uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFELL;
    uint64_t v12 = 1;
    do
    {
      v10 *= *(v9 - 1);
      v12 *= *v9;
      v9 += 2;
      v11 -= 2;
    }
    while (v11);
    uint64_t v5 = v12 * v10;
    if (v8 != (v8 & 0x3FFFFFFFFFFFFFFELL)) {
      goto LABEL_11;
    }
  }
LABEL_12:
  unint64_t v14 = v4 >> 3;
  unint64_t v7 = (unint64_t *)a1[5];
  if (v14 <= 1) {
    unint64_t v14 = 1;
  }
  if (v14 < 2)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_19:
    unint64_t v22 = v14 - v15;
    uint64_t v23 = 8 * v15;
    uint64_t v24 = (uint64_t *)&v7[v15];
    uint64_t v25 = (uint64_t *)&v2[v23];
    do
    {
      uint64_t v26 = *v25++;
      uint64_t v27 = v26 - 1;
      uint64_t v28 = *v24++;
      v16 += v28 * v27;
      --v22;
    }
    while (v22);
    goto LABEL_21;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v19 = v2 + 8;
  uint64_t v20 = v7 + 1;
  unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v17 += *(v20 - 1) * (*(v19 - 1) - 1);
    v18 += *v20 * (*v19 - 1);
    v19 += 2;
    v20 += 2;
    v21 -= 2;
  }
  while (v21);
  uint64_t v16 = v18 + v17;
  if (v14 != v15) {
    goto LABEL_19;
  }
LABEL_21:
  if (v5 != v16 + 1) {
    return 0;
  }
LABEL_22:
  uint64_t v29 = a1[6] - (void)v7;
  if (!v29) {
    return 1;
  }
  if (!*v7) {
    return 0;
  }
  if ((unint64_t)v29 < 0x10) {
    return 1;
  }
  unint64_t v30 = v29 >> 3;
  uint64_t v31 = 2;
  if (v30 > 2) {
    uint64_t v31 = v30;
  }
  unint64_t v32 = v7[1];
  if (!v32 || *v7 < v32) {
    return 0;
  }
  uint64_t v33 = 0;
  uint64_t v34 = v31 - 2;
  do
  {
    uint64_t v35 = v33;
    if (v34 == v33) {
      break;
    }
    unint64_t v36 = &v7[v33];
    unint64_t v37 = v36[2];
    if (!v37) {
      break;
    }
    unint64_t v38 = v36[1];
    uint64_t v33 = v35 + 1;
  }
  while (v38 >= v37);
  return v35 + 2 >= v30;
}

void nitro::ndarray<unsigned char>::ndarray(uint64_t a1)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  operator new[]();
}

void sub_19220BD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  unint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v5 + 48) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 24) = v10;
    operator delete(v10);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void DG::AddTensorLabel(uint64_t a1, DG *a2, void *a3, void *a4)
{
  id v29 = a3;
  id v7 = a4;
  unint64_t v30 = [v7 objectForKey:@"Shape"];
  uint64_t v28 = [v7 objectForKey:@"Strides"];
  unint64_t v8 = [v7 objectForKey:@"DataType"];
  unint64_t v9 = [v8 objectForKey:@"ComponentDataType"];
  uint64_t v10 = [v8 objectForKey:@"Interleave"];
  uint64_t v11 = [v7 objectForKey:@"Size"];
  unint64_t v12 = [v11 unsignedIntValue];

  uint64_t v13 = sub_192465744(v12);
  unint64_t v14 = NSString;
  unint64_t v15 = DG::ArrAsStr(v30, (NSArray *)1);
  uint64_t v16 = DG::ArrAsStr(v28, 0);
  uint64_t v17 = [v14 stringWithFormat:@"\"%@\ndtype=%@\nshape={%@}\nstrides={%@}\ninterleave=%@\nsize=%@\"", v29, v9, v15, v16, v10, v13];

  DG::Tab(a2);
  if ((v34 & 0x80u) == 0) {
    uint64_t v18 = v33;
  }
  else {
    uint64_t v18 = (void **)v33[0];
  }
  if ((v34 & 0x80u) == 0) {
    uint64_t v19 = v34;
  }
  else {
    uint64_t v19 = (uint64_t)v33[1];
  }
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a1 + 16), (uint64_t)v18, v19);
  unint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"label=", 6);
  id v22 = v17;
  uint64_t v23 = (const char *)[v22 UTF8String];
  size_t v24 = strlen(v23);
  uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);
  DG::NL((DG *)1);
  if ((v32 & 0x80u) == 0) {
    uint64_t v26 = __p;
  }
  else {
    uint64_t v26 = (void **)__p[0];
  }
  if ((v32 & 0x80u) == 0) {
    uint64_t v27 = v32;
  }
  else {
    uint64_t v27 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  if ((char)v32 < 0)
  {
    operator delete(__p[0]);
    if (((char)v34 & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_17:
    operator delete(v33[0]);
    goto LABEL_15;
  }
  if ((char)v34 < 0) {
    goto LABEL_17;
  }
LABEL_15:
}

void sub_19220C03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }

  _Unwind_Resume(a1);
}

id DG::ArrAsStr(DG *this, NSArray *a2)
{
  char v2 = (char)a2;
  uint64_t v3 = this;
  uint64_t v4 = [(DG *)v3 count];
  uint64_t v5 = [MEMORY[0x1E4F28E78] string];
  if (v4)
  {
    unint64_t v6 = v4 - 1;
    unint64_t v7 = 0;
    if (v2)
    {
      do
      {
        unint64_t v8 = [(DG *)v3 objectAtIndexedSubscript:v7];
        if ([v8 isEqual:&unk_1EE3AED58])
        {

          unint64_t v8 = &unk_1EE3AED88;
        }
        unint64_t v9 = [NSString stringWithFormat:@"%@", v8];
        [v5 appendString:v9];

        if (v7 < v6) {
          [v5 appendString:@","];
        }

        ++v7;
      }
      while (v4 != v7);
    }
    else
    {
      do
      {
        uint64_t v10 = [(DG *)v3 objectAtIndexedSubscript:v7];
        if ([v10 isEqual:&unk_1EE3AED70])
        {

          uint64_t v10 = &unk_1EE3AED88;
        }
        uint64_t v11 = [NSString stringWithFormat:@"%@", v10];
        [v5 appendString:v11];

        if (v7 < v6) {
          [v5 appendString:@","];
        }

        ++v7;
      }
      while (v4 != v7);
    }
  }

  return v5;
}

void sub_19220C2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19220C2F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19220C308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19220C33C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19220C350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19220C368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray<unsigned char>::operator==<float>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      uint64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              unsigned int v32 = *(unsigned __int8 *)(v16 + a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            unint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            unsigned int v32 = *(unsigned __int8 *)(v16 + a1[8] + v34);
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            unint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            float v61 = *(float *)(v26 + 4 * (v29 + v31));
            BOOL v15 = v61 == (float)v32;
            if ((int)(v6 >> 3) >= 1 && v61 == (float)v32)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          unint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          unint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      uint64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19220C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray<half>::operator==<half>(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v5 = (char *)a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v6 = v4 - v5;
  unint64_t v7 = (v4 - v5) >> 3;
  unint64_t v8 = (void *)a2[2];
  if (v7 != (a2[3] - (uint64_t)v8) >> 3) {
    return 0;
  }
  int64_t v9 = v4 - v5;
  if (v4 == v5) {
    return 1;
  }
  uint64_t v10 = v7 <= 1 ? 1 : (v4 - v5) >> 3;
  if (*(void *)v5 != *v8) {
    return 0;
  }
  uint64_t v11 = 1;
  do
  {
    unint64_t v12 = v11;
    if (v10 == v11) {
      break;
    }
    uint64_t v13 = *(void *)&v5[8 * v11];
    uint64_t v14 = v8[v11++];
  }
  while (v13 == v14);
  BOOL v15 = v12 >= v7;
  if (v12 >= v7)
  {
    uint64_t v16 = *a1;
    if (!*a1) {
      return 1;
    }
    if ((unint64_t)(v9 - 8) >= 8)
    {
      unint64_t v19 = ((unint64_t)(v9 - 8) >> 3) + 1;
      uint64_t v18 = &v5[8 * (v19 & 0x3FFFFFFFFFFFFFFELL)];
      uint64_t v20 = v5 + 8;
      uint64_t v21 = 1;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v23 = 1;
      do
      {
        v21 *= *(v20 - 1);
        v23 *= *v20;
        v20 += 2;
        v22 -= 2;
      }
      while (v22);
      uint64_t v17 = v23 * v21;
      if (v19 == (v19 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_20:
        if (v17)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = operator new(v4 - v5);
          bzero(v25, v6 & 0xFFFFFFFFFFFFFFF8);
          uint64_t v26 = *a2;
          if (v6 >> 3 <= 1) {
            unint64_t v27 = 1;
          }
          else {
            unint64_t v27 = v6 >> 3;
          }
          uint64_t v28 = a2[5];
          uint64_t v29 = a2[8];
          uint64_t v30 = v27 & 0x1FFFFFFFFFFFFFFELL;
          while (1)
          {
            if (v6 <= 7)
            {
              uint64_t v31 = 0;
              short float v32 = *(short float *)(v16 + 2 * a1[8]);
              goto LABEL_42;
            }
            uint64_t v33 = a1[5];
            if (v27 < 2) {
              break;
            }
            uint64_t v36 = 0;
            uint64_t v37 = 0;
            unint64_t v38 = (void *)(v33 + 8);
            uint64_t v39 = v27 & 0x1FFFFFFFFFFFFFFELL;
            unint64_t v40 = v25 + 1;
            do
            {
              v36 += *(v38 - 1) * *(v40 - 1);
              v37 += *v38 * *v40;
              v40 += 2;
              v38 += 2;
              v39 -= 2;
            }
            while (v39);
            uint64_t v34 = v37 + v36;
            uint64_t v35 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_33;
            }
LABEL_35:
            short float v32 = *(short float *)(v16 + 2 * (a1[8] + v34));
            if (v27 < 2)
            {
              uint64_t v31 = 0;
              uint64_t v48 = 0;
LABEL_40:
              unint64_t v54 = v27 - v48;
              uint64_t v55 = v48;
              uint64_t v56 = (uint64_t *)(v28 + 8 * v48);
              uint64_t v57 = &v25[v55];
              do
              {
                uint64_t v59 = *v57++;
                uint64_t v58 = v59;
                uint64_t v60 = *v56++;
                v31 += v60 * v58;
                --v54;
              }
              while (v54);
              goto LABEL_42;
            }
            uint64_t v49 = 0;
            uint64_t v50 = 0;
            uint64_t v51 = v27 & 0x1FFFFFFFFFFFFFFELL;
            uint64_t v52 = (void *)(v28 + 8);
            unint64_t v53 = v25 + 1;
            do
            {
              v49 += *(v52 - 1) * *(v53 - 1);
              v50 += *v52 * *v53;
              v53 += 2;
              v52 += 2;
              v51 -= 2;
            }
            while (v51);
            uint64_t v31 = v50 + v49;
            uint64_t v48 = v27 & 0x1FFFFFFFFFFFFFFELL;
            if (v27 != v30) {
              goto LABEL_40;
            }
LABEL_42:
            short float v61 = *(short float *)(v26 + 2 * (v29 + v31));
            BOOL v15 = v32 == v61;
            if ((int)(v6 >> 3) >= 1 && v32 == v61)
            {
              uint64_t v62 = (v6 >> 3) + 1;
              unint64_t v63 = v6 >> 3;
              while (1)
              {
                uint64_t v64 = (v62 - 2);
                unint64_t v65 = v25[v64] + 1;
                v25[v64] = v65;
                if (v65 < *(void *)&v5[v64 * 8]) {
                  break;
                }
                v25[(v62 - 2)] = 0;
                LODWORD(v63) = v63 - 1;
                if ((unint64_t)--v62 <= 1) {
                  goto LABEL_49;
                }
              }
              if ((int)v63 > 0) {
                continue;
              }
            }
LABEL_49:
            operator delete(v25);
            return v15;
          }
          uint64_t v34 = 0;
          uint64_t v35 = 0;
LABEL_33:
          unint64_t v41 = v27 - v35;
          uint64_t v42 = v35;
          unint64_t v43 = (uint64_t *)(v33 + v42 * 8);
          unint64_t v44 = &v25[v42];
          do
          {
            uint64_t v46 = *v44++;
            uint64_t v45 = v46;
            uint64_t v47 = *v43++;
            v34 += v47 * v45;
            --v41;
          }
          while (v41);
          goto LABEL_35;
        }
        return 1;
      }
    }
    else
    {
      uint64_t v17 = 1;
      uint64_t v18 = (char *)a1[2];
    }
    do
    {
      uint64_t v24 = *(void *)v18;
      v18 += 8;
      v17 *= v24;
    }
    while (v18 != v4);
    goto LABEL_20;
  }
  return v15;
}

void sub_19220CA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5745158, MEMORY[0x1E4FBA1C8]);
}

void sub_19220CA7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Serializer::AddOpAttrsSymbolToComputeProgram(uint64_t a1, const void **a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  unint64_t v5 = v4 + 10;
  if (v4 + 10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v5 >= 0x17)
  {
    uint64_t v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v10 = v5 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    size_t v20 = v4 + 10;
    unint64_t v21 = v11 | 0x8000000000000000;
    std::__fs::filesystem::directory_entry::_Path __dst = p_dst;
  }
  else
  {
    size_t v20 = 0;
    unint64_t v21 = 0;
    std::__fs::filesystem::directory_entry::_Path __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v21) = v4 + 10;
    if (!v4) {
      goto LABEL_15;
    }
  }
  if (v3 >= 0) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = *a2;
  }
  memmove(p_dst, v12, v4);
LABEL_15:
  strcpy((char *)p_dst + v4, "__op_attrs");
  char v18 = 9;
  strcpy((char *)__p, "__const__");
  uint64_t v13 = (*(uint64_t (**)(void, void ***, void **, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), &__dst, __p, 3, 17);
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = a3[3];
  if (!v15)
  {
LABEL_18:
    uint64_t v23 = (void *)v15;
    goto LABEL_20;
  }
  if ((void *)v15 != a3)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    goto LABEL_18;
  }
  uint64_t v23 = v22;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v22);
LABEL_20:
  (*(void (**)(uint64_t, void ***, void **, void *))(*(void *)v14 + 56))(v14, &__dst, __p, v22);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p[0]);
    if ((SHIBYTE(v21) & 0x80000000) == 0) {
      return v13;
    }
LABEL_28:
    operator delete(__dst);
    return v13;
  }
  if (v23) {
    (*(void (**)(void))(*v23 + 40))();
  }
  if (v18 < 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (SHIBYTE(v21) < 0) {
    goto LABEL_28;
  }
  return v13;
}

void sub_19220CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(uint64_t *a1@<X1>, long long *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  unint64_t v8 = (char *)operator new(0x180uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)unint64_t v8 = &unk_1EE381148;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE327AA8;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  long long v9 = a2[1];
  *((_OWORD *)v8 + 19) = *a2;
  *((_OWORD *)v8 + 20) = v9;
  *(_OWORD *)(v8 + 329) = *(long long *)((char *)a2 + 25);
  if (a3) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = (*((_DWORD *)v8 + 76) < 8u) & (0xE4u >> *((_DWORD *)v8 + 76));
  }
  if (!*a1)
  {
    if ((v10 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (!v11)
  {
    if (!v10) {
      goto LABEL_18;
    }
LABEL_16:
    std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)__p, a1, a2);
    uint64_t v15 = __p[0];
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v8 + 45);
    *((_OWORD *)v8 + 22) = *(_OWORD *)__p;
    if (v16)
    {
      nitro::nitro_function::nitro_function(v16);
      if (*((void *)v8 + 44)) {
        goto LABEL_18;
      }
    }
    else if (v15)
    {
      goto LABEL_18;
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to get fallback reduce_kernel_cpu in BNNS reduce_kernel");
  }
  unint64_t v12 = v11;
  *((void *)v8 + 47) = v11[21];
  std::string::basic_string[abi:ne180100]<0>(__p, "bnns.experimental.enable_reduce");
  uint64_t v13 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v12 + 22, (uint64_t)__p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    char v14 = v10;
  }
  else {
    char v14 = 1;
  }
  if (v14) {
    goto LABEL_16;
  }
LABEL_18:
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19220CFC0(_Unwind_Exception *a1)
{
  size_t v4 = (std::__shared_weak_count *)v1[15].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>(uint64_t *a1, uint64_t *a2, long long *a3)
{
  unint64_t v6 = (char *)operator new(0x160uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)unint64_t v6 = &unk_1EE3864A0;
  long long v9 = *a3;
  *(_OWORD *)unsigned int v10 = a3[1];
  *(_OWORD *)&v10[12] = *(long long *)((char *)a3 + 28);
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE34D2F0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = *(_OWORD *)v10;
  __n128 result = *(__n128 *)&v10[9];
  *(_OWORD *)(v6 + 329) = *(_OWORD *)&v10[9];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19220D0AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_set_mil_entry_points(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE394D70;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unsigned int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19220D1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::pair[abi:ne180100]<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>&,std::vector<std::unordered_map<unsigned long,unsigned long long>>&,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::unordered_map<unsigned long,unsigned long long>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long,unsigned long long>*,std::unordered_map<unsigned long,unsigned long long>*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19220D258(_Unwind_Exception *exception_object)
{
  if (*v1) {
    Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*,std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19220D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::pair<unsigned long long,unsigned long long>> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_19220D494(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19220D4A8(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<unsigned long,unsigned long long>>::__init_with_size[abi:ne180100]<std::unordered_map<unsigned long,unsigned long long>*,std::unordered_map<unsigned long,unsigned long long>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int8x8_t v5 = (void *)result;
    if (a4 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    __n128 result = (uint64_t)operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 40 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        __n128 result = std::unordered_map<unsigned long,unsigned long long>::unordered_map(v8 + v9, a2 + v9);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_19220D580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::unordered_map<unsigned long,unsigned long long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(void **)(a2 + 16); i; unint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<unsigned long,unsigned long long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long long>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long long> const&>(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_19220D6DC(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19220D6F0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void E5RT::E5RTError::E5RTError(std::runtime_error *a1, int a2, E5RT::Status *this)
{
  uint64_t ErrorMessage = (const std::string *)E5RT::Status::GetErrorMessage(this);
  std::runtime_error::runtime_error(a1, ErrorMessage);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1EE326BD0;
  a1[1].__vftable = 0;
  operator new();
}

void sub_19220D804(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v3, 0x1032C402ED93987);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void sub_19220D850(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::E5RTError::Impl>>::~propagate_const(v2);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Status::GetErrorMessage(E5RT::Status *this)
{
  return *(void *)this;
}

void sub_19220D928(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1012C405C87E9CELL);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

void sub_19220D954(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Status::Impl>>::~propagate_const(v1);
  _Unwind_Resume(a1);
}

char **Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap(char **a1, uint64_t *a2)
{
  size_t v4 = std::vector<std::unordered_map<unsigned long,double>>::vector(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  void v4[3] = 0;
  v4[4] = 0;
  v4 += 3;
  v4[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  return a1;
}

void sub_19220D9D4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((uint64_t)v1, *v1);
  }
  _Unwind_Resume(exception_object);
}

char **std::vector<std::unordered_map<unsigned long,double>>::vector(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    size_t v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    int8x8_t v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)size_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_19220DA80(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_options_set_preferred_cpu_backends(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  BOOL v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3953F0;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = a3;
  unsigned int v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_19220DBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::generic_cast_kernel::get_runtime_type_config(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v13, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  if (v14 != v13)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, unint64_t))(*(void *)a1 + 24))(&v11, a1, 1, v8);
      uint64_t v9 = v11;
      if (v11)
      {
        if (*((unsigned char *)v11 + 8)) {
          *(_DWORD *)(v13 + v7 + 8) = *((_DWORD *)v11 + 3);
        }
        if (*((unsigned char *)v9 + 16))
        {
          uint64_t v10 = v13 + v7;
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(v9 + 3);
          if ((void **)v10 != v9 + 3) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v10 + 16), (char *)v9[5], (uint64_t)v9[6], ((unsigned char *)v9[6] - (unsigned char *)v9[5]) >> 2);
          }
        }
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      ++v8;
      v7 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v14 - v13) >> 3) > v8);
  }
  std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(a4, a2, &v13);
  uint64_t v11 = (void **)&v13;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_19220DD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<std::vector<Espresso::blob_numerical_properties> const&,std::vector<Espresso::blob_numerical_properties>&,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19220DDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void E5RT::ParseComputeUnits(uint64_t *a1@<X0>, char **a2@<X8>)
{
  char v31 = 1;
  LOWORD(__p) = 44;
  E5Common::StringUtils::Split(a1, (char *)&__p, (uint64_t)&v32);
  if (v31 < 0)
  {
    operator delete(__p);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    size_t v4 = (uint64_t *)v32;
    uint64_t v3 = v33;
    if (v32 == v33)
    {
LABEL_3:
      if (v4) {
        goto LABEL_41;
      }
      return;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    size_t v4 = (uint64_t *)v32;
    uint64_t v3 = v33;
    if (v32 == v33) {
      goto LABEL_3;
    }
  }
  int8x8_t v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  uint64_t v29 = v3;
  do
  {
    while (1)
    {
      if (*((char *)v4 + 23) < 0)
      {
        uint64_t v9 = *v4;
        uint64_t v8 = v4[1];
      }
      else
      {
        uint64_t v8 = *((unsigned __int8 *)v4 + 23);
        uint64_t v9 = (uint64_t)v4;
      }
      int ComputeUnitType = E5RT::GetComputeUnitType(v9, v8);
      int v11 = ComputeUnitType;
      if (v7 >= v6) {
        break;
      }
      *(_DWORD *)uint64_t v7 = ComputeUnitType;
      v7 += 4;
      a2[1] = v7;
      v4 += 3;
      if (v4 == v3) {
        goto LABEL_40;
      }
    }
    uint64_t v12 = (v7 - v5) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v6 - v5) >> 1 > v13) {
      unint64_t v13 = (v6 - v5) >> 1;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = operator new(4 * v14);
      uint64_t v16 = &v15[4 * v12];
      *(_DWORD *)uint64_t v16 = v11;
      uint64_t v17 = (uint64_t)(v16 + 4);
      if (v7 == v5) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = (char *)(4 * v12);
      *(_DWORD *)(4 * v12) = v11;
      uint64_t v17 = 4 * v12 + 4;
      if (v7 == v5) {
        goto LABEL_26;
      }
    }
    unint64_t v18 = v7 - 4 - v5;
    if (v18 < 0xBC)
    {
      char v19 = v7;
      goto LABEL_25;
    }
    if (&v15[v7 - v5 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v7 - v5 - 4])
    {
      char v19 = v7;
      do
      {
LABEL_25:
        int v20 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v16 - 1) = v20;
        v16 -= 4;
      }
      while (v19 != v5);
      goto LABEL_26;
    }
    if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
    {
      char v19 = v7;
      goto LABEL_25;
    }
    if ((unint64_t)(v5 - v15) < 0x20)
    {
      char v19 = v7;
      goto LABEL_25;
    }
    uint64_t v21 = (v18 >> 2) + 1;
    uint64_t v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    char v19 = &v7[-v22];
    v16 -= v22;
    uint64_t v23 = &v15[4 * v12 - 16];
    uint64_t v24 = v7 - 16;
    uint64_t v25 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *uint64_t v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_25;
    }
LABEL_26:
    BOOL v6 = &v15[4 * v14];
    *a2 = v16;
    a2[1] = (char *)v17;
    a2[2] = v6;
    if (v5) {
      operator delete(v5);
    }
    int8x8_t v5 = v16;
    uint64_t v3 = v29;
    a2[1] = (char *)v17;
    v4 += 3;
    uint64_t v7 = (char *)v17;
  }
  while (v4 != v29);
LABEL_40:
  size_t v4 = (uint64_t *)v32;
  if (v32)
  {
LABEL_41:
    unint64_t v27 = v33;
    uint64_t v28 = v4;
    if (v33 != v4)
    {
      do
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete((void *)*(v27 - 3));
        }
        v27 -= 3;
      }
      while (v27 != v4);
      uint64_t v28 = v32;
    }
    uint64_t v33 = v4;
    operator delete(v28);
  }
}

void sub_19220E0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::GetComputeUnitType(uint64_t a1, uint64_t a2)
{
  v14[0] = a1;
  v14[1] = a2;
  if (a2 != 3) {
    goto LABEL_18;
  }
  if (*(_WORD *)a1 == 28771 && *(unsigned char *)(a1 + 2) == 117) {
    return 0;
  }
  if (*(_WORD *)a1 == 28775 && *(unsigned char *)(a1 + 2) == 117) {
    return 1;
  }
  if (*(_WORD *)a1 != 28257 || *(unsigned char *)(a1 + 2) != 101)
  {
LABEL_18:
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetComputeUnitType");
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
    uint64_t v7 = std::string::insert(&__dst, 0, "Invalid compute unit name: ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
    long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(v12, 1, &v10);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  return 2;
}

void sub_19220E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)&a23);
  if (a21 < 0)
  {
    operator delete(a16);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if (a29 < 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if (a29 < 0)
  {
LABEL_4:
    operator delete(__p);
    if ((v30 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
LABEL_9:
    __cxa_free_exception(v29);
    goto LABEL_10;
  }
LABEL_8:
  if (!v30) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t std::unordered_map<std::string,std::vector<std::pair<int,int>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (unint64_t i = *(long long **)(a2 + 16); i; unint64_t i = *(long long **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_19220E404(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19220E418(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (unint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              int v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (std::vector<std::string>::pointer j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  int v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  char v44 = 0;
  *(void *)unint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100]((std::string *)(v27 + 16), a3);
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        int v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        int v30 = *(void **)(*(void *)a1 + 8 * v10);
        char v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      int v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      char v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_54;
      }
    }
LABEL_78:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  int v30 = *(void **)(*(void *)a1 + 8 * v3);
  char v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_78;
  }
LABEL_54:
  void *v31 = *v30;
  *int v30 = v43[0];
LABEL_89:
  unint64_t v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19220E85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19220E870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return this;
    }
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__r.__words[0] = 0;
    this[1].__r_.__value_.__l.__size_ = 0;
    this[1].__r_.__value_.__r.__words[2] = 0;
    BOOL v6 = (unsigned char *)*((void *)a2 + 3);
    int8x8_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return this;
    }
  }
  if (v7 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v10 = operator new(v7);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10 + 8 * (v7 >> 3);
  memcpy(v10, v6, v7 & 0xFFFFFFFFFFFFFFF8);
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v10 + (v7 & 0xFFFFFFFFFFFFFFF8);
  return this;
}

void sub_19220E970(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramLibraryImpl::GetFunctionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v12, "No such function in program library.");
    E5RT::Status::Status(v11, 1, v12);
    E5RT::E5RTError::E5RTError(exception, v13, v11);
  }
  unint64_t v3 = v2;
  long long v4 = (E5RT::ProgramFunctionPriv *)v2[5];
  int8x8_t v5 = (std::__shared_weak_count *)v3[6];
  v11[0] = v4;
  v11[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4)
  {
    unint64_t v9 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v12, "Invalid dynamic type.");
    E5RT::Status::Status(v10, 2, v12);
    E5RT::E5RTError::E5RTError(v9, v13, v10);
  }
  __n128 result = E5RT::ProgramFunctionPriv::GetFunctionMetadata(v4);
  int64_t v7 = result;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      return v7;
    }
  }
  return result;
}

void sub_19220EB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(uint64_t a1, E5RT::SharedResourceManager *a2, uint64_t a3, uint64_t a4)
{
}

void E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(uint64_t a1, E5RT::SharedResourceManager *a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 1) {
    E5RT::PrecompiledComputeOpCreateOptions::Create(a2);
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v7, "CreatePreCompiledComputeOp");
  std::string::basic_string[abi:ne180100]<0>(v5, "Multiple intermediate buffers isn't supported yet.");
  E5RT::Status::Status(v6, 1, v5);
  E5RT::E5RTError::E5RTError(exception, v7, v6);
}

void sub_19220EDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a17)
  {
    sub_19234DFE0();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19220EE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetAllocateIntermediateBuffers(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 64) = a2;
  return this;
}

void E5RT::PrecompiledComputeOpCreateOptionsPriv::~PrecompiledComputeOpCreateOptionsPriv(E5RT::PrecompiledComputeOpCreateOptionsPriv *this)
{
  uint64_t v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325E68;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

{
  E5RT::PrecompiledComputeOpCreateOptionsImpl *v2;

  uint64_t v2 = (E5RT::PrecompiledComputeOpCreateOptionsImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE325E68;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

void E5RT::PrecompiledComputeOpCreateOptionsImpl::~PrecompiledComputeOpCreateOptionsImpl(E5RT::PrecompiledComputeOpCreateOptionsImpl *this)
{
  uint64_t v2 = (void **)*((void *)this + 23);
  if (v2)
  {
    do
    {
      unint64_t v9 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_19:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_19;
      }
      operator delete(v2);
      uint64_t v2 = v9;
    }
    while (v9);
  }
  unint64_t v3 = (void *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v3) {
    operator delete(v3);
  }
  long long v4 = (void **)*((void *)this + 18);
  if (v4)
  {
    do
    {
      unint64_t v10 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_25:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_25;
      }
      operator delete(v4);
      long long v4 = v10;
    }
    while (v10);
  }
  int8x8_t v5 = (void *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v5) {
    operator delete(v5);
  }
  BOOL v6 = (void **)*((void *)this + 13);
  if (v6)
  {
    do
    {
      unint64_t v11 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_31:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_31;
      }
      operator delete(v6);
      BOOL v6 = v11;
    }
    while (v11);
  }
  int64_t v7 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7) {
    operator delete(v7);
  }
  if ((*((char *)this + 63) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_33:
    operator delete(*((void **)this + 2));
    unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v8) {
      return;
    }
    goto LABEL_34;
  }
  operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0) {
    goto LABEL_33;
  }
LABEL_12:
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  if (!v8) {
    return;
  }
LABEL_34:
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void E5RT::PrecompiledComputeOpCreateOptions::Create(E5RT::SharedResourceManager *a1)
{
}

void sub_19220F25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24 = 0;
  (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  uint64_t v28 = *(void *)(v26 - 40);
  *(void *)(v26 - 40) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t E5RT::ProgramLibrary::GetExportedFunctions(E5RT::ProgramLibrary *this)
{
  return *((void *)this + 1) + 24;
}

{
  return *((void *)this + 1) + 24;
}

void E5RT::PrecompiledComputeOpCreateOptions::Create(void *a1)
{
  if (*a1) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, "Create");
  std::string::basic_string[abi:ne180100]<0>(v2, "Cannot provide program function as nullptr.");
  E5RT::Status::Status(v3, 1, v2);
  E5RT::E5RTError::E5RTError(exception, v4, v3);
}

void sub_19220F720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::PrecompiledComputeOpCreateOptionsImpl>::~unique_ptr[abi:ne180100]((E5RT::PrecompiledComputeOpCreateOptionsImpl **)va);
  _Unwind_Resume(a1);
}

void sub_19220F734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

void E5RT::ProgramLibrary::OpenLibrary(E5RT::SharedResourceManager *a1)
{
  uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(a1);
  char v7 = 0;
  LOBYTE(__p[0]) = 0;
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (long long *)a1, 3, (uint64_t *)__p, 0, (uint64_t *)&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((void)v8) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "OpenLibrary");
  std::operator+<char>();
  E5RT::Status::Status(v5, 8, &v4);
  E5RT::E5RTError::E5RTError(exception, __p, v5);
}

void sub_19220F97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v23 = v21;
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x192FF16B0](v23, 0xA1C40BD48D6D6);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22 - 48);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOps(uint64_t this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v1 = *(E5RT::ExecutionStreamOperationInternal ***)(this + 48);
  if (v1 != *(E5RT::ExecutionStreamOperationInternal ***)(this + 56))
  {
    uint64_t OpName = E5RT::ExecutionStreamOperationInternal::GetOpName(*v1);
    unint64_t v3 = (const void **)OpName;
    int v4 = *(char *)(OpName + 23);
    if (v4 >= 0) {
      size_t v5 = *(unsigned __int8 *)(OpName + 23);
    }
    else {
      size_t v5 = *(void *)(OpName + 8);
    }
    unint64_t v6 = v5 + 17;
    if (v5 + 17 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v6 >= 0x17)
    {
      uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v8 = v6 | 7;
      }
      uint64_t v9 = v8 + 1;
      p_p = operator new(v8 + 1);
      size_t v12 = v5 + 17;
      unint64_t v13 = (void *)(v9 | 0x8000000000000000);
      std::__fs::filesystem::path __p = p_p;
    }
    else
    {
      size_t v12 = 0;
      unint64_t v13 = 0;
      std::__fs::filesystem::path __p = 0;
      p_p = &__p;
      HIBYTE(v13) = v5 + 17;
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (v4 >= 0) {
      unint64_t v10 = v3;
    }
    else {
      unint64_t v10 = *v3;
    }
    memmove(p_p, v10, v5);
LABEL_16:
    strcpy((char *)p_p + v5, "_completion_event");
    E5RT::AsyncEvent::CreateEvent((uint64_t)&__p, 0);
  }
  return this;
}

void sub_19220FEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19220FEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (a12) {
    sub_19234DF10();
  }
  if (a18 < 0)
  {
    operator delete(__p);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel(E5RT::Ops::Impl::AneInferenceOperationImpl *this)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 6))
  {
    uint64_t v12 = *MEMORY[0x1E4F4E0F0];
    uint64_t v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
    v13[0] = v9;
    uint64_t v10 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v13 forKeys:&v12 count:1];

    uint64_t v2 = (void *)v10;
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(this);
  int v4 = (long long *)*((void *)this + 2);
  uint64_t OpName = (uint64_t *)E5RT::ExecutionStreamOperationInternal::GetOpName(*((E5RT::ExecutionStreamOperationInternal **)this
                                                                        + 1));
  E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, v4, 0, OpName, v2, v11);
  long long v6 = *(_OWORD *)v11;
  *(_OWORD *)uint64_t v11 = 0uLL;
  char v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v11[1];
  if (v11[1] && !atomic_fetch_add((atomic_ullong *volatile)(v11[1] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_192210104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpName(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 192;
}

uint64_t E5RT::SharedResourceManager::GetSharedResourceManager(E5RT::SharedResourceManager *this)
{
  if (qword_1E9301C48 != -1) {
    dispatch_once(&qword_1E9301C48, &unk_1EE3979C8);
  }
  return qword_1E9301C40;
}

void E5RT::SharedResourceManager::GetOrCreateResource(uint64_t a1@<X0>, long long *a2@<X1>, int a3@<W2>, uint64_t *a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v11 = a5;
  *a6 = 0;
  a6[1] = 0;
  uint64_t v12 = (std::mutex *)(a1 + 56);
  std::mutex::lock((std::mutex *)(a1 + 56));
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((void *)a1, (uint64_t)a2);
  char v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v14 = [v11 objectForKeyedSubscript:E5Common::kMpsgGraphDynamicCallableStrKey[0]];
  if (v14)
  {
    uint64_t v15 = [v11 objectForKeyedSubscript:E5Common::kSharedResourceManagerStrKey[0]];

    if (!v15)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
      std::string::basic_string[abi:ne180100]<0>(v42, "MPSGraph segment has Dynamic Callable but a shared resource manager key has not been generated for it.");
      E5RT::Status::Status(v43, 2, v42);
      E5RT::E5RTError::E5RTError(exception, __p, v43);
    }
    id v16 = [v11 objectForKeyedSubscript:E5Common::kSharedResourceManagerStrKey[0]];
    MEMORY[0x192FF0F50](&v44, [v16 UTF8String]);

    uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>((void *)a1, (uint64_t)&v44);
  }
  if (v13)
  {
    unint64_t v17 = (std::__shared_weak_count *)v13[6];
    if (v17 && (uint64_t v18 = std::__shared_weak_count::lock(v17)) != 0)
    {
      uint64_t v19 = v18;
      uint64_t v20 = v13[5];
      *a6 = v20;
      a6[1] = (uint64_t)v19;
      if (v20)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 16))(v20) != a3)
        {
          unint64_t v37 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
          std::string::basic_string[abi:ne180100]<0>(v42, "Invalid resource type. A shared resource of a different type with the specified URI already exists.");
          E5RT::Status::Status(v43, 2, v42);
          E5RT::E5RTError::E5RTError(v37, __p, v43);
        }
        char v49 = 4;
        strcpy((char *)__p, "e5rt");
        uint64_t v21 = E5RT::GetE5RTLog((uint64_t)__p);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          uint64_t v22 = v13 + 2;
          if (*((char *)v13 + 39) < 0) {
            uint64_t v22 = (void *)*v22;
          }
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v22;
          _os_log_impl(&dword_1920CB000, v21, OS_LOG_TYPE_INFO, "Loading a shared resource. URI = %s \n", (uint8_t *)__p, 0xCu);
        }

        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v19 = 0;
      *a6 = 0;
      a6[1] = 0;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove((void *)a1, v13, (uint64_t)__p);
    uint64_t v23 = (char *)__p[0];
    __p[0] = 0;
    if (v23)
    {
      if (v48)
      {
        uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
        if (v23[39] < 0) {
          operator delete(*((void **)v23 + 2));
        }
      }
      operator delete(v23);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  switch(a3)
  {
    case 0:
      E5RT::SharedResourceFactory::GetANEFModel(a2, a4, v11, __p);
      break;
    case 1:
      E5RT::SharedResourceFactory::GetANEDriverProgram((uint64_t)a2, __p);
      break;
    case 2:
      E5RT::SharedResourceManager::InitializeMILContext((void *)a1);
      char v25 = *(std::__shared_weak_count **)(a1 + 48);
      unint64_t v40 = *(bnns **)(a1 + 40);
      unint64_t v41 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      E5Common::RegisterBnnsOpsets(&v40);
      uint64_t v26 = v41;
      if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      uint64_t v27 = *(void *)(a1 + 48);
      v39[0] = *(void *)(a1 + 40);
      v39[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      E5RT::SharedResourceFactory::GetBnnsGraphIr((uint64_t)a2, v11, v39);
    case 3:
      E5RT::SharedResourceFactory::GetE5Program((uint64_t)a2);
    case 4:
      E5RT::SharedResourceFactory::GetMPSGraphExecutable((std::string *)a2, v11, __p);
      break;
    default:
      uint8x8_t v38 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetOrCreateResource");
      std::string::basic_string[abi:ne180100]<0>(v42, "Invalid shared resource type specified.");
      E5RT::Status::Status(v43, 1, v42);
      E5RT::E5RTError::E5RTError(v38, __p, v43);
  }
  long long v28 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  *(_OWORD *)a6 = v28;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    float v29 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      goto LABEL_42;
    }
  }
  else
  {
    float v29 = (std::__shared_weak_count *)__p[1];
    if (!__p[1]) {
      goto LABEL_42;
    }
  }
  if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v32 = HIBYTE(v46);
    if (v46 < 0) {
      uint64_t v32 = v45;
    }
    if (v32) {
      goto LABEL_45;
    }
LABEL_49:
    __p[0] = a2;
    char v31 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, (long long **)__p);
    goto LABEL_50;
  }
LABEL_42:
  uint64_t v30 = HIBYTE(v46);
  if (v46 < 0) {
    uint64_t v30 = v45;
  }
  if (!v30) {
    goto LABEL_49;
  }
LABEL_45:
  __p[0] = &v44;
  char v31 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (uint64_t)&v44, (uint64_t)&std::piecewise_construct, (long long **)__p);
LABEL_50:
  uint64_t v34 = *a6;
  uint64_t v33 = a6[1];
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = (std::__shared_weak_count *)v31[6];
  v31[5] = v34;
  v31[6] = v33;
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_54:

  if (SHIBYTE(v46) < 0) {
    operator delete(v44);
  }
  std::mutex::unlock(v12);
}

void sub_192210868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  E5RT::Status::~Status((E5RT::Status *)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v37 & 1) == 0)
    {
LABEL_8:

      if (a26 < 0) {
        operator delete(a21);
      }
      std::mutex::unlock(v33);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v35);

      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t E5RT::Ops::AneInferenceOperation::BindCompletionAsyncEvent(uint64_t a1, long long *a2, int a3)
{
  long long v6 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(a1, &v6, a3);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)&v6 + 1);
  if (*((void *)&v6 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 296) + 88))(*(void *)(a1 + 296));
}

void sub_192210C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::BindCompletionAsyncEventImpl(E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs *this)
{
  uint64_t v2 = (void *)*((void *)this + 25);
  *((void *)this + 25) = 0;

  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(*((void *)this + 1), &v13);
  unint64_t v3 = v13;
  if (!v13)
  {
    unint64_t v10 = (void *)*((void *)this + 41);
    *((void *)this + 41) = 0;

    uint8x8_t v9 = v14;
    if (!v14) {
      return;
    }
    goto LABEL_10;
  }
  unint64_t v4 = v14;
  id v11 = v13;
  uint64_t v12 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>((uint64_t)v3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v6 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", 1, v11, v12);
  int8x8_t v7 = (void *)*((void *)this + 41);
  *((void *)this + 41) = v6;

  unint64_t v8 = [MEMORY[0x1E4F4E098] signalEventWithValue:E5RT::AsyncEvent::GetActiveFutureValue(v13) symbolIndex:255 eventType:0 sharedEvent:v5];
  [*((id *)this + 41) setObject:v8 atIndexedSubscript:0];

  uint8x8_t v9 = v14;
  if (v14)
  {
LABEL_10:
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_192210E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192210E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_192210E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 184);
  *a2 = *(void *)(this + 176);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::IOSurfaceSharedAsyncEvent::GetActiveFutureValue(E5RT::IOSurfaceSharedAsyncEvent *this)
{
  return *((void *)this + 5);
}

uint64_t E5RT::AsyncEvent::GetActiveFutureValue(E5RT::AsyncEvent *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void E5RT::ExecutionStreamOperationInternal::BindCompletionAsyncEvent(uint64_t a1, void *a2, int a3)
{
  if ((*(unsigned char *)(a1 + 248) & 7) == 2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "BindCompletionAsyncEvent");
    std::string::basic_string[abi:ne180100]<0>(v11, "Operation bind state cannot be changed  while it's encoded and in-use from a stream.");
    E5RT::Status::Status(v12, 2, v11);
    E5RT::E5RTError::E5RTError(exception, v13, v12);
  }
  unint64_t v5 = (void *)(a1 + 152);
  while (1)
  {
    unint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    if (v5[2] == *a2)
    {
      uint64_t v6 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v13, "BindCompletionAsyncEvent");
      std::string::basic_string[abi:ne180100]<0>(v11, "Dependent and completion event bindings must be distinct. Dependent and completion async events can use the same underlying shared event object with different active future values.");
      E5RT::Status::Status(v12, 2, v11);
      E5RT::E5RTError::E5RTError(v6, v13, v12);
    }
  }
  long long v7 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (a3) {
    char v9 = 16;
  }
  else {
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a1 + 248) & 0xEF | v9;
}

void sub_192211098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v23 & 1) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      __cxa_free_exception(v22);
      goto LABEL_8;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((v23 & 1) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

id E5RT::AsyncEvent::GetHandle<IOSurfaceSharedEvent * {__strong}>(uint64_t a1)
{
  if (!v1) {
    __cxa_bad_cast();
  }
  uint64_t v2 = (void *)v1[1];

  return v2;
}

void E5RT::AsyncEvent::CreateEvent(uint64_t a1, int a2)
{
  if (!a2) {
    operator new();
  }
  exception = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "CreateEvent");
  std::string::basic_string[abi:ne180100]<0>(v3, "Invalid async event type.");
  E5RT::Status::Status(v4, 1, v3);
  E5RT::E5RTError::E5RTError(exception, v5, v4);
}

void sub_1922112FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9) {
    sub_19237A1B4(a9);
  }
  MEMORY[0x192FF16B0](v9, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_192211330(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_192211368(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x1093C4041A044FELL);
  _Unwind_Resume(a1);
}

void sub_192211390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *E5RT::IOSurfaceSharedAsyncEvent::IOSurfaceSharedAsyncEvent(void *a1, long long *a2)
{
  unint64_t v4 = E5RT::AsyncEventImpl::AsyncEventImpl(a1);
  void *v4 = &unk_1EE325D40;
  v4[1] = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 2), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4[4] = *((void *)a2 + 2);
    *((_OWORD *)v4 + 1) = v5;
  }
  a1[5] = 0;
  if (E5RT::IsIOSurfaceSharedEventAvailable((E5RT *)v4))
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F2EF90]);
    long long v7 = (void *)a1[1];
    a1[1] = v6;

    if (!a1[1])
    {
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v12, "IOSurfaceSharedAsyncEvent");
      std::string::basic_string[abi:ne180100]<0>(v10, "IOSurfaceSharedEvent creation failed.");
      E5RT::Status::Status(v11, 11, v10);
      E5RT::E5RTError::E5RTError(exception, v12, v11);
    }
  }
  return a1;
}

void sub_192211534(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v1);
  _Unwind_Resume(a1);
}

void sub_192211550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 + 39) < 0) {
    operator delete(*v23);
  }

  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IsIOSurfaceSharedEventAvailable(E5RT *this)
{
  return 1;
}

void *E5RT::AsyncEventImpl::AsyncEventImpl(void *this)
{
  *this = &unk_1EE3249E0;
  return this;
}

void *E5RT::AsyncEvent::AsyncEvent(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = &unk_1EE3245E8;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = &unk_1EE3245E8;
  result[1] = v2;
  return result;
}

uint64_t E5RT::SharedResourcePriv<_ANEModel * {__strong}>::GetSharedResourceType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  id v6 = *(void **)(*result + 8 * v4);
  do
  {
    long long v7 = v6;
    id v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *long long v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  id v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          id v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  long long v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192211BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192211BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<E5RT::SharedResource>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::SharedResourceFactory::GetANEFModel(long long *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v7 = a3;
  E5Common::GetANEFModel((std::string::size_type)a1, a2, v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  if (v10)
  {
    int v9 = 0;
    unint64_t v8 = (char *)operator new(0x48uLL);
    std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,_ANEModel * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>,0>((uint64_t)v8, a1, &v10, &v9);
    *a4 = v8 + 24;
    a4[1] = v8;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_192211C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  operator delete(v11);

  _Unwind_Resume(a1);
}

void sub_192211CB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_192211CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>::__shared_ptr_emplace[abi:ne180100]<std::string const&,_ANEModel * {__strong}&,E5RT::SharedResourceType,std::allocator<E5RT::SharedResourcePriv<_ANEModel * {__strong}>>,0>(uint64_t a1, long long *a2, id *a3, int *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EE380D90;
  int v6 = *a4;
  id v7 = *a3;
  *(void *)(a1 + 24) = &unk_1EE325BB0;
  unint64_t v8 = (std::string *)(a1 + 32);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(void *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 64) = v6;

  return a1;
}

void sub_192211D9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

id E5Common::GetANEFModel(std::string::size_type a1, uint64_t *a2, void *a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 8;
  strcpy((char *)__p, ".anehash");
  id v6 = (id)E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a1, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v5) {
    uint64_t v7 = [v5 mutableCopy];
  }
  else {
    uint64_t v7 = objc_opt_new();
  }
  unint64_t v8 = (void *)v7;
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      goto LABEL_11;
    }
    a2 = (uint64_t *)*a2;
    goto LABEL_10;
  }
  if (*((unsigned char *)a2 + 23))
  {
LABEL_10:
    long long v9 = [NSString stringWithUTF8String:a2];
    [v8 setObject:v9 forKeyedSubscript:*MEMORY[0x1E4F4E118]];
  }
LABEL_11:
  memset(&v49, 0, sizeof(v49));
  if (v6)
  {
    memset(__p, 0, 24);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if ((v10 & 0x80u) == 0) {
      unint64_t v11 = (std::string *)a1;
    }
    else {
      unint64_t v11 = *(std::string **)a1;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    std::string::append[abi:ne180100]<char const*,0>(__p, v11, (std::string *)((char *)v11 + v10));
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v48.__r_.__value_.__s.__data_[0] == 255 || !v48.__r_.__value_.__s.__data_[0])
    {
      std::operator+<char>();
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&v48, "GetANEFModel");
      E5RT::Status::Status(v45, 13, __p);
      E5RT::E5RTError::E5RTError(exception, &v48, v45);
    }
    memset(&v48, 0, sizeof(v48));
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) == 0) {
      uint8x8_t v13 = (std::string *)a1;
    }
    else {
      uint8x8_t v13 = *(std::string **)a1;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    std::string::append[abi:ne180100]<char const*,0>(&v48, v13, (std::string *)((char *)v13 + v12));
    E5RT::ReadAneCacheUrlIdentifier((const std::__fs::filesystem::path *)&v48, __p);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    std::string v49 = __p[0];
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 0;
    __p[0].__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    char v14 = (void *)MEMORY[0x1E4F4E060];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v49;
    }
    else {
      uint64_t v15 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    char v16 = [NSString stringWithUTF8String:v15];
    uint64_t v17 = [v14 modelWithCacheURLIdentifier:v16];

    [v8 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F4E110]];
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = *(void *)a1;
    }
    uint64_t v19 = [NSString stringWithUTF8String:v18];
    uint64_t v20 = [MEMORY[0x1E4F28B88] URLPathAllowedCharacterSet];
    uint64_t v21 = [v19 stringByAddingPercentEncodingWithAllowedCharacters:v20];

    uint64_t v22 = [MEMORY[0x1E4F1CB10] URLWithString:v21];
    uint64_t v17 = [MEMORY[0x1E4F4E060] modelAtURL:v22 key:@"ANE_model"];
    [v8 setObject:*MEMORY[0x1E4F4E160] forKeyedSubscript:*MEMORY[0x1E4F4E188]];
  }
  uint64_t v23 = [MEMORY[0x1E4F4E030] sharedConnection];
  id v47 = 0;
  char v24 = [v23 loadModel:v17 options:v8 qos:21 error:&v47];
  id v25 = v47;

  if ((v24 & 1) == 0)
  {
    if (v6)
    {
      uint8x8_t v40 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "GetANEFModel");
      std::string::basic_string[abi:ne180100]<0>(&v48, "ANE model load has failed for on-device compiled macho. Must re-compile the E5 bundle.");
      E5RT::Status::Status(v45, 13, &v48);
      E5RT::E5RTError::E5RTError(v40, __p, v45);
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ANE model load failure: ", 24);
    if (v25)
    {
      id v6 = [v25 localizedDescription];
      uint64_t v41 = (const char *)[v6 UTF8String];
    }
    else
    {
      uint64_t v41 = "unknown error";
    }
    size_t v42 = strlen(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v41, v42);
    if (v25) {

    }
    unint64_t v43 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v48, "GetANEFModel");
    std::stringbuf::str();
    E5RT::Status::Status(v46, 9, v45);
    E5RT::E5RTError::E5RTError(v43, &v48, v46);
  }
  if (v6)
  {
    *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 4;
    strcpy((char *)__p, "e5rt");
    uint64_t v26 = E5RT::GetE5RTLog((uint64_t)__p);
    uint64_t v27 = v26;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
        goto LABEL_56;
      }
    }
    else if (!os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      goto LABEL_56;
    }
    int v29 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    std::string::size_type v30 = v49.__r_.__value_.__r.__words[0];
    std::string::size_type v31 = [v17 programHandle];
    uint64_t v32 = &v49;
    if (v29 < 0) {
      uint64_t v32 = (std::string *)v30;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v31;
    uint64_t v33 = "Loaded ANE Model with cacheURLIdentifier = %s with programHandle = 0x%llx\n";
LABEL_55:
    _os_log_impl(&dword_1920CB000, v27, OS_LOG_TYPE_INFO, v33, (uint8_t *)__p, 0x16u);
    goto LABEL_56;
  }
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__p, "e5rt");
  long long v28 = E5RT::GetE5RTLog((uint64_t)__p);
  uint64_t v27 = v28;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    goto LABEL_51;
  }
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
LABEL_51:
    int v34 = *(char *)(a1 + 23);
    uint64_t v35 = *(void *)a1;
    std::string::size_type v36 = [v17 programHandle];
    if (v34 >= 0) {
      std::string::size_type v37 = a1;
    }
    else {
      std::string::size_type v37 = v35;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v37;
    WORD2(__p[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1] + 6) = v36;
    uint64_t v33 = "Loaded ANE Model at path = %s with programHandle = 0x%llx\n";
    goto LABEL_55;
  }
LABEL_56:

  id v38 = v17;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }

  return v38;
}

void sub_19221249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v38 & 1) == 0)
    {
LABEL_6:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (a28 < 0) {
        operator delete(a23);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v38)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v37);
  goto LABEL_6;
}

void E5RT::ProgramLibraryPriv::ProgramLibraryPriv(void *a1)
{
  *a1 = &unk_1EE325AF0;
  a1[1] = 0;
  operator new();
}

{
  *a1 = &unk_1EE325AF0;
  a1[1] = 0;
  operator new();
}

void sub_192212840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x192FF16B0](v10, 0x10F2C401C59B653);
  E5RT::ProgramLibrary::~ProgramLibrary(v9);
  _Unwind_Resume(a1);
}

void sub_192212874(_Unwind_Exception *a1)
{
  E5RT::ProgramLibrary::~ProgramLibrary(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ProgramLibraryImpl::ProgramLibraryImpl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  E5RT::ProgramLibraryImpl::InitializeProgramLibrary((E5RT::ProgramLibraryImpl *)a1);
  return a1;
}

void sub_1922128F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13)
{
  if (*(char *)(v13 + 87) < 0) {
    operator delete(*v14);
  }
  if (!sub_192382134()) {
    ((void (*)(char *, uint64_t))off_1EE397698[a13])(&a12, v13);
  }
  *(_DWORD *)(v13 + 16) = -1;
  _Unwind_Resume(a1);
}

std::string *E5RT::PrecompiledComputeOpCreateOptions::SetOperationName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 8) + 16), a2);
}

void std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__on_zero_shared(uint64_t a1)
{
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::SetLazyPrepareOpForEncode(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 8) + 65) = a2;
  return this;
}

std::string *E5RT::PrecompiledComputeOpCreateOptions::SetLibraryPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 8) + 40), a2);
}

void E5RT::SharedResourceFactory::GetE5Program(uint64_t a1)
{
  v1[0] = 0;
  v1[16] = 0;
  E5RT::E5Program::LoadProgram(a1, (uint64_t)v1);
}

void sub_192212AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  if (a12)
  {
    sub_192383DD0(a12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void E5RT::ProgramFunctionPriv::~ProgramFunctionPriv(E5RT::ProgramFunctionPriv *this)
{
  uint64_t v2 = (void **)*((void *)this + 15);
  if (v2)
  {
    do
    {
      while (1)
      {
        int8x8_t v3 = (void **)*v2;
        unint64_t v4 = (std::__shared_weak_count *)v2[6];
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (*((char *)v2 + 39) < 0) {
          break;
        }
        operator delete(v2);
        uint64_t v2 = v3;
        if (!v3) {
          goto LABEL_9;
        }
      }
      operator delete(v2[2]);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
LABEL_9:
  id v5 = (void *)*((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v5) {
    operator delete(v5);
  }
  id v6 = (void **)*((void *)this + 10);
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void **)*v6;
        unint64_t v8 = (std::__shared_weak_count *)v6[6];
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        if (*((char *)v6 + 39) < 0) {
          break;
        }
        operator delete(v6);
        id v6 = v7;
        if (!v7) {
          goto LABEL_19;
        }
      }
      operator delete(v6[2]);
      operator delete(v6);
      id v6 = v7;
    }
    while (v7);
  }
LABEL_19:
  long long v9 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v10 = (void **)*((void *)this + 5);
  if (v10)
  {
    do
    {
      while (1)
      {
        unint64_t v11 = (void **)*v10;
        uint64_t v12 = (std::__shared_weak_count *)v10[6];
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        if (*((char *)v10 + 39) < 0) {
          break;
        }
        operator delete(v10);
        uint64_t v10 = v11;
        if (!v11) {
          goto LABEL_29;
        }
      }
      operator delete(v10[2]);
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
LABEL_29:
  uint64_t v13 = (void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v13) {
    operator delete(v13);
  }
  char v14 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v14)
  {
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

{
  uint64_t vars8;

  E5RT::ProgramFunctionPriv::~ProgramFunctionPriv(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::ProgramLibraryPriv::~ProgramLibraryPriv(E5RT::ProgramLibraryPriv *this)
{
  uint64_t v2 = (void **)*((void *)this + 1);
  *(void *)this = &unk_1EE324BC0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x192FF16B0]();
  }

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;

  uint64_t v2 = (void **)*((void *)this + 1);
  *(void *)this = &unk_1EE324BC0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    E5RT::ProgramLibraryImpl::~ProgramLibraryImpl(v2);
    MEMORY[0x192FF16B0]();
  }
}

uint64_t e5rt_tensor_desc_get_size(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399398;
  v4[1] = a1;
  v4[2] = a2;
  id v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_192212EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::MILTransforms::ConstCastFusion(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v10);
  uint64_t v3 = v10;
  uint64_t v2 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v17, 0, sizeof(v17));
  int v18 = 1065353216;
  for (unint64_t i = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 16); i; unint64_t i = (uint64_t *)*i)
  {
    memset(v15, 0, sizeof(v15));
    int v16 = 1065353216;
    v13[0] = v3;
    v13[1] = (uint64_t)v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)i[5] + 32))(i[5]);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)i[5] + 48))(i[5]);
    if (v2) {
      nitro::nitro_function::nitro_function(v2);
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)i[5] + 192))(&v12);
    uint64_t v19 = (long long *)(i + 2);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v17, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v19);
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((void *)v7 + 5, &v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)v15);
  }
  (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 88))(a1, v17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)v17);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
}

void sub_192213174(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)va);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::LowerFunction(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t Function = (MIL::IRObject *)MIL::IRProgram::GetFunction();
  Espresso::AOT::SegmentsLowerer::FindSegmentDefs((uint64_t)Function, a3, &v22);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  if (*(unsigned char *)(a1 + 96) && 0x8E38E38E38E38E39 * ((v22.i64[1] - v22.i64[0]) >> 3) >= 2)
  {
    Espresso::AOT::SegmentsLowerer::GenerateAndMergeSegmentFunctions(a1, a2, (uint64_t)Function, (char **)&v22, &v18);
    uint64_t v7 = (char *)__p[0];
    if (!__p[0]) {
      goto LABEL_12;
    }
    uint64_t v8 = (char *)__p[1];
    uint64_t v9 = __p[0];
    if (__p[1] == __p[0]) {
      goto LABEL_11;
    }
    do
    {
      v8 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v21, (uint64_t)v8);
    }
    while (v8 != v7);
    goto LABEL_10;
  }
  Espresso::AOT::SegmentsLowerer::GenerateSegmentFunctions(a1, a2, v22.i64, (uint64_t)&v18);
  uint64_t v7 = (char *)__p[0];
  if (!__p[0]) {
    goto LABEL_12;
  }
  uint64_t v10 = (char *)__p[1];
  uint64_t v9 = __p[0];
  if (__p[1] != __p[0])
  {
    do
    {
      v10 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v21, (uint64_t)v10);
    }
    while (v10 != v7);
LABEL_10:
    uint64_t v9 = __p[0];
  }
LABEL_11:
  __p[1] = v7;
  operator delete(v9);
LABEL_12:
  *(_OWORD *)std::__fs::filesystem::path __p = v18;
  uint64_t v21 = v19;
  Espresso::AOT::SegmentsLowerer::GenerateEntryPointFunction(a1, (uint64_t)Function, (uint64_t *)__p, (uint64_t)&v18);
  unint64_t v11 = *(std::__shared_weak_count **)(MIL::IRObject::GetLocationPtr(Function) + 8);
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::IRObject::SetLocation();
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>(a1 + 40, a2, a2, (uint64_t *)&v18);
  if ((v12 & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to lower entry point function");
  }
  uint64_t v13 = v18;
  *(void *)&long long v18 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = (char *)__p[0];
  if (__p[0])
  {
    uint64_t v15 = (char *)__p[1];
    int v16 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v15 -= 80;
        std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)&v21, (uint64_t)v15);
      }
      while (v15 != v14);
      int v16 = __p[0];
    }
    __p[1] = v14;
    operator delete(v16);
  }
  if (v22.i64[0])
  {
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v22, v22.i64[0]);
    operator delete((void *)v22.i64[0]);
  }
}

void sub_1922134C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100]((void **)va);
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::~vector[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::GenerateSegmentFunctions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  uint64_t v7 = v5 - v6;
  if (v7)
  {
    uint64_t v8 = a1;
    uint64_t v9 = 0;
    unint64_t v10 = v7 / 72;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    uint64_t v43 = a4;
    unint64_t v44 = v10;
    uint64_t v45 = a1 + 40;
    do
    {
      int v11 = *(char *)(a2 + 23);
      if (v11 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v12 = *(void *)(a2 + 8);
      }
      unint64_t v13 = v12 + 1;
      if (v12 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = *a3;
      uint64_t v14 = (uint64_t *)(*a3 + 72 * v9);
      uint64_t v15 = *v14;
      uint64_t v16 = v8;
      uint64_t v17 = *(void **)(v8 + 80);
      if (v13 >= 0x17)
      {
        uint64_t v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17) {
          uint64_t v19 = v13 | 7;
        }
        uint64_t v20 = v19 + 1;
        p_dst = (std::string *)operator new(v19 + 1);
        __dst.__r_.__value_.__l.__size_ = v12 + 1;
        __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        a4 = v43;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12 + 1;
        if (!v12) {
          goto LABEL_20;
        }
      }
      if (v11 >= 0) {
        uint64_t v21 = (const void *)a2;
      }
      else {
        uint64_t v21 = *(const void **)a2;
      }
      memmove(p_dst, v21, v12);
LABEL_20:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v12) = 95;
      uint64_t v8 = v16;
      uint64_t v22 = **(void **)(v16 + 16) + 24 * v15;
      int v23 = *(char *)(v22 + 23);
      if (v23 >= 0) {
        char v24 = (const std::string::value_type *)(**(void **)(v16 + 16) + 24 * v15);
      }
      else {
        char v24 = *(const std::string::value_type **)v22;
      }
      if (v23 >= 0) {
        std::string::size_type v25 = *(unsigned __int8 *)(v22 + 23);
      }
      else {
        std::string::size_type v25 = *(void *)(v22 + 8);
      }
      uint64_t v26 = std::string::append(&__dst, v24, v25);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v50 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::__fs::filesystem::path __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      Espresso::MILTranslator::NameGenerator::NameForPrefix(v17, (uint64_t)__p, (uint64_t)&v57);
      if (SHIBYTE(v50) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_34:
        }
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_34;
      }
      Espresso::AOT::SegmentsLowerer::ExtractSegment((void *)v16, a2);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      long long v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, (unsigned __int8 *)&v57, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
      long long v29 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v30 = (std::__shared_weak_count *)*((void *)v28 + 6);
      *(_OWORD *)(v28 + 40) = v29;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
        std::string::size_type v31 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_36;
        }
      }
      else
      {
        std::string::size_type v31 = (std::__shared_weak_count *)__p[1];
        if (!__p[1]) {
          goto LABEL_36;
        }
      }
      if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
LABEL_36:
      uint64_t v32 = v47 + 72 * v9;
      uint64_t v33 = *v14;
      *(_OWORD *)std::__fs::filesystem::path __p = v57;
      std::string::size_type v50 = v58;
      std::string::size_type v58 = 0;
      long long v57 = 0uLL;
      v51[1] = 0;
      uint64_t v52 = 0;
      v51[0] = 0;
      *(_OWORD *)uint64_t v51 = *(_OWORD *)(v32 + 24);
      uint64_t v52 = *(void *)(v32 + 40);
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 32) = 0;
      *(void *)(v32 + 40) = 0;
      v53[0] = 0;
      v53[1] = 0;
      uint64_t v54 = 0;
      *(_OWORD *)unint64_t v53 = *(_OWORD *)(v32 + 48);
      uint64_t v54 = *(void *)(v32 + 64);
      *(void *)(v32 + 48) = 0;
      *(void *)(v32 + 56) = 0;
      *(void *)(v32 + 64) = 0;
      uint64_t v55 = v33;
      unint64_t v34 = *(void *)(a4 + 8);
      if (v34 >= *(void *)(a4 + 16))
      {
        std::string::size_type v36 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>((void **)a4, (uint64_t)__p);
        std::string::size_type v37 = (void **)v53[0];
        *(void *)(a4 + 8) = v36;
        if (v37)
        {
          int v38 = (void **)v53[1];
          unint64_t v39 = v37;
          if (v53[1] != v37)
          {
            do
            {
              if (*((char *)v38 - 1) < 0) {
                operator delete(*(v38 - 3));
              }
              v38 -= 3;
            }
            while (v38 != v37);
            unint64_t v39 = (void **)v53[0];
          }
          v53[1] = v37;
          operator delete(v39);
        }
      }
      else
      {
        long long v35 = *(_OWORD *)__p;
        *(void *)(v34 + 16) = v50;
        *(void *)(v34 + 24) = 0;
        *(_OWORD *)unint64_t v34 = v35;
        __p[1] = 0;
        std::string::size_type v50 = 0;
        __p[0] = 0;
        *(void *)(v34 + 32) = 0;
        *(void *)(v34 + 40) = 0;
        *(_OWORD *)(v34 + 24) = *(_OWORD *)v51;
        v51[0] = 0;
        v51[1] = 0;
        *(void *)(v34 + 40) = v52;
        *(void *)(v34 + 48) = 0;
        uint64_t v52 = 0;
        *(void *)(v34 + 56) = 0;
        *(void *)(v34 + 64) = 0;
        *(_OWORD *)(v34 + 48) = *(_OWORD *)v53;
        *(void *)(v34 + 64) = v54;
        v53[0] = 0;
        v53[1] = 0;
        uint64_t v54 = 0;
        *(void *)(v34 + 72) = v55;
        *(void *)(a4 + 8) = v34 + 80;
      }
      uint8x8_t v40 = (void **)v51[0];
      if (v51[0])
      {
        uint64_t v41 = (void **)v51[1];
        size_t v42 = v51[0];
        if (v51[1] != v51[0])
        {
          do
          {
            if (*((char *)v41 - 1) < 0) {
              operator delete(*(v41 - 3));
            }
            v41 -= 3;
          }
          while (v41 != v40);
          size_t v42 = v51[0];
        }
        v51[1] = v40;
        operator delete(v42);
      }
      if (SHIBYTE(v50) < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v58) < 0) {
LABEL_58:
        }
          operator delete((void *)v57);
      }
      else if (SHIBYTE(v58) < 0)
      {
        goto LABEL_58;
      }
      ++v9;
    }
    while (v9 != v44);
  }
}

void sub_1922139E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1922139FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  Espresso::AOT::SegmentsLowerer::SegmentFuncDef::~SegmentFuncDef((Espresso::AOT::SegmentsLowerer::SegmentFuncDef *)&__p);
  if (*(char *)(v35 - 97) < 0)
  {
    operator delete(*(void **)(v35 - 120));
    std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](a9);
    _Unwind_Resume(a1);
  }
  std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::~vector[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v14 = (char *)operator new(0x38uLL);
  v30[0] = v14;
  v30[1] = a1 + 16;
  char v31 = 0;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v9;
  uint64_t v17 = (std::string *)(v14 + 16);
  long long v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v14 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 6) = 0;
  char v31 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void *)a1;
  long long v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v14 = *v27;
LABEL_41:
    void *v27 = v14;
    goto LABEL_42;
  }
  *(void *)uint64_t v14 = *v16;
  *uint64_t v16 = v14;
  *(void *)(v26 + 8 * v4) = v16;
  if (*(void *)v14)
  {
    unint64_t v28 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    long long v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  v30[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30);
  return v14;
}

void sub_192213CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::ExtractSegment(void *a1, uint64_t a2)
{
  MEMORY[0x192FEFD50](v5, *a1);
  MIL::Transform::ProgramTransformer::ExtractSubProgram();
  MIL::Transform::ProgramTransformer::GetProgram(&v4, (MIL::Transform::ProgramTransformer *)v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a2);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v5);
}

void sub_192213DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    Espresso::AOT::AbstractMILCompiler::Run(a2);
    MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
    _Unwind_Resume(a1);
  }
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)va);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 56);
    uint64_t v5 = *(void **)(a2 + 48);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0) {
          operator delete(*(void **)(v4 - 24));
        }
        v4 -= 24;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a2 + 48);
    }
    *(void *)(a2 + 56) = v3;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    unint64_t v8 = *(void **)(a2 + 24);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      unint64_t v8 = *(void **)(a2 + 24);
    }
    *(void *)(a2 + 32) = v6;
    operator delete(v8);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v9 = *(void **)a2;
    operator delete(v9);
  }
}

char *std::vector<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 4) + 1;
  if (v4 > 0x333333333333333) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x199999999999999) {
    unint64_t v5 = 0x333333333333333;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x333333333333333) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 80 * v5;
  unint64_t v8 = (char *)operator new(80 * v5);
  unint64_t v9 = &v8[16 * (v3 >> 4)];
  *(_OWORD *)unint64_t v9 = *(_OWORD *)a2;
  unint64_t v10 = &v8[v7];
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint8x8_t v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *((void *)v11 + 8) = v12;
  *((void *)v11 + 9) = v13;
  uint64_t v14 = v9 + 80;
  unint64_t v15 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v16) {
      return v14;
    }
    goto LABEL_15;
  }
  uint64_t v17 = 0;
  do
  {
    long long v18 = &v9[v17];
    long long v19 = &v16[v17];
    long long v20 = *(_OWORD *)&v16[v17 - 80];
    *((void *)v18 - 8) = *(void *)&v16[v17 - 64];
    *((_OWORD *)v18 - 5) = v20;
    *((void *)v19 - 9) = 0;
    *((void *)v19 - 8) = 0;
    *((void *)v19 - 10) = 0;
    *(_OWORD *)(v18 - 56) = *(_OWORD *)&v16[v17 - 56];
    *((void *)v18 - 5) = *(void *)&v16[v17 - 40];
    *((void *)v19 - 7) = 0;
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *((_OWORD *)v18 - 2) = *(_OWORD *)&v16[v17 - 32];
    uint64_t v21 = *(void *)&v16[v17 - 8];
    *((void *)v18 - 2) = *(void *)&v16[v17 - 16];
    *((void *)v19 - 4) = 0;
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *((void *)v18 - 1) = v21;
    v17 -= 80;
  }
  while (&v16[v17] != v15);
  BOOL v22 = (char *)*a1;
  uint64_t v16 = (char *)a1[1];
  *a1 = &v9[v17];
  a1[1] = v14;
  a1[2] = v10;
  if (v16 != v22)
  {
    do
    {
      v16 -= 80;
      std::allocator<Espresso::AOT::SegmentsLowerer::SegmentFuncDef>::destroy[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)v16);
    }
    while (v16 != v22);
    uint64_t v16 = v22;
  }
  if (v16) {
LABEL_15:
  }
    operator delete(v16);
  return v14;
}

void std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 72)
  {
    uint64_t v6 = *(void *)(i - 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(i - 16);
      unint64_t v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 24;
        }
        while (v7 != v6);
        unint64_t v8 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v6;
      operator delete(v8);
    }
    uint64_t v9 = *(void *)(i - 48);
    if (v9)
    {
      uint64_t v10 = *(void *)(i - 40);
      unint64_t v5 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 24;
        }
        while (v10 != v9);
        unint64_t v5 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v9;
      operator delete(v5);
    }
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                long long v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    long long v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              BOOL v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (std::vector<std::string>::pointer j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  BOOL v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>(a1, v12, a3, a4, (uint64_t)v43);
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v13 || (float)(v30 * (float)v13) < v29)
  {
    BOOL v32 = 1;
    if (v13 >= 3) {
      BOOL v32 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v13);
    unint64_t v34 = vcvtps_u32_f32(v29 / v30);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v40 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        char v31 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v31) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v12;
        char v31 = *(void **)(*(void *)a1 + 8 * v12);
        if (v31) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v40 & v12;
      char v31 = *(void **)(*(void *)a1 + 8 * (v40 & v12));
      if (v31) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v43[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v41 >= v13) {
          v41 %= v13;
        }
      }
      else
      {
        v41 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  char v31 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v31) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v43[0] = *v31;
  void *v31 = v43[0];
LABEL_89:
  uint64_t v16 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_1922145D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  unint64_t v11 = v10;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v10 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v10 + 1) = *(_OWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 16);
  }
  uint64_t v12 = *a4;
  *((void *)v11 + 5) = *a4;
  if (v12) {
    operator new();
  }
  uint64_t result = 0;
  *((void *)v11 + 6) = 0;
  *a4 = 0;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_1922146CC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1922146E0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::FindSegmentDefs(uint64_t a1@<X1>, long long **a2@<X2>, int64x2_t *a3@<X8>)
{
  uint64_t v117 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unint64_t v4 = (uint64_t **)(*(uint64_t (**)(void))(*(void *)v117 + 56))();
  long long v135 = 0u;
  long long v136 = 0u;
  int v137 = 1065353216;
  long long v132 = 0u;
  long long v133 = 0u;
  int v134 = 1065353216;
  uint64_t v119 = v4;
  uint64_t v6 = **v4;
  if ((*v4)[1] != v6)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = *(Espresso::AOT **)(v6 + 16 * v7);
      Espresso::AOT::GetAllOpInputs(v8, v5, (uint64_t)__p);
      uint64_t v9 = v126;
      if (v126)
      {
        do
        {
          *(void *)&long long v141 = v9 + 2;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v135, (uint64_t)(v9 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v141)[5] = v7;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
        unint64_t v10 = (void **)v126;
        if (v126)
        {
          do
          {
            unint64_t v15 = (void **)*v10;
            if (*((char *)v10 + 39) < 0) {
              operator delete(v10[2]);
            }
            operator delete(v10);
            unint64_t v10 = v15;
          }
          while (v15);
        }
      }
      unint64_t v11 = __p[0];
      __p[0] = 0;
      if (v11) {
        operator delete(v11);
      }
      uint64_t v12 = (*(uint64_t (**)(Espresso::AOT *))(*(void *)v8 + 176))(v8);
      unint64_t v13 = *(MIL::IRNamedValueType ***)v12;
      uint8x8_t v14 = *(MIL::IRNamedValueType ***)(v12 + 8);
      if (*(MIL::IRNamedValueType ***)v12 != v14)
      {
        do
        {
          __p[0] = (void *)MIL::IRNamedValueType::GetName(*v13);
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v132, (uint64_t)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p)[5] = v7;
          v13 += 2;
        }
        while (v13 != v14);
      }
      ++v7;
      uint64_t v6 = **v119;
    }
    while (v7 < ((*v119)[1] - v6) >> 4);
  }
  uint64_t v16 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v117 + 88))(v117);
  uint64_t v18 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v117 + 88))(v117) + 8);
  *(_OWORD *)int8x16_t v129 = 0u;
  *(_OWORD *)uint32x4_t v130 = 0u;
  for (int i = 1065353216; v16 != v18; v16 += 24)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v129, v16, v16);
  a3->i64[0] = 0;
  a3->i64[1] = 0;
  a3[1].i64[0] = 0;
  unint64_t v19 = *a2;
  uint64_t v116 = a2[1];
  if (*a2 != v116)
  {
    do
    {
      long long v21 = *v19;
      uint64_t v126 = (void *)*((void *)v19 + 2);
      *(_OWORD *)std::__fs::filesystem::path __p = v21;
      *(_OWORD *)uint64_t v127 = 0u;
      memset(v128, 0, 32);
      std::string v123 = 0;
      unint64_t v124 = 0;
      unint64_t v122 = &v123;
      for (unint64_t j = *((void *)v19 + 1); j < *((void *)v19 + 2); unint64_t j = v120 + 1)
      {
        unint64_t v120 = j;
        unint64_t v23 = *(Espresso::AOT **)(**v119 + 16 * j);
        Espresso::AOT::GetAllOpInputs(v23, v17, (uint64_t)&v141);
        unint64_t v121 = v23;
        uint64_t v24 = v19;
        uint64_t v25 = (uint64_t *)v142;
        if ((void)v142)
        {
          do
          {
            uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v132, (uint64_t)(v25 + 2));
            if (!v26 || (unint64_t)v26[5] < *((void *)v24 + 1))
            {
              long long v27 = v123;
              unint64_t v28 = &v123;
              float v29 = &v123;
              if (v123)
              {
                int v30 = *((char *)v25 + 39);
                if (v30 >= 0) {
                  size_t v31 = *((unsigned __int8 *)v25 + 39);
                }
                else {
                  size_t v31 = v25[3];
                }
                if (v30 >= 0) {
                  BOOL v32 = v25 + 2;
                }
                else {
                  BOOL v32 = (const void *)v25[2];
                }
                while (1)
                {
                  while (1)
                  {
                    unint64_t v28 = (char **)v27;
                    uint64_t v35 = (char *)*((void *)v27 + 4);
                    unint64_t v33 = v27 + 32;
                    unint64_t v34 = v35;
                    int v36 = v33[23];
                    if (v36 >= 0) {
                      size_t v37 = v33[23];
                    }
                    else {
                      size_t v37 = *((void *)v33 + 1);
                    }
                    if (v36 >= 0) {
                      uint8x8_t v38 = v33;
                    }
                    else {
                      uint8x8_t v38 = v34;
                    }
                    if (v37 >= v31) {
                      size_t v39 = v31;
                    }
                    else {
                      size_t v39 = v37;
                    }
                    int v40 = memcmp(v32, v38, v39);
                    BOOL v41 = v31 < v37;
                    if (v40) {
                      BOOL v41 = v40 < 0;
                    }
                    if (!v41) {
                      break;
                    }
                    long long v27 = *v28;
                    float v29 = v28;
                    if (!*v28) {
                      goto LABEL_59;
                    }
                  }
                  int v42 = memcmp(v38, v32, v39);
                  BOOL v43 = v37 < v31;
                  if (v42) {
                    BOOL v43 = v42 < 0;
                  }
                  if (!v43) {
                    break;
                  }
                  long long v27 = v28[1];
                  if (!v27)
                  {
                    float v29 = v28 + 1;
                    goto LABEL_59;
                  }
                }
              }
              else
              {
LABEL_59:
                unint64_t v44 = (char *)operator new(0x38uLL);
                uint64_t v45 = (std::string *)(v44 + 32);
                if (*((char *)v25 + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(v45, (const std::string::value_type *)v25[2], v25[3]);
                }
                else
                {
                  long long v46 = *((_OWORD *)v25 + 1);
                  *((void *)v44 + 6) = v25[4];
                  *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
                }
                *(void *)unint64_t v44 = 0;
                *((void *)v44 + 1) = 0;
                *((void *)v44 + 2) = v28;
                std::__shared_weak_count *v29 = v44;
                if (*v122)
                {
                  unint64_t v122 = (char **)*v122;
                  unint64_t v44 = *v29;
                }
                uint64_t v47 = v123;
                BOOL v48 = v44 == v123;
                v44[24] = v44 == v123;
                if (!v48)
                {
                  do
                  {
                    uint64_t v49 = *((void *)v44 + 2);
                    if (*(unsigned char *)(v49 + 24)) {
                      break;
                    }
                    std::string::size_type v50 = *(char **)(v49 + 16);
                    uint64_t v51 = *(void *)v50;
                    if (*(void *)v50 == v49)
                    {
                      uint64_t v54 = *((void *)v50 + 1);
                      if (!v54 || (v55 = *(unsigned __int8 *)(v54 + 24), uint64_t v52 = (unsigned char *)(v54 + 24), v55))
                      {
                        if (*(char **)v49 == v44)
                        {
                          *(unsigned char *)(v49 + 24) = 1;
                          v50[24] = 0;
                          uint64_t v58 = *(void *)(v49 + 8);
                          *(void *)std::string::size_type v50 = v58;
                          if (v58) {
                            goto LABEL_79;
                          }
                        }
                        else
                        {
                          uint64_t v56 = *(uint64_t **)(v49 + 8);
                          uint64_t v57 = *v56;
                          *(void *)(v49 + 8) = *v56;
                          if (v57)
                          {
                            *(void *)(v57 + 16) = v49;
                            std::string::size_type v50 = *(char **)(v49 + 16);
                          }
                          v56[2] = (uint64_t)v50;
                          *(void *)(*(void *)(v49 + 16) + 8 * (**(void **)(v49 + 16) != v49)) = v56;
                          *uint64_t v56 = v49;
                          *(void *)(v49 + 16) = v56;
                          std::string::size_type v50 = (char *)v56[2];
                          uint64_t v49 = *(void *)v50;
                          *((unsigned char *)v56 + 24) = 1;
                          v50[24] = 0;
                          uint64_t v58 = *(void *)(v49 + 8);
                          *(void *)std::string::size_type v50 = v58;
                          if (v58) {
LABEL_79:
                          }
                            *(void *)(v58 + 16) = v50;
                        }
                        *(void *)(v49 + 16) = *((void *)v50 + 2);
                        *(void *)(*((void *)v50 + 2) + 8 * (**((void **)v50 + 2) != (void)v50)) = v49;
                        *(void *)(v49 + 8) = v50;
LABEL_29:
                        *((void *)v50 + 2) = v49;
                        break;
                      }
                    }
                    else if (!v51 || (v53 = *(unsigned __int8 *)(v51 + 24), uint64_t v52 = (unsigned char *)(v51 + 24), v53))
                    {
                      if (*(char **)v49 == v44)
                      {
                        uint64_t v60 = *((void *)v44 + 1);
                        *(void *)uint64_t v49 = v60;
                        if (v60)
                        {
                          *(void *)(v60 + 16) = v49;
                          std::string::size_type v50 = *(char **)(v49 + 16);
                        }
                        *((void *)v44 + 2) = v50;
                        *(void *)(*(void *)(v49 + 16) + 8 * (**(void **)(v49 + 16) != v49)) = v44;
                        *((void *)v44 + 1) = v49;
                        *(void *)(v49 + 16) = v44;
                        std::string::size_type v50 = (char *)*((void *)v44 + 2);
                        v44[24] = 1;
                        v50[24] = 0;
                        uint64_t v49 = *((void *)v50 + 1);
                        uint64_t v59 = *(char **)v49;
                        *((void *)v50 + 1) = *(void *)v49;
                        if (!v59) {
                          goto LABEL_28;
                        }
                      }
                      else
                      {
                        *(unsigned char *)(v49 + 24) = 1;
                        v50[24] = 0;
                        uint64_t v49 = *((void *)v50 + 1);
                        uint64_t v59 = *(char **)v49;
                        *((void *)v50 + 1) = *(void *)v49;
                        if (!v59) {
                          goto LABEL_28;
                        }
                      }
                      *((void *)v59 + 2) = v50;
LABEL_28:
                      *(void *)(v49 + 16) = *((void *)v50 + 2);
                      *(void *)(*((void *)v50 + 2) + 8 * (**((void **)v50 + 2) != (void)v50)) = v49;
                      *(void *)uint64_t v49 = v50;
                      goto LABEL_29;
                    }
                    *(unsigned char *)(v49 + 24) = 1;
                    unint64_t v44 = v50;
                    v50[24] = v50 == v47;
                    *uint64_t v52 = 1;
                  }
                  while (v50 != v47);
                }
                ++v124;
              }
            }
            uint64_t v25 = (uint64_t *)*v25;
          }
          while (v25);
          short float v61 = (void **)v142;
          if ((void)v142)
          {
            do
            {
              uint64_t v66 = (void **)*v61;
              if (*((char *)v61 + 39) < 0) {
                operator delete(v61[2]);
              }
              operator delete(v61);
              short float v61 = v66;
            }
            while (v66);
          }
        }
        uint64_t v62 = (void *)v141;
        *(void *)&long long v141 = 0;
        if (v62) {
          operator delete(v62);
        }
        uint64_t v63 = (*(uint64_t (**)(Espresso::AOT *))(*(void *)v121 + 176))(v121);
        unint64_t v19 = v24;
        uint64_t v64 = *(MIL::IRNamedValueType ***)v63;
        unint64_t v65 = *(MIL::IRNamedValueType ***)(v63 + 8);
        if (*(MIL::IRNamedValueType ***)v63 != v65)
        {
          do
          {
            uint64_t Name = MIL::IRNamedValueType::GetName(*v64);
            *(void *)&long long v141 = Name;
            uint32x4_t v69 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v135, Name, (uint64_t)&std::piecewise_construct, (long long **)&v141);
            if (v69[5] >= (unint64_t)v126
              || std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v129, Name))
            {
              unint64_t v70 = (_OWORD *)v128[2];
              if (v128[2] >= v128[3])
              {
                uint64_t v67 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v128[1], Name);
              }
              else
              {
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v128[2], *(const std::string::value_type **)Name, *(void *)(Name + 8));
                }
                else
                {
                  long long v71 = *(_OWORD *)Name;
                  *(void *)(v128[2] + 16) = *(void *)(Name + 16);
                  *unint64_t v70 = v71;
                }
                uint64_t v67 = (std::string *)((char *)v70 + 24);
              }
              v128[2] = v67;
            }
            v64 += 2;
          }
          while (v64 != v65);
        }
      }
      unint64_t v72 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v117 + 88))(v117);
      long long v141 = 0u;
      long long v142 = 0u;
      int v143 = 1065353216;
      uint64_t v73 = *v72;
      if (v72[1] != *v72)
      {
        uint64_t v74 = 0;
        unint64_t v75 = 0;
        do
        {
          uint64_t v138 = (std::string *)(v73 + v74);
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v141, v73 + v74, (uint64_t)&std::piecewise_construct, (long long **)&v138)[5] = v75++;
          uint64_t v73 = *v72;
          v74 += 24;
        }
        while (v75 < 0xAAAAAAAAAAAAAAABLL * ((v72[1] - *v72) >> 3));
      }
      uint64_t v138 = 0;
      uint64_t v139 = 0;
      unint64_t v140 = 0;
      uint64_t v77 = v128[1];
      uint64_t v76 = v128[2];
      if (v128[1] == v128[2])
      {
        int8x16_t v78 = 0;
        uint32x4_t v79 = 0;
      }
      else
      {
        do
        {
          if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v141, v77))
          {
            uint32x4_t v81 = v139;
            if ((unint64_t)v139 >= v140)
            {
              uint32x4_t v80 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v138, v77);
            }
            else
            {
              if (*(char *)(v77 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v139, *(const std::string::value_type **)v77, *(void *)(v77 + 8));
              }
              else
              {
                long long v82 = *(_OWORD *)v77;
                v139->__r_.__value_.__r.__words[2] = *(void *)(v77 + 16);
                *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
              }
              uint32x4_t v80 = v81 + 1;
            }
            uint64_t v139 = v80;
          }
          v77 += 24;
        }
        while (v77 != v76);
        int8x16_t v78 = v138;
        uint32x4_t v79 = v139;
      }
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3);
      if (v83 >= 2)
      {
        uint64_t v144 = &v141;
        unint64_t v84 = 126 - 2 * __clz(v83);
        uint64_t v85 = v79 == v78 ? 0 : v84;
        int8x16_t v78 = v138;
        unint64_t v86 = (std::string *)v128[1];
        if (v128[1] != v128[2])
        {
          do
          {
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v141, (uint64_t)v86))
            {
              std::string::operator=(v86, v78++);
            }
            ++v86;
          }
          while (v86 != (std::string *)v128[2]);
          int8x16_t v78 = v138;
        }
      }
      if (v78)
      {
        uint64_t v87 = v139;
        uint64_t v88 = (long long *)v78;
        if (v139 != v78)
        {
          do
          {
            if (SHIBYTE(v87[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v87[-1].__r_.__value_.__l.__data_);
            }
            --v87;
          }
          while (v87 != v78);
          uint64_t v88 = (long long *)v138;
        }
        uint64_t v139 = v78;
        operator delete(v88);
      }
      uint64_t v89 = (void **)v142;
      if ((void)v142)
      {
        do
        {
          uint64_t v93 = (void **)*v89;
          if (*((char *)v89 + 39) < 0) {
            operator delete(v89[2]);
          }
          operator delete(v89);
          uint64_t v89 = v93;
        }
        while (v93);
      }
      unint64_t v90 = (void *)v141;
      *(void *)&long long v141 = 0;
      if (v90) {
        operator delete(v90);
      }
      uint64_t v91 = v127[1];
      unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v127[1] - (char *)v127[0]) >> 3);
      if (v124 <= v92)
      {
        if (v124 < v92)
        {
          uint64_t v94 = &v127[0][v124];
          while (v91 != v94)
          {
            if (SHIBYTE(v91[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91[-1].__r_.__value_.__l.__data_);
            }
            --v91;
          }
          v127[1] = v94;
        }
      }
      else
      {
        std::vector<std::string>::__append((std::vector<std::string> *)v127, v124 - v92);
      }
      uint64_t v95 = v122;
      if (v122 != &v123)
      {
        uint64_t v96 = v127[0];
        do
        {
          std::string::operator=(v96, (const std::string *)(v95 + 4));
          uint64_t v97 = v95[1];
          if (v97)
          {
            do
            {
              uint64_t v98 = (char **)v97;
              uint64_t v97 = *(char **)v97;
            }
            while (v97);
          }
          else
          {
            do
            {
              uint64_t v98 = (char **)v95[2];
              BOOL v48 = *v98 == (char *)v95;
              uint64_t v95 = v98;
            }
            while (!v48);
          }
          ++v96;
          uint64_t v95 = v98;
        }
        while (v98 != &v123);
      }
      unint64_t v99 = a3->u64[1];
      if (v99 >= a3[1].i64[0])
      {
        uint64_t v101 = std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentDef>(a3, (uint64_t)__p);
      }
      else
      {
        uint64_t v100 = v126;
        *(_OWORD *)unint64_t v99 = *(_OWORD *)__p;
        *(void *)(v99 + 16) = v100;
        *(void *)(v99 + 24) = 0;
        *(void *)(v99 + 40) = 0;
        *(void *)(v99 + 48) = 0;
        *(void *)(v99 + 32) = 0;
        *(_OWORD *)(v99 + 24) = *(_OWORD *)v127;
        *(void *)(v99 + 40) = v128[0];
        v127[0] = 0;
        v127[1] = 0;
        v128[0] = 0;
        *(void *)(v99 + 56) = 0;
        *(void *)(v99 + 64) = 0;
        *(_OWORD *)(v99 + 48) = *(_OWORD *)&v128[1];
        *(void *)(v99 + 64) = v128[3];
        memset(&v128[1], 0, 24);
        uint64_t v101 = (char *)(v99 + 72);
      }
      a3->i64[1] = (uint64_t)v101;
      std::__tree<std::string>::destroy((uint64_t)&v122, v123);
      uint64_t v102 = v128[1];
      if (v128[1])
      {
        uint64_t v103 = v128[2];
        BOOL v104 = (void *)v128[1];
        if (v128[2] != v128[1])
        {
          do
          {
            if (*(char *)(v103 - 1) < 0) {
              operator delete(*(void **)(v103 - 24));
            }
            v103 -= 24;
          }
          while (v103 != v102);
          BOOL v104 = (void *)v128[1];
        }
        v128[2] = v102;
        operator delete(v104);
      }
      BOOL v105 = v127[0];
      if (v127[0])
      {
        unint64_t v106 = v127[1];
        uint64_t v20 = v127[0];
        if (v127[1] != v127[0])
        {
          do
          {
            if (SHIBYTE(v106[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v106[-1].__r_.__value_.__l.__data_);
            }
            --v106;
          }
          while (v106 != v105);
          uint64_t v20 = v127[0];
        }
        v127[1] = v105;
        operator delete(v20);
      }
      unint64_t v19 = (long long *)((char *)v19 + 24);
    }
    while (v19 != v116);
  }
  uint64_t v107 = (void **)v130[0];
  if (v130[0])
  {
    do
    {
      uint64_t v113 = (void **)*v107;
      if (*((char *)v107 + 39) < 0) {
        operator delete(v107[2]);
      }
      operator delete(v107);
      uint64_t v107 = v113;
    }
    while (v113);
  }
  uint64_t v108 = v129[0];
  v129[0] = 0;
  if (v108) {
    operator delete(v108);
  }
  uint64_t v109 = (void **)v133;
  if ((void)v133)
  {
    do
    {
      uint64_t v114 = (void **)*v109;
      if (*((char *)v109 + 39) < 0) {
        operator delete(v109[2]);
      }
      operator delete(v109);
      uint64_t v109 = v114;
    }
    while (v114);
  }
  v110 = (void *)v132;
  *(void *)&long long v132 = 0;
  if (v110) {
    operator delete(v110);
  }
  uint64_t v111 = (void **)v136;
  if ((void)v136)
  {
    do
    {
      unint64_t v115 = (void **)*v111;
      if (*((char *)v111 + 39) < 0) {
        operator delete(v111[2]);
      }
      operator delete(v111);
      uint64_t v111 = v115;
    }
    while (v115);
  }
  uint64_t v112 = (void *)v135;
  *(void *)&long long v135 = 0;
  if (v112) {
    operator delete(v112);
  }
}

void sub_19221536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,void **a39)
{
  BOOL v41 = a39;
  if (a39)
  {
    do
    {
      unint64_t v44 = (void **)*v41;
      if (*((char *)v41 + 39) < 0) {
        operator delete(v41[2]);
      }
      operator delete(v41);
      BOOL v41 = v44;
    }
    while (v44);
  }
  if (__p) {
    operator delete(__p);
  }
  int v42 = *(void ***)(v39 - 192);
  if (v42)
  {
    do
    {
      uint64_t v45 = (void **)*v42;
      if (*((char *)v42 + 39) < 0) {
        operator delete(v42[2]);
      }
      operator delete(v42);
      int v42 = v45;
    }
    while (v45);
  }
  BOOL v43 = *(void **)(v39 - 208);
  *(void *)(v39 - 208) = 0;
  if (v43) {
    operator delete(v43);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::GetAllOpInputs(Espresso::AOT *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v5 = (void *)(*(uint64_t (**)(Espresso::AOT *, const MIL::IROperation *))(*(void *)this + 160))(this, a2);
  uint64_t v6 = v5 + 1;
  unint64_t v7 = (void *)*v5;
  if ((void *)*v5 != v5 + 1)
  {
    do
    {
      uint64_t v11 = v7[7];
      uint64_t v12 = v7[8];
      while (v11 != v12)
      {
        uint64_t v13 = (*(uint64_t (**)(void))(**(void **)v11 + 32))();
        if (v13) {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v13, v13);
        }
        v11 += 16;
      }
      uint8x8_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          uint8x8_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          unint64_t v7 = v15;
        }
        while (!v16);
      }
      unint64_t v7 = v15;
    }
    while (v15 != v6);
  }
  unint64_t v8 = (uint64_t ***)(*(uint64_t (**)(Espresso::AOT *))(*(void *)this + 208))(this);
  uint64_t v9 = **v8;
  for (int i = (*v8)[1]; v9 != i; v9 += 2)
  {
    uint64_t v17 = *v9;
    *(_OWORD *)unint64_t v44 = 0u;
    *(_OWORD *)uint64_t v45 = 0u;
    int v46 = 1065353216;
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
    unint64_t v19 = *(MIL::IRNamedValueType ***)v18;
    uint64_t v20 = *(MIL::IRNamedValueType ***)(v18 + 8);
    if (*(MIL::IRNamedValueType ***)v18 != v20)
    {
      do
      {
        uint64_t Name = MIL::IRNamedValueType::GetName(*v19);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v44, Name, Name);
        v19 += 2;
      }
      while (v19 != v20);
    }
    BOOL v22 = (Espresso::AOT ****)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
    unint64_t v23 = **v22;
    uint64_t v24 = (*v22)[1];
    while (v23 != v24)
    {
      uint64_t v25 = *v23;
      (*(void (**)(void **__return_ptr, Espresso::AOT *))(*(void *)*v23 + 200))(&__p, *v23);
      long long v27 = (void **)__p;
      unint64_t v28 = v42;
      if (__p != v42)
      {
        do
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v44, (uint64_t)v27, (uint64_t)v27);
          v27 += 3;
        }
        while (v27 != v28);
        long long v27 = (void **)__p;
      }
      if (v27)
      {
        float v29 = v42;
        int v30 = v27;
        if (v42 != v27)
        {
          do
          {
            if (*((char *)v29 - 1) < 0) {
              operator delete(*(v29 - 3));
            }
            v29 -= 3;
          }
          while (v29 != v27);
          int v30 = __p;
        }
        int v42 = v27;
        operator delete(v30);
      }
      Espresso::AOT::GetAllOpInputs((uint64_t *)&__p, v25, v26);
      size_t v31 = v43;
      if (v43)
      {
        do
        {
          if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v44, (uint64_t)(v31 + 2)))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, (uint64_t)(v31 + 2), (uint64_t)(v31 + 2)); {
          size_t v31 = (void *)*v31;
          }
        }
        while (v31);
        BOOL v32 = (void **)v43;
        if (v43)
        {
          do
          {
            unint64_t v34 = (void **)*v32;
            if (*((char *)v32 + 39) < 0) {
              operator delete(v32[2]);
            }
            operator delete(v32);
            BOOL v32 = v34;
          }
          while (v34);
        }
      }
      unint64_t v33 = __p;
      std::__fs::filesystem::path __p = 0;
      if (v33) {
        operator delete(v33);
      }
      v23 += 2;
    }
    uint64_t v35 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    while (v36 != v37)
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v44, v36))std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, v36, v36); {
      v36 += 24;
      }
    }
    uint8x8_t v38 = (void **)v45[0];
    if (v45[0])
    {
      do
      {
        int v40 = (void **)*v38;
        if (*((char *)v38 + 39) < 0) {
          operator delete(v38[2]);
        }
        operator delete(v38);
        uint8x8_t v38 = v40;
      }
      while (v40);
    }
    uint64_t v39 = v44[0];
    v44[0] = 0;
    if (v39) {
      operator delete(v39);
    }
  }
}

void sub_192215A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, void *a17)
{
  unint64_t v19 = *(void ***)(v17 + 16);
  if (v19)
  {
    do
    {
      long long v21 = (void **)*v19;
      if (*((char *)v19 + 39) < 0) {
        operator delete(v19[2]);
      }
      operator delete(v19);
      unint64_t v19 = v21;
    }
    while (v21);
  }
  uint64_t v20 = *(void **)v17;
  *(void *)uint64_t v17 = 0;
  if (v20) {
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Espresso::AOT::SegmentsLowerer::SegmentDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::SegmentDef>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = a1->i64[1] - a1->i64[0];
  unint64_t v4 = 0x8E38E38E38E38E39 * (v3 >> 3) + 1;
  if (v4 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  uint64_t v25 = 0;
  uint64_t v26 = a1 + 1;
  if (v5 > 0x38E38E38E38E38ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 72 * v5;
  unint64_t v8 = (char *)operator new(72 * v5);
  uint64_t v9 = &v8[8 * (v3 >> 3)];
  v24.i64[1] = (uint64_t)v9;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  unint64_t v10 = &v8[v3];
  long long v11 = *(_OWORD *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 40);
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = v12;
  *(_OWORD *)(v10 + 24) = v11;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 8) = 0;
  *((_OWORD *)v10 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v10 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v13 = v9 + 72;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v14);
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = &v9[v16];
      uint64_t v18 = v14 + v16;
      uint64_t v19 = *(void *)(v14 + v16 - 56);
      *(_OWORD *)(v17 - 72) = *(_OWORD *)(v14 + v16 - 72);
      *((void *)v17 - 7) = v19;
      *((void *)v17 - 6) = 0;
      *((void *)v17 - 5) = 0;
      *((void *)v17 - 4) = 0;
      *((_OWORD *)v17 - 3) = *(_OWORD *)(v14 + v16 - 48);
      *((void *)v17 - 4) = *(void *)(v14 + v16 - 32);
      *(void *)(v18 - 48) = 0;
      *(void *)(v18 - 40) = 0;
      *(void *)(v18 - 32) = 0;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      *(_OWORD *)(v17 - 24) = *(_OWORD *)(v14 + v16 - 24);
      *((void *)v17 - 1) = *(void *)(v14 + v16 - 8);
      *(void *)(v18 - 24) = 0;
      *(void *)(v18 - 16) = 0;
      *(void *)(v18 - 8) = 0;
      v16 -= 72;
    }
    while (v14 + v16 != v15);
    v9 += v16;
    int64x2_t v20 = *a1;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v24 = v20;
  uint64_t v21 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[v7];
  uint64_t v25 = v21;
  std::__fs::filesystem::path __p = (void *)v20.i64[0];
  std::__split_buffer<Espresso::AOT::SegmentsLowerer::SegmentDef>::__destruct_at_end[abi:ne180100]((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void std::__split_buffer<Espresso::AOT::SegmentsLowerer::SegmentDef>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    uint64_t v6 = *(void *)(i - 24);
    if (v6)
    {
      uint64_t v7 = *(void *)(i - 16);
      unint64_t v8 = *(void **)(i - 24);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0) {
            operator delete(*(void **)(v7 - 24));
          }
          v7 -= 24;
        }
        while (v7 != v6);
        unint64_t v8 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v6;
      operator delete(v8);
    }
    uint64_t v9 = *(void *)(i - 48);
    if (v9)
    {
      uint64_t v10 = *(void *)(i - 40);
      unint64_t v5 = *(void **)(i - 48);
      if (v10 != v9)
      {
        do
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)(v10 - 24));
          }
          v10 -= 24;
        }
        while (v10 != v9);
        unint64_t v5 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v9;
      operator delete(v5);
    }
  }
}

void *std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,anonymous namespace'::ReorderSubProgramOutputs(std::vector<std::string> &,std::vector<std::string> const&)::$_0 &,std::string*,false>(unint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    unint64_t v176 = a2;
    uint64_t v178 = a2 - 24;
    uint64_t v167 = a2 - 72;
    uint64_t v170 = a2 - 48;
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = v176 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v176 - v10) >> 3);
          if (v6 || !v5)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v76 = *a3;
                *(void *)&long long v181 = v178;
                unint64_t v77 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v76, v178, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                uint64_t v78 = *a3;
                *(void *)&long long v181 = v10;
                if (v77 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                {
                  long long v79 = *(_OWORD *)v10;
                  uint64_t v182 = *(void *)(v10 + 16);
                  long long v181 = v79;
                  long long v80 = *(_OWORD *)v178;
                  *(void *)(v10 + 16) = *(void *)(v178 + 16);
                  *(_OWORD *)unint64_t v10 = v80;
                  long long v81 = v181;
                  *(void *)(v178 + 16) = v182;
                  *(_OWORD *)uint64_t v178 = v81;
                }
                break;
              case 3uLL:
                break;
              case 4uLL:
                break;
              case 5uLL:
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            if (a5)
            {
              if (v10 != v176)
              {
                uint64_t v82 = v10 + 24;
                if (v10 + 24 != v176)
                {
                  uint64_t v83 = 0;
                  uint64_t v84 = v10;
                  do
                  {
                    uint64_t v87 = v82;
                    uint64_t v88 = *a3;
                    *(void *)&long long v181 = v82;
                    unint64_t v89 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88, v82, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                    uint64_t v90 = *a3;
                    *(void *)&long long v181 = v84;
                    if (v89 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, v84, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                    {
                      long long v91 = *(_OWORD *)v87;
                      uint64_t v182 = *(void *)(v87 + 16);
                      long long v181 = v91;
                      *(void *)(v87 + 8) = 0;
                      *(void *)(v87 + 16) = 0;
                      *(void *)uint64_t v87 = 0;
                      uint64_t v92 = v83;
                      do
                      {
                        uint64_t v93 = v10 + v92;
                        uint64_t v94 = (void **)(v10 + v92 + 24);
                        if (*(char *)(v10 + v92 + 47) < 0) {
                          operator delete(*v94);
                        }
                        *(_OWORD *)uint64_t v94 = *(_OWORD *)v93;
                        *(void *)(v10 + v92 + 40) = *(void *)(v93 + 16);
                        *(unsigned char *)(v93 + 23) = 0;
                        *(unsigned char *)uint64_t v93 = 0;
                        if (!v92)
                        {
                          uint64_t v85 = v10;
                          goto LABEL_70;
                        }
                        uint64_t v95 = *a3;
                        *(void *)&long long v183 = &v181;
                        unint64_t v96 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v95, (uint64_t)&v181, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5];
                        uint64_t v97 = *a3;
                        *(void *)&long long v183 = v10 + v92 - 24;
                        v92 -= 24;
                      }
                      while (v96 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v97, v183, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5]);
                      uint64_t v85 = v10 + v92 + 24;
                      if (*(char *)(v85 + 23) < 0) {
                        operator delete(*(void **)v85);
                      }
LABEL_70:
                      long long v86 = v181;
                      *(void *)(v85 + 16) = v182;
                      *(_OWORD *)uint64_t v85 = v86;
                    }
                    uint64_t v82 = v87 + 24;
                    v83 += 24;
                    uint64_t v84 = v87;
                  }
                  while (v87 + 24 != v176);
                }
              }
            }
            else if (v10 != v176)
            {
              uint64_t v150 = v10 + 24;
              if (v10 + 24 != v176)
              {
                char v151 = (char *)(v10 + 47);
                do
                {
                  unint64_t v153 = v150;
                  uint64_t v154 = *a3;
                  *(void *)&long long v181 = v150;
                  unint64_t v155 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v154, v150, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                  uint64_t v156 = *a3;
                  *(void *)&long long v181 = a1;
                  if (v155 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v156, a1, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                  {
                    long long v157 = *(_OWORD *)v153;
                    uint64_t v182 = *(void *)(v153 + 16);
                    long long v181 = v157;
                    *(void *)(v153 + 8) = 0;
                    *(void *)(v153 + 16) = 0;
                    *(void *)unint64_t v153 = 0;
                    uint64_t v158 = v151;
                    do
                    {
                      uint64_t v159 = v158;
                      long long v160 = v158 - 23;
                      uint64_t v161 = v158 - 47;
                      if (*v158 < 0) {
                        operator delete(*(void **)v160);
                      }
                      *(_OWORD *)long long v160 = *(_OWORD *)v161;
                      *((void *)v160 + 2) = *((void *)v161 + 2);
                      *(v159 - 24) = 0;
                      *(v159 - 47) = 0;
                      uint64_t v162 = *a3;
                      *(void *)&long long v183 = &v181;
                      unint64_t v163 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v162, (uint64_t)&v181, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5];
                      uint64_t v164 = *a3;
                      *(void *)&long long v183 = v159 - 71;
                      v165 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v164, (uint64_t)(v159 - 71), (uint64_t)&std::piecewise_construct, (long long **)&v183);
                      uint64_t v158 = v159 - 24;
                    }
                    while (v163 < v165[5]);
                    uint64_t v166 = v159 - 47;
                    if (v166[23] < 0) {
                      operator delete(*(void **)v166);
                    }
                    long long v152 = v181;
                    *((void *)v166 + 2) = v182;
                    *(_OWORD *)uint64_t v166 = v152;
                  }
                  uint64_t v150 = v153 + 24;
                  v151 += 24;
                  a1 = v153;
                }
                while (v153 + 24 != v176);
              }
            }
            return;
          }
          if (!a4)
          {
            if (v10 != v176)
            {
              int64_t v98 = (v12 - 2) >> 1;
              unint64_t v171 = v10 + 24;
              int64_t v174 = v98;
              unint64_t v179 = v10;
              do
              {
                int64_t v100 = v98;
                if (v174 >= v98)
                {
                  uint64_t v101 = (2 * v98) | 1;
                  int64_t v168 = v98;
                  uint64_t v102 = v171 + 48 * v98;
                  uint64_t v103 = 2 * v98 + 2;
                  if (v103 < (uint64_t)v12)
                  {
                    uint64_t v104 = *a3;
                    *(void *)&long long v181 = v171 + 48 * v98;
                    unint64_t v105 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, v181, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                    uint64_t v106 = *a3;
                    *(void *)&long long v181 = v102 + 24;
                    if (v105 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v106, v102 + 24, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                    {
                      v102 += 24;
                      uint64_t v101 = v103;
                    }
                  }
                  uint64_t v107 = *a3;
                  *(void *)&long long v181 = v102;
                  uint64_t v108 = a1 + 24 * v168;
                  unint64_t v109 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v107, v102, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                  uint64_t v110 = *a3;
                  *(void *)&long long v181 = v108;
                  uint64_t v111 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v110, v108, (uint64_t)&std::piecewise_construct, (long long **)&v181);
                  int64_t v100 = v168;
                  if (v109 >= v111[5])
                  {
                    long long v112 = *(_OWORD *)v108;
                    uint64_t v182 = *(void *)(v108 + 16);
                    long long v181 = v112;
                    *(void *)(v108 + 8) = 0;
                    *(void *)(v108 + 16) = 0;
                    *(void *)uint64_t v108 = 0;
                    while (1)
                    {
                      uint64_t v113 = v102;
                      if (*(char *)(v108 + 23) < 0) {
                        operator delete(*(void **)v108);
                      }
                      long long v114 = *(_OWORD *)v102;
                      *(void *)(v108 + 16) = *(void *)(v102 + 16);
                      *(_OWORD *)uint64_t v108 = v114;
                      *(unsigned char *)(v102 + 23) = 0;
                      *(unsigned char *)uint64_t v102 = 0;
                      if (v174 < v101) {
                        break;
                      }
                      uint64_t v115 = (2 * v101) | 1;
                      uint64_t v102 = v171 + 48 * v101;
                      uint64_t v101 = 2 * v101 + 2;
                      if (v101 < (uint64_t)v12)
                      {
                        uint64_t v116 = *a3;
                        *(void *)&long long v183 = v102;
                        unint64_t v117 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v116, v102, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5];
                        uint64_t v118 = *a3;
                        *(void *)&long long v183 = v102 + 24;
                        if (v117 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v118, v102 + 24, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5])uint64_t v101 = v115; {
                        else
                        }
                          v102 += 24;
                      }
                      else
                      {
                        uint64_t v101 = v115;
                      }
                      uint64_t v119 = *a3;
                      *(void *)&long long v183 = v102;
                      unint64_t v120 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v119, v102, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5];
                      uint64_t v121 = *a3;
                      *(void *)&long long v183 = &v181;
                      uint64_t v108 = v113;
                      a1 = v179;
                      if (v120 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v121, (uint64_t)&v181, (uint64_t)&std::piecewise_construct, (long long **)&v183)[5])
                      {
                        if (*(char *)(v113 + 23) < 0) {
                          operator delete(*(void **)v113);
                        }
                        break;
                      }
                    }
                    long long v99 = v181;
                    *(void *)(v113 + 16) = v182;
                    *(_OWORD *)uint64_t v113 = v99;
                    int64_t v100 = v168;
                  }
                }
                int64_t v98 = v100 - 1;
              }
              while (v100);
              int64_t v122 = v11 / 0x18uLL;
              uint64_t v169 = (void *)(a1 + 8);
              std::string v123 = (_OWORD *)v176;
              do
              {
                unint64_t v126 = a1;
                uint64_t v127 = 0;
                unint64_t v172 = v123;
                uint64_t v175 = *(void **)v126;
                *(void *)&long long v183 = *v169;
                *(void *)((char *)&v183 + 7) = *(void *)((char *)v169 + 7);
                char v177 = *(unsigned char *)(v126 + 23);
                *(void *)(v126 + 8) = 0;
                *(void *)(v126 + 16) = 0;
                *(void *)unint64_t v126 = 0;
                do
                {
                  uint64_t v129 = v126 + 24 * v127 + 24;
                  uint64_t v130 = 2 * v127;
                  uint64_t v127 = (2 * v127) | 1;
                  uint64_t v131 = v130 + 2;
                  if (v130 + 2 < v122)
                  {
                    uint64_t v132 = *a3;
                    *(void *)&long long v181 = v129;
                    unint64_t v133 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v132, v129, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                    uint64_t v134 = *a3;
                    *(void *)&long long v181 = v129 + 24;
                    if (v133 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v134, v129 + 24, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                    {
                      v129 += 24;
                      uint64_t v127 = v131;
                    }
                  }
                  if (*(char *)(v126 + 23) < 0) {
                    operator delete(*(void **)v126);
                  }
                  long long v128 = *(_OWORD *)v129;
                  *(void *)(v126 + 16) = *(void *)(v129 + 16);
                  *(_OWORD *)unint64_t v126 = v128;
                  *(unsigned char *)(v129 + 23) = 0;
                  *(unsigned char *)uint64_t v129 = 0;
                  unint64_t v126 = v129;
                }
                while (v127 <= (uint64_t)((unint64_t)(v122 - 2) >> 1));
                std::string v123 = (_OWORD *)((char *)v172 - 24);
                if ((_OWORD *)v129 == (_OWORD *)((char *)v172 - 24))
                {
                  *(void *)uint64_t v129 = v175;
                  uint64_t v124 = *(void *)((char *)&v183 + 7);
                  *(void *)(v129 + 8) = v183;
                  *(void *)(v129 + 15) = v124;
                  *(unsigned char *)(v129 + 23) = v177;
                  a1 = v179;
                }
                else
                {
                  long long v135 = *v123;
                  *(void *)(v129 + 16) = *((void *)v172 - 1);
                  *(_OWORD *)uint64_t v129 = v135;
                  *((void *)v172 - 3) = v175;
                  uint64_t v136 = v183;
                  *(void *)((char *)v172 - 9) = *(void *)((char *)&v183 + 7);
                  *((void *)v172 - 2) = v136;
                  *((unsigned char *)v172 - 1) = v177;
                  a1 = v179;
                  uint64_t v137 = v129 - v179 + 24;
                  if (v137 >= 25)
                  {
                    unint64_t v138 = (v137 / 0x18uLL - 2) >> 1;
                    uint64_t v139 = v179 + 24 * v138;
                    uint64_t v140 = *a3;
                    *(void *)&long long v181 = v139;
                    unint64_t v141 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v140, v139, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
                    uint64_t v142 = *a3;
                    *(void *)&long long v181 = v129;
                    if (v141 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v142, v129, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
                    {
                      long long v143 = *(_OWORD *)v129;
                      uint64_t v182 = *(void *)(v129 + 16);
                      long long v181 = v143;
                      *(void *)(v129 + 8) = 0;
                      *(void *)(v129 + 16) = 0;
                      *(void *)uint64_t v129 = 0;
                      while (1)
                      {
                        uint64_t v144 = v139;
                        if (*(char *)(v129 + 23) < 0) {
                          operator delete(*(void **)v129);
                        }
                        long long v145 = *(_OWORD *)v139;
                        *(void *)(v129 + 16) = *(void *)(v139 + 16);
                        *(_OWORD *)uint64_t v129 = v145;
                        *(unsigned char *)(v139 + 23) = 0;
                        *(unsigned char *)uint64_t v139 = 0;
                        a1 = v179;
                        if (!v138) {
                          break;
                        }
                        unint64_t v138 = (v138 - 1) >> 1;
                        uint64_t v139 = v179 + 24 * v138;
                        uint64_t v146 = *a3;
                        uint64_t v180 = (long long *)v139;
                        unint64_t v147 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v146, v139, (uint64_t)&std::piecewise_construct, &v180)[5];
                        uint64_t v148 = *a3;
                        uint64_t v180 = &v181;
                        uint64_t v129 = v144;
                        if (v147 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v148, (uint64_t)&v181, (uint64_t)&std::piecewise_construct, &v180)[5])
                        {
                          a1 = v179;
                          if (*(char *)(v144 + 23) < 0) {
                            operator delete(*(void **)v144);
                          }
                          break;
                        }
                      }
                      long long v149 = v181;
                      *(void *)(v144 + 16) = v182;
                      *(_OWORD *)uint64_t v144 = v149;
                    }
                  }
                }
              }
              while (v122-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 < 0xC01)
          {
          }
          else
          {
            unint64_t v15 = v10 + 24 * v13;
            long long v16 = *(_OWORD *)v10;
            uint64_t v182 = *(void *)(v10 + 16);
            long long v181 = v16;
            long long v17 = *(_OWORD *)v14;
            *(void *)(v10 + 16) = *(void *)(v14 + 16);
            *(_OWORD *)unint64_t v10 = v17;
            long long v18 = v181;
            *(void *)(v14 + 16) = v182;
            *(_OWORD *)uint64_t v14 = v18;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v19 = *a3;
          *(void *)&long long v181 = v10 - 24;
          unint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, v10 - 24, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
          uint64_t v21 = *a3;
          *(void *)&long long v181 = v10;
          if (v20 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])break; {
          long long v48 = *(_OWORD *)v10;
          }
          uint64_t v184 = *(void *)(v10 + 16);
          long long v183 = v48;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)unint64_t v10 = 0;
          uint64_t v49 = *a3;
          *(void *)&long long v181 = &v183;
          unint64_t v50 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
          uint64_t v51 = *a3;
          *(void *)&long long v181 = v178;
          if (v50 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v51, v178, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5])
          {
            unint64_t v55 = v10 + 24;
            do
            {
              unint64_t v10 = v55;
              if (v55 >= v176) {
                break;
              }
              uint64_t v56 = *a3;
              *(void *)&long long v181 = &v183;
              unint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v56, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v58 = *a3;
              *(void *)&long long v181 = v10;
              uint64_t v59 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181);
              unint64_t v55 = v10 + 24;
            }
            while (v57 >= v59[5]);
          }
          else
          {
            do
            {
              uint64_t v52 = *a3;
              *(void *)&long long v181 = &v183;
              v10 += 24;
              unint64_t v53 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v54 = *a3;
              *(void *)&long long v181 = v10;
            }
            while (v53 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v54, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
          }
          unint64_t v60 = v176;
          if (v10 < v176)
          {
            unint64_t v60 = v176;
            do
            {
              uint64_t v61 = *a3;
              *(void *)&long long v181 = &v183;
              v60 -= 24;
              unint64_t v62 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v61, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v63 = *a3;
              *(void *)&long long v181 = v60;
            }
            while (v62 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v63, v60, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
          }
          while (v10 < v60)
          {
            long long v64 = *(_OWORD *)v10;
            uint64_t v182 = *(void *)(v10 + 16);
            long long v181 = v64;
            long long v65 = *(_OWORD *)v60;
            *(void *)(v10 + 16) = *(void *)(v60 + 16);
            *(_OWORD *)unint64_t v10 = v65;
            long long v66 = v181;
            *(void *)(v60 + 16) = v182;
            *(_OWORD *)unint64_t v60 = v66;
            do
            {
              uint64_t v67 = *a3;
              *(void *)&long long v181 = &v183;
              v10 += 24;
              unint64_t v68 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v67, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v69 = *a3;
              *(void *)&long long v181 = v10;
            }
            while (v68 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v69, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
            do
            {
              uint64_t v70 = *a3;
              *(void *)&long long v181 = &v183;
              v60 -= 24;
              unint64_t v71 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v70, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v72 = *a3;
              *(void *)&long long v181 = v60;
            }
            while (v71 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, v60, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
          }
          uint64_t v73 = (long long *)(v10 - 24);
          BOOL v5 = v10 - 24 >= a1;
          BOOL v6 = v10 - 24 == a1;
          if (v10 - 24 == a1)
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v74 = *v73;
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v74;
            *(unsigned char *)(v10 - 1) = 0;
            *(unsigned char *)(v10 - 24) = 0;
          }
          a5 = 0;
          long long v75 = v183;
          *(void *)(v10 - 8) = v184;
          *uint64_t v73 = v75;
        }
        long long v22 = *(_OWORD *)v10;
        uint64_t v184 = *(void *)(v10 + 16);
        long long v183 = v22;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)unint64_t v10 = 0;
        unint64_t v23 = v10;
        do
        {
          v23 += 24;
          uint64_t v24 = *a3;
          *(void *)&long long v181 = v23;
          unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, v23, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
          uint64_t v26 = *a3;
          *(void *)&long long v181 = &v183;
        }
        while (v25 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
        unint64_t v27 = v176;
        if (v23 - 24 == v10)
        {
          unint64_t v27 = v176;
          do
          {
            if (v23 >= v27) {
              break;
            }
            v27 -= 24;
            uint64_t v31 = *a3;
            *(void *)&long long v181 = v27;
            unint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v27, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
            uint64_t v33 = *a3;
            *(void *)&long long v181 = &v183;
          }
          while (v32 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
        }
        else
        {
          do
          {
            v27 -= 24;
            uint64_t v28 = *a3;
            *(void *)&long long v181 = v27;
            unint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, v27, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
            uint64_t v30 = *a3;
            *(void *)&long long v181 = &v183;
          }
          while (v29 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
        }
        unint64_t v10 = v23;
        if (v23 < v27)
        {
          unint64_t v34 = v27;
          do
          {
            long long v181 = *(_OWORD *)v10;
            long long v35 = v181;
            uint64_t v182 = *(void *)(v10 + 16);
            uint64_t v36 = v182;
            uint64_t v37 = *(void *)(v34 + 16);
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v34;
            *(void *)(v10 + 16) = v37;
            *(void *)(v34 + 16) = v36;
            *(_OWORD *)unint64_t v34 = v35;
            do
            {
              v10 += 24;
              uint64_t v38 = *a3;
              *(void *)&long long v181 = v10;
              unint64_t v39 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, v10, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v40 = *a3;
              *(void *)&long long v181 = &v183;
            }
            while (v39 < std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
            do
            {
              v34 -= 24;
              uint64_t v41 = *a3;
              *(void *)&long long v181 = v34;
              unint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v34, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5];
              uint64_t v43 = *a3;
              *(void *)&long long v181 = &v183;
            }
            while (v42 >= std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, (uint64_t)&v183, (uint64_t)&std::piecewise_construct, (long long **)&v181)[5]);
          }
          while (v10 < v34);
        }
        unint64_t v44 = (long long *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v45 = *v44;
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v45;
          *(unsigned char *)(v10 - 1) = 0;
          *(unsigned char *)(v10 - 24) = 0;
        }
        long long v46 = v183;
        *(void *)(v10 - 8) = v184;
        *unint64_t v44 = v46;
        if (v23 >= v27) {
          break;
        }
LABEL_35:
        a5 = 0;
      }
      {
        break;
      }
      if (!v47) {
        goto LABEL_35;
      }
    }
    a2 = v10 - 24;
    if (!v47) {
      continue;
    }
    break;
  }
}

void sub_192216E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_e5_compiler_compile_from_ir_program(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = operator new(0x28uLL);
  *unint64_t v8 = &unk_1EE392C98;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  unint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192217018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t espresso_create_plan(void *a1, char a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  long long v4 = (EspressoLight *)MEMORY[0x192FF2020]();
  BOOL v5 = v4;
  if (a1)
  {
    if (*a1 == 0x50FBC8A8A6F7B03CLL)
    {
      if ((a2 & 4) == 0)
      {
        if ((a2 & 0x10) == 0) {
          operator new();
        }
        operator new();
      }
      operator new();
    }
    EspressoLight::very_bad_client(v4);
  }
  return 0;
}

void sub_192217314(_Unwind_Exception *a1, int a2)
{
  MEMORY[0x192FF16B0](v2, 0x10B3C405AE87CAALL);
  if (a2 == 1)
  {
    BOOL v5 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v5, v6);
    __cxa_end_catch();
    JUMPOUT(0x1922170F8);
  }
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::espresso_plan(EspressoLight::espresso_plan *this, EspressoLight::espresso_context *a2, int a3)
{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  bzero((char *)this + 20, 0x414uLL);
  *(void *)this = &unk_1EE323F10;
  operator new();
}

void sub_192217770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v4);
  if (v1[1095] < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<EspressoLight::espresso_plan::priv_t>::reset[abi:ne180100](v2);
  EspressoLight::abstract_espresso_plan::~abstract_espresso_plan((EspressoLight::abstract_espresso_plan *)v1);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(Espresso::AOT::Backends::CostModel::OpEstimatorRegistry *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4A34A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4A34A8))
  {
    operator new();
  }
  uint64_t v1 = (char **)_MergedGlobals_0;
  v15[0] = &unk_1EE37D4B0;
  long long v16 = v15;
  __p[0] = (void *)0x6C6F6F705F677661;
  __p[1] = 0;
  char v18 = 8;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D4B0;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_6:
      uint64_t v2 = v16;
      if (v16 != v15) {
        goto LABEL_7;
      }
LABEL_11:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_12;
    }
  }
  operator delete(__p[0]);
  uint64_t v2 = v16;
  if (v16 == v15) {
    goto LABEL_11;
  }
LABEL_7:
  if (v2) {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
LABEL_12:
  v15[0] = &unk_1EE37D508;
  long long v16 = v15;
  __p[0] = (void *)0x6F6E5F6863746162;
  __p[1] = (void *)28018;
  char v18 = 10;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D508;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_16:
      uint64_t v3 = v16;
      if (v16 != v15) {
        goto LABEL_17;
      }
LABEL_21:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_22;
    }
  }
  operator delete(__p[0]);
  uint64_t v3 = v16;
  if (v16 == v15) {
    goto LABEL_21;
  }
LABEL_17:
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
LABEL_22:
  v15[0] = &unk_1EE37D560;
  long long v16 = v15;
  __p[0] = (void *)0x7461636E6F63;
  char v18 = 6;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D560;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_26:
      long long v4 = v16;
      if (v16 != v15) {
        goto LABEL_27;
      }
LABEL_31:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_32;
    }
  }
  operator delete(__p[0]);
  long long v4 = v16;
  if (v16 == v15) {
    goto LABEL_31;
  }
LABEL_27:
  if (v4) {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
LABEL_32:
  v15[0] = &unk_1EE37D5B8;
  long long v16 = v15;
  __p[0] = (void *)1986948963;
  char v18 = 4;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D5B8;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_36:
      BOOL v5 = v16;
      if (v16 != v15) {
        goto LABEL_37;
      }
LABEL_41:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_42;
    }
  }
  operator delete(__p[0]);
  BOOL v5 = v16;
  if (v16 == v15) {
    goto LABEL_41;
  }
LABEL_37:
  if (v5) {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
LABEL_42:
  v15[0] = &unk_1EE37D610;
  long long v16 = v15;
  strcpy((char *)__p, "conv_transpose");
  HIBYTE(__p[1]) = 0;
  char v18 = 14;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D610;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_46;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_46:
      BOOL v6 = v16;
      if (v16 != v15) {
        goto LABEL_47;
      }
LABEL_51:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_52;
    }
  }
  operator delete(__p[0]);
  BOOL v6 = v16;
  if (v16 == v15) {
    goto LABEL_51;
  }
LABEL_47:
  if (v6) {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
LABEL_52:
  v15[0] = &unk_1EE37D668;
  long long v16 = v15;
  __p[0] = (void *)0x6D75736E6965;
  char v18 = 6;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D668;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_56;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_56:
      uint64_t v7 = v16;
      if (v16 != v15) {
        goto LABEL_57;
      }
LABEL_61:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_62;
    }
  }
  operator delete(__p[0]);
  uint64_t v7 = v16;
  if (v16 == v15) {
    goto LABEL_61;
  }
LABEL_57:
  if (v7) {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
LABEL_62:
  v15[0] = &unk_1EE37D6C0;
  long long v16 = v15;
  __p[0] = (void *)7696999;
  char v18 = 3;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D6C0;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_66;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_66:
      unint64_t v8 = v16;
      if (v16 != v15) {
        goto LABEL_67;
      }
LABEL_71:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_72;
    }
  }
  operator delete(__p[0]);
  unint64_t v8 = v16;
  if (v16 == v15) {
    goto LABEL_71;
  }
LABEL_67:
  if (v8) {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
LABEL_72:
  v15[0] = &unk_1EE37D718;
  long long v16 = v15;
  __p[0] = (void *)0x6F6E5F726579616CLL;
  __p[1] = (void *)28018;
  char v18 = 10;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D718;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_76;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_76:
      uint64_t v9 = v16;
      if (v16 != v15) {
        goto LABEL_77;
      }
LABEL_81:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_82;
    }
  }
  operator delete(__p[0]);
  uint64_t v9 = v16;
  if (v16 == v15) {
    goto LABEL_81;
  }
LABEL_77:
  if (v9) {
    (*(void (**)(void *))(*v9 + 40))(v9);
  }
LABEL_82:
  v15[0] = &unk_1EE37D770;
  long long v16 = v15;
  __p[0] = (void *)1836348268;
  char v18 = 4;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D770;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_86;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_86:
      unint64_t v10 = v16;
      if (v16 != v15) {
        goto LABEL_87;
      }
LABEL_91:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_92;
    }
  }
  operator delete(__p[0]);
  unint64_t v10 = v16;
  if (v16 == v15) {
    goto LABEL_91;
  }
LABEL_87:
  if (v10) {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
LABEL_92:
  v15[0] = &unk_1EE37D7C8;
  long long v16 = v15;
  __p[0] = (void *)0x7261656E696CLL;
  char v18 = 6;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D7C8;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_96;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_96:
      uint64_t v11 = v16;
      if (v16 != v15) {
        goto LABEL_97;
      }
LABEL_101:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_102;
    }
  }
  operator delete(__p[0]);
  uint64_t v11 = v16;
  if (v16 == v15) {
    goto LABEL_101;
  }
LABEL_97:
  if (v11) {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
LABEL_102:
  v15[0] = &unk_1EE37D820;
  long long v16 = v15;
  __p[0] = (void *)0x6C756D74616DLL;
  char v18 = 6;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D820;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_106;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_106:
      unint64_t v12 = v16;
      if (v16 != v15) {
        goto LABEL_107;
      }
LABEL_111:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_112;
    }
  }
  operator delete(__p[0]);
  unint64_t v12 = v16;
  if (v16 == v15) {
    goto LABEL_111;
  }
LABEL_107:
  if (v12) {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
LABEL_112:
  v15[0] = &unk_1EE37D878;
  long long v16 = v15;
  __p[0] = (void *)0x6C6F6F705F78616DLL;
  __p[1] = 0;
  char v18 = 8;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D878;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_116;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_116:
      uint64_t v13 = v16;
      if (v16 != v15) {
        goto LABEL_117;
      }
LABEL_121:
      (*(void (**)(void *))(v15[0] + 32))(v15);
      goto LABEL_122;
    }
  }
  operator delete(__p[0]);
  uint64_t v13 = v16;
  if (v16 == v15) {
    goto LABEL_121;
  }
LABEL_117:
  if (v13) {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
LABEL_122:
  v15[0] = &unk_1EE37D8D0;
  long long v16 = v15;
  __p[0] = (void *)7237234;
  char v18 = 3;
  unint64_t v20 = v19;
  v19[0] = &unk_1EE37D8D0;
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_126;
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void))(*v20 + 40))();
    }
    if ((v18 & 0x80000000) == 0)
    {
LABEL_126:
      uint64_t result = v16;
      if (v16 != v15) {
        goto LABEL_127;
      }
      return (void *)(*(uint64_t (**)(void *))(v15[0] + 32))(v15);
    }
  }
  operator delete(__p[0]);
  uint64_t result = v16;
  if (v16 == v15) {
    return (void *)(*(uint64_t (**)(void *))(v15[0] + 32))(v15);
  }
LABEL_127:
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  return result;
}

void sub_1922189FC(_Unwind_Exception *a1)
{
}

void sub_192218A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void std::vector<Espresso::AOT::Backends::CostModel::anonymous namespace'::EstimatorRegisterEntry>::push_back[abi:ne180100](char **a1, long long *a2)
{
  BOOL v5 = a1[1];
  long long v4 = a1[2];
  if (v5 < v4)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a1[1], *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v6 = *a2;
      *((void *)v5 + 2) = *((void *)a2 + 2);
      *(_OWORD *)BOOL v5 = v6;
    }
    uint64_t v14 = *((void *)a2 + 6);
    if (v14)
    {
      if ((long long *)v14 == (long long *)((char *)a2 + 24))
      {
        *((void *)v5 + 6) = v5 + 24;
        (*(void (**)(void))(**((void **)a2 + 6) + 24))(*((void *)a2 + 6));
        goto LABEL_26;
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
    }
    *((void *)v5 + 6) = v14;
LABEL_26:
    long long v17 = v5 + 56;
    a1[1] = v5 + 56;
    goto LABEL_52;
  }
  uint64_t v7 = v5 - *a1;
  uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
  if ((unint64_t)(v8 + 1) > 0x492492492492492) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
  uint64_t v10 = 2 * v9;
  if (2 * v9 <= v8 + 1) {
    uint64_t v10 = v8 + 1;
  }
  if (v9 >= 0x249249249249249) {
    unint64_t v11 = 0x492492492492492;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11)
  {
    if (v11 > 0x492492492492492) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v12 = (char *)operator new(56 * v11);
    uint64_t v13 = (std::string *)&v12[8 * (v7 >> 3)];
    if ((*((char *)a2 + 23) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v13 = (std::string *)(8 * (v7 >> 3));
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
LABEL_13:
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *a2;
      v13->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      goto LABEL_21;
    }
  }
  std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *((void *)a2 + 1));
LABEL_21:
  unint64_t v15 = &v12[v7];
  uint64_t v16 = *((void *)a2 + 6);
  if (v16)
  {
    if ((long long *)v16 == (long long *)((char *)a2 + 24))
    {
      *((void *)v15 + 6) = v15 + 24;
      (*(void (**)(uint64_t, char *))(*(void *)v16 + 24))(v16, v15 + 24);
      goto LABEL_28;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  *((void *)v15 + 6) = v16;
LABEL_28:
  char v18 = &v12[56 * v11];
  long long v17 = &v13[2].__r_.__value_.__s.__data_[8];
  unint64_t v20 = *a1;
  uint64_t v19 = a1[1];
  if (v19 == *a1)
  {
    *a1 = (char *)v13;
    a1[1] = v17;
    a1[2] = v18;
    goto LABEL_50;
  }
  unint64_t v21 = 0;
  do
  {
    unint64_t v23 = (std::string *)((char *)v13 + v21 - 56);
    uint64_t v24 = (const std::string::value_type **)&v19[v21 - 56];
    if (v19[v21 - 33] < 0)
    {
      std::string::__init_copy_ctor_external(v23, *v24, *(void *)&v19[v21 - 48]);
    }
    else
    {
      long long v25 = *(_OWORD *)v24;
      *(void *)((char *)&v13[-1] + v21 - 16) = *(void *)&v19[v21 - 40];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
    }
    uint64_t v26 = (char *)v13 + v21;
    unint64_t v27 = &v19[v21];
    uint64_t v22 = *(void *)&v19[v21 - 8];
    if (!v22) {
      goto LABEL_31;
    }
    if (v27 - 32 != (char *)v22)
    {
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
LABEL_31:
      *((void *)v26 - 1) = v22;
      goto LABEL_32;
    }
    v13->__r_.__value_.__r.__words[v21 / 8 - 1] = (std::string::size_type)(v26 - 32);
    (*(void (**)(void))(**((void **)v27 - 1) + 24))(*((void *)v27 - 1));
LABEL_32:
    v21 -= 56;
  }
  while (&v19[v21] != v20);
  uint64_t v19 = *a1;
  uint64_t v28 = a1[1];
  *a1 = (char *)v13 + v21;
  a1[1] = v17;
  a1[2] = v18;
  if (v28 != v19)
  {
    unint64_t v29 = v28 - 32;
    while (1)
    {
      uint64_t v30 = (char *)*((void *)v28 - 1);
      if (v28 - 32 == v30)
      {
        (*(void (**)(char *))(*((void *)v28 - 4) + 32))(v28 - 32);
        if ((*(v28 - 33) & 0x80000000) == 0) {
          goto LABEL_42;
        }
LABEL_47:
        operator delete(*((void **)v28 - 7));
        v28 -= 56;
        v29 -= 56;
        if (v28 == v19) {
          break;
        }
      }
      else
      {
        if (v30) {
          (*(void (**)(char *))(*(void *)v30 + 40))(v30);
        }
        if (*(v28 - 33) < 0) {
          goto LABEL_47;
        }
LABEL_42:
        v28 -= 56;
        v29 -= 56;
        if (v28 == v19) {
          break;
        }
      }
    }
  }
LABEL_50:
  if (v19) {
    operator delete(v19);
  }
LABEL_52:
  a1[1] = v17;
}

void sub_192218E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!v10) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v10);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_0>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D4B0;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_1>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D508;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_3>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D5B8;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_2>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D560;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_7>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D718;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_6>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D6C0;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_5>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D668;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_4>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D610;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_12>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D8D0;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_11>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D878;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D820;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_9>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D7C8;
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_8>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE37D770;
}

uint64_t espresso_plan_execute_sync(uint64_t *a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v3 = *a1,
  }
  {
    (*(void (**)(uint64_t *))(v3 + 24))(a1);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 4294967290;
  }
  return v4;
}

void EspressoLight::espresso_plan::execute_sync(EspressoLight::espresso_plan *this)
{
  void (***v5)(unsigned char *__return_ptr, void, uint64_t);
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  unsigned char *v11;
  uint64_t v12;
  EspressoLight::espresso_plan *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t **v31;
  void **v32;
  void *v33;
  uint64_t v34;
  void **v35;
  void *v36;
  void *v37;
  uint64_t *v38;
  uint64_t **v39;
  long long v40;
  long long v41;
  int *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned char *v52;
  unsigned char *v53;
  size_t v54;
  void *v55;
  unsigned char *v56;
  void *v57;
  uint64_t *v58;
  uint64_t *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t **v62;
  void *v63;
  void **v64;
  void *v65;
  uint64_t v66;
  void **v67;
  void *v68;
  uint64_t *v69;
  long long v70;
  long long v71;
  long long v72;
  uint64_t v73;
  uint64_t v74;
  CVPixelBufferRef *v75;
  uint64_t v76;
  __CVBuffer *v77;
  int Width;
  int Height;
  int PlaneCount;
  void *BaseAddress;
  size_t BytesPerRow;
  size_t DataSize;
  int v84;
  unsigned char *v85;
  int *v86;
  unsigned char *v87;
  void *v88;
  unsigned char *v89;
  void *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void **v96;
  void *v97;
  void *v98;
  uint64_t v99;
  void **v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t v104;
  void (***v105)(uint64_t *__return_ptr, void);
  std::vector<int>::pointer end;
  uint64_t v107;
  void *v108;
  void *v109;
  std::runtime_error *v110;
  std::runtime_error *v111;
  std::runtime_error *v112;
  std::runtime_error *v113;
  std::runtime_error *v114;
  std::runtime_error *v115;
  std::runtime_error *exception;
  std::string *v117;
  long long v118;
  long long v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  void *v122;
  uint64_t **v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  uint64_t v128;
  void *v130[2];
  char v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  char v137;
  void *__p[2];
  char v139;
  int v140;
  void v141[9];
  unsigned char v142[20];
  int v143;
  unsigned char v144[56];
  long long v145;
  long long v146;
  long long v147;
  long long v148;
  long long v149;
  CVPixelBufferRef *v150;
  CVPixelBufferRef *v151;
  CVPixelBufferRef *v152;
  void *v153[2];
  long long v154;
  uint64_t v155;
  long long v156;
  uint64_t v157;
  std::__shared_weak_count **v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t, uint64_t);
  void *v161;
  long long **v162;
  std::vector<int> *p_buf;
  long long *v164;
  std::__shared_weak_count *v165;
  uint64_t v166;
  char *v167;
  std::string v168;
  char v169;
  std::vector<int> buf;
  __n128 (*v171)(__n128 *, __n128 *);
  void (*v172)(uint64_t);
  char *v173;
  char *v174;
  std::__shared_weak_count *v175;
  uint64_t v176;

  unint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 133);
  if (*(_DWORD *)(v1 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::to_string((std::string *)v141, *(_DWORD *)(*((void *)this + 133) + 160));
    unint64_t v117 = std::string::insert((std::string *)v141, 0, "Inconsistent phase of espresso_plan: ");
    uint64_t v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    *(void *)&v144[16] = *((void *)&v117->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v144 = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v144);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -5;
  }
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(uint64_t **)(v1 + 24);
  uint64_t v4 = *v3;
  BOOL v5 = *(void (****)(unsigned char *__return_ptr, void, uint64_t))(*v3 + 16);
  long long v6 = *(std::__shared_weak_count **)(*v3 + 24);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *(uint64_t **)(v1 + 24);
    uint64_t v4 = *v3;
  }
  LOBYTE(v141[0]) = *(unsigned char *)(v4 + 1352);
  memset((char *)v141 + 4, 0, 68);
  if (LOBYTE(v141[0]))
  {
    v141[1] = v2;
    v141[2] = v4;
    v141[3] = 0;
    v141[4] = 0;
    v141[5] = v2;
    v141[6] = v4;
    v141[7] = 0;
    v141[8] = 0;
    HIDWORD(v141[0]) = 723714128;
    kdebug_trace();
    uint64_t v3 = *(uint64_t **)(v1 + 24);
  }
  if (*(uint64_t **)(v1 + 32) != v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      unint64_t v9 = &v3[v7];
      unint64_t v11 = (unsigned char *)*v9;
      uint64_t v10 = (std::__shared_weak_count *)v9[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11[180])
      {
        v11[180] = 0;
        Espresso::shape_network_recursive((Espresso *)v11, (Espresso::net *)(v11 + 184), 0, 0);
        v11[180] = 0;
      }
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      ++v8;
      uint64_t v3 = *(uint64_t **)(v1 + 24);
      v7 += 2;
    }
    while (v8 < (uint64_t)(*(void *)(v1 + 32) - (void)v3) >> 4);
  }
  (**v5)(v144, v5, v2);
  unint64_t v12 = *(void *)v144;
  uint64_t v13 = this;
  uint64_t v14 = *((void *)this + 131);
  unint64_t v15 = *((void *)this + 132);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v12 + 112);
  *(void *)(v12 + 104) = v14;
  *(void *)(v12 + 112) = v15;
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  EspressoLight::espresso_plan::dispatch_task_on_compute_batch((uint64_t)this, v144, (uint64_t ***)(*((void *)this + 133) + 144));
  (*(void (**)(void))(**(void **)v144 + 16))(*(void *)v144);
  (*(void (**)(void))(**(void **)v144 + 24))(*(void *)v144);
  if (*(void *)&v144[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v144[8]);
  }
  if ((*((unsigned char *)this + 16) & 2) != 0) {
    EspressoLight::espresso_plan::wipe_layers(*((EspressoLight::espresso_plan **)this + 133));
  }
  char v18 = *((void *)this + 133);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 384);
    if (v19)
    {
      unint64_t v120 = v6;
      uint64_t v140 = 0;
      unint64_t v20 = *(void *)(v19 + 16);
      if (*(void *)(v19 + 24) != v20)
      {
        unint64_t v21 = 0;
        uint64_t v22 = 0;
        *(void *)&long long v17 = 136315138;
        uint64_t v119 = v17;
        do
        {
          unint64_t v23 = *(void *)(v20 + 8 * v22);
          uint64_t v24 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(v18 + 144) + 184), v21, &v140);
          long long v25 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)v13 + 133) + 144) + 208), v21, &v140);
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          Espresso::tracer::add_frame<espresso_buffer_t>(v23, v24 + 5, v25 + 5, (uint64_t *)__p);
          if (v139 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v26 = *((void *)v13 + 133);
          unint64_t v27 = *(void *)(*(void *)(*(void *)(v26 + 384) + 16) + 8 * v21);
          uint64_t v28 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(v26 + 144) + 16), v21, &v140);
          unint64_t v29 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)v13 + 133) + 144) + 40), v21, &v140);
          std::string::basic_string[abi:ne180100]<0>(&v136, "");
          std::string::basic_string[abi:ne180100]<0>(v144, "inputs");
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v27, (uint64_t *)v144, v28 + 5);
          if ((v144[23] & 0x80000000) != 0) {
            operator delete(*(void **)v144);
          }
          std::string::basic_string[abi:ne180100]<0>(&buf, "outputs");
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v27, (uint64_t *)&buf, v29 + 5);
          if (SHIBYTE(buf.__end_cap_.__value_) < 0) {
            operator delete(buf.__begin_);
          }
          std::string::basic_string[abi:ne180100]<0>(v153, "ground_truths");
          uint64_t v159 = 0;
          long long v160 = 0;
          uint64_t v158 = (std::__shared_weak_count **)&v159;
          Espresso::tracer::set_attachment<std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>(v27, (uint64_t *)v153, &v158);
          std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::destroy((void *)v159);
          if (SBYTE7(v154) < 0) {
            operator delete(v153[0]);
          }
          if (v137 < 0) {
            operator delete(v136);
          }
          uint64_t v30 = *(void *)(*(void *)(*(void *)(*((void *)v13 + 133) + 384) + 16) + 8 * v21);
          std::string::basic_string[abi:ne180100]<0>(v134, "inputs");
          uint64_t v31 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)v13 + 133) + 144) + 112), v21, &v140);
          int v125 = objc_msgSend(*(id *)(v30 + 80), "lastObject", v119);
          if (!v125)
          {
            uint64_t v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v110, "Invalid state: No frames exists in the trace");
            __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v135 >= 0) {
            unint64_t v32 = v134;
          }
          else {
            unint64_t v32 = (void **)v134[0];
          }
          uint64_t v33 = [NSString stringWithUTF8String:v32];
          uint64_t v127 = [v125 objectForKeyedSubscript:v33];

          if (!v127)
          {
            unint64_t v34 = objc_opt_new();
            if (v135 >= 0) {
              long long v35 = v134;
            }
            else {
              long long v35 = (void **)v134[0];
            }
            uint64_t v36 = [NSString stringWithUTF8String:v35];
            [v125 setObject:v34 forKeyedSubscript:v36];

            uint64_t v127 = (void *)v34;
          }
          if (!*(void *)v30)
          {
            uint64_t v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v111, "Invalid state: network not added");
            __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v37 = objc_opt_new();
          uint64_t v38 = v31[5];
          unint64_t v39 = v31 + 6;
          if (v38 != (uint64_t *)(v31 + 6))
          {
            do
            {
              if (*((char *)v38 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v144, (const std::string::value_type *)v38[4], v38[5]);
              }
              else
              {
                *(_OWORD *)uint64_t v144 = *((_OWORD *)v38 + 2);
                *(void *)&v144[16] = v38[6];
              }
              uint64_t v40 = *(_OWORD *)(v38 + 13);
              long long v145 = *(_OWORD *)(v38 + 11);
              uint64_t v146 = v40;
              unint64_t v147 = *(_OWORD *)(v38 + 15);
              LODWORD(v148) = *((_DWORD *)v38 + 34);
              uint64_t v41 = *(_OWORD *)(v38 + 9);
              *(_OWORD *)&v144[24] = *(_OWORD *)(v38 + 7);
              *(_OWORD *)&v144[40] = v41;
              long long v149 = 0uLL;
              *((void *)&v148 + 1) = 0;
              std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>((void *)&v148 + 1, (const void *)v38[18], v38[19], (v38[19] - v38[18]) >> 5);
              LODWORD(buf.__begin_) = 0;
              Espresso::create_context((int *)&buf, v153);
              std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,void>((uint64_t *)&v158, v153);
              unint64_t v42 = (int *)v158;
              uint64_t v43 = *(void *)v30 + 136;
              uint64_t v164 = (long long *)v144;
              unint64_t v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43, v144, &v164);
              Espresso::abstract_blob_container::shape((char *)&buf, *((void *)v44 + 5));
              *(_OWORD *)&v168.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(int *, std::vector<int> *, std::string *))(*(void *)v42 + 16))(v42, &buf, &v168);
              if (v168.__r_.__value_.__l.__size_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v168.__r_.__value_.__l.__size_);
              }
              if (v173)
              {
                int64_t v174 = v173;
                operator delete(v173);
              }
              buf.__begin_ = 0;
              buf.__end_ = 0;
              Espresso::fill_blob_with_images_batch_safe_v2((uint64_t)&buf, v42, (const char ***)&v148 + 1, v148, v45, (__n128 *)&v144[24]);
              if (buf.__end_) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__end_);
              }
              long long v46 = (std::__shared_weak_count *)v159;
              if (v159) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v159 + 8), 1uLL, memory_order_relaxed);
              }
              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v164, v42, v46);
              if (v46) {
                nitro::nitro_function::nitro_function(v46);
              }
              BOOL v47 = 0;
              long long v48 = (void *)*((void *)v164 + 3);
              uint64_t v49 = *((int *)v164 + 2);
              do
              {
                v49 *= *(int *)((char *)v164 + v47 + 12);
                v47 += 4;
              }
              while (v47 != 12);
              Espresso::abstract_blob_container::shape((char *)&buf, (uint64_t)v42);
              Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v142, (const Espresso::layer_shape *)&buf, 0);
              if (v173)
              {
                int64_t v174 = v173;
                operator delete(v173);
              }
              unint64_t v50 = v143;
              uint64_t v51 = v144[23];
              uint64_t v52 = *(unsigned char **)v144;
              Espresso::layer_nd_shape::shape_vector(&buf, (uint64_t)v142);
              if (v51 >= 0) {
                unint64_t v53 = v144;
              }
              else {
                unint64_t v53 = v52;
              }
              if (v50) {
                uint64_t v54 = 4 * v49;
              }
              else {
                uint64_t v54 = 4;
              }
              unint64_t v55 = Espresso::tracer::trace_blob_data(v30, (uint64_t)v53, v48, v54, (uint64_t *)&buf, 0);
              if (v144[23] >= 0) {
                uint64_t v56 = v144;
              }
              else {
                uint64_t v56 = *(unsigned char **)v144;
              }
              uint64_t v13 = this;
              unint64_t v57 = [NSString stringWithUTF8String:v56];
              [v37 setObject:v55 forKeyedSubscript:v57];

              if (buf.__begin_)
              {
                buf.__end_ = buf.__begin_;
                operator delete(buf.__begin_);
              }
              if (v165) {
                nitro::nitro_function::nitro_function(v165);
              }
              if (v159) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v159);
              }
              if (v153[1]) {
                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v153[1]);
              }
              if (*((void *)&v148 + 1))
              {
                *(void *)&long long v149 = *((void *)&v148 + 1);
                operator delete(*((void **)&v148 + 1));
              }
              if ((v144[23] & 0x80000000) != 0) {
                operator delete(*(void **)v144);
              }
              uint64_t v58 = (uint64_t *)v38[1];
              if (v58)
              {
                do
                {
                  uint64_t v59 = v58;
                  uint64_t v58 = (uint64_t *)*v58;
                }
                while (v58);
              }
              else
              {
                do
                {
                  uint64_t v59 = (uint64_t *)v38[2];
                  unint64_t v60 = *v59 == (void)v38;
                  uint64_t v38 = v59;
                }
                while (!v60);
              }
              uint64_t v38 = v59;
            }
            while (v59 != (uint64_t *)v39);
          }
          [v127 addEntriesFromDictionary:v37];

          if (v135 < 0) {
            operator delete(v134[0]);
          }
          uint64_t v61 = v140;
          long long v128 = *(void *)(*(void *)(*(void *)(*((void *)v13 + 133) + 384) + 16) + 8 * v140);
          std::string::basic_string[abi:ne180100]<0>(v132, "inputs");
          uint64_t v121 = v61;
          unint64_t v62 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)v13 + 133) + 144) + 136), v61, &v140);
          uint64_t v63 = [*(id *)(v128 + 80) lastObject];
          if (!v63)
          {
            long long v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v112, "Invalid state: No frames exists in the trace");
            __cxa_throw(v112, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v133 >= 0) {
            long long v64 = v132;
          }
          else {
            long long v64 = (void **)v132[0];
          }
          long long v65 = [NSString stringWithUTF8String:v64];
          int64_t v122 = [v63 objectForKeyedSubscript:v65];

          if (!v122)
          {
            long long v66 = objc_opt_new();
            if (v133 >= 0) {
              uint64_t v67 = v132;
            }
            else {
              uint64_t v67 = (void **)v132[0];
            }
            unint64_t v68 = [NSString stringWithUTF8String:v67];
            [v63 setObject:v66 forKeyedSubscript:v68];

            int64_t v122 = (void *)v66;
          }
          uint64_t v124 = v63;
          if (!*(void *)v128)
          {
            uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v113, "Invalid state: network not added");
            __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          unint64_t v126 = objc_opt_new();
          uint64_t v69 = v62[5];
          std::string v123 = v62 + 6;
          if (v69 != (uint64_t *)(v62 + 6))
          {
            do
            {
              if (*((char *)v69 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v144, (const std::string::value_type *)v69[4], v69[5]);
              }
              else
              {
                *(_OWORD *)uint64_t v144 = *((_OWORD *)v69 + 2);
                *(void *)&v144[16] = v69[6];
              }
              uint64_t v70 = *(_OWORD *)(v69 + 15);
              uint64_t v146 = *(_OWORD *)(v69 + 13);
              unint64_t v147 = v70;
              unint64_t v71 = *(_OWORD *)(v69 + 19);
              uint64_t v148 = *(_OWORD *)(v69 + 17);
              long long v149 = v71;
              uint64_t v72 = *(_OWORD *)(v69 + 9);
              *(_OWORD *)&v144[24] = *(_OWORD *)(v69 + 7);
              *(_OWORD *)&v144[40] = v72;
              long long v145 = *(_OWORD *)(v69 + 11);
              char v151 = 0;
              long long v152 = 0;
              uint64_t v150 = 0;
              uint64_t v73 = v69[22];
              long long v74 = v69[21];
              buf.__begin_ = (std::vector<int>::pointer)&v150;
              LOBYTE(buf.__end_) = 0;
              if (v73 - v74 < 0) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              long long v75 = (CVPixelBufferRef *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>((v73 - v74) >> 4);
              uint64_t v150 = v75;
              char v151 = v75;
              long long v152 = &v75[2 * v76];
              do
              {
                *long long v75 = *(CVPixelBufferRef *)v74;
                v75[1] = (CVPixelBufferRef)*(id *)(v74 + 8);
                v75 += 2;
                v74 += 16;
              }
              while (v74 != v73);
              char v151 = v75;
              unint64_t v77 = *v150;
              CVPixelBufferLockBaseAddress(*v150, 1uLL);
              Width = CVPixelBufferGetWidth(v77);
              Height = CVPixelBufferGetHeight(v77);
              PlaneCount = CVPixelBufferGetPlaneCount(v77);
              BaseAddress = CVPixelBufferGetBaseAddress(v77);
              BytesPerRow = CVPixelBufferGetBytesPerRow(v77);
              Dataunint64_t Size = CVPixelBufferGetDataSize(v77);
              uint64_t v84 = v144[23];
              uint64_t v85 = *(unsigned char **)v144;
              long long v86 = (int *)operator new(0xCuLL);
              buf.__end_ = v86 + 3;
              buf.__end_cap_.__value_ = v86 + 3;
              if (v84 >= 0) {
                uint64_t v87 = v144;
              }
              else {
                uint64_t v87 = v85;
              }
              *long long v86 = Height;
              v86[1] = Width;
              v86[2] = PlaneCount;
              buf.__begin_ = v86;
              uint64_t v88 = Espresso::tracer::trace_blob_data(v128, (uint64_t)v87, BaseAddress, DataSize, (uint64_t *)&buf, BytesPerRow);
              if (v144[23] >= 0) {
                unint64_t v89 = v144;
              }
              else {
                unint64_t v89 = *(unsigned char **)v144;
              }
              uint64_t v90 = [NSString stringWithUTF8String:v89];
              uint64_t v63 = v124;
              [v126 setObject:v88 forKeyedSubscript:v90];

              uint64_t v13 = this;
              if (buf.__begin_) {
                operator delete(buf.__begin_);
              }
              CVPixelBufferUnlockBaseAddress(v77, 1uLL);
              buf.__begin_ = (std::vector<int>::pointer)&v150;
              std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
              if ((v144[23] & 0x80000000) != 0) {
                operator delete(*(void **)v144);
              }
              long long v91 = (uint64_t *)v69[1];
              if (v91)
              {
                do
                {
                  uint64_t v92 = v91;
                  long long v91 = (uint64_t *)*v91;
                }
                while (v91);
              }
              else
              {
                do
                {
                  uint64_t v92 = (uint64_t *)v69[2];
                  unint64_t v60 = *v92 == (void)v69;
                  uint64_t v69 = v92;
                }
                while (!v60);
              }
              uint64_t v69 = v92;
            }
            while (v92 != (uint64_t *)v123);
          }
          [v122 addEntriesFromDictionary:v126];

          if (v133 < 0) {
            operator delete(v132[0]);
          }
          uint64_t v93 = *(void *)(*(void *)(*(void *)(*((void *)v13 + 133) + 384) + 16) + 8 * v121);
          std::string::basic_string[abi:ne180100]<0>(v130, "outputs");
          uint64_t v94 = *(void *)(*(void *)(*((void *)v13 + 133) + 24) + 16 * v121);
          uint64_t v95 = [*(id *)(v93 + 80) lastObject];
          if (!v95)
          {
            long long v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v114, "Invalid state: No frames exists in the trace");
            __cxa_throw(v114, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          if (v131 >= 0) {
            unint64_t v96 = v130;
          }
          else {
            unint64_t v96 = (void **)v130[0];
          }
          uint64_t v97 = [NSString stringWithUTF8String:v96];
          int64_t v98 = [v95 objectForKeyedSubscript:v97];

          if (!v98)
          {
            long long v99 = objc_opt_new();
            if (v131 >= 0) {
              int64_t v100 = v130;
            }
            else {
              int64_t v100 = (void **)v130[0];
            }
            uint64_t v101 = [NSString stringWithUTF8String:v100];
            [v95 setObject:v99 forKeyedSubscript:v101];

            int64_t v98 = (void *)v99;
          }
          if (!*(void *)v93)
          {
            uint64_t v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v115, "net is null in tracer.");
            __cxa_throw(v115, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v102 = objc_opt_new();
          uint64_t v103 = *(void **)(v94 + 256);
          if (v103 != (void *)(v94 + 264))
          {
            do
            {
              if (*((char *)v103 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v168, (const std::string::value_type *)v103[4], v103[5]);
              }
              else {
                int64_t v168 = *(std::string *)(v103 + 4);
              }
              uint64_t v169 = *((unsigned char *)v103 + 56);
              uint64_t v164 = 0;
              v165 = (std::__shared_weak_count *)&v164;
              uint64_t v166 = 0x2020000000;
              uint64_t v104 = *(void *)v93 + 136;
              *(void *)uint64_t v144 = &v168;
              uint64_t v167 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, (unsigned __int8 *)&v168, (long long **)v144)+ 40;
              buf.__begin_ = 0;
              buf.__end_ = (std::vector<int>::pointer)&buf;
              buf.__end_cap_.__value_ = (int *)0x4012000000;
              unint64_t v171 = __Block_byref_object_copy__5012;
              unint64_t v172 = __Block_byref_object_dispose__5013;
              unint64_t v173 = "";
              (*(void (**)(void (__cdecl *)(std::__shared_weak_count *__hidden)))(*(void *)v165[1].~__shared_weak_count
                                                                                           + 56))(v165[1].~__shared_weak_count);
              unint64_t v105 = (void (***)(uint64_t *__return_ptr, void))*((void *)v165[1].~__shared_weak_count + 9);
              uint64_t v158 = (std::__shared_weak_count **)MEMORY[0x1E4F143A8];
              uint64_t v159 = 3221225472;
              long long v160 = ___ZN8Espresso6tracer11trace_blobsIbEEP19NSMutableDictionaryRKNSt3__13mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEET_NS4_4lessISB_EENS9_INS4_4pairIKSB_SC_EEEEEE_block_invoke;
              uint64_t v161 = &unk_1E5747130;
              uint64_t v162 = &v164;
              p_uint8_t buf = &buf;
              Espresso::abstract_context::compute_batch_sync(v105, &v158);
              std::vector<std::string>::pointer end = buf.__end_;
              Espresso::abstract_blob_container::shape((char *)v153, (uint64_t)v165[1].~__shared_weak_count);
              uint64_t v107 = *((void *)end + 7);
              *(void *)uint64_t v144 = *((void *)end + 6);
              *(void *)&v144[8] = v107;
              if (v107) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
              }
              *(_OWORD *)&v144[16] = *(_OWORD *)v153;
              *(_OWORD *)&v144[32] = v154;
              *(void *)&v144[48] = v155;
              long long v145 = v156;
              *(void *)&uint64_t v146 = v157;
              long long v157 = 0;
              uint64_t v156 = 0uLL;
              Espresso::tracer::trace_blob(v93, v102, (uint64_t)&v168, (uint64_t)v144);
              if ((void)v145)
              {
                *((void *)&v145 + 1) = v145;
                operator delete((void *)v145);
              }
              if (*(void *)&v144[8]) {
                nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v144[8]);
              }
              if ((void)v156)
              {
                *((void *)&v156 + 1) = v156;
                operator delete((void *)v156);
              }
              _Block_object_dispose(&buf, 8);
              if (v175) {
                nitro::nitro_function::nitro_function(v175);
              }
              _Block_object_dispose(&v164, 8);
              if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v168.__r_.__value_.__l.__data_);
              }
              uint64_t v108 = (void *)v103[1];
              if (v108)
              {
                do
                {
                  unint64_t v109 = v108;
                  uint64_t v108 = (void *)*v108;
                }
                while (v108);
              }
              else
              {
                do
                {
                  unint64_t v109 = (void *)v103[2];
                  unint64_t v60 = *v109 == (void)v103;
                  uint64_t v103 = v109;
                }
                while (!v60);
              }
              uint64_t v103 = v109;
            }
            while (v109 != (void *)(v94 + 264));
          }
          [v98 addEntriesFromDictionary:v102];

          uint64_t v13 = this;
          if (v131 < 0) {
            operator delete(v130[0]);
          }
          Espresso::tracer::save_frames(*(Espresso::tracer **)(*(void *)(*(void *)(*((void *)this + 133) + 384)
                                                                         + 16)
                                                             + 8 * v121));
          unint64_t v21 = v121 + 1;
          uint64_t v140 = v121 + 1;
          uint64_t v22 = (int)v121 + 1;
          char v18 = *((void *)this + 133);
          unint64_t v20 = *(void *)(*(void *)(v18 + 384) + 16);
        }
        while (v22 < (*(void *)(*(void *)(v18 + 384) + 24) - v20) >> 3);
      }
      long long v6 = v120;
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v141);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19221A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((v66 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v66)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v65);
  goto LABEL_8;
}

void sub_19221A65C()
{
}

void sub_19221A66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19221AA74);
}

void sub_19221A90C()
{
}

void sub_19221A91C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v63 = *(void **)(v62 - 208);
  if (v63) {
    operator delete(v63);
  }
  JUMPOUT(0x19221A9F8);
}

void sub_19221A984()
{
}

void sub_19221A98C()
{
}

void sub_19221A994()
{
  uint64_t v2 = *(std::__shared_weak_count **)(v1 - 232);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  uint64_t v3 = *(void **)(v1 - 168);
  if (v3)
  {
    *(void *)(v1 - 160) = v3;
    operator delete(v3);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::pair<std::string const,EspressoLight::input_image_buffers>::~pair((uint64_t)&v10);

  if (v8 < 0) {
    operator delete(v7);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v9);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  JUMPOUT(0x19221AA90);
}

void sub_19221A9B8()
{
  if (v0) {
    JUMPOUT(0x19221A9C0);
  }
  if (v8[29]) {
    nitro::nitro_function::nitro_function();
  }
  if (v8[21]) {
    nitro::nitro_function::nitro_function();
  }
  std::pair<std::string const,EspressoLight::input_image_buffers>::~pair(v8);

  if (v6 < 0) {
    operator delete(v5);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v7);
  if (v2) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x19221AA90);
}

void sub_19221A9C8()
{
  if (*(void *)(v1 - 200)) {
    JUMPOUT(0x19221A9D4);
  }
  if (v8[29]) {
    nitro::nitro_function::nitro_function();
  }
  if (v8[21]) {
    nitro::nitro_function::nitro_function();
  }
  std::pair<std::string const,EspressoLight::input_image_buffers>::~pair(v8);

  if (v6 < 0) {
    operator delete(v5);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&v7);
  if (v2) {
    nitro::nitro_function::nitro_function();
  }
  JUMPOUT(0x19221AA90);
}

void sub_19221A9DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19221AA4CLL);
}

void sub_19221A9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void EspressoLight::espresso_plan::dispatch_task_on_compute_batch(uint64_t a1, void *a2, uint64_t ***a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 1064);
  EspressoLight::plan_task_t::disable_memory_lingering_if_needed(*a3, (void *)*a2);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7 != *(void **)(v6 + 32)) {
    (*(void (**)(void, void))(*(void *)*a2 + 48))(*a2, *v7);
  }
  uint64_t v9 = *a3;
  char v8 = (uint64_t)a3[1];
  unint64_t v34 = (void *)(v6 + 24);
  long long v35 = v9;
  uint64_t v36 = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a2[1];
  uint64_t v37 = (void *)*a2;
  uint64_t v38 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(void *)(v6 + 32) != *(void *)(v6 + 24))
  {
    unint64_t v11 = 0;
    do
    {
      LODWORD(v39[0]) = v11;
      for (uint64_t i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v35 + 29, v11, v39)+ 7); i; uint64_t i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, void *))(*i[2] + 168))(i[2], a2);
      ++v11;
    }
    while (v11 < (uint64_t)(v34[1] - *v34) >> 4);
  }
  uint64_t v13 = (long long *)(v5 + 1072);
  size_t v14 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  size_t v15 = v14;
  if ((*(char *)(v5 + 1095) & 0x80000000) == 0)
  {
    uint64_t v16 = (long long *)(v5 + 1072);
    if (v15 != *(unsigned __int8 *)(v5 + 1095)) {
      goto LABEL_19;
    }
LABEL_18:
    BOOL v28 = memcmp(v16, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v15) == 0;
    goto LABEL_20;
  }
  if (v14 == *(void *)(v5 + 1080))
  {
    if (v14 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v16 = *(long long **)v13;
    goto LABEL_18;
  }
LABEL_19:
  BOOL v28 = 0;
LABEL_20:
  uint64_t v17 = *(void *)(v6 + 24);
  if (*(void *)(v6 + 32) != v17)
  {
    unint64_t v18 = 0;
    uint64_t v19 = v5;
    do
    {
      long long v20 = *(_OWORD *)(v17 + 16 * v18);
      long long v29 = v20;
      unint64_t v21 = *(std::__shared_weak_count **)(v17 + 16 * v18 + 8);
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (v28)
      {
        uint64_t v22 = (std::__shared_weak_count *)a3[1];
        v33[0] = (uint64_t)*a3;
        v33[1] = (uint64_t)v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v32 = v20;
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        EspressoLight::espresso_plan::__copy_inputs(v33, (uint64_t)a2, v18, (uint64_t *)&v32);
        if (*((void *)&v32 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v32 + 1));
        }
        if (v22) {
          nitro::nitro_function::nitro_function(v22);
        }
        uint64_t v23 = v29;
        if (*(void *)(*(void *)(v5 + 1064) + 184))
        {
          for (unint64_t j = 0; j < (uint64_t)(*(void *)(v29 + 40) - *(void *)(v29 + 32)) >> 4; unint64_t j = v25)
          {
            unint64_t v25 = j + 1;
            Espresso::net::__forward(v29, a2, j, j + 1);
          }
          goto LABEL_41;
        }
      }
      else
      {
        if (*(void *)(*(void *)(v5 + 1064) + 184)) {
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("hose_fd is supported for main function only");
        }
        uint64_t v26 = v20 + 984;
        if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v20 + 984), (unsigned __int8 *)v13))
        {
          if (*(char *)(v5 + 1095) < 0) {
            uint64_t v13 = *(long long **)v13;
          }
          v39[0] = v13;
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("subnetwork with name %s does not exist", v39);
        }
        v39[0] = v13;
        uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v26, (uint64_t)v13, (uint64_t)&std::piecewise_construct, v39)[5];
      }
      Espresso::net::__forward(v23, a2, 0, 0xFFFFFFFFLL);
LABEL_41:
      unint64_t v27 = (std::__shared_weak_count *)a3[1];
      v31[0] = *a3;
      v31[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v30 = v29;
      uint64_t v5 = v19;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      EspressoLight::espresso_plan::__copy_outputs((uint64_t)v31, (uint64_t)a2, v18, (uint64_t *)&v30);
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      if (v27) {
        nitro::nitro_function::nitro_function(v27);
      }
      if (v21) {
        nitro::nitro_function::nitro_function(v21);
      }
      ++v18;
      uint64_t v17 = *(void *)(v6 + 24);
    }
    while (v18 < (*(void *)(v6 + 32) - v17) >> 4);
  }
  scoped_storage_swapper::~scoped_storage_swapper((scoped_storage_swapper *)&v34);
}

void sub_19221AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  scoped_storage_swapper::~scoped_storage_swapper((scoped_storage_swapper *)va);
  _Unwind_Resume(a1);
}

void scoped_storage_swapper::~scoped_storage_swapper(scoped_storage_swapper *this)
{
  if (*(void *)(*(void *)this + 8) != **(void **)this)
  {
    unint64_t v2 = 0;
    do
    {
      int v7 = v2;
      for (uint64_t i = (uint64_t **)*((void *)std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 232), v2, &v7)+ 7); i; uint64_t i = (uint64_t **)*i)
        (*(void (**)(uint64_t *, char *))(*i[2] + 176))(i[2], (char *)this + 24);
      uint64_t v4 = std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 1) + 232), v2, &v7);
      std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear((uint64_t)(v4 + 40));
      ++v2;
    }
    while (v2 < (uint64_t)(*(void *)(*(void *)this + 8) - **(void **)this) >> 4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

char *std::__tree<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::__map_value_compare<int,std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::unordered_set<std::shared_ptr<Espresso::abstract_blob_container>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    int v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(void *)int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    std::__shared_weak_count *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void Espresso::net::__forward(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    std::string::operator=((std::string *)(*a2 + 8), (const std::string *)(a1 + 424));
  }
  uint64_t v8 = *(void *)(a1 + 968);
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
    (*(void (**)(uint64_t, void *, void **, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2, __p, a3, a4);
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v9 + 124))
  {
    uint64_t v10 = *(void *)(a1 + 1256);
    if (v10)
    {
      if (*(unsigned char *)(v10 + 124))
      {
        Espresso::net::__forward_network_two_compilers(a1, (uint64_t)a2);
        return;
      }
    }
  }
  unsigned int v11 = (***(uint64_t (****)(void))(v9 + 8))(*(void *)(v9 + 8));
  unint64_t v12 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(a1 + 528), v11);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12[3];
    size_t v15 = (std::__shared_weak_count *)v13[4];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v14 + 24))(v14, a2);
      if (!v15) {
        return;
      }
      goto LABEL_17;
    }
  }
  else
  {
    size_t v15 = 0;
  }
  if ((a4 & 0x80000000) != 0) {
    a4 = (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4;
  }
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  __p[1] = (void *)a1;
  uint64_t v27 = v17;
  uint64_t v28 = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  char v29 = 0;
  int v18 = a4 - a3;
  if ((int)a4 > (int)a3)
  {
    uint64_t v19 = (int)a3;
    uint64_t v20 = 16 * (int)a3;
    do
    {
      if (*a2) {
        *(void *)(*a2 + 48) = v19;
      }
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(std::__shared_weak_count **)(v21 + v20 + 8);
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v21 = *(void *)(a1 + 32);
      }
      if (*(unsigned char *)(a1 + 1352))
      {
        int v23 = std::string::compare((const std::string *)(*(void *)(v21 + v20) + 40), "context_transfer");
        uint64_t v21 = *(void *)(a1 + 32);
        if (v23)
        {
          uint64_t v24 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(v21 + v20) + 64) + 8) + 8);
          int v25 = (**v24)(v24);
          JITBackendSignpostEmitter::nextPlatform((JITBackendSignpostEmitter *)__p, v25);
          uint64_t v21 = *(void *)(a1 + 32);
        }
      }
      (*(void (**)(void, void *, uint64_t))(**(void **)(v21 + v20) + 8))(*(void *)(v21 + v20), a2, v19);
      if (v22) {
        nitro::nitro_function::nitro_function(v22);
      }
      ++v19;
      v20 += 16;
      --v18;
    }
    while (v18);
  }
  JITBackendSignpostEmitter::~JITBackendSignpostEmitter((JITBackendSignpostEmitter *)__p);
  if (v15) {
LABEL_17:
  }
    nitro::nitro_function::nitro_function(v15);
}

void sub_19221B3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::string *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::abstract_batch::setup_for_network(uint64_t this, Espresso::net *a2)
{
  *(void *)(this + 32) = a2;
  *(unsigned char *)(this + 40) = *((unsigned char *)a2 + 1352);
  return this;
}

void EspressoLight::espresso_plan::__copy_inputs(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  int v66 = a3;
  uint64_t v8 = *(const void **)a2;
  if (*(void *)a2
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a2 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = *(const void **)a2;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v58 = 0;
  }
  uint64_t v10 = *(void *)(a2 + 8);
  *(void *)&long long v65 = v8;
  *((void *)&v65 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v11 = *(uint64_t (****)(void))(*(void *)(*a4 + 16) + 8);
  unsigned int v12 = (**v11)(v11);
  BOOL v13 = v12 == 10008 || v12 == 10011;
  LODWORD(v14) = v13 || v12 >> 1 == 5003;
  uint64_t v56 = v9;
  size_t v15 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 64), a3, &v66);
  uint64_t v16 = v15[5];
  uint64_t v17 = v15 + 6;
  if (v16 != (uint64_t *)(v15 + 6))
  {
    if (v58) {
      uint64_t v14 = v14;
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v57 = a1;
    do
    {
      Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v63);
      if (v14)
      {
        int v18 = *(std::__shared_weak_count **)(v63 + 80);
        v62[0] = *(void *)(v63 + 72);
        v62[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::switch_engine_batch::switch_to_engine(v58, (uint64_t)v62, 0, &v61);
        uint64_t v19 = (std::__shared_weak_count *)*((void *)&v65 + 1);
        long long v65 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        if (v19) {
          nitro::nitro_function::nitro_function(v19);
        }
        if (v18) {
          nitro::nitro_function::nitro_function(v18);
        }
      }
      int v20 = v66;
      for (uint64_t i = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 112), v66, &v66)[6]; i; uint64_t i = (uint64_t *)*i)
      {
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, i + 4))
        {
          if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(i + 4, v16 + 4))
          {
            uint64_t v40 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 112), v20, &v66);
            uint64_t v41 = std::__tree<std::__value_type<std::string,EspressoLight::input_image_buffers>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_image_buffers>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_image_buffers>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40 + 5, v16 + 4, (uint64_t)(v16 + 4));
            unint64_t v44 = (const char ***)(v41 + 18);
            uint64_t v43 = v41[18];
            uint64_t v45 = *((unsigned int *)v41 + 34);
            while (v43 != v41[19])
            {
              if (!*v43)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::runtime_error::runtime_error(exception, &v61);
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              v43 += 4;
            }
            if (*((char *)v16 + 55) < 0) {
              std::string::__init_copy_ctor_external(&v60, (const std::string::value_type *)v16[4], v16[5]);
            }
            else {
              std::string v60 = *(std::string *)(v16 + 4);
            }
            Espresso::fill_network_with_images_batch_safe_v2((void **)&v65, a4, v44, v45, v42, (__n128 *)(v44 - 11), (std::string::size_type)&v60);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            goto LABEL_73;
          }
          ++i;
        }
      }
      uint64_t v22 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 136), v20, &v66);
      uint64_t v23 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v22[6], v16 + 4);
      uint64_t v24 = *a1;
      if (v23)
      {
        int v25 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v24 + 136), v20, &v66);
        uint64_t v26 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25 + 5, v16 + 4, (uint64_t)(v16 + 4));
        for (unint64_t j = v26[21]; j != v26[22]; j += 2)
        {
          if (*(_OWORD *)j == 0)
          {
            uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(v54, &v61);
            __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = 0uLL;
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61.__r_.__value_.__l.__size_;
        Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v59);
        uint64_t v67 = (long long *)(v16 + 4);
        uint64_t v28 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v61, v16 + 4, &v67);
        uint64_t v29 = v14;
        long long v30 = v17;
        uint64_t v31 = (std::__shared_weak_count *)v28[8];
        *(_OWORD *)(v28 + 7) = v59;
        if (v31) {
          nitro::nitro_function::nitro_function(v31);
        }
        uint64_t v33 = v26[21];
        long long v32 = v26[22];
        if (v33 != v32)
        {
          uint64_t v34 = 0;
          long long v35 = v26 + 7;
          do
          {
            if (v33[1])
            {
              Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v59);
              (*(void (**)(void, long long *, uint64_t *, id, uint64_t **, uint64_t))(*(void *)v59 + 88))(v59, &v65, v16 + 4, (id)v33[1], v35, v34);
            }
            else
            {
              Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v59);
              (*(void (**)(void, long long *, uint64_t *, uint64_t, uint64_t **, uint64_t))(*(void *)v59 + 80))(v59, &v65, v16 + 4, *v33, v35, v34);
            }
            if (*((void *)&v59 + 1)) {
              nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v59 + 1));
            }
            ++v34;
            v33 += 2;
          }
          while (v33 != v32);
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy((void *)v61.__r_.__value_.__l.__size_);
        uint64_t v17 = v30;
        uint64_t v14 = v29;
        a1 = v57;
      }
      else
      {
        uint64_t v36 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v24 + 184), v20, &v66);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v36[6], v16 + 4))
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v61);
          std::string::size_type v37 = v61.__r_.__value_.__r.__words[0];
          uint64_t v38 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*a1 + 184), v66, &v66);
          *(void *)&long long v59 = v16 + 4;
          unint64_t v39 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38 + 5, v16 + 4, (long long **)&v59);
          (*(void (**)(std::string::size_type, long long *, void))(*(void *)v37 + 120))(v37, &v65, *((void *)v39 + 7));
        }
        else
        {
          if (!*((unsigned char *)v16 + 56)) {
            goto LABEL_73;
          }
          uint64_t v46 = *(void *)(*a1 + 24);
          if (!v46) {
            goto LABEL_66;
          }
          uint64_t v47 = *a1 + 24;
          do
          {
            int v48 = *(_DWORD *)(v46 + 32);
            BOOL v49 = v48 < v20;
            if (v48 >= v20) {
              unint64_t v50 = (uint64_t *)v46;
            }
            else {
              unint64_t v50 = (uint64_t *)(v46 + 8);
            }
            if (!v49) {
              uint64_t v47 = v46;
            }
            uint64_t v46 = *v50;
          }
          while (*v50);
          if (v47 == *a1 + 24 || v20 < *(_DWORD *)(v47 + 32)) {
LABEL_66:
          }
            uint64_t v47 = *a1 + 24;
          uint64_t v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v47 + 40, v16 + 4);
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v16 + 4), &v61);
          (*(void (**)(std::string::size_type, long long *, void *))(*(void *)v61.__r_.__value_.__l.__data_
                                                                               + 48))(v61.__r_.__value_.__r.__words[0], &v65, v51 + 7);
        }
        if (v61.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61.__r_.__value_.__l.__size_);
        }
      }
LABEL_73:
      if (v64) {
        nitro::nitro_function::nitro_function(v64);
      }
      uint64_t v52 = (uint64_t *)v16[1];
      if (v52)
      {
        do
        {
          unint64_t v53 = v52;
          uint64_t v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          unint64_t v53 = (uint64_t *)v16[2];
          BOOL v13 = *v53 == (void)v16;
          uint64_t v16 = v53;
        }
        while (!v13);
      }
      uint64_t v16 = v53;
    }
    while (v53 != (uint64_t *)v17);
  }
  if (*((void *)&v65 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v65 + 1));
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
}

void sub_19221BCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 120);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::blob_cpu::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(_DWORD *)(a1 + 240))
  {
    case 0:
      uint64_t v3 = *(void *)(a1 + 160);
      if (v3)
      {
        uint64_t v4 = 0;
        uint64_t v5 = *(void **)(v3 + 24);
        uint64_t v6 = *(int *)(v3 + 8);
        uint64_t v7 = v3 + 12;
        do
        {
          v6 *= *(int *)(v7 + v4);
          v4 += 4;
        }
        while (v4 != 12);
        memcpy(v5, *(const void **)(*(void *)a3 + 24), 4 * v6);
      }
      break;
    case 1:
      uint64_t v8 = *(void *)(a1 + 176);
      if (v8)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(int **)(*(void *)a3 + 24);
        unsigned int v11 = *(_WORD **)(v8 + 24);
        uint64_t v12 = *(int *)(v8 + 8);
        uint64_t v13 = v8 + 12;
        do
        {
          v12 *= *(int *)(v13 + v9);
          v9 += 4;
        }
        while (v9 != 12);
        for (; v12; --v12)
        {
          int v14 = *v10++;
          _S0 = v14;
          __asm { FCVT            H0, S0 }
          *v11++ = _S0;
        }
      }
      break;
    case 2:
      uint64_t v20 = *(void *)(a1 + 192);
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(const float **)(*(void *)a3 + 24);
        uint64_t v23 = *(char **)(v20 + 24);
        vDSP_Length v24 = *(int *)(v20 + 8);
        uint64_t v25 = v20 + 12;
        do
        {
          v24 *= *(int *)(v25 + v21);
          v21 += 4;
        }
        while (v21 != 12);
        vDSP_vfix8(v22, 1, v23, 1, v24);
      }
      break;
    case 3:
      uint64_t v26 = *(void *)(a1 + 208);
      if (v26)
      {
        uint64_t v27 = 0;
        uint64_t v28 = *(const float **)(*(void *)a3 + 24);
        uint64_t v29 = *(int **)(v26 + 24);
        vDSP_Length v30 = *(int *)(v26 + 8);
        uint64_t v31 = v26 + 12;
        do
        {
          v30 *= *(int *)(v31 + v27);
          v27 += 4;
        }
        while (v27 != 12);
        vDSP_vfix32(v28, 1, v29, 1, v30);
      }
      break;
    case 4:
      uint64_t v32 = *(void *)(a1 + 192);
      if (v32)
      {
        uint64_t v33 = 0;
        uint64_t v34 = *(const float **)(*(void *)a3 + 24);
        long long v35 = *(unsigned __int8 **)(v32 + 24);
        vDSP_Length v36 = *(int *)(v32 + 8);
        uint64_t v37 = v32 + 12;
        do
        {
          v36 *= *(int *)(v37 + v33);
          v33 += 4;
        }
        while (v33 != 12);
        vDSP_vfixu8(v34, 1, v35, 1, v36);
      }
      break;
    default:
      return;
  }
}

void *EspressoLight::plan_task_t::disable_memory_lingering_if_needed(void *result, void *lpsrc)
{
  if (result[7] | result[4] | result[16] | result[19] | result[25] | result[28] | result[22]) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = lpsrc == 0;
  }
  if (!v2)
  {
    if (result)
    {
      JUMPOUT(0x192FEEFD0);
    }
  }
  return result;
}

void Espresso::SerDes::layer_io<Espresso::generic_transpose_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  long long v11 = xmmword_192DAF430;
  int v12 = 4;
  Espresso::SerDes::params_io<Espresso::transpose_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19221C110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::transpose_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2 + 1);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2 + 2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2 + 3);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v7 + 160))(v7, __p, a2 + 4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2 + 1);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2 + 2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2 + 3);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "axis_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, a2 + 4);
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_19221C57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_network_query_blob_dimensions(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = (void *)MEMORY[0x192FF2020]();
  if (a1 {
    && (uint64_t v9 = *a1,
  }
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v9 + 160))(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  return v10;
}

uint64_t EspressoLight::espresso_plan::query_blob_dimensions(EspressoLight::espresso_plan *this, int a2, char *a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)(*((void *)this + 133) + 24);
  if (a2 >= (unint64_t)((*(void *)(*((void *)this + 133) + 32) - v4) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v6 = (uint64_t *)(v4 + 16 * a2);
  uint64_t v8 = *v6;
  uint64_t v7 = (std::__shared_weak_count *)v6[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "Null network found.");
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&__p, *((void **)this + 133), a2, 0, a3);
  Espresso::net::get_blob_or_global_with_prefix(v8, &__p, &v17);
  uint64_t v9 = v17;
  if (v17)
  {
    uint64_t v10 = 0;
    uint64_t v11 = *(void *)(v17 + 8);
    *(void *)&long long v12 = (int)v11;
    *((void *)&v12 + 1) = SHIDWORD(v11);
    *(_OWORD *)a4 = v12;
    uint64_t v13 = *(void *)(v9 + 16);
    *(void *)&long long v12 = (int)v13;
    *((void *)&v12 + 1) = SHIDWORD(v13);
    *((_OWORD *)a4 + 1) = v12;
  }
  else
  {
    uint64_t v10 = 4294967290;
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v10;
}

void sub_19221C84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_is_surface(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE3937E8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19221C988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_e5_compiler_options_get_compute_device_types_mask(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE394CF0;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19221CA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_get_data_ptr(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE397D78;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19221CB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::RemoveCallOps(Espresso::AOT::ValidationResult **a1@<X0>, Espresso::AOT::ValidationResult **a2@<X8>)
{
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  uint64_t v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  uint64_t v7 = **v6;
  uint64_t v8 = (*v6)[1];
  int v48 = 0;
  BOOL v49 = 0;
  uint64_t v47 = 0;
  uint64_t v9 = v8 - v7;
  if (!v9)
  {
    long long v12 = 0;
    goto LABEL_52;
  }
  uint64_t v10 = v6;
  uint64_t v41 = a2;
  uint64_t v42 = 0;
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  int v14 = 0;
  size_t v15 = 0;
  uint64_t v16 = 0;
  unint64_t v17 = v9 >> 4;
  if (v17 <= 1) {
    uint64_t v18 = 1;
  }
  else {
    uint64_t v18 = v17;
  }
  do
  {
    uint64_t v19 = *(void *)(**v10 + 16 * v16);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 64))(v19);
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v20 + 128))(v20)) {
      goto LABEL_6;
    }
    if (v15 < v14)
    {
      *(void *)size_t v15 = v16;
      v15 += 8;
      uint64_t v11 = (uint64_t)v15;
      goto LABEL_6;
    }
    uint64_t v21 = (v15 - v13) >> 3;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
    {
      uint64_t v47 = v12;
      int v48 = (void *)v11;
      BOOL v49 = v42;
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if ((v14 - v13) >> 2 > v22) {
      unint64_t v22 = (v14 - v13) >> 2;
    }
    if ((unint64_t)(v14 - v13) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23)
    {
      if (v23 >> 61)
      {
        uint64_t v47 = v12;
        BOOL v49 = v42;
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      vDSP_Length v24 = operator new(8 * v23);
      long long v12 = &v24[8 * v21];
      void *v12 = v16;
      uint64_t v11 = (uint64_t)(v12 + 1);
      if (v15 == v13) {
        goto LABEL_23;
      }
    }
    else
    {
      vDSP_Length v24 = 0;
      long long v12 = (void *)(8 * v21);
      *(void *)(8 * v21) = v16;
      uint64_t v11 = 8 * v21 + 8;
      if (v15 == v13) {
        goto LABEL_23;
      }
    }
    unint64_t v25 = v15 - 8 - v13;
    if (v25 >= 0x168)
    {
      if (&v24[v15 - v13 - 8 - (v25 & 0xFFFFFFFFFFFFFFF8)] > &v24[v15 - v13 - 8])
      {
        uint64_t v26 = v15;
      }
      else if (&v15[-(v25 & 0xFFFFFFFFFFFFFFF8) - 8] > v15 - 8)
      {
        uint64_t v26 = v15;
      }
      else if ((unint64_t)(v13 - v24) >= 0x20)
      {
        uint64_t v28 = (v25 >> 3) + 1;
        uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = &v15[-v29];
        long long v12 = (void *)((char *)v12 - v29);
        vDSP_Length v30 = &v24[8 * v21 - 16];
        uint64_t v31 = v15 - 16;
        uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *vDSP_Length v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v26 = v15;
      }
    }
    else
    {
      uint64_t v26 = v15;
    }
    do
    {
      uint64_t v27 = *((void *)v26 - 1);
      v26 -= 8;
      *--long long v12 = v27;
    }
    while (v26 != v13);
LABEL_23:
    int v14 = &v24[8 * v23];
    uint64_t v42 = v14;
    if (v13) {
      operator delete(v13);
    }
    uint64_t v13 = (char *)v12;
    size_t v15 = (char *)v11;
LABEL_6:
    ++v16;
  }
  while (v16 != v18);
  uint64_t v47 = v12;
  int v48 = (void *)v11;
  BOOL v49 = v42;
  if ((void *)v11 != v12)
  {
    uint64_t ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(*a1);
    ValidationMessages = (uint64_t *)Espresso::AOT::ValidationResult::GetValidationMessages(*a1);
    memset(v46, 0, sizeof(v46));
    std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>(v46, *ValidationMessages, ValidationMessages[1], (ValidationMessages[1] - *ValidationMessages) >> 5);
    unint64_t v44 = 0;
    uint64_t v45 = 0;
    std::string __p = 0;
    uint64_t v37 = *(void **)ValidDispatchUnits;
    vDSP_Length v36 = *(void **)(ValidDispatchUnits + 8);
    uint64_t v38 = (uint64_t)v36 - *(void *)ValidDispatchUnits;
    if (v36 != *(void **)ValidDispatchUnits)
    {
      if (v38 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::string __p = operator new((size_t)v36 - *(void *)ValidDispatchUnits);
      unint64_t v44 = __p;
      uint64_t v45 = (char *)__p + 8 * (v38 >> 3);
      uint64_t v37 = *(void **)ValidDispatchUnits;
      vDSP_Length v36 = *(void **)(ValidDispatchUnits + 8);
    }
    p_p = &__p;
    while (1)
    {
      if (v37 == v36) {
        operator new();
      }
      unint64_t v39 = v12;
      do
      {
        if (*v39 == *v37) {
          goto LABEL_47;
        }
        ++v39;
      }
      while (v39 != (void *)v11);
      unint64_t v39 = (void *)v11;
LABEL_47:
      if (v39 == (void *)v11) {
        std::back_insert_iterator<std::vector<unsigned long>>::operator=[abi:ne180100]((uint64_t *)&p_p, v37);
      }
      ++v37;
    }
  }
  a2 = v41;
LABEL_52:
  uint64_t v40 = *a1;
  *a1 = 0;
  *a2 = v40;
  if (v12)
  {
    int v48 = v12;
    operator delete(v12);
  }
}

void sub_19221D010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  MEMORY[0x192FF16B0](v22, 0x10B1C40E94733EDLL);
  if (__p) {
    operator delete(__p);
  }
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a16);
  if (v21)
  {
    a20 = (uint64_t)v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = (char *)operator new(0x2A8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_1EE38D040;
  long long v16 = a3[8];
  *(_OWORD *)unint64_t v17 = a3[9];
  *(void *)&v17[16] = *((void *)a3 + 20);
  long long v12 = a3[4];
  long long v13 = a3[5];
  long long v14 = a3[6];
  long long v15 = a3[7];
  long long v8 = *a3;
  long long v9 = a3[1];
  long long v10 = a3[2];
  long long v11 = a3[3];
  Espresso::abstract_kernel_with_weights<Espresso::convolution_uniforms>::abstract_kernel_with_weights((void *)v5 + 3, a2);
  *((void *)v5 + 72) = 0;
  *((_OWORD *)v5 + 34) = 0u;
  *((_OWORD *)v5 + 35) = 0u;
  *((_OWORD *)v5 + 32) = 0u;
  *((_OWORD *)v5 + 33) = 0u;
  *(_OWORD *)(v5 + 456) = v16;
  *(_OWORD *)(v5 + 472) = *(_OWORD *)v17;
  *(_OWORD *)(v5 + 392) = v12;
  *(_OWORD *)(v5 + 408) = v13;
  *(_OWORD *)(v5 + 424) = v14;
  *(_OWORD *)(v5 + 440) = v15;
  *(_OWORD *)(v5 + 328) = v8;
  *(_OWORD *)(v5 + 344) = v9;
  *(_OWORD *)(v5 + 360) = v10;
  *(_OWORD *)(v5 + 376) = v11;
  *(void *)(v5 + 485) = *(void *)&v17[13];
  v5[584] = 1;
  *((void *)v5 + 74) = 0;
  *((void *)v5 + 76) = 0;
  *((void *)v5 + 75) = 0;
  *((void *)v5 + 3) = &unk_1EE376A90;
  *((void *)v5 + 78) = 0;
  *((void *)v5 + 77) = 0;
  int v6 = *((_DWORD *)v5 + 111);
  if (v6 >= 2 && v6 == *((_DWORD *)v5 + 93))
  {
    if (!(*((_DWORD *)v5 + 92) % v6)) {
      operator new();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The number of depthwise output channel count is not a multiple of the input channel count.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  operator new();
}

void sub_19221D5A0(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[26].__vftable;
  v1[26].__vftable = 0;
  if (v4) {
    (*((void (**)(std::__shared_weak_count_vtbl *))v4->~__shared_weak_count + 1))(v4);
  }
  shared_weak_owners = (std::__shared_weak_count *)v1[25].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  int v6 = (std::__shared_weak_count *)v1[25].__vftable;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x278uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE38CBE0;
  long long v21 = a2[6];
  long long v22 = a2[7];
  int v23 = *((_DWORD *)a2 + 32);
  long long v17 = a2[2];
  long long v18 = a2[3];
  long long v19 = a2[4];
  long long v20 = a2[5];
  long long v15 = *a2;
  long long v16 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((void *)v6 + 3) = &unk_1EE373E18;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((void *)v6 + 58) = 0;
  *((void *)v6 + 59) = 0;
  v6[480] = 0;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *((void *)v6 + 77) = 0;
  v6[624] = 1;
  *(_OWORD *)(v6 + 360) = v17;
  *(_OWORD *)(v6 + 376) = v18;
  *(_OWORD *)(v6 + 328) = v15;
  *(_OWORD *)(v6 + 344) = v16;
  *((_DWORD *)v6 + 114) = v23;
  *(_OWORD *)(v6 + 424) = v21;
  *(_OWORD *)(v6 + 440) = v22;
  *(_OWORD *)(v6 + 392) = v19;
  *(_OWORD *)(v6 + 408) = v20;
  uint64_t v7 = [EspressoInnerProductWeightsForMPS alloc];
  long long v8 = *(_OWORD *)(v6 + 440);
  v24[6] = *(_OWORD *)(v6 + 424);
  unsigned char v24[7] = v8;
  int v25 = *((_DWORD *)v6 + 114);
  long long v9 = *(_OWORD *)(v6 + 376);
  v24[2] = *(_OWORD *)(v6 + 360);
  v24[3] = v9;
  long long v10 = *(_OWORD *)(v6 + 408);
  v24[4] = *(_OWORD *)(v6 + 392);
  v24[5] = v10;
  long long v11 = *(_OWORD *)(v6 + 344);
  v24[0] = *(_OWORD *)(v6 + 328);
  v24[1] = v11;
  uint64_t v12 = [(EspressoInnerProductWeightsForMPS *)v7 initWithParams:v24];
  long long v13 = (void *)*((void *)v6 + 72);
  *((void *)v6 + 72) = v12;

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19221D808(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  long long v8 = (char *)operator new(0x240uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = &unk_1EE382140;
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((void *)v8 + 3) = &unk_1EE32CE10;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *((void *)v8 + 58) = 0;
  *((void *)v8 + 59) = 0;
  v8[480] = 0;
  *((_DWORD *)v8 + 142) = a3;
  *((_DWORD *)v8 + 114) = *(_DWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 440) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 376) = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 408) = v11;
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 344) = v12;
  result.n128_u64[0] = v13;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19221D944(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = operator new(0x3D0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1EE387FC0;
  result.n128_u64[0] = Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19221D9D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso10BNNSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  int v6 = (char *)operator new(0x3F0uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = &unk_1EE3812D0;
  long long v7 = a2[7];
  long long v25 = a2[6];
  long long v26 = v7;
  int v27 = *((_DWORD *)a2 + 32);
  long long v8 = a2[3];
  long long v21 = a2[2];
  long long v22 = v8;
  long long v9 = a2[5];
  long long v23 = a2[4];
  long long v24 = v9;
  long long v10 = a2[1];
  long long v19 = *a2;
  long long v20 = v10;
  Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)(v6 + 24), a1, v11, (uint64_t)&v19);
  *((void *)v6 + 3) = &unk_1EE328CF8;
  *((void *)v6 + 125) = 0;
  v6[992] = 0;
  *((_OWORD *)v6 + 61) = 0u;
  long long v12 = v26;
  *(_OWORD *)(v6 + 424) = v25;
  *(_OWORD *)(v6 + 440) = v12;
  *((_DWORD *)v6 + 114) = v27;
  long long v13 = v22;
  *(_OWORD *)(v6 + 360) = v21;
  *(_OWORD *)(v6 + 376) = v13;
  long long v14 = v24;
  *(_OWORD *)(v6 + 392) = v23;
  *(_OWORD *)(v6 + 408) = v14;
  long long v15 = v20;
  *(_OWORD *)(v6 + 328) = v19;
  *(_OWORD *)(v6 + 344) = v15;
  if (*a1)
  {
    if (v16)
    {
      if (*((_DWORD *)v6 + 114)) {
        int v17 = 1;
      }
      else {
        int v17 = *((unsigned __int8 *)v16 + 160);
      }
      *((_DWORD *)v6 + 114) = v17;
      *((void *)v6 + 125) = v16[21];
    }
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19221DB64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::inner_product_kernel::inner_product_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 440) = 0u;
  *(unsigned char *)(v5 + 456) = 0;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(_OWORD *)(v5 + 528) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 680) = 0u;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 568) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(unsigned char *)(v5 + 600) = 0;
  *(_OWORD *)(v5 + 608) = 0u;
  *(_OWORD *)(v5 + 624) = 0u;
  *(_OWORD *)(v5 + 640) = 0u;
  *(_OWORD *)(v5 + 656) = 0u;
  *(unsigned char *)(v5 + 672) = 0;
  *(_DWORD *)(v5 + 712) = 1065353216;
  *(_WORD *)(v5 + 720) = 0;
  *(unsigned char *)(v5 + 722) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 724) = _D1;
  *(unsigned char *)(v5 + 732) = 0;
  *(_OWORD *)(v5 + 736) = 0u;
  *(unsigned char *)(v5 + 752) = v6;
  *(void *)uint64_t v5 = &unk_1EE344278;
  *(void *)(v5 + 544) = &unk_1EE3444A8;
  *(_WORD *)(v5 + 753) = 0;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 776) = 0u;
  *(_OWORD *)(v5 + 792) = 0u;
  *(_OWORD *)(v5 + 760) = 0u;
  *(_WORD *)(v5 + 840) = 1;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v5 + 352) = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 368) = v14;
  *(_OWORD *)(v5 + 320) = v12;
  *(_OWORD *)(v5 + 336) = v13;
  __n128 result = *(__n128 *)(a3 + 80);
  long long v16 = *(_OWORD *)(a3 + 96);
  long long v17 = *(_OWORD *)(a3 + 112);
  *(_DWORD *)(v5 + 432) = *(_DWORD *)(a3 + 128);
  *(_OWORD *)(v5 + 400) = v16;
  *(_OWORD *)(v5 + 416) = v17;
  *(__n128 *)(v5 + 384) = result;
  return result;
}

uint64_t Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = 0;
  *(unsigned char *)(v6 + 456) = 0;
  *(void *)uint64_t v6 = &unk_1EE35CA18;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(_OWORD *)(v6 + 592) = 0u;
  *(_OWORD *)(v6 + 608) = 0u;
  *(_OWORD *)(v6 + 624) = 0u;
  *(_OWORD *)(v6 + 640) = 0u;
  *(_OWORD *)(v6 + 656) = 0u;
  *(_OWORD *)(v6 + 672) = 0u;
  *(_OWORD *)(v6 + 688) = 0u;
  *(_OWORD *)(v6 + 704) = 0u;
  *(_OWORD *)(v6 + 720) = 0u;
  *(_OWORD *)(v6 + 736) = 0u;
  *(_OWORD *)(v6 + 752) = 0u;
  *(_OWORD *)(v6 + 768) = 0u;
  *(_OWORD *)(v6 + 784) = 0u;
  *(_OWORD *)(v6 + 800) = 0u;
  *(_OWORD *)(v6 + 816) = 0u;
  *(_OWORD *)(v6 + 832) = 0u;
  *(_OWORD *)(v6 + 848) = 0u;
  *(_OWORD *)(v6 + 864) = 0u;
  *(_OWORD *)(v6 + 880) = 0u;
  *(_OWORD *)(v6 + 896) = 0u;
  *(_OWORD *)(v6 + 912) = 0u;
  *(_OWORD *)(v6 + 928) = 0u;
  *(_OWORD *)(v6 + 304) = *(_OWORD *)a4;
  long long v7 = *(_OWORD *)(a4 + 16);
  long long v8 = *(_OWORD *)(a4 + 32);
  long long v9 = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v6 + 352) = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v6 + 368) = v9;
  *(_OWORD *)(v6 + 320) = v7;
  *(_OWORD *)(v6 + 336) = v8;
  long long v10 = *(_OWORD *)(a4 + 80);
  long long v11 = *(_OWORD *)(a4 + 96);
  long long v12 = *(_OWORD *)(a4 + 112);
  *(_DWORD *)(v6 + 432) = *(_DWORD *)(a4 + 128);
  *(_OWORD *)(v6 + 400) = v11;
  *(_OWORD *)(v6 + 416) = v12;
  *(_OWORD *)(v6 + 384) = v10;
  if (*(int *)(v6 + 404) >= 1)
  {
    long long v13 = (char *)operator new(0x58uLL);
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = 0;
    *(void *)long long v13 = &unk_1EE387E70;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(a1 + 928) = v13 + 24;
    *(void *)(a1 + 936) = v13;
  }
  return a1;
}

void sub_19221DDB8(_Unwind_Exception *a1)
{
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(v1);
  _Unwind_Resume(a1);
}

double Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 280) = v2 + 288;
  *(void *)uint64_t v2 = &unk_1EE356550;
  *(unsigned char *)(v2 + 344) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v2 + 352) = 0xFFFFFFFF00000000;
  *(void *)(v2 + 360) = _D1;
  *(void *)(v2 + 428) = 0;
  *(void *)&double result = 0x100000001;
  *(_OWORD *)(v2 + 304) = xmmword_192DCA240;
  *(void *)(v2 + 320) = 0x3F80000000000000;
  *(void *)(v2 + 328) = 1065353216;
  *(void *)(v2 + 388) = 0;
  *(_DWORD *)(v2 + 348) = 0;
  *(void *)(v2 + 336) = 0;
  *(void *)(v2 + 404) = 0;
  *(void *)(v2 + 420) = 0;
  *(void *)(v2 + 412) = 0;
  return result;
}

uint64_t ___ZN8Espresso8on_allocEPvm_block_invoke()
{
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.espresso.memdbgq", 0);
  uint64_t v1 = Espresso::alloc_dbg_queue;
  Espresso::alloc_dbg_queue = (uint64_t)v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

void E5RT::E5ProgramImpl::LoadBuildInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void **)(v4 + 8);
  if (*(void **)v4 != v6)
  {
    do
    {
      if ((*(unsigned int (**)(void))(*(void *)*v5 + 24))() == 6)
      {
        if (v28)
        {
          exception = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(__p, "LoadBuildInfo");
          std::string::basic_string[abi:ne180100]<0>(&v33, "Multiple build info sections found.");
          E5RT::Status::Status(&v27, 8, &v33);
          E5RT::E5RTError::E5RTError(exception, __p, &v27);
        }
        uint64_t v8 = *v5;
        long long v7 = (std::__shared_weak_count *)v5[1];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v9 = v29;
        uint64_t v28 = v8;
        uint64_t v29 = v7;
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
    if (v28)
    {
      long long v10 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28);
      int v27 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 40))(v28);
        operator new();
      }
      __p[0] = &unk_1EE377EC0;
      __p[1] = E5RT_FB::VerifySizePrefixedBuildInfoBuffer;
      *((void *)&v31 + 1) = __p;
      long long v33 = (void (**)(long long **))&unk_1EE377C00;
      uint64_t v34 = E5RT_FB::UnPackSizePrefixedBuildInfo;
      long long v35 = (long long **)&v33;
      E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::BuildInfoT>(v10, (uint64_t)__p, (uint64_t)&v33);
      long long v11 = v26;
      long long v26 = 0;
      int v27 = v11;
      if (v35 == (long long **)&v33)
      {
        v33[4]((long long **)&v33);
        uint64_t v12 = *((void *)&v31 + 1);
        if (*((void ***)&v31 + 1) != __p)
        {
LABEL_18:
          if (v12) {
            (*(void (**)(uint64_t))(*(void *)v12 + 40))(v12);
          }
LABEL_22:
          *(_OWORD *)std::string __p = 0u;
          long long v31 = 0u;
          int v32 = 1065353216;
          long long v13 = *v27;
          long long v14 = v27[1];
          if (*v27 != v14)
          {
            do
            {
              uint64_t v15 = *v13;
              long long v33 = (void (**)(long long **))v15;
              long long v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, v15, (uint64_t)&std::piecewise_construct, (long long **)&v33);
              std::string::operator=((std::string *)(v16 + 5), (const std::string *)(v15 + 24));
              ++v13;
            }
            while (v13 != v14);
          }
          long long v17 = operator new(0x50uLL);
          v17[1] = 0;
          _OWORD v17[2] = 0;
          *long long v17 = &unk_1EE380A10;
          E5RT::E5BuildInfoImpl::E5BuildInfoImpl((E5RT::E5BuildInfoImpl *)(v17 + 3));
          long long v33 = (void (**)(long long **))(v17 + 3);
          uint64_t v34 = (void (*)())v17;
          E5RT::E5BuildInfoImpl::SetBuildInfoEntries((uint64_t)(v17 + 3), (uint64_t *)__p);
          long long v33 = 0;
          uint64_t v34 = 0;
          long long v18 = *(std::__shared_weak_count **)(a1 + 72);
          *(void *)(a1 + 64) = v17 + 3;
          *(void *)(a1 + 72) = v17;
          if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
          long long v19 = (std::__shared_weak_count *)v34;
          if (v34 && !atomic_fetch_add((atomic_ullong *volatile)v34 + 1, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          long long v20 = (char *)v31;
          if (!(void)v31)
          {
LABEL_37:
            long long v22 = __p[0];
            __p[0] = 0;
            if (v22) {
              operator delete(v22);
            }
            long long v23 = v27;
            int v27 = 0;
            if (v23) {
              std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&v27, v23);
            }
            goto LABEL_41;
          }
          while (1)
          {
            long long v21 = *(char **)v20;
            if (v20[63] < 0)
            {
              operator delete(*((void **)v20 + 5));
              if ((v20[39] & 0x80000000) == 0) {
                goto LABEL_33;
              }
LABEL_36:
              operator delete(*((void **)v20 + 2));
              operator delete(v20);
              long long v20 = v21;
              if (!v21) {
                goto LABEL_37;
              }
            }
            else
            {
              if (v20[39] < 0) {
                goto LABEL_36;
              }
LABEL_33:
              operator delete(v20);
              long long v20 = v21;
              if (!v21) {
                goto LABEL_37;
              }
            }
          }
        }
      }
      else
      {
        if (v35) {
          (*((void (**)(void))*v35 + 5))();
        }
        uint64_t v12 = *((void *)&v31 + 1);
        if (*((void ***)&v31 + 1) != __p) {
          goto LABEL_18;
        }
      }
      (*((void (**)(void **))__p[0] + 4))(__p);
      goto LABEL_22;
    }
  }
LABEL_41:
  long long v24 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19221E660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  a13 = 0;
  std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a13, v26);
  uint64_t v28 = a10;
  a10 = 0;
  if (v28)
  {
    std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v28);
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  long long v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  int v27 = (std::string *)(v26 + 2);
  uint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        int v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        int v32 = *(void **)(*(void *)a1 + 8 * v11);
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      int v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      long long v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *long long v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  int v32 = *(void **)(*(void *)a1 + 8 * v4);
  long long v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *long long v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_19221EBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19221EC10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_7;
  }
  unint64_t v4 = *(void ***)(a1 + 16);
  if (v4)
  {
    do
    {
      char v16 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_17:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v4);
      unint64_t v4 = v16;
    }
    while (v16);
  }
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
      *(void *)(*(void *)a1 + 8 * i) = 0;
  }
  *(void *)(a1 + 24) = 0;
LABEL_7:
  uint64_t v7 = *a2;
  *a2 = 0;
  unint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  unint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *unint64_t v10 = 0;
    v10[1] = 0;
  }
}

void std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)*a2;
    if (!*a2) {
      goto LABEL_16;
    }
    unint64_t v4 = (void *)a2[1];
    uint64_t v5 = (void *)*a2;
    if (v4 == v3)
    {
LABEL_15:
      a2[1] = v3;
      operator delete(v5);
LABEL_16:
      JUMPOUT(0x192FF16B0);
    }
    while (1)
    {
      uint64_t v7 = *--v4;
      uint64_t v6 = v7;
      void *v4 = 0;
      if (!v7) {
        goto LABEL_6;
      }
      if (*(char *)(v6 + 47) < 0)
      {
        operator delete(*(void **)(v6 + 24));
        if (*(char *)(v6 + 23) < 0) {
LABEL_12:
        }
          operator delete(*(void **)v6);
      }
      else if (*(char *)(v6 + 23) < 0)
      {
        goto LABEL_12;
      }
      MEMORY[0x192FF16B0](v6, 0x1012C403467C318);
LABEL_6:
      if (v4 == v3)
      {
        uint64_t v5 = (void *)*a2;
        goto LABEL_15;
      }
    }
  }
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::BuildInfoT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  int v13 = 257;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (v3 >= 0x7FFFFFFB) {
    sub_192429E1C();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
LABEL_8:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v12, v10);
}

void sub_19221EF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::BuildInfoT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::BuildInfoT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t E5RT_FB::BuildInfo::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 40);
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12 + 1;
  *(_DWORD *)(a2 + 44) = v13;
  unsigned int v15 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  BOOL v16 = v12 + 1 > v15 || v13 > v14;
  if (v16) {
    return 0;
  }
  unint64_t v17 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v17) {
      return 0;
    }
  }
  else if (v7 - 2 < v17)
  {
    return 0;
  }
  unint64_t v18 = *(unsigned __int16 *)(v2 + v17);
  if ((v18 & 1) != 0 && v4 | v18 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v18;
  unint64_t v19 = v7 - v18;
  if (v19 == 0 || !v9 || v19 < v17) {
    return 0;
  }
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v21 >= 5u)
  {
    uint64_t v22 = v21[2];
    if (v21[2])
    {
      unint64_t v23 = (unint64_t)&v3[v22];
      BOOL v25 = (v23 & 3) == 0 || v4 == 0;
      if (v8 < v23 || !v25) {
        return 0;
      }
      uint64_t v26 = *(unsigned int *)(v2 + v23);
      if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
        return 0;
      }
      int v27 = (unsigned int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22));
      uint64_t v28 = (char *)v27 - v2;
      BOOL v30 = (v28 & 3) == 0 || v4 == 0;
      if (v8 < (unint64_t)v28 || !v30) {
        return 0;
      }
      uint64_t v31 = *v27;
      if (v31 > 0x1FFFFFFE) {
        return 0;
      }
      unint64_t v32 = 4 * v31 + 4;
      BOOL v16 = v7 > v32;
      unint64_t v33 = v7 - v32;
      if (!v16 || v33 < (unint64_t)v28) {
        return 0;
      }
      if (v31)
      {
        unint64_t v35 = 0;
        unint64_t v36 = v27 + 1;
        while ((E5RT_FB::KeyValuePair::Verify((int *)((char *)v36 + *v36), (uint64_t *)a2) & 1) != 0)
        {
          ++v35;
          ++v36;
          if (v35 >= *v27)
          {
            int v12 = *(_DWORD *)(a2 + 40) - 1;
            goto LABEL_60;
          }
        }
        return 0;
      }
    }
  }
LABEL_60:
  *(_DWORD *)(a2 + 40) = v12;
  return 1;
}

uint64_t E5RT_FB::KeyValuePair::Verify(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v13 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v14 = 0;
    if (v4 || v6 - 2 < v13) {
      return v14;
    }
  }
  else if (v6 - 2 < v13)
  {
    return 0;
  }
  unint64_t v15 = *(unsigned __int16 *)(v2 + v13);
  if ((v15 & 1) != 0 && v4 | v15 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v15;
  unint64_t v16 = v6 - v15;
  if (v16 == 0 || !v8 || v16 < v13) {
    return 0;
  }
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v19 = *v18;
  if (v19 < 5) {
    return 0;
  }
  uint64_t v20 = v18[2];
  if (!v18[2]) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t v21 = &v3[v20];
  BOOL v23 = ((unint64_t)&v3[v20] & 3) == 0 || v4 == 0;
  if (v7 >= (unint64_t)v21 && v23)
  {
    uint64_t v24 = *(unsigned int *)&v21[v2];
    if ((int)v24 < 1) {
      return 0;
    }
    unint64_t v25 = (unint64_t)&v21[v24];
    unint64_t v26 = v6 - 1;
    if (v6 - 1 < v25) {
      return 0;
    }
    uint64_t v14 = 0;
    uint64_t v28 = (unsigned int *)((char *)a1 + v20 + *(unsigned int *)((char *)a1 + v20));
    long long v29 = (char *)v28 - v2;
    BOOL v30 = (((unint64_t)v28 - v2) & 3) == 0 || v4 == 0;
    BOOL v31 = v30;
    if (v7 >= (unint64_t)v29 && v31)
    {
      uint64_t v32 = *v28;
      if (v32 > 0x7FFFFFFE) {
        return 0;
      }
      unint64_t v33 = v32 + 4;
      BOOL v34 = &v29[v32 + 4];
      BOOL v35 = v26 >= (unint64_t)v34 && v6 > v33;
      BOOL v36 = v35 && v6 - v33 >= (unint64_t)v29;
      if (!v36 || v34[v2]) {
        return 0;
      }
      if (v19 >= 7)
      {
        uint64_t v37 = v18[3];
        if (v37)
        {
          uint64_t v14 = 0;
          unint64_t v38 = (unint64_t)&v3[v37];
          BOOL v40 = (v38 & 3) == 0 || v4 == 0;
          if (v7 < v38) {
            return v14;
          }
          if (!v40) {
            return v14;
          }
          uint64_t v14 = 0;
          uint64_t v41 = *(unsigned int *)(v2 + v38);
          if ((int)v41 < 1 || v26 < v38 + v41) {
            return v14;
          }
          uint64_t v14 = 0;
          unint64_t v42 = (unsigned int *)((char *)a1 + v37 + *(unsigned int *)((char *)a1 + v37));
          unint64_t v43 = (char *)v42 - v2;
          BOOL v44 = (((unint64_t)v42 - v2) & 3) == 0 || v4 == 0;
          BOOL v45 = v44;
          if (v7 < (unint64_t)v43 || !v45) {
            return v14;
          }
          uint64_t v46 = *v42;
          if (v46 > 0x7FFFFFFE) {
            return 0;
          }
          uint64_t v14 = 0;
          unint64_t v47 = v46 + 4;
          int v48 = &v43[v46 + 4];
          if (v26 < (unint64_t)v48 || v6 <= v47 || v6 - v47 < (unint64_t)v43) {
            return v14;
          }
          if (v48[v2]) {
            return 0;
          }
        }
      }
      *((_DWORD *)a2 + 10) = v10;
      return 1;
    }
  }
  return v14;
}

uint64_t E5RT_FB::VerifySizePrefixedBuildInfoBuffer(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (BOOL v3 = v1 - 4 == **a1) : (BOOL v3 = 0),
        v3 && (v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, uint64_t v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::BuildInfo::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

void E5RT_FB::UnPackSizePrefixedBuildInfo()
{
}

void sub_19221F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<E5RT_FB::BuildInfoT>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void E5RT_FB::BuildInfo::UnPackTo(int *a1, uint64_t a2)
{
  BOOL v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 < 5u || (uint64_t v4 = v3[2]) == 0)
  {
    uint64_t v9 = *(void **)a2;
    int v10 = *(void **)(a2 + 8);
    if (v10 == *(void **)a2) {
      return;
    }
    while (1)
    {
      uint64_t v12 = *--v10;
      uint64_t v11 = v12;
      *int v10 = 0;
      if (!v12) {
        goto LABEL_8;
      }
      if (*(char *)(v11 + 47) < 0)
      {
        operator delete(*(void **)(v11 + 24));
        if (*(char *)(v11 + 23) < 0) {
LABEL_14:
        }
          operator delete(*(void **)v11);
      }
      else if (*(char *)(v11 + 23) < 0)
      {
        goto LABEL_14;
      }
      MEMORY[0x192FF16B0](v11, 0x1012C403467C318);
LABEL_8:
      if (v10 == v9)
      {
        *(void *)(a2 + 8) = v9;
        return;
      }
    }
  }
  uint64_t v5 = (int *)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
  unint64_t v6 = *v5;
  unint64_t v7 = *(void **)(a2 + 8);
  unint64_t v8 = ((uint64_t)v7 - *(void *)a2) >> 3;
  if (v6 > v8)
  {
    std::vector<std::unique_ptr<E5RT_FB::KeyValuePairT>>::__append((void **)a2, v6 - v8);
    goto LABEL_27;
  }
  if (v6 < v8)
  {
    uint64_t v13 = *(void *)a2 + 8 * v6;
    while (1)
    {
      do
      {
        if (v7 == (void *)v13)
        {
          *(void *)(a2 + 8) = v13;
          goto LABEL_27;
        }
        uint64_t v15 = *--v7;
        uint64_t v14 = v15;
        *unint64_t v7 = 0;
      }
      while (!v15);
      if (*(char *)(v14 + 47) < 0)
      {
        operator delete(*(void **)(v14 + 24));
        if ((*(char *)(v14 + 23) & 0x80000000) == 0) {
          goto LABEL_18;
        }
      }
      else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
      {
        goto LABEL_18;
      }
      operator delete(*(void **)v14);
LABEL_18:
      MEMORY[0x192FF16B0](v14, 0x1012C403467C318);
    }
  }
LABEL_27:
  if (*v5)
  {
    unint64_t v16 = 0;
    unint64_t v17 = v5 + 1;
    do
    {
      uint64_t v18 = *(void *)(*(void *)a2 + 8 * v16);
      if (!v18) {
        operator new();
      }
      CpuInferenceOp::UnPackTo((int *)((char *)v17 + *v17), v18);
      ++v16;
      ++v17;
    }
    while (v16 < *v5);
  }
}

void sub_19221F77C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100](v1);
  MEMORY[0x192FF16B0](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

double CpuInferenceOp::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  unint64_t v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v22 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v22 = v10 | 7;
        }
        p_dst = (long long *)operator new(v22 + 1);
        *((void *)&__dst + 1) = v10;
        uint64_t v25 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v25) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            double result = *(double *)&__dst;
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v25;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_19:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_19;
    }
  }
LABEL_7:
  uint64_t v14 = (unsigned __int16 *)((char *)a1 + v5);
  if (*v14 >= 7u)
  {
    uint64_t v15 = v14[3];
    if (v15)
    {
      unint64_t v16 = (unsigned int *)((char *)a1 + v15);
      uint64_t v17 = *v16;
      unsigned int v19 = (char *)v16 + v17 + 4;
      size_t v18 = *(unsigned int *)((char *)v16 + v17);
      if (v18 >= 0x17)
      {
        if ((v18 | 7) == 0x17) {
          uint64_t v23 = (v18 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v23 = v18 | 7;
        }
        uint64_t v20 = (long long *)operator new(v23 + 1);
        *((void *)&__dst + 1) = v18;
        uint64_t v25 = v23 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = v20;
      }
      else
      {
        HIBYTE(v25) = *(unsigned int *)((char *)v16 + v17);
        uint64_t v20 = &__dst;
        if (!v18)
        {
          *((unsigned char *)&__dst + v18) = 0;
          uint64_t v21 = a2 + 24;
          if ((*(char *)(a2 + 47) & 0x80000000) == 0)
          {
LABEL_12:
            double result = *(double *)&__dst;
            *(_OWORD *)uint64_t v21 = __dst;
            *(void *)(v21 + 16) = v25;
            return result;
          }
LABEL_25:
          operator delete(*(void **)v21);
          goto LABEL_12;
        }
      }
      memcpy(v20, v19, v18);
      *((unsigned char *)v20 + v18) = 0;
      uint64_t v21 = a2 + 24;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_25;
    }
  }
  return result;
}

void std::vector<std::unique_ptr<E5RT_FB::KeyValuePairT>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 > (v4 - v5) >> 3)
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_35;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_44;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    unint64_t v6 = &v5[-v20];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)uint64_t v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)unint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    int v27 = (char *)*a1;
    unint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 == v27)
    {
LABEL_34:
      if (!v6) {
        return;
      }
LABEL_35:
      operator delete(v6);
      return;
    }
    while (1)
    {
      uint64_t v29 = *((void *)v6 - 1);
      v6 -= 8;
      uint64_t v28 = v29;
      *(void *)unint64_t v6 = 0;
      if (!v29) {
        goto LABEL_26;
      }
      if (*(char *)(v28 + 47) < 0)
      {
        operator delete(*(void **)(v28 + 24));
        if (*(char *)(v28 + 23) < 0) {
LABEL_32:
        }
          operator delete(*(void **)v28);
      }
      else if (*(char *)(v28 + 23) < 0)
      {
        goto LABEL_32;
      }
      MEMORY[0x192FF16B0](v28, 0x1012C403467C318);
LABEL_26:
      if (v6 == v27)
      {
        unint64_t v6 = v27;
        goto LABEL_34;
      }
    }
  }
  if (a2)
  {
    bzero(v5, 8 * a2);
    unint64_t v6 = &v5[8 * a2];
  }
  a1[1] = v6;
}

E5RT::E5BuildInfoImpl *E5RT::E5BuildInfoImpl::E5BuildInfoImpl(E5RT::E5BuildInfoImpl *this)
{
  uint64_t v2 = E5RT::E5BuildInfo::E5BuildInfo(this);
  E5RT::E5BuildInfoBuilder::E5BuildInfoBuilder(v2 + 1);
  *(void *)this = &unk_1EE324C28;
  *((void *)this + 1) = &unk_1EE324C60;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 12) = 1065353216;
  return this;
}

void sub_19221FC34(_Unwind_Exception *a1)
{
  E5RT::AsyncEventImpl::~AsyncEventImpl(v1);
  _Unwind_Resume(a1);
}

void *E5RT::E5BuildInfoBuilder::E5BuildInfoBuilder(void *this)
{
  *this = &unk_1EE325A68;
  return this;
}

void E5RT::E5BuildInfoImpl::SetBuildInfoEntries(uint64_t a1, uint64_t *a2)
{
}

void *E5RT::E5BuildInfo::E5BuildInfo(void *this)
{
  *this = &unk_1EE324748;
  return this;
}

void Espresso::generic_general_slice_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, uint64_t a3@<X8>)
{
  *((void *)&v65 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v7 = a2[1] - v5;
  if (!v7) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice_kernel: at least one bottom blob required");
  }
  if (*(unsigned char *)(a1 + 355))
  {
    if (v7 != 128) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("generic_general_slice_kernel: expects 2 bottoms when use_static_sizes == true. Got %zu", v7 >> 6);
    }
    goto LABEL_12;
  }
  if ((unint64_t)v7 < 0x41) {
    goto LABEL_12;
  }
  uint64_t v9 = *(int *)(a1 + 376);
  if (v9 == -1)
  {
    uint64_t v64 = 0;
    long long v63 = 0u;
    long long v62 = 0u;
    *(void *)&long long v32 = 0x100000001;
    *((void *)&v32 + 1) = 0x100000001;
    *(_OWORD *)&__x.__begin_ = v32;
    LODWORD(__x.__end_cap_.__value_) = 1;
    int v33 = *((_DWORD *)v5 + 5);
    if (v33 == -1)
    {
      if (*((_DWORD *)v5 + 4) == 1) {
        int v33 = 4;
      }
      else {
        int v33 = 5;
      }
    }
    goto LABEL_79;
  }
  if (!v9)
  {
LABEL_12:
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v56, v5, 0);
    unint64_t v11 = v58;
    unint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v53, (const void *)(a1 + 280), a1 + 280 + 4 * v58, v58);
    unint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v50, (const void *)(a1 + 300), a1 + 300 + 4 * v11, v11);
    unint64_t v47 = 0;
    int v48 = 0;
    uint64_t v49 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, (const void *)(a1 + 320), a1 + 320 + 4 * v11, v11);
    memset(v46, 0, sizeof(v46));
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(v46, (unsigned char *)(a1 + 340), (unsigned char *)(a1 + 340 + v11), v11);
    memset(v45, 0, sizeof(v45));
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(v45, (unsigned char *)(a1 + 345), (unsigned char *)(a1 + 345 + v11), v11);
    unint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v44 = 0;
    std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(&v42, (unsigned char *)(a1 + 350), (unsigned char *)(a1 + 350 + v11), v11);
    std::string __p = 0;
    BOOL v40 = 0;
    uint64_t v41 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, (const void *)(a1 + 356), a1 + 356 + 4 * v11, v11);
    unint64_t v12 = v42;
    if (!*(unsigned char *)(a1 + 355) || !v11) {
      goto LABEL_26;
    }
    unint64_t v13 = 0;
    uint64_t v14 = "general_slice_kernel: strides must be 1 when use_static_sizes == true.";
    char v15 = 1;
    do
    {
      while (1)
      {
        if (*((_DWORD *)v47 + v13) != 1) {
          goto LABEL_83;
        }
        unint64_t v16 = v13 >> 6;
        uint64_t v17 = 1 << v13;
        if ((*(void *)&v42[8 * (v13 >> 6)] & (1 << v13)) != 0)
        {
          uint64_t v14 = "general_slice_kernel: squeeze_masks must be false when use_static_sizes == true.";
          goto LABEL_83;
        }
        if ((*((void *)v46[0] + v16) & v17) != 0)
        {
          uint64_t v14 = "general_slice_kernel: begin_masks must be false when use_static_sizes == true.";
          goto LABEL_83;
        }
        if (*(int *)(a1 + 356 + 4 * v13) > 0) {
          break;
        }
        if ((*((void *)v45[0] + v16) & v17) == 0)
        {
          uint64_t v14 = "general_slice_kernel: end_masks must be true for the index for which static_sizes is not positive, when "
                "use_static_sizes == true.";
LABEL_83:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v14);
        }
        char v15 = 0;
        if (++v13 == v11) {
          goto LABEL_47;
        }
      }
      ++v13;
    }
    while (v11 != v13);
    if ((v15 & 1) == 0)
    {
LABEL_47:
      uint64_t v64 = 0;
      long long v63 = 0u;
      long long v62 = 0u;
      *(void *)&long long v28 = 0x100000001;
      *((void *)&v28 + 1) = 0x100000001;
      *(_OWORD *)&__x.__begin_ = v28;
      LODWORD(__x.__end_cap_.__value_) = 1;
      int v29 = *((_DWORD *)*a2 + 5);
      if (v29 == -1)
      {
        if (*((_DWORD *)*a2 + 4) == 1) {
          int v29 = 4;
        }
        else {
          int v29 = 5;
        }
      }
      HIDWORD(__x.__end_cap_.__value_) = v29;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      v38.__begin_ = (std::vector<int>::pointer)a3;
      LOBYTE(v38.__end_) = 0;
      BOOL v30 = (char *)operator new(0x40uLL);
      *(void *)a3 = v30;
      *(void *)(a3 + 8) = v30;
      *(void *)(a3 + 16) = v30 + 64;
      *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (long long *)&__x, &v65, (uint64_t)v30);
      std::vector<int>::pointer v27 = (std::vector<int>::pointer)v63;
      if ((void)v63)
      {
        *((void *)&v63 + 1) = v63;
        goto LABEL_53;
      }
    }
    else
    {
LABEL_26:
      if (v43 > 0x3F || (v43 & 0x3F) != 0)
      {
        int v18 = 0;
        uint64_t v19 = v42;
        do
        {
          v11 -= (*(void *)v19 >> v18) & 1;
          v19 += 8 * (v18 == 63);
          if (v18 == 63) {
            int v18 = 0;
          }
          else {
            ++v18;
          }
        }
        while (v19 != &v42[8 * (v43 >> 6)] || v18 != (v43 & 0x3F));
      }
      LODWORD(__x.__begin_) = -1;
      std::vector<int>::vector(&v38, v11, (const std::vector<int>::value_type *)&__x);
      Espresso::layer_nd_shape::shape_vector(&__x, (uint64_t)&v56);
      NDLayers::slice_nd_shape_computation(v53, v54, (uint64_t)&v50, (uint64_t *)&v47, (uint64_t *)v46, (uint64_t *)v45, (uint64_t *)&v42, (uint64_t *)&__x, &v38, *(unsigned char *)(a1 + 355), (int **)&__p);
      if (__x.__begin_)
      {
        __x.__end_ = __x.__begin_;
        operator delete(__x.__begin_);
      }
      v36[0] = 0;
      v36[1] = 0;
      uint64_t v37 = 0;
      std::vector<int>::pointer begin = v38.__begin_;
      int64_t v22 = (char *)v38.__end_ - (char *)v38.__begin_;
      if (v38.__end_ != v38.__begin_)
      {
        uint64_t v23 = v22 >> 2;
        if ((unint64_t)(v22 >> 2) <= 1) {
          uint64_t v23 = 1;
        }
        long long v24 = v36;
        do
        {
          int v25 = *begin++;
          *v24++ = v25;
          --v23;
        }
        while (v23);
      }
      HIDWORD(v37) = (unint64_t)v22 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v36, 0, (uint64_t)&__x);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      uint64_t v59 = a3;
      char v60 = 0;
      uint64_t v26 = (char *)operator new(0x40uLL);
      *(void *)a3 = v26;
      *(void *)(a3 + 8) = v26;
      *(void *)(a3 + 16) = v26 + 64;
      *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (long long *)&__x, &v65, (uint64_t)v26);
      if ((void)v63)
      {
        *((void *)&v63 + 1) = v63;
        operator delete((void *)v63);
      }
      std::vector<int>::pointer v27 = v38.__begin_;
      if (v38.__begin_)
      {
        v38.__end_ = v38.__begin_;
LABEL_53:
        operator delete(v27);
      }
    }
    if (__p)
    {
      BOOL v40 = __p;
      operator delete(__p);
    }
    if (v12) {
      operator delete(v12);
    }
    if (v45[0]) {
      operator delete(v45[0]);
    }
    if (v46[0]) {
      operator delete(v46[0]);
    }
    if (v47)
    {
      int v48 = v47;
      operator delete(v47);
    }
    if (v50)
    {
      uint64_t v51 = v50;
      operator delete(v50);
    }
    BOOL v31 = (void *)v53;
    if (v53)
    {
      uint64_t v54 = (uint64_t)v53;
LABEL_68:
      operator delete(v31);
      return;
    }
    return;
  }
  unint64_t v10 = (unsigned char *)(a1 + 345);
  while (*(v10 - 5) && *v10)
  {
    ++v10;
    if (!--v9) {
      goto LABEL_12;
    }
  }
  uint64_t v64 = 0;
  long long v63 = 0u;
  long long v62 = 0u;
  *(void *)&long long v34 = 0x100000001;
  *((void *)&v34 + 1) = 0x100000001;
  *(_OWORD *)&__x.__begin_ = v34;
  LODWORD(__x.__end_cap_.__value_) = 1;
  int v33 = *((_DWORD *)v5 + 5);
  if (v33 == -1)
  {
    if (*((_DWORD *)v5 + 4) == 1) {
      int v33 = 4;
    }
    else {
      int v33 = 5;
    }
  }
LABEL_79:
  HIDWORD(__x.__end_cap_.__value_) = v33;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v56 = a3;
  char v57 = 0;
  BOOL v35 = (char *)operator new(0x40uLL);
  *(void *)a3 = v35;
  *(void *)(a3 + 8) = v35;
  *(void *)(a3 + 16) = v35 + 64;
  *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, (long long *)&__x, &v65, (uint64_t)v35);
  BOOL v31 = (void *)v63;
  if ((void)v63)
  {
    *((void *)&v63 + 1) = v63;
    goto LABEL_68;
  }
}

void sub_1922202A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  *(void *)(v35 + 8) = v36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 184));
  unint64_t v39 = *(void **)(v37 - 104);
  if (v39)
  {
    *(void *)(v37 - 96) = v39;
    operator delete(v39);
  }
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::__init_with_size[abi:ne180100]<BOOL *,BOOL *>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  if (!a4) {
    return result;
  }
  uint64_t v7 = result;
  double result = std::vector<BOOL>::__vallocate[abi:ne180100](result, a4);
  unint64_t v8 = v7[1];
  unint64_t v9 = v8 + a4;
  v7[1] = v8 + a4;
  if (v8)
  {
    unint64_t v10 = v9 - 1;
    if (((v9 - 1) ^ (v8 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v10 = v9 - 1;
  }
  unint64_t v11 = v10 >> 6;
  if (v9 >= 0x41) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = 0;
  }
  *(void *)(*v7 + 8 * v12) = 0;
LABEL_10:
  if (a2 != a3)
  {
    int v13 = v8 & 0x3F;
    uint64_t v14 = (uint64_t *)(*v7 + 8 * (v8 >> 6));
    do
    {
      uint64_t v15 = 1 << v13;
      if (*a2) {
        uint64_t v16 = *v14 | v15;
      }
      else {
        uint64_t v16 = *v14 & ~v15;
      }
      uint64_t *v14 = v16;
      ++a2;
      v14 += v13 == 63;
      if (v13 == 63) {
        int v13 = 0;
      }
      else {
        ++v13;
      }
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1922204E0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_192220560(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void NDLayers::slice_nd_shape_computation(const void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, std::vector<int> *a9, char a10, int **a11)
{
  char v57 = 0;
  int v58 = 0;
  uint64_t v59 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v57, a1, a2, (a2 - (uint64_t)a1) >> 2);
  uint64_t v17 = *(const void **)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  unint64_t v19 = (v18 - *(void *)a3) >> 2;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  std::string __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v17, v18, v19);
  unint64_t v20 = a8[1] - *a8;
  std::vector<int>::size_type v21 = (int)((uint64_t)v20 >> 2);
  std::vector<int>::vector(&v53, v21);
  int64_t v22 = v57;
  if (v21 != (v58 - (unsigned char *)v57) >> 2)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in begin_ids";
    goto LABEL_67;
  }
  uint64_t v23 = __p;
  if (v21 != (v55 - (unsigned char *)__p) >> 2)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in end_ids";
    goto LABEL_67;
  }
  if (a5[1] != v21)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in begin_masks";
    goto LABEL_67;
  }
  if (a6[1] != v21)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in end_masks";
    goto LABEL_67;
  }
  if (a7[1] != v21)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in squeeze_masks";
    goto LABEL_67;
  }
  uint64_t v24 = *a4;
  if (v21 != (a4[1] - *a4) >> 2)
  {
    uint64_t v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in strides";
LABEL_67:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v52);
  }
  if ((int)(v20 >> 2) < 1)
  {
    int v48 = 0;
    goto LABEL_50;
  }
  unint64_t v25 = 0;
  uint64_t v26 = *a5;
  uint64_t v27 = (v20 >> 2);
  uint64_t v28 = *a8;
  do
  {
    if ((*(void *)(v26 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25))
    {
      if (*(int *)(v24 + 4 * v25) <= 0) {
        int v29 = *(_DWORD *)(v28 + 4 * v25) - 1;
      }
      else {
        int v29 = 0;
      }
    }
    else
    {
      int v29 = v22[v25];
      if ((v29 & 0x80000000) == 0) {
        goto LABEL_16;
      }
      v29 += *(_DWORD *)(v28 + 4 * v25);
    }
    v22[v25] = v29;
    if (v29 < 0) {
      goto LABEL_57;
    }
LABEL_16:
    if (v29 >= *(_DWORD *)(v28 + 4 * v25)) {
LABEL_57:
    }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int const&>(v29, *(_DWORD *)(*a8 + 4 * v25));
    ++v25;
  }
  while (v27 != v25);
  if (a10)
  {
    BOOL v30 = *a11;
    BOOL v31 = v22;
    long long v32 = v23;
    uint64_t v33 = (v20 >> 2);
    do
    {
      int v35 = *v30++;
      int v34 = v35;
      if (v35 >= 1) {
        _DWORD *v32 = *v31 + v34;
      }
      ++v32;
      ++v31;
      --v33;
    }
    while (v33);
  }
  unint64_t v36 = 0;
  uint64_t v37 = *a7;
  uint64_t v38 = *a6;
  uint64_t v39 = *a8;
  do
  {
    if ((*(void *)(v37 + 8 * (v36 >> 6)) & (1 << v36)) != 0)
    {
      int v40 = v22[v36] + 1;
LABEL_26:
      v23[v36] = v40;
      goto LABEL_27;
    }
    if ((*(void *)(v38 + 8 * (v36 >> 6)) & (1 << v36)) != 0)
    {
      if (*(int *)(v24 + 4 * v36) < 1) {
        int v40 = -1;
      }
      else {
        int v40 = *(_DWORD *)(v39 + 4 * v36);
      }
      goto LABEL_26;
    }
    int v40 = v23[v36];
    if (v40 < 0)
    {
      v40 += *(_DWORD *)(v39 + 4 * v36);
      v23[v36] = v40;
      if (v40 < 0) {
LABEL_58:
      }
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice: Invalid values in end_ids");
    }
LABEL_27:
    if (v40 > *(_DWORD *)(v39 + 4 * v36)) {
      goto LABEL_58;
    }
    ++v36;
  }
  while (v27 != v36);
  unint64_t v41 = 0;
  uint64_t v42 = *a7;
  std::vector<int>::pointer begin = v53.__begin_;
  uint64_t v44 = "generic_general_slice: Invalid values in strides";
  do
  {
    int v45 = *(_DWORD *)(v24 + 4 * v41);
    if (!v45) {
      goto LABEL_60;
    }
    if ((*(void *)(v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41))
    {
      begin[v41] = 1;
    }
    else
    {
      int v46 = (v23[v41] - v22[v41]) / v45;
      begin[v41] = v46;
      if ((v23[v41] - v22[v41]) % *(_DWORD *)(v24 + 4 * v41)) {
        begin[v41] = ++v46;
      }
      if (v46 <= 0)
      {
        uint64_t v44 = "generic_general_slice: Invalid values in arguments (begin_ids, end_ids, strides)";
LABEL_60:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v44);
      }
    }
    ++v41;
  }
  while (v27 != v41);
  unint64_t v47 = 0;
  int v48 = 0;
  uint64_t v49 = *a7;
  std::vector<int>::pointer v50 = v53.__begin_;
  std::vector<int>::pointer v51 = a9->__begin_;
  do
  {
    if (((*(void *)(v49 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47) & 1) == 0) {
      v51[v48++] = v50[v47];
    }
    ++v47;
  }
  while (v27 != v47);
LABEL_50:
  std::vector<int>::resize(a9, v48);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (__p)
  {
    uint64_t v55 = __p;
    operator delete(__p);
  }
  if (v57)
  {
    int v58 = v57;
    operator delete(v57);
  }
}

void sub_192220964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::net::restore_precompilation_info(void *a1, uint64_t *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "ANE_COMPILER");
  uint64_t v4 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)v3 + 120))(&v23, v3, __p);
  uint64_t v7 = v23;
  unint64_t v6 = v24;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  if ((v26 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v15 = Espresso::espresso_os_log_subsystem(v4, v5);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 8) + 16))(*(void *)(a1[2] + 8));
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v20;
      _os_log_error_impl(&dword_1920CB000, v15, OS_LOG_TYPE_ERROR, "Precompilation info not found for engine: %s", __p, 0xCu);
    }

    goto LABEL_26;
  }
  operator delete(*(void **)__p);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "kernel_validation_status");
  std::vector<int>::size_type v8 = (Espresso *)(*(void *(**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)v7 + 120))(&v23, v7, __p);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v10 = v23;
  if (v23)
  {
    uint64_t v11 = a1[89];
    uint64_t v12 = v23;
    if (!v11)
    {
      int v13 = (char *)operator new(0xB0uLL);
      *((void *)v13 + 2) = 0;
      *(_OWORD *)(v13 + 24) = 0u;
      uint64_t v11 = (uint64_t)(v13 + 24);
      *(void *)int v13 = &unk_1EE388928;
      *((void *)v13 + 1) = 0;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *((void *)v13 + 12) = v13 + 104;
      *((void *)v13 + 17) = 0;
      *((void *)v13 + 16) = 0;
      *((void *)v13 + 15) = v13 + 128;
      *((void *)v13 + 21) = 0;
      *((void *)v13 + 20) = 0;
      *((void *)v13 + 19) = v13 + 160;
      a1[89] = v13 + 24;
      uint64_t v14 = (std::__shared_weak_count *)a1[90];
      a1[90] = v13;
      if (v14)
      {
        nitro::nitro_function::nitro_function(v14);
        uint64_t v11 = a1[89];
        uint64_t v12 = v23;
      }
      else
      {
        uint64_t v12 = v10;
      }
    }
    uint64_t v17 = v24;
    v22[0] = v12;
    v22[1] = (uint64_t)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::kernels_validation_status_t::restore(v11, v22);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  else
  {
    uint64_t v16 = Espresso::espresso_os_log_subsystem(v8, v9);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(a1[2] + 8) + 16))(*(void *)(a1[2] + 8));
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v21;
      _os_log_error_impl(&dword_1920CB000, v16, OS_LOG_TYPE_ERROR, "Validation status info not found for engine: %s", __p, 0xCu);
    }
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v10)
  {
    uint64_t v18 = 1;
    if (!v6) {
      return v18;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v18 = 0;
  if (v6) {
LABEL_27:
  }
    nitro::nitro_function::nitro_function(v6);
  return v18;
}

void sub_192220CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::kernels_validation_status_t::restore(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "to_fallback");
  (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v4 + 128))(v22, v4, &__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  uint64_t v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "visit_order");
  (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v5 + 128))(v21, v5, &__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "any_fallback");
  *(unsigned char *)(a1 + 120) = (*(unsigned int (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, &__p) != 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 24), (uint64_t)(v21[1] - v21[0]) >> 4);
  if (*(void *)(a1 + 32) != *(void *)(a1 + 24))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(v21[0] + v7);
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      Espresso::SerDes::generic_serdes_object::operator[](v10, (uint64_t)v15, &__p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__p, (_DWORD *)(*(void *)(a1 + 24) + v8));
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      ++v9;
      v8 += 4;
      v7 += 16;
    }
    while (v9 < (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2);
  }
  std::vector<int>::resize((std::vector<int> *)(a1 + 48), (uint64_t)(v22[1] - v22[0]) >> 4);
  if (*(void *)(a1 + 56) != *(void *)(a1 + 48))
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = *(void *)(v22[0] + v11);
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      Espresso::SerDes::generic_serdes_object::operator[](v14, (uint64_t)v15, &__p);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__p, (_DWORD *)(*(void *)(a1 + 48) + v12));
      if (v20 < 0) {
        operator delete(v19);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      ++v13;
      v12 += 4;
      v11 += 16;
    }
    while (v13 < (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
  }
  std::string __p = v21;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = v22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_19222104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = &a23;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = &a26;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

float Espresso::cpu_context_transfer_algo_t::assign_to_fallback_context_v2(void *a1, void *a2, uint64_t a3, uint64_t **a4, void *a5)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (((*a4)[1] - **a4) >> 5);
  uint64_t v10 = (std::vector<int> *)(a1[7] + 48);
  std::vector<int>::resize(v10, (int)v9);
  if ((int)v9 >= 1) {
    bzero(v10->__begin_, 4 * v9);
  }
  unint64_t v71 = a5;
  uint64_t v72 = (uint64_t *)v10;
  uint64_t v11 = *a4;
  *(void *)uint8_t buf = 0;
  long long v91 = 0;
  uint64_t v12 = (std::__shared_weak_count *)v11[10];
  if (v12)
  {
    unint64_t v13 = std::__shared_weak_count::lock(v12);
    long long v91 = v13;
    if (v13) {
      *(void *)uint8_t buf = v11[9];
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t PlatformHeuristics = GetPlatformHeuristics((Espresso::net **)buf);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (PlatformHeuristics) {
    unint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)PlatformHeuristics + 160))(PlatformHeuristics);
  }
  else {
    unint64_t v15 = -1;
  }
  char v16 = (std::__shared_weak_count *)a2[1];
  v89[0] = *a2;
  v89[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  v88[0] = *a4;
  v88[1] = (uint64_t *)v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char has_any_fallback = Espresso::cpu_context_transfer_algo_t::has_any_fallback((uint64_t)a1, (uint64_t)v89, v88);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if ((has_any_fallback & 1) != 0
    || ((unint64_t v19 = (Espresso *)(***(uint64_t (****)(void))(*a2 + 8))(*(void *)(*a2 + 8)),
         (v19 - 10006) <= 5)
      ? (BOOL v21 = ((0x2Fu >> ((_BYTE)v19 - 22)) & 1) == 0)
      : (BOOL v21 = 1),
        v21 || (v9 != 1 ? (BOOL v22 = (int)v9 > v15) : (BOOL v22 = 1), !v22)))
  {
    char v26 = (std::__shared_weak_count *)a2[1];
    *(void *)uint8_t buf = *a2;
    long long v91 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = a1[10];
    uint64_t v92 = a1[9];
    uint64_t v93 = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v85 = 0;
    long long v86 = 0;
    uint64_t v87 = 0;
    uint64_t v82 = &v85;
    LOBYTE(v83) = 0;
    uint64_t v28 = (char *)operator new(0x20uLL);
    uint64_t v29 = 0;
    uint64_t v85 = v28;
    long long v86 = v28;
    uint64_t v87 = v28 + 32;
    do
    {
      long long v30 = *(_OWORD *)&buf[v29];
      *(_OWORD *)&v28[v29] = v30;
      if (*((void *)&v30 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v29 += 16;
    }
    while (v29 != 32);
    long long v86 = v28 + 32;
    for (uint64_t i = 24; i != -8; i -= 16)
    {
      long long v32 = *(std::__shared_weak_count **)&buf[i];
      if (v32) {
        nitro::nitro_function::nitro_function(v32);
      }
    }
    (***(void (****)(void))(*a2 + 8))(*(void *)(*a2 + 8));
    (***(void (****)(void))(a1[9] + 8))(*(void *)(a1[9] + 8));
    *(void *)uint8_t buf = 0;
    long long v91 = 0;
    uint64_t v92 = 0;
    uint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v33 = *a4;
    int v34 = (std::__shared_weak_count *)(*a4)[10];
    if (v34)
    {
      int v35 = std::__shared_weak_count::lock(v34);
      if (v35) {
        uint64_t v36 = v33[9];
      }
      else {
        uint64_t v36 = 0;
      }
    }
    else
    {
      uint64_t v36 = 0;
      int v35 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v79, "espresso.dispatch.fallback_only_when_unavailable");
    std::string::basic_string[abi:ne180100]<0>(__p, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>(v36 + 472, (uint64_t)v79, (uint64_t)__p, &v81);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v37 = v81.__r_.__value_.__l.__size_ == 1 && *v81.__r_.__value_.__l.__data_ == 49;
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v37 = SHIBYTE(v81.__r_.__value_.__r.__words[2]) == 1 && v81.__r_.__value_.__s.__data_[0] == 49;
    }
    if (v78 < 0) {
      operator delete(__p[0]);
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
    uint64_t v38 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
    uint64_t v39 = [v38 persistentDomainForName:*MEMORY[0x1E4F283E0]];

    int v40 = [v39 objectForKeyedSubscript:@"com.espresso.dispatch_version"];
    unint64_t v41 = v40;
    if (v40) {
      int v42 = [v40 intValue];
    }
    else {
      int v42 = 3;
    }

    unint64_t v43 = getenv("ESPRESSO_DISPATCH_VERSION");
    if (v43) {
      int v42 = atoi(v43);
    }
    std::string::basic_string[abi:ne180100]<0>(v79, "espresso.dispatch.v3_enable");
    std::string::basic_string[abi:ne180100]<0>(__p, "1");
    Espresso::map_const_get<std::map<std::string,std::string>>(v36 + 472, (uint64_t)v79, (uint64_t)__p, &v81);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v81.__r_.__value_.__l.__size_ == 1)
      {
        int v46 = (void *)v81.__r_.__value_.__r.__words[0];
        BOOL v48 = *v81.__r_.__value_.__l.__data_ != 48 && v42 == 3;
      }
      else
      {
        BOOL v48 = v42 == 3;
        int v46 = (void *)v81.__r_.__value_.__r.__words[0];
      }
      if (PlatformHeuristics) {
        int v50 = v48;
      }
      else {
        int v50 = 0;
      }
      operator delete(v46);
    }
    else
    {
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) == 1) {
        BOOL v45 = v81.__r_.__value_.__s.__data_[0] != 48 && v42 == 3;
      }
      else {
        BOOL v45 = v42 == 3;
      }
      int v50 = v45 && PlatformHeuristics != 0;
    }
    if (v78 < 0) {
      operator delete(__p[0]);
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
    if (v50)
    {
      std::vector<int>::pointer v51 = (std::__shared_weak_count *)a4[1];
      v76[0] = *a4;
      v76[1] = (uint64_t *)v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::cpu_context_transfer_algo_t::compute_local_costs_v3((uint64_t *)&v85, v44, v76, v71, (uint64_t)buf, &v82);
      if (v51) {
        nitro::nitro_function::nitro_function(v51);
      }
      if (!v37)
      {
        uint64_t v54 = *a4;
        uint64_t v55 = (std::__shared_weak_count *)a4[1];
        v75[0] = v54;
        v75[1] = (uint64_t *)v55;
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path_v3(v52, (uint64_t *)&v85, v53, v75, buf, &v82, v72);
LABEL_120:
        float v25 = v56;
        if (v55) {
          nitro::nitro_function::nitro_function(v55);
        }
LABEL_123:

        if (v35) {
          nitro::nitro_function::nitro_function(v35);
        }
        if (v82) {
          operator delete(v82);
        }
        if (*(void *)buf) {
          operator delete(*(void **)buf);
        }
        *(void *)uint8_t buf = &v85;
        std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        return v25;
      }
    }
    else
    {
      char v57 = (std::__shared_weak_count *)a4[1];
      v74[0] = *a4;
      v74[1] = (uint64_t *)v57;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::cpu_context_transfer_algo_t::compute_local_costs((uint64_t *)&v85, v44, v74, v71, (uint64_t)buf, (uint64_t)&v82);
      if (v57) {
        nitro::nitro_function::nitro_function(v57);
      }
      if (!v37)
      {
        uint64_t v69 = *a4;
        uint64_t v55 = (std::__shared_weak_count *)a4[1];
        v73[0] = v69;
        v73[1] = (uint64_t *)v55;
        if (v55) {
          atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::cpu_context_transfer_algo_t::compute_graph_shortest_path(v58, (uint64_t)&v85, v59, v73, (uint64_t *)buf, (uint64_t *)&v82, v72);
        goto LABEL_120;
      }
    }
    if (v86 - v85 != 32) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("fallback_only_when_unavailable only supports 2 engines");
    }
    uint64_t v61 = **a4;
    uint64_t v60 = (*a4)[1];
    std::vector<int>::size_type v62 = (v60 - v61) / 224;
    std::vector<int>::resize((std::vector<int> *)v72, v62);
    if (v60 == v61)
    {
      float v25 = 0.0;
    }
    else
    {
      unint64_t v63 = 0;
      uint64_t v64 = (char *)v82;
      long long v65 = (_DWORD *)*v72;
      float v25 = 0.0;
      int v66 = *(double **)buf;
      do
      {
        if ((*(void *)&v64[(v63 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v63 & 0x3E))) {
          unint64_t v67 = v63;
        }
        else {
          unint64_t v67 = v63 + 1;
        }
        *v65++ = ((*(void *)&v64[(v63 >> 3) & 0x1FFFFFFFFFFFFFF8] >> (v63 & 0x3E)) & 1) == 0;
        float v68 = v66[v67];
        float v25 = v25 + v68;
        v63 += 2;
        --v62;
      }
      while (v62);
    }
    goto LABEL_123;
  }
  uint64_t v23 = Espresso::espresso_os_log_subsystem(v19, v20);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    int v24 = (***(uint64_t (****)(void))(a1[9] + 8))(*(void *)(a1[9] + 8));
    *(_DWORD *)uint8_t buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_log_impl(&dword_1920CB000, v23, OS_LOG_TYPE_INFO, "No fallback needed: %d", buf, 8u);
  }

  return 0.0;
}

void sub_1922218B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38)
{
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<Device>::__append(this, __sz - v2);
  }
}

uint64_t GetPlatformHeuristics(Espresso::net **a1)
{
  std::vector<int>::size_type v2 = *a1;
  if (GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::onceToken != -1) {
    dispatch_once(&GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::onceToken, &__block_literal_global_20396);
  }
  uint64_t v3 = (std::mutex *)(GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new + 8);
  std::mutex::lock((std::mutex *)(GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new + 8));
  uint64_t v4 = getenv("ESPRESSO_CHIP_ID");
  if (v4)
  {
    int v5 = atoi(v4);
    uint64_t v6 = v5;
    GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::chip_id = v5;
  }
  else
  {
    uint64_t v6 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::chip_id;
  }
  unint64_t v7 = v6 - 24577;
  if (v7 <= 0x21 && ((1 << v7) & 0x300000003) != 0 && Espresso::net::model_is_mil(*a1))
  {
    uint64_t v8 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_jade;
    goto LABEL_23;
  }
  uint64_t v9 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v2 + 472);
  if ([v9 isEqualToString:@"H12"])
  {
    uint64_t v10 = &GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_old;
LABEL_22:
    uint64_t v8 = *v10;

    goto LABEL_23;
  }
  if (([v9 isEqualToString:@"H13"] & 1) != 0
    || ([v9 isEqualToString:@"H14"] & 1) != 0
    || ([v9 isEqualToString:@"H13G"] & 1) != 0
    || ([v9 isEqualToString:@"H14G"] & 1) != 0
    || ([v9 isEqualToString:@"H14G.N301"] & 1) != 0
    || ([v9 isEqualToString:@"H15"] & 1) != 0
    || ([v9 isEqualToString:@"H15G"] & 1) != 0
    || ([v9 isEqualToString:@"M11"] & 1) != 0
    || ([v9 isEqualToString:@"H16"] & 1) != 0)
  {
    uint64_t v10 = &GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new;
    goto LABEL_22;
  }
  int v12 = [v9 isEqualToString:@"H17"];
  uint64_t v13 = GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::pHeuristics_new;

  if (v12) {
    uint64_t v8 = v13;
  }
  else {
    uint64_t v8 = 0;
  }
LABEL_23:
  std::mutex::unlock(v3);
  return v8;
}

void sub_192221C4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::vector<Device>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      uint64_t v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    char v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = (int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      BOOL v21 = &v13[4 * v9 - 16];
      BOOL v22 = (long long *)(end - 4);
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t Espresso::cpu_context_transfer_algo_t::has_any_fallback(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a3;
  uint64_t v21 = *(void *)(a1 + 56);
  if ((int)(-1227133513 * (((*a3)[1] - **a3) >> 5)) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v22 = -1227133513 * (((*a3)[1] - **a3) >> 5);
    do
    {
      uint64_t v8 = *v3;
      uint64_t v9 = (uint64_t *)(*v3 + v6);
      int v10 = *((unsigned __int8 *)v9 + 105);
      uint64_t v11 = *a3;
      unint64_t v12 = (std::__shared_weak_count *)a3[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
      v23[0] = *(const void **)a2;
      v23[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (Espresso *)Espresso::also_check_not_blacklisted(v7, v10 != 0, *v11, v23);
      char v16 = (char)v14;
      if (v13) {
        nitro::nitro_function::nitro_function(v13);
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      if ((v16 & 1) == 0)
      {
        *(unsigned char *)(v21 + 120) = 1;
        uint64_t v17 = Espresso::espresso_os_log_subsystem(v14, v15);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v18 = v8 + v6;
          if (*(char *)(v8 + v6 + 23) < 0) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          uint64_t v19 = (void *)(v18 + 48);
          if (*(char *)(v18 + 71) < 0) {
            uint64_t v19 = (void *)*v19;
          }
          *(_DWORD *)uint8_t buf = 67109634;
          int v25 = v7;
          __int16 v26 = 2080;
          uint64_t v27 = v9;
          __int16 v28 = 2080;
          uint64_t v29 = v19;
          _os_log_debug_impl(&dword_1920CB000, v17, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Needs fallback: Layer %d: %s (%s)\n", buf, 0x1Cu);
        }
      }
      ++v7;
      v6 += 224;
    }
    while (v22 != v7);
  }
  return *(unsigned __int8 *)(v21 + 120);
}

void sub_192222008(_Unwind_Exception *exception_object)
{
}

uint64_t newpPlatformHeuristics::small_net_layer_count_threshold(newpPlatformHeuristics *this)
{
  return 10;
}

void E5RT::GetCurrentPlatformName(E5RT *this@<X0>, std::string *a2@<X8>)
{
  if (qword_1E9301C68 != -1)
  {
    dispatch_once(&qword_1E9301C68, &unk_1EE398F88);
    if (!byte_1E9301C50) {
      goto LABEL_3;
    }
LABEL_14:
    PlatformFromANEInformation = (E5Common::E5PlatformManager *)E5RT::GetPlatformFromANEInformation(this);
    goto LABEL_6;
  }
  if (byte_1E9301C50) {
    goto LABEL_14;
  }
LABEL_3:
  if (E5RT::GetChipID(void)::onceToken != -1) {
    dispatch_once(&E5RT::GetChipID(void)::onceToken, &unk_1EE398FE8);
  }
  PlatformFromANEInformation = E5RT::GetPlatformFromChipID((E5RT *)E5RT::GetChipID(void)::chipID);
LABEL_6:
  if (v4) {
    int v5 = PlatformFromANEInformation;
  }
  else {
    int v5 = 0;
  }
  uint64_t v9 = v5;
  int v10 = 0;
  uint64_t v6 = E5Common::E5PlatformManager::Instance(PlatformFromANEInformation);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, E5Common::E5PlatformManager **))(*(void *)v6 + 24))(v6, &v9);
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)v7;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v9);
}

void sub_19222215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Espresso::AOT::MILCompilerForE5::Run(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  char v4 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33);
  uint64_t InputPath = Espresso::AOT::CompilerOptionsForE5::GetInputPath((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33));
  memset(&v107, 0, sizeof(v107));
  uint64_t v6 = *(unsigned __int8 *)(InputPath + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = (std::string *)InputPath;
  }
  else {
    uint64_t v7 = *(std::string **)InputPath;
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(InputPath + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v107.__pn_, v7, (std::string *)((char *)v7 + v6));
  std::__fs::filesystem::path::__string_view v8 = std::__fs::filesystem::path::__parent_path(&v107);
  if (v8.__size_ > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v8.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v10 = (v8.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v10 = v8.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v8.__size_;
    goto LABEL_13;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8.__size_;
  p_dst = &__dst;
  if (v8.__size_) {
LABEL_13:
  }
    memmove(p_dst, v8.__data_, v8.__size_);
  p_dst->__r_.__value_.__s.__data_[v8.__size_] = 0;
  std::string v106 = __dst;
  uint64_t OutputBundlePath = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(v4);
  memset(&v105, 0, sizeof(v105));
  uint64_t v13 = *(unsigned __int8 *)(OutputBundlePath + 23);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = (std::string *)OutputBundlePath;
  }
  else {
    uint64_t v14 = *(std::string **)OutputBundlePath;
  }
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(OutputBundlePath + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v105.__pn_, v14, (std::string *)((char *)v14 + v13));
  std::__fs::filesystem::__create_directories(&v105, 0);
  std::__fs::filesystem::__status(&v105, 0);
  char v16 = Espresso::espresso_os_log_subsystem(0, v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    Espresso::AOT::MILCompilerForE5::Run((uint64_t *)&v105, (uint64_t)v104, v16);
  }
  int DumpIrOnly = Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly(v4);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DAB6C0;
  strcpy(__dst.__r_.__value_.__l.__data_, "Optimized_InputOfMILCompilerForE5.mil");
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    uint64_t v17 = a1[93];
    if (!v17) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  uint64_t v17 = a1[93];
  if (v17) {
LABEL_25:
  }
    (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
LABEL_26:
  uint64_t v25 = *(void *)(Espresso::AOT::CompilerOptionsForE5::GetPlatforms(v4) + 16);
  if (v25)
  {
    uint64_t v78 = 28;
    while (1)
    {
      std::string v81 = (uint64_t *)v25;
      long long v103 = *(_OWORD *)(v25 + 16);
      if (!Espresso::AOT::Utils::IsPlatformMixANE(v103, v18, v19, v20, v21, v22, v23, v24, v78)
        || (Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(v4) & 1) == 0)
      {
        break;
      }
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v103);
      uint64_t v25 = *v81;
      if (!*v81) {
        goto LABEL_117;
      }
    }
    __int16 v26 = (E5Common::E5PlatformManager *)(*(void *(**)(MIL::Opsets::Common::ios15::ios15Opset **__return_ptr))(*(void *)a2 + 32))(&v102);
    uint64_t v27 = E5Common::E5PlatformManager::Instance(v26);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v27 + 24))(v27, &v103);
    uint64_t v30 = Espresso::espresso_os_log_subsystem(0, v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
      Espresso::AOT::MILCompilerForE5::Run(buf, (uint64_t *)v28, &v109, v30);
    }
    char v101 = 7;
    strcpy((char *)v100, ".bundle");
    char v99 = 3;
    LODWORD(v98[0]) = 3499310;
    uint64_t v31 = Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(v4);
    long long v32 = (const void **)v31;
    int v33 = *(char *)(v31 + 23);
    if (v33 >= 0) {
      size_t v34 = *(unsigned __int8 *)(v31 + 23);
    }
    else {
      size_t v34 = *(void *)(v31 + 8);
    }
    unint64_t v35 = v34 + 1;
    if (v34 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v35 >= 0x17)
    {
      uint64_t v37 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17) {
        uint64_t v37 = v35 | 7;
      }
      uint64_t v38 = v37 + 1;
      uint64_t v36 = operator new(v37 + 1);
      *(void *)&v83[8] = v34 + 1;
      *(void *)&v83[16] = v38 | 0x8000000000000000;
      *(void *)uint64_t v83 = v36;
    }
    else
    {
      memset(v83, 0, 24);
      uint64_t v36 = v83;
      v83[23] = v34 + 1;
      if (!v34) {
        goto LABEL_47;
      }
    }
    if (v33 >= 0) {
      uint64_t v39 = v32;
    }
    else {
      uint64_t v39 = *v32;
    }
    memmove(v36, v39, v34);
LABEL_47:
    *(_WORD *)&v36[v34] = 47;
    int v40 = *(char *)(v28 + 23);
    if (v40 >= 0) {
      unint64_t v41 = (const std::string::value_type *)v28;
    }
    else {
      unint64_t v41 = *(const std::string::value_type **)v28;
    }
    if (v40 >= 0) {
      std::string::size_type v42 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      std::string::size_type v42 = *(void *)(v28 + 8);
    }
    unint64_t v43 = std::string::append((std::string *)v83, v41, v42);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v101 >= 0) {
      BOOL v45 = v100;
    }
    else {
      BOOL v45 = (void **)v100[0];
    }
    if (v101 >= 0) {
      std::string::size_type v46 = v101;
    }
    else {
      std::string::size_type v46 = (std::string::size_type)v100[1];
    }
    unint64_t v47 = std::string::append(&__dst, (const std::string::value_type *)v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    int64_t v97 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v96 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v83[23] & 0x80000000) == 0) {
        goto LABEL_61;
      }
    }
    else if ((v83[23] & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*(void **)v83);
LABEL_61:
    int v49 = SHIBYTE(v97);
    if (v97 >= 0) {
      size_t v50 = HIBYTE(v97);
    }
    else {
      size_t v50 = (size_t)v96[1];
    }
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v51 >= 0x17)
    {
      uint64_t v53 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17) {
        uint64_t v53 = v51 | 7;
      }
      uint64_t v54 = v53 + 1;
      uint64_t v52 = operator new(v53 + 1);
      *(void *)&v83[8] = v50 + 1;
      *(void *)&v83[16] = v54 | 0x8000000000000000;
      *(void *)uint64_t v83 = v52;
    }
    else
    {
      memset(v83, 0, 24);
      uint64_t v52 = v83;
      v83[23] = v50 + 1;
      if (!v50) {
        goto LABEL_75;
      }
    }
    if (v49 >= 0) {
      uint64_t v55 = v96;
    }
    else {
      uint64_t v55 = (void **)v96[0];
    }
    memmove(v52, v55, v50);
LABEL_75:
    *(_WORD *)&v52[v50] = 47;
    int v56 = *(char *)(v28 + 23);
    if (v56 >= 0) {
      char v57 = (const std::string::value_type *)v28;
    }
    else {
      char v57 = *(const std::string::value_type **)v28;
    }
    if (v56 >= 0) {
      std::string::size_type v58 = *(unsigned __int8 *)(v28 + 23);
    }
    else {
      std::string::size_type v58 = *(void *)(v28 + 8);
    }
    uint64_t v59 = std::string::append((std::string *)v83, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    if (v99 >= 0) {
      uint64_t v61 = v98;
    }
    else {
      uint64_t v61 = (void **)v98[0];
    }
    if (v99 >= 0) {
      std::string::size_type v62 = v99;
    }
    else {
      std::string::size_type v62 = (std::string::size_type)v98[1];
    }
    unint64_t v63 = std::string::append(&__dst, (const std::string::value_type *)v61, v62);
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    std::string::size_type v95 = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v94 = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v83[23] & 0x80000000) == 0) {
        goto LABEL_89;
      }
    }
    else if ((v83[23] & 0x80000000) == 0)
    {
      goto LABEL_89;
    }
    operator delete(*(void **)v83);
LABEL_89:
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_192DAA330;
    strcpy(__dst.__r_.__value_.__l.__data_, "ESPRESSO_ENABLE_VALUE_INFERENCE");
    v83[23] = 1;
    strcpy(v83, "1");
    Espresso::scoped_env_var_kv::scoped_env_var_kv(&v93, (long long *)&__dst, (uint64_t)v83);
    if ((v83[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v83);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_91;
      }
    }
    else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_91:
      long long v91 = v103;
      Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform((uint64_t)a1, (uint64_t)&v92);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v91);
      long long v89 = v103;
      Espresso::AOT::MILCompilerForE5::ExtractBackends((uint64_t)a1, &v89, (char **)v90);
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v89);
      int v66 = (unsigned int *)v90[0];
      unint64_t v67 = (unsigned int *)v90[1];
      while (v66 != v67)
      {
        float v68 = Espresso::espresso_os_log_subsystem(0, v65);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          Backenduint64_t Name = Espresso::AOT::GetBackendName(*v66);
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)BackendName;
          _os_log_debug_impl(&dword_1920CB000, v68, OS_LOG_TYPE_DEBUG, "Backend registered: %s", (uint8_t *)&__dst, 0xCu);
        }
        ++v66;
      }
      uint64_t v70 = v102;
      uint64_t v102 = 0;
      uint64_t v88 = v70;
      Espresso::AOT::MILCompilerForE5::CanonicalizeForPlatform((Espresso::AOT::AbstractMILCompiler *)a1, &v88, (uint64_t)&v103, &__dst);
      std::string::size_type v71 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      uint64_t v72 = v102;
      uint64_t v102 = (MIL::Opsets::Common::ios15::ios15Opset *)v71;
      if (v72)
      {
        (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(void *)v72 + 8))(v72);
        std::string::size_type v73 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = 0;
        if (v73) {
          (*(void (**)(std::string::size_type))(*(void *)v73 + 8))(v73);
        }
      }
      long long v74 = v88;
      uint64_t v88 = 0;
      if (v74) {
        (*(void (**)(MIL::Opsets::Common::ios15::ios15Opset *))(*(void *)v74 + 8))(v74);
      }
      uint64_t v75 = (uint64_t)v102;
      memset(&__dst, 0, sizeof(__dst));
      uint64_t v76 = (char *)HIBYTE(v97);
      if (v97 >= 0) {
        unint64_t v77 = (std::string *)v96;
      }
      else {
        unint64_t v77 = (std::string *)v96[0];
      }
      if (v97 < 0) {
        uint64_t v76 = (char *)v96[1];
      }
      std::string::append[abi:ne180100]<char const*,0>(&__dst, v77, (std::string *)&v76[(void)v77]);
      *(void *)uint64_t v83 = operator new(0x20uLL);
      *(_OWORD *)&v83[8] = xmmword_192DB16C0;
      strcpy(*(char **)v83, "CanonicalizeForPlatform.mil");
      if ((v83[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v83);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_108;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_108;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_108:
      uint64_t v85 = 0;
      *(void *)long long v86 = 0;
      uint64_t v87 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      memset(v83, 0, sizeof(v83));
      int v84 = 1065353216;
      operator new();
    }
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_91;
  }
LABEL_117:
  if (SHIBYTE(v105.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v105.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v107.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_123:
      operator delete(v107.__pn_.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(v106.__r_.__value_.__l.__data_);
  if (SHIBYTE(v107.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_123;
  }
}

void sub_192224108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x35F]) < 0) {
    operator delete((void *)STACK[0x348]);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x360]);
  uint64_t v72 = a51;
  if (a51)
  {
    uint64_t v73 = a52;
    long long v74 = a51;
    if ((void *)a52 != a51)
    {
      do
      {
        uint64_t v75 = *(std::__shared_weak_count **)(v73 - 8);
        if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
        v73 -= 16;
      }
      while ((void *)v73 != v72);
      long long v74 = a51;
    }
    a52 = (uint64_t)v72;
    operator delete(v74);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8))(a44);
  }
  (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
  uint64_t v76 = a49;
  a49 = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  if (a50) {
    (*(void (**)(uint64_t))(*(void *)a50 + 8))(a50);
  }
  MEMORY[0x192FF16B0](a30, 0xC400A2AC0F1);
  std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100]((uint64_t)&a57);
  std::vector<std::string>::~vector[abi:ne180100](&a63);
  if (a70)
  {
    a71 = (uint64_t)a70;
    operator delete(a70);
  }
  unint64_t v77 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v77;
    operator delete(v77);
  }
  Espresso::scoped_env_var_kv::~scoped_env_var_kv((const char **)&STACK[0x230]);
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (SLOBYTE(STACK[0x29F]) < 0)
  {
    operator delete((void *)STACK[0x288]);
    if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if ((SLOBYTE(STACK[0x2B7]) & 0x80000000) == 0)
  {
LABEL_32:
    unint64_t v78 = STACK[0x2B8];
    STACK[0x2B8] = 0;
    if (!v78) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  operator delete((void *)STACK[0x2A0]);
  unint64_t v78 = STACK[0x2B8];
  STACK[0x2B8] = 0;
  if (!v78)
  {
LABEL_34:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&STACK[0x2C0]);
    if (SLOBYTE(STACK[0x2EF]) < 0)
    {
      operator delete((void *)STACK[0x2D8]);
      if (SLOBYTE(STACK[0x307]) < 0) {
        goto LABEL_36;
      }
    }
    else if (SLOBYTE(STACK[0x307]) < 0)
    {
LABEL_36:
      operator delete((void *)STACK[0x2F0]);
      if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0) {
LABEL_37:
      }
        _Unwind_Resume(a1);
LABEL_6:
      operator delete((void *)STACK[0x310]);
      _Unwind_Resume(a1);
    }
    if ((SLOBYTE(STACK[0x327]) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_6;
  }
LABEL_33:
  (*(void (**)(unint64_t))(*(void *)v78 + 8))(v78);
  goto LABEL_34;
}

void anonymous namespace'::DumpIR(int a1, uint64_t a2, uint64_t a3, std::__fs::filesystem::path *a4, uint64_t a5)
{
  _OWORD v25[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  std::__fs::filesystem::__create_directories(a4, 0);
  uint64_t v9 = std::string::append(&v23, "_dumped_");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  int v11 = *(char *)(a5 + 23);
  if (v11 >= 0) {
    unint64_t v12 = (const std::string::value_type *)a5;
  }
  else {
    unint64_t v12 = *(const std::string::value_type **)a5;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a5 + 8);
  }
  uint64_t v14 = std::string::append(&v24, v12, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
  v25[0] = v14->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *(void *)a5 = v15;
  *(void *)(a5 + 8) = v25[0];
  *(void *)(a5 + 15) = *(void *)((char *)v25 + 7);
  *(unsigned char *)(a5 + 23) = v16;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_12:
  memset(&v23, 0, sizeof(v23));
  uint64_t v17 = *(unsigned __int8 *)(a5 + 23);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = (std::string *)a5;
  }
  else {
    uint64_t v18 = *(std::string **)a5;
  }
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a5 + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&v23, v18, (std::string *)((char *)v18 + v17));
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&v23, (uint64_t)a4, (std::__fs::filesystem::path *)&v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v22, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string v22 = v24;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v21 = *(std::string *)a3;
  }
  char v20 = 0;
  LOBYTE(__p) = 0;
  Espresso::MILUtil::SerializeProgram(a2, (uint64_t)&v22, (uint64_t)&v21, (uint64_t)&__p, 0x100000004, 0);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
LABEL_33:
      operator delete(v22.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_29:
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
LABEL_35:
        operator delete(v23.__r_.__value_.__l.__data_);
        return;
      }
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_33;
  }
LABEL_28:
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_29;
  }
LABEL_34:
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_192224BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a40 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a34 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a29);
      _Unwind_Resume(exception_object);
    }
  }
  else if ((a40 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a35);
  if ((a34 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL Espresso::AOT::E5BackendFlexibleShapeTransformer::HasAnEntryPointWithFlexibleShapeAttribute(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v18, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    while (1)
    {
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 56))(a2, v5))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v14 = std::string::append(&v16, " does not exist.");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v17.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(exception, &v17);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
      }
      MIL::IRProgram::GetFunction();
      MIL::Attributes::FlexibleShapeInfo::Make();
      if (*(void *)(MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes((MIL::Attributes::FlexibleShapeInfo *)v16.__r_.__value_.__l.__data_)
                     + 24))
      {
        int v11 = (MIL::Attributes::FlexibleShapeInfo *)v16.__r_.__value_.__r.__words[0];
        v16.__r_.__value_.__r.__words[0] = 0;
        if (v11)
        {
          MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v11);
          MEMORY[0x192FF16B0]();
        }
        BOOL v8 = 1;
        long long v10 = v19;
        if (v19) {
          goto LABEL_19;
        }
        return v8;
      }
      MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes((uint64_t *)&v17, (MIL::Attributes::FlexibleShapeInfo *)v16.__r_.__value_.__l.__data_);
      long long v7 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
      BOOL v8 = v17.__r_.__value_.__r.__words[0] != 0;
      if (!v17.__r_.__value_.__l.__size_
        || atomic_fetch_add((atomic_ullong *volatile)(v17.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        break;
      }
      (*(void (**)(void))(**((void **)&v7 + 1) + 16))(*((void *)&v7 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v7 + 1));
      uint64_t v9 = (MIL::Attributes::FlexibleShapeInfo *)v16.__r_.__value_.__r.__words[0];
      v16.__r_.__value_.__r.__words[0] = 0;
      if (v9) {
        goto LABEL_7;
      }
LABEL_8:
      if (!(void)v7)
      {
        v5 += 24;
        if (v5 != v6) {
          continue;
        }
      }
      goto LABEL_14;
    }
    uint64_t v9 = (MIL::Attributes::FlexibleShapeInfo *)v16.__r_.__value_.__r.__words[0];
    v16.__r_.__value_.__r.__words[0] = 0;
    if (!v9) {
      goto LABEL_8;
    }
LABEL_7:
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v9);
    MEMORY[0x192FF16B0]();
    goto LABEL_8;
  }
  BOOL v8 = 0;
LABEL_14:
  long long v10 = v19;
  if (v19)
  {
LABEL_19:
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v8;
}

void sub_192224F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetOutputBundlePath(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 24;
}

void *Espresso::AOT::SegmentsIOTransformer::SegmentsIOTransformer(Espresso::AOT::SegmentsIOTransformer *this)
{
  double result = Espresso::AOT::AbstractMILPass::AbstractMILPass(this);
  *double result = &unk_1EE36B4E0;
  return result;
}

{
  void *result;

  double result = Espresso::AOT::AbstractMILPass::AbstractMILPass(this);
  *double result = &unk_1EE36B4E0;
  return result;
}

void *Espresso::AOT::AbstractMILPass::AbstractMILPass(void *this)
{
  *this = &unk_1EE36B0A0;
  return this;
}

BOOL Espresso::AOT::Utils::IsPlatformMixANE(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v10 = (unint64_t)(a1 - 32784) <= 5 && ((1 << (a1 - 16)) & 0x27) != 0 || a1 == 0;
  if (v10 || a1 == 28672) {
    return 0;
  }
  unint64_t v12 = (char *)&a9;
  if (a1 <= 32806)
  {
    if (a1 == 32774)
    {
      uint64_t v13 = 2;
      goto LABEL_22;
    }
    if (a1 == 32800)
    {
      uint64_t v13 = 4;
      goto LABEL_22;
    }
  }
  else
  {
    switch(a1)
    {
      case 32807:
        uint64_t v13 = 5;
        goto LABEL_22;
      case 32816:
        uint64_t v13 = 6;
        goto LABEL_22;
      case 33537:
        uint64_t v13 = 7;
LABEL_22:
        unint64_t v12 = (char *)&v14[v13];
        break;
    }
  }
  return v12 - (char *)v14 != 88;
}

uint64_t std::unordered_map<std::string,Espresso::AOT::MemOptimizer::AllocInfo>::~unordered_map[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  std::vector<int>::size_type v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(int a1, char *__p)
{
  if (__p)
  {
    std::vector<int>::size_type v2 = __p;
    do
    {
      uint64_t v3 = *(char **)v2;
      char v4 = (void **)*((void *)v2 + 7);
      if (v4)
      {
        do
        {
          uint64_t v6 = (void **)*v4;
          if (*((char *)v4 + 39) < 0) {
            operator delete(v4[2]);
          }
          operator delete(v4);
          char v4 = v6;
        }
        while (v6);
      }
      uint64_t v5 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      std::vector<int>::size_type v2 = v3;
    }
    while (v3);
  }
}

void Espresso::AOT::SegmentsIOTransformer::~SegmentsIOTransformer(Espresso::AOT::SegmentsIOTransformer *this)
{
  Espresso::AOT::AbstractMILPass::~AbstractMILPass(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::SegmenterShortestPath::~SegmenterShortestPath(Espresso::AOT::SegmenterShortestPath *this)
{
  Espresso::AOT::SegmenterShortestPath::~SegmenterShortestPath(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Espresso::AOT::MILSegmenterOptions *v5;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B4B8;
  std::vector<int>::size_type v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 8);
    char v4 = (void *)*((void *)this + 7);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      char v4 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    operator delete(v4);
  }
  uint64_t v5 = (Espresso::AOT::MILSegmenterOptions *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5)
  {
    Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(v5);
    MEMORY[0x192FF16B0]();
  }

  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter((char **)this);
}

void Espresso::AOT::MILSegmenterOptions::~MILSegmenterOptions(Espresso::AOT::MILSegmenterOptions *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(this + 64, *((char **)this + 10));
  std::vector<int>::size_type v2 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    operator delete(v2);
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0) {
    goto LABEL_7;
  }
}

{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(this + 64, *((char **)this + 10));
  std::vector<int>::size_type v2 = (void *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v2) {
    operator delete(v2);
  }
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*((void **)this + 1));
    return;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0) {
    goto LABEL_7;
  }
}

void Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(char **this)
{
  *this = (char *)&unk_1EE36B1F0;
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node(this + 8, this[3]);
  std::vector<int>::size_type v2 = this[1];
  this[1] = 0;
  if (v2) {
    operator delete(v2);
  }

  Espresso::AOT::AbstractMILPass::~AbstractMILPass((Espresso::AOT::AbstractMILPass *)this);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>>>::__deallocate_node(int a1, char *__p)
{
  if (__p)
  {
    std::vector<int>::size_type v2 = __p;
    while (1)
    {
      uint64_t v3 = *(char **)v2;
      char v4 = (std::__shared_weak_count *)*((void *)v2 + 8);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
        if (v5)
        {
LABEL_8:
          if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
        if (v5) {
          goto LABEL_8;
        }
      }
      if (v2[39] < 0)
      {
        operator delete(*((void **)v2 + 2));
        operator delete(v2);
        std::vector<int>::size_type v2 = v3;
        if (!v3) {
          return;
        }
      }
      else
      {
        operator delete(v2);
        std::vector<int>::size_type v2 = v3;
        if (!v3) {
          return;
        }
      }
    }
  }
}

uint64_t std::__shared_ptr_pointer<Espresso::AOT::AbstractValidator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<Espresso::AOT::EstimatorMILDecisionTree>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void Espresso::AOT::EstimatorMILDecisionTree::~EstimatorMILDecisionTree(void **this)
{
  *this = &unk_1EE36B548;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 4));
  if (*((char *)this + 31) < 0)
  {
    operator delete(this[1]);
    std::vector<int>::size_type v2 = (Espresso::AOT::AbstractCostEstimator *)this;
  }
  else
  {
    std::vector<int>::size_type v2 = (Espresso::AOT::AbstractCostEstimator *)this;
  }
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v2);
}

{
  uint64_t vars8;

  *this = &unk_1EE36B548;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator((Espresso::AOT::AbstractCostEstimator *)this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::Validators::E5MinimalCpuValidator::~E5MinimalCpuValidator(Espresso::AOT::Validators::E5MinimalCpuValidator *this)
{
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);

  JUMPOUT(0x192FF16B0);
}

void Espresso::AOT::Validators::JitCallValidator::~JitCallValidator(Espresso::AOT::Validators::JitCallValidator *this)
{
  *(void *)this = &unk_1EE36AF20;
  std::vector<int>::size_type v2 = (void **)*((void *)this + 3);
  if (v2)
  {
    do
    {
      char v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      std::vector<int>::size_type v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void *v3;
  void **v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE36AF20;
  std::vector<int>::size_type v2 = (void **)*((void *)this + 3);
  if (v2)
  {
    do
    {
      char v4 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      std::vector<int>::size_type v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }

  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

void Espresso::AOT::Validators::BnnsValidator::~BnnsValidator(Espresso::AOT::Validators::BnnsValidator *this)
{
  *(void *)this = &unk_1EE36AEF8;
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::BnnsValidator *)((char *)this + 8));
  Espresso::AOT::AbstractValidator::~AbstractValidator(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE36AEF8;
  E5RT::AsyncEventImpl::~AsyncEventImpl((Espresso::AOT::Validators::BnnsValidator *)((char *)this + 8));

  Espresso::AOT::AbstractValidator::~AbstractValidator(this);
}

void Espresso::AOT::Validators::EirValidator::~EirValidator(void **this)
{
  *this = &unk_1EE36AEA8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));
  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t vars8;

  *this = &unk_1EE36AEA8;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(this + 1));

  Espresso::AOT::AbstractValidator::~AbstractValidator((Espresso::AOT::AbstractValidator *)this);
}

void Espresso::scoped_env_var_kv::~scoped_env_var_kv(const char **this)
{
  uint64_t v1 = (Espresso::scoped_env_var_kv *)this;
  if (*((char *)this + 23) < 0)
  {
    if (!this[1]) {
      goto LABEL_17;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    goto LABEL_17;
  }
  std::vector<int>::size_type v2 = this[3];
  if (v2)
  {
    if ((*((unsigned char *)this + 23) & 0x80) != 0) {
      this = (const char **)*this;
    }
    if (v2[23] < 0) {
      std::vector<int>::size_type v2 = *(const char **)v2;
    }
    uint64_t v3 = (Espresso *)setenv((const char *)this, v2, 1);
    if (v3)
    {
      uint64_t v5 = Espresso::espresso_os_log_subsystem(v3, v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long v7 = 0;
        _os_log_error_impl(&dword_1920CB000, v5, OS_LOG_TYPE_ERROR, "Failure in destructor to restore environment variable.", v7, 2u);
      }

      std::terminate();
    }
  }
  else
  {
    if ((*((unsigned char *)this + 23) & 0x80) != 0) {
      this = (const char **)*this;
    }
    unsetenv((const char *)this);
  }
LABEL_17:
  uint64_t v6 = *((void *)v1 + 3);
  *((void *)v1 + 3) = 0;
  if (v6) {
    std::default_delete<std::string>::operator()[abi:ne180100](v6);
  }
  if (*((char *)v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetEnableDefaultFunctionForRangeDim(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 337);
}

uint64_t E5PlatformManagerImpl::CanonicalPlatformNameForId(uint64_t a1, uint64_t a2)
{
  std::vector<int>::size_type v2 = sub_1923B1664((void *)(a1 + 8), a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v2[10];
}

void sub_192225930(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetDumpIrOnly(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 208);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetPlatforms(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 48;
}

std::string *Espresso::scoped_env_var_kv::scoped_env_var_kv(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v7)
  {
    int v8 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    uint64_t v9 = this;
    if (v8 < 0) {
      uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (getenv((const char *)v9)) {
      operator new();
    }
    BOOL v10 = this;
    if ((v8 & 0x80) != 0) {
      BOOL v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a3 + 23) >= 0) {
      int v11 = (const char *)a3;
    }
    else {
      int v11 = *(const char **)a3;
    }
    if (setenv((const char *)v10, v11, 1))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to set an environment variable");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_192225A88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v4) {
    std::default_delete<std::string>::operator()[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

__CFDictionary *E5RT::ProgramFunctionPriv::GetFunctionMetadata(E5RT::ProgramFunctionPriv *this)
{
  std::vector<int>::size_type v2 = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  if (v2[1] - *v2 != 16)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v39, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v38, "Execution of functions with multiple blocks not supported yet.");
    E5RT::Status::Status(v37, 8, v38);
    E5RT::E5RTError::E5RTError(exception, v39, v37);
  }
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    long long v32 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v39, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v38, "Error allocating function metadata dictionary.");
    E5RT::Status::Status(v37, 3, v38);
    E5RT::E5RTError::E5RTError(v32, v39, v37);
  }
  uint64_t v5 = Mutable;
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 16))(*((void *)this + 1));
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v7 = (const char *)v6;
  }
  else {
    uint64_t v7 = *(const char **)v6;
  }
  CFStringRef v8 = CFStringCreateWithCString(v3, v7, 0x8000100u);
  CFDictionarySetValue(v5, @"FunctionName", v8);
  CFRelease(v8);
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1));
  if (*(char *)(v9 + 23) >= 0) {
    BOOL v10 = (const char *)v9;
  }
  else {
    BOOL v10 = *(const char **)v9;
  }
  CFStringRef v11 = CFStringCreateWithCString(v3, v10, 0x8000100u);
  CFDictionarySetValue(v5, @"UserVersion", v11);
  CFRelease(v11);
  CFMutableArrayRef v12 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  if (!v12)
  {
    int v33 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v39, "GetFunctionMetadata");
    std::string::basic_string[abi:ne180100]<0>(v38, "Error allocating op metadata array.");
    E5RT::Status::Status(v37, 3, v38);
    E5RT::E5RTError::E5RTError(v33, v39, v37);
  }
  uint64_t v13 = v12;
  theDict = v5;
  uint64_t v14 = (void **)(*(uint64_t (**)(void))(**((void **)this + 1) + 32))(*((void *)this + 1));
  uint64_t v15 = (*(uint64_t (**)(void))(*(void *)**v14 + 16))(**v14);
  std::string v16 = *(uint64_t **)v15;
  std::string v17 = *(uint64_t **)(v15 + 8);
  if (*(uint64_t **)v15 != v17)
  {
    uint64_t v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      uint64_t v20 = *v16;
      v37[0] = *v16;
      std::string v21 = (std::__shared_weak_count *)v16[1];
      v37[1] = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v22 = CFDictionaryCreateMutable(v3, 0, v18, v19);
      if (!v22)
      {
        uint64_t v30 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v39, "GetFunctionMetadata");
        std::string::basic_string[abi:ne180100]<0>(v38, "Error allocating op metadata dictionary.");
        E5RT::Status::Status(v36, 3, v38);
        E5RT::E5RTError::E5RTError(v30, v39, v36);
      }
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
      int v24 = @"BnnsCpuInference";
      switch(v23)
      {
        case 0:
        case 6:
        case 9:
          size_t v34 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v39, "GetFunctionMetadata");
          std::string::basic_string[abi:ne180100]<0>(v38, "Unexpected opcode type encountered.");
          E5RT::Status::Status(v36, 9, v38);
          E5RT::E5RTError::E5RTError(v34, v39, v36);
        case 1:
          CFDictionarySetValue(v22, @"OpCode", @"AneInference");
          uint64_t v25 = @"ANE";
          goto LABEL_27;
        case 2:
          int v24 = @"CpuInference";
          goto LABEL_26;
        case 3:
          int v24 = @"Cast";
          goto LABEL_26;
        case 4:
          int v24 = @"Quant";
          goto LABEL_26;
        case 5:
          int v24 = @"Dequant";
          goto LABEL_26;
        case 7:
          int v24 = @"MlcCpuInference";
          goto LABEL_26;
        case 8:
          CFDictionarySetValue(v22, @"OpCode", @"MPSGraphInference");
          uint64_t v25 = @"GPU";
          goto LABEL_27;
        case 11:
          CFDictionarySetValue(v22, @"OpCode", @"EirInference");
          uint64_t v25 = @"EIR";
          goto LABEL_27;
        case 12:
          goto LABEL_26;
        case 13:
          CFDictionarySetValue(v22, @"OpCode", @"JitCall");
          uint64_t v25 = @"JIT";
          goto LABEL_27;
        case 14:
          int v24 = @"E5MinimalCpu";
LABEL_26:
          CFDictionarySetValue(v22, @"OpCode", v24);
          uint64_t v25 = @"CPU";
LABEL_27:
          CFDictionarySetValue(v22, @"ComputeBackend", v25);
          break;
        default:
          break;
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
      if (*(char *)(v26 + 23) >= 0) {
        uint64_t v27 = (const char *)v26;
      }
      else {
        uint64_t v27 = *(const char **)v26;
      }
      CFStringRef v28 = CFStringCreateWithCString(v3, v27, 0x8000100u);
      CFDictionarySetValue(v22, @"OpName", v28);
      CFRelease(v28);
      CFArrayAppendValue(v13, v22);
      CFRelease(v22);
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
      v16 += 2;
    }
    while (v16 != v17);
  }
  CFDictionarySetValue(theDict, @"Ops", v13);
  CFRelease(v13);
  return theDict;
}

void sub_1922261E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v28)
  {
LABEL_8:
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::ValidateMutableMILWeightPaths(uint64_t a1, const void ***a2)
{
  std::string __p = 0;
  long long v32 = 0;
  unint64_t v33 = 0;
  CFAllocatorRef v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    if (*(void *)(a1 + 232))
    {
LABEL_58:
      std::string::basic_string[abi:ne180100]<0>(&v29, "Mutable weights feature is only supported on ANE.");
      exception = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v28, "ValidateMutableMILWeightPaths");
      E5RT::Status::Status(&v27, 1, &v29);
      E5RT::E5RTError::E5RTError(exception, v28, &v27);
    }
LABEL_48:
    uint64_t v13 = (std::string *)__p;
    goto LABEL_49;
  }
  char v5 = 0;
  do
  {
    if ((*(unsigned int (**)(void))(*(void *)*v3 + 16))() == 1)
    {
      E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>(*v3, &v29);
      uint64_t v7 = v29;
      uint64_t v6 = v30;
      if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        uint64_t v8 = *(void *)(v7 + 56);
        uint64_t v9 = *(void *)(v7 + 64);
        if (v8 != v9)
        {
LABEL_9:
          BOOL v10 = v32;
          do
          {
            if ((unint64_t)v10 < v33)
            {
              if (*(char *)(v8 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
              }
              else
              {
                long long v11 = *(_OWORD *)v8;
                v10->__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
                *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
              }
              ++v10;
            }
            else
            {
              BOOL v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__p, v8);
            }
            long long v32 = v10;
            v8 += 24;
          }
          while (v8 != v9);
        }
      }
      else
      {
        uint64_t v8 = *(void *)(v7 + 56);
        uint64_t v9 = *(void *)(v7 + 64);
        if (v8 != v9) {
          goto LABEL_9;
        }
      }
      char v5 = 1;
    }
    v3 += 2;
  }
  while (v3 != v4);
  if (!*(void *)(a1 + 232)) {
    goto LABEL_48;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_58;
  }
  CFMutableArrayRef v12 = (const void **)(a1 + 224);
  uint64_t v13 = (std::string *)__p;
  uint64_t v14 = v32;
  if (__p == v32)
  {
    if (*v12)
    {
      uint64_t v15 = (const void **)((char *)*v12 + 16);
LABEL_24:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is provided using SetMutableMILWeightPaths API, but not found on the base model.", v15, &v29);
      std::string v16 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v28, "ValidateMutableMILWeightPaths");
      E5RT::Status::Status(&v27, 1, &v29);
      E5RT::E5RTError::E5RTError(v16, v28, &v27);
    }
  }
  else
  {
    while (1)
    {
      CFMutableArrayRef v12 = (const void **)*v12;
      if (!v12) {
        break;
      }
      uint64_t v15 = v12 + 2;
      int v18 = *((char *)v12 + 39);
      if (v18 >= 0) {
        uint64_t v19 = (const void *)*((unsigned __int8 *)v12 + 39);
      }
      else {
        uint64_t v19 = v12[3];
      }
      if (v18 >= 0) {
        uint64_t v20 = (unsigned __int8 *)(v12 + 2);
      }
      else {
        uint64_t v20 = (unsigned __int8 *)v12[2];
      }
      std::string v17 = v13;
      do
      {
        uint64_t v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        if ((v21 & 0x80u) == 0) {
          std::string::size_type size = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v17->__r_.__value_.__l.__size_;
        }
        if ((const void *)size == v19)
        {
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(v17->__r_.__value_.__l.__data_, v20, v17->__r_.__value_.__l.__size_)) {
              goto LABEL_26;
            }
          }
          else
          {
            if (!*((unsigned char *)&v17->__r_.__value_.__s + 23)) {
              goto LABEL_26;
            }
            uint64_t v23 = 0;
            while (v17->__r_.__value_.__s.__data_[v23] == v20[v23])
            {
              if (v21 == ++v23) {
                goto LABEL_26;
              }
            }
          }
        }
        ++v17;
      }
      while (v17 != v14);
      std::string v17 = v14;
LABEL_26:
      if (v17 == v14) {
        goto LABEL_24;
      }
    }
  }
LABEL_49:
  if (v13)
  {
    int v24 = v32;
    uint64_t v25 = v13;
    if (v32 != v13)
    {
      do
      {
        if (SHIBYTE(v24[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24[-1].__r_.__value_.__l.__data_);
        }
        --v24;
      }
      while (v24 != v13);
      uint64_t v25 = __p;
    }
    long long v32 = v13;
    operator delete(v25);
  }
}

void sub_1922266F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v24)
  {
LABEL_6:
    if (a21 < 0)
    {
      operator delete(a16);
      std::vector<std::string>::~vector[abi:ne180100](&a22);
      _Unwind_Resume(a1);
    }
    std::vector<std::string>::~vector[abi:ne180100](&a22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOpcode(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

void *E5RT::E5Operation::GetOperationAttributes<AneInferenceOpT>@<X0>(const void *a1@<X0>, void *a2@<X8>)
{
  if (!a1
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "GetOperationAttributes");
    std::string::basic_string[abi:ne180100]<0>(v6, "Invalid dynamic type for e5_operation_info_t object.");
    E5RT::Status::Status(v7, 2, v6);
    E5RT::E5RTError::E5RTError(exception, v8, v7);
  }
  uint64_t v4 = result[7];
  *a2 = result[6];
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1922268D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetOpName(uint64_t a1)
{
  return a1 + 16;
}

void E5RT::ProgramLibraryImpl::InitializeProgramLibrary(E5RT::ProgramLibraryImpl *this)
{
  if (!this)
  {
    int v2 = MEMORY[0x10];
    goto LABEL_5;
  }
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
LABEL_5:
    if (v2 != 1) {
      goto LABEL_37;
    }
    uint64_t v3 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
    goto LABEL_7;
  }
  uint64_t v3 = *(void *)this;
LABEL_7:
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  char v5 = *(std::string::size_type **)v4;
  uint64_t v6 = *(std::string::size_type **)(v4 + 8);
  if (*(std::string::size_type **)v4 == v6) {
    goto LABEL_22;
  }
  do
  {
    v19.__r_.__value_.__r.__words[0] = *v5;
    std::string::size_type v7 = v5[1];
    v19.__r_.__value_.__l.__size_ = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = operator new(0xA8uLL);
    std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::E5Function const> &,std::allocator<E5RT::ProgramFunctionPriv>,0>(v8, (uint64_t *)&v19);
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)(v8 + 3);
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(std::string::size_type))(*(void *)v19.__r_.__value_.__l.__data_
                                                                                         + 16))(v19.__r_.__value_.__r.__words[0]);
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 24, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = 0uLL;
    BOOL v10 = (std::__shared_weak_count *)v9[6];
    v9[5] = (uint64_t)(v8 + 3);
    v9[6] = (uint64_t)v8;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      std::string::size_type size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
      if (!v18.__r_.__value_.__l.__size_) {
        goto LABEL_18;
      }
    }
    else
    {
      std::string::size_type size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
      if (!v18.__r_.__value_.__l.__size_) {
        goto LABEL_18;
      }
    }
    if (!atomic_fetch_add(&size->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
LABEL_18:
    CFMutableArrayRef v12 = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
    if (v19.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v19.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if (this)
  {
LABEL_22:
    int v13 = *((_DWORD *)this + 4);
    if (!v13)
    {
      uint64_t v14 = *(void *)this;
      goto LABEL_27;
    }
  }
  else
  {
    int v13 = MEMORY[0x10];
  }
  if (v13 != 1) {
LABEL_37:
  }
    std::__throw_bad_variant_access[abi:ne180100]();
  uint64_t v14 = E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(*(const void **)this);
LABEL_27:
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 64))(v14);
  E5RT::PathWrapper::PathWrapper(&v19, v15);
  E5RT::PathWrapper::RemoveLastComponent(&v19, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  std::string v16 = (void **)((char *)this + 64);
  if (*((char *)this + 87) < 0) {
    operator delete(*v16);
  }
  *(_OWORD *)std::string v16 = *(_OWORD *)&v18.__r_.__value_.__l.__data_;
  *((void *)this + 10) = *((void *)&v18.__r_.__value_.__l + 2);
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 0;
  v18.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
}

void sub_192226C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_192226CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_192226CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192226CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5FunctionImpl::GetName(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 24;
}

uint64_t E5RT::SharedResource::GetResourceHandle<E5RT::E5Program &>(const void *a1)
{
  if (!v1) {
    __cxa_bad_cast();
  }
  return v1[4];
}

void *std::__shared_ptr_emplace<E5RT::ProgramFunctionPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::E5Function const> &,std::allocator<E5RT::ProgramFunctionPriv>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE380DC8;
  uint64_t v3 = a1 + 3;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::ProgramFunctionPriv::ProgramFunctionPriv(v3, &v7);
  char v5 = v8;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_192226E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_ptr_emplace<cxxopts::OptionDetails>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::string const&,std::string&,std::shared_ptr<cxxopts::Value const> &,std::allocator<cxxopts::OptionDetails>,0>(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::ProgramFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  int v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        long long v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        long long v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      long long v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  long long v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192227290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1922272A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ProgramFunctionPriv::ProgramFunctionPriv(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EE325BF8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  uint64_t v3 = a1 + 8;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v4 = a1 + 64;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v41 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v40 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  uint64_t v43 = 0x2B2340B400000000;
  long long v44 = 0u;
  long long v45 = 0u;
  kdebug_trace();
  uint64_t v39 = v3;
  char v5 = (void *)(*(uint64_t (**)(void))(**(void **)v3 + 40))();
  uint64_t v6 = v5[1] - *v5;
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = v6 / 24;
    do
    {
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3))
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v5 + 8, *v5 + v7);
      (*(void (**)(long long *__return_ptr))(*(void *)v10[5] + 16))(&v42);
      char v46 = (long long *)(v10 + 2);
      unint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, (uint64_t)(v10 + 2), (uint64_t)&std::piecewise_construct, &v46);
      long long v12 = v42;
      long long v42 = 0uLL;
      uint8x8_t v13 = (std::__shared_weak_count *)v11[6];
      *(_OWORD *)(v11 + 5) = v12;
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
LABEL_8:
          if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      else
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1)) {
          goto LABEL_8;
        }
      }
      ++v8;
      v7 += 24;
    }
    while (v9 != v8);
  }
  uint64_t v15 = (void *)(*(uint64_t (**)(void))(**(void **)v39 + 48))();
  uint64_t v16 = v15[1] - *v15;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v19 = v16 / 24;
    do
    {
      if (v18 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[1] - *v15) >> 3))
      {
        uint64_t v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v37, "iterator out of range");
        v37->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v37, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v15 + 8, *v15 + v17);
      (*(void (**)(long long *__return_ptr))(*(void *)v20[5] + 16))(&v42);
      char v46 = (long long *)(v20 + 2);
      uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (uint64_t)(v20 + 2), (uint64_t)&std::piecewise_construct, &v46);
      long long v22 = v42;
      long long v42 = 0uLL;
      uint64_t v23 = (std::__shared_weak_count *)v21[6];
      *(_OWORD *)(v21 + 5) = v22;
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
        uint64_t v24 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
LABEL_19:
          if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
        uint64_t v24 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1)) {
          goto LABEL_19;
        }
      }
      ++v18;
      v17 += 24;
    }
    while (v19 != v18);
  }
  uint64_t v25 = (void *)(*(uint64_t (**)(void))(**(void **)v39 + 56))();
  uint64_t v26 = v25[1] - *v25;
  if (v26)
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = v26 / 24;
    do
    {
      if (v28 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25[1] - *v25) >> 3))
      {
        int8x8_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v38, "iterator out of range");
        v38->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v38, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      float v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v25 + 8, *v25 + v27);
      (*(void (**)(long long *__return_ptr))(*(void *)v30[5] + 16))(&v42);
      char v46 = (long long *)(v30 + 2);
      float v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, (uint64_t)(v30 + 2), (uint64_t)&std::piecewise_construct, &v46);
      long long v32 = v42;
      long long v42 = 0uLL;
      unint64_t v33 = (std::__shared_weak_count *)v31[6];
      *(_OWORD *)(v31 + 5) = v32;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        BOOL v34 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1))
        {
LABEL_30:
          if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
        BOOL v34 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (*((void *)&v42 + 1)) {
          goto LABEL_30;
        }
      }
      ++v28;
      v27 += 24;
    }
    while (v29 != v28);
  }
  if (E5RT::g_trace_analysis_level >= v43) {
    kdebug_trace();
  }
  return a1;
}

void sub_1922279AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](a4);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v8);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](a5);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a3);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  unint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        long long v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        long long v32 = *(void **)(*(void *)a1 + 8 * v11);
        unint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      long long v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      unint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *unint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  long long v32 = *(void **)(*(void *)a1 + 8 * v4);
  unint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *unint64_t v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192227EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192227ED0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5ProgramImpl::GetE5PlatformBundleDir(E5RT::E5ProgramImpl *this)
{
  return (uint64_t)this + 80;
}

void E5RT::PathWrapper::RemoveLastComponent(std::string *this@<X0>, std::string *a2@<X8>)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v9, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v9 = *this;
  }
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)&v9);
  if (v3.__size_)
  {
    std::string::size_type v4 = (std::string::size_type)&v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v4 = v9.__r_.__value_.__r.__words[0];
    }
    std::string::erase(&v9, (std::string::size_type)&v3.__data_[-v4], 0xFFFFFFFFFFFFFFFFLL);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v9;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
    {
      std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, 0);
      goto LABEL_24;
    }
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_17:
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
      if (*(unsigned char *)(v10.__r_.__value_.__r.__words[0] + v10.__r_.__value_.__l.__size_ - 1) != 47) {
        goto LABEL_24;
      }
      uint64_t v5 = --v10.__r_.__value_.__l.__size_;
    }
    else
    {
      if (v10.__r_.__value_.__s.__data_[HIBYTE(v10.__r_.__value_.__r.__words[2]) - 1] != 47) {
        goto LABEL_24;
      }
      uint64_t v5 = HIBYTE(v10.__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v10.__r_.__value_.__s + 23) = (*((unsigned char *)&v10.__r_.__value_.__s + 23) - 1) & 0x7F;
      uint64_t v6 = &v10;
    }
    v6->__r_.__value_.__s.__data_[v5] = 0;
LABEL_24:
    int v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *a2 = v10;
    if (v7 < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
LABEL_28:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  std::string v10 = __p;
  if (*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
    goto LABEL_17;
  }
  *a2 = __p;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
}

void sub_19222808C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5FunctionImpl::GetUserVersion(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 48;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    *(void *)(a2 + 80) = *(void *)(v4 + 8);
  }
  return result;
}

uint64_t E5RT::TensorCast<unsigned char,float>(E5RT::TensorDescriptor *a1, E5RT::BufferObject *a2, E5RT::TensorDescriptor *this, E5RT::BufferObject *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  TensorDataTypeRef = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(this);
  std::string v9 = (E5RT::TensorDataType *)E5RT::TensorDescriptor::GetTensorDataTypeRef(a1);
  E5RT::TensorDataType::GetComponentDataType(v9);
  E5RT::TensorDataType::GetComponentPack(v9);
  E5RT::TensorDataType::GetComponentDataType(TensorDataTypeRef);
  E5RT::TensorDataType::GetComponentPack(TensorDataTypeRef);
  kdebug_trace();
  if (!E5RT::TensorDataType::IsType<float>((uint64_t)TensorDataTypeRef)
    || !E5RT::TensorDataType::IsType<unsigned char>((uint64_t)v9))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x50uLL);
    long long v18 = xmmword_192DB9900;
    strcpy(v17, "Type of srcTensorDesc or dstTensorDesc does not match the template types.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(exception, v20, v19);
  }
  if (E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)TensorDataTypeRef) > 1
    || E5RT::TensorDataType::GetNumComponents((E5RT::TensorDataType::Impl **)v9) >= 2)
  {
    uint64_t v15 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DA90C0;
    strcpy(v17, "Tensor type is not supported by TensorCast.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v15, v20, v19);
  }
  Tensoruint64_t Shape = E5RT::TensorDescriptor::GetTensorShape(this);
  uint64_t v11 = E5RT::TensorDescriptor::GetTensorShape(a1);
  size_t v12 = *(void *)(TensorShape + 8) - *(void *)TensorShape;
  if (v12 != *(void *)(v11 + 8) - *(void *)v11 || memcmp(*(const void **)TensorShape, *(const void **)v11, v12))
  {
    char v16 = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v20[2]) = 16;
    strcpy((char *)v20, "TensorCastHelper");
    uint64_t v17 = (char *)operator new(0x30uLL);
    long long v18 = xmmword_192DAA4A0;
    strcpy(v17, "Src and Dst tensor shapes must be identical.");
    E5RT::Status::Status(v19, 1, &v17);
    E5RT::E5RTError::E5RTError(v16, v20, v19);
  }
  v20[0] = &unk_1EE378910;
  v20[1] = E5RT::ElementwiseOpCast<unsigned char,float>;
  uint64_t v21 = v20;
  E5RT::ElementwiseOperationImplementation<unsigned char,float>(this, a4, a1, a2, (uint64_t)v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  return kdebug_trace();
}

void sub_192228598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::TensorDataType::GetComponentDataType(E5RT::TensorDataType *this)
{
  return **((unsigned int **)this + 1);
}

float Espresso::AOT::DTrees::mulCpuIp()
{
  return 10.0;
}

void Espresso::string_split(Espresso *this, char *a2)
{
  if (!a2) {
    Espresso::throw_exception_selector<Espresso::generic_error>("string to be split cannot be empty or nullptr");
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  std::istringstream::basic_istringstream[abi:ne180100](v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (1)
  {
    std::__fs::filesystem::path::__string_view v3 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&v11, 0x2Cu);
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v4 = *((void *)this + 1);
    if (v4 >= *((void *)this + 2))
    {
      uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)this, (uint64_t)&v11);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(*((std::string **)this + 1), (const std::string::value_type *)v11, *((std::string::size_type *)&v11 + 1));
      }
      else
      {
        long long v5 = v11;
        *(void *)(v4 + 16) = v12;
        *(_OWORD *)unint64_t v4 = v5;
      }
      uint64_t v6 = (std::string *)(v4 + 24);
      *((void *)this + 1) = v4 + 24;
    }
    *((void *)this + 1) = v6;
  }
  v8[0] = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v8[2] = MEMORY[0x1E4FBA470] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FF15B0](&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_1922288AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x192FF1080](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_192228A68(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x192228A28);
  }
  __cxa_rethrow();
}

void sub_192228AE4(_Unwind_Exception *a1)
{
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA490] + 64;
  a1[15] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *a1 = v7;
  *(uint64_t *)((char *)a1 + *(void *)(v7 - 24)) = v6;
  a1[1] = 0;
  unint64_t v8 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v8, a1 + 2);
  uint64_t v9 = MEMORY[0x1E4FBA490] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *a1 = v9;
  a1[15] = v4;
  std::stringbuf::basic_stringbuf[abi:ne180100](v5, a2, 8);
  return a1;
}

void sub_192228C50(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_192228CF4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
    int v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = v2;
  unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t e5rt_tensor_desc_alloc_buffer_object(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = operator new(0x28uLL);
  *uint64_t v8 = &unk_1EE399298;
  v8[1] = a1;
  v8[2] = a4;
  *((_DWORD *)v8 + 6) = a2;
  v8[4] = a3;
  uint64_t v12 = v8;
  uint64_t v9 = E5RT::ExceptionSafeExecute((uint64_t)v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_192228F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOps(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v4 = (char *)operator new(0x20uLL);
  long long v5 = xmmword_192DAA350;
  strcpy(v4, "E5ML_ios16.ane_inference");
  E5AOT::Operators::E5ML_ios16::ANEInference::Make((uint64_t)this, (uint64_t)&v4);
}

void sub_1922295F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v53 = *(void *)(v51 - 40);
  *(void *)(v51 - 40) = 0;
  if (v53) {
    E5AOT::Operators::E5ML_ios16::Call::Make();
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v50);
  _Unwind_Resume(a1);
}

void sub_192229860(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>(void *a1, char *a2, uint64_t *a3)
{
  int v6 = (char *)operator new(0x38uLL);
  *(void *)int v6 = 0;
  *((void *)v6 + 1) = 0;
  std::string::size_type v7 = std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v15, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    uint64_t v13 = (std::__shared_weak_count *)*((void *)v6 + 6);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6[39] < 0) {
      operator delete(*((void **)v6 + 2));
    }
    operator delete(v6);
  }
  return inserted;
}

void sub_1922299A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1922299B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IROperator>,0>(void *a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v8 = operator new(v10 + 1);
    a1[1] = v7;
    a1[2] = v11 | 0x8000000000000000;
    *a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    int v8 = a1;
    if (!v6)
    {
      *(unsigned char *)a1 = 0;
      uint64_t v9 = *a3;
      a1[3] = *a3;
      if (v9) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v12 = *a3;
  a1[3] = *a3;
  if (v12) {
LABEL_5:
  }
    operator new();
LABEL_10:
  a1[4] = 0;
  *a3 = 0;
  return a1;
}

void sub_192229AE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    size_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    size_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    void *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_50;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v7 = a2 % v4;
    }
    else {
      unint64_t v7 = a2;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v7 = (v4 - 1) & a2;
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = *v8;
  if (*v8)
  {
    char v10 = *((unsigned char *)a3 + 23);
    if (v10 >= 0) {
      int8x8_t v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int8x8_t v11 = a3[1];
    }
    if (v10 >= 0) {
      unint64_t v12 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v12 = *a3;
    }
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v18 = v9[1];
        if (v18 == a2)
        {
          uint64_t v19 = *((unsigned __int8 *)v9 + 39);
          if ((v19 & 0x80u) == 0) {
            uint64_t v20 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          }
          else {
            uint64_t v20 = (unsigned __int8 *)v9[3];
          }
          if (v20 == v11)
          {
            uint64_t v21 = (const void **)(v9 + 2);
            if ((v19 & 0x80) != 0)
            {
              if (!memcmp(*v21, v12, v9[3])) {
                return v9;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 39)) {
                return v9;
              }
              for (uint64_t i = v12; *(unsigned __int8 *)v21 == *i; ++i)
              {
                uint64_t v21 = (const void **)((char *)v21 + 1);
                if (!--v19) {
                  return v9;
                }
              }
            }
          }
        }
        else if ((v18 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        unint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == a2)
      {
        uint64_t v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        }
        else {
          unint64_t v15 = (unsigned __int8 *)v9[3];
        }
        if (v15 == v11)
        {
          char v16 = (const void **)(v9 + 2);
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*v16, v12, v9[3])) {
              return v9;
            }
          }
          else
          {
            if (!*((unsigned char *)v9 + 39)) {
              return v9;
            }
            for (unint64_t j = v12; *(unsigned __int8 *)v16 == *j; ++j)
            {
              char v16 = (const void **)((char *)v16 + 1);
              if (!--v14) {
                return v9;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v7) {
          break;
        }
      }
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (v4 && (float)(v24 * (float)v4) >= v23) {
    return 0;
  }
  BOOL v25 = 1;
  if (v4 >= 3) {
    BOOL v25 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v26 = v25 | (2 * v4);
  unint64_t v27 = vcvtps_u32_f32(v23 / v24);
  if (v26 <= v27) {
    size_t prime = v27;
  }
  else {
    size_t prime = v26;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_74;
  }
  if (prime < v4)
  {
    size_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
    {
      size_t v32 = std::__next_prime(v29);
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2) {
        size_t v29 = v31;
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_74:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

void E5AOT::Operators::E5ML_ios16::CPUInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222A570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void **a28,uint64_t a29)
{
  uint64_t v31 = a16;
  a16 = 0;
  if (v31) {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a16, v31);
  }
  uint64_t v32 = *v29;
  uint64_t *v29 = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a28);
  uint64_t v33 = a29;
  a29 = 0;
  if (!v33) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a29, v33);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::JitCall::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222AF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      uint64_t v37 = *(void *)(v33 - 144);
      *(void *)(v33 - 144) = 0;
      if (!v37) {
        _Unwind_Resume(a1);
      }
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  goto LABEL_4;
}

void sub_19222B1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    JUMPOUT(0x19222B194);
  }
  JUMPOUT(0x19222B124);
}

void sub_19222B1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a22) {
    JUMPOUT(0x19222B194);
  }
  JUMPOUT(0x19222B124);
}

void E5AOT::Operators::E5ML_ios16::Dequant::Make()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  operator new();
}

void sub_19222C3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51 - 72);
  uint64_t v53 = *(void *)(v51 - 256);
  *(void *)(v51 - 256) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  uint64_t v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(void *)(v51 - 88) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v51 - 224);
  if (v55)
  {
    *(void *)(v51 - 216) = v55;
    operator delete(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v51 - 248));
  uint64_t v56 = *(void *)(v51 - 184);
  *(void *)(v51 - 184) = 0;
  if (!v56) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v51 - 184, v56);
  _Unwind_Resume(a1);
}

void sub_19222C884()
{
}

void E5AOT::Operators::E5ML_ios16::Quant::Make()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  operator new();
}

void sub_19222DAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v51 - 72);
  uint64_t v53 = *(void *)(v51 - 256);
  *(void *)(v51 - 256) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  uint64_t v54 = *(void **)(v51 - 96);
  if (v54)
  {
    *(void *)(v51 - 88) = v54;
    operator delete(v54);
  }
  uint64_t v55 = *(void **)(v51 - 224);
  if (v55)
  {
    *(void *)(v51 - 216) = v55;
    operator delete(v55);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v51 - 248));
  uint64_t v56 = *(void *)(v51 - 184);
  *(void *)(v51 - 184) = 0;
  if (!v56) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v51 - 184, v56);
  _Unwind_Resume(a1);
}

void sub_19222DF70()
{
}

void E5AOT::Operators::E5ML_ios16::MPSGraphInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222E814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      uint64_t v37 = *(void *)(v33 - 144);
      *(void *)(v33 - 144) = 0;
      if (!v37) {
        _Unwind_Resume(a1);
      }
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  goto LABEL_4;
}

void E5AOT::Operators::E5ML_ios16::MLCInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222F008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void **a26,uint64_t a27)
{
  uint64_t v29 = a14;
  a14 = 0;
  if (v29) {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a14, v29);
  }
  uint64_t v30 = *v27;
  uint64_t *v27 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a26);
  uint64_t v31 = a27;
  a27 = 0;
  if (!v31) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a27, v31);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::EIRInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222F828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void **a30)
{
  uint64_t v33 = a18;
  a18 = 0;
  if (v33) {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a18, v33);
  }
  uint64_t v34 = *v30;
  *uint64_t v30 = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a30);
  uint64_t v35 = *(void *)(v31 - 136);
  *(void *)(v31 - 136) = 0;
  if (!v35) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v31 - 136, v35);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::E5MinimalCpu::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v7 = 0;
  void v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19222FECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void **a26,uint64_t a27)
{
  uint64_t v29 = a14;
  a14 = 0;
  if (v29) {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a14, v29);
  }
  uint64_t v30 = *v27;
  uint64_t *v27 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100](&a26);
  uint64_t v31 = a27;
  a27 = 0;
  if (!v31) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a27, v31);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso23abstract_engine_factory6sharedEv_block_invoke()
{
}

void sub_19223006C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::Register(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this, MIL::MILContext *a2)
{
  char v5 = 10;
  strcpy((char *)__p, "E5RT_ios16");
  uint64_t v2 = (*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *, void **))(*(void *)this + 16))(this, __p);
  uint64_t v3 = v2;
  if ((v5 & 0x80000000) == 0)
  {
    if (v2) {
      return;
    }
LABEL_5:
    char v5 = 10;
    strcpy((char *)__p, "E5RT_ios16");
    operator new();
  }
  operator delete(__p[0]);
  if (!v3) {
    goto LABEL_5;
  }
}

void sub_1922301E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register();
  }
  std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](&a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::E5RT_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset *this, MIL::MILContext *a2)
{
  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::GetOps(a2, (uint64_t)&v2);
}

void sub_192230350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::squeeze_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::squeeze_params_t>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19223055C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateReshape(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v55, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)&__v, (uint64_t)this, (uint64_t)__p, a2, 0);
  memset(&v54, 0, sizeof(v54));
  __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
  __src.__r_.__value_.__s.__data_[8] = 0;
  v54.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v54.__end_ = v54.__begin_;
  v54.__end_cap_.__value_ = v54.__begin_ + 1;
  v54.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v54.__end_cap_, (long long *)&__v, (long long *)&__v.__end_cap_, v54.__begin_);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (SBYTE7(v51) < 0) {
    operator delete(__p[0]);
  }
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v54, a2);
  __p[0] = 0;
  __p[1] = 0;
  long long v51 = xmmword_192DCA380;
  __int16 v52 = 1;
  int v53 = 1;
  std::string::basic_string[abi:ne180100]<0>(&__v, "shape");
  ParameterValue = (MIL::IRValue *)MIL::IROperation::TryGetParameterValue();
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (ParameterValue)
  {
    char v5 = (MIL::IRValueType *)(*(uint64_t (**)(MIL::IRValue *))(*(void *)ParameterValue + 32))(ParameterValue);
    uint64_t v6 = MIL::IRValueType::AsTensorType(v5);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
    memset(&__v, 0, 24);
    switch(v7)
    {
      case 9:
        MIL::IRValue::AsTensor(ParameterValue);
        Data = (char *)MIL::IRTensorValue::GetDataView<signed char>();
        memset(&__src, 0, sizeof(__src));
        std::vector<int>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>((char *)&__src, Data, &Data[v18], v18);
        break;
      case 10:
        MIL::IRValue::AsTensor(ParameterValue);
        unint64_t v15 = (__int16 *)MIL::IRTensorValue::GetDataView<short>();
        memset(&__src, 0, sizeof(__src));
        std::vector<int>::__init_with_size[abi:ne180100]<short const*,short const*>((char *)&__src, v15, &v15[v16], (2 * v16) >> 1);
        break;
      case 11:
        MIL::IRValueUtils::CopyTensorToVector<int>(&__src, ParameterValue);
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unexpected data types.");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (__v.__first_)
    {
      __v.__begin_ = __v.__first_;
      operator delete(__v.__first_);
    }
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)__src.__r_.__value_.__r.__words[2];
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    if (!v19)
    {
      LODWORD(__src.__r_.__value_.__l.__data_) = 1;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>((char *)&__v, (char *)&__src, (uint64_t)__src.__r_.__value_.__r.__words + 4, 1uLL);
    }
    std::string::basic_string[abi:ne180100]<0>(&__src, "x");
    ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v21 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = MIL::IRTensorValueType::Rank(v21);
    std::__split_buffer<std::string>::pointer first = __v.__first_;
    unint64_t v24 = (char *)__v.__begin_ - (char *)__v.__first_;
    int64_t v25 = ((char *)__v.__begin_ - (char *)__v.__first_) >> 2;
    if (v22 == v19)
    {
      uint64_t v26 = 0;
      int v27 = 0;
      int v28 = 0;
      int v29 = 0;
      int v30 = 0;
      int v31 = 0;
      do
      {
        if (!v26) {
          int v31 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 1);
        }
        if (v26 == 1) {
          int v30 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 2);
        }
        if (v26 == 2) {
          int v29 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 3);
        }
        if (v26 == 3) {
          int v28 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 4);
        }
        if (v26 == 4) {
          int v27 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 5);
        }
        ++v26;
      }
      while (v25 != v26);
      char v32 = 1;
      goto LABEL_62;
    }
    if (__v.__begin_ == __v.__first_)
    {
      char v32 = 0;
      int v31 = 1;
    }
    else
    {
      uint64_t v33 = (char *)__v.__first_ + 4 * v25;
      int v31 = *((_DWORD *)v33 - 1);
      if (v24 >= 5)
      {
        int v30 = *((_DWORD *)v33 - 2);
        if (v24 >= 9)
        {
          uint64_t v34 = (char *)__v.__first_ + 4 * v25;
          int v29 = *((_DWORD *)v34 - 3);
          if (v24 >= 0xD)
          {
            int v28 = *((_DWORD *)v34 - 4);
            if (v24 >= 0x11)
            {
              char v32 = 0;
              int v27 = *((_DWORD *)&__v.__first_->__r_.__value_.__l + v25 - 5);
LABEL_62:
              __p[0] = (void *)__PAIR64__(v30, v31);
              __p[1] = (void *)__PAIR64__(v28, v29);
              LODWORD(v51) = v27;
              DWORD1(v51) = v24 >> 2;
              *((void *)&v51 + 1) = 0;
              LOBYTE(v52) = 0;
              HIBYTE(v52) = v32;
              int v53 = 2;
              if (!__v.__first_) {
                goto LABEL_70;
              }
              __v.__begin_ = __v.__first_;
              goto LABEL_69;
            }
            char v32 = 0;
LABEL_61:
            int v27 = 1;
            goto LABEL_62;
          }
          char v32 = 0;
LABEL_60:
          int v28 = 1;
          goto LABEL_61;
        }
        char v32 = 0;
LABEL_59:
        int v29 = 1;
        goto LABEL_60;
      }
      char v32 = 0;
    }
    int v30 = 1;
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "shape");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__src, (uint64_t)this, (uint64_t)v48, a2, 0);
  memset(&__v, 0, 24);
  p_v = &__v;
  char v57 = 0;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)operator new(0x18uLL);
  __v.__begin_ = __v.__first_;
  __v.__end_ = __v.__first_ + 1;
  __v.__begin_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__v.__end_, (long long *)&__src, (long long *)&v59, __v.__first_);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&__v, a2);
  p_v = &__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (v49 < 0) {
    operator delete(v48[0]);
  }
  OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(a2);
  uint64_t v9 = MIL::IRValueType::AsTensorType(OutputType);
  char v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  Espresso::MILUtil::ToEspressoShape((uint64_t)&__v, v10);
  long long v11 = *(_OWORD *)&__v.__first_;
  std::__split_buffer<std::string>::pointer end = __v.__end_;
  if (v61)
  {
    long long v45 = *(_OWORD *)&__v.__first_;
    operator delete(v61);
    long long v11 = v45;
  }
  *(_OWORD *)std::string __p = v11;
  *(void *)&long long v51 = end;
  *((void *)&v51 + 1) = 0x100000000;
  __int16 v52 = 1;
  int v53 = 2;
  std::string::basic_string[abi:ne180100]<0>(v48, "shape");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__src, (uint64_t)this, (uint64_t)v48, a2, 0);
  std::vector<std::string>::pointer v13 = v54.__end_;
  if (v54.__end_ >= v54.__end_cap_.__value_)
  {
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_ - (char *)v54.__begin_) >> 3);
    unint64_t v36 = v35 + 1;
    if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) > v36) {
      unint64_t v36 = 0x5555555555555556 * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v54.__end_cap_.__value_ - (char *)v54.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v37 = v36;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v54.__end_cap_;
    if (v37) {
      unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v37);
    }
    else {
      uint64_t v38 = 0;
    }
    unint64_t v39 = (std::string *)(v37 + 24 * v35);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)v37;
    __v.__begin_ = v39;
    __v.__end_cap_.__value_ = (std::string *)(v37 + 24 * v38);
    long long v40 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
    v39->__r_.__value_.__r.__words[2] = __src.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
    memset(&__src, 0, sizeof(__src));
    __v.__end_ = v39 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v54, &__v);
    uint64_t v41 = v54.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v54.__end_ = v41;
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v14 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
    v54.__end_->__r_.__value_.__r.__words[2] = __src.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    memset(&__src, 0, sizeof(__src));
    v54.__end_ = v13 + 1;
  }
  if (v49 < 0)
  {
    std::__split_buffer<std::string>::pointer first = (std::__split_buffer<std::string>::pointer)v48[0];
LABEL_69:
    operator delete(first);
  }
LABEL_70:
  uint64_t v42 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&__v, "reshape");
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&__src, a2);
  uint64_t Location = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::reshape_params>(&v46, v42, (uint64_t)&__v, (uint64_t)&__src, (uint64_t)__p, (uint64_t)&v54, v55, Location);
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_192230D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  long long v44 = *(void **)(v42 - 160);
  if (v44)
  {
    *(void *)(v42 - 152) = v44;
    operator delete(v44);
  }
  a20 = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateLinear(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  int IsParameterSet = MIL::IROperation::IsParameterSet();
  if (SHIBYTE(__p[0].__end_) < 0) {
    operator delete(__p[0].__first_);
  }
  (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v42, a2);
  std::string::basic_string[abi:ne180100]<0>(&v40, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)__p, (uint64_t)this, (uint64_t)&v40, a2, 0);
  memset(&v41, 0, sizeof(v41));
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  v39.__r_.__value_.__s.__data_[8] = 0;
  v41.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v41.__end_ = v41.__begin_;
  v41.__end_cap_.__value_ = v41.__begin_ + 1;
  v41.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41.__end_cap_, (long long *)__p, (long long *)&__p[0].__end_cap_, v41.__begin_);
  if (SHIBYTE(__p[0].__end_) < 0) {
    operator delete(__p[0].__first_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  uint64_t v6 = ParameterValue;
  if (SHIBYTE(__p[0].__end_) < 0)
  {
    operator delete(__p[0].__first_);
    if (v6) {
      goto LABEL_26;
    }
  }
  else if (ParameterValue)
  {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "weight");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v40, (uint64_t)this, (uint64_t)&v39, a2, 0);
  std::vector<std::string>::pointer end = v41.__end_;
  if (v41.__end_ >= v41.__end_cap_.__value_)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_ - (char *)v41.__begin_) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) > v10) {
      unint64_t v10 = 0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v41.__end_cap_;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::vector<std::string>::pointer v13 = (std::string *)(v11 + 24 * v9);
    __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v11;
    __p[0].__begin_ = v13;
    __p[0].__end_cap_.__value_ = (std::string *)(v11 + 24 * v12);
    long long v14 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
    v13->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    memset(&v40, 0, sizeof(v40));
    __p[0].__end_ = v13 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v41, __p);
    unint64_t v15 = v41.__end_;
    std::__split_buffer<std::string>::~__split_buffer(__p);
    v41.__end_ = v15;
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
    v41.__end_->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
    memset(&v40, 0, sizeof(v40));
    v41.__end_ = end + 1;
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  MIL::IROperation::TryGetParameterValueSharedPtr();
  if (SHIBYTE(__p[0].__end_) < 0) {
    operator delete(__p[0].__first_);
  }
  if (v37) {
    int v16 = 0;
  }
  else {
    int v16 = IsParameterSet;
  }
  if (v16 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "bias");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v40, (uint64_t)this, (uint64_t)&v39, a2, 0);
    std::vector<std::string>::pointer v17 = v41.__end_;
    if (v41.__end_ >= v41.__end_cap_.__value_)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_ - (char *)v41.__begin_) >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) > v20) {
        unint64_t v20 = 0x5555555555555556 * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v20;
      }
      __p[0].__end_cap_.__value_ = (std::allocator<std::string> *)&v41.__end_cap_;
      if (v21) {
        unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v21);
      }
      else {
        uint64_t v22 = 0;
      }
      float v23 = (std::string *)(v21 + 24 * v19);
      __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v21;
      __p[0].__begin_ = v23;
      __p[0].__end_cap_.__value_ = (std::string *)(v21 + 24 * v22);
      long long v24 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
      v23->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
      memset(&v40, 0, sizeof(v40));
      __p[0].__end_ = v23 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v41, __p);
      int64_t v25 = v41.__end_;
      std::__split_buffer<std::string>::~__split_buffer(__p);
      v41.__end_ = v25;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v18 = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
      v41.__end_->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      memset(&v40, 0, sizeof(v40));
      v41.__end_ = v17 + 1;
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v41, a2);
  Espresso::MILTranslator::LayerTranslator::CreateEIRInnerProductParams((Espresso::MILTranslator::LayerTranslator *)__p, a2);
  uint64_t v26 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&v40, "inner_product");
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v39, a2);
  uint64_t Location = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>((uint64_t *)&v35, v26, (uint64_t)&v40, (uint64_t)&v39, (uint64_t)__p, (uint64_t)&v41, v42, Location);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  int v29 = v35;
  int v28 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v31 = MIL::IRValueType::AsTensorType(ParameterType);
  int v32 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 88))(v31);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_58;
    }
  }
  else if (!v6)
  {
    goto LABEL_58;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "weight");
  Espresso::MILTranslator::LayerTranslator::SetKernelWeight((uint64_t)this, (uint64_t)v29, a2, (uint64_t)&v40, 0, 0, 0, v32 == 4);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (!IsParameterSet) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
LABEL_58:
  if (!IsParameterSet) {
    goto LABEL_65;
  }
LABEL_59:
  if (v37)
  {
    uint64_t v33 = v37;
    uint64_t v34 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::MILTranslator::LayerTranslator::SetKernelBias((uint64_t)this, a2, v29, &v33, v32);
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
  }
LABEL_65:
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0].__first_ = (std::__split_buffer<std::string>::pointer)v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_192231540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char **__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::string __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::SetKernelWeight(uint64_t a1, uint64_t a2, const MIL::IROperation *a3, uint64_t a4, unsigned __int8 a5, int a6, int a7, char a8)
{
  unsigned __int8 v55 = a5;
  char v54 = a8;
  v53[0] = a3;
  v53[1] = a4;
  v53[2] = &v54;
  v53[3] = a1;
  v53[4] = a2;
  v53[5] = &v55;
  v52[0] = a1;
  v52[1] = a2;
  uint64_t v13 = (*(uint64_t (**)(const MIL::IROperation *, uint64_t, void))(*(void *)a3 + 120))(a3, a4, 0);
  if (!v13)
  {
    MIL::IROperation::TryGetParameterValueSharedPtr();
    Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v50);
    unint64_t v21 = v51;
    if (!v51) {
      return;
    }
    goto LABEL_21;
  }
  long long v14 = (unsigned __int8 *)v13;
  int v38 = a7;
  int v39 = a6;
  unint64_t v15 = std::__string_hash<char>::operator()[abi:ne180100](v13);
  int8x8_t v16 = *(int8x8_t *)(a1 + 216);
  if (!*(void *)&v16) {
    goto LABEL_20;
  }
  unint64_t v17 = v15;
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  unint64_t v19 = v18.u32[0];
  if (v18.u32[0] > 1uLL)
  {
    unint64_t v20 = v15;
    if (v15 >= *(void *)&v16) {
      unint64_t v20 = v15 % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v20 = (*(void *)&v16 - 1) & v15;
  }
  uint64_t v22 = *(unsigned __int8 ***)(*(void *)(a1 + 208) + 8 * v20);
  if (!v22 || (float v23 = *v22) == 0)
  {
LABEL_20:
    MIL::IROperation::TryGetParameterValueSharedPtr();
    Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v48);
    unint64_t v21 = v49;
    if (!v49) {
      return;
    }
    goto LABEL_21;
  }
  while (1)
  {
    unint64_t v24 = *((void *)v23 + 1);
    if (v24 == v17) {
      break;
    }
    if (v19 > 1)
    {
      if (v24 >= *(void *)&v16) {
        v24 %= *(void *)&v16;
      }
    }
    else
    {
      v24 &= *(void *)&v16 - 1;
    }
    if (v24 != v20) {
      goto LABEL_20;
    }
LABEL_19:
    float v23 = *(unsigned __int8 **)v23;
    if (!v23) {
      goto LABEL_20;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100](v23 + 16, v14)) {
    goto LABEL_19;
  }
  int v25 = v55;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(**((void **)v23 + 5) + 56))(*((void *)v23 + 5));
  int v29 = *(char *)(v26 + 23);
  if (v29 < 0)
  {
    if (*(void *)(v26 + 8) != 20) {
      goto LABEL_35;
    }
    uint64_t v26 = *(void *)v26;
  }
  else if (v29 != 20)
  {
    goto LABEL_35;
  }
  if (*(void *)v26 == 0x6F632E3631736F69
    && *(void *)(v26 + 8) == 0x5F7270786574736ELL
    && *(_DWORD *)(v26 + 16) == 1953718627)
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "source_val");
    uint64_t Attribute = MIL::IRObject::GetAttribute();
    uint64_t v34 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)Attribute + 32))(Attribute);
    uint64_t v35 = MIL::IRValueType::AsTensorType(v34);
    BOOL v32 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 88))(v35) == 4;
    if (v59 < 0) {
      operator delete(v58[0]);
    }
  }
  else
  {
LABEL_35:
    BOOL v32 = 0;
  }
  if (v25)
  {
    if (v32)
    {
LABEL_40:
      std::string::basic_string[abi:ne180100]<0>(v58, "source_val");
      MIL::IRObject::TryGetAttributeSharedPtr();
      Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v56);
      if (v57) {
        nitro::nitro_function::nitro_function(v57);
      }
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      return;
    }
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "bnns_auto_sparse");
      uint64_t v56 = v58;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2 + 240, (unsigned __int8 *)v58, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 10) = 1;
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      MIL::IROperation::TryGetParameterValueSharedPtr();
      Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v46);
      unint64_t v21 = v47;
      if (!v47) {
        return;
      }
    }
    else
    {
      MIL::IROperation::TryGetParameterValueSharedPtr();
      Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v44);
      unint64_t v21 = v45;
      if (!v45) {
        return;
      }
    }
    goto LABEL_21;
  }
  if (v32) {
    goto LABEL_40;
  }
  {
    uint64_t v36 = *((void *)v23 + 5);
    char v37 = 0;
LABEL_59:
    Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_2::operator()(v52, v36, v37);
    return;
  }
  {
    uint64_t v36 = *((void *)v23 + 5);
    char v37 = 1;
    goto LABEL_59;
  }
  {
    MIL::IROperation::TryGetParameterValueSharedPtr();
    Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v40);
    unint64_t v21 = v41;
    if (!v41) {
      return;
    }
    goto LABEL_21;
  }
  std::string::basic_string[abi:ne180100]<0>(v58, "bnns_auto_sparse");
  uint64_t v56 = v58;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2 + 240, (unsigned __int8 *)v58, (uint64_t)&std::piecewise_construct, (long long **)&v56)+ 10) = 1;
  if (v59 < 0) {
    operator delete(v58[0]);
  }
  MIL::IROperation::TryGetParameterValueSharedPtr();
  Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()((uint64_t)v53, &v42);
  unint64_t v21 = v43;
  if (v43) {
LABEL_21:
  }
    nitro::nitro_function::nitro_function(v21);
}

void sub_192231C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a14) {
    nitro::nitro_function::nitro_function(a14);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int8x8_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>(a1, a2, a3, a4, a5, (uint64_t *)a6, a7, *((_DWORD *)v16 + 10), a8);
}

void Espresso::MILTranslator::LayerTranslator::TranslateCast(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  *(void *)&long long v61 = *MEMORY[0x1E4F143B8];
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v43, a2);
  (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v41, a2);
  std::string::basic_string[abi:ne180100]<0>(&v53, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&__str, (uint64_t)this, (uint64_t)&v53, a2, 0);
  int v38 = 0;
  int v39 = 0;
  uint64_t v40 = 0;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  v52.__r_.__value_.__s.__data_[8] = 0;
  int v38 = (std::string *)operator new(0x18uLL);
  int v39 = v38;
  uint64_t v40 = v38 + 1;
  int v39 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v40, (long long *)&__str, &v58, v38);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53);
  }
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v38, a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, "dtype");
  MIL::IROperation::GetParameterValue();
  MIL::IRValue::GetScalar<std::string>();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = 0;
  int v5 = (char)v37;
  uint64_t v6 = v35;
  size_t v7 = v36;
  if ((v37 & 0x80u) == 0) {
    long long v8 = &v35;
  }
  else {
    long long v8 = v35;
  }
  if ((v37 & 0x80u) == 0) {
    size_t v9 = v37;
  }
  else {
    size_t v9 = v36;
  }
  unint64_t v10 = (char **)&off_1E57482B8;
  {
    v4 += 2;
    if (v4 == 16) {
      goto LABEL_19;
    }
  }
LABEL_19:
  {
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    p_str = &__str;
    (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    std::operator+<char>();
    int v25 = std::string::append(&v52, " for casting.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    int64_t v54 = v25->__r_.__value_.__r.__words[2];
    long long v53 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (v54 >= 0) {
      int v27 = &v53;
    }
    else {
      int v27 = (long long *)v53;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)p_str, (uint64_t)v27);
  }
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 == 4)
    {
      uint64_t v6 = &v35;
      goto LABEL_24;
    }
LABEL_25:
    unsigned int v11 = MIL::StringToIRDataType() - 2;
    if (v11 >= 0x10 || ((0xF79Du >> v11) & 1) == 0) {
      Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported by Espresso encountered");
    }
    int v12 = dword_192E06160[v11];
    v32[0] = v12;
    v32[1] = v12;
    uint64_t v13 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(v28, "cast");
    uint64_t v14 = MIL::IRObject::GetLocation(a2);
    int v45 = v12;
    std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3), &v45);
    uint64_t v15 = v41;
    for (uint64_t i = v42; v15 != i; v15 += 24)
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v13 + 240, v15, v15);
    Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(v13, &v41, (uint64_t *)__p);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v14 + 24))(&__str, v14);
    std::string::operator=((std::string *)(v13 + 56), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    char v49 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v49, (uint64_t)v38, (uint64_t)v39, 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (char *)v38) >> 3));
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
    memset(&v52, 0, sizeof(v52));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v52, (uint64_t)v49, v50, 0xAAAAAAAAAAAAAAABLL * ((v50 - (uint64_t)v49) >> 3));
    memset(&v60, 0, sizeof(v60));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
    uint64_t v17 = *(void *)(v13 + 96);
    LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(*(void *)(v13 + 112) + 8))(*(void *)(*(void *)(v13 + 112) + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v17, v13 + 112, (uint64_t)v28, (uint64_t)v32, (int *)&__str);
    uint8x8_t v18 = v31;
    v55[0] = v30;
    v55[1] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    memset(&__str, 0, sizeof(__str));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, (uint64_t)v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52.__r_.__value_.__l.__size_ - v52.__r_.__value_.__r.__words[0]) >> 3));
    long long v53 = 0uLL;
    int64_t v54 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v53, (uint64_t)v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60.__r_.__value_.__l.__size_ - v60.__r_.__value_.__r.__words[0]) >> 3));
    Espresso::sequential_builder::add_kernel_dbg(v13, v55, (uint64_t)v28, (uint64_t)&v43, v13 + 56, (std::string **)&__str, (std::string **)&v53);
    uint64_t v56 = (std::string *)&v53;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    uint64_t v56 = &__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    if (*(void *)v13) {
      Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)v13, v30, (long long **)&v52, (uint64_t *)&v60);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (*(char *)(v13 + 79) < 0)
    {
      **(unsigned char **)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
    }
    else
    {
      *(unsigned char *)(v13 + 56) = 0;
      *(unsigned char *)(v13 + 79) = 0;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v31) {
      nitro::nitro_function::nitro_function(v31);
    }
    if (v29 < 0)
    {
      unint64_t v19 = v28[0];
LABEL_46:
      operator delete(v19);
      goto LABEL_55;
    }
    goto LABEL_55;
  }
  if (v7 != 4) {
    goto LABEL_25;
  }
LABEL_24:
  if (*v6 != 1819242338) {
    goto LABEL_25;
  }
  __str.__r_.__value_.__r.__words[2] = 897988541;
  LOBYTE(v58) = 0;
  uint64_t v59 = 0;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0x6BuLL;
  uint64_t v20 = *((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&v53, "elementwise");
  if (SHIBYTE(v38->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v60, v38->__r_.__value_.__l.__data_, v38->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v21 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v21;
  }
  memset(&v52, 0, sizeof(v52));
  char v49 = &v52;
  LOBYTE(v50) = 0;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v52.__r_.__value_.__l.__size_ = v52.__r_.__value_.__r.__words[0];
  v52.__r_.__value_.__r.__words[2] = v52.__r_.__value_.__r.__words[0] + 24;
  v52.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v52.__r_.__value_.__r.__words[2], (long long *)&v60, &v61, (std::string *)v52.__r_.__value_.__l.__data_);
  uint64_t v22 = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v33, v20, (uint64_t)&v53, (uint64_t)&v43, (uint64_t)&__str, (uint64_t *)&v52, &v41, 14, v22);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  char v49 = &v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54) < 0)
  {
    unint64_t v19 = (void *)v53;
    goto LABEL_46;
  }
LABEL_55:
  if ((char)v37 < 0) {
    operator delete(v35);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
}

void sub_1922324F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char **a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 217) < 0) {
    operator delete(*(void **)(v54 - 240));
  }
  if (a54 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v54 - 161) < 0) {
    operator delete(*(void **)(v54 - 184));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  a21 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a27 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(std::string *a1, uint64_t a2, uint64_t a3, MIL::IRObject *a4, uint64_t a5)
{
  *(void *)&long long v47 = *MEMORY[0x1E4F143B8];
  if (!MIL::IROperation::IsParameterSet()
    || (*(unsigned int (**)(MIL::IRObject *, uint64_t))(*(void *)a4 + 152))(a4, a3) < a5)
  {
    uint64_t Location = MIL::IRObject::GetLocation(a4);
    (*(void (**)(std::string *__return_ptr))(*(void *)Location + 24))(&v42);
    int v31 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
    std::string::size_type v32 = v42.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v46, "Cannot resolve name from param that is not set or that does not have enough arguments.");
    if (v31 >= 0) {
      uint64_t v33 = &v42;
    }
    else {
      uint64_t v33 = (std::string *)v32;
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v46;
    }
    else {
      uint64_t v34 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v33, (uint64_t)v34);
  }
  uint64_t v10 = (*(uint64_t (**)(MIL::IRObject *, uint64_t, uint64_t))(*(void *)a4 + 120))(a4, a3, a5);
  if (v10)
  {
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v10;
      v46.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v12;
    }
    memset(&v42, 0, sizeof(v42));
    LOBYTE(__p[1]) = 0;
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v42.__r_.__value_.__l.__size_ = v42.__r_.__value_.__r.__words[0];
    v42.__r_.__value_.__r.__words[2] = v42.__r_.__value_.__r.__words[0] + 24;
    v42.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v42.__r_.__value_.__r.__words[2], (long long *)&v46, &v47, (std::string *)v42.__r_.__value_.__l.__data_);
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a2, (uint64_t *)&v42, a4);
    __p[0] = &v42;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)v11;
      a1->__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v13;
    }
  }
  else
  {
    MIL::IROperation::TryGetParameterValueSharedPtr();
    if (!(void)v45) {
      Espresso::throw_exception_selector<Espresso::network_translation_error>("Cannot get argument as either variable name or value");
    }
    if ((*(unsigned int (**)(MIL::IRObject *, uint64_t))(*(void *)a4 + 152))(a4, a3) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v46, "");
    }
    else
    {
      std::to_string(&v42, a5);
      uint64_t v14 = std::string::insert(&v42, 0, "_arg");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v36, a4);
    int8x8_t v16 = std::string::append(&v36, "_");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      unint64_t v19 = (const std::string::value_type *)a3;
    }
    else {
      unint64_t v19 = *(const std::string::value_type **)a3;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v20 = *(void *)(a3 + 8);
    }
    long long v21 = std::string::append(&v37, v19, v20);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v23 = &v46;
    }
    else {
      float v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v46.__r_.__value_.__l.__size_;
    }
    int v25 = std::string::append(&v38, (const std::string::value_type *)v23, size);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    int v27 = std::string::append(&v39, "_blob");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    Espresso::MILTranslator::LayerTranslator::GetUniqueLayerAndBlobNames((uint64_t)&v42, a2, (uint64_t)__p);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    long long v35 = v45;
    long long v45 = 0uLL;
    uint64_t v29 = MIL::IRObject::GetLocation(a4);
    Espresso::MILTranslator::LayerTranslator::LoadConstant(a2, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v35, v29);
    if (*((void *)&v35 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v35 + 1));
    }
    if (SHIBYTE(v44) < 0)
    {
      std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v43, *((std::string::size_type *)&v43 + 1));
      if (SHIBYTE(v44) < 0) {
        operator delete((void *)v43);
      }
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v43;
      a1->__r_.__value_.__r.__words[2] = v44;
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v45 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
}

void sub_192232C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::pair<std::string const,std::string>::~pair(v44 - 160);
  if (*(char *)(v44 - 73) < 0) {
    operator delete(*(void **)(v44 - 96));
  }
  std::string v46 = *(std::__shared_weak_count **)(v44 - 104);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3)
  {
    uint64_t v8 = a2;
    uint64_t v10 = (void *)(a1 + 168);
    do
    {
      if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(*(void *)(a1 + 40) + 240), v8))
      {
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 56))(&v19, a4, v8, 1);
        if (!(void)v19)
        {
          if (*(char *)(v8 + 23) < 0) {
            uint64_t v8 = *(void *)v8;
          }
          Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("Cannot find value for requested input blob '%s'", v8);
        }
        std::operator+<char>();
        uint64_t v11 = std::string::insert(&v14, 0, "__load");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        Espresso::MILTranslator::NameGenerator::NameForPrefix(v10, (uint64_t)__p, (uint64_t)v17);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        long long v13 = v19;
        long long v19 = 0uLL;
        Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)v17, v8, (uint64_t)&v13, a5);
        if (*((void *)&v13 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v13 + 1));
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        if (*((void *)&v19 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      v8 += 24;
    }
    while (v8 != a3);
  }
}

void sub_192232F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a29 < 0) {
    operator delete(__p);
  }
  int v31 = *(std::__shared_weak_count **)(v29 - 72);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(uint64_t a1, uint64_t *a2, MIL::IRObject *a3)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 96))(a3) + 64;
  uint64_t Location = MIL::IRObject::GetLocation(a3);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];

  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a1, v8, v9, v6, Location);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, uint64_t a9)
{
  int v19 = a8;
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v19);
  uint64_t v16 = *a7;
  uint64_t v17 = a7[1];
  if (*a7 != v17)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v16, v16);
      v16 += 24;
    }
    while (v16 != v17);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr))(*(void *)a9 + 24))(&__str);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v20);
  p_str = (std::string *)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1922331CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, int a8, uint64_t a9)
{
  int v19 = a8;
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v19);
  uint64_t v16 = *a7;
  uint64_t v17 = a7[1];
  if (*a7 != v17)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v16, v16);
      v16 += 24;
    }
    while (v16 != v17);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr))(*(void *)a9 + 24))(&__str);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v20, 0, sizeof(v20));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v20, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::elementwise_params>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v20);
  p_str = (std::string *)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1922333F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::compute_path>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    size_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1922334C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3) != (a3[1] - *a3) >> 2) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Mismatch in the size of topNames and topTypes");
  }
  if (v5 == v4) {
    return;
  }
  uint64_t v6 = a2;
  unint64_t v8 = 0;
  uint64_t v9 = (uint64_t *)(a1 + 200);
  long long v35 = (void *)(a1 + 216);
  std::string v36 = (uint64_t *)(a1 + 200);
  do
  {
    uint64_t v10 = v4 + 24 * v8;
    uint64_t v11 = *a3;
    unint64_t v12 = std::__string_hash<char>::operator()[abi:ne180100](v10);
    unint64_t v13 = v12;
    unint64_t v14 = *(void *)(a1 + 208);
    if (!v14) {
      goto LABEL_22;
    }
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v3 = v12;
      if (v12 >= v14) {
        unint64_t v3 = v12 % v14;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v12;
    }
    uint64_t v17 = *(unsigned __int8 ***)(*v9 + 8 * v3);
    if (!v17) {
      goto LABEL_22;
    }
    char v18 = *v17;
    if (!*v17)
    {
LABEL_21:
      uint64_t v9 = v36;
LABEL_22:
      std::string::size_type v20 = (char *)operator new(0x30uLL);
      *(void *)std::string::size_type v20 = 0;
      *((void *)v20 + 1) = v13;
      long long v21 = (std::string *)(v20 + 16);
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v22 = *(_OWORD *)v10;
        *((void *)v20 + 4) = *(void *)(v10 + 16);
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      *((_DWORD *)v20 + 10) = *(_DWORD *)(v11 + 4 * v8);
      float v23 = (float)(unint64_t)(*(void *)(a1 + 224) + 1);
      float v24 = *(float *)(a1 + 232);
      if (!v14 || (float)(v24 * (float)v14) < v23)
      {
        BOOL v25 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v25 = 1;
        }
        unint64_t v26 = v25 | (2 * v14);
        unint64_t v27 = vcvtps_u32_f32(v23 / v24);
        if (v26 <= v27) {
          size_t v28 = v27;
        }
        else {
          size_t v28 = v26;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)v9, v28);
        unint64_t v14 = *(void *)(a1 + 208);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14) {
            unint64_t v3 = v13 % v14;
          }
          else {
            unint64_t v3 = v13;
          }
        }
        else
        {
          unint64_t v3 = (v14 - 1) & v13;
        }
      }
      uint64_t v29 = *v9;
      uint64_t v30 = *(void **)(*v9 + 8 * v3);
      if (v30)
      {
        *(void *)std::string::size_type v20 = *v30;
      }
      else
      {
        *(void *)std::string::size_type v20 = *v35;
        void *v35 = v20;
        *(void *)(v29 + 8 * v3) = v35;
        if (!*(void *)v20)
        {
LABEL_46:
          ++*(void *)(a1 + 224);
          goto LABEL_47;
        }
        unint64_t v31 = *(void *)(*(void *)v20 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v31 >= v14) {
            v31 %= v14;
          }
        }
        else
        {
          v31 &= v14 - 1;
        }
        uint64_t v30 = (void *)(*v9 + 8 * v31);
      }
      *uint64_t v30 = v20;
      goto LABEL_46;
    }
    while (1)
    {
      unint64_t v19 = *((void *)v18 + 1);
      if (v19 == v13) {
        break;
      }
      if (v16 > 1)
      {
        if (v19 >= v14) {
          v19 %= v14;
        }
      }
      else
      {
        v19 &= v14 - 1;
      }
      if (v19 != v3)
      {
LABEL_20:
        uint64_t v6 = a2;
        goto LABEL_21;
      }
LABEL_19:
      char v18 = *(unsigned __int8 **)v18;
      if (!v18) {
        goto LABEL_20;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v18 + 16, (unsigned __int8 *)v10)) {
      goto LABEL_19;
    }
    int v32 = *((_DWORD *)v18 + 10);
    uint64_t v9 = v36;
    uint64_t v6 = a2;
    if (v32 != *(_DWORD *)(*a3 + 4 * v8))
    {
      uint64_t v33 = *a2 + 24 * v8;
      if (*(char *)(v33 + 23) < 0) {
        uint64_t v33 = *(void *)v33;
      }
      Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("Mismatch in the propagated dtype of tensor: %s, across different paths", v33);
    }
LABEL_47:
    ++v8;
    uint64_t v4 = *v6;
  }
  while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3));
}

void sub_19223382C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::elementwise_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint8x8_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  BOOL v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  BOOL v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192233A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_kernel_dbg(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, std::string **a6, std::string **a7)
{
  if (*(unsigned char *)(a1 + 184))
  {
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v14 = (const char *)a3;
    }
    else {
      uint64_t v14 = *(const char **)a3;
    }
    if (*(char *)(a4 + 23) >= 0) {
      uint8x8_t v15 = (const char *)a4;
    }
    else {
      uint8x8_t v15 = *(const char **)a4;
    }
    if (*(char *)(a5 + 23) >= 0) {
      uint64_t v16 = (const char *)a5;
    }
    else {
      uint64_t v16 = *(const char **)a5;
    }
    printf("\t[sequential_builder::add_kernel_dbg] %s %s dbg: %s\n", v14, v15, v16);
  }

  Espresso::sequential_builder::add_layer_to_network(a1, a2, (const std::string *)a3, (const std::string *)a4, (const std::string *)a5, a6, a7);
}

void Espresso::sequential_builder::add<Espresso::inner_product_uniforms>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint8x8_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  BOOL v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  BOOL v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192233D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::reshape_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint8x8_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::reshape_params>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192233FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reshape_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint8x8_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  BOOL v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  BOOL v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_19223422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::squeeze_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  uint8x8_t v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  BOOL v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  BOOL v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192234494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::SetKernelBias(uint64_t a1, MIL::IRObject *a2, void *a3, void *a4, int a5)
{
  uint64_t v10 = (MIL::IRValueType *)(*(uint64_t (**)(void))(*(void *)*a4 + 32))();
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
  switch(v12)
  {
    case 4:
      if (a5 == 4)
      {
        long long v78 = *(_OWORD *)a4;
        *a4 = 0;
        a4[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v83, "b_f16");
        Espresso::MILTranslator::LayerTranslator::SetKernelParameter<MIL::Fp16>(a1, a3, &v78, (uint64_t)&v83);
        if (SHIBYTE(v85) < 0) {
          operator delete(v83);
        }
        shared_owners = (std::__shared_weak_count *)*((void *)&v78 + 1);
        if (*((void *)&v78 + 1)) {
          goto LABEL_59;
        }
        return;
      }
      if (a5 != 5)
      {
        uint64_t Location = MIL::IRObject::GetLocation(a2);
        (*(void (**)(unsigned char **__return_ptr))(*(void *)Location + 24))(&v83);
        int v66 = SHIBYTE(v85);
        unint64_t v67 = (void **)v83;
        std::string::basic_string[abi:ne180100]<0>(&__p, "Only F16/F32 mixed precision supported");
        if (v66 >= 0) {
          float v68 = (void **)&v83;
        }
        else {
          float v68 = v67;
        }
        if (v82 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v68, (uint64_t)p_p);
      }
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)*a4 + 32))();
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
      int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&__p, v20, 1, 1, 1);
      uint64_t v21 = (int *)__p;
      Espresso::MILTranslator::CopyIRValueToFloat32Blob<4>((MIL::IRValue *)*a4, (uint64_t)__p);
      uint64_t v22 = 0;
      uint64_t v23 = *((void *)v21 + 3);
      unint64_t v24 = v21[2];
      do
      {
        v24 *= v21[v22 + 3];
        ++v22;
      }
      while (v22 != 3);
      std::string::basic_string[abi:ne180100]<0>(&v83, "b");
      if (v24) {
        uint64_t v25 = v23;
      }
      else {
        uint64_t v25 = 0;
      }
      Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<float>((uint64_t)a3, v25, v24, (uint64_t)&v83, 0, 0);
      break;
    case 11:
      MIL::IRValue::AsTensor((MIL::IRValue *)*a4);
      Data = (int *)MIL::IRTensorValue::GetDataView<int>();
      uint64_t v83 = 0;
      int v84 = 0;
      uint64_t v85 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<int const*,int const*>((char *)&v83, Data, &Data[v15], (4 * v15) >> 2);
      uint64_t v16 = v84 - v83;
      if (v84 == v83) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = (int *)v83;
      }
      if (a5 == 4)
      {
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)*a4 + 32))();
        uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
        int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v75, v28, 1, 1, 1);
        uint64_t v29 = 0;
        uint64_t v30 = v75;
        uint64_t v31 = *(void *)(v75 + 24);
        uint64_t v32 = *(int *)(v75 + 8);
        uint64_t v33 = v32;
        do
        {
          v33 *= *(int *)(v75 + 12 + v29);
          v29 += 4;
        }
        while (v29 != 12);
        if (v33)
        {
          uint64_t v34 = *(_WORD **)(v75 + 24);
          do
          {
            int v35 = *v17++;
            _S0 = v35;
            __asm { FCVT            H0, S0 }
            *v34++ = _S0;
            --v33;
          }
          while (v33);
        }
        uint64_t v41 = 0;
        uint64_t v42 = v30 + 12;
        do
        {
          v32 *= *(int *)(v42 + v41);
          v41 += 4;
        }
        while (v41 != 12);
        std::string::basic_string[abi:ne180100]<0>(&__p, "b_f16");
        if (v32) {
          uint64_t v43 = v31;
        }
        else {
          uint64_t v43 = 0;
        }
        Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<unsigned short>((uint64_t)a3, v43, v32, (uint64_t)&__p);
        if (v82 < 0) {
          operator delete(__p);
        }
        if (v76) {
          nitro::nitro_function::nitro_function(v76);
        }
      }
      else
      {
        if (a5 != 5)
        {
          uint64_t v60 = MIL::IRObject::GetLocation(a2);
          (*(void (**)(void **__return_ptr))(*(void *)v60 + 24))(&__p);
          int v61 = v82;
          uint64_t v62 = (void **)__p;
          std::string::basic_string[abi:ne180100]<0>(&v75, "Only F16/F32 mixed precision supported");
          if (v61 >= 0) {
            unint64_t v63 = &__p;
          }
          else {
            unint64_t v63 = v62;
          }
          if (v77 >= 0) {
            long long v64 = &v75;
          }
          else {
            long long v64 = (uint64_t *)v75;
          }
          Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v63, (uint64_t)v64);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "b");
        Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<float>((uint64_t)a3, (uint64_t)v17, v16 >> 2, (uint64_t)&__p, 0, 0);
        if (v82 < 0) {
          operator delete(__p);
        }
      }
      if (v83)
      {
        int v84 = v83;
        operator delete(v83);
      }
      return;
    case 5:
      if (a5 != 4)
      {
        if (a5 != 5)
        {
          uint64_t v70 = MIL::IRObject::GetLocation(a2);
          (*(void (**)(unsigned char **__return_ptr))(*(void *)v70 + 24))(&v83);
          int v71 = SHIBYTE(v85);
          uint64_t v72 = (void **)v83;
          std::string::basic_string[abi:ne180100]<0>(&__p, "Only F16/F32 mixed precision supported");
          if (v71 >= 0) {
            uint64_t v73 = (void **)&v83;
          }
          else {
            uint64_t v73 = v72;
          }
          if (v82 >= 0) {
            long long v74 = &__p;
          }
          else {
            long long v74 = __p;
          }
          Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v73, (uint64_t)v74);
        }
        std::__shared_count v79 = *(std::__shared_count *)a4;
        *a4 = 0;
        a4[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&v83, "b");
        Espresso::MILTranslator::LayerTranslator::SetKernelParameter<float>(a1, a3, &v79, (uint64_t)&v83);
        if (SHIBYTE(v85) < 0) {
          operator delete(v83);
        }
        shared_owners = (std::__shared_weak_count *)v79.__shared_owners_;
        if (!v79.__shared_owners_) {
          return;
        }
LABEL_59:
        nitro::nitro_function::nitro_function(shared_owners);
        return;
      }
      uint64_t v44 = (*(uint64_t (**)(void))(*(void *)*a4 + 32))();
      uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v44 + 24))(v44);
      int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 16))(v45);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&__p, v46, 1, 1, 1);
      MIL::IRValue::AsTensor((MIL::IRValue *)*a4);
      long long v47 = (int *)MIL::IRTensorValue::GetDataView<float>();
      uint64_t v48 = 0;
      char v49 = (char *)__p;
      uint64_t v50 = *((void *)__p + 3);
      uint64_t v51 = *((int *)__p + 2);
      uint64_t v52 = v51;
      do
      {
        v52 *= *(int *)((char *)__p + v48 + 12);
        v48 += 4;
      }
      while (v48 != 12);
      if (v52)
      {
        long long v53 = (_WORD *)*((void *)__p + 3);
        do
        {
          int v54 = *v47++;
          _S0 = v54;
          __asm { FCVT            H0, S0 }
          *v53++ = _S0;
          --v52;
        }
        while (v52);
      }
      uint64_t v56 = 0;
      char v57 = v49 + 12;
      do
      {
        v51 *= *(int *)&v57[v56];
        v56 += 4;
      }
      while (v56 != 12);
      std::string::basic_string[abi:ne180100]<0>(&v83, "b_f16");
      if (v51) {
        uint64_t v58 = v50;
      }
      else {
        uint64_t v58 = 0;
      }
      Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<unsigned short>((uint64_t)a3, v58, v51, (uint64_t)&v83);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported dtype for bias");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(v83);
  }
  shared_owners = v81;
  if (v81) {
    goto LABEL_59;
  }
}

void sub_192234C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  uint64_t v27 = *(void **)(v25 - 72);
  if (v27)
  {
    *(void *)(v25 - 64) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::generic_softmax_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  int v13 = 256;
  long long v11 = xmmword_192DCA290;
  uint64_t v12 = 1;
  Espresso::SerDes::params_io<Espresso::softmax_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "softmax");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192234E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::softmax_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_plain_sigmoid");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 20));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "is_log_softmax");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 26));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "softmax_cross_entropy_loss");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 24));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "reduce_cross_entropy");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 25));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 27));
    goto LABEL_69;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 168))(v9, __p, a2 + 4);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "is_plain_sigmoid");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 20);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(unsigned char *)(a2 + 26))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "is_log_softmax");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 26);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(unsigned char *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "softmax_cross_entropy_loss");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 24);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (!*(unsigned char *)(a2 + 25))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "reduce_cross_entropy");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, a2 + 25);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 27);
  uint64_t v5 = a2 + 27;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_69:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1922353DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_0,std::allocator<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_0>,BOOL ()(MIL::IRFunction const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 8), v3))return 0; {
  int v6 = &unk_1EE37E638;
  }
  long long v7 = *(_OWORD *)(a1 + 16);
  char v8 = &v6;
  uint64_t v4 = MIL::Util::Walk();
  std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&v6);
  return v4;
}

void sub_192235540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ___ZL44is_espresso_running_on_virtual_apple_machinev_block_invoke()
{
  int v2 = 0;
  size_t v1 = 4;
  uint64_t result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!result) {
    is_espresso_running_on_virtual_apple_machine(void)::uint64_t result = v2;
  }
  return result;
}

void Espresso::ANECompilerEngine::context::network_transform_pre_allocation(Espresso::ANECompilerEngine::context *this, Espresso::net *a2)
{
  v825[0] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 568)) {
    return;
  }
  *((unsigned char *)a2 + 568) = 1;
  (*(void (**)(Espresso::ANECompilerEngine::context *))(*(void *)this + 176))(this);
  if ((***((unsigned int (****)(void))this + 1))() >> 1 == 5003)
  {
    std::string::basic_string[abi:ne180100]<0>(&v821, "experimental.ane.skip_network_transform_pre_allocation");
    std::string::basic_string[abi:ne180100]<0>(__p, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)&v821, (uint64_t)__p, (std::string *)&v800);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SBYTE7(v822) < 0) {
      operator delete((void *)v821);
    }
    if (SBYTE7(v801) < 0)
    {
      if (*((void *)&v800 + 1) != 1) {
        goto LABEL_13;
      }
      uint64_t v5 = (long long *)v800;
    }
    else
    {
      if (SBYTE7(v801) != 1) {
        goto LABEL_13;
      }
      uint64_t v5 = &v800;
    }
    if (*(unsigned char *)v5 == 49) {
      goto LABEL_14;
    }
LABEL_13:
    if (*((unsigned char *)this + 127))
    {
LABEL_14:
      int v6 = 1;
      if ((BYTE7(v801) & 0x80) == 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "per_network_configuration");
    std::string::basic_string[abi:ne180100]<0>(&v777, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)__p, (uint64_t)&v777, (std::string *)&v821);
    if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v777.__r_.__value_.__l.__data_);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    char v62 = BYTE7(v822);
    if (SBYTE7(v822) < 0)
    {
      unint64_t v63 = (long long *)v821;
      if (*((void *)&v821 + 1) != 1)
      {
        int v6 = 0;
        goto LABEL_1380;
      }
    }
    else
    {
      if (SBYTE7(v822) != 1)
      {
        int v6 = 0;
        goto LABEL_1381;
      }
      unint64_t v63 = &v821;
    }
    if (*(unsigned char *)v63 == 49)
    {
      Espresso::ANECompilerEngine::context::handle_cast_kernel(a2, this, v4);
      int v6 = 1;
      char v62 = BYTE7(v822);
    }
    else
    {
      int v6 = 0;
    }
    if ((v62 & 0x80) == 0)
    {
LABEL_1381:
      if ((BYTE7(v801) & 0x80) == 0)
      {
LABEL_16:
        if (v6) {
          return;
        }
        goto LABEL_17;
      }
LABEL_15:
      operator delete((void *)v800);
      goto LABEL_16;
    }
    unint64_t v63 = (long long *)v821;
LABEL_1380:
    operator delete(v63);
    goto LABEL_1381;
  }
LABEL_17:
  v704 = this;
  Espresso::ANECompilerEngine::context::handle_cast_kernel(a2, this, v4);
  v743[0] = MEMORY[0x1E4F143A8];
  v743[1] = 3221225472;
  v744 = ___ZN8Espresso17ANECompilerEngine19mix_stack_nd_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v745 = &__block_descriptor_48_e9_v16__0_v8l;
  v746 = this;
  v747 = a2;
  long long v7 = v743;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v8 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v8)
  {
    unint64_t v9 = 0;
    do
    {
      DWORD2(v802[1]) = v9;
      long long v10 = *(_OWORD *)(v8 + 16 * v9);
      uint64_t v11 = *(void *)(v8 + 16 * v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      char v12 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v10;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v13 = v801;
      }
      else
      {
        uint64_t v13 = v10;
      }
      int v14 = *(void **)(v13 + 64);
      if (v14
      {
        uint64_t v15 = *(void *)(v13 + 72);
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v14;
      *((void *)&v800 + 1) = v15;
      if (v16)
      {
        nitro::nitro_function::nitro_function(v16);
        int v14 = (void *)v800;
      }
      if (v14) {
        v744((uint64_t)v7, (int64x2_t *)&v800);
      }
      ++v9;
      uint64_t v8 = *((void *)a2 + 4);
    }
    while (v9 < (*((void *)a2 + 5) - v8) >> 4);
    uint64_t v17 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      v692 = v7;
      int v18 = 0;
      uint64_t v19 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        int v20 = v19 - 4;
        int v21 = *((_DWORD *)v19 - 8) + v18;
        *((_DWORD *)v19 - 8) = v21;
        uint64_t v22 = *(v19 - 3);
        if (v22)
        {
          LODWORD(v821) = v21;
          *((void *)&v821 + 1) = v22;
          uint64_t v23 = *(v19 - 2);
          *(void *)&long long v822 = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v19 - 1), *v19, 0xAAAAAAAAAAAAAAABLL * ((*v19 - *(v19 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v19[2], v19[3], 0xAAAAAAAAAAAAAAABLL * ((v19[3] - v19[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          v770 = &v777;
          LOBYTE(v771) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          v770 = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)&v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)((char *)&v822 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v24 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v21);
          int v24 = -1;
        }
        v18 += v24;
        v19 += 9;
      }
      while (v20 + 9 != v17);
      long long v7 = v692;
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  v748[0] = MEMORY[0x1E4F143A8];
  v748[1] = 3221225472;
  v749 = ___ZN8Espresso17ANECompilerEngine26mix_sequence_repeat_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v750 = &__block_descriptor_48_e9_v16__0_v8l;
  v751 = v704;
  v752 = a2;
  uint64_t v25 = v748;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v26 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v26)
  {
    unint64_t v27 = 0;
    do
    {
      DWORD2(v802[1]) = v27;
      long long v28 = *(_OWORD *)(v26 + 16 * v27);
      uint64_t v29 = *(void *)(v26 + 16 * v27 + 8);
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v28;
      if (v30)
      {
        nitro::nitro_function::nitro_function(v30);
        uint64_t v31 = v801;
      }
      else
      {
        uint64_t v31 = v28;
      }
      uint64_t v32 = *(void **)(v31 + 64);
      if (v32
      {
        uint64_t v33 = *(void *)(v31 + 72);
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v32;
      *((void *)&v800 + 1) = v33;
      if (v34)
      {
        nitro::nitro_function::nitro_function(v34);
        uint64_t v32 = (void *)v800;
      }
      if (v32) {
        v749((uint64_t)v25, (int64x2_t *)&v800);
      }
      ++v27;
      uint64_t v26 = *((void *)a2 + 4);
    }
    while (v27 < (*((void *)a2 + 5) - v26) >> 4);
    int v35 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      v693 = v25;
      int v36 = 0;
      std::string v37 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        std::string v38 = v37 - 4;
        int v39 = *((_DWORD *)v37 - 8) + v36;
        *((_DWORD *)v37 - 8) = v39;
        uint64_t v40 = *(v37 - 3);
        if (v40)
        {
          LODWORD(v821) = v39;
          *((void *)&v821 + 1) = v40;
          uint64_t v41 = *(v37 - 2);
          *(void *)&long long v822 = v41;
          if (v41) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v37 - 1), *v37, 0xAAAAAAAAAAAAAAABLL * ((*v37 - *(v37 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v37[2], v37[3], 0xAAAAAAAAAAAAAAABLL * ((v37[3] - v37[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          v770 = &v777;
          LOBYTE(v771) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          v770 = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)&v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)((char *)&v822 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v42 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v39);
          int v42 = -1;
        }
        v36 += v42;
        v37 += 9;
      }
      while (v38 + 9 != v35);
      uint64_t v25 = v693;
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  v680 = (char *)a2 + 472;
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)a2 + 472);
  v682 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v682, v43))
  {
    v718[0] = MEMORY[0x1E4F143A8];
    v718[1] = 3221225472;
    v719 = ___ZN8Espresso17ANECompilerEngine7context21decompose_tile_kernelEPNS_3netEPS1__block_invoke;
    v720 = &__block_descriptor_48_e9_v16__0_v8l;
    v721 = v704;
    v722 = a2;
    uint64_t v44 = v718;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    long long v801 = 0u;
    memset(v802, 0, 28);
    long long v800 = 0u;
    *(void *)&long long v803 = a2;
    uint64_t v45 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v45)
    {
      unint64_t v46 = 0;
      do
      {
        DWORD2(v802[1]) = v46;
        long long v47 = *(_OWORD *)(v45 + 16 * v46);
        uint64_t v48 = *(void *)(v45 + 16 * v46 + 8);
        if (v48) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
        }
        char v49 = (std::__shared_weak_count *)*((void *)&v801 + 1);
        long long v801 = v47;
        if (v49)
        {
          nitro::nitro_function::nitro_function(v49);
          uint64_t v50 = v801;
        }
        else
        {
          uint64_t v50 = v47;
        }
        uint64_t v51 = *(void **)(v50 + 64);
        if (v51
        {
          uint64_t v52 = *(void *)(v50 + 72);
          if (v52) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
        long long v53 = (std::__shared_weak_count *)*((void *)&v800 + 1);
        *(void *)&long long v800 = v51;
        *((void *)&v800 + 1) = v52;
        if (v53)
        {
          nitro::nitro_function::nitro_function(v53);
          uint64_t v51 = (void *)v800;
        }
        if (v51) {
          v719((uint64_t)v44, (int64x2_t *)&v800);
        }
        ++v46;
        uint64_t v45 = *((void *)a2 + 4);
      }
      while (v46 < (*((void *)a2 + 5) - v45) >> 4);
      int v54 = (uint64_t *)*((void *)&v802[0] + 1);
      if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
      {
        v694 = v44;
        int v55 = 0;
        uint64_t v56 = (uint64_t *)(*(void *)&v802[0] + 32);
        do
        {
          char v57 = v56 - 4;
          int v58 = *((_DWORD *)v56 - 8) + v55;
          *((_DWORD *)v56 - 8) = v58;
          uint64_t v59 = *(v56 - 3);
          if (v59)
          {
            LODWORD(v821) = v58;
            *((void *)&v821 + 1) = v59;
            uint64_t v60 = *(v56 - 2);
            *(void *)&long long v822 = v60;
            if (v60) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)&v822 + 1) = 0;
            *(void *)v823 = 0;
            *(void *)&v823[8] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v56 - 1), *v56, 0xAAAAAAAAAAAAAAABLL * ((*v56 - *(v56 - 1)) >> 3));
            *(void *)&v823[16] = 0;
            *(void *)&v823[24] = 0;
            v824 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v56[2], v56[3], 0xAAAAAAAAAAAAAAABLL * ((v56[3] - v56[2]) >> 3));
            memset(&v777, 0, sizeof(v777));
            v770 = &v777;
            LOBYTE(v771) = 0;
            v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
            v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
            v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
            v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
            v770 = &v777;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
            v770 = (std::string *)&v823[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
            v770 = (std::string *)((char *)&v822 + 8);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
            if ((void)v822) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
            }
            int v61 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v58);
            int v61 = -1;
          }
          v55 += v61;
          v56 += 9;
        }
        while (v57 + 9 != v54);
        uint64_t v44 = v694;
      }
    }
    *(void *)&long long v821 = v802;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
    if (*((void *)&v801 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
    }
    if (*((void *)&v800 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
    if (*(void *)&__p[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
    }
  }
  *(void *)&long long v800 = MEMORY[0x1E4F143A8];
  *((void *)&v800 + 1) = 3221225472;
  *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context21decompose_fill_kernelEPNS_3netEPS1__block_invoke;
  *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  *(void *)&v802[0] = v704;
  *((void *)&v802[0] + 1) = a2;
  Espresso::single_match_replace<Espresso::generic_fill_kernel>(a2, &v800);
  v759[0] = MEMORY[0x1E4F143A8];
  v759[1] = 3221225472;
  v760 = ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke;
  v761 = &__block_descriptor_48_e9_v16__0_v8l;
  v762 = v704;
  v763 = a2;
  v696 = v759;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v804 = 0u;
  memset(v805, 0, 24);
  long long v803 = 0u;
  long long v801 = 0u;
  memset(v802, 0, sizeof(v802));
  long long v800 = 0u;
  v805[3] = a2;
  LODWORD(v821) = 0;
  uint64_t v64 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v64)
  {
    unint64_t v65 = 0;
    do
    {
      LODWORD(v805[2]) = v65;
      long long v66 = *(_OWORD *)(v64 + 16 * v65);
      uint64_t v67 = *(void *)(v64 + 16 * v65 + 8);
      if (v67) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
      }
      float v68 = (std::__shared_weak_count *)*((void *)&v802[0] + 1);
      v802[0] = v66;
      if (v68) {
        nitro::nitro_function::nitro_function(v68);
      }
      uint64_t v69 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v65, &v821);
      if ((char *)v69[6] - (char *)v69[5] == 4)
      {
        HIDWORD(v805[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v805[2], &v805[2])[5];
        uint64_t v70 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v816, SHIDWORD(v805[2]), (_DWORD *)&v805[2] + 1);
        if ((char *)v70[6] - (char *)v70[5] == 4)
        {
          uint64_t v71 = *((void *)a2 + 4);
          long long v72 = *(_OWORD *)(v71 + 16 * SHIDWORD(v805[2]));
          uint64_t v73 = *(void *)(v71 + 16 * SHIDWORD(v805[2]) + 8);
          if (v73) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
          }
          long long v74 = (std::__shared_weak_count *)*((void *)&v802[1] + 1);
          v802[1] = v72;
          if (v74) {
            nitro::nitro_function::nitro_function(v74);
          }
          uint64_t v75 = *(void *)&v802[0];
          uint64_t v76 = *(void **)(*(void *)&v802[0] + 64);
          if (v76
          {
            uint64_t v77 = *(void *)(v75 + 72);
            if (v77) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v77 = 0;
          }
          long long v78 = (std::__shared_weak_count *)*((void *)&v800 + 1);
          *(void *)&long long v800 = v76;
          *((void *)&v800 + 1) = v77;
          if (v78) {
            nitro::nitro_function::nitro_function(v78);
          }
          uint64_t v79 = *(void *)&v802[1];
          char v80 = *(void **)(*(void *)&v802[1] + 64);
          if (v80
          {
            uint64_t v81 = *(void *)(v79 + 72);
            if (v81) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v81 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v81 = 0;
          }
          char v82 = (std::__shared_weak_count *)*((void *)&v801 + 1);
          *(void *)&long long v801 = v80;
          *((void *)&v801 + 1) = v81;
          if (v82)
          {
            nitro::nitro_function::nitro_function(v82);
            char v80 = (void *)v801;
          }
          if ((void)v800 && v80) {
            v760((uint64_t)v696, (uint64_t)&v800);
          }
        }
      }
      LODWORD(v821) = ++v65;
      uint64_t v64 = *((void *)a2 + 4);
    }
    while (v65 < (*((void *)a2 + 5) - v64) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  int v84 = (_DWORD *)*((void *)&v803 + 1);
  uint64_t v83 = (_DWORD *)v803;
  if ((void)v803 != *((void *)&v803 + 1))
  {
    int v85 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v85 + *v83++);
      --v85;
    }
    while (v83 != v84);
  }
  long long v86 = (void *)*((void *)&v804 + 1);
  uint64_t v87 = v805[0];
  if (*((void **)&v804 + 1) != v805[0])
  {
    int v88 = 0;
    do
    {
      int v89 = *(_DWORD *)v86;
      LODWORD(p_src) = v88 + *(_DWORD *)v86;
      LODWORD(v821) = v89;
      *((void *)&v821 + 1) = v86[1];
      uint64_t v90 = v86[2];
      *(void *)&long long v822 = v90;
      if (v90) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v822 + 1) = 0;
      *(void *)v823 = 0;
      *(void *)&v823[8] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, v86[3], v86[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86[4] - v86[3]) >> 3));
      *(void *)&v823[16] = 0;
      *(void *)&v823[24] = 0;
      v824 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v86[6], v86[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86[7] - v86[6]) >> 3));
      memset(&v777, 0, sizeof(v777));
      v770 = &v777;
      LOBYTE(v771) = 0;
      v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
      v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
      v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&p_src, (uint64_t *)&v777);
      v770 = &v777;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
      v770 = (std::string *)&v823[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
      v770 = (std::string *)((char *)&v822 + 8);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
      if ((void)v822) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
      }
      ++v88;
      v86 += 9;
    }
    while (v86 != v87);
  }
  *(void *)&long long v821 = (char *)&v804 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if ((void)v803)
  {
    *((void *)&v803 + 1) = v803;
    operator delete((void *)v803);
  }
  if (*((void *)&v802[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[1] + 1));
  }
  if (*((void *)&v802[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[0] + 1));
  }
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  v691 = (uint64_t **)((char *)a2 + 184);
  v695 = (char *)a2 + 56;
  v681 = (char *)a2 + 96;
  uint64_t v91 = *((void *)a2 + 4);
  uint64_t v92 = *((void *)a2 + 5);
  do
  {
    v795 = 0;
    if ((unint64_t)(v92 - v91) < 0x51) {
      break;
    }
    char v93 = 0;
    std::string::size_type v94 = 0;
    unint64_t v95 = 5;
    do
    {
      __src.__r_.__value_.__r.__words[0] = v94;
      v791.__r_.__value_.__r.__words[0] = v94 + 1;
      v790.__r_.__value_.__r.__words[0] = v94 + 2;
      v705.__r_.__value_.__r.__words[0] = v94 + 3;
      unint64_t v793 = v94 + 4;
      *(void *)v788 = v95;
      uint64_t v96 = *(void *)(v91 + 16 * v94);
      int64_t v97 = *(const void **)(v96 + 64);
      if (v97)
      {
        if (v98)
        {
          char v99 = v98;
          int64_t v100 = *(std::__shared_weak_count **)(v96 + 72);
          if (v100) {
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((Espresso::ANECompilerEngine::context *)v98[1] == v704
            && *(_DWORD *)((*(uint64_t (**)(void *))(*v98 + 320))(v98) + 20) == 5
            && *(_DWORD *)(*(uint64_t (**)(void *))(*v99 + 320))(v99) == 1
            && *(_DWORD *)((*(uint64_t (**)(void *))(*v99 + 320))(v99) + 4) == 1)
          {
            *(void *)&long long v821 = &__src;
            *(void *)&long long v821 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)&v821)[3];
            char v101 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, (void *)v821, (long long **)&v821);
            long long v102 = *(_OWORD *)(v101 + 72);
            long long v800 = *(_OWORD *)(v101 + 56);
            long long v801 = v102;
            long long v103 = (const void *)*((void *)v101 + 12);
            *(void *)&v802[0] = *((void *)v101 + 11);
            memset((char *)v802 + 8, 0, 24);
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v802 + 1, v103, *((void *)v101 + 13), (uint64_t)(*((void *)v101 + 13) - (void)v103) >> 2);
            uint64_t v104 = (*(uint64_t (**)(void *))(*v99 + 320))(v99);
            if (*(_DWORD *)(v104 + 8) == v800)
            {
              uint64_t v105 = (*(uint64_t (**)(void *))(*v99 + 320))(v99);
              if (*(_DWORD *)(v105 + 12) == DWORD1(v800))
              {
                uint64_t v106 = (*(uint64_t (**)(void *))(*v99 + 320))(v99);
                if (*(_DWORD *)(v106 + 16) == DWORD2(v800))
                {
                  int v697 = *(_DWORD *)((*(uint64_t (**)(void *))(*v99 + 320))(v99) + 8);
                  uint64_t v107 = (*(uint64_t (**)(void *))(*v99 + 320))(v99);
                  uint64_t v108 = *(void *)(*((void *)a2 + 4) + 16 * v791.__r_.__value_.__r.__words[0]);
                  uint64_t v109 = *(const void **)(v108 + 64);
                  if (v109)
                  {
                    int v110 = *(_DWORD *)(v107 + 12);
                    if (v111)
                    {
                      long long v112 = v111;
                      uint64_t v113 = *(std::__shared_weak_count **)(v108 + 72);
                      if (v113) {
                        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      if ((Espresso::ANECompilerEngine::context *)v111[1] == v704
                        && *(_DWORD *)(*(uint64_t (**)(uint64_t *))(*v111 + 384))(v111) == 1
                        && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112) + 4) == 1
                        && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112) + 8) == v697
                        && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112) + 12) == 1
                        && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112) + 16) == 1)
                      {
                        uint64_t v114 = *(void *)(*((void *)a2 + 4) + 16 * v790.__r_.__value_.__r.__words[0]);
                        std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v821, *(void **)(v114 + 64), *(void *)(v114 + 72));
                        if ((void)v821)
                        {
                          if (*(Espresso::ANECompilerEngine::context **)(v821 + 8) == v704)
                          {
                            uint64_t v667 = v821;
                            if (*(_DWORD *)(*(uint64_t (**)(void))(*(void *)v821 + 320))() == 1
                              && *(float *)((*(uint64_t (**)(uint64_t))(*(void *)v667 + 320))(v667) + 8) == 1.0)
                            {
                              v663 = v113;
                              if (*(float *)((*(uint64_t (**)(uint64_t))(*(void *)v667 + 320))(v667) + 12) == 0.0
                                && !*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)v667 + 320))(v667) + 4))
                              {
                                uint64_t v116 = *(void *)(*((void *)a2 + 4) + 16 * v705.__r_.__value_.__r.__words[0]);
                                std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_load_constant_kernel,Espresso::base_kernel>(__p, *(void **)(v116 + 64), *(void *)(v116 + 72));
                                if (*(void *)__p)
                                {
                                  unint64_t v117 = *(uint64_t **)__p;
                                  if (*(Espresso::ANECompilerEngine::context **)(*(void *)__p + 8) == v704
                                    && *(_DWORD *)(*(uint64_t (**)(void))(**(void **)__p + 384))(*(void *)__p) == 1
                                    && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117) + 4) == 1
                                    && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117) + 8) == v697
                                    && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117) + 12) == 1
                                    && *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117) + 16) == 1)
                                  {
                                    uint64_t v118 = *(void *)(*((void *)a2 + 4) + 16 * v793);
                                    std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_elementwise_kernel,Espresso::base_kernel>(&v777, *(void **)(v118 + 64), *(void *)(v118 + 72));
                                    std::string::size_type v668 = v777.__r_.__value_.__r.__words[0];
                                    if (v777.__r_.__value_.__r.__words[0]
                                      && *(Espresso::ANECompilerEngine::context **)(v777.__r_.__value_.__r.__words[0] + 8) == v704
                                      && !*(_DWORD *)(*(uint64_t (**)(std::string::size_type))(*(void *)v777.__r_.__value_.__l.__data_ + 320))(v777.__r_.__value_.__r.__words[0])
                                      && *(float *)((*(uint64_t (**)(std::string::size_type))(*(void *)v668 + 320))(v668)
                                                  + 8) == 1.0
                                      && *(float *)((*(uint64_t (**)(std::string::size_type))(*(void *)v668 + 320))(v668)
                                                  + 12) == 0.0
                                      && !*(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(void *)v668 + 320))(v668)
                                                    + 4))
                                    {
                                      uint64_t v119 = *(void *)(*((void *)a2 + 4) + 16 * *(void *)v788);
                                      std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_reshape_kernel,Espresso::base_kernel>(&v770, *(void **)(v119 + 64), *(void *)(v119 + 72));
                                      p_std::string::pointer data = (void **)&v770->__r_.__value_.__l.__data_;
                                      if (v770)
                                      {
                                        if ((Espresso::ANECompilerEngine::context *)v770->__r_.__value_.__l.__size_ == v704
                                          && *(_DWORD *)((*(uint64_t (**)(std::string *))(v770->__r_.__value_.__r.__words[0]
                                                                                                  + 320))(v770)
                                                       + 20) == 3
                                          && *(_DWORD *)(*((uint64_t (**)(void **))*p_data + 40))(p_data) == v697
                                          && *(_DWORD *)((*((uint64_t (**)(void **))*p_data + 40))(p_data) + 4) == v110
                                          && *(_DWORD *)((*((uint64_t (**)(void **))*p_data + 40))(p_data) + 8) == 1)
                                        {
                                          p_src = &__src;
                                          unint64_t v120 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                          if (v120[4] - v120[3] == 24)
                                          {
                                            p_src = &v790;
                                            uint64_t v121 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                            if (v121[4] - v121[3] == 24)
                                            {
                                              p_src = &v793;
                                              int64_t v122 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, &v793, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                              if (v122[4] - v122[3] == 24)
                                              {
                                                p_src = &v791;
                                                std::string v123 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v791, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                if (v123[4] - v123[3] == 24)
                                                {
                                                  p_src = &v705;
                                                  uint64_t v124 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v705, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                  if (v124[4] - v124[3] == 24)
                                                  {
                                                    p_src = v788;
                                                    int v125 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)v788, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                    if (v125[4] - v125[3] == 24)
                                                    {
                                                      p_src = &__src;
                                                      unint64_t v126 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                      if (v126[4] - v126[3] == 24)
                                                      {
                                                        p_src = &v790;
                                                        uint64_t v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                        if (v127[4] - v127[3] == 48)
                                                        {
                                                          p_src = &v793;
                                                          long long v128 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, &v793, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                          if (v128[4] - v128[3] == 48)
                                                          {
                                                            p_src = &v791;
                                                            uint64_t v129 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v791, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                            if (v129[4] == v129[3])
                                                            {
                                                              p_src = &v705;
                                                              uint64_t v130 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v705, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                              if (v130[4] == v130[3])
                                                              {
                                                                p_src = v788;
                                                                uint64_t v131 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)v788, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                if (v131[4] - v131[3] == 24)
                                                                {
                                                                  p_src = &v790;
                                                                  v670 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src)[3];
                                                                  p_src = &__src;
                                                                  uint64_t v132 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&__src, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                  if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v670, (unsigned __int8 *)v132[3]))
                                                                  {
                                                                    p_src = &v790;
                                                                    uint64_t v671 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src)[3];
                                                                    p_src = &v791;
                                                                    unint64_t v133 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v791, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                    if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v671 + 24), (unsigned __int8 *)v133[3]))
                                                                    {
                                                                      p_src = &v793;
                                                                      v672 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, &v793, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src)[3];
                                                                      p_src = &v790;
                                                                      uint64_t v134 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                      if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v672, (unsigned __int8 *)v134[3]))
                                                                      {
                                                                        p_src = &v793;
                                                                        uint64_t v673 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, &v793, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src)[3];
                                                                        p_src = &v705;
                                                                        long long v135 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v705, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                        if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v673 + 24), (unsigned __int8 *)v135[3]))
                                                                        {
                                                                          p_src = v788;
                                                                          v674 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)v788, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src)[3];
                                                                          p_src = &v793;
                                                                          uint64_t v136 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, &v793, (uint64_t)&std::piecewise_construct, (uint64_t **)&p_src);
                                                                          if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v674, (unsigned __int8 *)v136[3]))
                                                                          {
                                                                            Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&p_src, v112 + 43);
                                                                            v659 = p_src;
                                                                            if (v809) {
                                                                              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v809);
                                                                            }
                                                                            if (v659)
                                                                            {
                                                                              Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&p_src, v117 + 43);
                                                                              v658 = p_src;
                                                                              if (v809) {
                                                                                nitro::nitro_function::nitro_function((std::__shared_weak_count *)v809);
                                                                              }
                                                                              if (v658)
                                                                              {
                                                                                *(_DWORD *)(*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112) = v697;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112)
                                                                                          + 4) = 1;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112)
                                                                                          + 8) = 1;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v112 + 384))(v112)
                                                                                          + 20) = 1;
                                                                                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&p_src, v112 + 43);
                                                                                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v764, v697, 1, 1, 1);
                                                                                v675 = (Espresso::net *)v764;
                                                                                uint64_t v137 = *(int *)(v764 + 8);
                                                                                for (uint64_t i = 12; i != 24; i += 4)
                                                                                  v137 *= *(int *)(v764 + i);
                                                                                memcpy(*(void **)(v764 + 24), *((const void **)p_src + 3), 4 * v137);
                                                                                uint64_t v139 = (std::__shared_weak_count *)v765;
                                                                                p_p_src = v675;
                                                                                uint64_t v741 = v765;
                                                                                if (v765) {
                                                                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v765 + 8), 1uLL, memory_order_relaxed);
                                                                                }
                                                                                Espresso::generic_load_constant_kernel::set_constant_blob(v112, (uint64_t)&p_p_src);
                                                                                if (v139) {
                                                                                  nitro::nitro_function::nitro_function(v139);
                                                                                }
                                                                                *(_DWORD *)(*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117) = v697;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117)
                                                                                          + 4) = 1;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117)
                                                                                          + 8) = 1;
                                                                                *(_DWORD *)((*(uint64_t (**)(uint64_t *))(*v117 + 384))(v117)
                                                                                          + 20) = 1;
                                                                                Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v753, v117 + 43);
                                                                                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v734, v697, 1, 1, 1);
                                                                                v676 = (Espresso::net **)v734;
                                                                                uint64_t v140 = *(int *)(v734 + 8);
                                                                                for (uint64_t j = 12; j != 24; j += 4)
                                                                                  v140 *= *(int *)(v734 + j);
                                                                                memcpy(*(void **)(v734 + 24), *(const void **)(v753 + 24), 4 * v140);
                                                                                uint64_t v142 = (std::__shared_weak_count *)v735;
                                                                                uint64_t v728 = (uint64_t)v676;
                                                                                uint64_t v729 = v735;
                                                                                if (v735) {
                                                                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v735 + 8), 1uLL, memory_order_relaxed);
                                                                                }
                                                                                Espresso::generic_load_constant_kernel::set_constant_blob(v117, (uint64_t)&v728);
                                                                                if (v142) {
                                                                                  nitro::nitro_function::nitro_function(v142);
                                                                                }
                                                                                v723[0] = (uint64_t *)&v791;
                                                                                v723[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v791, (uint64_t)&std::piecewise_construct, v723)
                                                                                          + 3);
                                                                                long long v143 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, v723[0], (long long **)v723);
                                                                                *((_DWORD *)v143 + 14) = v697;
                                                                                *((_DWORD *)v143 + 15) = 1;
                                                                                *(void *)&long long v144 = 0x100000001;
                                                                                *((void *)&v144 + 1) = 0x100000001;
                                                                                *((_OWORD *)v143 + 4) = v144;
                                                                                *((void *)v143 + 10) = 0;
                                                                                *((void *)v143 + 11) = 0;
                                                                                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v143 + 96, 0, 0, 0);
                                                                                v723[0] = (uint64_t *)&v790;
                                                                                v723[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, v723)
                                                                                          + 3);
                                                                                long long v145 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, v723[0], (long long **)v723);
                                                                                *((_DWORD *)v145 + 14) = v697;
                                                                                *((_DWORD *)v145 + 15) = v110;
                                                                                *((_OWORD *)v145 + 4) = xmmword_192DCA620;
                                                                                *((void *)v145 + 10) = 0;
                                                                                *((void *)v145 + 11) = 0;
                                                                                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v145 + 96, 0, 0, 0);
                                                                                v723[0] = (uint64_t *)&v705;
                                                                                v723[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v705, (uint64_t)&std::piecewise_construct, v723)
                                                                                          + 3);
                                                                                uint64_t v146 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, v723[0], (long long **)v723);
                                                                                *((_DWORD *)v146 + 14) = v697;
                                                                                *((_DWORD *)v146 + 15) = 1;
                                                                                *(void *)&long long v147 = 0x100000001;
                                                                                *((void *)&v147 + 1) = 0x100000001;
                                                                                *((_OWORD *)v146 + 4) = v147;
                                                                                *((void *)v146 + 10) = 0;
                                                                                *((void *)v146 + 11) = 0;
                                                                                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v146 + 96, 0, 0, 0);
                                                                                v723[0] = (uint64_t *)&v793;
                                                                                v723[0] = *((uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, &v793, (uint64_t)&std::piecewise_construct, v723)
                                                                                          + 3);
                                                                                uint64_t v148 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, v723[0], (long long **)v723);
                                                                                *((_DWORD *)v148 + 14) = v697;
                                                                                *((_DWORD *)v148 + 15) = v110;
                                                                                *((_OWORD *)v148 + 4) = xmmword_192DCA620;
                                                                                *((void *)v148 + 10) = 0;
                                                                                *((void *)v148 + 11) = 0;
                                                                                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v148 + 96, 0, 0, 0);
                                                                                v723[0] = (uint64_t *)&v795;
                                                                                long long v149 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v795, (uint64_t)&std::piecewise_construct, v723)[3];
                                                                                v723[0] = (uint64_t *)&v790;
                                                                                uint64_t v150 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v790, (uint64_t)&std::piecewise_construct, v723);
                                                                                std::string::operator=((std::string *)v150[3], v149);
                                                                                v723[0] = (uint64_t *)v788;
                                                                                char v151 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)v788, (uint64_t)&std::piecewise_construct, v723);
                                                                                v723[0] = (uint64_t *)&v793;
                                                                                long long v152 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, &v793, (uint64_t)&std::piecewise_construct, v723);
                                                                                if (v152 != v151) {
                                                                                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v152 + 3), (std::string *)v151[3], (std::string *)v151[4], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v151[4] - v151[3]) >> 3));
                                                                                }
                                                                                Espresso::net::remove_layer(a2, v788[0]);
                                                                                Espresso::net::remove_layer(a2, (int)__src.__r_.__value_.__l.__data_);
                                                                                if (v142) {
                                                                                  nitro::nitro_function::nitro_function(v142);
                                                                                }
                                                                                if (v754) {
                                                                                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v754);
                                                                                }
                                                                                if (v139) {
                                                                                  nitro::nitro_function::nitro_function(v139);
                                                                                }
                                                                                if (v809) {
                                                                                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v809);
                                                                                }
                                                                                char v93 = 1;
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      if (v771) {
                                        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v771);
                                      }
                                    }
                                    if (v777.__r_.__value_.__l.__size_) {
                                      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v777.__r_.__value_.__l.__size_);
                                    }
                                  }
                                }
                                if (*(void *)&__p[8]) {
                                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
                                }
                              }
                              uint64_t v113 = v663;
                            }
                          }
                        }
                        if (*((void *)&v821 + 1)) {
                          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v821 + 1));
                        }
                      }
                      if (v113) {
                        nitro::nitro_function::nitro_function(v113);
                      }
                    }
                  }
                }
              }
            }
            if (*((void *)&v802[0] + 1))
            {
              *(void *)&v802[1] = *((void *)&v802[0] + 1);
              operator delete(*((void **)&v802[0] + 1));
            }
          }
          if (v100) {
            nitro::nitro_function::nitro_function(v100);
          }
        }
      }
      uint64_t v115 = v795;
      std::string::size_type v94 = (std::string::size_type)v795 + 1;
      v795 = (uint64_t *)((char *)v795 + 1);
      unint64_t v95 = (unint64_t)v115 + 6;
      uint64_t v91 = *((void *)a2 + 4);
      uint64_t v92 = *((void *)a2 + 5);
    }
    while (v95 < (v92 - v91) >> 4);
  }
  while ((v93 & 1) != 0);
  uint64_t v753 = MEMORY[0x1E4F143A8];
  uint64_t v754 = 3221225472;
  v755 = ___ZN8Espresso17ANECompilerEngine7context29decompose_layer_normalizationEPNS_3netEPS1__block_invoke_2;
  v756 = &__block_descriptor_48_e9_v16__0_v8l;
  v757 = v704;
  v758 = a2;
  unint64_t v153 = &v753;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v154 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v154)
  {
    unint64_t v155 = 0;
    do
    {
      DWORD2(v802[1]) = v155;
      long long v156 = *(_OWORD *)(v154 + 16 * v155);
      uint64_t v157 = *(void *)(v154 + 16 * v155 + 8);
      if (v157) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v158 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v156;
      if (v158)
      {
        nitro::nitro_function::nitro_function(v158);
        uint64_t v159 = v801;
      }
      else
      {
        uint64_t v159 = v156;
      }
      long long v160 = *(void **)(v159 + 64);
      if (v160
      {
        uint64_t v161 = *(void *)(v159 + 72);
        if (v161) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v161 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v161 = 0;
      }
      uint64_t v162 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v160;
      *((void *)&v800 + 1) = v161;
      if (v162)
      {
        nitro::nitro_function::nitro_function(v162);
        long long v160 = (void *)v800;
      }
      if (v160) {
        v755((uint64_t)v153, (int64x2_t *)&v800);
      }
      ++v155;
      uint64_t v154 = *((void *)a2 + 4);
    }
    while (v155 < (*((void *)a2 + 5) - v154) >> 4);
    unint64_t v163 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      v683 = v153;
      int v164 = 0;
      v165 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        uint64_t v166 = v165 - 4;
        int v167 = *((_DWORD *)v165 - 8) + v164;
        *((_DWORD *)v165 - 8) = v167;
        uint64_t v168 = *(v165 - 3);
        if (v168)
        {
          LODWORD(v821) = v167;
          *((void *)&v821 + 1) = v168;
          uint64_t v169 = *(v165 - 2);
          *(void *)&long long v822 = v169;
          if (v169) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v169 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v165 - 1), *v165, 0xAAAAAAAAAAAAAAABLL * ((*v165 - *(v165 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v165[2], v165[3], 0xAAAAAAAAAAAAAAABLL * ((v165[3] - v165[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          v770 = &v777;
          LOBYTE(v771) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          v770 = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)&v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)((char *)&v822 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v170 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v167);
          int v170 = -1;
        }
        v164 += v170;
        v165 += 9;
      }
      while (v166 + 9 != v163);
      unint64_t v153 = v683;
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  uint64_t v764 = MEMORY[0x1E4F143A8];
  uint64_t v765 = 3221225472;
  v766 = ___ZN8Espresso17ANECompilerEngine22tensor_zero_pad_kernel9decomposeEPNS_3netEPNS_16abstract_contextE_block_invoke;
  v767 = &__block_descriptor_48_e9_v16__0_v8l;
  v768 = v704;
  v769 = a2;
  unint64_t v171 = &v764;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v172 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v172)
  {
    unint64_t v173 = 0;
    do
    {
      DWORD2(v802[1]) = v173;
      long long v174 = *(_OWORD *)(v172 + 16 * v173);
      uint64_t v175 = *(void *)(v172 + 16 * v173 + 8);
      if (v175) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v176 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v174;
      if (v176)
      {
        nitro::nitro_function::nitro_function(v176);
        uint64_t v177 = v801;
      }
      else
      {
        uint64_t v177 = v174;
      }
      uint64_t v178 = *(void **)(v177 + 64);
      if (v178
      {
        uint64_t v179 = *(void *)(v177 + 72);
        if (v179) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v179 = 0;
      }
      uint64_t v180 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v178;
      *((void *)&v800 + 1) = v179;
      if (v180)
      {
        nitro::nitro_function::nitro_function(v180);
        uint64_t v178 = (void *)v800;
      }
      if (v178) {
        v766((uint64_t)v171, (int64x2_t *)&v800);
      }
      ++v173;
      uint64_t v172 = *((void *)a2 + 4);
    }
    while (v173 < (*((void *)a2 + 5) - v172) >> 4);
    long long v181 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      v684 = v171;
      int v182 = 0;
      long long v183 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        uint64_t v184 = v183 - 4;
        int v185 = *((_DWORD *)v183 - 8) + v182;
        *((_DWORD *)v183 - 8) = v185;
        uint64_t v186 = *(v183 - 3);
        if (v186)
        {
          LODWORD(v821) = v185;
          *((void *)&v821 + 1) = v186;
          uint64_t v187 = *(v183 - 2);
          *(void *)&long long v822 = v187;
          if (v187) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v187 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v183 - 1), *v183, 0xAAAAAAAAAAAAAAABLL * ((*v183 - *(v183 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v183[2], v183[3], 0xAAAAAAAAAAAAAAABLL * ((v183[3] - v183[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          v770 = &v777;
          LOBYTE(v771) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          v770 = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)&v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          v770 = (std::string *)((char *)&v822 + 8);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v770);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v188 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v185);
          int v188 = -1;
        }
        v182 += v188;
        v183 += 9;
      }
      while (v184 + 9 != v181);
      unint64_t v171 = v684;
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  *(void *)&long long v800 = MEMORY[0x1E4F143A8];
  *((void *)&v800 + 1) = 3221225472;
  *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context26transform_embedding_lookupEPNS_3netEPS1__block_invoke;
  *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  *(void *)&v802[0] = v704;
  *((void *)&v802[0] + 1) = a2;
  Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(a2, &v800);
  p_p_src = a2;
  uint64_t v734 = (uint64_t)v704;
  LOBYTE(v728) = 0;
  v770 = (std::string *)MEMORY[0x1E4F143A8];
  uint64_t v771 = 3321888768;
  v772 = ___ZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1__block_invoke;
  v773 = &__block_descriptor_56_ea8_32c104_ZTSKZN8Espresso17ANECompilerEngine7context40transform_reshape_like_to_static_reshapeEPNS_3netEPS1_E3__0_e9_v16__0_v8l;
  v774 = (unint64_t *)&v728;
  v775 = &p_p_src;
  v776 = (Espresso::net ***)&v734;
  uint64_t v189 = &v770;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v190 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v190)
  {
    unint64_t v191 = 0;
    do
    {
      DWORD2(v802[1]) = v191;
      long long v192 = *(_OWORD *)(v190 + 16 * v191);
      uint64_t v193 = *(void *)(v190 + 16 * v191 + 8);
      if (v193) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v193 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v194 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v192;
      if (v194)
      {
        nitro::nitro_function::nitro_function(v194);
        uint64_t v195 = v801;
      }
      else
      {
        uint64_t v195 = v192;
      }
      uint64_t v196 = *(void **)(v195 + 64);
      if (v196
      {
        uint64_t v197 = *(void *)(v195 + 72);
        if (v197) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v197 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v197 = 0;
      }
      v198 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v196;
      *((void *)&v800 + 1) = v197;
      if (v198)
      {
        nitro::nitro_function::nitro_function(v198);
        uint64_t v196 = (void *)v800;
      }
      if (v196) {
        v772((uint64_t)v189, (int64x2_t *)&v800);
      }
      ++v191;
      uint64_t v190 = *((void *)a2 + 4);
    }
    while (v191 < (*((void *)a2 + 5) - v190) >> 4);
    long long v199 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      v685 = v189;
      int v200 = 0;
      v201 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        long long v202 = v201 - 4;
        int v203 = *((_DWORD *)v201 - 8) + v200;
        *((_DWORD *)v201 - 8) = v203;
        uint64_t v204 = *(v201 - 3);
        if (v204)
        {
          LODWORD(v821) = v203;
          *((void *)&v821 + 1) = v204;
          uint64_t v205 = *(v201 - 2);
          *(void *)&long long v822 = v205;
          if (v205) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v205 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v201 - 1), *v201, 0xAAAAAAAAAAAAAAABLL * ((*v201 - *(v201 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v201[2], v201[3], 0xAAAAAAAAAAAAAAABLL * ((v201[3] - v201[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          p_src = &v777;
          LOBYTE(v809) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          p_src = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = &v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = (char *)&v822 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v206 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v203);
          int v206 = -1;
        }
        v200 += v206;
        v201 += 9;
      }
      while (v202 + 9 != v199);
      uint64_t v189 = v685;
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  if ((_BYTE)v728) {
    Espresso::net::_tag_inputs_and_outputs(p_p_src);
  }
  if ((***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10007
    && (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10006
    || *((unsigned char *)v704 + 123))
  {
    v777.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v777.__r_.__value_.__l.__size_ = 3221225472;
    v777.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke;
    v778 = &__block_descriptor_48_e9_v16__0_v8l;
    v779 = v704;
    v780 = a2;
    Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(a2, &v777);
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v680);
    v686 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    if ((Espresso::ANECompilerEngine::is_mix(v686, v208) & 1) == 0)
    {
      while (1)
      {
        Espresso::net::get_producers_of_blobs(a2, (uint64_t)&v800);
        memset(__p, 0, sizeof(__p));
        LODWORD(v815) = 1065353216;
        Espresso::net::get_consumers_of_blobs(a2, __p, (uint64_t)&v821);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
        p_src = 0;
        uint64_t v210 = *((void *)a2 + 4);
        uint64_t v209 = *((void *)a2 + 5);
        if (v209 != v210) {
          break;
        }
        char v212 = 1;
LABEL_573:
        std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v822);
        v277 = (void *)v821;
        *(void *)&long long v821 = 0;
        if (v277) {
          operator delete(v277);
        }
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v801);
        v278 = (void *)v800;
        *(void *)&long long v800 = 0;
        if (v278) {
          operator delete(v278);
        }
        if (v212) {
          goto LABEL_578;
        }
      }
      unint64_t v211 = 0;
      char v212 = 1;
      while (1)
      {
        uint64_t v213 = *(void *)(v210 + 16 * v211);
        unsigned int v214 = *(void **)(v213 + 64);
        if ((Espresso::ANECompilerEngine::context *)v214[1] != v704) {
          goto LABEL_421;
        }
        if (!v215) {
          goto LABEL_421;
        }
        long long v216 = v215;
        uint64_t v217 = *(std::__shared_weak_count **)(v213 + 72);
        if (v217) {
          atomic_fetch_add_explicit(&v217->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!*(_DWORD *)(*(uint64_t (**)(void *))(*v215 + 320))(v215)
          && (Espresso::ANECompilerEngine::context *)v216[1] == v704
          && !v216[50])
        {
          *(void *)std::string __p = &p_src;
          v218 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
          if (v218[4] - v218[3] == 48)
          {
            *(void *)std::string __p = &p_src;
            uint64_t v219 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
            *(void *)std::string __p = v219;
            v220 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v821, v219, (long long **)__p);
            if (*((void *)v220 + 6) - *((void *)v220 + 5) == 8) {
              break;
            }
          }
        }
        int v227 = 6;
LABEL_417:
        if (v217) {
          nitro::nitro_function::nitro_function(v217);
        }
        if (v227 != 6) {
          goto LABEL_573;
        }
        unint64_t v211 = (unint64_t)p_src;
        uint64_t v210 = *((void *)a2 + 4);
        uint64_t v209 = *((void *)a2 + 5);
LABEL_421:
        p_src = (void *)++v211;
        if (v211 >= (v209 - v210) >> 4) {
          goto LABEL_573;
        }
      }
      p_p_src = 0;
      *(void *)std::string __p = v219;
      p_p_src = (Espresso::net *)**((void **)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v821, v219, (long long **)__p)+ 5);
      uint64_t v734 = 0;
      *(void *)std::string __p = &p_src;
      *(void *)std::string __p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
      uint64_t v734 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v800, *(uint64_t *)__p, (uint64_t)&std::piecewise_construct, (long long **)__p)[5];
      uint64_t v728 = 0;
      *(void *)std::string __p = &p_src;
      *(void *)std::string __p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3]+ 24;
      uint64_t v222 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v800, *(uint64_t *)__p, (uint64_t)&std::piecewise_construct, (long long **)__p)[5];
      uint64_t v728 = v222;
      uint64_t v223 = *((void *)a2 + 4);
      uint64_t v224 = *(void *)(v223 + 16 * v734);
      v225 = *(const void **)(v224 + 64);
      if (v225
      {
        uint64_t v226 = *(void *)(v224 + 72);
        if (v226)
        {
          v698 = *(std::__shared_weak_count **)(v224 + 72);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v226 + 8), 1uLL, memory_order_relaxed);
          uint64_t v223 = *((void *)a2 + 4);
          goto LABEL_425;
        }
      }
      else
      {
        v664 = 0;
      }
      v698 = 0;
LABEL_425:
      uint64_t v228 = *(void *)(v223 + 16 * v222);
      v229 = *(const void **)(v228 + 64);
      if (v229)
      {
        if (v230)
        {
          uint64_t v231 = *(void *)(v228 + 72);
          if (v231)
          {
            v677 = *(std::__shared_weak_count **)(v228 + 72);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v231 + 8), 1uLL, memory_order_relaxed);
            uint64_t v223 = *((void *)a2 + 4);
            goto LABEL_431;
          }
        }
      }
      else
      {
        long long v230 = 0;
      }
      v677 = 0;
LABEL_431:
      uint64_t v232 = *(void *)(v223 + 16 * (void)p_p_src);
      v233 = *(std::__shared_weak_count **)(v232 + 64);
      if (v233)
      {
        v234 = v230;
        uint64_t v235 = (char *)v233;
        if (v233)
        {
          v233 = *(std::__shared_weak_count **)(v232 + 72);
          if (v233) {
            atomic_fetch_add_explicit(&v233->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        long long v230 = v234;
      }
      else
      {
        uint64_t v235 = 0;
      }
      unint64_t v236 = (unint64_t)v664;
      if (v664 && (Espresso::ANECompilerEngine::context *)v664[1] != v704
        || v230 && (Espresso::ANECompilerEngine::context *)v230[1] != v704
        || v235 && *((Espresso::ANECompilerEngine::context **)v235 + 1) != v704)
      {
        goto LABEL_480;
      }
      v660 = v233;
      if (v664)
      {
        v237 = v230;
        if (*(_DWORD *)(*(uint64_t (**)(void *))(*v664 + 320))(v664) == 3)
        {
          uint64_t v238 = v698;
        }
        else
        {
          uint64_t v238 = v698;
          if (v698)
          {
            nitro::nitro_function::nitro_function(v698);
            unint64_t v236 = 0;
            uint64_t v238 = 0;
          }
          else
          {
            unint64_t v236 = 0;
          }
        }
        long long v230 = v237;
      }
      else
      {
        uint64_t v238 = v698;
      }
      v699 = v238;
      if (v230)
      {
        int v239 = v230;
        if (*(_DWORD *)(*(uint64_t (**)(void *))(*v230 + 320))(v230) != 3)
        {
          if (v677) {
            nitro::nitro_function::nitro_function(v677);
          }
          int v239 = 0;
          v677 = 0;
        }
        uint64_t v238 = v699;
      }
      else
      {
        int v239 = 0;
      }
      if (v235)
      {
        if (*(_DWORD *)(*(uint64_t (**)(char *))(*(void *)v235 + 320))(v235) != 3)
        {
          if (v660) {
            nitro::nitro_function::nitro_function(v660);
          }
          uint64_t v235 = 0;
          v660 = 0;
        }
        uint64_t v238 = v699;
      }
      if (v236 && *(void *)(v236 + 400))
      {
        if (v238)
        {
          nitro::nitro_function::nitro_function(v238);
          unint64_t v236 = 0;
          uint64_t v238 = 0;
        }
        else
        {
          unint64_t v236 = 0;
        }
      }
      v698 = v238;
      if (v239 && v239[50])
      {
        if (v677) {
          nitro::nitro_function::nitro_function(v677);
        }
        int v239 = 0;
        v677 = 0;
      }
      v233 = v660;
      if (v235 && *((void *)v235 + 50))
      {
        if (v660)
        {
          nitro::nitro_function::nitro_function(v660);
          uint64_t v235 = 0;
          v233 = 0;
        }
        else
        {
          uint64_t v235 = 0;
        }
      }
      if (v216[50])
      {
LABEL_480:
        int v227 = 6;
        if (!v233)
        {
LABEL_482:
          if (v677) {
            nitro::nitro_function::nitro_function(v677);
          }
          if (v698) {
            nitro::nitro_function::nitro_function(v698);
          }
          goto LABEL_417;
        }
LABEL_481:
        nitro::nitro_function::nitro_function(v233);
        goto LABEL_482;
      }
      if (v235)
      {
        v661 = v233;
        *(void *)std::string __p = &p_src;
        *(void *)std::string __p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        v240 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v821, *(unsigned __int8 **)__p, (long long **)__p);
        if (*((void *)v240 + 6) - *((void *)v240 + 5) < 9uLL)
        {
          v233 = v661;
        }
        else
        {
          v233 = v661;
          if (v661)
          {
            nitro::nitro_function::nitro_function(v661);
            uint64_t v235 = 0;
            v233 = 0;
          }
          else
          {
            uint64_t v235 = 0;
          }
        }
      }
      v662 = v233;
      if (v236)
      {
        *(void *)std::string __p = &v734;
        *(void *)std::string __p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v734, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        int v241 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v821, *(unsigned __int8 **)__p, (long long **)__p);
        if (*((void *)v241 + 6) - *((void *)v241 + 5) >= 9uLL)
        {
          if (v698) {
            nitro::nitro_function::nitro_function(v698);
          }
          unint64_t v236 = 0;
          v698 = 0;
        }
      }
      if (v239)
      {
        *(void *)std::string __p = &v728;
        *(void *)std::string __p = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&v728, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        long long v242 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v821, *(unsigned __int8 **)__p, (long long **)__p);
        if (*((void *)v242 + 6) - *((void *)v242 + 5) < 9uLL)
        {
          uint64_t v243 = (uint64_t)v239;
        }
        else
        {
          uint64_t v243 = (uint64_t)v677;
          if (v677)
          {
            nitro::nitro_function::nitro_function(v677);
            uint64_t v243 = 0;
          }
          v677 = 0;
        }
      }
      else
      {
        uint64_t v243 = 0;
      }
      float v244 = 1.0;
      float v245 = 1.0;
      uint64_t v665 = v243;
      if (v236)
      {
        float v245 = *(float *)((*(uint64_t (**)(unint64_t))(*(void *)v236 + 320))(v236) + 8);
        uint64_t v243 = v665;
      }
      if (v243)
      {
        float v244 = *(float *)((*(uint64_t (**)(uint64_t))(*(void *)v243 + 320))(v243) + 8);
        uint64_t v243 = v665;
      }
      if (v235)
      {
        uint64_t v243 = (*(uint64_t (**)(char *))(*(void *)v235 + 320))(v235);
        float v246 = *(float *)(v243 + 8);
      }
      else
      {
        float v246 = 1.0;
        if (!(v236 | v243))
        {
          int v227 = 6;
          goto LABEL_570;
        }
      }
      float v247 = v245 / v244;
      if (fabsf((float)(v244 * v246) + -1.0) > 0.00000011921 || fabsf(v247 + -1.0) > 0.00000011921)
      {
        uint64_t v243 = (*(uint64_t (**)(void *))(*v216 + 344))(v216);
        *(unsigned char *)(v243 + 53) = 1;
        *(float *)(v243 + 56) = v247;
        *(float *)(v243 + 60) = v244 * v246;
      }
      long long v248 = Espresso::espresso_os_log_subsystem((Espresso *)v243, v221);
      if (os_log_type_enabled(v248, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 134218496;
        *(double *)&__p[4] = v245;
        *(_WORD *)&unsigned char __p[12] = 2048;
        *(double *)&__p[14] = v244;
        *(_WORD *)&__p[22] = 2048;
        *(double *)&__p[24] = v246;
        _os_log_debug_impl(&dword_1920CB000, v248, OS_LOG_TYPE_DEBUG, "handle_photon_quantization: l_scale=%e r_scale=%e out_scale=%e", __p, 0x20u);
      }

      if (v236)
      {
        *(void *)std::string __p = &v734;
        unint64_t v249 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v734, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        *(void *)std::string __p = &p_src;
        uint64_t v250 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        std::string::operator=((std::string *)v250[3], v249);
      }
      if (v665)
      {
        *(void *)std::string __p = &v728;
        char v251 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&v728, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        *(void *)std::string __p = &p_src;
        uint64_t v252 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        std::string::operator=((std::string *)(v252[3] + 24), v251);
      }
      if (v235)
      {
        *(void *)std::string __p = &p_p_src;
        v253 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&p_p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        *(void *)std::string __p = &p_src;
        std::string v254 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, (unint64_t *)&p_src, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        if (v254 != v253) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v254 + 3), (std::string *)v253[3], (std::string *)v253[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253[4] - v253[3]) >> 3));
        }
        memset(__p, 0, 24);
        int v255 = operator new(8uLL);
        *int v255 = p_p_src;
        std::string v256 = v255 + 1;
        *(void *)&__p[16] = v255 + 1;
        *(void *)std::string __p = v255;
        *(void *)&__p[8] = v255 + 1;
        uint64_t v235 = (char *)v255;
      }
      else
      {
        std::string v256 = 0;
        memset(__p, 0, 24);
      }
      if (v236)
      {
        uint64_t v257 = (char *)v256 - v235;
        uint64_t v258 = ((char *)v256 - v235) >> 3;
        unint64_t v259 = v258 + 1;
        if ((unint64_t)(v258 + 1) >> 61) {
          goto LABEL_1383;
        }
        if (v257 >> 2 > v259) {
          unint64_t v259 = v257 >> 2;
        }
        if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v260 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v260 = v259;
        }
        if (v260) {
          unint64_t v260 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v260);
        }
        else {
          uint64_t v261 = 0;
        }
        v262 = (uint64_t *)(v260 + 8 * v258);
        uint64_t *v262 = v734;
        v263 = v262 + 1;
        while (v256 != (uint64_t *)v235)
        {
          uint64_t v264 = *--v256;
          *--v262 = v264;
        }
        std::string v256 = (uint64_t *)(v260 + 8 * v261);
        *(void *)std::string __p = v262;
        *(void *)&__p[16] = v256;
        if (v235) {
          operator delete(v235);
        }
        *(void *)&__p[8] = v263;
      }
      else
      {
        v262 = (uint64_t *)v235;
        v263 = v256;
      }
      if (v665)
      {
        if (v263 >= v256)
        {
          uint64_t v266 = v263 - v262;
          unint64_t v267 = v266 + 1;
          if ((unint64_t)(v266 + 1) >> 61) {
LABEL_1383:
          }
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (((char *)v256 - (char *)v262) >> 2 > v267) {
            unint64_t v267 = ((char *)v256 - (char *)v262) >> 2;
          }
          if ((unint64_t)((char *)v256 - (char *)v262) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v268 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v268 = v267;
          }
          if (v268) {
            unint64_t v268 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v268);
          }
          else {
            uint64_t v269 = 0;
          }
          v270 = (uint64_t *)(v268 + 8 * v266);
          uint64_t *v270 = v728;
          v265 = v270 + 1;
          while (v263 != v262)
          {
            uint64_t v271 = *--v263;
            *--v270 = v271;
          }
          *(void *)std::string __p = v270;
          *(void *)&__p[8] = v265;
          *(void *)&__p[16] = v268 + 8 * v269;
          if (v262)
          {
            operator delete(v262);
            v262 = *(uint64_t **)__p;
          }
          else
          {
            v262 = v270;
          }
        }
        else
        {
          uint64_t *v263 = v728;
          v265 = v263 + 1;
        }
        *(void *)&__p[8] = v265;
        v263 = v265;
      }
      unint64_t v272 = 126 - 2 * __clz(v263 - v262);
      if (v263 == v262) {
        uint64_t v273 = 0;
      }
      else {
        uint64_t v273 = v272;
      }
      std::__introsort<std::_ClassicAlgPolicy,Espresso::ANECompilerEngine::context::handle_photon_quantization(Espresso::net *,Espresso::abstract_context *)::$_0 &,unsigned long *,false>(v262, v263, v273, 1);
      v274 = *(void **)__p;
      v275 = *(int **)&__p[8];
      for (k = *(int **)__p; k != v275; k += 2)
        Espresso::net::remove_layer(a2, *k);
      if (v274) {
        operator delete(v274);
      }
      char v212 = 0;
      int v227 = 4;
LABEL_570:
      v233 = v662;
      if (!v662) {
        goto LABEL_482;
      }
      goto LABEL_481;
    }
LABEL_578:
    p_src = (void *)MEMORY[0x1E4F143A8];
    uint64_t v809 = 3221225472;
    v810 = (void (*)(void **, long long *))___ZN8Espresso17ANECompilerEngine7context26handle_photon_quantizationEPNS_3netEPNS_16abstract_contextE_block_invoke_392;
    v811 = (void **)&__block_descriptor_48_e9_v16__0_v8l;
    v812 = v704;
    v813 = a2;
    v700 = &p_src;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    long long v804 = 0u;
    memset(v805, 0, 24);
    long long v803 = 0u;
    long long v801 = 0u;
    memset(v802, 0, sizeof(v802));
    long long v800 = 0u;
    v805[3] = a2;
    LODWORD(v821) = 0;
    uint64_t v279 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v279)
    {
      unint64_t v280 = 0;
      do
      {
        LODWORD(v805[2]) = v280;
        long long v281 = *(_OWORD *)(v279 + 16 * v280);
        uint64_t v282 = *(void *)(v279 + 16 * v280 + 8);
        if (v282) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v282 + 8), 1uLL, memory_order_relaxed);
        }
        v283 = (std::__shared_weak_count *)*((void *)&v802[0] + 1);
        v802[0] = v281;
        if (v283) {
          nitro::nitro_function::nitro_function(v283);
        }
        v284 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v280, &v821);
        if ((char *)v284[6] - (char *)v284[5] == 4)
        {
          HIDWORD(v805[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v805[2], &v805[2])[5];
          v285 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v816, SHIDWORD(v805[2]), (_DWORD *)&v805[2] + 1);
          if ((char *)v285[6] - (char *)v285[5] == 4)
          {
            uint64_t v286 = *((void *)a2 + 4);
            long long v287 = *(_OWORD *)(v286 + 16 * SHIDWORD(v805[2]));
            uint64_t v288 = *(void *)(v286 + 16 * SHIDWORD(v805[2]) + 8);
            if (v288) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v288 + 8), 1uLL, memory_order_relaxed);
            }
            v289 = (std::__shared_weak_count *)*((void *)&v802[1] + 1);
            v802[1] = v287;
            if (v289) {
              nitro::nitro_function::nitro_function(v289);
            }
            uint64_t v290 = *(void *)&v802[0];
            v291 = *(void **)(*(void *)&v802[0] + 64);
            if (v291
            {
              uint64_t v292 = *(void *)(v290 + 72);
              if (v292) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v292 + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v292 = 0;
            }
            v293 = (std::__shared_weak_count *)*((void *)&v800 + 1);
            *(void *)&long long v800 = v291;
            *((void *)&v800 + 1) = v292;
            if (v293) {
              nitro::nitro_function::nitro_function(v293);
            }
            uint64_t v294 = *(void *)&v802[1];
            v295 = *(void **)(*(void *)&v802[1] + 64);
            if (v295
            {
              uint64_t v296 = *(void *)(v294 + 72);
              if (v296) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v296 + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v296 = 0;
            }
            v297 = (std::__shared_weak_count *)*((void *)&v801 + 1);
            *(void *)&long long v801 = v295;
            *((void *)&v801 + 1) = v296;
            if (v297)
            {
              nitro::nitro_function::nitro_function(v297);
              v295 = (void *)v801;
            }
            if ((void)v800 && v295) {
              v810(v700, &v800);
            }
          }
        }
        LODWORD(v821) = ++v280;
        uint64_t v279 = *((void *)a2 + 4);
      }
      while (v280 < (*((void *)a2 + 5) - v279) >> 4);
    }
    std::__sort<std::__less<int,int> &,int *>();
    v299 = (_DWORD *)*((void *)&v803 + 1);
    v298 = (_DWORD *)v803;
    if ((void)v803 != *((void *)&v803 + 1))
    {
      int v300 = 0;
      do
      {
        Espresso::net::remove_layer(a2, v300 + *v298++);
        --v300;
      }
      while (v298 != v299);
    }
    v301 = (void *)*((void *)&v804 + 1);
    v302 = v805[0];
    if (*((void **)&v804 + 1) != v805[0])
    {
      int v303 = 0;
      do
      {
        int v304 = *(_DWORD *)v301;
        LODWORD(v728) = v303 + *(_DWORD *)v301;
        LODWORD(v821) = v304;
        *((void *)&v821 + 1) = v301[1];
        uint64_t v305 = v301[2];
        *(void *)&long long v822 = v305;
        if (v305) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v305 + 8), 1uLL, memory_order_relaxed);
        }
        *((void *)&v822 + 1) = 0;
        *(void *)v823 = 0;
        *(void *)&v823[8] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, v301[3], v301[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301[4] - v301[3]) >> 3));
        *(void *)&v823[16] = 0;
        *(void *)&v823[24] = 0;
        v824 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v301[6], v301[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301[7] - v301[6]) >> 3));
        p_p_src = 0;
        uint64_t v741 = 0;
        v742[0] = 0;
        uint64_t v734 = (uint64_t)&p_p_src;
        LOBYTE(v735) = 0;
        p_p_src = (Espresso::net *)operator new(0x48uLL);
        uint64_t v741 = (uint64_t)p_p_src;
        v742[0] = (char *)p_p_src + 72;
        uint64_t v741 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)v742, (uint64_t)&v821, (uint64_t)v825, (uint64_t)p_p_src);
        Espresso::net::insert_layers((uint64_t)a2, (int *)&v728, (uint64_t *)&p_p_src);
        uint64_t v734 = (uint64_t)&p_p_src;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v734);
        uint64_t v734 = (uint64_t)&v823[16];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v734);
        uint64_t v734 = (uint64_t)&v822 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v734);
        if ((void)v822) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
        }
        ++v303;
        v301 += 9;
      }
      while (v301 != v302);
    }
    *(void *)&long long v821 = (char *)&v804 + 8;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
    if ((void)v803)
    {
      *((void *)&v803 + 1) = v803;
      operator delete((void *)v803);
    }
    if (*((void *)&v802[1] + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[1] + 1));
    }
    if (*((void *)&v802[0] + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[0] + 1));
    }
    if (*((void *)&v801 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
    }
    if (*((void *)&v800 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
    if (*(void *)&__p[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
    }
  }
  if (Espresso::ANECompilerEngine::is_mix(v682, v207))
  {
    *(void *)&long long v800 = MEMORY[0x1E4F143A8];
    *((void *)&v800 + 1) = 3221225472;
    *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context21handle_elementwise_eqEPNS_3netEPNS_16abstract_contextE_block_invoke;
    *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(void *)&v802[0] = v704;
    *((void *)&v802[0] + 1) = a2;
    Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(a2, &v800);
  }
  v714[0] = MEMORY[0x1E4F143A8];
  v714[1] = 3221225472;
  v715 = (void (*)(uint64_t, long long *))___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
  v716 = &__block_descriptor_40_e9_v16__0_v8l;
  v717 = v704;
  v701 = v714;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v804 = 0u;
  memset(v805, 0, 24);
  long long v803 = 0u;
  long long v801 = 0u;
  memset(v802, 0, sizeof(v802));
  long long v800 = 0u;
  v805[3] = a2;
  LODWORD(v821) = 0;
  uint64_t v306 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v306)
  {
    unint64_t v307 = 0;
    do
    {
      LODWORD(v805[2]) = v307;
      long long v308 = *(_OWORD *)(v306 + 16 * v307);
      uint64_t v309 = *(void *)(v306 + 16 * v307 + 8);
      if (v309) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v309 + 8), 1uLL, memory_order_relaxed);
      }
      v310 = (std::__shared_weak_count *)*((void *)&v802[0] + 1);
      v802[0] = v308;
      if (v310) {
        nitro::nitro_function::nitro_function(v310);
      }
      v311 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v307, &v821);
      if ((char *)v311[6] - (char *)v311[5] == 4)
      {
        HIDWORD(v805[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v805[2], &v805[2])[5];
        v312 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v816, SHIDWORD(v805[2]), (_DWORD *)&v805[2] + 1);
        if ((char *)v312[6] - (char *)v312[5] == 4)
        {
          uint64_t v313 = *((void *)a2 + 4);
          long long v314 = *(_OWORD *)(v313 + 16 * SHIDWORD(v805[2]));
          uint64_t v315 = *(void *)(v313 + 16 * SHIDWORD(v805[2]) + 8);
          if (v315) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v315 + 8), 1uLL, memory_order_relaxed);
          }
          v316 = (std::__shared_weak_count *)*((void *)&v802[1] + 1);
          v802[1] = v314;
          if (v316) {
            nitro::nitro_function::nitro_function(v316);
          }
          uint64_t v317 = *(void *)(*(void *)&v802[0] + 64);
          if (v317)
          {
            uint64_t v318 = *(void *)(*(void *)&v802[0] + 72);
            if (v318) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v318 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v318 = 0;
          }
          v319 = (std::__shared_weak_count *)*((void *)&v800 + 1);
          *(void *)&long long v800 = v317;
          *((void *)&v800 + 1) = v318;
          if (v319) {
            nitro::nitro_function::nitro_function(v319);
          }
          uint64_t v320 = *(void *)&v802[1];
          v321 = *(void **)(*(void *)&v802[1] + 64);
          if (v321
          {
            uint64_t v322 = *(void *)(v320 + 72);
            if (v322) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v322 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v322 = 0;
          }
          v323 = (std::__shared_weak_count *)*((void *)&v801 + 1);
          *(void *)&long long v801 = v321;
          *((void *)&v801 + 1) = v322;
          if (v323)
          {
            nitro::nitro_function::nitro_function(v323);
            v321 = (void *)v801;
          }
          if ((void)v800 && v321) {
            v715((uint64_t)v701, &v800);
          }
        }
      }
      LODWORD(v821) = ++v307;
      uint64_t v306 = *((void *)a2 + 4);
    }
    while (v307 < (*((void *)a2 + 5) - v306) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v325 = (_DWORD *)*((void *)&v803 + 1);
  v324 = (_DWORD *)v803;
  if ((void)v803 != *((void *)&v803 + 1))
  {
    int v326 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v326 + *v324++);
      --v326;
    }
    while (v324 != v325);
  }
  v327 = (void *)*((void *)&v804 + 1);
  v328 = v805[0];
  if (*((void **)&v804 + 1) != v805[0])
  {
    int v329 = 0;
    do
    {
      int v330 = *(_DWORD *)v327;
      LODWORD(p_p_src) = v329 + *(_DWORD *)v327;
      LODWORD(v821) = v330;
      *((void *)&v821 + 1) = v327[1];
      uint64_t v331 = v327[2];
      *(void *)&long long v822 = v331;
      if (v331) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v331 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v822 + 1) = 0;
      *(void *)v823 = 0;
      *(void *)&v823[8] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, v327[3], v327[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327[4] - v327[3]) >> 3));
      *(void *)&v823[16] = 0;
      *(void *)&v823[24] = 0;
      v824 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v327[6], v327[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v327[7] - v327[6]) >> 3));
      memset(&v777, 0, sizeof(v777));
      p_src = &v777;
      LOBYTE(v809) = 0;
      v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
      v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
      v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&p_p_src, (uint64_t *)&v777);
      p_src = &v777;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      p_src = &v823[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      p_src = (char *)&v822 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      if ((void)v822) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
      }
      ++v329;
      v327 += 9;
    }
    while (v327 != v328);
  }
  *(void *)&long long v821 = (char *)&v804 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if ((void)v803)
  {
    *((void *)&v803 + 1) = v803;
    operator delete((void *)v803);
  }
  if (*((void *)&v802[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[1] + 1));
  }
  if (*((void *)&v802[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[0] + 1));
  }
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  v710[0] = MEMORY[0x1E4F143A8];
  v710[1] = 3221225472;
  v711 = ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
  v712 = &__block_descriptor_40_e9_v16__0_v8l;
  v713 = v704;
  v702 = v710;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v804 = 0u;
  memset(v805, 0, 24);
  long long v803 = 0u;
  long long v801 = 0u;
  memset(v802, 0, sizeof(v802));
  long long v800 = 0u;
  v805[3] = a2;
  LODWORD(v821) = 0;
  uint64_t v332 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v332)
  {
    unint64_t v333 = 0;
    do
    {
      LODWORD(v805[2]) = v333;
      long long v334 = *(_OWORD *)(v332 + 16 * v333);
      uint64_t v335 = *(void *)(v332 + 16 * v333 + 8);
      if (v335) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v335 + 8), 1uLL, memory_order_relaxed);
      }
      v336 = (std::__shared_weak_count *)*((void *)&v802[0] + 1);
      v802[0] = v334;
      if (v336) {
        nitro::nitro_function::nitro_function(v336);
      }
      v337 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], v333, &v821);
      if ((char *)v337[6] - (char *)v337[5] == 4)
      {
        HIDWORD(v805[2]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&__p[16], (int)v805[2], &v805[2])[5];
        v338 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v816, SHIDWORD(v805[2]), (_DWORD *)&v805[2] + 1);
        if ((char *)v338[6] - (char *)v338[5] == 4)
        {
          uint64_t v339 = *((void *)a2 + 4);
          long long v340 = *(_OWORD *)(v339 + 16 * SHIDWORD(v805[2]));
          uint64_t v341 = *(void *)(v339 + 16 * SHIDWORD(v805[2]) + 8);
          if (v341) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v341 + 8), 1uLL, memory_order_relaxed);
          }
          v342 = (std::__shared_weak_count *)*((void *)&v802[1] + 1);
          v802[1] = v340;
          if (v342) {
            nitro::nitro_function::nitro_function(v342);
          }
          uint64_t v343 = *(void *)&v802[0];
          v344 = *(void **)(*(void *)&v802[0] + 64);
          if (v344
          {
            uint64_t v345 = *(void *)(v343 + 72);
            if (v345) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v345 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v345 = 0;
          }
          v346 = (std::__shared_weak_count *)*((void *)&v800 + 1);
          *(void *)&long long v800 = v344;
          *((void *)&v800 + 1) = v345;
          if (v346) {
            nitro::nitro_function::nitro_function(v346);
          }
          uint64_t v347 = *(void *)&v802[1];
          v348 = *(void **)(*(void *)&v802[1] + 64);
          if (v348
          {
            uint64_t v349 = *(void *)(v347 + 72);
            if (v349) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v349 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v349 = 0;
          }
          v350 = (std::__shared_weak_count *)*((void *)&v801 + 1);
          *(void *)&long long v801 = v348;
          *((void *)&v801 + 1) = v349;
          if (v350)
          {
            nitro::nitro_function::nitro_function(v350);
            v348 = (void *)v801;
          }
          if ((void)v800 && v348) {
            v711((uint64_t)v702, (uint64_t *)&v800);
          }
        }
      }
      LODWORD(v821) = ++v333;
      uint64_t v332 = *((void *)a2 + 4);
    }
    while (v333 < (*((void *)a2 + 5) - v332) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v352 = (_DWORD *)*((void *)&v803 + 1);
  v351 = (_DWORD *)v803;
  if ((void)v803 != *((void *)&v803 + 1))
  {
    int v353 = 0;
    do
    {
      Espresso::net::remove_layer(a2, v353 + *v351++);
      --v353;
    }
    while (v351 != v352);
  }
  v354 = (void *)*((void *)&v804 + 1);
  v355 = v805[0];
  if (*((void **)&v804 + 1) != v805[0])
  {
    int v356 = 0;
    do
    {
      int v357 = *(_DWORD *)v354;
      LODWORD(p_p_src) = v356 + *(_DWORD *)v354;
      LODWORD(v821) = v357;
      *((void *)&v821 + 1) = v354[1];
      uint64_t v358 = v354[2];
      *(void *)&long long v822 = v358;
      if (v358) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v358 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v822 + 1) = 0;
      *(void *)v823 = 0;
      *(void *)&v823[8] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, v354[3], v354[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v354[4] - v354[3]) >> 3));
      *(void *)&v823[16] = 0;
      *(void *)&v823[24] = 0;
      v824 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v354[6], v354[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v354[7] - v354[6]) >> 3));
      memset(&v777, 0, sizeof(v777));
      p_src = &v777;
      LOBYTE(v809) = 0;
      v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
      v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
      v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
      Espresso::net::insert_layers((uint64_t)a2, (int *)&p_p_src, (uint64_t *)&v777);
      p_src = &v777;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      p_src = &v823[16];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      p_src = (char *)&v822 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
      if ((void)v822) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
      }
      ++v356;
      v354 += 9;
    }
    while (v354 != v355);
  }
  *(void *)&long long v821 = (char *)&v804 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if ((void)v803)
  {
    *((void *)&v803 + 1) = v803;
    operator delete((void *)v803);
  }
  if (*((void *)&v802[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[1] + 1));
  }
  if (*((void *)&v802[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[0] + 1));
  }
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  v706[0] = MEMORY[0x1E4F143A8];
  v706[1] = 3221225472;
  v707 = ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
  v708 = &__block_descriptor_40_e9_v16__0_v8l;
  v709 = v704;
  v359 = v706;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v821, a2);
  int v806 = 0;
  memset(v805, 0, sizeof(v805));
  long long v803 = 0u;
  long long v804 = 0u;
  memset(v802, 0, sizeof(v802));
  long long v800 = 0u;
  long long v801 = 0u;
  v807 = a2;
  *(_DWORD *)std::string __p = 0;
  if (*((void *)a2 + 5) != *((void *)a2 + 4))
  {
    unint64_t v360 = 0;
    do
    {
      LODWORD(v805[3]) = v360;
      v361 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v822, v360, __p);
      if ((char *)v361[6] - (char *)v361[5] == 4)
      {
        HIDWORD(v805[3]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v822, (int)v805[3], &v805[3])[5];
        v362 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v822, SHIDWORD(v805[3]), (_DWORD *)&v805[3] + 1);
        if ((char *)v362[6] - (char *)v362[5] == 4)
        {
          int v806 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v822, SHIDWORD(v805[3]), (_DWORD *)&v805[3] + 1)[5];
          v363 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v823[8], SHIDWORD(v805[3]), (_DWORD *)&v805[3] + 1);
          if ((char *)v363[6] - (char *)v363[5] == 4)
          {
            v364 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v823[8], v806, &v806);
            if ((char *)v364[6] - (char *)v364[5] == 4)
            {
              long long v365 = *(_OWORD *)(*((void *)a2 + 4) + 16 * v360);
              uint64_t v366 = *(void *)(*((void *)a2 + 4) + 16 * v360 + 8);
              if (v366) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v366 + 8), 1uLL, memory_order_relaxed);
              }
              v367 = (std::__shared_weak_count *)*((void *)&v802[1] + 1);
              v802[1] = v365;
              if (v367) {
                nitro::nitro_function::nitro_function(v367);
              }
              uint64_t v368 = *((void *)a2 + 4);
              long long v369 = *(_OWORD *)(v368 + 16 * SHIDWORD(v805[3]));
              uint64_t v370 = *(void *)(v368 + 16 * SHIDWORD(v805[3]) + 8);
              if (v370) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v370 + 8), 1uLL, memory_order_relaxed);
              }
              v371 = (std::__shared_weak_count *)*((void *)&v803 + 1);
              long long v803 = v369;
              if (v371) {
                nitro::nitro_function::nitro_function(v371);
              }
              uint64_t v372 = *((void *)a2 + 4);
              long long v373 = *(_OWORD *)(v372 + 16 * v806);
              uint64_t v374 = *(void *)(v372 + 16 * v806 + 8);
              if (v374) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v374 + 8), 1uLL, memory_order_relaxed);
              }
              v375 = (std::__shared_weak_count *)*((void *)&v804 + 1);
              long long v804 = v373;
              if (v375) {
                nitro::nitro_function::nitro_function(v375);
              }
              uint64_t v376 = *(void *)&v802[1];
              v377 = *(void **)(*(void *)&v802[1] + 64);
              if (v377
              {
                uint64_t v378 = *(void *)(v376 + 72);
                if (v378) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v378 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v378 = 0;
              }
              v379 = (std::__shared_weak_count *)*((void *)&v800 + 1);
              *(void *)&long long v800 = v377;
              *((void *)&v800 + 1) = v378;
              if (v379)
              {
                nitro::nitro_function::nitro_function(v379);
                v377 = (void *)v800;
              }
              if (v377)
              {
                uint64_t v380 = v803;
                v381 = *(void **)(v803 + 64);
                if (v381
                {
                  uint64_t v382 = *(void *)(v380 + 72);
                  if (v382) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v382 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v382 = 0;
                }
                v383 = (std::__shared_weak_count *)*((void *)&v801 + 1);
                *(void *)&long long v801 = v381;
                *((void *)&v801 + 1) = v382;
                if (v383)
                {
                  nitro::nitro_function::nitro_function(v383);
                  v381 = (void *)v801;
                }
                if (v381)
                {
                  uint64_t v384 = v804;
                  v385 = *(void **)(v804 + 64);
                  if (v385
                  {
                    uint64_t v386 = *(void *)(v384 + 72);
                    if (v386) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v386 + 8), 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    uint64_t v386 = 0;
                  }
                  v387 = (std::__shared_weak_count *)*((void *)&v802[0] + 1);
                  *(void *)&v802[0] = v385;
                  *((void *)&v802[0] + 1) = v386;
                  if (v387)
                  {
                    nitro::nitro_function::nitro_function(v387);
                    v385 = *(void **)&v802[0];
                  }
                  if (v385) {
                    v707((uint64_t)v359, (void **)&v800);
                  }
                }
              }
            }
          }
        }
      }
      *(_DWORD *)std::string __p = ++v360;
    }
    while (v360 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
    v388 = v805[0];
    v389 = v805[1];
    if (v805[0] == v805[1])
    {
      if (v805[0])
      {
LABEL_784:
        v805[1] = v388;
        operator delete(v388);
      }
    }
    else
    {
      int v390 = 0;
      do
      {
        Espresso::net::remove_layer(a2, v390 + *v388++);
        --v390;
      }
      while (v388 != v389);
      v388 = v805[0];
      if (v805[0]) {
        goto LABEL_784;
      }
    }
  }
  if (*((void *)&v804 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v804 + 1));
  }
  if (*((void *)&v803 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v803 + 1));
  }
  if (*((void *)&v802[1] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[1] + 1));
  }
  if (*((void *)&v802[0] + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v802[0] + 1));
  }
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&v823[16]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v822 + 1));
  if (*((void *)&v821 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v821 + 1));
  }

  if (Espresso::ANECompilerEngine::is_mix(v682, v391)
    && Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a2, v392))
  {
    *(void *)&long long v800 = MEMORY[0x1E4F143A8];
    *((void *)&v800 + 1) = 3221225472;
    *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context44insert_broadcast_for_implicit_dual_source_ewEPNS_3netEPS1__block_invoke;
    *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(void *)&v802[0] = v704;
    *((void *)&v802[0] + 1) = a2;
    Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(a2, &v800);
    v723[0] = (uint64_t *)MEMORY[0x1E4F143A8];
    v723[1] = (uint64_t *)3221225472;
    v724 = ___ZN8Espresso17ANECompilerEngine7context19transform_broadcastEPNS_3netEPS1__block_invoke;
    v725 = &__block_descriptor_48_e9_v16__0_v8l;
    v726 = v704;
    v727 = a2;
    v393 = v723;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    long long v801 = 0u;
    memset(v802, 0, 28);
    long long v800 = 0u;
    *(void *)&long long v803 = a2;
    uint64_t v394 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v394)
    {
      unint64_t v395 = 0;
      do
      {
        DWORD2(v802[1]) = v395;
        long long v396 = *(_OWORD *)(v394 + 16 * v395);
        uint64_t v397 = *(void *)(v394 + 16 * v395 + 8);
        if (v397) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v397 + 8), 1uLL, memory_order_relaxed);
        }
        v398 = (std::__shared_weak_count *)*((void *)&v801 + 1);
        long long v801 = v396;
        if (v398)
        {
          nitro::nitro_function::nitro_function(v398);
          uint64_t v399 = v801;
        }
        else
        {
          uint64_t v399 = v396;
        }
        v400 = *(void **)(v399 + 64);
        if (v400
        {
          uint64_t v401 = *(void *)(v399 + 72);
          if (v401) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v401 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v401 = 0;
        }
        v402 = (std::__shared_weak_count *)*((void *)&v800 + 1);
        *(void *)&long long v800 = v400;
        *((void *)&v800 + 1) = v401;
        if (v402)
        {
          nitro::nitro_function::nitro_function(v402);
          v400 = (void *)v800;
        }
        if (v400) {
          v724((uint64_t)v393, (int64x2_t *)&v800);
        }
        ++v395;
        uint64_t v394 = *((void *)a2 + 4);
      }
      while (v395 < (*((void *)a2 + 5) - v394) >> 4);
      v403 = (uint64_t *)*((void *)&v802[0] + 1);
      if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
      {
        v687 = v393;
        int v404 = 0;
        v405 = (uint64_t *)(*(void *)&v802[0] + 32);
        do
        {
          v406 = v405 - 4;
          int v407 = *((_DWORD *)v405 - 8) + v404;
          *((_DWORD *)v405 - 8) = v407;
          uint64_t v408 = *(v405 - 3);
          if (v408)
          {
            LODWORD(v821) = v407;
            *((void *)&v821 + 1) = v408;
            uint64_t v409 = *(v405 - 2);
            *(void *)&long long v822 = v409;
            if (v409) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v409 + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)&v822 + 1) = 0;
            *(void *)v823 = 0;
            *(void *)&v823[8] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v405 - 1), *v405, 0xAAAAAAAAAAAAAAABLL * ((*v405 - *(v405 - 1)) >> 3));
            *(void *)&v823[16] = 0;
            *(void *)&v823[24] = 0;
            v824 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v405[2], v405[3], 0xAAAAAAAAAAAAAAABLL * ((v405[3] - v405[2]) >> 3));
            memset(&v777, 0, sizeof(v777));
            p_src = &v777;
            LOBYTE(v809) = 0;
            v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
            v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
            v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
            v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
            p_src = &v777;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
            p_src = &v823[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
            p_src = (char *)&v822 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
            if ((void)v822) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
            }
            int v410 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v407);
            int v410 = -1;
          }
          v404 += v410;
          v405 += 9;
        }
        while (v406 + 9 != v403);
        v393 = v687;
      }
    }
    *(void *)&long long v821 = v802;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
    if (*((void *)&v801 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
    }
    if (*((void *)&v800 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
    if (*(void *)&__p[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
    }
  }
  uint64_t v728 = MEMORY[0x1E4F143A8];
  uint64_t v729 = 3221225472;
  v730 = ___ZN8Espresso17ANECompilerEngine7context23split_4x4_deconvolutionEPNS_3netEPS1__block_invoke;
  v731 = &__block_descriptor_48_e9_v16__0_v8l;
  v732 = v704;
  v733 = a2;
  v411 = &v728;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v412 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v412)
  {
    unint64_t v413 = 0;
    do
    {
      DWORD2(v802[1]) = v413;
      long long v414 = *(_OWORD *)(v412 + 16 * v413);
      uint64_t v415 = *(void *)(v412 + 16 * v413 + 8);
      if (v415) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v415 + 8), 1uLL, memory_order_relaxed);
      }
      v416 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v414;
      if (v416)
      {
        nitro::nitro_function::nitro_function(v416);
        uint64_t v417 = v801;
      }
      else
      {
        uint64_t v417 = v414;
      }
      v418 = *(void **)(v417 + 64);
      if (v418
      {
        uint64_t v419 = *(void *)(v417 + 72);
        if (v419) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v419 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v419 = 0;
      }
      v420 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v418;
      *((void *)&v800 + 1) = v419;
      if (v420)
      {
        nitro::nitro_function::nitro_function(v420);
        v418 = (void *)v800;
      }
      if (v418) {
        v730((uint64_t)v411, (int64x2_t *)&v800);
      }
      ++v413;
      uint64_t v412 = *((void *)a2 + 4);
    }
    while (v413 < (*((void *)a2 + 5) - v412) >> 4);
    v421 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      int v422 = 0;
      v423 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        v424 = v423 - 4;
        int v425 = *((_DWORD *)v423 - 8) + v422;
        *((_DWORD *)v423 - 8) = v425;
        uint64_t v426 = *(v423 - 3);
        if (v426)
        {
          LODWORD(v821) = v425;
          *((void *)&v821 + 1) = v426;
          uint64_t v427 = *(v423 - 2);
          *(void *)&long long v822 = v427;
          if (v427) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v427 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v423 - 1), *v423, 0xAAAAAAAAAAAAAAABLL * ((*v423 - *(v423 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v423[2], v423[3], 0xAAAAAAAAAAAAAAABLL * ((v423[3] - v423[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          p_src = &v777;
          LOBYTE(v809) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          p_src = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = &v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = (char *)&v822 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          ++v422;
        }
        v423 += 9;
      }
      while (v424 + 9 != v421);
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  uint64_t v734 = MEMORY[0x1E4F143A8];
  uint64_t v735 = 3221225472;
  v736 = ___ZN8Espresso17ANECompilerEngine7context42transform_network_refactor_large_conv_padsEPNS_3netEPS1__block_invoke;
  v737 = &__block_descriptor_48_e9_v16__0_v8l;
  v738 = v704;
  v739 = a2;
  v428 = &v734;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v429 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v429)
  {
    unint64_t v430 = 0;
    do
    {
      DWORD2(v802[1]) = v430;
      long long v431 = *(_OWORD *)(v429 + 16 * v430);
      uint64_t v432 = *(void *)(v429 + 16 * v430 + 8);
      if (v432) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v432 + 8), 1uLL, memory_order_relaxed);
      }
      v433 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v431;
      if (v433)
      {
        nitro::nitro_function::nitro_function(v433);
        uint64_t v434 = v801;
      }
      else
      {
        uint64_t v434 = v431;
      }
      v435 = *(void **)(v434 + 64);
      if (v435
      {
        uint64_t v436 = *(void *)(v434 + 72);
        if (v436) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v436 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v436 = 0;
      }
      v437 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v435;
      *((void *)&v800 + 1) = v436;
      if (v437)
      {
        nitro::nitro_function::nitro_function(v437);
        v435 = (void *)v800;
      }
      if (v435) {
        v736((uint64_t)v428, (int64x2_t *)&v800);
      }
      ++v430;
      uint64_t v429 = *((void *)a2 + 4);
    }
    while (v430 < (*((void *)a2 + 5) - v429) >> 4);
    v438 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      int v439 = 0;
      v440 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        v441 = v440 - 4;
        int v442 = *((_DWORD *)v440 - 8) + v439;
        *((_DWORD *)v440 - 8) = v442;
        uint64_t v443 = *(v440 - 3);
        if (v443)
        {
          LODWORD(v821) = v442;
          *((void *)&v821 + 1) = v443;
          uint64_t v444 = *(v440 - 2);
          *(void *)&long long v822 = v444;
          if (v444) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v444 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v440 - 1), *v440, 0xAAAAAAAAAAAAAAABLL * ((*v440 - *(v440 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v440[2], v440[3], 0xAAAAAAAAAAAAAAABLL * ((v440[3] - v440[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          p_src = &v777;
          LOBYTE(v809) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          p_src = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = &v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = (char *)&v822 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          ++v439;
        }
        v440 += 9;
      }
      while (v441 + 9 != v438);
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  *(void *)&long long v800 = MEMORY[0x1E4F143A8];
  *((void *)&v800 + 1) = 3221225472;
  *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke;
  *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  *(void *)&v802[0] = v704;
  *((void *)&v802[0] + 1) = a2;
  Espresso::single_match_replace<Espresso::generic_softmax_kernel>(a2, &v800);
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v680);
  v445 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v445, v446))
  {
    std::string::basic_string[abi:ne180100]<0>(&v821, "experimental.ane.enable_scenenet_optimizations");
    std::string::basic_string[abi:ne180100]<0>(&v777, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v680, (uint64_t)&v821, (uint64_t)&v777, (std::string *)__p);
    if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v777.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v822) < 0) {
      operator delete((void *)v821);
    }
    std::string::basic_string[abi:ne180100]<0>(&v821, "allowSoftmaxApproximation");
    std::string::basic_string[abi:ne180100]<0>(&p_src, "0");
    Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v680, (uint64_t)&v821, (uint64_t)&p_src, &v777);
    if (SHIBYTE(v810) < 0) {
      operator delete(p_src);
    }
    if (SBYTE7(v822) < 0) {
      operator delete((void *)v821);
    }
    if ((__p[23] & 0x80000000) != 0)
    {
      if (*(void *)&__p[8] == 1)
      {
        v447 = *(unsigned char **)__p;
LABEL_916:
        if (*v447 == 49) {
          goto LABEL_922;
        }
      }
    }
    else if (__p[23] == 1)
    {
      v447 = __p;
      goto LABEL_916;
    }
    char v448 = HIBYTE(v777.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0)
    {
      v449 = (std::string *)v777.__r_.__value_.__r.__words[0];
      if (v777.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_925;
      }
    }
    else
    {
      if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_926;
      }
      v449 = &v777;
    }
    if (v449->__r_.__value_.__s.__data_[0] != 49)
    {
LABEL_923:
      if ((v448 & 0x80) == 0) {
        goto LABEL_926;
      }
      v449 = (std::string *)v777.__r_.__value_.__r.__words[0];
LABEL_925:
      operator delete(v449);
LABEL_926:
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_928;
    }
LABEL_922:
    *(void *)&long long v821 = MEMORY[0x1E4F143A8];
    *((void *)&v821 + 1) = 3221225472;
    *(void *)&long long v822 = ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke_2;
    *((void *)&v822 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(void *)v823 = v704;
    *(void *)&v823[8] = a2;
    Espresso::single_match_replace<Espresso::generic_softmax_kernel>(a2, &v821);
    char v448 = HIBYTE(v777.__r_.__value_.__r.__words[2]);
    goto LABEL_923;
  }
LABEL_928:

  *(void *)&long long v800 = MEMORY[0x1E4F143A8];
  *((void *)&v800 + 1) = 3221225472;
  *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context16transform_ew_powEPNS_3netEPS1__block_invoke;
  *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  *(void *)&v802[0] = v704;
  *((void *)&v802[0] + 1) = a2;
  Espresso::single_match_replace<Espresso::ANECompilerEngine::elementwise_kernel>(a2, &v800);
  if (!v704
    || !*((void *)a2 + 99)
    || (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10007
    && (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10006
    || *((unsigned char *)v704 + 123))
  {
    v777.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v777.__r_.__value_.__l.__size_ = 3221225472;
    v777.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN8Espresso17ANECompilerEngine7context28transform_reflective_paddingEPNS_3netEPS1__block_invoke;
    v778 = &__block_descriptor_48_e9_v16__0_v8l;
    v779 = v704;
    v780 = a2;
    v450 = &v777;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
    long long v801 = 0u;
    memset(v802, 0, 28);
    long long v800 = 0u;
    *(void *)&long long v803 = a2;
    uint64_t v451 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v451)
    {
      unint64_t v452 = 0;
      do
      {
        DWORD2(v802[1]) = v452;
        long long v453 = *(_OWORD *)(v451 + 16 * v452);
        uint64_t v454 = *(void *)(v451 + 16 * v452 + 8);
        if (v454) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v454 + 8), 1uLL, memory_order_relaxed);
        }
        v455 = (std::__shared_weak_count *)*((void *)&v801 + 1);
        long long v801 = v453;
        if (v455)
        {
          nitro::nitro_function::nitro_function(v455);
          uint64_t v456 = v801;
        }
        else
        {
          uint64_t v456 = v453;
        }
        v457 = *(void **)(v456 + 64);
        if (v457
        {
          uint64_t v458 = *(void *)(v456 + 72);
          if (v458) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v458 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v458 = 0;
        }
        v459 = (std::__shared_weak_count *)*((void *)&v800 + 1);
        *(void *)&long long v800 = v457;
        *((void *)&v800 + 1) = v458;
        if (v459)
        {
          nitro::nitro_function::nitro_function(v459);
          v457 = (void *)v800;
        }
        if (v457) {
          ((void (*)(std::string *, long long *))v777.__r_.__value_.__r.__words[2])(v450, &v800);
        }
        ++v452;
        uint64_t v451 = *((void *)a2 + 4);
      }
      while (v452 < (*((void *)a2 + 5) - v451) >> 4);
      v460 = (uint64_t *)*((void *)&v802[0] + 1);
      if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
      {
        v688 = v450;
        int v461 = 0;
        v462 = (uint64_t *)(*(void *)&v802[0] + 32);
        do
        {
          v463 = v462 - 4;
          int v464 = *((_DWORD *)v462 - 8) + v461;
          *((_DWORD *)v462 - 8) = v464;
          uint64_t v465 = *(v462 - 3);
          if (v465)
          {
            LODWORD(v821) = v464;
            *((void *)&v821 + 1) = v465;
            uint64_t v466 = *(v462 - 2);
            *(void *)&long long v822 = v466;
            if (v466) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v466 + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)&v822 + 1) = 0;
            *(void *)v823 = 0;
            *(void *)&v823[8] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v462 - 1), *v462, 0xAAAAAAAAAAAAAAABLL * ((*v462 - *(v462 - 1)) >> 3));
            *(void *)&v823[16] = 0;
            *(void *)&v823[24] = 0;
            v824 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v462[2], v462[3], 0xAAAAAAAAAAAAAAABLL * ((v462[3] - v462[2]) >> 3));
            uint64_t v809 = 0;
            p_src = 0;
            v810 = 0;
            p_p_src = (Espresso::net *)&p_src;
            LOBYTE(v741) = 0;
            p_src = operator new(0x48uLL);
            uint64_t v809 = (uint64_t)p_src;
            v810 = (void (*)(void **, long long *))((char *)p_src + 72);
            uint64_t v809 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v810, (uint64_t)&v821, (uint64_t)v825, (uint64_t)p_src);
            Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&p_src);
            p_p_src = (Espresso::net *)&p_src;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_src);
            p_p_src = (Espresso::net *)&v823[16];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_src);
            p_p_src = (Espresso::net *)((char *)&v822 + 8);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_src);
            if ((void)v822) {
              nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
            }
            int v467 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v464);
            int v467 = -1;
          }
          v461 += v467;
          v462 += 9;
        }
        while (v463 + 9 != v460);
        v450 = v688;
      }
    }
    *(void *)&long long v821 = v802;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
    if (*((void *)&v801 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
    }
    if (*((void *)&v800 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
    if (*(void *)&__p[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
    }
  }
  p_p_src = (Espresso::net *)MEMORY[0x1E4F143A8];
  uint64_t v741 = 3221225472;
  v742[0] = ___ZN8Espresso17ANECompilerEngine7context23transform_crop_to_sliceEPNS_3netEPS1__block_invoke;
  v742[1] = &__block_descriptor_48_e9_v16__0_v8l;
  v742[2] = v704;
  v742[3] = a2;
  v468 = &p_p_src;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
  long long v801 = 0u;
  memset(v802, 0, 28);
  long long v800 = 0u;
  *(void *)&long long v803 = a2;
  uint64_t v469 = *((void *)a2 + 4);
  if (*((void *)a2 + 5) != v469)
  {
    unint64_t v470 = 0;
    do
    {
      DWORD2(v802[1]) = v470;
      long long v471 = *(_OWORD *)(v469 + 16 * v470);
      uint64_t v472 = *(void *)(v469 + 16 * v470 + 8);
      if (v472) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v472 + 8), 1uLL, memory_order_relaxed);
      }
      v473 = (std::__shared_weak_count *)*((void *)&v801 + 1);
      long long v801 = v471;
      if (v473)
      {
        nitro::nitro_function::nitro_function(v473);
        uint64_t v474 = v801;
      }
      else
      {
        uint64_t v474 = v471;
      }
      v475 = *(void **)(v474 + 64);
      if (v475
      {
        uint64_t v476 = *(void *)(v474 + 72);
        if (v476) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v476 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v476 = 0;
      }
      v477 = (std::__shared_weak_count *)*((void *)&v800 + 1);
      *(void *)&long long v800 = v475;
      *((void *)&v800 + 1) = v476;
      if (v477)
      {
        nitro::nitro_function::nitro_function(v477);
        v475 = (void *)v800;
      }
      if (v475) {
        ((void (*)(Espresso::net **, long long *))v742[0])(v468, &v800);
      }
      ++v470;
      uint64_t v469 = *((void *)a2 + 4);
    }
    while (v470 < (*((void *)a2 + 5) - v469) >> 4);
    v478 = (uint64_t *)*((void *)&v802[0] + 1);
    if (*(void *)&v802[0] != *((void *)&v802[0] + 1))
    {
      int v479 = 0;
      v480 = (uint64_t *)(*(void *)&v802[0] + 32);
      do
      {
        v481 = v480 - 4;
        int v482 = *((_DWORD *)v480 - 8) + v479;
        *((_DWORD *)v480 - 8) = v482;
        uint64_t v483 = *(v480 - 3);
        if (v483)
        {
          LODWORD(v821) = v482;
          *((void *)&v821 + 1) = v483;
          uint64_t v484 = *(v480 - 2);
          *(void *)&long long v822 = v484;
          if (v484) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v484 + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v822 + 1) = 0;
          *(void *)v823 = 0;
          *(void *)&v823[8] = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)&v822 + 1, *(v480 - 1), *v480, 0xAAAAAAAAAAAAAAABLL * ((*v480 - *(v480 - 1)) >> 3));
          *(void *)&v823[16] = 0;
          *(void *)&v823[24] = 0;
          v824 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v823[16], v480[2], v480[3], 0xAAAAAAAAAAAAAAABLL * ((v480[3] - v480[2]) >> 3));
          memset(&v777, 0, sizeof(v777));
          p_src = &v777;
          LOBYTE(v809) = 0;
          v777.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
          v777.__r_.__value_.__l.__size_ = v777.__r_.__value_.__r.__words[0];
          v777.__r_.__value_.__r.__words[2] = v777.__r_.__value_.__r.__words[0] + 72;
          v777.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v777.__r_.__value_.__r.__words[2], (uint64_t)&v821, (uint64_t)v825, (uint64_t)v777.__r_.__value_.__l.__data_);
          Espresso::net::insert_layers((uint64_t)a2, (uint64_t **)&v777);
          p_src = &v777;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = &v823[16];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          p_src = (char *)&v822 + 8;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_src);
          if ((void)v822) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v822);
          }
          int v485 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a2, v482);
          int v485 = -1;
        }
        v479 += v485;
        v480 += 9;
      }
      while (v481 + 9 != v478);
    }
  }
  *(void *)&long long v821 = v802;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
  if (*((void *)&v801 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v801 + 1));
  }
  if (*((void *)&v800 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v800 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v817);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(void **)&__p[24]);
  if (*(void *)&__p[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[8]);
  }

  *(void *)&long long v800 = MEMORY[0x1E4F143A8];
  *((void *)&v800 + 1) = 3221225472;
  *(void *)&long long v801 = ___ZN8Espresso17ANECompilerEngine7context20transform_leaky_reluEPNS_3netEPS1__block_invoke;
  *((void *)&v801 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
  *(void *)&v802[0] = v704;
  *((void *)&v802[0] + 1) = a2;
  Espresso::single_match_replace<Espresso::generic_activation_kernel>(a2, &v800);
  if ((Espresso::ANECompilerEngine::is_mix(v682, v486) & 1) == 0)
  {
    *(void *)std::string __p = a2;
    *(void *)&long long v821 = &unk_1EE37C488;
    *((void *)&v821 + 1) = __p;
    *((void *)&v822 + 1) = &v821;
    *(void *)&long long v800 = MEMORY[0x1E4F143A8];
    *((void *)&v800 + 1) = 3321888768;
    *(void *)&long long v801 = ___Z31surround_kernel_with_transposesIN8Espresso17ANECompilerEngine20inner_product_kernelELi4EEvPNS0_3netEPNS1_7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke;
    *((void *)&v801 + 1) = &__block_descriptor_120_ea8_48c106_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_17ANECompilerEngine20inner_product_kernelEEEEEE_e9_v16__0_v8l;
    *(void *)&v802[0] = v704;
    *((void *)&v802[0] + 1) = a2;
    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__value_func[abi:ne180100]((uint64_t)&v802[1], (uint64_t)&v821);
    long long v804 = xmmword_192DCA530;
    *(_OWORD *)((char *)v805 + 4) = xmmword_192DCA520;
    LODWORD(v805[0]) = 4;
    HIDWORD(v805[2]) = 4;
    Espresso::single_match_replace<Espresso::ANECompilerEngine::inner_product_kernel>(a2, &v800);
    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__value_func[abi:ne180100](&v802[1]);
    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__value_func[abi:ne180100](&v821);
    v791.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    p_src = &unk_1EE37C4E0;
    uint64_t v809 = (uint64_t)&v791;
    v811 = &p_src;
    *(void *)&long long v800 = MEMORY[0x1E4F143A8];
    *((void *)&v800 + 1) = 3321888768;
    *(void *)&long long v801 = ___Z31surround_kernel_with_transposesIN8Espresso23generic_split_nd_kernelELi2EEvPNS0_3netEPNS0_17ANECompilerEngine7contextENS0_18transpose_params_tES7_NSt3__18functionIFbRNS0_18single_match_stateIT_EEEEE_block_invoke;
    *((void *)&v801 + 1) = &__block_descriptor_120_ea8_48c90_ZTSNSt3__18functionIFbRN8Espresso18single_match_stateINS1_23generic_split_nd_kernelEEEEEE_e9_v16__0_v8l;
    *(void *)&v802[0] = v704;
    *((void *)&v802[0] + 1) = a2;
    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__value_func[abi:ne180100]((uint64_t)&v802[1], (uint64_t)&p_src);
    long long v804 = xmmword_192DCA540;
    *(_OWORD *)((char *)v805 + 4) = xmmword_192DCA540;
    LODWORD(v805[0]) = 4;
    HIDWORD(v805[2]) = 4;
    v487 = &v800;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v777, a2);
    long long v822 = 0u;
    memset(v823, 0, 28);
    long long v821 = 0u;
    v824 = a2;
    uint64_t v488 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v488)
    {
      unint64_t v489 = 0;
      do
      {
        *(_DWORD *)&v823[24] = v489;
        long long v490 = *(_OWORD *)(v488 + 16 * v489);
        uint64_t v491 = *(void *)(v488 + 16 * v489 + 8);
        if (v491) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v491 + 8), 1uLL, memory_order_relaxed);
        }
        v492 = (std::__shared_weak_count *)*((void *)&v822 + 1);
        long long v822 = v490;
        if (v492)
        {
          nitro::nitro_function::nitro_function(v492);
          uint64_t v493 = v822;
        }
        else
        {
          uint64_t v493 = v490;
        }
        v494 = *(void **)(v493 + 64);
        if (v494
        {
          uint64_t v495 = *(void *)(v493 + 72);
          if (v495) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v495 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          uint64_t v495 = 0;
        }
        v496 = (std::__shared_weak_count *)*((void *)&v821 + 1);
        *(void *)&long long v821 = v494;
        *((void *)&v821 + 1) = v495;
        if (v496)
        {
          nitro::nitro_function::nitro_function(v496);
          v494 = (void *)v821;
        }
        if (v494) {
          ((void (*)(long long *, long long *))v801)(v487, &v821);
        }
        ++v489;
        uint64_t v488 = *((void *)a2 + 4);
      }
      while (v489 < (*((void *)a2 + 5) - v488) >> 4);
      v497 = *(uint64_t **)&v823[8];
      if (*(void *)v823 != *(void *)&v823[8])
      {
        v678 = v487;
        int v498 = 0;
        v499 = (uint64_t *)(*(void *)v823 + 32);
        do
        {
          v500 = v499 - 4;
          int v501 = *((_DWORD *)v499 - 8) + v498;
          *((_DWORD *)v499 - 8) = v501;
          uint64_t v502 = *(v499 - 3);
          if (v502)
          {
            *(_DWORD *)std::string __p = v501;
            *(void *)&__p[8] = v502;
            uint64_t v503 = *(v499 - 2);
            *(void *)&__p[16] = v503;
            if (v503) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v503 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&__p[24] = 0;
            uint64_t v815 = 0;
            v816 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(v499 - 1), *v499, 0xAAAAAAAAAAAAAAABLL * ((*v499 - *(v499 - 1)) >> 3));
            v817 = 0;
            uint64_t v818 = 0;
            uint64_t v819 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v817, v499[2], v499[3], 0xAAAAAAAAAAAAAAABLL * ((v499[3] - v499[2]) >> 3));
            v796 = 0;
            v795 = 0;
            v797 = 0;
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v795;
            __src.__r_.__value_.__s.__data_[8] = 0;
            v795 = (uint64_t *)operator new(0x48uLL);
            v796 = v795;
            v797 = v795 + 9;
            v796 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v797, (uint64_t)__p, (uint64_t)&v820, (uint64_t)v795);
            Espresso::net::insert_layers((uint64_t)a2, &v795);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v795;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v817;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
            if (*(void *)&__p[16]) {
              nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
            }
            int v504 = 1;
          }
          else
          {
            Espresso::net::remove_layer(a2, v501);
            int v504 = -1;
          }
          v498 += v504;
          v499 += 9;
        }
        while (v500 + 9 != v497);
        v487 = v678;
      }
    }
    *(void *)std::string __p = v823;
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*((void *)&v822 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v822 + 1));
    }
    if (*((void *)&v821 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v821 + 1));
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v781);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v778);
    if (v777.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v777.__r_.__value_.__l.__size_);
    }

    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__value_func[abi:ne180100](&v802[1]);
    std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__value_func[abi:ne180100](&p_src);
    if (Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(a2, v505))
    {
      if (!v704
        || (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10007
        && (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10006
        || *((unsigned char *)v704 + 123))
      {
        *(void *)&long long v821 = MEMORY[0x1E4F143A8];
        *((void *)&v821 + 1) = 3221225472;
        *(void *)&long long v822 = ___ZN8Espresso17ANECompilerEngine7context30transform_large_separated_poolEPNS_3netEPS1__block_invoke;
        *((void *)&v822 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
        *(void *)v823 = v704;
        *(void *)&v823[8] = a2;
        Espresso::single_match_replace<Espresso::generic_pool_kernel>(a2, &v821);
      }
      if (Espresso::ANECompilerEngine::is_mix_e(v682, v506)
        && (!v704
         || (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10007
         && (***((unsigned int (****)(void))v704 + 1))(*((void *)v704 + 1)) != 10006
         || *((unsigned char *)v704 + 123)))
      {
        p_src = (void *)MEMORY[0x1E4F143A8];
        uint64_t v809 = 3221225472;
        v810 = (void (*)(void **, long long *))___ZN8Espresso17ANECompilerEngine7context32decompose_simple_crop_and_resizeEPNS_3netEPS1__block_invoke;
        v811 = (void **)&__block_descriptor_48_e9_v16__0_v8l;
        v812 = v704;
        v813 = a2;
        v507 = &p_src;
        Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v777, a2);
        long long v822 = 0u;
        memset(v823, 0, 28);
        long long v821 = 0u;
        v824 = a2;
        uint64_t v508 = *((void *)a2 + 4);
        if (*((void *)a2 + 5) != v508)
        {
          unint64_t v509 = 0;
          do
          {
            *(_DWORD *)&v823[24] = v509;
            long long v510 = *(_OWORD *)(v508 + 16 * v509);
            uint64_t v511 = *(void *)(v508 + 16 * v509 + 8);
            if (v511) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v511 + 8), 1uLL, memory_order_relaxed);
            }
            v512 = (std::__shared_weak_count *)*((void *)&v822 + 1);
            long long v822 = v510;
            if (v512)
            {
              nitro::nitro_function::nitro_function(v512);
              uint64_t v513 = v822;
            }
            else
            {
              uint64_t v513 = v510;
            }
            v514 = *(void **)(v513 + 64);
            if (v514
            {
              uint64_t v515 = *(void *)(v513 + 72);
              if (v515) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v515 + 8), 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              uint64_t v515 = 0;
            }
            v516 = (std::__shared_weak_count *)*((void *)&v821 + 1);
            *(void *)&long long v821 = v514;
            *((void *)&v821 + 1) = v515;
            if (v516)
            {
              nitro::nitro_function::nitro_function(v516);
              v514 = (void *)v821;
            }
            if (v514) {
              v810(v507, &v821);
            }
            ++v509;
            uint64_t v508 = *((void *)a2 + 4);
          }
          while (v509 < (*((void *)a2 + 5) - v508) >> 4);
          v517 = *(uint64_t **)&v823[8];
          if (*(void *)v823 != *(void *)&v823[8])
          {
            v689 = v507;
            int v518 = 0;
            v519 = (uint64_t *)(*(void *)v823 + 32);
            do
            {
              v520 = v519 - 4;
              int v521 = *((_DWORD *)v519 - 8) + v518;
              *((_DWORD *)v519 - 8) = v521;
              uint64_t v522 = *(v519 - 3);
              if (v522)
              {
                *(_DWORD *)std::string __p = v521;
                *(void *)&__p[8] = v522;
                uint64_t v523 = *(v519 - 2);
                *(void *)&__p[16] = v523;
                if (v523) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v523 + 8), 1uLL, memory_order_relaxed);
                }
                *(void *)&__p[24] = 0;
                uint64_t v815 = 0;
                v816 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(v519 - 1), *v519, 0xAAAAAAAAAAAAAAABLL * ((*v519 - *(v519 - 1)) >> 3));
                v817 = 0;
                uint64_t v818 = 0;
                uint64_t v819 = 0;
                std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v817, v519[2], v519[3], 0xAAAAAAAAAAAAAAABLL * ((v519[3] - v519[2]) >> 3));
                v796 = 0;
                v795 = 0;
                v797 = 0;
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v795;
                __src.__r_.__value_.__s.__data_[8] = 0;
                v795 = (uint64_t *)operator new(0x48uLL);
                v796 = v795;
                v797 = v795 + 9;
                v796 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v797, (uint64_t)__p, (uint64_t)&v820, (uint64_t)v795);
                Espresso::net::insert_layers((uint64_t)a2, &v795);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v795;
                std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&v817;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                __src.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[24];
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
                if (*(void *)&__p[16]) {
                  nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&__p[16]);
                }
                int v524 = 1;
              }
              else
              {
                Espresso::net::remove_layer(a2, v521);
                int v524 = -1;
              }
              v518 += v524;
              v519 += 9;
            }
            while (v520 + 9 != v517);
            v507 = v689;
          }
        }
        *(void *)std::string __p = v823;
        std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*((void *)&v822 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v822 + 1));
        }
        if (*((void *)&v821 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v821 + 1));
        }
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v781);
        std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v778);
        if (v777.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v777.__r_.__value_.__l.__size_);
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v821, "ane_compilation_remove_dequantization_goc_simple");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v680, (uint64_t)&v821, (uint64_t)__p, &v705);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SBYTE7(v822) < 0) {
    operator delete((void *)v821);
  }
  if (SHIBYTE(v705.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v705.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_1340;
    }
    v526 = (std::string *)v705.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v705.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_1340;
    }
    v526 = &v705;
  }
  if (v526->__r_.__value_.__s.__data_[0] == 49)
  {
    Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v680);
    v656 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
    unint64_t v798 = 0;
    uint64_t v527 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v527)
    {
      unint64_t v528 = 0;
      v703 = (uint64_t **)((char *)a2 + 352);
LABEL_1101:
      *(void *)&long long v821 = &v798;
      v529 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v681, &v798, (uint64_t)&std::piecewise_construct, (uint64_t **)&v821);
      v810 = 0;
      p_src = 0;
      uint64_t v809 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&p_src, v529[3], v529[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v529[4] - v529[3]) >> 3));
      v777.__r_.__value_.__r.__words[0] = (std::string::size_type)&v798;
      v530 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v695, &v798, (uint64_t)&std::piecewise_construct, (uint64_t **)&v777);
      v797 = 0;
      v795 = 0;
      v796 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v795, v530[3], v530[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v530[4] - v530[3]) >> 3));
      v531 = p_src;
      std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v793, *(void *)a2, *((std::__shared_weak_count **)a2 + 1));
      if (v704
        && *(Espresso::ANECompilerEngine::context **)(*(void *)(*(void *)(*(void *)(v793 + 32) + 16 * v798) + 64)
                                                    + 8) != v704
        || v809 - (void)p_src != 24
        || v795 == v796)
      {
        goto LABEL_1311;
      }
      v777.__r_.__value_.__r.__words[0] = (std::string::size_type)v531;
      v532 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v691, v531, (long long **)&v777);
      long long v533 = *(_OWORD *)(v532 + 72);
      long long v821 = *(_OWORD *)(v532 + 56);
      long long v822 = v533;
      v534 = (const void *)*((void *)v532 + 12);
      *(void *)v823 = *((void *)v532 + 11);
      memset(&v823[8], 0, 24);
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v823[8], v534, *((void *)v532 + 13), (uint64_t)(*((void *)v532 + 13) - (void)v534) >> 2);
      v535 = (const Espresso::net *)v793;
      v536 = v794;
      if (v794) {
        atomic_fetch_add_explicit(&v794->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)std::string __p = v821;
      *(_OWORD *)&__p[16] = v822;
      uint64_t v815 = *(void *)v823;
      v817 = 0;
      uint64_t v818 = 0;
      v816 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v816, *(const void **)&v823[8], *(uint64_t *)&v823[16], (uint64_t)(*(void *)&v823[16] - *(void *)&v823[8]) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v777, v535, (const Espresso::layer_shape *)__p, 1);
      if (v816)
      {
        v817 = v816;
        operator delete(v816);
      }
      if (v536) {
        nitro::nitro_function::nitro_function(v536);
      }
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v531;
      v537 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v703, v531, (uint64_t)&std::piecewise_construct, (long long **)&__src);
      uint64_t v538 = *((unsigned int *)v537 + 16);
      float v539 = *((float *)v537 + 14);
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
      float v540 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v703, v795, (uint64_t)&std::piecewise_construct, (long long **)&__src)+ 14);
      __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
      v541 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v703, v795, (uint64_t)&std::piecewise_construct, (long long **)&__src);
      v690 = (uint64_t *)(v527 + 16 * v528);
      v542 = v795;
      v543 = v796;
      if (v795 == v796)
      {
        LOBYTE(v544) = 0;
        int v545 = 0;
        int v546 = 0;
        m = (uint64_t **)((char *)a2 + 352);
        goto LABEL_1161;
      }
      uint64_t v544 = 0;
      int v545 = 0;
      int v546 = 0;
      unsigned int v547 = *((_DWORD *)v541 + 16);
      while (1)
      {
        int v548 = v545;
        __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v542;
        v549 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v703, v542, (uint64_t)&std::piecewise_construct, (long long **)&__src);
        unsigned int v550 = *((_DWORD *)v549 + 16);
        if (v550 >= 2 || (uint64_t v551 = 1, v538 != 2) && v538 != 4)
        {
          if (v538 <= 1 && (v550 == 2 || v550 == 4))
          {
            uint64_t v544 = 1;
LABEL_1126:
            if (v550 == 4 || v550 == 2) {
              int v554 = 1;
            }
            else {
              int v554 = v548;
            }
            if (v547 <= 1) {
              int v545 = v554;
            }
            else {
              int v545 = v548;
            }
            goto LABEL_1135;
          }
          uint64_t v551 = v544;
          if (v550 > 1) {
            goto LABEL_1126;
          }
        }
        int v545 = 1;
        uint64_t v544 = v551;
        if (v547 != 2 && v547 != 4) {
          goto LABEL_1126;
        }
LABEL_1135:
        v546 |= v540 != *((float *)v549 + 14);
        v542 += 3;
        if (v542 == v543)
        {
          v555 = v795;
          v556 = v796;
          for (m = (uint64_t **)((char *)a2 + 352); v555 != v556; v555 += 3)
          {
            __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v555;
            if (*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, v555, (uint64_t)&std::piecewise_construct, (long long **)&__src)+ 14) == 1.0)
            {
              v558 = (void *)*v690;
              v559 = (void *)(*v690 + 40);
              int v560 = *(char *)(*v690 + 63);
              if (v560 < 0)
              {
                if (v558[6] != 16) {
                  goto LABEL_1147;
                }
                v559 = (void *)*v559;
              }
              else if (v560 != 16)
              {
                goto LABEL_1147;
              }
              v562 = (void *)*v559;
              uint64_t v561 = v559[1];
              if (v562 != (void *)0x5F747865746E6F63 || v561 != 0x726566736E617274)
              {
LABEL_1147:
                v564 = (void *)v558[8];
                v565 = (std::__shared_weak_count *)v558[9];
                if (v565) {
                  atomic_fetch_add_explicit(&v565->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v564)
                {
                  v566 = 0;
                  if (v565 && v564)
                  {
                    atomic_fetch_add_explicit(&v565->__shared_owners_, 1uLL, memory_order_relaxed);
                    v566 = v565;
                  }
                }
                else
                {
                  v566 = 0;
                }
                uint64_t v567 = (*(uint64_t (**)(void *))(*(void *)v564 + 104))(v564);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v567, (uint64_t)v555, (uint64_t)v555);
                if (v566) {
                  nitro::nitro_function::nitro_function(v566);
                }
                m = (uint64_t **)((char *)a2 + 352);
                if (v565) {
                  nitro::nitro_function::nitro_function(v565);
                }
              }
            }
          }
LABEL_1161:
          uint64_t v568 = *v690;
          v569 = *(const void **)(*v690 + 64);
          if (!v569
          {
            v572 = 0;
LABEL_1175:
            int v578 = 0;
            goto LABEL_1176;
          }
          v571 = v570;
          v572 = *(std::__shared_weak_count **)(v568 + 72);
          if (v572) {
            atomic_fetch_add_explicit(&v572->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v574 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v570 + 320))(v570);
          if (v574 != 33 && v574 != 0) {
            goto LABEL_1175;
          }
          if (Espresso::ANECompilerEngine::prefer_ne(v656, v573)) {
            goto LABEL_1175;
          }
          v576 = v795;
          if ((char *)v796 - (char *)v795 != 48) {
            goto LABEL_1175;
          }
          if (*((char *)v795 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__src, (const std::string::value_type *)*v795, v795[1]);
            v576 = v795;
          }
          else
          {
            long long v577 = *(_OWORD *)v795;
            __src.__r_.__value_.__r.__words[2] = v795[2];
            *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v577;
          }
          if (*((char *)v576 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v791, (const std::string::value_type *)v576[3], v576[4]);
          }
          else {
            std::string v791 = *(std::string *)((unsigned char *)v576 + 1);
          }
          if (*((char *)p_src + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v790, *(const std::string::value_type **)p_src, *((void *)p_src + 1));
          }
          else
          {
            long long v630 = *(_OWORD *)p_src;
            v790.__r_.__value_.__r.__words[2] = *((void *)p_src + 2);
            *(_OWORD *)&v790.__r_.__value_.__l.__data_ = v630;
          }
          v799 = &__src;
          float v631 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, &__src, (uint64_t)&std::piecewise_construct, (long long **)&v799)+ 14);
          v799 = &v791;
          float v632 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, &v791, (uint64_t)&std::piecewise_construct, (long long **)&v799)+ 14);
          v799 = &v790;
          float v633 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, &v790, (uint64_t)&std::piecewise_construct, (long long **)&v799)+ 14);
          v799 = &__src;
          unsigned int v634 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, &__src, (uint64_t)&std::piecewise_construct, (long long **)&v799)+ 16);
          v799 = &v791;
          v635 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(m, &v791, (uint64_t)&std::piecewise_construct, (long long **)&v799);
          v636 = m;
          unsigned int v637 = *((_DWORD *)v635 + 16);
          v799 = &v790;
          if (*((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v636, &v790, (uint64_t)&std::piecewise_construct, (long long **)&v799)+ 16) < 2u)float v633 = 1.0; {
          if (v634 < 2)
          }
            float v631 = 1.0;
          if (v637 < 2) {
            float v632 = 1.0;
          }
          uint64_t v638 = (*(uint64_t (**)(void *))(*(void *)v571 + 344))(v571);
          uint64_t v639 = v638;
          int v640 = *(unsigned __int8 *)(v638 + 53);
          if (*(unsigned char *)(v638 + 53))
          {
            int v578 = 0;
          }
          else
          {
            *(unsigned char *)(v638 + 53) = 1;
            *(float *)(v638 + 56) = v632 / v631;
            *(float *)(v638 + 60) = v633 / v632;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v638, (uint64_t)&__src, (uint64_t)&__src);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v639, (uint64_t)&v791, (uint64_t)&v791);
            *(unsigned char *)(v639 + 40) = 1;
            int v578 = 4;
          }
          if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v790.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v791.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v791.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__src.__r_.__value_.__l.__data_);
          }
          if (v640) {
            goto LABEL_1175;
          }
LABEL_1176:
          if (v572) {
            nitro::nitro_function::nitro_function(v572);
          }
          if (((v578 == 0) & v544) == 1)
          {
            uint64_t v579 = *v690;
            v580 = *(const void **)(*v690 + 64);
            if (!v580
            {
              v582 = 0;
              int v657 = 0;
LABEL_1191:
              int v585 = 1;
              if (v582) {
                goto LABEL_1192;
              }
              goto LABEL_1193;
            }
            v582 = *(std::__shared_weak_count **)(v579 + 72);
            if (v582) {
              atomic_fetch_add_explicit(&v582->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v583 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v581 + 320))(v581);
            if (v583 != 33 && v583 != 0)
            {
              int v657 = 0;
              goto LABEL_1211;
            }
            if ((v546 | v545))
            {
              int v657 = 0;
              goto LABEL_1212;
            }
            int v657 = 1;
LABEL_1211:
            if (((v583 == 1) & v545) == 0) {
              goto LABEL_1191;
            }
LABEL_1212:
            int v585 = 0;
            if (!v582) {
              goto LABEL_1193;
            }
LABEL_1192:
            nitro::nitro_function::nitro_function(v582);
LABEL_1193:
            if (v585)
            {
              uint64_t v586 = *v690;
              v587 = *(std::__shared_weak_count **)(*v690 + 64);
              if (!v587) {
                goto LABEL_1200;
              }
              if (!v587) {
                goto LABEL_1200;
              }
              v587 = *(std::__shared_weak_count **)(v586 + 72);
              if (v587) {
                atomic_fetch_add_explicit(&v587->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v657 = 1;
              if ((v546 | v545)) {
                int v588 = 0;
              }
              else {
LABEL_1200:
              }
                int v588 = 1;
              if (v587) {
                nitro::nitro_function::nitro_function(v587);
              }
              if (v588)
              {
                v590 = *(const void **)(*v690 + 64);
                v589 = *(std::__shared_weak_count **)(*v690 + 72);
                if (v589) {
                  atomic_fetch_add_explicit(&v589->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v655 = v589;
                v666 = v590;
                if (v590)
                {
                  v592 = v591;
                  v593 = 0;
                  if (v589 && v591)
                  {
                    atomic_fetch_add_explicit(&v589->__shared_owners_, 1uLL, memory_order_relaxed);
                    v593 = v589;
                  }
                }
                else
                {
                  v592 = 0;
                  v593 = 0;
                }
                v654 = v593;
                v594 = v795;
                v679 = v796;
                if (v795 != v796)
                {
                  char v595 = 1;
                  while (1)
                  {
                    __src.__r_.__value_.__r.__words[0] = (std::string::size_type)v594;
                    v596 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v703, v594, (uint64_t)&std::piecewise_construct, (long long **)&__src);
                    float v597 = *((float *)v596 + 14);
                    int v598 = *((_DWORD *)v596 + 16);
                    uint64_t v599 = *v690;
                    v600 = *(const void **)(*v690 + 64);
                    if (v600)
                    {
                      uint64_t v601 = v538;
                      int v602 = *((_DWORD *)v596 + 16);
                      {
                        v603 = *(std::__shared_weak_count **)(v599 + 72);
                        int v598 = v602;
                        uint64_t v538 = v601;
                        if (v603) {
                          goto LABEL_1221;
                        }
                        goto LABEL_1222;
                      }
                      int v598 = v602;
                      uint64_t v538 = v601;
                      {
                        v603 = *(std::__shared_weak_count **)(v599 + 72);
                        if (v603)
                        {
LABEL_1221:
                          atomic_fetch_add_explicit(&v603->__shared_owners_, 1uLL, memory_order_relaxed);
                          nitro::nitro_function::nitro_function(v603);
                        }
LABEL_1222:
                        if (!v592[8])
                        {
                          size_t v604 = SHIDWORD(v777.__r_.__value_.__r.__words[0]);
                          *(void *)v788 = v793;
                          v789 = v794;
                          if (v794) {
                            atomic_fetch_add_explicit(&v794->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          std::string::basic_string[abi:ne180100]<0>(&__src, "post_scale");
                          int v605 = ((uint64_t (*)(std::__shared_weak_count **, int *, const void *, std::string *))(*v592)[3].__shared_weak_owners_)(v592, v788, v666, &__src);
                          if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(__src.__r_.__value_.__l.__data_);
                          }
                          if (v789) {
                            nitro::nitro_function::nitro_function(v789);
                          }
                          if (v605 < 0)
                          {
                            unint64_t v784 = v793;
                            v785 = v794;
                            if (v794) {
                              atomic_fetch_add_explicit(&v794->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            std::string::basic_string[abi:ne180100]<0>(&__src, "per_ch_qscale");
                            int v613 = ((uint64_t (*)(std::__shared_weak_count **, unint64_t *, const void *, std::string *))(*v592)[3].__shared_weak_owners_)(v592, &v784, v666, &__src);
                            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__src.__r_.__value_.__l.__data_);
                            }
                            if (v785) {
                              nitro::nitro_function::nitro_function(v785);
                            }
                            if (v613 < 1)
                            {
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                              std::string::size_type v626 = __src.__r_.__value_.__r.__words[0];
                              v627 = v592[9];
                              *((_OWORD *)v592 + 4) = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                              if (v627)
                              {
                                nitro::nitro_function::nitro_function(v627);
                                std::string::size_type v628 = (std::string::size_type)v592[8];
                              }
                              else
                              {
                                std::string::size_type v628 = v626;
                              }
                              **(float **)(v628 + 16) = v539 / v597;
                            }
                            else
                            {
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, v604, 1, 1, 1);
                              v614 = v592[9];
                              *((_OWORD *)v592 + 4) = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                              if (v614) {
                                nitro::nitro_function::nitro_function(v614);
                              }
                              unint64_t v782 = v793;
                              v783 = v794;
                              if (v794) {
                                atomic_fetch_add_explicit(&v794->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              std::string::basic_string[abi:ne180100]<0>(&v791, "per_ch_qscale");
                              ((void (*)(std::string *__return_ptr, std::__shared_weak_count **, unint64_t *, const void *, std::string *))(*v592)[5].__vftable)(&__src, v592, &v782, v666, &v791);
                              if (SHIBYTE(v791.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v791.__r_.__value_.__l.__data_);
                              }
                              if (v783) {
                                nitro::nitro_function::nitro_function(v783);
                              }
                              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v791, v604, 1, 1, 1);
                              long long v615 = *(_OWORD *)&v791.__r_.__value_.__l.__data_;
                              memcpy(*(void **)(v791.__r_.__value_.__r.__words[0] + 16), __src.__r_.__value_.__l.__data_, v604);
                              if (v604)
                              {
                                v616 = *(float **)(v615 + 16);
                                shared_weak_owners = (float *)v592[8]->__shared_weak_owners_;
                                do
                                {
                                  float v618 = *v616++;
                                  *shared_weak_owners++ = v539 / (float)(v597 * v618);
                                  --v604;
                                }
                                while (v604);
                              }
                              if (*((void *)&v615 + 1)) {
                                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v615 + 1));
                              }
                            }
                          }
                          else
                          {
                            unint64_t v786 = v793;
                            v787 = v794;
                            if (v794) {
                              atomic_fetch_add_explicit(&v794->__shared_owners_, 1uLL, memory_order_relaxed);
                            }
                            std::string::basic_string[abi:ne180100]<0>(&v791, "post_scale");
                            ((void (*)(std::string *__return_ptr, std::__shared_weak_count **, unint64_t *, const void *, std::string *))(*v592)[5].__vftable)(&__src, v592, &v786, v666, &v791);
                            if (SHIBYTE(v791.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(v791.__r_.__value_.__l.__data_);
                            }
                            if (v787) {
                              nitro::nitro_function::nitro_function(v787);
                            }
                            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v791, v604, 1, 1, 1);
                            std::string::size_type v606 = v791.__r_.__value_.__r.__words[0];
                            v607 = v592[9];
                            *((_OWORD *)v592 + 4) = *(_OWORD *)&v791.__r_.__value_.__l.__data_;
                            if (v607)
                            {
                              nitro::nitro_function::nitro_function(v607);
                              std::string::size_type v608 = (std::string::size_type)v592[8];
                            }
                            else
                            {
                              std::string::size_type v608 = v606;
                            }
                            memcpy(*(void **)(v608 + 16), __src.__r_.__value_.__l.__data_, v604);
                          }
                        }
                        if (v598 == 2 || v598 == 4)
                        {
                          v619 = v592[8];
                          uint64_t shared_owners_low = SLODWORD(v619->__shared_owners_);
                          if (shared_owners_low)
                          {
                            v621 = (float *)v619->__shared_weak_owners_;
                            do
                            {
                              float *v621 = *v621 / v539;
                              ++v621;
                              --shared_owners_low;
                            }
                            while (shared_owners_low);
                          }
                        }
                        else
                        {
                          v622 = v592[8];
                          uint64_t v623 = SLODWORD(v622->__shared_owners_);
                          if (v623)
                          {
                            v624 = (float *)v622->__shared_weak_owners_;
                            do
                            {
                              float *v624 = v597 * *v624;
                              ++v624;
                              --v623;
                            }
                            while (v623);
                          }
                        }
                        goto LABEL_1295;
                      }
                    }
                    v609 = v592[8];
                    if ((char *)v796 - (char *)v795 != 24) {
                      break;
                    }
                    if (!v609) {
                      goto LABEL_1246;
                    }
LABEL_1248:
                    if (v598 == 4 || v598 == 2) {
                      *(float *)v592[8]->__shared_weak_owners_ = 1.0 / v597;
                    }
                    else {
                      *(float *)v592[8]->__shared_weak_owners_ = v539;
                    }
LABEL_1295:
                    *(unsigned char *)(((uint64_t (*)(std::__shared_weak_count **))(*v592)[4].__shared_owners_)(v592)
                             + 41) = 1;
                    uint64_t v625 = ((uint64_t (*)(std::__shared_weak_count **))(*v592)[4].__shared_owners_)(v592);
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v625, (uint64_t)v594, (uint64_t)v594);
                    char v595 = 0;
                    v594 += 3;
                    if (v594 == v679) {
                      goto LABEL_1301;
                    }
                  }
                  if (!v657)
                  {
                    if (!v609)
                    {
                      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                      v612 = v592[9];
                      *((_OWORD *)v592 + 4) = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                      if (v612) {
                        nitro::nitro_function::nitro_function(v612);
                      }
                    }
                    if (v595) {
                      *(_DWORD *)v592[8]->__shared_weak_owners_ = 1065353216;
                    }
                    if (v538 == 4 || v538 == 2) {
                      *(float *)v592[8]->__shared_weak_owners_ = v539;
                    }
                    else {
                      *(float *)v592[8]->__shared_weak_owners_ = *(float *)v592[8]->__shared_weak_owners_ / v597;
                    }
                    goto LABEL_1295;
                  }
                  if (v609) {
                    goto LABEL_1248;
                  }
LABEL_1246:
                  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&__src, 1, 1, 1, 1);
                  v610 = v592[9];
                  *((_OWORD *)v592 + 4) = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                  if (v610) {
                    nitro::nitro_function::nitro_function(v610);
                  }
                  goto LABEL_1248;
                }
LABEL_1301:
                v629 = v592[8];
                if (v629 && LODWORD(v629->__shared_owners_) == 1 && *(float *)v629->__shared_weak_owners_ == 1.0) {
                  *(unsigned char *)(((uint64_t (*)(std::__shared_weak_count **))(*v592)[4].__shared_owners_)(v592)
                }
                           + 40) = 1;
                if (v654) {
                  nitro::nitro_function::nitro_function(v654);
                }
                if (v655) {
                  nitro::nitro_function::nitro_function(v655);
                }
              }
            }
          }
          if (*(void *)&v823[8])
          {
            *(void *)&v823[16] = *(void *)&v823[8];
            operator delete(*(void **)&v823[8]);
          }
LABEL_1311:
          if (v794) {
            nitro::nitro_function::nitro_function(v794);
          }
          *(void *)&long long v821 = &v795;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
          *(void *)&long long v821 = &p_src;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v821);
          unint64_t v528 = v798 + 1;
          unint64_t v798 = v528;
          uint64_t v527 = *((void *)a2 + 4);
          if (v528 >= (*((void *)a2 + 5) - v527) >> 4) {
            break;
          }
          goto LABEL_1101;
        }
      }
    }
  }
LABEL_1340:
  if ((Espresso::ANECompilerEngine::is_mix(v682, v525) & 1) == 0)
  {
    *(void *)&long long v821 = MEMORY[0x1E4F143A8];
    *((void *)&v821 + 1) = 3221225472;
    *(void *)&long long v822 = ___ZN8Espresso17ANECompilerEngine7context20transform_l2_poolingEPNS_3netEPS1__block_invoke;
    *((void *)&v822 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(void *)v823 = v704;
    *(void *)&v823[8] = a2;
    Espresso::single_match_replace<Espresso::generic_pool_kernel>(a2, &v821);
    uint64_t v641 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v641)
    {
      uint64_t v642 = 0;
      unint64_t v643 = 0;
      do
      {
        uint64_t v644 = *(void *)(v641 + v642);
        v645 = *(void **)(v644 + 64);
        if (!v704 || (Espresso::ANECompilerEngine::context *)v645[1] == v704)
        {
          if (v646)
          {
            v647 = v646;
            v648 = *(std::__shared_weak_count **)(v644 + 72);
            if (v648) {
              atomic_fetch_add_explicit(&v648->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v649 = (*(uint64_t (**)(void *))(*v646 + 320))(v646);
            if (!*(unsigned char *)((*(uint64_t (**)(void *))(*v647 + 344))(v647) + 40)
              && *(_DWORD *)v649 <= 0x21u
              && ((1 << *(_DWORD *)v649) & 0x200C00001) != 0)
            {
              uint64_t v651 = v647[50];
              if (v651)
              {
                if (*(_DWORD *)(v651 + 8) == 1)
                {
                  *(float *)(v649 + 8) = **(float **)(v651 + 16) * *(float *)(v649 + 8);
                  *(unsigned char *)((*(uint64_t (**)(void *))(*v647 + 344))(v647) + 40) = 1;
                }
              }
            }
            if (v648) {
              nitro::nitro_function::nitro_function(v648);
            }
          }
        }
        ++v643;
        uint64_t v641 = *((void *)a2 + 4);
        v642 += 16;
      }
      while (v643 < (*((void *)a2 + 5) - v641) >> 4);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v821, "experimental.ane.use_custom_activation_lut");
  std::string::basic_string[abi:ne180100]<0>(&v777, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)v680, (uint64_t)&v821, (uint64_t)&v777, (std::string *)__p);
  if (SHIBYTE(v777.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v777.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v822) < 0) {
    operator delete((void *)v821);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    if (*(void *)&__p[8] == 1)
    {
      v653 = *(unsigned char **)__p;
LABEL_1369:
      if (*v653 == 49)
      {
        *(void *)&long long v821 = MEMORY[0x1E4F143A8];
        *((void *)&v821 + 1) = 3221225472;
        *(void *)&long long v822 = ___ZN8Espresso17ANECompilerEngine7context32handle_quantized_activation_lutsEPNS_3netEPS1__block_invoke;
        *((void *)&v822 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
        *(void *)v823 = v704;
        *(void *)&v823[8] = a2;
        Espresso::single_match_replace<Espresso::generic_activation_kernel>(a2, &v821);
      }
    }
  }
  else if (__p[23] == 1)
  {
    v653 = __p;
    goto LABEL_1369;
  }
  if ((Espresso::ANECompilerEngine::is_mix(v682, v652) & 1) == 0)
  {
    *(void *)&long long v821 = MEMORY[0x1E4F143A8];
    *((void *)&v821 + 1) = 3221225472;
    *(void *)&long long v822 = ___ZN8Espresso17ANECompilerEngine7context33cross_correlation_use_anec_layoutEPNS_3netEPS1__block_invoke;
    *((void *)&v822 + 1) = &__block_descriptor_48_e9_v16__0_v8l;
    *(void *)v823 = v704;
    *(void *)&v823[8] = a2;
    Espresso::single_match_replace<Espresso::generic_convolution_kernel>(a2, &v821);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v705.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v705.__r_.__value_.__l.__data_);
  }
}

void sub_19223D8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (STACK[0x280]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x280]);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (STACK[0x4F8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x4F8]);
  }
  if (STACK[0x310]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x310]);
  }
  if (STACK[0x348]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x348]);
  }
  if (STACK[0x528]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x528]);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 232);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  uint64_t v26 = (void *)STACK[0x488];
  if (STACK[0x488])
  {
    STACK[0x490] = (unint64_t)v26;
    operator delete(v26);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }

  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context42transform_network_refactor_large_conv_padsEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v74 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    for (int i = 0; ; ++i)
    {
      uint64_t v7 = *(void *)(a1 + 40) + 56;
      unint64_t v64 = a2[3].i32[2];
      uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v64, &v64);
      if (v8[4] - v8[3] != 24) {
        return;
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
      uint64_t v11 = (int16x4_t *)v9;
      if (*(_WORD *)(v9 + 72)) {
        return;
      }
      if (*(_WORD *)(v9 + 74)) {
        return;
      }
      if (*(float *)(v9 + 76) >= 1.1755e-38) {
        return;
      }
      v12.i32[0] = *(__int16 *)(v9 + 96);
      v12.i32[1] = *(__int16 *)(v9 + 98);
      *(int32x2_t *)v10.i8 = vmul_s32(vadd_s32(*(int32x2_t *)(v9 + 48), (int32x2_t)-1), v12);
      uint64_t v49 = v10.i64[0];
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vcgtq_s32(vmovl_s16(*(int16x4_t *)(v9 + 80)), vzip1q_s32(v10, v10))), 0xFuLL))) & 1) == 0)return; {
      Espresso::ANECompilerEngine::ane_arch_allow_network_override(*(void *)(a1 + 40) + 472);
      }
      uint64_t v13 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
      if (Espresso::ANECompilerEngine::is_mix(v13, v14)) {
        int v15 = 6;
      }
      else {
        int v15 = 12;
      }
      long long v67 = 0u;
      memset(v68, 0, sizeof(v68));
      long long v66 = 0u;
      unint64_t v64 = (unint64_t)v11[9];
      int v16 = v11[10].i16[0];
      BOOL v17 = __OFSUB__(v16, v49);
      int v18 = v16 - v49;
      if ((v18 < 0) ^ v17 | (v18 == 0)) {
        int v18 = 0;
      }
      if (v15 < v18) {
        LOWORD(v18) = v15;
      }
      v65.i16[0] = v18;
      int v19 = v11[10].i16[1];
      int v20 = v19 - v49;
      if (v19 <= (int)v49) {
        int v20 = 0;
      }
      int v21 = v15 - (__int16)v18;
      if (v21 >= v20) {
        LOWORD(v21) = v20;
      }
      v65.i16[1] = v21;
      int v22 = v11[10].i16[2];
      BOOL v17 = __OFSUB__(v22, HIDWORD(v49));
      int v23 = v22 - HIDWORD(v49);
      if ((v23 < 0) ^ v17 | (v23 == 0)) {
        int v23 = 0;
      }
      if (v15 < v23) {
        LOWORD(v23) = v15;
      }
      v65.i16[2] = v23;
      int v24 = v11[10].i16[3];
      int v25 = v24 - HIDWORD(v49);
      if (v24 <= SHIDWORD(v49)) {
        int v25 = 0;
      }
      int v26 = v15 - (__int16)v23;
      if (v26 >= v25) {
        LOWORD(v26) = v25;
      }
      v65.i16[3] = v26;
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v29 = *(void *)(v27 + 16);
      long long v28 = *(std::__shared_weak_count **)(v27 + 24);
      uint64_t v62 = v29;
      unint64_t v63 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::abstract_engine_factory::shared(&v60);
      uint64_t v30 = v60;
      std::string::basic_string[abi:ne180100]<0>(&__p, "general_padding");
      LODWORD(__str.__r_.__value_.__l.__data_) = (***(uint64_t (****)(void))(v62 + 8))(*(void *)(v62 + 8));
      Espresso::abstract_engine_factory::make_kernel_priv(v30, (uint64_t)&v62, (uint64_t)&__p, (uint64_t)&v64, (int *)&__str);
      if (!lpsrc.__r_.__value_.__r.__words[0]) {
        break;
      }
      if (!v31) {
        goto LABEL_40;
      }
      std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (!lpsrc.__r_.__value_.__l.__size_) {
        goto LABEL_43;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
LABEL_41:
      if (lpsrc.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
      }
LABEL_43:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v33 = *(void *)(a1 + 40);
      unint64_t v34 = a2[3].i32[2];
      uint64_t v35 = *(void *)(*(void *)(v33 + 32) + 16 * v34);
      if (*(char *)(v35 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v35 + 16), *(void *)(v35 + 24));
        uint64_t v33 = *(void *)(a1 + 40);
        unint64_t v34 = a2[3].i32[2];
      }
      else
      {
        std::string __p = *(std::string *)(v35 + 16);
      }
      __str.__r_.__value_.__r.__words[0] = v34;
      int v36 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33 + 56, v34, &__str)[3];
      if (*((char *)v36 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)v36, *((void *)v36 + 1));
      }
      else
      {
        long long v37 = *v36;
        lpsrc.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
        *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v38 = __p.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v56, v38 + 19);
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v39 = &v56;
      }
      else {
        int v39 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v39, p_p, v38);
      }
      strcpy((char *)v39 + v38, "__@general_padding_");
      std::to_string(&v55, i);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v41 = &v55;
      }
      else {
        uint64_t v41 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v42 = v55.__r_.__value_.__l.__size_;
      }
      uint64_t v43 = std::string::append(&v56, (const std::string::value_type *)v41, v42);
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      uint64_t v45 = *(void *)(a1 + 40) + 56;
      unint64_t v46 = a2[3].i32[2];
      v56.__r_.__value_.__r.__words[0] = v46;
      long long v47 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v45, v46, &v56);
      std::string::operator=((std::string *)v47[3], &__str);
      long long v53 = v31;
      int v54 = size;
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v56, "general_padding");
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v73, lpsrc.__r_.__value_.__l.__data_, lpsrc.__r_.__value_.__l.__size_);
      }
      else {
        std::string v73 = lpsrc;
      }
      memset(&v55, 0, sizeof(v55));
      uint64_t v50 = &v55;
      LOBYTE(v51) = 0;
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
      v55.__r_.__value_.__r.__words[2] = v55.__r_.__value_.__r.__words[0] + 24;
      v55.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v55.__r_.__value_.__r.__words[2], (long long *)&v73, &v74, (std::string *)v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v71, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v71 = __str;
      }
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      p_std::string::pointer data = 0;
      uint64_t v69 = &v50;
      char v70 = 0;
      uint64_t v50 = (std::string *)operator new(0x18uLL);
      uint64_t v51 = v50;
      p_std::string::pointer data = (void **)&v50[1].__r_.__value_.__l.__data_;
      uint64_t v51 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v71, (long long *)&v72, v50);
      Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, &v53, &v56, &__str, (std::string **)&v55, &v50, 1);
      uint64_t v69 = &v50;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      uint64_t v50 = &v55;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (v54) {
        nitro::nitro_function::nitro_function(v54);
      }
      v11[10] = vsub_s16(v11[10], v65);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!size) {
          goto LABEL_95;
        }
LABEL_94:
        nitro::nitro_function::nitro_function(size);
        goto LABEL_95;
      }
      if (size) {
        goto LABEL_94;
      }
LABEL_95:
      if (v61) {
        nitro::nitro_function::nitro_function(v61);
      }
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }

      uint64_t v48 = *(void *)(a1 + 32);
      if (*(void *)(a2->i64[0] + 8) != v48 && v48) {
        return;
      }
    }
    uint64_t v31 = 0;
LABEL_40:
    std::string::size_type size = 0;
    goto LABEL_41;
  }
}

void sub_19223F130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,std::__shared_weak_count *a55,uint64_t a56,std::__shared_weak_count *a57)
{
  a16 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a16);
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (a55) {
    nitro::nitro_function::nitro_function(a55);
  }
  if (a57) {
    nitro::nitro_function::nitro_function(a57);
  }

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::elementwise_kernel::get_anec_lowering_hint(Espresso::ANECompilerEngine::elementwise_kernel *this)
{
  return (uint64_t)this + 552;
}

void ___ZN8Espresso17ANECompilerEngine7context23split_4x4_deconvolutionEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v200 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) == v2 || v2 == 0)
  {
    int v6 = *(void **)(a1 + 40);
    uint64_t v7 = (std::__shared_weak_count *)v6[3];
    uint64_t v159 = v6[2];
    long long v160 = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      int v6 = *(void **)(a1 + 40);
    }
    uint64_t v8 = *(void *)(v6[4] + 16 * a2[3].i32[2]);
    if (*(char *)(v8 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)(v8 + 16), *(void *)(v8 + 24));
    }
    else {
      std::string v158 = *(std::string *)(v8 + 16);
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
    if (*(_WORD *)(v9 + 92) == 4 && *(_WORD *)(v9 + 94) == 4 && *(unsigned __int16 *)(v9 + 72) < 2u)
    {
      uint64_t v12 = *(void *)(a1 + 40) + 56;
      unint64_t v13 = a2[3].i32[2];
      *(void *)&long long v177 = v13;
      int v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v13, &v177);
      if (v14[4] - v14[3] == 24)
      {
        uint64_t v15 = *(void *)(a1 + 40) + 96;
        unint64_t v16 = a2[3].i32[2];
        *(void *)&long long v152 = v16;
        BOOL v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v16, &v152);
        if (v17[4] - v17[3] == 24)
        {
          uint64_t v18 = *(void *)(a1 + 40);
          unint64_t v19 = a2[3].i32[2];
          *(void *)&v147[0] = v19;
          *(void *)&long long v177 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v18 + 56, v19, v147)[3];
          int v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v18 + 184), (void *)v177, (long long **)&v177);
          long long v21 = *(_OWORD *)(v20 + 72);
          long long v152 = *(_OWORD *)(v20 + 56);
          long long v153 = v21;
          int v22 = (const void *)*((void *)v20 + 12);
          uint64_t v154 = *((void *)v20 + 11);
          unint64_t v155 = 0;
          long long v156 = 0;
          uint64_t v157 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v155, v22, *((void *)v20 + 13), (uint64_t)(*((void *)v20 + 13) - (void)v22) >> 2);
          uint64_t v23 = *(void *)(a1 + 40);
          unint64_t v24 = a2[3].i32[2];
          *(void *)&long long v177 = v24;
          int v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v23 + 96, v24, &v177);
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v23 + 192), (void *)v25[3]))
          {
            uint64_t v26 = a2->i64[0];
            long long v177 = v152;
            long long v178 = v153;
            uint64_t v179 = v154;
            memset(__p, 0, sizeof(__p));
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v155, (uint64_t)v156, (v156 - (unsigned char *)v155) >> 2);
            v122[0] = 0;
            v122[1] = 0;
            *(void *)&long long v123 = 0;
            *(void *)&long long v116 = v122;
            BYTE8(v116) = 0;
            v122[0] = operator new(0x40uLL);
            v122[1] = v122[0];
            *(void *)&long long v123 = (char *)v122[0] + 64;
            v122[1] = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v123, &v177, (long long *)&v181, (uint64_t)v122[0]);
            (*(void (**)(_OWORD *__return_ptr, uint64_t, void **))(*(void *)v26 + 64))(v147, v26, v122);
            uint64_t v27 = *(char **)&v147[0];
            uint64_t v28 = *(void *)(a1 + 40);
            unint64_t v29 = a2[3].i32[2];
            *(void *)&long long v116 = v29;
            *(void *)&long long v170 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v28 + 96, v29, &v116)[3];
            uint64_t v30 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v28 + 184), (void *)v170, (long long **)&v170);
            long long v31 = *(_OWORD *)v27;
            long long v32 = *((_OWORD *)v27 + 1);
            *((void *)v30 + 11) = *((void *)v27 + 4);
            *(_OWORD *)(v30 + 72) = v32;
            *(_OWORD *)(v30 + 56) = v31;
            if (v30 + 56 != v27) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30 + 96, *((char **)v27 + 5), *((void *)v27 + 6), (uint64_t)(*((void *)v27 + 6) - *((void *)v27 + 5)) >> 2);
            }
            *(void *)&long long v116 = v147;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
            *(void *)&long long v116 = v122;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          uint64_t v33 = *(void *)(a1 + 40);
          unint64_t v34 = a2[3].i32[2];
          v122[0] = (void *)v34;
          *(void *)&long long v177 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33 + 96, v34, v122)[3];
          uint64_t v35 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v33 + 184), (void *)v177, (long long **)&v177);
          long long v36 = *(_OWORD *)(v35 + 72);
          v147[0] = *(_OWORD *)(v35 + 56);
          v147[1] = v36;
          long long v37 = (const void *)*((void *)v35 + 12);
          uint64_t v148 = *((void *)v35 + 11);
          long long v149 = 0;
          uint64_t v150 = 0;
          uint64_t v151 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v149, v37, *((void *)v35 + 13), (uint64_t)(*((void *)v35 + 13) - (void)v37) >> 2);
          signed int v38 = *(_DWORD *)(v9 + 48);
          int v39 = v38 + (v152 - 1) * *(__int16 *)(v9 + 92) - LODWORD(v147[0]);
          unsigned int v40 = v39 & ~(v39 >> 31);
          unsigned int v41 = v40 >> 1;
          if ((int)(v40 >> 1) <= v38)
          {
            signed int v42 = v40 - (v40 >> 1);
            if (v42 <= v38)
            {
              signed int v43 = *(_DWORD *)(v9 + 52);
              int v44 = v43 + (DWORD1(v152) - 1) * *(__int16 *)(v9 + 94) - DWORD1(v147[0]);
              unsigned int v45 = v44 & ~(v44 >> 31);
              unsigned int v46 = v45 >> 1;
              if ((int)(v45 >> 1) <= v43)
              {
                signed int v47 = v45 - (v45 >> 1);
                if (v47 <= v43)
                {
                  HIDWORD(__p[2]) = -1;
                  __asm { FMOV            V0.2S, #1.0 }
                  uint64_t v181 = _D0;
                  long long v183 = 0uLL;
                  __int16 v184 = 0;
                  int v190 = 1;
                  int v198 = 0;
                  char v199 = 0;
                  uint64_t v195 = 0;
                  uint64_t v194 = 0;
                  long long v177 = 0uLL;
                  int v186 = 0;
                  uint64_t v187 = 0;
                  int v188 = 0;
                  uint64_t v191 = 0;
                  __int16 v193 = 1;
                  __int16 v192 = 0;
                  long long v178 = 0uLL;
                  int v196 = 0;
                  __int16 v197 = 1;
                  *(_OWORD *)((char *)__p + 4) = xmmword_192DCA640;
                  uint64_t v185 = 0x1000100020002;
                  int v189 = *(_DWORD *)(v9 + 44);
                  HIDWORD(__p[0]) = v189;
                  LODWORD(__p[0]) = *(_DWORD *)(v9 + 44);
                  uint64_t v179 = 0;
                  __int16 v182 = 0;
                  *(void *)((char *)&v183 + 6) = 0;
                  Espresso::abstract_engine_factory::shared(&v170);
                  uint64_t v51 = v170;
                  std::string::basic_string[abi:ne180100]<0>(v122, "deconvolution");
                  LODWORD(v163[0]) = (***(uint64_t (****)(void))(v159 + 8))(*(void *)(v159 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v51, (uint64_t)&v159, (uint64_t)v122, (uint64_t)&v177, (int *)v163);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::base_kernel>(&lpsrc, (void *)v116, *((uint64_t *)&v116 + 1));
                  if (*((void *)&v116 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v116 + 1));
                  }
                  if (SBYTE7(v123) < 0) {
                    operator delete(v122[0]);
                  }
                  __int16 v105 = v47;
                  if (*((void *)&v170 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v170 + 1));
                  }
                  uint64_t v52 = lpsrc;
                  uint64_t v53 = v146;
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::ANECompilerEngine::deconvolution_kernel,Espresso::generic_deconvolution_kernel>(&v143, lpsrc, v146);
                  uint64_t v109 = (std::__shared_weak_count *)v53;
                  (*(void (**)(uint64_t *__return_ptr, void *))(*(void *)v52 + 488))(&v141, v52);
                  __int16 v101 = v46;
                  __int16 v102 = v42;
                  __int16 v103 = v41;
                  uint64_t v104 = v9;
                  uint64_t v107 = a1;
                  long long v176 = xmmword_192DCA650;
                  uint64_t v106 = v52;
                  (*(void (**)(void **__return_ptr, void *))(*(void *)v52 + 472))(v122, v52);
                  int v110 = v122[0];
                  uint64_t v108 = (std::__shared_weak_count *)v122[1];
                  uint64_t v54 = LODWORD(__p[0]);
                  if (SLODWORD(__p[0]) >= 1)
                  {
                    uint64_t v55 = 0;
                    uint64_t v111 = *((void *)v122[0] + 3);
                    int v56 = (int)__p[1];
                    uint64_t v57 = HIDWORD(__p[1]);
                    int v58 = LODWORD(__p[1]) * HIDWORD(__p[1]);
                    size_t v59 = 4 * LODWORD(__p[1]);
                    do
                    {
                      if ((int)v57 >= 1)
                      {
                        int v60 = 0;
                        uint64_t v61 = v57;
                        do
                        {
                          if (v56 >= 1) {
                            memcpy((void *)(v111 + 4 * v58 * (int)v55 + 4 * v60), (char *)&v176 + 4 * v60, v59);
                          }
                          v60 += v56;
                          --v61;
                        }
                        while (v61);
                      }
                      ++v55;
                    }
                    while (v55 != v54);
                  }
                  uint64_t v62 = *(int *)(v141 + 8);
                  if (v62) {
                    bzero(*(void **)(v141 + 16), 4 * v62);
                  }
                  uint64_t v139 = v110;
                  uint64_t v140 = v108;
                  if (v108) {
                    atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(void *, void **))(*(void *)v106 + 400))(v106, &v139);
                  if (v140) {
                    nitro::nitro_function::nitro_function(v140);
                  }
                  uint64_t v137 = v141;
                  unint64_t v138 = v142;
                  if (v142) {
                    atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(void *, uint64_t *))(*(void *)v106 + 392))(v106, &v137);
                  if (v138) {
                    nitro::nitro_function::nitro_function(v138);
                  }
                  long long v136 = xmmword_192DCA660;
                  Espresso::abstract_engine_factory::shared(&v170);
                  uint64_t v63 = v170;
                  std::string::basic_string[abi:ne180100]<0>(v122, "crop");
                  LODWORD(v163[0]) = (***(uint64_t (****)(void))(v159 + 8))(*(void *)(v159 + 8));
                  Espresso::abstract_engine_factory::make_kernel_priv(v63, (uint64_t)&v159, (uint64_t)v122, (uint64_t)&v136, (int *)v163);
                  std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_crop_kernel,Espresso::base_kernel>(&v134, (void *)v116, *((uint64_t *)&v116 + 1));
                  if (*((void *)&v116 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v116 + 1));
                  }
                  if (SBYTE7(v123) < 0) {
                    operator delete(v122[0]);
                  }
                  if (*((void *)&v170 + 1)) {
                    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v170 + 1));
                  }
                  *(_WORD *)(v104 + 84) = v101;
                  *(_WORD *)(v104 + 86) = v105;
                  *(_WORD *)(v104 + 80) = v103;
                  *(_WORD *)(v104 + 82) = v102;
                  *(_WORD *)(v104 + 72) = 0;
                  *(_DWORD *)(v104 + 92) = 131074;
                  uint64_t v64 = *(void *)(v107 + 40) + 56;
                  unint64_t v65 = a2[3].i32[2];
                  v122[0] = (void *)v65;
                  long long v66 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v64, v65, v122)[3];
                  if (*((char *)v66 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)v66, *((void *)v66 + 1));
                  }
                  else
                  {
                    long long v67 = *v66;
                    v133.__r_.__value_.__r.__words[2] = *((void *)v66 + 2);
                    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v67;
                  }
                  uint64_t v68 = *(void *)(v107 + 40) + 96;
                  unint64_t v69 = a2[3].i32[2];
                  v122[0] = (void *)v69;
                  char v70 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v68, v69, v122);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@deconv0", (const void **)v70[3], &v132);
                  uint64_t v71 = *(void *)(v107 + 40) + 96;
                  unint64_t v72 = a2[3].i32[2];
                  v122[0] = (void *)v72;
                  std::string v73 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v71, v72, v122);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("__@crop", (const void **)v73[3], &__str);
                  uint64_t v74 = *(void *)(v107 + 40) + 96;
                  unint64_t v75 = a2[3].i32[2];
                  v122[0] = (void *)v75;
                  uint64_t v76 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v74, v75, v122)[3];
                  if (*((char *)v76 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v76, *((void *)v76 + 1));
                  }
                  else
                  {
                    long long v77 = *v76;
                    v130.__r_.__value_.__r.__words[2] = *((void *)v76 + 2);
                    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v77;
                  }
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_deconv0", (const void **)(*(void *)(*(void *)(*(void *)(v107 + 40) + 32) + 16 * a2[3].i32[2]) + 16), &v129);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("_crop", (const void **)(*(void *)(*(void *)(*(void *)(v107 + 40) + 32) + 16 * a2[3].i32[2]) + 16), &v128);
                  uint64_t v78 = *(void *)(v107 + 40);
                  unint64_t v79 = a2[3].i32[2];
                  *(void *)&long long v170 = v79;
                  *(void *)&long long v116 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v78 + 56, v79, &v170)[3];
                  char v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v78 + 184), (void *)v116, (long long **)&v116);
                  long long v81 = *(_OWORD *)(v80 + 72);
                  *(_OWORD *)int64_t v122 = *(_OWORD *)(v80 + 56);
                  long long v123 = v81;
                  char v82 = (const void *)*((void *)v80 + 12);
                  std::string::size_type v124 = *((void *)v80 + 11);
                  int v125 = 0;
                  unint64_t v126 = 0;
                  uint64_t v127 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v125, v82, *((void *)v80 + 13), (uint64_t)(*((void *)v80 + 13) - (void)v82) >> 2);
                  long long v170 = *(_OWORD *)v122;
                  long long v171 = v123;
                  std::string::size_type v172 = v124;
                  std::string __src = 0;
                  uint64_t v175 = 0;
                  long long v174 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, v125, (uint64_t)v126, (v126 - (unsigned char *)v125) >> 2);
                  std::vector<Espresso::layer_shape>::vector[abi:ne180100](v115, &v170, 1uLL);
                  (*(void (**)(void **__return_ptr, void *, std::string **))(*(void *)v106 + 64))(v163, v106, v115);
                  uint64_t v83 = *((void *)v163[0] + 4);
                  long long v84 = *((_OWORD *)v163[0] + 1);
                  long long v116 = *(_OWORD *)v163[0];
                  long long v117 = v84;
                  uint64_t v118 = v83;
                  uint64_t v119 = 0;
                  unint64_t v120 = 0;
                  uint64_t v121 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v119, *((const void **)v163[0] + 5), *((void *)v163[0] + 6), (uint64_t)(*((void *)v163[0] + 6) - *((void *)v163[0] + 5)) >> 2);
                  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)v163;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
                  v169.__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
                  if (__src)
                  {
                    long long v174 = __src;
                    operator delete(__src);
                  }
                  uint64_t v85 = v134;
                  *(_OWORD *)unint64_t v163 = v116;
                  long long v164 = v117;
                  uint64_t v165 = v118;
                  uint64_t v166 = 0;
                  uint64_t v168 = 0;
                  int v167 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v166, v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
                  std::vector<Espresso::layer_shape>::vector[abi:ne180100](&v169, (long long *)v163, 1uLL);
                  (*(void (**)(std::string **__return_ptr, uint64_t, std::string *))(*(void *)v85 + 64))(v115, v85, &v169);
                  std::string::size_type size = v115[0][1].__r_.__value_.__l.__size_;
                  long long v87 = *(_OWORD *)&v115[0]->__r_.__value_.__r.__words[2];
                  long long v170 = *(_OWORD *)v115[0];
                  long long v171 = v87;
                  std::string::size_type v172 = size;
                  std::string __src = 0;
                  uint64_t v175 = 0;
                  long long v174 = 0;
                  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, (const void *)v115[0][1].__r_.__value_.__r.__words[2], (uint64_t)v115[0][2].__r_.__value_.__l.__data_, (uint64_t)(v115[0][2].__r_.__value_.__r.__words[0] - v115[0][1].__r_.__value_.__r.__words[2]) >> 2);
                  v112[0] = (void **)v115;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v112);
                  v112[0] = (void **)&v169;
                  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v112);
                  if (v166)
                  {
                    int v167 = v166;
                    operator delete(v166);
                  }
                  int v88 = (uint64_t **)(*(void *)(v107 + 40) + 184);
                  v163[0] = &v132;
                  int v89 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88, &v132, (long long **)v163);
                  long long v90 = v117;
                  *(_OWORD *)(v89 + 56) = v116;
                  *(_OWORD *)(v89 + 72) = v90;
                  *((void *)v89 + 11) = v118;
                  if (v89 + 56 != (char *)&v116) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v89 + 96, (char *)v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
                  }
                  uint64_t v91 = (uint64_t **)(*(void *)(v107 + 40) + 184);
                  v163[0] = &__str;
                  uint64_t v92 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v91, &__str, (long long **)v163);
                  long long v93 = v171;
                  *(_OWORD *)(v92 + 56) = v170;
                  *(_OWORD *)(v92 + 72) = v93;
                  *((void *)v92 + 11) = v172;
                  if (v92 + 56 != (char *)&v170) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v92 + 96, (char *)__src, (uint64_t)v174, (v174 - (unsigned char *)__src) >> 2);
                  }
                  v114[0] = v106;
                  v114[1] = v109;
                  if (v109) {
                    atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v163, "deconvolution");
                  uint64_t v94 = *(void *)(v107 + 40) + 56;
                  unint64_t v95 = a2[3].i32[2];
                  v162.__r_.__value_.__r.__words[0] = v95;
                  uint64_t v96 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v94, v95, &v162);
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v169, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v169 = v132;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (long long *)&v169, 1uLL);
                  Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(a2, v114, (const std::string *)v163, &v129, v96 + 3, v115);
                  v112[0] = (void **)v115;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v112);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v169.__r_.__value_.__l.__data_);
                  }
                  if (SBYTE7(v164) < 0) {
                    operator delete(v163[0]);
                  }
                  if (v109) {
                    nitro::nitro_function::nitro_function(v109);
                  }
                  int64_t v97 = v135;
                  v113[0] = v85;
                  v113[1] = v135;
                  if (v135) {
                    atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(v163, "crop");
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v169, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v169 = v132;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (long long *)&v169, 1uLL);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v162, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v162 = __str;
                  }
                  std::vector<std::string>::vector[abi:ne180100]((uint64_t)v112, (long long *)&v162, 1uLL);
                  Espresso::single_match_state<Espresso::generic_deconvolution_kernel>::add_kernel(a2, v113, (const std::string *)v163, &v128, v115, (std::string **)v112);
                  uint64_t v161 = v112;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
                  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v162.__r_.__value_.__l.__data_);
                  }
                  v112[0] = (void **)v115;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v112);
                  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v169.__r_.__value_.__l.__data_);
                  }
                  if (SBYTE7(v164) < 0) {
                    operator delete(v163[0]);
                  }
                  if (v97) {
                    nitro::nitro_function::nitro_function(v97);
                  }
                  uint64_t v98 = *(void *)(v107 + 40) + 56;
                  unint64_t v99 = a2[3].i32[2];
                  v163[0] = (void *)v99;
                  int64_t v100 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v98, v99, v163);
                  std::string::operator=((std::string *)v100[3], &__str);
                  if (__src)
                  {
                    long long v174 = __src;
                    operator delete(__src);
                  }
                  if (v119)
                  {
                    unint64_t v120 = v119;
                    operator delete(v119);
                  }
                  if (v125)
                  {
                    unint64_t v126 = v125;
                    operator delete(v125);
                  }
                  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v128.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v129.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v130.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v132.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v133.__r_.__value_.__l.__data_);
                  }
                  if (v97) {
                    nitro::nitro_function::nitro_function(v97);
                  }
                  if (v142) {
                    nitro::nitro_function::nitro_function(v142);
                  }
                  if (v144) {
                    nitro::nitro_function::nitro_function(v144);
                  }
                  if (v108) {
                    nitro::nitro_function::nitro_function(v108);
                  }
                  if (v109) {
                    nitro::nitro_function::nitro_function(v109);
                  }
                }
              }
            }
          }
          if (v149)
          {
            uint64_t v150 = v149;
            operator delete(v149);
          }
          if (v155)
          {
            long long v156 = v155;
            operator delete(v155);
          }
        }
      }
    }
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v158.__r_.__value_.__l.__data_);
    }
    if (v160) {
      nitro::nitro_function::nitro_function(v160);
    }
  }
}

void sub_192240260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  a21 = (uint64_t)&a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  uint64_t v78 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v78;
    operator delete(v78);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a71 < 0) {
    operator delete(a66);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a76) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a76);
  }
  if (STACK[0x218]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x218]);
  }
  if (STACK[0x228]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x228]);
  }
  if (a17)
  {
    nitro::nitro_function::nitro_function(a17);
    a18 = (std::__shared_weak_count *)STACK[0x238];
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  unint64_t v79 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v79;
    operator delete(v79);
  }
  char v80 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v80;
    operator delete(v80);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (STACK[0x2E0]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2E0]);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::context::handle_cast_kernel(Espresso::ANECompilerEngine::context *this, Espresso::net *a2, Espresso::ANECompilerEngine::context *a3)
{
  v52[0] = *MEMORY[0x1E4F143B8];
  unint64_t v34 = a2;
  uint64_t v35 = this;
  long long v39 = 0u;
  long long v40 = 0u;
  LODWORD(v41[0]) = 1065353216;
  Espresso::net::get_consumers_of_blobs(this, &v39, (uint64_t)v33);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v39);
  Espresso::net::get_producers_of_blobs(this, (uint64_t)__p);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3321888768;
  uint64_t v26 = ___ZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1__block_invoke;
  uint64_t v27 = &__block_descriptor_64_ea8_32c82_ZTSKZN8Espresso17ANECompilerEngine7context18handle_cast_kernelEPNS_3netEPS1_E3__0_e9_v16__0_v8l;
  uint64_t v28 = &v34;
  unint64_t v29 = &v35;
  uint64_t v30 = v33;
  long long v31 = __p;
  uint64_t v4 = v25;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v42, this);
  long long v40 = 0u;
  memset(v41, 0, 28);
  long long v39 = 0u;
  v41[4] = this;
  uint64_t v5 = *((void *)this + 4);
  if (*((void *)this + 5) != v5)
  {
    unint64_t v6 = 0;
    do
    {
      LODWORD(v41[3]) = v6;
      long long v7 = *(_OWORD *)(v5 + 16 * v6);
      uint64_t v8 = *(void *)(v5 + 16 * v6 + 8);
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)&v40 + 1);
      long long v40 = v7;
      if (v9)
      {
        nitro::nitro_function::nitro_function(v9);
        uint64_t v10 = v40;
      }
      else
      {
        uint64_t v10 = v7;
      }
      uint64_t v11 = *(void **)(v10 + 64);
      if (v11
      {
        uint64_t v12 = *(void *)(v10 + 72);
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      unint64_t v13 = (std::__shared_weak_count *)*((void *)&v39 + 1);
      *(void *)&long long v39 = v11;
      *((void *)&v39 + 1) = v12;
      if (v13)
      {
        nitro::nitro_function::nitro_function(v13);
        uint64_t v11 = (void *)v39;
      }
      if (v11) {
        v26((uint64_t)v4, (int64x2_t *)&v39);
      }
      ++v6;
      uint64_t v5 = *((void *)this + 4);
    }
    while (v6 < (*((void *)this + 5) - v5) >> 4);
    int v14 = (uint64_t *)v41[1];
    if (v41[0] != v41[1])
    {
      unint64_t v24 = v4;
      int v15 = 0;
      unint64_t v16 = (uint64_t *)(v41[0] + 32);
      do
      {
        BOOL v17 = v16 - 4;
        int v18 = *((_DWORD *)v16 - 8) + v15;
        *((_DWORD *)v16 - 8) = v18;
        unint64_t v19 = (void **)*(v16 - 3);
        if (v19)
        {
          LODWORD(v48[0]) = v18;
          v48[1] = v19;
          int v20 = (std::__shared_weak_count *)*(v16 - 2);
          uint64_t v49 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(v16 - 1), *v16, 0xAAAAAAAAAAAAAAABLL * ((*v16 - *(v16 - 1)) >> 3));
          memset(v51, 0, sizeof(v51));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v51, v16[2], v16[3], 0xAAAAAAAAAAAAAAABLL * ((v16[3] - v16[2]) >> 3));
          long long v36 = 0;
          long long v37 = 0;
          signed int v38 = 0;
          unsigned int v46 = (void **)&v36;
          char v47 = 0;
          long long v36 = (uint64_t *)operator new(0x48uLL);
          long long v37 = v36;
          signed int v38 = v36 + 9;
          long long v37 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v38, (uint64_t)v48, (uint64_t)v52, (uint64_t)v36);
          Espresso::net::insert_layers((uint64_t)this, &v36);
          unsigned int v46 = (void **)&v36;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v46);
          unsigned int v46 = (void **)v51;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v46);
          unsigned int v46 = (void **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v46);
          if (v49) {
            nitro::nitro_function::nitro_function(v49);
          }
          int v21 = 1;
        }
        else
        {
          Espresso::net::remove_layer(this, v18);
          int v21 = -1;
        }
        v15 += v21;
        v16 += 9;
      }
      while (v17 + 9 != v14);
      uint64_t v4 = v24;
    }
  }
  v48[0] = (void **)v41;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v48);
  if (*((void *)&v40 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v40 + 1));
  }
  if (*((void *)&v39 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v39 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v45);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  if (v43) {
    nitro::nitro_function::nitro_function(v43);
  }

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p[2]);
  int v22 = __p[0];
  __p[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v33[2]);
  uint64_t v23 = v33[0];
  v33[0] = 0;
  if (v23) {
    operator delete(v23);
  }
}

void sub_192240A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::workaround_split_restrictions_on_w_using_transpose(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C4E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0,std::allocator<Espresso::ANECompilerEngine::context::batch_inner_product_to_conv_like_mapping(Espresso::net *,Espresso::ANECompilerEngine::context*)::$_0>,BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EE37C488;
  a2[1] = v2;
  return result;
}

void Espresso::single_match_replace<Espresso::generic_pool_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    unint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      int v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        uint64_t v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          unint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          int v21 = 0;
          int v22 = 0;
          uint64_t v23 = 0;
          long long v31 = (void **)&v21;
          char v32 = 0;
          int v21 = (uint64_t *)operator new(0x48uLL);
          int v22 = v21;
          uint64_t v23 = v21 + 9;
          int v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          long long v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          long long v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_192240FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context20transform_l2_poolingEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 384))(a2->i64[0]);
  int v7 = *(_DWORD *)v6;
  int v8 = *(_DWORD *)(v6 + 4);
  int v9 = *(_DWORD *)(v6 + 8);
  long long v10 = *(_OWORD *)(v6 + 60);
  long long v11 = *(_OWORD *)(v6 + 92);
  long long v138 = *(_OWORD *)(v6 + 76);
  long long v139 = v11;
  int v140 = *(_DWORD *)(v6 + 108);
  long long v12 = *(_OWORD *)(v6 + 28);
  long long v134 = *(_OWORD *)(v6 + 12);
  long long v135 = v12;
  long long v136 = *(_OWORD *)(v6 + 44);
  long long v137 = v10;
  if (v7 != 2) {
    return;
  }
  Espresso::single_match_state<Espresso::generic_pool_kernel>::remove_layer(a2);
  uint64_t v13 = *(void *)(a1 + 40) + 96;
  *(void *)long long v174 = a2[3].i32[2];
  int v14 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, *(unint64_t *)v174, v174)[3];
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *v14;
    v133.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
    *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v15;
  }
  uint64_t v16 = *(void *)(a1 + 40) + 56;
  *(void *)long long v174 = a2[3].i32[2];
  int v17 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v16, *(unint64_t *)v174, v174)[3];
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    v132.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v18;
  }
  v128[2] = 897988541;
  char v129 = 0;
  int v131 = 0;
  int v130 = 0;
  v128[0] = 13;
  v128[1] = 0x40000000;
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v133.__r_.__value_.__l.__size_;
  }
  int v20 = &v126;
  std::string::basic_string[abi:ne180100]((uint64_t)&v126, size + 19);
  if (v127 < 0) {
    int v20 = (long long *)v126;
  }
  if (size)
  {
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = &v133;
    }
    else {
      int v21 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    memmove(v20, v21, size);
  }
  strcpy((char *)v20 + size, "__ew_pow@l2_pooling");
  uint64_t v22 = a2[1].i64[0];
  if (*(char *)(v22 + 39) >= 0) {
    size_t v23 = *(unsigned __int8 *)(v22 + 39);
  }
  else {
    size_t v23 = *(void *)(v22 + 24);
  }
  long long v24 = &v125;
  std::string::basic_string[abi:ne180100]((uint64_t)&v125, v23 + 19);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v24 = (std::string *)v125.__r_.__value_.__r.__words[0];
  }
  if (v23)
  {
    if (*(char *)(v22 + 39) >= 0) {
      long long v25 = (const void *)(v22 + 16);
    }
    else {
      long long v25 = *(const void **)(v22 + 16);
    }
    memmove(v24, v25, v23);
  }
  strcpy((char *)v24 + v23, "__ew_pow@l2_pooling");
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v28 = *(void *)(v26 + 16);
  uint64_t v27 = *(std::__shared_weak_count **)(v26 + 24);
  uint64_t v123 = v28;
  std::string::size_type v124 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_engine_factory::shared(v169);
  uint64_t v29 = *(void *)v169;
  std::string::basic_string[abi:ne180100]<0>(v174, "elementwise");
  LODWORD(v163) = (***(uint64_t (****)(void))(v123 + 8))(*(void *)(v123 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v29, (uint64_t)&v123, (uint64_t)v174, (uint64_t)v128, (int *)&v163);
  if (!(void)lpsrc)
  {
    uint64_t v30 = 0;
    goto LABEL_40;
  }
  if (!v30)
  {
LABEL_40:
    long long v31 = 0;
    goto LABEL_41;
  }
  long long v31 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
  if (*((void *)&lpsrc + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
  }
LABEL_41:
  if (*((void *)&lpsrc + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if ((v174[23] & 0x80000000) != 0) {
    operator delete(*(void **)v174);
  }
  if (*(void *)&v169[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v169[8]);
  }
  v122[0] = v30;
  v122[1] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v98 = v31;
  std::string::basic_string[abi:ne180100]<0>(v174, "elementwise");
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v169, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string v169 = v132;
  }
  long long lpsrc = 0uLL;
  *(void *)&long long v117 = 0;
  *(void *)&long long v163 = &lpsrc;
  BYTE8(v163) = 0;
  *(void *)&long long lpsrc = operator new(0x18uLL);
  *((void *)&lpsrc + 1) = lpsrc;
  *(void *)&long long v117 = lpsrc + 24;
  *((void *)&lpsrc + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v117, (long long *)v169, (long long *)&v169[24], (std::string *)lpsrc);
  if (SHIBYTE(v127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v152, (const std::string::value_type *)v126, *((std::string::size_type *)&v126 + 1));
  }
  else
  {
    *(_OWORD *)long long v152 = v126;
    *(void *)&v152[16] = v127;
  }
  long long v163 = 0uLL;
  *(void *)&long long v164 = 0;
  *(void *)uint64_t v143 = &v163;
  v143[8] = 0;
  *(void *)&long long v163 = operator new(0x18uLL);
  *((void *)&v163 + 1) = v163;
  *(void *)&long long v164 = v163 + 24;
  *((void *)&v163 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v164, (long long *)v152, (long long *)&v152[24], (std::string *)v163);
  Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v122, (const std::string *)v174, &v125, (std::string **)&lpsrc, (std::string **)&v163);
  *(void *)uint64_t v143 = &v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
  if ((v152[23] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
  *(void *)&long long v163 = &lpsrc;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
  if ((v169[23] & 0x80000000) != 0) {
    operator delete(*(void **)v169);
  }
  if ((v174[23] & 0x80000000) != 0) {
    operator delete(*(void **)v174);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  char v32 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)long long v152 = &v132;
  uint64_t v33 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v32, &v132, (long long **)v152);
  long long v34 = *(_OWORD *)(v33 + 72);
  *(_OWORD *)long long v174 = *(_OWORD *)(v33 + 56);
  *(_OWORD *)&v174[16] = v34;
  uint64_t v35 = (const void *)*((void *)v33 + 12);
  *(void *)&v174[32] = *((void *)v33 + 11);
  memset(&v174[40], 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v174[40], v35, *((void *)v33 + 13), (uint64_t)(*((void *)v33 + 13) - (void)v35) >> 2);
  long long v163 = 0uLL;
  *(void *)&long long v164 = 0;
  *(void *)long long v152 = &v163;
  v152[8] = 0;
  *(void *)&long long v163 = operator new(0x40uLL);
  *((void *)&v163 + 1) = v163;
  *(void *)&long long v164 = v163 + 64;
  *((void *)&v163 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v164, (long long *)v174, (long long *)&v174[64], v163);
  (*(void (**)(unsigned char *__return_ptr, void *, long long *))(*(void *)v30 + 64))(v169, v30, &v163);
  uint64_t v36 = *(void *)(*(void *)v169 + 32);
  long long v37 = *(_OWORD *)(*(void *)v169 + 16);
  long long lpsrc = **(_OWORD **)v169;
  long long v117 = v37;
  uint64_t v118 = v36;
  uint64_t v119 = 0;
  unint64_t v120 = 0;
  uint64_t v121 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v119, *(const void **)(*(void *)v169 + 40), *(void *)(*(void *)v169 + 48), (uint64_t)(*(void *)(*(void *)v169 + 48) - *(void *)(*(void *)v169 + 40)) >> 2);
  *(void *)long long v152 = v169;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
  *(void *)long long v152 = &v163;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v152);
  if (*(void *)&v174[40])
  {
    *(void *)&v174[48] = *(void *)&v174[40];
    operator delete(*(void **)&v174[40]);
  }
  signed int v38 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)long long v174 = &v126;
  long long v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, &v126, (long long **)v174);
  long long v40 = v117;
  *(_OWORD *)(v39 + 56) = lpsrc;
  *(_OWORD *)(v39 + 72) = v40;
  *((void *)v39 + 11) = v118;
  if (v39 + 56 != (char *)&lpsrc) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v39 + 96, (char *)v119, (uint64_t)v120, (v120 - (unsigned char *)v119) >> 2);
  }
  *(_OWORD *)&v174[28] = v135;
  *(_OWORD *)&v174[60] = v137;
  long long v175 = v138;
  long long v176 = v139;
  *(_OWORD *)&v174[12] = v134;
  int v177 = v140;
  *(_OWORD *)&v174[44] = v136;
  *(_DWORD *)long long v174 = 0;
  *(_DWORD *)&v174[4] = v8;
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v41 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v41 = v133.__r_.__value_.__l.__size_;
  }
  *(_DWORD *)&v174[8] = v9;
  *(_DWORD *)&v174[28] = 0;
  signed int v42 = &v115;
  std::string::basic_string[abi:ne180100]((uint64_t)&v115, v41 + 21);
  int v43 = v8;
  if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    signed int v42 = (std::string *)v115.__r_.__value_.__r.__words[0];
  }
  if (v41)
  {
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v44 = &v133;
    }
    else {
      int v44 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    memmove(v42, v44, v41);
  }
  strcpy((char *)v42 + v41, "__pool_avg@l2_pooling");
  uint64_t v45 = a2[1].i64[0];
  if (*(char *)(v45 + 39) >= 0) {
    size_t v46 = *(unsigned __int8 *)(v45 + 39);
  }
  else {
    size_t v46 = *(void *)(v45 + 24);
  }
  char v47 = &v114;
  std::string::basic_string[abi:ne180100]((uint64_t)&v114, v46 + 21);
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v47 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  if (v46)
  {
    if (*(char *)(v45 + 39) >= 0) {
      uint64_t v48 = (const void *)(v45 + 16);
    }
    else {
      uint64_t v48 = *(const void **)(v45 + 16);
    }
    memmove(v47, v48, v46);
  }
  strcpy((char *)v47 + v46, "__pool_avg@l2_pooling");
  Espresso::abstract_engine_factory::shared(v152);
  uint64_t v49 = *(void *)v152;
  std::string::basic_string[abi:ne180100]<0>(v169, "pool");
  *(_DWORD *)uint64_t v143 = (***(uint64_t (****)(void))(v123 + 8))(*(void *)(v123 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v49, (uint64_t)&v123, (uint64_t)v169, (uint64_t)v174, (int *)v143);
  if (!(void)v163)
  {
    uint64_t v50 = 0;
    goto LABEL_92;
  }
  if (!v50)
  {
LABEL_92:
    uint64_t v51 = 0;
    goto LABEL_93;
  }
  uint64_t v51 = (std::__shared_weak_count *)*((void *)&v163 + 1);
  if (*((void *)&v163 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 1uLL, memory_order_relaxed);
  }
LABEL_93:
  if (*((void *)&v163 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v163 + 1));
  }
  if ((v169[23] & 0x80000000) != 0) {
    operator delete(*(void **)v169);
  }
  if (*(void *)&v152[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v152[8]);
  }
  if (v50)
  {
    if (v52 && v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      int64_t v97 = v51;
      goto LABEL_105;
    }
  }
  else
  {
    uint64_t v52 = 0;
  }
  int64_t v97 = 0;
LABEL_105:
  *(unsigned char *)((*(uint64_t (**)(void *))(v52[54] + 104))(v52 + 54) + 52) = 1;
  v113[0] = v50;
  v113[1] = v51;
  if (v51) {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v169, "pool");
  if (SHIBYTE(v127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v152, (const std::string::value_type *)v126, *((std::string::size_type *)&v126 + 1));
  }
  else
  {
    *(_OWORD *)long long v152 = v126;
    *(void *)&v152[16] = v127;
  }
  long long v163 = 0uLL;
  *(void *)&long long v164 = 0;
  *(void *)uint64_t v143 = &v163;
  v143[8] = 0;
  *(void *)&long long v163 = operator new(0x18uLL);
  *((void *)&v163 + 1) = v163;
  *(void *)&long long v164 = v163 + 24;
  *((void *)&v163 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v164, (long long *)v152, (long long *)&v152[24], (std::string *)v163);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v159, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    std::string v159 = v115;
  }
  memset(v143, 0, 24);
  LOBYTE(v105) = 0;
  *(void *)uint64_t v143 = operator new(0x18uLL);
  *(void *)&v143[8] = *(void *)v143;
  *(void *)&v143[16] = *(void *)v143 + 24;
  *(void *)&v143[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143[16], (long long *)&v159, &v160, *(std::string **)v143);
  Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v113, (const std::string *)v169, &v114, (std::string **)&v163, (std::string **)v143);
  uint64_t v104 = (uint64_t)v143;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  *(void *)uint64_t v143 = &v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
  if ((v152[23] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
  if ((v169[23] & 0x80000000) != 0) {
    operator delete(*(void **)v169);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  uint64_t v53 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  uint64_t v54 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v53, &v126, (long long **)&v159);
  long long v55 = *(_OWORD *)(v54 + 72);
  long long v163 = *(_OWORD *)(v54 + 56);
  long long v164 = v55;
  int v56 = (const void *)*((void *)v54 + 12);
  uint64_t v165 = *((void *)v54 + 11);
  std::string __p = 0;
  int v167 = 0;
  uint64_t v168 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v56, *((void *)v54 + 13), (uint64_t)(*((void *)v54 + 13) - (void)v56) >> 2);
  memset(v143, 0, 24);
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
  v159.__r_.__value_.__s.__data_[8] = 0;
  *(void *)uint64_t v143 = operator new(0x40uLL);
  *(void *)&v143[8] = *(void *)v143;
  *(void *)&v143[16] = *(void *)v143 + 64;
  *(void *)&v143[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v143[16], &v163, (long long *)v169, *(uint64_t *)v143);
  (*(void (**)(unsigned char *__return_ptr, void *, unsigned char *))(*(void *)v50 + 64))(v152, v50, v143);
  uint64_t v57 = *(void *)(*(void *)v152 + 32);
  long long v58 = *(_OWORD *)(*(void *)v152 + 16);
  *(_OWORD *)std::string v169 = **(_OWORD **)v152;
  *(_OWORD *)&v169[16] = v58;
  uint64_t v170 = v57;
  std::string __src = 0;
  uint64_t v173 = 0;
  std::string::size_type v172 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__src, *(const void **)(*(void *)v152 + 40), *(void *)(*(void *)v152 + 48), (uint64_t)(*(void *)(*(void *)v152 + 48) - *(void *)(*(void *)v152 + 40)) >> 2);
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v152;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  v159.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
  if (__p)
  {
    int v167 = __p;
    operator delete(__p);
  }
  size_t v59 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)&long long v163 = &v115;
  int v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, &v115, (long long **)&v163);
  long long v61 = *(_OWORD *)&v169[16];
  *(_OWORD *)(v60 + 56) = *(_OWORD *)v169;
  *(_OWORD *)(v60 + 72) = v61;
  *((void *)v60 + 11) = v170;
  if (v60 + 56 != v169) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v60 + 96, (char *)__src, (uint64_t)v172, (v172 - (unsigned char *)__src) >> 2);
  }
  *(std::string::size_type *)((char *)&v159.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
  HIDWORD(v159.__r_.__value_.__r.__words[2]) = 0;
  LOBYTE(v160) = 0;
  int v162 = 0;
  int v161 = 0;
  v159.__r_.__value_.__r.__words[0] = 1;
  *(float *)&v159.__r_.__value_.__r.__words[1] = (float)(v9 * v43);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v62 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v62 = v133.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v112, v62 + 19);
  if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v63 = &v112;
  }
  else {
    uint64_t v63 = (std::string *)v112.__r_.__value_.__r.__words[0];
  }
  if (v62)
  {
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v133;
    }
    else {
      uint64_t v64 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, "__ew_mul@l2_pooling");
  uint64_t v65 = a2[1].i64[0];
  if (*(char *)(v65 + 39) >= 0) {
    size_t v66 = *(unsigned __int8 *)(v65 + 39);
  }
  else {
    size_t v66 = *(void *)(v65 + 24);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v111, v66 + 19);
  if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v67 = &v111;
  }
  else {
    long long v67 = (std::string *)v111.__r_.__value_.__r.__words[0];
  }
  if (v66)
  {
    if (*(char *)(v65 + 39) >= 0) {
      uint64_t v68 = (const void *)(v65 + 16);
    }
    else {
      uint64_t v68 = *(const void **)(v65 + 16);
    }
    memmove(v67, v68, v66);
  }
  strcpy((char *)v67 + v66, "__ew_mul@l2_pooling");
  Espresso::abstract_engine_factory::shared(v143);
  uint64_t v69 = *(void *)v143;
  std::string::basic_string[abi:ne180100]<0>(&v163, "elementwise");
  LODWORD(v104) = (***(uint64_t (****)(void))(v123 + 8))(*(void *)(v123 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v69, (uint64_t)&v123, (uint64_t)&v163, (uint64_t)&v159, (int *)&v104);
  if (!*(void *)v152)
  {
    char v70 = 0;
    goto LABEL_152;
  }
  if (!v70)
  {
LABEL_152:
    uint64_t v71 = 0;
    goto LABEL_153;
  }
  uint64_t v71 = *(std::__shared_weak_count **)&v152[8];
  if (*(void *)&v152[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v152[8] + 8), 1uLL, memory_order_relaxed);
  }
LABEL_153:
  if (*(void *)&v152[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v152[8]);
  }
  if (SBYTE7(v164) < 0) {
    operator delete((void *)v163);
  }
  if (*(void *)&v143[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v143[8]);
  }
  v110[0] = v70;
  v110[1] = v71;
  if (v71) {
    atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v163, "elementwise");
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v143, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)uint64_t v143 = v115;
  }
  memset(v152, 0, 24);
  uint64_t v104 = (uint64_t)v152;
  LOBYTE(v105) = 0;
  *(void *)long long v152 = operator new(0x18uLL);
  *(void *)&v152[8] = *(void *)v152;
  *(void *)&v152[16] = *(void *)v152 + 24;
  *(void *)&v152[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v152[16], (long long *)v143, (long long *)&v143[24], *(std::string **)v152);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v112;
  }
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  v103.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v104 = (uint64_t)operator new(0x18uLL);
  uint64_t v105 = v104;
  uint64_t v106 = v104 + 24;
  uint64_t v105 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106, (long long *)&v157, (long long *)&v158, (std::string *)v104);
  Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v110, (const std::string *)&v163, &v111, (std::string **)v152, (std::string **)&v104);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  uint64_t v104 = (uint64_t)v152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
  if ((v143[23] & 0x80000000) != 0) {
    operator delete(*(void **)v143);
  }
  if (SBYTE7(v164) < 0) {
    operator delete((void *)v163);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  unint64_t v72 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
  std::string v73 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v72, &v115, (long long **)&v157);
  long long v74 = *(_OWORD *)(v73 + 72);
  *(_OWORD *)long long v152 = *(_OWORD *)(v73 + 56);
  *(_OWORD *)&v152[16] = v74;
  unint64_t v75 = (const void *)*((void *)v73 + 12);
  uint64_t v153 = *((void *)v73 + 11);
  uint64_t v154 = 0;
  unint64_t v155 = 0;
  uint64_t v156 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v154, v75, *((void *)v73 + 13), (uint64_t)(*((void *)v73 + 13) - (void)v75) >> 2);
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  v157.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v104 = (uint64_t)operator new(0x40uLL);
  uint64_t v105 = v104;
  uint64_t v106 = v104 + 64;
  uint64_t v105 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v106, (long long *)v152, (long long *)&v157, v104);
  (*(void (**)(unsigned char *__return_ptr, void *, uint64_t *))(*(void *)v70 + 64))(v143, v70, &v104);
  uint64_t v76 = *(void *)(*(void *)v143 + 32);
  long long v77 = *(_OWORD *)(*(void *)v143 + 16);
  long long v163 = **(_OWORD **)v143;
  long long v164 = v77;
  uint64_t v165 = v76;
  std::string __p = 0;
  uint64_t v168 = 0;
  int v167 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(*(void *)v143 + 40), *(void *)(*(void *)v143 + 48), (uint64_t)(*(void *)(*(void *)v143 + 48) - *(void *)(*(void *)v143 + 40)) >> 2);
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
  v157.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v157);
  if (v154)
  {
    unint64_t v155 = v154;
    operator delete(v154);
  }
  uint64_t v78 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)long long v152 = &v112;
  unint64_t v79 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v78, &v112, (long long **)v152);
  long long v80 = v164;
  *(_OWORD *)(v79 + 56) = v163;
  *(_OWORD *)(v79 + 72) = v80;
  *((void *)v79 + 11) = v165;
  if (v79 + 56 != (char *)&v163) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v79 + 96, (char *)__p, (uint64_t)v167, (v167 - (unsigned char *)__p) >> 2);
  }
  uint64_t v106 = 897988541;
  char v107 = 0;
  int v108 = 0;
  int v109 = 0;
  uint64_t v104 = 11;
  uint64_t v105 = 1065353216;
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v157, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
  }
  else {
    std::string v157 = v133;
  }
  uint64_t v81 = a2[1].i64[0];
  if (*(char *)(v81 + 39) >= 0) {
    size_t v82 = *(unsigned __int8 *)(v81 + 39);
  }
  else {
    size_t v82 = *(void *)(v81 + 24);
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v103, v82 + 20);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v83 = &v103;
  }
  else {
    uint64_t v83 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  if (v82)
  {
    if (*(char *)(v81 + 39) >= 0) {
      long long v84 = (const void *)(v81 + 16);
    }
    else {
      long long v84 = *(const void **)(v81 + 16);
    }
    memmove(v83, v84, v82);
  }
  strcpy((char *)v83 + v82, "__ew_sqrt@l2_pooling");
  Espresso::abstract_engine_factory::shared(&v150);
  uint64_t v85 = v150.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(v152, "elementwise");
  LODWORD(v99) = (***(uint64_t (****)(void))(v123 + 8))(*(void *)(v123 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v85, (uint64_t)&v123, (uint64_t)v152, (uint64_t)&v104, (int *)&v99);
  if (*(void *)v143)
  {
    if (v86)
    {
      long long v87 = *(std::__shared_weak_count **)&v143[8];
      if (*(void *)&v143[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v143[8] + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_199;
    }
  }
  else
  {
    long long v86 = 0;
  }
  long long v87 = 0;
LABEL_199:
  if (*(void *)&v143[8]) {
    nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v143[8]);
  }
  if ((v152[23] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
  if (v150.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v150.__r_.__value_.__l.__size_);
  }
  v102[0] = v86;
  v102[1] = v87;
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(v152, "elementwise");
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v150, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
  }
  else {
    std::string v150 = v112;
  }
  memset(v143, 0, 24);
  unint64_t v99 = (std::string *)v143;
  LOBYTE(p_data) = 0;
  *(void *)uint64_t v143 = operator new(0x18uLL);
  *(void *)&v143[8] = *(void *)v143;
  *(void *)&v143[16] = *(void *)v143 + 24;
  *(void *)&v143[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v143[16], (long long *)&v150, (long long *)&v151, *(std::string **)v143);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v148, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  }
  else {
    std::string v148 = v157;
  }
  unint64_t v99 = 0;
  p_std::string::pointer data = 0;
  __int16 v101 = 0;
  uint64_t v141 = (void ***)&v99;
  char v142 = 0;
  unint64_t v99 = (std::string *)operator new(0x18uLL);
  p_std::string::pointer data = (void **)&v99->__r_.__value_.__l.__data_;
  __int16 v101 = (void **)&v99[1].__r_.__value_.__l.__data_;
  p_std::string::pointer data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v101, (long long *)&v148, (long long *)&v149, v99);
  Espresso::single_match_state<Espresso::generic_pool_kernel>::add_kernel(a2, v102, (const std::string *)v152, &v103, (std::string **)v143, &v99);
  uint64_t v141 = (void ***)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v148.__r_.__value_.__l.__data_);
  }
  unint64_t v99 = (std::string *)v143;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v150.__r_.__value_.__l.__data_);
  }
  if ((v152[23] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  int v88 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
  int v89 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88, &v112, (long long **)&v148);
  long long v90 = *(_OWORD *)(v89 + 72);
  *(_OWORD *)uint64_t v143 = *(_OWORD *)(v89 + 56);
  *(_OWORD *)&v143[16] = v90;
  uint64_t v91 = (const void *)*((void *)v89 + 12);
  uint64_t v144 = *((void *)v89 + 11);
  long long v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v145, v91, *((void *)v89 + 13), (uint64_t)(*((void *)v89 + 13) - (void)v91) >> 2);
  unint64_t v99 = 0;
  p_std::string::pointer data = 0;
  __int16 v101 = 0;
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  v148.__r_.__value_.__s.__data_[8] = 0;
  unint64_t v99 = (std::string *)operator new(0x40uLL);
  p_std::string::pointer data = (void **)&v99->__r_.__value_.__l.__data_;
  __int16 v101 = (void **)&v99[2].__r_.__value_.__r.__words[2];
  p_std::string::pointer data = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)&v101, (long long *)v143, (long long *)&v148, (uint64_t)v99);
  (*(void (**)(std::string *__return_ptr, void *, std::string **))(*(void *)v86 + 64))(&v150, v86, &v99);
  uint64_t v92 = *(void *)(v150.__r_.__value_.__r.__words[0] + 32);
  long long v93 = *(_OWORD *)(v150.__r_.__value_.__r.__words[0] + 16);
  *(_OWORD *)long long v152 = *(_OWORD *)v150.__r_.__value_.__l.__data_;
  *(_OWORD *)&v152[16] = v93;
  uint64_t v153 = v92;
  uint64_t v154 = 0;
  uint64_t v156 = 0;
  unint64_t v155 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v154, *(const void **)(v150.__r_.__value_.__r.__words[0] + 40), *(void *)(v150.__r_.__value_.__r.__words[0] + 48), (uint64_t)(*(void *)(v150.__r_.__value_.__r.__words[0] + 48) - *(void *)(v150.__r_.__value_.__r.__words[0] + 40)) >> 2);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  if (v145)
  {
    uint64_t v146 = v145;
    operator delete(v145);
  }
  uint64_t v94 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  *(void *)uint64_t v143 = &v157;
  unint64_t v95 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v94, &v157, (long long **)v143);
  long long v96 = *(_OWORD *)&v152[16];
  *(_OWORD *)(v95 + 56) = *(_OWORD *)v152;
  *(_OWORD *)(v95 + 72) = v96;
  *((void *)v95 + 11) = v153;
  if (v95 + 56 != v152) {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v95 + 96, (char *)v154, (uint64_t)v155, (v155 - (unsigned char *)v154) >> 2);
  }
  if (v154)
  {
    unint64_t v155 = v154;
    operator delete(v154);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    int v167 = __p;
    operator delete(__p);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (__src)
  {
    std::string::size_type v172 = __src;
    operator delete(__src);
  }
  if (v97) {
    nitro::nitro_function::nitro_function(v97);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  if (v119)
  {
    unint64_t v120 = v119;
    operator delete(v119);
  }
  if (v98) {
    nitro::nitro_function::nitro_function(v98);
  }
  if (v124) {
    nitro::nitro_function::nitro_function(v124);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127) < 0) {
    operator delete((void *)v126);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
}

void sub_1922428F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  a16 = (uint64_t)&STACK[0x2C0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (v78)
  {
    nitro::nitro_function::nitro_function(v78);
    nitro::nitro_function::nitro_function(v78);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  long long v80 = (void *)STACK[0x408];
  if (STACK[0x408])
  {
    STACK[0x410] = (unint64_t)v80;
    operator delete(v80);
  }
  if (v77) {
    nitro::nitro_function::nitro_function(v77);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  uint64_t v81 = (void *)STACK[0x448];
  if (STACK[0x448])
  {
    STACK[0x450] = (unint64_t)v81;
    operator delete(v81);
  }
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v76) {
    nitro::nitro_function::nitro_function(v76);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a67)
  {
    a68 = (uint64_t)a67;
    operator delete(a67);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a72) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)a72);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  _Unwind_Resume(a1);
}

void sub_192242E78()
{
  if (SLOBYTE(STACK[0x357]) < 0) {
    operator delete((void *)STACK[0x340]);
  }
  if (!STACK[0x328]) {
    JUMPOUT(0x192242D5CLL);
  }
  JUMPOUT(0x192242D58);
}

void sub_192242E98()
{
  if (!v0) {
    JUMPOUT(0x192242D98);
  }
  JUMPOUT(0x192242D90);
}

void sub_192242EA4()
{
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (!STACK[0x2C8]) {
    JUMPOUT(0x192242D98);
  }
  JUMPOUT(0x192242D94);
}

void sub_192242ECC()
{
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  if (!STACK[0x348]) {
    JUMPOUT(0x192242DE4);
  }
  JUMPOUT(0x192242DE0);
}

void sub_192242EEC()
{
}

void sub_192242EF4()
{
  if (*(char *)(v0 - 201) < 0) {
    operator delete(*(void **)(v0 - 224));
  }
  if (!STACK[0x428]) {
    JUMPOUT(0x192242E24);
  }
  JUMPOUT(0x192242E20);
}

void Espresso::AOT::MILCompilerForE5::ExtractBackends(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  if (E5Common::PlatformIdentifier::operator==((uint64_t)a2, 256))
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = (char *)operator new(4uLL);
    *a3 = v6;
    *(_DWORD *)uint64_t v6 = 7;
    v6 += 4;
    a3[1] = v6;
    a3[2] = v6;
    return;
  }
  long long v133 = *a2;
  Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(a1, (uint64_t)&v134);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v133);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v132 = *a2;
  if (!Espresso::AOT::Utils::IsPlatformMixANE(v132, v7, v8, v9, v10, v11, v12, v13, v120) || (int v14 = v134, v134 == v135))
  {
LABEL_7:
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v132);
  }
  else
  {
    while (*v14 - 1 > 1)
    {
      if (++v14 == v135) {
        goto LABEL_7;
      }
    }
    long long v40 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264);
    char UseClassicAOTCompilerOldHW = Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
    E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v132);
    if ((UseClassicAOTCompilerOldHW & 1) == 0)
    {
      int v43 = a3[1];
      signed int v42 = a3[2];
      if (v43 >= v42)
      {
        uint64_t v64 = *a3;
        uint64_t v65 = v43 - *a3;
        uint64_t v66 = v65 >> 2;
        unint64_t v67 = (v65 >> 2) + 1;
        if (v67 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v68 = v42 - v64;
        if (v68 >> 1 > v67) {
          unint64_t v67 = v68 >> 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          if (v69 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v70 = operator new(4 * v69);
        }
        else
        {
          char v70 = 0;
        }
        uint64_t v71 = &v70[4 * v66];
        signed int v42 = &v70[4 * v69];
        *(_DWORD *)uint64_t v71 = 6;
        int v44 = v71 + 4;
        if (v43 != v64)
        {
          unint64_t v72 = v43 - v64 - 4;
          if (v72 < 0x2C) {
            goto LABEL_151;
          }
          if ((unint64_t)(v43 - v70 - v65) < 0x20) {
            goto LABEL_151;
          }
          uint64_t v73 = (v72 >> 2) + 1;
          uint64_t v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
          unint64_t v75 = &v43[-v74];
          v71 -= v74;
          uint64_t v76 = &v70[4 * v66 - 16];
          long long v77 = v43 - 16;
          uint64_t v78 = v73 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v79 = *(_OWORD *)v77;
            *(v76 - 1) = *((_OWORD *)v77 - 1);
            *uint64_t v76 = v79;
            v76 -= 2;
            v77 -= 32;
            v78 -= 8;
          }
          while (v78);
          int v43 = v75;
          if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_151:
            do
            {
              int v80 = *((_DWORD *)v43 - 1);
              v43 -= 4;
              *((_DWORD *)v71 - 1) = v80;
              v71 -= 4;
            }
            while (v43 != v64);
          }
        }
        *a3 = v71;
        a3[1] = v44;
        a3[2] = v42;
        if (v64)
        {
          operator delete(v64);
          signed int v42 = a3[2];
        }
      }
      else
      {
        *(_DWORD *)int v43 = 6;
        int v44 = v43 + 4;
      }
      a3[1] = v44;
      if (v44 < v42)
      {
        *(_DWORD *)int v44 = 7;
        uint64_t v81 = v44 + 4;
LABEL_110:
        a3[1] = v81;
        if ((Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns(v40) & 1) == 0
          && !Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates(v40))
        {
          goto LABEL_65;
        }
        uint64_t v19 = (int *)a3[1];
        unint64_t v100 = (unint64_t)a3[2];
        if ((unint64_t)v19 < v100)
        {
          int v56 = 9;
          goto LABEL_57;
        }
        uint64_t v28 = *a3;
        uint64_t v101 = (char *)v19 - *a3;
        uint64_t v102 = v101 >> 2;
        unint64_t v103 = (v101 >> 2) + 1;
        if (v103 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v104 = v100 - (void)v28;
        if (v104 >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          if (v105 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v106 = operator new(4 * v105);
        }
        else
        {
          uint64_t v106 = 0;
        }
        uint64_t v35 = &v106[4 * v102];
        uint64_t v36 = &v106[4 * v105];
        *(_DWORD *)uint64_t v35 = 9;
        long long v37 = v35 + 4;
        if (v19 != (int *)v28)
        {
          unint64_t v107 = (char *)v19 - v28 - 4;
          if (v107 < 0x2C) {
            goto LABEL_152;
          }
          if ((unint64_t)((char *)v19 - v106 - v101) < 0x20) {
            goto LABEL_152;
          }
          uint64_t v108 = (v107 >> 2) + 1;
          uint64_t v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
          int v110 = &v19[v109 / 0xFFFFFFFFFFFFFFFCLL];
          v35 -= v109;
          std::string v111 = &v106[4 * v102 - 16];
          std::string v112 = v19 - 4;
          uint64_t v113 = v108 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v114 = *(_OWORD *)v112;
            *(v111 - 1) = *((_OWORD *)v112 - 1);
            _OWORD *v111 = v114;
            v111 -= 2;
            v112 -= 8;
            v113 -= 8;
          }
          while (v113);
          uint64_t v19 = v110;
          if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_152:
            do
            {
              int v115 = *--v19;
              *((_DWORD *)v35 - 1) = v115;
              v35 -= 4;
            }
            while (v19 != (int *)v28);
          }
        }
LABEL_62:
        *a3 = v35;
        a3[1] = v37;
        a3[2] = v36;
        if (v28) {
          operator delete(v28);
        }
        goto LABEL_64;
      }
      size_t v82 = *a3;
      uint64_t v83 = v44 - *a3;
      uint64_t v84 = v83 >> 2;
      unint64_t v85 = (v83 >> 2) + 1;
      if (v85 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v86 = v42 - v82;
      if (v86 >> 1 > v85) {
        unint64_t v85 = v86 >> 1;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        if (v87 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int v88 = operator new(4 * v87);
      }
      else
      {
        int v88 = 0;
      }
      int v89 = &v88[4 * v84];
      long long v90 = &v88[4 * v87];
      *(_DWORD *)int v89 = 7;
      uint64_t v81 = v89 + 4;
      if (v44 != v82)
      {
        unint64_t v91 = v44 - v82 - 4;
        if (v91 < 0x2C)
        {
          uint64_t v92 = v44;
          goto LABEL_107;
        }
        if ((unint64_t)(v44 - v88 - v83) < 0x20)
        {
          uint64_t v92 = v44;
          do
          {
LABEL_107:
            int v99 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v89 - 1) = v99;
            v89 -= 4;
          }
          while (v92 != v82);
          goto LABEL_108;
        }
        uint64_t v93 = (v91 >> 2) + 1;
        uint64_t v94 = 4 * (v93 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v92 = &v44[-v94];
        v89 -= v94;
        unint64_t v95 = &v88[4 * v84 - 16];
        long long v96 = v44 - 16;
        uint64_t v97 = v93 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v98 = *(_OWORD *)v96;
          *(v95 - 1) = *((_OWORD *)v96 - 1);
          *unint64_t v95 = v98;
          v95 -= 2;
          v96 -= 32;
          v97 -= 8;
        }
        while (v97);
        if (v93 != (v93 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_107;
        }
      }
LABEL_108:
      *a3 = v89;
      a3[1] = v81;
      a3[2] = v90;
      if (v82) {
        operator delete(v82);
      }
      goto LABEL_110;
    }
  }
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends(a1, (int **)&v134, (char **)__p);
  long long v127 = *a2;
  Espresso::AOT::MILCompilerForE5::FilterUnavailableBackends(a1, (unsigned int **)__p, (uint64_t *)&v127, (char **)&v130);
  long long v15 = *a3;
  if (*a3)
  {
    a3[1] = v15;
    operator delete(v15);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = v130;
  a3[2] = v131;
  int v131 = 0;
  long long v130 = 0uLL;
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)&v127);
  uint64_t v16 = (E5Common::E5PlatformManager *)__p[0];
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*a3 == a3[1])
  {
    uint64_t v116 = E5Common::E5PlatformManager::Instance(v16);
    long long v117 = (uint64_t *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v116 + 32))(v116, a2);
    long long v130 = 0uLL;
    int v131 = 0;
    std::for_each[abi:ne180100]<std::__wrap_iter<E5RT::ComputeUnitType *>,Espresso::AOT::MILCompilerForE5::ExtractBackends(E5Common::PlatformIdentifier)::$_0>(v134, v135, (uint64_t)&v130);
    std::string::basic_string[abi:ne180100]<0>(v125, "/");
    E5Common::StringUtils::Join((uint64_t)v125, v117);
    if (v129 >= 0) {
      uint64_t v118 = __p;
    }
    else {
      uint64_t v118 = (void **)__p[0];
    }
    long long v126 = v118;
    std::string::basic_string[abi:ne180100]<0>(v121, "/");
    E5Common::StringUtils::Join((uint64_t)v121, (uint64_t *)&v130);
    if (v123 >= 0) {
      uint64_t v119 = &v122;
    }
    else {
      uint64_t v119 = v122;
    }
    std::string::size_type v124 = v119;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("No available backends on platform [%s] for compute units %s", &v126, &v124);
  }
  if ((Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatterns((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) != 0
    || (Espresso::AOT::CompilerOptionsForE5::GetMatchE5MinimalCpuPatternsForStates((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) != 0)
  {
    long long v18 = a3[1];
    unint64_t v17 = (unint64_t)a3[2];
    if ((unint64_t)v18 >= v17)
    {
      int v20 = *a3;
      uint64_t v21 = v18 - *a3;
      uint64_t v22 = v21 >> 2;
      unint64_t v23 = (v21 >> 2) + 1;
      if (v23 >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v17 - (void)v20;
      if (v24 >> 1 > v23) {
        unint64_t v23 = v24 >> 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v26 = operator new(4 * v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      uint64_t v45 = &v26[4 * v22];
      size_t v46 = &v26[4 * v25];
      _DWORD *v45 = 9;
      uint64_t v19 = v45 + 1;
      if (v18 != v20)
      {
        unint64_t v47 = v18 - v20 - 4;
        if (v47 < 0x2C) {
          goto LABEL_153;
        }
        if ((unint64_t)(v18 - v26 - v21) < 0x20) {
          goto LABEL_153;
        }
        uint64_t v48 = (v47 >> 2) + 1;
        uint64_t v49 = 4 * (v48 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v50 = &v18[-v49];
        uint64_t v45 = (_DWORD *)((char *)v45 - v49);
        uint64_t v51 = &v26[4 * v22 - 16];
        uint64_t v52 = v18 - 16;
        uint64_t v53 = v48 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *uint64_t v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 8;
        }
        while (v53);
        long long v18 = v50;
        if (v48 != (v48 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_153:
          do
          {
            int v55 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *--uint64_t v45 = v55;
          }
          while (v18 != v20);
        }
      }
      *a3 = (char *)v45;
      a3[1] = (char *)v19;
      a3[2] = v46;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(_DWORD *)long long v18 = 9;
      uint64_t v19 = (int *)(v18 + 4);
    }
    a3[1] = (char *)v19;
    unint64_t v27 = (unint64_t)a3[2];
    if ((unint64_t)v19 < v27) {
      goto LABEL_56;
    }
LABEL_27:
    uint64_t v28 = *a3;
    uint64_t v29 = (char *)v19 - *a3;
    uint64_t v30 = v29 >> 2;
    unint64_t v31 = (v29 >> 2) + 1;
    if (v31 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v27 - (void)v28;
    if (v32 >> 1 > v31) {
      unint64_t v31 = v32 >> 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    if (v33)
    {
      if (v33 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v34 = operator new(4 * v33);
    }
    else
    {
      long long v34 = 0;
    }
    uint64_t v35 = &v34[4 * v30];
    uint64_t v36 = &v34[4 * v33];
    *(_DWORD *)uint64_t v35 = 7;
    long long v37 = v35 + 4;
    if (v19 == (int *)v28) {
      goto LABEL_62;
    }
    unint64_t v38 = (char *)v19 - v28 - 4;
    if (v38 >= 0x2C)
    {
      if ((unint64_t)((char *)v19 - v34 - v29) >= 0x20)
      {
        uint64_t v57 = (v38 >> 2) + 1;
        uint64_t v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        long long v39 = &v19[v58 / 0xFFFFFFFFFFFFFFFCLL];
        v35 -= v58;
        size_t v59 = &v34[4 * v30 - 16];
        int v60 = v19 - 4;
        uint64_t v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *size_t v59 = v62;
          v59 -= 2;
          v60 -= 8;
          v61 -= 8;
        }
        while (v61);
        if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_62;
        }
      }
      else
      {
        long long v39 = v19;
      }
    }
    else
    {
      long long v39 = v19;
    }
    do
    {
      int v63 = *--v39;
      *((_DWORD *)v35 - 1) = v63;
      v35 -= 4;
    }
    while (v39 != (int *)v28);
    goto LABEL_62;
  }
  uint64_t v19 = (int *)a3[1];
  unint64_t v27 = (unint64_t)a3[2];
  if ((unint64_t)v19 >= v27) {
    goto LABEL_27;
  }
LABEL_56:
  int v56 = 7;
LABEL_57:
  *uint64_t v19 = v56;
  long long v37 = (char *)(v19 + 1);
LABEL_64:
  a3[1] = v37;
LABEL_65:
  if (v134)
  {
    long long v135 = v134;
    operator delete(v134);
  }
}

void sub_1922437A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if (a38 < 0)
      {
LABEL_8:
        operator delete(a33);
        if ((a28 & 0x80000000) == 0)
        {
LABEL_12:
          std::vector<std::string>::~vector[abi:ne180100](&a39);
          signed int v42 = *(void **)v39;
          if (*(void *)v39)
          {
            *(void *)(v39 + 8) = v42;
            operator delete(v42);
            int v43 = *(void **)(v40 - 88);
            if (!v43) {
LABEL_14:
            }
              _Unwind_Resume(a1);
          }
          else
          {
            int v43 = *(void **)(v40 - 88);
            if (!v43) {
              goto LABEL_14;
            }
          }
          *(void *)(v40 - 80) = v43;
          operator delete(v43);
          _Unwind_Resume(a1);
        }
LABEL_11:
        operator delete(a23);
        goto LABEL_12;
      }
LABEL_10:
      if ((a28 & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if (a38 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void Espresso::AOT::MILCompilerForE5::FilterUnavailableBackends(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, char **a4@<X8>)
{
  int v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      unsigned int v9 = *v4;
      if (*v4 == 2)
      {
        if (!Espresso::AOT::Utils::DoesPlatformHaveANE(*a3)) {
          goto LABEL_6;
        }
        unsigned int v9 = *v4;
      }
      if (v9 == 5)
      {
        if (!Espresso::AOT::Utils::HasMPSGraphAvailable(*a3)) {
          goto LABEL_6;
        }
        unsigned int v9 = *v4;
      }
      if (v9 == 4)
      {
        uint64_t v11 = (unsigned int *)v57;
        unint64_t v10 = (unint64_t)v58;
        if (!*a3)
        {
          if (v57 >= v58)
          {
            uint64_t v12 = v56;
            uint64_t v21 = (v57 - (char *)v56) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v23 = v58 - (char *)v56;
            if ((v58 - (char *)v56) >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v22;
            }
            if (v16)
            {
              if (v16 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v17 = operator new(4 * v16);
              long long v18 = (unsigned int *)&v17[4 * v21];
              *long long v18 = 3;
              uint64_t v8 = (uint64_t)(v18 + 1);
              if (v57 == (char *)v56) {
                goto LABEL_48;
              }
            }
            else
            {
              unint64_t v17 = 0;
              long long v18 = (unsigned int *)(4 * v21);
              *(_DWORD *)(4 * v21) = 3;
              uint64_t v8 = 4 * v21 + 4;
              if (v57 == (char *)v56) {
                goto LABEL_48;
              }
            }
            unint64_t v31 = v57 - 4 - (char *)v56;
            if (v31 < 0x2C) {
              goto LABEL_93;
            }
            if ((unint64_t)((char *)v56 - v17) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v32 = (v31 >> 2) + 1;
            uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
            long long v34 = &v57[-v33];
            long long v18 = (unsigned int *)((char *)v18 - v33);
            uint64_t v35 = &v17[4 * v21 - 16];
            uint64_t v36 = v57 - 16;
            uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v38 = *(_OWORD *)v36;
              *(v35 - 1) = *((_OWORD *)v36 - 1);
              _OWORD *v35 = v38;
              v35 -= 2;
              v36 -= 32;
              v37 -= 8;
            }
            while (v37);
            uint64_t v11 = (unsigned int *)v34;
            if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_93:
              do
              {
                unsigned int v39 = *--v11;
                *--long long v18 = v39;
              }
              while (v11 != v56);
            }
            goto LABEL_48;
          }
          *(_DWORD *)uint64_t v57 = 3;
          uint64_t v7 = v57 + 4;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v11 = (unsigned int *)v57;
        unint64_t v10 = (unint64_t)v58;
      }
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v12 = v56;
        uint64_t v13 = v11 - v56;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)v56;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v17 = operator new(4 * v16);
          long long v18 = (unsigned int *)&v17[4 * v13];
          *long long v18 = v9;
          uint64_t v8 = (uint64_t)(v18 + 1);
          if (v11 == v56) {
            goto LABEL_48;
          }
LABEL_30:
          unint64_t v19 = (char *)(v11 - 1) - (char *)v56;
          if (v19 < 0x2C)
          {
            int v20 = v11;
            goto LABEL_47;
          }
          if ((unint64_t)((char *)v56 - v17) < 0x20)
          {
            int v20 = v11;
            goto LABEL_47;
          }
          uint64_t v24 = (v19 >> 2) + 1;
          uint64_t v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
          int v20 = &v11[v25 / 0xFFFFFFFFFFFFFFFCLL];
          long long v18 = (unsigned int *)((char *)v18 - v25);
          uint64_t v26 = &v17[4 * v13 - 16];
          unint64_t v27 = v11 - 4;
          uint64_t v28 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            _OWORD *v26 = v29;
            v26 -= 2;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_47:
              unsigned int v30 = *--v20;
              *--long long v18 = v30;
            }
            while (v20 != v56);
          }
        }
        else
        {
          unint64_t v17 = 0;
          long long v18 = (unsigned int *)(4 * v13);
          *(_DWORD *)(4 * v13) = v9;
          uint64_t v8 = 4 * v13 + 4;
          if (v11 != v56) {
            goto LABEL_30;
          }
        }
LABEL_48:
        int v56 = v18;
        uint64_t v58 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_5;
      }
      unsigned int *v11 = v9;
      uint64_t v7 = (char *)(v11 + 1);
LABEL_4:
      uint64_t v8 = (uint64_t)v7;
LABEL_5:
      uint64_t v57 = (char *)v8;
LABEL_6:
      ++v4;
    }
    while (v4 != v5);
  }
  if ((Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264)) & 1) == 0)
  {
    unint64_t v40 = 126 - 2 * __clz((v57 - (char *)v56) >> 2);
    if (v57 == (char *)v56) {
      uint64_t v41 = 0;
    }
    else {
      uint64_t v41 = v40;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(v56, v57, (uint64_t)&v59, v41, 1);
  }
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  int64_t v42 = v57 - (char *)v56;
  if (v57 != (char *)v56)
  {
    if (v42 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int v43 = (char *)operator new(v57 - (char *)v56);
    *a4 = v43;
    int v44 = &v43[4 * (v42 >> 2)];
    a4[2] = v44;
    memcpy(v43, v56, v42);
    a4[1] = v44;
    uint64_t v45 = v44;
    do
    {
      size_t v46 = v43 + 4;
      unint64_t v47 = v45;
      if (v43 + 4 != v45)
      {
        unint64_t v47 = v43 + 4;
        while (*(_DWORD *)v47 != *(_DWORD *)v43)
        {
          v47 += 4;
          if (v47 == v45)
          {
            unint64_t v47 = v45;
            break;
          }
        }
      }
      uint64_t v48 = (char *)(v47 - v46);
      uint64_t v49 = ((v47 - v46) >> 2) + 1;
      uint64_t v50 = &v48[(void)v43];
      uint64_t v51 = v50 + 4;
      uint64_t v52 = v50 + 8;
      if (v51 != v45 && v52 != v45)
      {
        do
        {
          if (*(_DWORD *)v52 != *(_DWORD *)v43) {
            *(_DWORD *)&v43[4 * v49++] = *(_DWORD *)v52;
          }
          v52 += 4;
        }
        while (v52 != v45);
      }
      uint64_t v45 = &v43[4 * v49];
      v43 += 4;
    }
    while (v49 != 1);
    if (v45 != v44) {
      a4[1] = v45;
    }
  }
  if (v56) {
    operator delete(v56);
  }
}

void sub_192243DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MILCompilerForE5::MakeSegmenter(uint64_t a1)
{
}

void sub_192244088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  MEMORY[0x192FF16B0](v23, 0x10B2C40B6A99B69);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a21);
  _Unwind_Resume(a1);
}

void sub_192244124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192244138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_19224414C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

void sub_192244160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 304;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetSegmentsShouldMerge(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 343);
}

void Espresso::AOT::MILCompilerForE5::MakeBackendRegistry(Espresso::AOT::MILSegmenterOptions *this@<X3>, void *a2@<X0>, long long *a3@<X1>, unsigned int **a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  if ((unint64_t)((char *)v6 - (char *)*a4) <= 4)
  {
    BOOL v59 = *(unsigned char *)Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(this) != 0;
    uint64_t v7 = *a4;
    uint64_t v6 = a4[1];
  }
  else
  {
    BOOL v59 = 1;
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_DWORD *)(a5 + 32) = 1065353216;
  if (v7 != v6)
  {
    int v60 = (Espresso::AOT::CompilerOptionsForE5 *)(a2 + 33);
    double v9 = 1.0;
    while (1)
    {
      Backenduint64_t Name = Espresso::AOT::GetBackendName(*v7);
      size_t v12 = v11;
      if (v11 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = BackendName;
      if (v11 >= 0x17)
      {
        uint64_t v17 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v17 = v11 | 7;
        }
        uint64_t v18 = v17 + 1;
        p_dst = (long long *)operator new(v17 + 1);
        *((void *)&__dst + 1) = v12;
        int64_t v75 = v18 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v75) = v11;
        p_dst = &__dst;
        if (!v11)
        {
          LOBYTE(__dst) = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          char v70 = 0;
          uint64_t v71 = 0;
          unint64_t v15 = *v7;
          int8x8_t v16 = (int8x8_t)a2[95];
          if (!*(void *)&v16) {
            goto LABEL_38;
          }
          goto LABEL_17;
        }
      }
      memmove(p_dst, v13, v12);
      *((unsigned char *)p_dst + v12) = 0;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      char v70 = 0;
      uint64_t v71 = 0;
      unint64_t v15 = *v7;
      int8x8_t v16 = (int8x8_t)a2[95];
      if (!*(void *)&v16) {
        goto LABEL_38;
      }
LABEL_17:
      uint8x8_t v19 = (uint8x8_t)vcnt_s8(v16);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] > 1uLL)
      {
        unint64_t v20 = v15;
        if (*(void *)&v16 <= v15) {
          unint64_t v20 = v15 % *(void *)&v16;
        }
      }
      else
      {
        unint64_t v20 = (v16.i32[0] - 1) & v15;
      }
      uint64_t v21 = *(uint64_t ***)(a2[94] + 8 * v20);
      if (!v21)
      {
LABEL_38:
        unint64_t v22 = 0;
        goto LABEL_39;
      }
      unint64_t v22 = *v21;
      if (*v21)
      {
        if (v19.u32[0] < 2uLL)
        {
          uint64_t v23 = *(void *)&v16 - 1;
          while (1)
          {
            uint64_t v25 = v22[1];
            if (v25 == v15)
            {
              if (*((_DWORD *)v22 + 4) == v15) {
                goto LABEL_39;
              }
            }
            else if ((v25 & v23) != v20)
            {
              goto LABEL_38;
            }
            unint64_t v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_39;
            }
          }
        }
        do
        {
          unint64_t v24 = v22[1];
          if (v24 == v15)
          {
            if (*((_DWORD *)v22 + 4) == v15) {
              break;
            }
          }
          else
          {
            if (v24 >= *(void *)&v16) {
              v24 %= *(void *)&v16;
            }
            if (v24 != v20) {
              goto LABEL_38;
            }
          }
          unint64_t v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
LABEL_39:
      int8x8_t v26 = (int8x8_t)a2[100];
      if (!*(void *)&v26) {
        goto LABEL_59;
      }
      uint8x8_t v27 = (uint8x8_t)vcnt_s8(v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        unint64_t v28 = v15;
        if (*(void *)&v26 <= v15) {
          unint64_t v28 = v15 % *(void *)&v26;
        }
      }
      else
      {
        unint64_t v28 = (v26.i32[0] - 1) & v15;
      }
      long long v29 = *(uint64_t ***)(a2[99] + 8 * v28);
      if (v29)
      {
        unsigned int v30 = *v29;
        if (*v29)
        {
          if (v27.u32[0] < 2uLL)
          {
            uint64_t v31 = *(void *)&v26 - 1;
            while (1)
            {
              uint64_t v33 = v30[1];
              if (v33 == v15)
              {
                if (*((_DWORD *)v30 + 4) == v15) {
                  goto LABEL_60;
                }
              }
              else if ((v33 & v31) != v28)
              {
                goto LABEL_59;
              }
              unsigned int v30 = (uint64_t *)*v30;
              if (!v30) {
                goto LABEL_60;
              }
            }
          }
          do
          {
            unint64_t v32 = v30[1];
            if (v32 == v15)
            {
              if (*((_DWORD *)v30 + 4) == v15) {
                break;
              }
            }
            else
            {
              if (v32 >= *(void *)&v26) {
                v32 %= *(void *)&v26;
              }
              if (v32 != v28) {
                goto LABEL_59;
              }
            }
            unsigned int v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
      }
      else
      {
LABEL_59:
        unsigned int v30 = 0;
      }
LABEL_60:
      if (!v22)
      {
        long long v69 = *a3;
        Espresso::AOT::MakeBackendValidator((int)&v69, *v7, this);
      }
      if (v30)
      {
        long long v34 = (atomic_ullong *)operator new(0x48uLL);
        v34[1] = 0;
        v34[2] = 0;
        atomic_ullong *v34 = (atomic_ullong)&unk_1EE3895A0;
        uint64_t v35 = (double *)Espresso::AOT::EvaluatorClassic::EvaluatorClassic(v34 + 3, &__dst);
        *(void *)uint8_t buf = v35;
        *(void *)&uint8_t buf[8] = v34;
        atomic_fetch_add_explicit(v34 + 1, 1uLL, memory_order_relaxed);
        uint64_t v72 = (uint64_t)(v34 + 4);
        uint64_t v73 = (std::__shared_weak_count *)v34;
        if (v59)
        {
          atomic_fetch_add_explicit(v34 + 1, 1uLL, memory_order_relaxed);
          uint64_t v36 = (std::__shared_weak_count *)v34;
        }
        else
        {
          uint64_t v36 = (std::__shared_weak_count *)operator new(0x30uLL);
          v36->__shared_owners_ = 0;
          v36->__shared_weak_owners_ = 0;
          v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895D8;
          uint64_t v35 = Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v36[1], 1.0, 1.0);
        }
        char v70 = v35;
        uint64_t v71 = v36;
        if (!atomic_fetch_add(v34 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(atomic_ullong *))(*v34 + 16))(v34);
          uint64_t v37 = (std::__shared_weak_count *)v34;
LABEL_78:
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      else
      {
        if (Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation(v60))
        {
          unsigned int v39 = (std::__shared_weak_count *)operator new(0x30uLL);
          v39->__shared_owners_ = 0;
          v39->__shared_weak_owners_ = 0;
          v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895D8;
          char v70 = Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v39[1], v9, 0.0);
          uint64_t v71 = v39;
          uint64_t v41 = Espresso::espresso_os_log_subsystem(0, v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v52 = &__dst;
            if (v75 < 0) {
              uint64_t v52 = (long long *)__dst;
            }
            *(_DWORD *)uint8_t buf = 136315394;
            *(void *)&uint8_t buf[4] = v52;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v9;
            _os_log_debug_impl(&dword_1920CB000, v41, OS_LOG_TYPE_DEBUG, "MILCompilerForE5::MakeBackendRegistry: Created ConstCostEstimator for backend: %s with cost: %f", buf, 0x16u);
            double v9 = v9 * 10.0;
          }
          else
          {
            double v9 = v9 * 10.0;
          }
        }
        else
        {
          if (v59)
          {
            char SkipDecisionTreesWithMILCost = Espresso::AOT::CompilerOptionsForE5::GetSkipDecisionTreesWithMILCost(v60);
            char BuildForProfiling = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling((Espresso::AOT::AOTCompilerOptions *)(a2 + 76));
            int v44 = (std::__shared_weak_count *)operator new(0x50uLL);
            v44->__shared_owners_ = 0;
            v44->__shared_weak_owners_ = 0;
            v44->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE389610;
            uint64_t v45 = Espresso::AOT::EstimatorMILDecisionTree::EstimatorMILDecisionTree((uint64_t)&v44[1], &__dst, a3, SkipDecisionTreesWithMILCost ^ 1u, BuildForProfiling);
          }
          else
          {
            int v44 = (std::__shared_weak_count *)operator new(0x30uLL);
            v44->__shared_owners_ = 0;
            v44->__shared_weak_owners_ = 0;
            v44->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3895D8;
            uint64_t v45 = (uint64_t)Espresso::AOT::ConstCostEstimator::ConstCostEstimator((Espresso::AOT::ConstCostEstimator *)&v44[1], 1.0, 1.0);
          }
          char v70 = (double *)v45;
          uint64_t v71 = v44;
        }
        size_t v46 = (atomic_ullong *)operator new(0x48uLL);
        v46[1] = 0;
        void v46[2] = 0;
        atomic_ullong *v46 = (atomic_ullong)&unk_1EE3895A0;
        Espresso::AOT::EvaluatorClassic::EvaluatorClassic(v46 + 3, &__dst);
        atomic_fetch_add_explicit(v46 + 1, 1uLL, memory_order_relaxed);
        uint64_t v72 = (uint64_t)(v46 + 4);
        uint64_t v73 = (std::__shared_weak_count *)v46;
        if (!atomic_fetch_add(v46 + 1, 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(atomic_ullong *))(*v46 + 16))(v46);
          uint64_t v37 = (std::__shared_weak_count *)v46;
          goto LABEL_78;
        }
      }
      if (!v72)
      {
        uint64_t v66 = Espresso::AOT::GetBackendName(*v7);
        uint64_t v67 = v53;
        std::string::basic_string<std::string_view,0>(buf, (uint64_t)&v66);
        if (v77 >= 0) {
          long long v54 = buf;
        }
        else {
          long long v54 = *(unsigned char **)buf;
        }
        uint64_t v68 = v54;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Validator for backend %s is not correctly created", &v68);
      }
      uint64_t v47 = (uint64_t)v70;
      if (!v70)
      {
        uint64_t v66 = Espresso::AOT::GetBackendName(*v7);
        uint64_t v67 = v55;
        std::string::basic_string<std::string_view,0>(buf, (uint64_t)&v66);
        if (v77 >= 0) {
          int v56 = buf;
        }
        else {
          int v56 = *(unsigned char **)buf;
        }
        uint64_t v68 = v56;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cost estimator for backend %s is not correctly created", &v68);
      }
      uint64_t v64 = v72;
      uint64_t v65 = v73;
      if (v73) {
        atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v62 = v47;
      int v63 = v71;
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::AOT::BackendRegistry::RegisterBackend(a5, (uint64_t)&__dst, &v64, &v62);
      uint64_t v48 = v63;
      if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
        uint64_t v49 = v65;
        if (!v65) {
          goto LABEL_91;
        }
      }
      else
      {
        uint64_t v49 = v65;
        if (!v65) {
          goto LABEL_91;
        }
      }
      if (!atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
LABEL_91:
      uint64_t v50 = v71;
      if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        uint64_t v51 = v73;
        if (v73)
        {
LABEL_94:
          if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      else
      {
        uint64_t v51 = v73;
        if (v73) {
          goto LABEL_94;
        }
      }
      if (SHIBYTE(v75) < 0)
      {
        operator delete((void *)__dst);
        if (++v7 == v6) {
          return;
        }
      }
      else if (++v7 == v6)
      {
        return;
      }
    }
  }
}

void sub_192244AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  std::__shared_weak_count::~__shared_weak_count(v30);
  operator delete(v33);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if ((*(char *)(v31 - 145) & 0x80000000) == 0)
  {
    std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>::~unordered_map[abi:ne180100](a17);
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v31 - 168));
  std::unordered_map<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>::~unordered_map[abi:ne180100](a17);
  _Unwind_Resume(a1);
}

void sub_192244C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (*(char *)(v30 - 145) < 0) {
    JUMPOUT(0x192244B70);
  }
  JUMPOUT(0x192244C28);
}

void sub_192244C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_192244C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseRankedChoiceSegmentation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 334);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetSkipDecisionTreesWithMILCost(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 330);
}

uint64_t Espresso::AOT::EstimatorMILDecisionTree::EstimatorMILDecisionTree(uint64_t a1, long long *a2, _OWORD *a3, char a4, char a5)
{
  unint64_t v10 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator((void *)a1);
  *unint64_t v10 = &unk_1EE36B548;
  unint64_t v11 = (std::string *)(v10 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)(a1 + 32) = *a3;
  *(unsigned char *)(a1 + 48) = a4;
  *(unsigned char *)(a1 + 49) = a5;
  return a1;
}

{
  void *v10;
  std::string *v11;
  long long v12;

  unint64_t v10 = Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator((void *)a1);
  *unint64_t v10 = &unk_1EE36B548;
  unint64_t v11 = (std::string *)(v10 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *(_OWORD *)(a1 + 32) = *a3;
  *(unsigned char *)(a1 + 48) = a4;
  *(unsigned char *)(a1 + 49) = a5;
  return a1;
}

void sub_192244D40(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractCostEstimator::~AbstractCostEstimator(v1);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::AbstractCostEstimator::AbstractCostEstimator(void *this)
{
  *this = &unk_1EE36B408;
  return this;
}

void Espresso::AOT::MakeBackendValidator(int a1, unsigned int a2, Espresso::AOT::MILSegmenterOptions *this)
{
  switch(a2)
  {
    case 2u:
      Espresso::AOT::MILSegmenterOptions::GetOutputBundlePath(this);
      Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      operator new();
    case 3u:
      operator new();
    case 4u:
      Espresso::AOT::MILSegmenterOptions::GetMlcUseBNNSGraph(this);
      operator new();
    case 5u:
      Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      operator new();
    case 6u:
      operator new();
    case 7u:
      operator new();
    case 8u:
      Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(this);
      operator new();
    case 9u:
      operator new();
    default:
      Backenduint64_t Name = Espresso::AOT::GetBackendName(a2);
      Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation for backend %s", &BackendName);
  }
}

void sub_192244F84(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C401B66784ALL);
  _Unwind_Resume(a1);
}

void sub_192244FA8(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x81C40B8603338);
  _Unwind_Resume(a1);
}

void sub_192244FCC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10A1C40EA59D502);
  _Unwind_Resume(a1);
}

void sub_192244FF0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1093C40B9706223);
  _Unwind_Resume(a1);
}

void sub_192245060(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1093C40173FB45BLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::BackendRegistry::RegisterBackend(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v12 = *a3;
  uint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a4[1];
  uint64_t v14 = *a4;
  unint64_t v15 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>(a1, a2, a2, (uint64_t)&v12);
  char v8 = v7;
  double v9 = v15;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unint64_t v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if ((v8 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    uint64_t v12 = v11;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Backend %s is already registered", &v12);
  }
}

void sub_1922451B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>>>::__emplace_unique_key_args<std::string,std::string const&,std::pair<std::shared_ptr<Espresso::AOT::AbstractValidator>,std::shared_ptr<Espresso::AOT::AbstractCostEstimator>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int8x8_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          char v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v24 = v16[1];
            if (v24 == v12)
            {
              uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              if ((v25 & 0x80u) == 0) {
                uint64_t v26 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v26 = v16[3];
              }
              if (v26 == v18)
              {
                uint8x8_t v27 = (const void **)(v16 + 2);
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*v27, v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  for (int i = v7; *(unsigned __int8 *)v27 == *i; ++i)
                  {
                    uint8x8_t v27 = (const void **)((char *)v27 + 1);
                    if (!--v25) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v24 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int8x8_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              unint64_t v22 = (const void **)(v16 + 2);
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*v22, v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                for (uint64_t j = v7; *(unsigned __int8 *)v22 == *j; ++j)
                {
                  unint64_t v22 = (const void **)((char *)v22 + 1);
                  if (!--v20) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          int8x8_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  long long v29 = (char *)operator new(0x48uLL);
  v47[0] = v29;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)long long v29 = 0;
  *((void *)v29 + 1) = v12;
  uint64_t v30 = (std::string *)(v29 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v29 + 4) = *(void *)(a3 + 16);
  }
  long long v31 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v29 + 40) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)(v29 + 56) = v31;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v13 || (float)(v33 * (float)v13) < v32)
  {
    BOOL v36 = 1;
    if (v13 >= 3) {
      BOOL v36 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v13);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v44 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        long long v34 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v12;
        long long v34 = *(void **)(*(void *)a1 + 8 * v12);
        uint64_t v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v12;
      long long v34 = *(void **)(*(void *)a1 + 8 * (v44 & v12));
      uint64_t v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v45 >= v13) {
          v45 %= v13;
        }
      }
      else
      {
        v45 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  long long v34 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  int8x8_t v16 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19224562C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::shared_ptr<E5RT::OperandDescriptor>,std::shared_ptr<E5RT::MemoryObject>>>,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

const char *Espresso::AOT::GetBackendName(unsigned int a1)
{
  uint64_t result = "e5";
  switch(a1)
  {
    case 0u:
      return result;
    case 1u:
      uint64_t result = "nano";
      break;
    case 2u:
      uint64_t result = "ane";
      break;
    case 3u:
      uint64_t result = "classic_cpu";
      break;
    case 4u:
      uint64_t result = "mlc";
      break;
    case 5u:
      uint64_t result = "mps_graph";
      break;
    case 6u:
      uint64_t result = "eir";
      break;
    case 7u:
      uint64_t result = "jit_call";
      break;
    case 8u:
      uint64_t result = "bnns";
      break;
    case 9u:
      uint64_t result = "e5_minimal_cpu";
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v7, a1);
      unint64_t v5 = std::string::insert(&v7, 0, "Unsupported backend identifier: ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v8);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  return result;
}

void sub_192245870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if (v22)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetOnDeviceCompilation(Espresso::AOT::MILSegmenterOptions *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t Espresso::AOT::SegmenterShortestPath::SegmenterShortestPath(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = Espresso::AOT::AbstractSegmenter::AbstractSegmenter((void *)a1, a2);
  void *v5 = &unk_1EE36B4B8;
  uint64_t v6 = *a3;
  *a3 = 0;
  v5[6] = v6;
  v5[7] = 0;
  std::string v7 = (void **)(v5 + 7);
  unsigned char v5[8] = 0;
  v5[9] = 0;
  Espresso::AOT::BackendRegistry::GetBackends((Espresso::AOT::BackendRegistry *)(v5 + 1), &v12);
  std::string v8 = (void **)*v7;
  if (*v7)
  {
    unint64_t v9 = *(void ***)(a1 + 64);
    uint64_t v10 = *v7;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = *v7;
    }
    *(void *)(a1 + 64) = v8;
    operator delete(v10);
    *std::string v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(std::vector<std::string> *)(a1 + 56) = v12;
  return a1;
}

void sub_1922459C8(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v2);
  std::unique_ptr<Espresso::AOT::MILSegmenterOptions>::~unique_ptr[abi:ne180100](v3);
  Espresso::AOT::AbstractSegmenter::~AbstractSegmenter(v1);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::BackendRegistry::GetBackends@<X0>(Espresso::AOT::BackendRegistry *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t result = std::vector<std::string>::vector(a2, *((void *)this + 3));
  unint64_t v5 = (uint64_t *)*((void *)this + 2);
  if (v5)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t result = std::string::operator=(&a2->__begin_[v6], (const std::string *)(v5 + 2));
      unint64_t v5 = (uint64_t *)*v5;
      ++v6;
    }
    while (v5);
  }
  return result;
}

void sub_192245A4C(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v4 = (std::string *)operator new(24 * __n);
    this->__begin_ = v4;
    this->__end_cap_.__value_ = &v4[__n];
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v4, v5);
    this->__end_ = (std::string *)((char *)v4 + v5);
  }
  return this;
}

{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    std::vector<std::string>::pointer end = this->__end_;
    size_t v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_192245B0C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::string>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::MILSegmenterOptions::MILSegmenterOptions(uint64_t a1, char a2, long long *a3, char a4, char a5, uint64_t a6, char a7)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v12;
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 56) = a4;
  *(unsigned char *)(a1 + 57) = a5;
  *(unsigned char *)(a1 + 58) = a7;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a6 && a1 + 64 != a6)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a6 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>((void *)(a1 + 64), *(char **)(a6 + 16), 0);
  }
  return a1;
}

void sub_192245C00(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 31) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string>>,void *> *>>(void *a1, char *a2, char *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  std::string v8 = (char *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      std::string::operator=((std::string *)(v8 + 16), (const std::string *)(a2 + 16));
      if (v8 != a2)
      {
        *((_DWORD *)v8 + 18) = *((_DWORD *)a2 + 18);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void *)v8 + 5, *((uint64_t **)a2 + 7), 0);
      }
      unint64_t v9 = *(char **)v8;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__node_insert_multi(a1, (uint64_t)v8);
      a2 = *(char **)a2;
      std::string v8 = v9;
      if (!v9) {
        goto LABEL_11;
      }
    }
    do
    {
      uint64_t v10 = *(char **)v8;
      unint64_t v11 = (void **)*((void *)v8 + 7);
      if (v11)
      {
        do
        {
          unint64_t v13 = (void **)*v11;
          if (*((char *)v11 + 39) < 0) {
            operator delete(v11[2]);
          }
          operator delete(v11);
          unint64_t v11 = v13;
        }
        while (v13);
      }
      long long v12 = (void *)*((void *)v8 + 5);
      *((void *)v8 + 5) = 0;
      if (v12) {
        operator delete(v12);
      }
      if (v8[39] < 0) {
        operator delete(*((void **)v8 + 2));
      }
      operator delete(v8);
      std::string v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_11:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__insert_multi[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::string>> const&>(a1, (uint64_t)(a2 + 16));
      a2 = *(char **)a2;
    }
  }
}

void sub_192245D8C(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::__deallocate_node(v2, v1);
  __cxa_rethrow();
}

void sub_192245DA8(_Unwind_Exception *a1)
{
}

void *Espresso::AOT::AbstractSegmenter::AbstractSegmenter(void *a1, uint64_t *a2)
{
  uint64_t result = Espresso::AOT::AbstractMILPass::AbstractMILPass(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  *uint64_t result = &unk_1EE36B1F0;
  result[1] = v4;
  result[2] = a2[1];
  a2[1] = 0;
  uint64_t v7 = a2[2];
  uint64_t v6 = a2 + 2;
  uint64_t v5 = v7;
  result[3] = v7;
  uint64_t v8 = v6[1];
  result[4] = v8;
  *((_DWORD *)result + 10) = *((_DWORD *)v6 + 4);
  if (v8)
  {
    unint64_t v9 = *(void *)(v5 + 8);
    unint64_t v10 = result[2];
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        v9 %= v10;
      }
    }
    else
    {
      v9 &= v10 - 1;
    }
    *(void *)(v4 + 8 * v9) = result + 3;
    void *v6 = 0;
    v6[1] = 0;
  }
  return result;
}

void *Espresso::AOT::Validators::E5MinimalCpuValidator::E5MinimalCpuValidator(Espresso::AOT::Validators::E5MinimalCpuValidator *this)
{
  uint64_t result = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  *uint64_t result = &unk_1EE36AF70;
  return result;
}

{
  void *result;

  uint64_t result = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  *uint64_t result = &unk_1EE36AF70;
  return result;
}

void *Espresso::AOT::AbstractValidator::AbstractValidator(void *this)
{
  *this = &unk_1EE36B218;
  return this;
}

Espresso::AOT::Validators::JitCallValidator *Espresso::AOT::Validators::JitCallValidator::JitCallValidator(Espresso::AOT::Validators::JitCallValidator *this)
{
  v5.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  int v2 = Espresso::AOT::AbstractValidator::AbstractValidator(this);
  void *v2 = &unk_1EE36AF20;
  *(_OWORD *)(v2 + 1) = 0u;
  *(_OWORD *)(v2 + 3) = 0u;
  *((_DWORD *)v2 + 10) = 1065353216;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__p, "call");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(v2 + 1, &__p, &v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_192245F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v15);
  Espresso::AOT::AbstractValidator::~AbstractValidator(v14);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>(void *a1, std::string *__str, std::string *a3)
{
  uint64_t v4 = __str;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (!v8 || __str == a3)
    {
      unint64_t v10 = (void **)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        unint64_t v10 = *(void ***)v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, v8);
        ++v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = (uint64_t)v10;
      }
      while (!v11);
    }
    if (v10)
    {
      do
      {
        long long v12 = (void **)*v10;
        if (*((char *)v10 + 39) < 0) {
          operator delete(v10[2]);
        }
        operator delete(v10);
        unint64_t v10 = v12;
      }
      while (v12);
    }
  }
  while (v4 != a3)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, (uint64_t)v4, (uint64_t)v4);
    ++v4;
  }
}

void sub_1922460A8(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1922460C4(_Unwind_Exception *a1)
{
}

__n128 Espresso::AOT::Validators::BnnsValidator::BnnsValidator(void *a1, __n128 *a2, char a3)
{
  std::string v5 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  void *v5 = &unk_1EE36AEF8;
  __n128 result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  *((unsigned char *)v5 + 24) = a3;
  return result;
}

{
  void *v5;
  __n128 result;

  std::string v5 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  void *v5 = &unk_1EE36AEF8;
  __n128 result = *a2;
  *(__n128 *)(v5 + 1) = *a2;
  *((unsigned char *)v5 + 24) = a3;
  return result;
}

__n128 Espresso::AOT::Validators::EirValidator::EirValidator(void *a1, __n128 *a2)
{
  uint64_t v3 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *uint64_t v3 = &unk_1EE36AEA8;
  __n128 result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  v3[4] = 0;
  v3[5] = 0;
  void v3[3] = 0;
  return result;
}

{
  void *v3;
  __n128 result;

  uint64_t v3 = Espresso::AOT::AbstractValidator::AbstractValidator(a1);
  *uint64_t v3 = &unk_1EE36AEA8;
  __n128 result = *a2;
  *(__n128 *)(v3 + 1) = *a2;
  v3[4] = 0;
  v3[5] = 0;
  void v3[3] = 0;
  return result;
}

unsigned int *std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(unsigned int *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v11 = result;
LABEL_2:
  long long v12 = (unsigned int *)(a2 - 4);
  unint64_t v13 = v11;
  while (1)
  {
    BOOL v11 = v13;
    uint64_t v14 = a2 - (char *)v13;
    unint64_t v15 = (a2 - (char *)v13) >> 2;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v65 = *v13;
          if (*v12 < *v13)
          {
            unsigned int *v13 = *v12;
            unsigned int *v12 = v65;
          }
          return result;
        case 3uLL:
          unsigned int v66 = *v13;
          unsigned int v67 = v13[1];
          unsigned int v68 = *v12;
          if (v67 >= *v13)
          {
            if (v68 < v67)
            {
              v13[1] = v68;
              unsigned int *v12 = v67;
              unsigned int v86 = *v13;
              unsigned int v85 = v13[1];
              if (v85 < *v13)
              {
                unsigned int *v13 = v85;
                v13[1] = v86;
              }
            }
          }
          else
          {
            if (v68 >= v67)
            {
              unsigned int *v13 = v67;
              v13[1] = v66;
              if (*v12 >= v66) {
                return result;
              }
              v13[1] = *v12;
            }
            else
            {
              unsigned int *v13 = v68;
            }
            unsigned int *v12 = v66;
          }
          return result;
        case 4uLL:
          long long v69 = v13 + 1;
          char v70 = (unsigned int *)v13[1];
          uint64_t v71 = v13 + 2;
          unsigned int v72 = v13[2];
          uint64_t v73 = (unsigned int *)*v13;
          if (v70 >= v73)
          {
            if (v72 >= v70)
            {
LABEL_144:
              LODWORD(v70) = v72;
              unsigned int v87 = *v12;
              if (*v12 >= v70) {
                return result;
              }
LABEL_145:
              *uint64_t v71 = v87;
              unsigned int *v12 = v70;
              unsigned int v90 = *v71;
              unsigned int v91 = *v69;
              if (v90 < v91)
              {
                v13[1] = v90;
                uint64_t v13[2] = v91;
                unsigned int v92 = *v13;
                if (v90 < *v13)
                {
                  unsigned int *v13 = v90;
                  v13[1] = v92;
                }
              }
              return result;
            }
            *long long v69 = v72;
            *uint64_t v71 = v70;
            uint64_t v74 = v13;
            int64_t v75 = v13 + 1;
            __n128 result = v70;
            if (v72 >= v73)
            {
LABEL_136:
              unsigned int v87 = *v12;
              if (*v12 >= v70) {
                return result;
              }
              goto LABEL_145;
            }
          }
          else
          {
            uint64_t v74 = v13;
            int64_t v75 = v13 + 2;
            __n128 result = (unsigned int *)*v13;
            if (v72 >= v70)
            {
              unsigned int *v13 = v70;
              v13[1] = v73;
              uint64_t v74 = v13 + 1;
              int64_t v75 = v13 + 2;
              __n128 result = v73;
              if (v72 >= v73) {
                goto LABEL_144;
              }
            }
          }
          *uint64_t v74 = v72;
          *int64_t v75 = v73;
          LODWORD(v70) = result;
          goto LABEL_136;
        case 5uLL:
          return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v13, v13 + 1, v13 + 2, v13 + 3, (unsigned int *)a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 95) {
      break;
    }
    if (!a4)
    {
      if (v13 != (unsigned int *)a2)
      {
        return (unsigned int *)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,Espresso::AOT::BackendIdentifier *>((char *)v13, a2, a2);
      }
      return result;
    }
    int8x8_t v16 = &v13[v15 >> 1];
    unsigned int v17 = *v12;
    if ((unint64_t)v14 >= 0x201)
    {
      unsigned int v18 = *v16;
      unsigned int v19 = *v13;
      if (*v16 >= *v13)
      {
        if (v17 < v18)
        {
          *int8x8_t v16 = v17;
          unsigned int *v12 = v18;
          unsigned int v22 = *v13;
          if (*v16 < *v13)
          {
            unsigned int *v13 = *v16;
            *int8x8_t v16 = v22;
          }
        }
      }
      else
      {
        if (v17 < v18)
        {
          unsigned int *v13 = v17;
          goto LABEL_23;
        }
        unsigned int *v13 = v18;
        *int8x8_t v16 = v19;
        if (*v12 < v19)
        {
          *int8x8_t v16 = *v12;
LABEL_23:
          unsigned int *v12 = v19;
        }
      }
      uint64_t v26 = &v13[v15 >> 1];
      uint8x8_t v27 = v26 - 1;
      unsigned int v28 = *(v26 - 1);
      unsigned int v29 = v13[1];
      unsigned int v30 = *((_DWORD *)a2 - 2);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          unsigned int *v27 = v30;
          *((_DWORD *)a2 - 2) = v28;
          unsigned int v31 = v13[1];
          if (*v27 < v31)
          {
            v13[1] = *v27;
            unsigned int *v27 = v31;
          }
        }
      }
      else
      {
        if (v30 < v28)
        {
          v13[1] = v30;
          goto LABEL_37;
        }
        v13[1] = v28;
        unsigned int *v27 = v29;
        unsigned int v32 = *((_DWORD *)a2 - 2);
        if (v32 < v29)
        {
          unsigned int *v27 = v32;
LABEL_37:
          *((_DWORD *)a2 - 2) = v29;
        }
      }
      unsigned int v35 = v26[1];
      float v33 = v26 + 1;
      unsigned int v34 = v35;
      unsigned int v36 = v13[2];
      unsigned int v37 = *((_DWORD *)a2 - 3);
      if (v35 >= v36)
      {
        if (v37 < v34)
        {
          *float v33 = v37;
          *((_DWORD *)a2 - 3) = v34;
          unsigned int v38 = v13[2];
          if (*v33 < v38)
          {
            uint64_t v13[2] = *v33;
            *float v33 = v38;
          }
        }
      }
      else
      {
        if (v37 < v34)
        {
          uint64_t v13[2] = v37;
          goto LABEL_46;
        }
        uint64_t v13[2] = v34;
        *float v33 = v36;
        unsigned int v39 = *((_DWORD *)a2 - 3);
        if (v39 < v36)
        {
          *float v33 = v39;
LABEL_46:
          *((_DWORD *)a2 - 3) = v36;
        }
      }
      unsigned int v40 = *v16;
      unsigned int v41 = *v27;
      unsigned int v42 = *v33;
      if (*v16 >= *v27)
      {
        if (v42 < v40)
        {
          *int8x8_t v16 = v42;
          *float v33 = v40;
          float v33 = &v13[v15 >> 1];
          unsigned int v40 = v41;
          if (v42 < v41) {
            goto LABEL_54;
          }
          unsigned int v40 = v42;
        }
      }
      else
      {
        if (v42 >= v40)
        {
          unsigned int *v27 = v40;
          *int8x8_t v16 = v41;
          uint8x8_t v27 = &v13[v15 >> 1];
          unsigned int v40 = v42;
          if (v42 >= v41)
          {
            unsigned int v40 = v41;
            goto LABEL_55;
          }
        }
LABEL_54:
        unsigned int *v27 = v42;
        *float v33 = v41;
      }
LABEL_55:
      unsigned int v43 = *v13;
      unsigned int *v13 = v40;
      *int8x8_t v16 = v43;
      --a4;
      unsigned int v24 = *v13;
      uint64_t v25 = v13;
      if (a5) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    unsigned int v20 = *v13;
    unsigned int v21 = *v16;
    if (*v13 < *v16)
    {
      if (v17 < v20)
      {
        *int8x8_t v16 = v17;
        goto LABEL_32;
      }
      *int8x8_t v16 = v20;
      unsigned int *v13 = v21;
      if (*v12 < v21)
      {
        unsigned int *v13 = *v12;
LABEL_32:
        unsigned int *v12 = v21;
      }
LABEL_33:
      --a4;
      unsigned int v24 = *v13;
      uint64_t v25 = v13;
      if (a5) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    if (v17 >= v20) {
      goto LABEL_33;
    }
    unsigned int *v13 = v17;
    unsigned int *v12 = v20;
    unsigned int v23 = *v16;
    if (*v13 >= *v16) {
      goto LABEL_33;
    }
    *int8x8_t v16 = *v13;
    unsigned int *v13 = v23;
    --a4;
    unsigned int v24 = v23;
    uint64_t v25 = v13;
    if (a5) {
      goto LABEL_57;
    }
LABEL_56:
    uint64_t v25 = v13;
    if (*(v13 - 1) >= v24)
    {
      if (v24 < *v12)
      {
        do
        {
          unsigned int v56 = v13[1];
          ++v13;
        }
        while (v24 >= v56);
      }
      else
      {
        uint64_t v57 = v13 + 1;
        do
        {
          unint64_t v13 = v57;
          if (v57 >= (unsigned int *)a2) {
            break;
          }
          ++v57;
        }
        while (v24 >= *v13);
      }
      uint64_t v58 = (unsigned int *)a2;
      if (v13 < (unsigned int *)a2)
      {
        uint64_t v58 = (unsigned int *)a2;
        do
          unsigned int v59 = *--v58;
        while (v24 < v59);
      }
      if (v13 < v58)
      {
        unsigned int v60 = *v13;
        unsigned int v61 = *v58;
        do
        {
          unsigned int *v13 = v61;
          *uint64_t v58 = v60;
          do
          {
            unsigned int v62 = v13[1];
            ++v13;
            unsigned int v60 = v62;
          }
          while (v24 >= v62);
          do
          {
            unsigned int v63 = *--v58;
            unsigned int v61 = v63;
          }
          while (v24 < v63);
        }
        while (v13 < v58);
      }
      uint64_t v64 = v13 - 1;
      BOOL v5 = v13 - 1 >= v11;
      BOOL v6 = v13 - 1 == v11;
      if (v13 - 1 != v11) {
        unsigned int *v11 = *v64;
      }
      a5 = 0;
      *uint64_t v64 = v24;
    }
    else
    {
      do
      {
LABEL_57:
        unint64_t v44 = v25;
        unsigned int v46 = v25[1];
        ++v25;
        unsigned int v45 = v46;
      }
      while (v46 < v24);
      uint64_t v47 = a2;
      if (v44 == v13)
      {
        uint64_t v47 = a2;
        do
        {
          if (v25 >= (unsigned int *)v47) {
            break;
          }
          unsigned int v49 = *((_DWORD *)v47 - 1);
          v47 -= 4;
        }
        while (v49 >= v24);
      }
      else
      {
        do
        {
          unsigned int v48 = *((_DWORD *)v47 - 1);
          v47 -= 4;
        }
        while (v48 >= v24);
      }
      if (v25 < (unsigned int *)v47)
      {
        unsigned int v50 = *(_DWORD *)v47;
        uint64_t v51 = v25;
        uint64_t v52 = (unsigned int *)v47;
        do
        {
          *uint64_t v51 = v50;
          *uint64_t v52 = v45;
          do
          {
            unint64_t v44 = v51;
            unsigned int v53 = v51[1];
            ++v51;
            unsigned int v45 = v53;
          }
          while (v53 < v24);
          do
          {
            unsigned int v54 = *--v52;
            unsigned int v50 = v54;
          }
          while (v54 >= v24);
        }
        while (v51 < v52);
      }
      if (v44 != v13) {
        unsigned int *v13 = *v44;
      }
      *unint64_t v44 = v24;
      if (v25 < (unsigned int *)v47) {
        goto LABEL_75;
      }
      BOOL v55 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v13, v44);
      unint64_t v13 = v44 + 1;
      __n128 result = (unsigned int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *>(v44 + 1, (unsigned int *)a2);
      if (result)
      {
        a2 = (char *)v44;
        if (v55) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v55)
      {
LABEL_75:
        __n128 result = (unsigned int *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,Espresso::AOT::BackendIdentifier *,false>(v11, v44, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v13 = v44 + 1;
      }
    }
  }
  uint64_t v76 = (char *)(v13 + 1);
  BOOL v78 = v13 == (unsigned int *)a2 || v76 == a2;
  if (a5)
  {
    if (!v78)
    {
      uint64_t v79 = 0;
      int v80 = v13;
      do
      {
        unsigned int v82 = *(_DWORD *)v76;
        unsigned int v83 = *v80;
        if (*(_DWORD *)v76 < *v80)
        {
          unint64_t v84 = 0;
          do
          {
            *(_DWORD *)&v76[v84] = v83;
            if (v79 == v84)
            {
              uint64_t v81 = v13;
              goto LABEL_118;
            }
            unsigned int v83 = v80[v84 / 4 - 1];
            v84 -= 4;
          }
          while (v82 < v83);
          uint64_t v81 = (unsigned int *)&v76[v84];
LABEL_118:
          unsigned int *v81 = v82;
        }
        v76 += 4;
        ++v80;
        v79 -= 4;
      }
      while (v76 != a2);
    }
  }
  else if (!v78)
  {
    do
    {
      unsigned int v89 = *v11;
      unsigned int v88 = v11[1];
      BOOL v11 = (unsigned int *)v76;
      if (v88 < v89)
      {
        do
        {
          *(_DWORD *)uint64_t v76 = v89;
          unsigned int v89 = *((_DWORD *)v76 - 2);
          v76 -= 4;
        }
        while (v88 < v89);
        *(_DWORD *)uint64_t v76 = v88;
      }
      uint64_t v76 = (char *)(v11 + 1);
    }
    while (v11 + 1 != (unsigned int *)a2);
  }
  return result;
}

uint64_t std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  int v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      BOOL v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::__function::__func<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_1,std::allocator<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_1>,BOOL ()(MIL::IRFunction &)>::operator()(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(*(void **)(a1 + 8), v3))return 0; {
  uint64_t v4 = *(void *)(a1 + 32);
  }
  BOOL v5 = (char *)operator new(0x20uLL);
  *(void *)BOOL v5 = &unk_1EE37E690;
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 16);
  *((void *)v5 + 3) = v4;
  void v8[3] = v5;
  uint64_t v6 = MIL::Util::Rewrite();
  std::__function::__value_func<BOOL ()(MIL::IROperation &)>::~__value_func[abi:ne180100](v8);
  return v6;
}

void sub_192246A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(MIL::IROperation &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(MIL::IROperation &)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ___ZL9GetChipIDv_block_invoke()
{
  uint64_t result = MGGetSInt64Answer();
  GetChipID(void)::chipID = result;
  return result;
}

void Espresso::blob_storage_mmap_v2::blob_storage_mmap_v2(void *a1)
{
  *a1 = &unk_1EE350BF8;
  a1[1] = 0;
  operator new();
}

void sub_192246BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x192FF16B0](v15, 0x20C4093837F09);
  std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](v14, 0);
  _Unwind_Resume(a1);
}

MIL::Blob::StorageReader *std::unique_ptr<MIL::Blob::StorageReader>::reset[abi:ne180100](MIL::Blob::StorageReader **a1, MIL::Blob::StorageReader *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageReader::~StorageReader(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void Espresso::SerDes::layer_io<Espresso::generic_reshape_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v15 = a4;
  v11[0] = 0;
  v11[1] = 0;
  long long v12 = xmmword_192DCA380;
  __int16 v13 = 1;
  int v14 = 1;
  Espresso::SerDes::params_io<Espresso::reshape_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "reshape");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192246D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::reshape_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 24);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 4);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 12);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 16);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    if (*(_DWORD *)(a2 + 20) != -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v5, "dst_nd_rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 20);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v6 < 0) {
        operator delete(v5[0]);
      }
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v5, "nd_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 28);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v6 < 0) {
        operator delete(v5[0]);
      }
    }
    if (!*(unsigned char *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v5, "dynamic_shape");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 32);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v6 < 0) {
        operator delete(v5[0]);
      }
    }
    if (*(unsigned char *)(a2 + 33))
    {
      std::string::basic_string[abi:ne180100]<0>(v5, "rank_preserving_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 208))(v7, __p, a2 + 33);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      if (v6 < 0) {
        operator delete(v5[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 160))(v7, __p, a2 + 36);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v5, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 24));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)a2);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 4));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 8));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 12));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 16));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dst_nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 20));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 28));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 32));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "rank_preserving_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (unsigned char *)(a2 + 33));
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v5, "version");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v5, &v7);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v7, (_DWORD *)(a2 + 36));
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_192247700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_alloc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v6 = operator new(0x20uLL);
  void *v6 = &unk_1EE3979F8;
  v6[1] = a1;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  char v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1922478E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  if (!v4) {
    Espresso::throw_exception_selector<Espresso::generic_error>("Inconsistent state");
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v4 + 320))(v4);
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v6, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v6, &v8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v8, "squeeze");
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192247A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_squeeze_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  memset(v11, 0, sizeof(v11));
  int v12 = 2;
  Espresso::SerDes::params_io<Espresso::squeeze_params_t>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "squeeze");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192247B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::squeeze_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 160))(v11, __p, a2);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 160))(v11, __p, a2 + 4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (_DWORD *)a2);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v10, "size_of_axes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (_DWORD *)(a2 + 4));
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = 0; i != 32; ++i)
  {
    while (1)
    {
      if (a3 && i < *(int *)(a2 + 4))
      {
        std::to_string(&v9, i);
        char v7 = std::string::insert(&v9, 0, "axes_");
        std::string v10 = *v7;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 160))(v11, __p, a2 + 4 * i + 8);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
        goto LABEL_34;
      }
      if ((a3 & 1) == 0) {
        break;
      }
LABEL_34:
      if (++i == 32)
      {
        if (*(unsigned char *)(a2 + 136))
        {
          std::string::basic_string[abi:ne180100]<0>(&v10, "squeeze_all");
          Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 208))(v11, __p, a2 + 136);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          if (v12) {
            nitro::nitro_function::nitro_function(v12);
          }
          if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v10.__r_.__value_.__l.__data_);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v10, "version");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 160))(v11, __p, a2 + 140);
        goto LABEL_60;
      }
    }
    std::to_string(&v9, i);
    char v8 = std::string::insert(&v9, 0, "axes_");
    std::string v10 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (_DWORD *)(a2 + 4 * i + 8));
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "squeeze_all");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (unsigned char *)(a2 + 136));
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "version");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v10, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, (_DWORD *)(a2 + 140));
LABEL_60:
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_192248038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::squeeze_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::SerDes::layer_io<Espresso::generic_pool_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v21 = a4;
  v11[0] = xmmword_192DCA400;
  v11[1] = xmmword_192DCA240;
  int v12 = 2;
  __int16 v13 = 1;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0x100000001;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  Espresso::SerDes::params_io<Espresso::pool_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "pool");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192248200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::pool_params>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = (__int16 *)(a2 + 36);
  int v6 = *(unsigned __int16 *)(a2 + 36);
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "avg_or_max");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 16);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 20);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 4);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 8);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (*(_DWORD *)(a2 + 16) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "stride_x");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 16);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_DWORD *)(a2 + 20) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "stride_y");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 20);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "average_count_exclude_padding");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 28);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v45, "top_shape_style");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
    (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 32);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v48) {
      nitro::nitro_function::nitro_function(v48);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (*(_WORD *)(a2 + 68))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "force_num_channels");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 184))(v47, __p, a2 + 68);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_WORD *)(a2 + 60))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "start_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 184))(v47, __p, a2 + 60);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_WORD *)(a2 + 62))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "start_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 184))(v47, __p, a2 + 62);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_WORD *)(a2 + 64))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "total_channel_bottom");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 184))(v47, __p, a2 + 64);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_WORD *)(a2 + 66))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "total_channel_top");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 184))(v47, __p, a2 + 66);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_DWORD *)(a2 + 72))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "compute_argmax_mask");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 72);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_DWORD *)(a2 + 56))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "is_global");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 56);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (v6 != 0xFFFF)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_l");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 176))(v47, __p, a2 + 44);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_r");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 176))(v47, __p, a2 + 46);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 176))(v47, __p, a2 + 48);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_b");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 176))(v47, __p, a2 + 50);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_value");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 216))(v47, __p, a2 + 40);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, __int16 *))(*(void *)v47 + 176))(v47, __p, v5);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v45, "pad_fill_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 176))(v47, __p, a2 + 38);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    if (*(_DWORD *)(a2 + 12))
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "size_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, a2 + 12);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    int v8 = *(_DWORD *)(a2 + 24);
    uint64_t v7 = a2 + 24;
    if (v8 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v45, "stride_t");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
      (*(void (**)(void *, void **, uint64_t))(*(void *)v47 + 160))(v47, __p, v7);
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v48) {
        nitro::nitro_function::nitro_function(v48);
      }
      if (v46 < 0) {
        operator delete(v45[0]);
      }
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "avg_or_max");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)a2);
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  uint64_t v9 = (_DWORD *)(a2 + 16);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 16));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  std::string v10 = (_DWORD *)(a2 + 20);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 20));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "size_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  unint64_t v44 = (int *)(a2 + 4);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 4));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "size_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  unsigned int v43 = (int *)(a2 + 8);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 8));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 16));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 20));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "average_count_exclude_padding");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 28));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "top_shape_style");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  uint64_t v11 = (_DWORD *)(a2 + 32);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 32));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "force_num_channels");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 68));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "start_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 60));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "start_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 62));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "total_channel_bottom");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 64));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "total_channel_top");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 66));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "compute_argmax_mask");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 72));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "is_global");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 56));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  int v12 = (int16x4_t *)(a2 + 44);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 44));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  __int16 v13 = (__int16 *)(a2 + 46);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 46));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  unsigned int v42 = (_DWORD *)(a2 + 28);
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  long long v14 = (_WORD *)(a2 + 48);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 48));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  long long v15 = (_WORD *)(a2 + 50);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 50));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (float *)(a2 + 40));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, v5);
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_WORD *)(a2 + 38));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "size_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 12));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v45, "stride_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v45, &v47);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v47, (_DWORD *)(a2 + 24));
  if (v50 < 0) {
    operator delete(__p[0]);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v46 < 0) {
    operator delete(v45[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "pad_pad_mode");
  int v16 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v17 = v16;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v17) {
      goto LABEL_320;
    }
  }
  else if (!v16)
  {
    goto LABEL_320;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "pad_pad_mode");
  __int16 *v5 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
LABEL_320:
  std::string::basic_string[abi:ne180100]<0>(&v47, "stride");
  int v18 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v19 = v18;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v19) {
      goto LABEL_327;
    }
  }
  else if (!v18)
  {
    goto LABEL_327;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "stride");
  int v20 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  *uint64_t v9 = v20;
  *std::string v10 = v20;
LABEL_327:
  std::string::basic_string[abi:ne180100]<0>(&v47, "size");
  int v21 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v22 = v21;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v22) {
      goto LABEL_334;
    }
  }
  else if (!v21)
  {
    goto LABEL_334;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "size");
  int v23 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  *unint64_t v44 = v23;
  int *v43 = v23;
LABEL_334:
  std::string::basic_string[abi:ne180100]<0>(&v47, "padding");
  int v24 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v25 = v24;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v25) {
      goto LABEL_341;
    }
  }
  else if (!v24)
  {
    goto LABEL_341;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "padding");
  unsigned int v26 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  __int16 *v5 = 0;
  int16x4_t *v12 = vdup_n_s16(v26);
LABEL_341:
  std::string::basic_string[abi:ne180100]<0>(&v47, "padding_x");
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47))
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "padding_y");
    int v27 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, v45);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
  }
  else
  {
    int v27 = 0;
  }
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v27) {
      goto LABEL_354;
    }
  }
  else if (!v27)
  {
    goto LABEL_354;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "padding_x");
  __int16 v28 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "padding_y");
  __int16 v29 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  __int16 *v5 = 0;
  v12->i16[0] = v28;
  __int16 *v13 = v28;
  _WORD *v14 = v29;
  int v25 = 1;
  *long long v15 = v29;
LABEL_354:
  std::string::basic_string[abi:ne180100]<0>(&v47, "total_pad_w");
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47))
  {
    std::string::basic_string[abi:ne180100]<0>(v45, "total_pad_h");
    int v30 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, v45);
    if (v46 < 0) {
      operator delete(v45[0]);
    }
  }
  else
  {
    int v30 = 0;
  }
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v30) {
      goto LABEL_373;
    }
  }
  else if (!v30)
  {
    goto LABEL_373;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "total_pad_w");
  int v31 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "total_pad_h");
  int v32 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  __int16 *v5 = 0;
  if (v31 >= 0) {
    int v33 = v31;
  }
  else {
    int v33 = v31 + 1;
  }
  v12->i16[0] = v33 >> 1;
  __int16 *v13 = v31 - (v33 >> 1);
  if (v32 >= 0) {
    int v34 = v32;
  }
  else {
    int v34 = v32 + 1;
  }
  _WORD *v14 = v34 >> 1;
  *long long v15 = v32 - (v34 >> 1);
  int v25 = 1;
LABEL_373:
  std::string::basic_string[abi:ne180100]<0>(&v47, "use_perceptio_version");
  int v35 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v36 = v35;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v47);
    if (!v36) {
      goto LABEL_382;
    }
  }
  else if (!v35)
  {
    goto LABEL_382;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "use_perceptio_version");
  unsigned int v37 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  if (v37 < 3) {
    _DWORD *v11 = 2 - v37;
  }
  int v25 = 1;
LABEL_382:
  std::string::basic_string[abi:ne180100]<0>(&v47, "strict_zero_padding");
  int v38 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 24))(a1, &v47);
  int v39 = v38;
  if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    if (v38) {
      goto LABEL_384;
    }
LABEL_389:
    if (*v11 == 2) {
      int v41 = v25;
    }
    else {
      int v41 = 0;
    }
    if (v41 != 1) {
      return;
    }
LABEL_393:
    Espresso::padding_params_t::simplify_legacy(v5, *v44, *v43);
    return;
  }
  operator delete(v47);
  if (!v39) {
    goto LABEL_389;
  }
LABEL_384:
  std::string::basic_string[abi:ne180100]<0>(&v47, "strict_zero_padding");
  int v40 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 40))(a1, &v47);
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v47);
  }
  *unsigned int v42 = v40 != 0;
  if (*v11 == 2) {
    goto LABEL_393;
  }
}

void sub_192249FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::TranslateProgram(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  MILContext = (MIL::ParserOptions *)Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v14);
  if (v14.__r_.__value_.__r.__words[0]) {
    operator new();
  }
  MIL::ParserOptions::Make(&v15, MILContext);
  uint64_t v7 = v15;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v7 + 32))(v7, &v14, 1);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, 1);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  MIL::Text::ParseProgramFromFile();
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v11) {
    operator new();
  }
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  std::string v10 = 0;
  Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v9, a3, 0, 1, 1, 0, a1);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19224A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (v22)
  {
    nitro::nitro_function::nitro_function(v21);
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::TranslateProgram(MIL::PassManager *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v12 = v11;
  uint64_t v13 = (MIL::Passes::FlattenBlockNamespace *)MIL::PassManager::Make((uint64_t *)&v107, a1);
  value = v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_;
  MIL::Passes::FlattenBlockNamespace::Make((uint64_t *)&__p, v13);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first = __p.__first_;
  __p.__first_ = 0;
  v105[0] = first;
  (*(void (**)(std::pair<std::string, std::string> *, void **))(value->first.__r_.__value_.__r.__words[0] + 16))(value, v105);
  int v16 = v105[0];
  v105[0] = 0;
  if (v16) {
    (*(void (**)(void *))(*(void *)v16 + 8))(v16);
  }
  int v17 = (MIL::Pass *)__p.__first_;
  __p.__first_ = 0;
  if (v17)
  {
    MIL::Pass::~Pass(v17);
    MEMORY[0x192FF16B0]();
  }
  int v18 = *(uint64_t ***)((*(uint64_t (**)(void))(*(void *)v12 + 72))(v12) + 16);
  if (!v18)
  {
LABEL_16:
    (*((void (**)(std::__split_buffer<std::pair<std::string, std::string>> *__return_ptr))v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_->first.__r_.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_.__l.__data_
     + 3))(&__p);
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v94 = __p.__first_;
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v92 = __p.__first_;
    if (__p.__first_) {
      operator new();
    }
    uint64_t v95 = 0;
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t *))(*v18[5] + 32))(v18[5]);
    int v20 = *(char *)(v19 + 23);
    if (v20 < 0) {
      break;
    }
    if (v20 == 5) {
      goto LABEL_11;
    }
LABEL_15:
    int v18 = (uint64_t **)*v18;
    if (!v18) {
      goto LABEL_16;
    }
  }
  if (*(void *)(v19 + 8) != 5) {
    goto LABEL_15;
  }
  uint64_t v19 = *(void *)v19;
LABEL_11:
  if (*(_DWORD *)v19 != 829648745 || *(unsigned char *)(v19 + 4) != 56) {
    goto LABEL_15;
  }
  unint64_t v7 = (unint64_t)a7;
  uint64_t v22 = a2;
  int v23 = (MIL::Opsets::Common *)(*(uint64_t (**)(void))(*(void *)v12 + 40))(v12);
  MIL::Opsets::Common::RegisterIos18Decompositions(v23, v24);
  uint64_t v25 = 0;
  __v.__begin_ = 0;
  __v.__end_ = 0;
  __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&__v.__begin_;
  do
  {
    (*(void (**)(void))(*(void *)v12 + 40))(v12);
    unsigned int v26 = off_1E5748018[v25];
    std::string::basic_string[abi:ne180100]<0>(&v113, v26);
    Opset = (MIL::IROpset *)MIL::MILContext::GetOpset();
    MIL::IROpset::GetReversedOperatorNamesMap((uint64_t *)&__p, Opset);
    if (SBYTE7(v114) < 0) {
      operator delete((void *)v113);
    }
    for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = __p.__end_;
          i;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer i = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)i->first.__r_.__value_.__r.__words[0])
    {
      __int16 v29 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v111, "::");
      int v30 = std::string::insert(v29, 0, v26);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(void *)&v109[16] = *((void *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v109 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = i[1].first.__r_.__value_.__s.__data_[15];
      if (v32 >= 0) {
        int v33 = &i->second.__r_.__value_.__s.__data_[16];
      }
      else {
        int v33 = (const std::string::value_type *)i->second.__r_.__value_.__r.__words[2];
      }
      if (v32 >= 0) {
        std::string::size_type v34 = i[1].first.__r_.__value_.__s.__data_[15];
      }
      else {
        std::string::size_type v34 = i[1].first.__r_.__value_.__r.__words[0];
      }
      int v35 = std::string::append((std::string *)v109, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      *(void *)&long long v114 = *((void *)&v35->__r_.__value_.__l + 2);
      long long v113 = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&__v, &v113, (uint64_t)&v113);
      if (SBYTE7(v114) < 0) {
        operator delete((void *)v113);
      }
      if ((v109[23] & 0x80000000) != 0) {
        operator delete(*(void **)v109);
      }
      if (SHIBYTE(v111.__end_cap_.__value_) < 0) {
        operator delete(v111.__begin_);
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
    ++v25;
  }
  while (v25 != 4);
  std::string::basic_string[abi:ne180100]<0>(&__p, "ios18::scaled_dot_product_attention");
  std::__tree<std::string>::__erase_unique<std::string>(&__v, &__p);
  a2 = v22;
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v12 + 40))(v12);
  (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>> *__return_ptr))(*(void *)v37 + 56))(&__p);
  (*((void (**)(long long *__return_ptr))v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_->first.__r_.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_.__l.__data_
   + 3))(&v113);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v94 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v113;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v92 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v113;
  if ((void)v113) {
    operator new();
  }
  uint64_t v95 = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v38 = __p.__first_;
  __p.__first_ = 0;
  if (v38) {
    (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v38->first.__r_.__value_.__r.__words[0]
  }
                                                                                              + 8))(v38);
  std::__tree<std::string>::destroy((uint64_t)&__v, (char *)__v.__begin_);
LABEL_44:
  int v39 = v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_;
  v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_ = 0;
  if (v39) {
    (*(void (**)(std::pair<std::string, std::string> *))(v39->first.__r_.__value_.__r.__words[0] + 8))(v39);
  }
  if (*((void *)&v12 + 1))
  {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v12 + 1));
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v92 = v94;
  }
  if (!a5)
  {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v96 = v92;
    uint64_t v97 = v95;
    goto LABEL_160;
  }
  uint64_t v88 = a2;
  long long v113 = 0u;
  long long v114 = 0u;
  int v115 = 1065353216;
  int v40 = *(uint64_t **)((*(uint64_t (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v92->first.__r_.__value_.__r.__words[0] + 72))(v92)
                    + 16);
  if (!v40) {
    goto LABEL_156;
  }
  while (2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "IOAliases");
    uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::TryGetAttribute();
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "UpgradeMetadata");
    if (MIL::IRObject::TryGetAttribute()) {
      BOOL v42 = 1;
    }
    else {
      BOOL v42 = Attribute == 0;
    }
    int v43 = !v42;
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    if (v43) {
      Espresso::throw_exception_selector<Espresso::network_translation_error>("MIL->EIR lowering supports IOAliases attributes only for MIL models upgraded from EIR.");
    }
    unint64_t v44 = v40 + 2;
    int v45 = *((char *)v40 + 39);
    uint64_t v93 = (long long *)(v40 + 2);
    if (v45 < 0)
    {
      if (v40[3] != 4) {
        goto LABEL_141;
      }
      unint64_t v44 = *(_DWORD **)v93;
    }
    else if (v45 != 4)
    {
      goto LABEL_141;
    }
    if (*v44 != 1852399981 || !Attribute)
    {
LABEL_141:
      uint64_t v82 = v40[5];
      memset(&__v, 0, 24);
      (*(void (**)(std::vector<std::pair<std::string, std::string>> *__return_ptr))(*(void *)v82 + 224))(&v111);
      std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IRFunction>,0>((std::string *)&__p, v93, (uint64_t *)&v111);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>((uint64_t)&v113, (unsigned __int8 *)&__p, (uint64_t)&__p);
      if (__p.__end_cap_.__value_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__end_cap_.__value_);
      }
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      std::vector<std::pair<std::string, std::string>>::pointer begin = v111.__begin_;
      v111.__begin_ = 0;
      if (begin) {
        (*(void (**)(std::vector<std::pair<std::string, std::string>>::pointer))(begin->first.__r_.__value_.__r.__words[0]
      }
                                                                                          + 8))(begin);
      *(void *)uint64_t v109 = &__v;
      p_p = (std::__split_buffer<std::pair<std::string, std::string>> *)v109;
      goto LABEL_155;
    }
    char v46 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(Attribute);
    memset(&v111, 0, sizeof(v111));
    unint64_t v47 = MIL::IRDictionaryValue::Size(v46);
    std::vector<std::pair<std::string, std::string>>::pointer v48 = v111.__begin_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 4) < v47)
    {
      if (v47 > 0x555555555555555) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::vector<std::pair<std::string, std::string>>::pointer end = v111.__end_;
      __p.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v111.__end_cap_;
      __p.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v47);
      __p.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)__p.__first_
                                                                                       + (char *)end
                                                                                       - (char *)v48);
      __p.__end_ = __p.__begin_;
      __p.__end_cap_.__value_ = &__p.__first_[v50];
      std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v111, &__p);
      std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__p);
    }
    memset(v109, 0, sizeof(v109));
    float v110 = 1.0;
    uint64_t v51 = (void *)MIL::IRDictionaryValue::begin(v46);
    uint64_t v52 = MIL::IRDictionaryValue::end(v46);
    while (2)
    {
      if (v51 != (void *)v52)
      {
        MIL::IRValue::GetScalar<std::string>();
        MIL::IRValue::GetScalar<std::string>();
        if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v109, (uint64_t)v105))
        {
          Espresso::throw_exception_selector<Espresso::network_translation_error>("MIL -> EIR translation does not support aliasing to multiple names.");
        }
        unint64_t v53 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v105);
        unint64_t v54 = v53;
        unint64_t v55 = *(void *)&v109[8];
        if (*(void *)&v109[8])
        {
          uint8x8_t v56 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v109[8]);
          v56.i16[0] = vaddlv_u8(v56);
          unint64_t v57 = v56.u32[0];
          if (v56.u32[0] > 1uLL)
          {
            unint64_t v7 = v53;
            if (v53 >= *(void *)&v109[8]) {
              unint64_t v7 = v53 % *(void *)&v109[8];
            }
          }
          else
          {
            unint64_t v7 = (*(void *)&v109[8] - 1) & v53;
          }
          uint64_t v58 = *(unsigned __int8 ***)(*(void *)v109 + 8 * v7);
          if (v58)
          {
            for (uint64_t j = *v58; j; uint64_t j = *(unsigned __int8 **)j)
            {
              unint64_t v60 = *((void *)j + 1);
              if (v60 == v54)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)v105)) {
                  goto LABEL_116;
                }
              }
              else
              {
                if (v57 > 1)
                {
                  if (v60 >= v55) {
                    v60 %= v55;
                  }
                }
                else
                {
                  v60 &= v55 - 1;
                }
                if (v60 != v7) {
                  break;
                }
              }
            }
          }
        }
        unsigned int v61 = operator new(0x28uLL);
        *unsigned int v61 = 0;
        v61[1] = v54;
        unsigned int v62 = (std::string *)(v61 + 2);
        if (SHIBYTE(v106) < 0)
        {
          std::string::__init_copy_ctor_external(v62, (const std::string::value_type *)v105[0], (std::string::size_type)v105[1]);
        }
        else
        {
          *(_OWORD *)&v62->__r_.__value_.__l.__data_ = *(_OWORD *)v105;
          v61[4] = v106;
        }
        float v63 = (float)(unint64_t)(*(void *)&v109[24] + 1);
        if (!v55 || (float)(v110 * (float)v55) < v63)
        {
          BOOL v64 = v55 < 3 || (v55 & (v55 - 1)) != 0;
          unint64_t v65 = v64 | (2 * v55);
          unint64_t v66 = vcvtps_u32_f32(v63 / v110);
          if (v65 <= v66) {
            size_t v67 = v66;
          }
          else {
            size_t v67 = v65;
          }
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v109, v67);
          unint64_t v55 = *(void *)&v109[8];
          if ((*(void *)&v109[8] & (*(void *)&v109[8] - 1)) != 0)
          {
            if (v54 >= *(void *)&v109[8]) {
              unint64_t v7 = v54 % *(void *)&v109[8];
            }
            else {
              unint64_t v7 = v54;
            }
          }
          else
          {
            unint64_t v7 = (*(void *)&v109[8] - 1) & v54;
          }
        }
        uint64_t v68 = *(void *)v109;
        long long v69 = *(void **)(*(void *)v109 + 8 * v7);
        if (v69)
        {
          *unsigned int v61 = *v69;
          goto LABEL_114;
        }
        *unsigned int v61 = *(void *)&v109[16];
        *(void *)&v109[16] = v61;
        *(void *)(v68 + 8 * v7) = &v109[16];
        if (*v61)
        {
          unint64_t v70 = *(void *)(*v61 + 8);
          if ((v55 & (v55 - 1)) != 0)
          {
            if (v70 >= v55) {
              v70 %= v55;
            }
          }
          else
          {
            v70 &= v55 - 1;
          }
          long long v69 = (void *)(*(void *)v109 + 8 * v70);
LABEL_114:
          *long long v69 = v61;
        }
        ++*(void *)&v109[24];
LABEL_116:
        MIL::IRValue::GetScalar<std::string>();
        *(_OWORD *)&__p.__first_ = *(_OWORD *)v101;
        __p.__end_ = v102;
        v101[1] = 0;
        uint64_t v102 = 0;
        v101[0] = 0;
        if (SHIBYTE(v108) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p.__end_cap_, (const std::string::value_type *)v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_, (std::string::size_type)v107.std::__1::__compressed_pair_elem<std::allocator<std::pair<std::string, std::string>> &, 1, false>::__value_);
        }
        else
        {
          __p.__end_cap_ = v107;
          std::string::size_type v104 = v108;
        }
        std::vector<std::pair<std::string, std::string>>::pointer v71 = v111.__end_;
        if (v111.__end_ >= v111.__end_cap_.__value_)
        {
          unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_ - (char *)v111.__begin_) >> 4);
          unint64_t v75 = v74 + 1;
          if (v74 + 1 > 0x555555555555555) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 4) > v75) {
            unint64_t v75 = 0x5555555555555556 * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v111.__end_cap_.__value_ - (char *)v111.__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v76 = 0x555555555555555;
          }
          else {
            unint64_t v76 = v75;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&v111.__end_cap_;
          if (v76) {
            unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v76);
          }
          else {
            uint64_t v77 = 0;
          }
          unint64_t v78 = v76 + 48 * v74;
          __v.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v76;
          __v.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v78;
          __v.__end_cap_.__value_ = (std::pair<std::string, std::string> *)(v76 + 48 * v77);
          long long v79 = *(_OWORD *)&__p.__first_;
          *(void *)(v78 + 16) = __p.__end_;
          *(_OWORD *)unint64_t v78 = v79;
          memset(&__p, 0, 24);
          std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>> &> end_cap = __p.__end_cap_;
          *(void *)(v78 + 40) = v104;
          *(std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>> &> *)(v78 + 24) = end_cap;
          __p.__end_cap_.__value_ = 0;
          std::string::size_type v104 = 0;
          __p.__end_cap_.__value_ = 0;
          __v.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v78 + 48);
          std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(&v111, &__v);
          uint64_t v81 = v111.__end_;
          std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
          v111.__end_ = v81;
          if (SHIBYTE(v104) < 0) {
            operator delete(__p.__end_cap_.__value_);
          }
        }
        else
        {
          long long v72 = *(_OWORD *)&__p.__first_;
          v111.__end_->first.__r_.__value_.__r.__words[2] = (std::string::size_type)__p.__end_;
          *(_OWORD *)&v71->first.__r_.__value_.__l.__data_ = v72;
          memset(&__p, 0, 24);
          std::string::size_type v73 = v104;
          *(std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>> &> *)&v71->second.__r_.__value_.__l.__data_ = __p.__end_cap_;
          v71->second.__r_.__value_.__r.__words[2] = v73;
          __p.__end_cap_.__value_ = 0;
          std::string::size_type v104 = 0;
          __p.__end_cap_.__value_ = 0;
          v111.__end_ = v71 + 1;
        }
        if (SHIBYTE(__p.__end_) < 0) {
          operator delete(__p.__first_);
        }
        if (SHIBYTE(v102) < 0) {
          operator delete(v101[0]);
        }
        if (SHIBYTE(v106) < 0) {
          operator delete(v105[0]);
        }
        if (SHIBYTE(v108) < 0) {
          operator delete(v107.std::__1::__compressed_pair_elem<std::pair<std::string, std::string> *, 0, false>::__value_);
        }
        uint64_t v51 = (void *)*v51;
        continue;
      }
      break;
    }
    (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>> *__return_ptr))(*(void *)v40[5] + 224))(&__v);
    std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IRFunction>,0>((std::string *)&__p, v93, (uint64_t *)&__v);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>((uint64_t)&v113, (unsigned __int8 *)&__p, (uint64_t)&__p);
    if (__p.__end_cap_.__value_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__end_cap_.__value_);
    }
    if (SHIBYTE(__p.__end_) < 0) {
      operator delete(__p.__first_);
    }
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v85 = __v.__first_;
    __v.__first_ = 0;
    if (v85) {
      (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v85->first.__r_.__value_.__r.__words[0]
    }
                                                                                                + 8))(v85);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v109);
    __p.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v111;
    p_p = &__p;
LABEL_155:
    std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)p_p);
    int v40 = (uint64_t *)*v40;
    if (v40) {
      continue;
    }
    break;
  }
LABEL_156:
  (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>> *__return_ptr))(v92->first.__r_.__value_.__r.__words[0]
                                                                                                 + 88))(&__p);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v96 = __p.__first_;
  a2 = v88;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v92 = __p.__first_;
  if (__p.__first_) {
    operator new();
  }
  uint64_t v97 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)&v113);
LABEL_160:
  char v98 = a3;
  char v99 = a4;
  char v100 = a6;
  unsigned int v86 = (void *)(*(uint64_t (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v92->first.__r_.__value_.__r.__words[0] + 72))(v92);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v86, (unsigned __int8 *)a2))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v87 = a2;
    }
    else {
      uint64_t v87 = *(void *)a2;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("Function %s not found", v87);
  }
  Espresso::MILTranslator::MILProgramTranslator::ConvertFunction(a7, (uint64_t)&v94);
  Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)&v94);
}

void sub_19224B3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v63 = *(void *)(v60 - 144);
  *(void *)(v60 - 144) = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  std::__tree<std::string>::destroy(v60 - 184, *(char **)(v60 - 176));
  if (a48) {
    (*(void (**)(void *))(*(void *)a48 + 8))(a48);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  if (a2 == 2)
  {
    BOOL v64 = (Espresso *)__cxa_begin_catch(a1);
    unint64_t v66 = Espresso::espresso_os_log_subsystem(v64, v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(Espresso *))(*(void *)v64 + 16))(v64);
      *(_DWORD *)(v60 - 144) = 136315138;
      _os_log_error_impl(&dword_1920CB000, v66, OS_LOG_TYPE_ERROR, "Failure translating MIL->EIR network: %s", (uint8_t *)(v60 - 144), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    size_t v67 = (Espresso *)__cxa_begin_catch(a1);
    long long v69 = Espresso::espresso_os_log_subsystem(v67, v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(Espresso *))(*(void *)v67 + 16))(v67);
      *(_DWORD *)(v60 - 144) = 136315138;
      _os_log_error_impl(&dword_1920CB000, v69, OS_LOG_TYPE_ERROR, "Failure translating MIL->EIR network: %s", (uint8_t *)(v60 - 144), 0xCu);
    }
    uint64_t v70 = (*(uint64_t (**)(Espresso *))(*(void *)v67 + 16))(v67);
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("Unknown MIL->EIR network translation error: %s", v70);
  }
  _Unwind_Resume(a1);
}

void sub_19224B9B4(_Unwind_Exception *a1)
{
}

void sub_19224B9C0(_Unwind_Exception *a1)
{
}

void sub_19224B9CC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x19224B9D4);
  }
  __clang_call_terminate(a1);
}

void std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IRFunction>,0>(std::string *this, long long *a2, uint64_t *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)&this[1], a3);
  return this;
}

void sub_19224BACC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v12; i; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  int v16 = (char *)operator new(0x38uLL);
  v27[0] = v16;
  v27[1] = a1 + 16;
  char v28 = 0;
  *(void *)int v16 = 0;
  *((void *)v16 + 1) = v8;
  int v17 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)int v16 = *v25;
LABEL_41:
    void *v25 = v16;
    goto LABEL_42;
  }
  *(void *)int v16 = *v15;
  *uint64_t v15 = v16;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)v16)
  {
    unint64_t v26 = *(void *)(*(void *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_41;
  }
LABEL_42:
  v27[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27);
}

void sub_19224BDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::dropout_augment_lowmem::ret_t::~ret_t(Espresso::dropout_augment_lowmem::ret_t *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
}

uint64_t Espresso::MILUtil::CreateMILContext(Espresso::MILUtil *this)
{
  return espresso_tmp_enable_montreal(1);
}

void sub_19224BE50(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::MakeIRProgramWithFunction(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  unint64_t v8 = (MIL::IRObject *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 48))(&v33);
  uint64_t v30 = v33;
  long long v31 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::Make();
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(v8);
  uint8x8_t v10 = (std::__shared_weak_count *)LocationPtr[1];
  v28[1] = *LocationPtr;
  __int16 v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::ProgramBuilder::SetLocation();
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 232))(v28, a1);
  uint64_t v11 = v33;
  long long v12 = v34;
  uint64_t v26 = v33;
  int v27 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (!a2) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (a2) {
LABEL_16:
  }
    Espresso::AOT::RemoveTensorAttributes(v33, v28[0]);
LABEL_17:
  v22[9] = v33;
  size_t v23 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v22[7] = v28[0];
  if (v28[0]) {
    operator new();
  }
  v22[8] = 0;
  v28[0] = 0;
  MIL::Builder::FunctionBuilder::Make();
  uint64_t v24 = v21;
  if (v21) {
    operator new();
  }
  uint64_t v25 = 0;
  MIL::Builder::ProgramBuilder::AddFunction();
  uint64_t v21 = 0;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  MIL::Builder::ProgramBuilder::CreateProgram(&v21, v32);
  if (((*(uint64_t (**)(void *))(v22[0] + 16))(v22) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)v22);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "buildInfo");
  if (MIL::IRObject::TryGetAttribute())
  {
    MIL::Attributes::BuildInfo::Make();
    MIL::Attributes::BuildInfo::Replace();
    uint64_t v13 = (MIL::Attributes::BuildInfo *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v13)
    {
      MIL::Attributes::BuildInfo::~BuildInfo(v13);
      MEMORY[0x192FF16B0]();
    }
  }
  uint64_t v14 = v21;
  uint64_t v21 = 0;
  *a4 = v14;
  MEMORY[0x192FEF390](v22);
  uint64_t v15 = v21;
  uint64_t v21 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v28[0];
  v28[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  int v17 = v32;
  int v32 = 0;
  if (v17) {
    (*(void (**)(MIL::Builder::ProgramBuilder *))(*(void *)v17 + 8))(v17);
  }
  float v18 = v34;
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19224C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair(&a16);
      uint64_t v34 = *(void *)(v32 - 128);
      *(void *)(v32 - 128) = 0;
      if (v34)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
        uint64_t v35 = *(void *)(v32 - 88);
        *(void *)(v32 - 88) = 0;
        if (!v35)
        {
LABEL_8:
          std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v32 - 80);
          _Unwind_Resume(a1);
        }
      }
      else
      {
        uint64_t v35 = *(void *)(v32 - 88);
        *(void *)(v32 - 88) = 0;
        if (!v35) {
          goto LABEL_8;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v32 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void sub_19224C648()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x19224C614);
  }
  JUMPOUT(0x19224C5D4);
}

void sub_19224C65C()
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v0 - 120);
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x19224C614);
  }
  JUMPOUT(0x19224C5D4);
}

void sub_19224C678()
{
  uint64_t v1 = *(void *)(v0 - 88);
  *(void *)(v0 - 88) = 0;
  if (v1) {
    JUMPOUT(0x19224C614);
  }
  JUMPOUT(0x19224C5D4);
}

void sub_19224C68C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 104);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5MinimalCpu::TransformInterleavedEmbeddings(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t ***)(a3 + 16);
  if (v3)
  {
    while (1)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))(*v3[5] + 48))(v3[5]);
      if (!E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(*a2, v5)) {
        goto LABEL_3;
      }
      uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*v3[5] + 48))(v3[5]);
      unint64_t v7 = ***(MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
      char v58 = 5;
      strcpy((char *)&__p, "input");
      uint64_t v8 = (*(uint64_t (**)(MIL::IROperation *, void **, void))(*(void *)v7 + 128))(v7, &__p, 0);
      unint64_t v9 = (MIL::IRValue *)v8;
      if (v58 < 0)
      {
        operator delete(__p);
        if (!v9) {
          goto LABEL_3;
        }
      }
      else if (!v8)
      {
        goto LABEL_3;
      }
      uint64_t v10 = MIL::IRValue::AsTensor(v9);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
      if (!v11) {
        goto LABEL_3;
      }
      long long v12 = (void *)v11;
      OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(v7);
      uint64_t v14 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
      uint64_t v15 = (E5Common::Utils *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v14);
      E5Common::Utils::GetConstantShape(v15, v16, (uint64_t)&__p);
      if (!v59)
      {
        int v18 = 3;
        goto LABEL_22;
      }
      E5Common::Utils::GetConstantStrides(v15, (uint64_t)v54);
      if (!v55)
      {
        int v18 = 3;
        BOOL v20 = v54[0];
        if (!v54[0]) {
          goto LABEL_22;
        }
LABEL_21:
        v54[1] = v20;
        operator delete(v20);
        goto LABEL_22;
      }
      E5Common::Utils::GetConstantInterleaves(v15, (uint64_t)v52);
      if (!v53) {
        goto LABEL_14;
      }
      int64_t v17 = v57 - (unsigned char *)__p;
      if ((unint64_t)(((v57 - (unsigned char *)__p) >> 3) - 4) < 0xFFFFFFFFFFFFFFFELL
        || v17 == 24 && *((void *)__p + 1) != 1)
      {
        goto LABEL_14;
      }
      float v19 = v52[0];
      uint64_t v21 = *(unsigned __int8 *)v52[0];
      if (v21 != 1) {
        break;
      }
      int v18 = 3;
LABEL_16:
      v52[1] = v19;
      operator delete(v19);
LABEL_17:
      BOOL v20 = v54[0];
      if (v54[0]) {
        goto LABEL_21;
      }
LABEL_22:
      if (__p)
      {
        unint64_t v57 = (char *)__p;
        operator delete(__p);
      }
      if (v18 != 3) {
        return;
      }
LABEL_3:
      unint64_t v3 = (uint64_t **)*v3;
      if (!v3) {
        return;
      }
    }
    uint64_t v22 = *(void *)((char *)v54[0] + v17 - 8);
    if (v22 == v21)
    {
      uint64_t v23 = *(void *)((char *)v54[0] + v17 - 16);
      if (v23 == *((void *)v57 - 1) * v22)
      {
        if (v17 != 24)
        {
LABEL_37:
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&__str, "path");
          uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v12, (uint64_t)&__str);
          if (!v26) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          char v28 = (MIL::IRValue *)v26[5];
          uint64_t v27 = v26[6];
          uint64_t v50 = v28;
          uint64_t v51 = (std::__shared_weak_count *)v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = 6;
          strcpy((char *)&__str, "offset");
          __int16 v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v12, (uint64_t)&__str);
          if (!v29) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          int v31 = (MIL::IRValue *)v29[5];
          uint64_t v30 = v29[6];
          std::vector<std::pair<std::string, std::string>>::pointer v48 = v31;
          unsigned int v49 = (std::__shared_weak_count *)v30;
          if (v30) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          MIL::IRValue::AsTensor(v28);
          MIL::IRValue::GetScalar<std::string>();
          MIL::IRValue::AsTensor(v31);
          uint64_t v32 = MIL::IRValue::GetScalar<unsigned long long>();
          uint64_t v33 = (*(uint64_t (**)(MIL::IRValue *))(*(void *)v9 + 32))(v9);
          uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
          int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 88))(v34);
          memset(&v46, 0, sizeof(v46));
          switch(v35)
          {
            case 4:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v44, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                std::string v44 = __s;
              }
              std::vector<unsigned long long>::vector(&v43, (uint64_t)&__p);
            case 5:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v40, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                std::string v40 = __s;
              }
              std::vector<unsigned long long>::vector(&v39, (uint64_t)&__p);
            case 9:
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v42, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              }
              else {
                std::string v42 = __s;
              }
              std::vector<unsigned long long>::vector(&v41, (uint64_t)&__p);
          }
          int v18 = 1;
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          long long v36 = v49;
          if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
          uint64_t v37 = v51;
          if (v51 && !atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
LABEL_15:
          float v19 = v52[0];
          if (!v52[0]) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (*(void *)v54[0] == *((void *)v57 - 2) * v23)
        {
          uint64_t v24 = (char *)__p + 8;
          int64_t v25 = v57 - ((unsigned char *)__p + 16);
          if (v57 != (char *)__p + 16)
          {
            std::__split_buffer<std::pair<std::string, std::string>>::pointer v38 = (char *)__p + 8;
            memmove((char *)__p + 8, (char *)__p + 16, v57 - ((unsigned char *)__p + 16));
            uint64_t v24 = v38;
          }
          unint64_t v57 = &v24[v25];
          goto LABEL_37;
        }
      }
    }
LABEL_14:
    int v18 = 3;
    goto LABEL_15;
  }
}

void sub_19224D934(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  uint64_t v4 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v4;
    operator delete(v4);
    uint64_t v2 = (void *)STACK[0x280];
    if (STACK[0x280])
    {
LABEL_11:
      STACK[0x288] = (unint64_t)v2;
      operator delete(v2);
      unint64_t v3 = (void *)STACK[0x2A0];
      if (!STACK[0x2A0]) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v2 = (void *)STACK[0x280];
    if (STACK[0x280]) {
      goto LABEL_11;
    }
  }
  unint64_t v3 = (void *)STACK[0x2A0];
  if (!STACK[0x2A0]) {
LABEL_13:
  }
    _Unwind_Resume(a1);
LABEL_12:
  STACK[0x2A8] = (unint64_t)v3;
  operator delete(v3);
  goto LABEL_13;
}

uint64_t std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::MILContext  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t Espresso::AOT::AbstractMILCompiler::Run(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void nitro::ndarray<float>& nitro::ndarray<float>::assign<half>(nitro::ndarray<half> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 1227, 1);
    std::stringbuf::str();
    uint64_t v2 = (char *)pthread_getspecific(*((void *)started + 74));
    if (v2 && v2[280])
    {
      unint64_t v3 = v2 + 16;
      if ((v10 & 0x80u) == 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if ((v10 & 0x80u) == 0) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6)
    {
      if (*((unsigned char *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
        }
      }
    }
    if ((char)v10 < 0) {
      operator delete(__p[0]);
    }
  }
  unint64_t v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_19224DF90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19224DFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19224DF9CLL);
}

void std::__shared_ptr_emplace<Espresso::dump_network_layers_blobs_state>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  uint64_t v5 = (void **)(a1 + 120);
  std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
}

void std::vector<std::unique_ptr<Espresso::blob_file_metadata>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          std::default_delete<Espresso::blob_file_metadata>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void anonymous namespace'::ConstCastFusion(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v261 = 0;
  v262 = 0;
  v263[0] = 0;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 64))(a4);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(&v261, (uint64_t)(*(void *)(*(void *)v9 + 8) - **(void **)v9) >> 4);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 72))(a4);
  uint64_t v11 = *(MIL::IROperation ***)v10;
  int v255 = *(MIL::IROperation ***)(v10 + 8);
  if (*(MIL::IROperation ***)v10 == v255) {
    goto LABEL_556;
  }
  std::string v254 = (void *)(a5 + 16);
  do
  {
    long long v12 = (std::__shared_weak_count *)a2[1];
    uint64_t v256 = *a2;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v257 = v11;
    uint64_t v13 = *v11;
    uint64_t v14 = (std::__shared_weak_count *)v11[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(void *)v13 + 80))(&v297, v13);
    int v15 = (*(uint64_t (**)(std::string::size_type))(*(void *)v297.__r_.__value_.__l.__data_ + 104))(v297.__r_.__value_.__r.__words[0]);
    if (v297.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v297.__r_.__value_.__l.__size_);
    }
    uint64_t v258 = v13;
    if (!v15) {
      goto LABEL_90;
    }
    (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(void *)v13 + 200))(&v296, v13);
    std::string::size_type v16 = v296.__r_.__value_.__r.__words[0];
    unint64_t v17 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v296.__r_.__value_.__l.__data_);
    std::string::size_type v18 = v17;
    unint64_t v19 = *(void *)(a5 + 8);
    if (!v19) {
      goto LABEL_27;
    }
    char v251 = (MIL::IRObject *)v14;
    uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
    v20.i16[0] = vaddlv_u8(v20);
    unint64_t v21 = v20.u32[0];
    if (v20.u32[0] > 1uLL)
    {
      std::string::size_type v5 = v17;
      if (v17 >= v19) {
        std::string::size_type v5 = v17 % v19;
      }
    }
    else
    {
      std::string::size_type v5 = (v19 - 1) & v17;
    }
    uint64_t v22 = *(std::string::size_type **)(*(void *)a5 + 8 * v5);
    if (!v22 || (std::string::size_type v23 = *v22) == 0)
    {
LABEL_26:
      uint64_t v14 = (std::__shared_weak_count *)v251;
LABEL_27:
      int64_t v25 = operator new(0x38uLL);
      v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v297.__r_.__value_.__l.__size_ = a5 + 16;
      v297.__r_.__value_.__s.__data_[16] = 0;
      void *v25 = 0;
      v25[1] = v18;
      uint64_t v26 = (std::string *)(v25 + 2);
      if (*(char *)(v16 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
      }
      else
      {
        long long v27 = *(_OWORD *)v16;
        v25[4] = *(void *)(v16 + 16);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      }
      v25[5] = 0;
      v25[6] = 0;
      v297.__r_.__value_.__s.__data_[16] = 1;
      float v28 = (float)(unint64_t)(*(void *)(a5 + 24) + 1);
      float v29 = *(float *)(a5 + 32);
      if (v19 && (float)(v29 * (float)v19) >= v28)
      {
LABEL_76:
        int v45 = *(std::string::size_type **)(*(void *)a5 + 8 * v5);
        std::string::size_type v23 = v297.__r_.__value_.__r.__words[0];
        if (v45)
        {
          *(void *)v297.__r_.__value_.__l.__data_ = *v45;
          uint64_t v13 = v258;
        }
        else
        {
          *(void *)v297.__r_.__value_.__l.__data_ = *(void *)(a5 + 16);
          *(void *)(a5 + 16) = v23;
          *(void *)(*(void *)a5 + 8 * v5) = v254;
          uint64_t v13 = v258;
          if (!*(void *)v23) {
            goto LABEL_85;
          }
          unint64_t v46 = *(void *)(*(void *)v23 + 8);
          if ((v19 & (v19 - 1)) != 0)
          {
            if (v46 >= v19) {
              v46 %= v19;
            }
          }
          else
          {
            v46 &= v19 - 1;
          }
          int v45 = (std::string::size_type *)(*(void *)a5 + 8 * v46);
        }
        std::string::size_type *v45 = v23;
LABEL_85:
        v297.__r_.__value_.__r.__words[0] = 0;
        ++*(void *)(a5 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v297);
        if (!v14) {
          goto LABEL_87;
        }
LABEL_86:
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_87;
      }
      BOOL v30 = (v19 & (v19 - 1)) != 0;
      if (v19 < 3) {
        BOOL v30 = 1;
      }
      unint64_t v31 = v30 | (2 * v19);
      unint64_t v32 = vcvtps_u32_f32(v28 / v29);
      if (v31 <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      else {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v19 = *(void *)(a5 + 8);
      if (*(void *)&prime > v19) {
        goto LABEL_42;
      }
      if (*(void *)&prime < v19)
      {
        unint64_t v40 = vcvtps_u32_f32((float)*(unint64_t *)(a5 + 24) / *(float *)(a5 + 32));
        if (v19 < 3 || (uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v19), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
        {
          unint64_t v40 = std::__next_prime(v40);
        }
        else
        {
          uint64_t v42 = 1 << -(char)__clz(v40 - 1);
          if (v40 >= 2) {
            unint64_t v40 = v42;
          }
        }
        if (*(void *)&prime <= v40) {
          int8x8_t prime = (int8x8_t)v40;
        }
        if (*(void *)&prime >= v19)
        {
          unint64_t v19 = *(void *)(a5 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_42:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v34 = operator new(8 * *(void *)&prime);
            int v35 = *(void **)a5;
            *(void *)a5 = v34;
            if (v35) {
              operator delete(v35);
            }
            uint64_t v36 = 0;
            *(int8x8_t *)(a5 + 8) = prime;
            do
              *(void *)(*(void *)a5 + 8 * v36++) = 0;
            while (*(void *)&prime != v36);
            uint64_t v37 = (void *)*v254;
            if (*v254)
            {
              unint64_t v38 = v37[1];
              uint8x8_t v39 = (uint8x8_t)vcnt_s8(prime);
              v39.i16[0] = vaddlv_u8(v39);
              if (v39.u32[0] > 1uLL)
              {
                if (v38 >= *(void *)&prime) {
                  v38 %= *(void *)&prime;
                }
              }
              else
              {
                v38 &= *(void *)&prime - 1;
              }
              *(void *)(*(void *)a5 + 8 * v38) = v254;
              int v43 = (void *)*v37;
              if (*v37)
              {
                do
                {
                  unint64_t v44 = v43[1];
                  if (v39.u32[0] > 1uLL)
                  {
                    if (v44 >= *(void *)&prime) {
                      v44 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v44 &= *(void *)&prime - 1;
                  }
                  if (v44 != v38)
                  {
                    if (!*(void *)(*(void *)a5 + 8 * v44))
                    {
                      *(void *)(*(void *)a5 + 8 * v44) = v37;
                      goto LABEL_67;
                    }
                    *uint64_t v37 = *v43;
                    void *v43 = **(void **)(*(void *)a5 + 8 * v44);
                    **(void **)(*(void *)a5 + 8 * v44) = v43;
                    int v43 = v37;
                  }
                  unint64_t v44 = v38;
LABEL_67:
                  uint64_t v37 = v43;
                  int v43 = (void *)*v43;
                  unint64_t v38 = v44;
                }
                while (v43);
              }
            }
            unint64_t v19 = (unint64_t)prime;
            goto LABEL_71;
          }
          char v100 = *(void **)a5;
          *(void *)a5 = 0;
          if (v100) {
            operator delete(v100);
          }
          unint64_t v19 = 0;
          *(void *)(a5 + 8) = 0;
        }
      }
LABEL_71:
      if ((v19 & (v19 - 1)) != 0)
      {
        if (v18 >= v19) {
          std::string::size_type v5 = v18 % v19;
        }
        else {
          std::string::size_type v5 = v18;
        }
      }
      else
      {
        std::string::size_type v5 = (v19 - 1) & v18;
      }
      goto LABEL_76;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(v23 + 8);
      if (v24 == v18) {
        break;
      }
      if (v21 > 1)
      {
        if (v24 >= v19) {
          v24 %= v19;
        }
      }
      else
      {
        v24 &= v19 - 1;
      }
      if (v24 != v5) {
        goto LABEL_26;
      }
LABEL_25:
      std::string::size_type v23 = *(void *)v23;
      if (!v23) {
        goto LABEL_26;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v23 + 16), (unsigned __int8 *)v16)) {
      goto LABEL_25;
    }
    uint64_t v14 = (std::__shared_weak_count *)v251;
    uint64_t v13 = v258;
    if (v251) {
      goto LABEL_86;
    }
LABEL_87:
    unint64_t v47 = *(std::__shared_weak_count **)(v23 + 48);
    *(void *)(v23 + 40) = v13;
    *(void *)(v23 + 48) = v14;
    if (v47) {
      nitro::nitro_function::nitro_function(v47);
    }
    v297.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v297);
LABEL_90:
    uint64_t v48 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v13 + 56))(v13);
    if (*(char *)(v48 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v296, *(const std::string::value_type **)v48, *(void *)(v48 + 8));
    }
    else
    {
      long long v49 = *(_OWORD *)v48;
      v296.__r_.__value_.__r.__words[2] = *(void *)(v48 + 16);
      *(_OWORD *)&v296.__r_.__value_.__l.__data_ = v49;
    }
    int64_t v50 = HIBYTE(v296.__r_.__value_.__r.__words[2]);
    int v51 = SHIBYTE(v296.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v296.__r_.__value_.__l.__size_;
    uint64_t v52 = (std::string *)v296.__r_.__value_.__r.__words[0];
    if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      std::string::size_type v5 = (std::string::size_type)&v296;
    }
    else
    {
      int64_t v50 = v296.__r_.__value_.__l.__size_;
      std::string::size_type v5 = v296.__r_.__value_.__r.__words[0];
    }
    if (v50 < 5) {
      goto LABEL_107;
    }
    unint64_t v54 = (char *)(v5 + v50);
    char v55 = (void *)v5;
    while (1)
    {
      uint8x8_t v56 = (char *)memchr(v55, 46, v50 - 4);
      if (!v56) {
        goto LABEL_107;
      }
      BOOL v57 = *(_DWORD *)v56 == 1935762222 && v56[4] == 116;
      if (v57) {
        break;
      }
      char v55 = v56 + 1;
      int64_t v50 = v54 - (unsigned char *)v55;
      if (v54 - (unsigned char *)v55 < 5) {
        goto LABEL_107;
      }
    }
    if (v56 == v54 || &v56[-v5] == (char *)-1)
    {
LABEL_107:
      if ((v51 & 0x80000000) == 0)
      {
        if (v51 == 4)
        {
          uint64_t v52 = &v296;
          goto LABEL_111;
        }
LABEL_112:
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v258 + 32))(&v260);
        goto LABEL_113;
      }
      if (size != 4) {
        goto LABEL_112;
      }
LABEL_111:
      if (LODWORD(v52->__r_.__value_.__l.__data_) != 1953718627) {
        goto LABEL_112;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v297, "x");
    unint64_t v84 = v258;
    (*(void (**)(std::string::value_type *__return_ptr))(*((void *)v258 + 8) + 56))(&v294.__r_.__value_.__s.__data_[16]);
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v297.__r_.__value_.__l.__data_);
    }
    if (v294.__r_.__value_.__r.__words[2])
    {
LABEL_159:
      uint64_t OutputType = MIL::IROperation::GetOutputType(v84);
      uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType);
      int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 88))(v86);
      if (v294.__r_.__value_.__r.__words[2])
      {
        uint64_t v88 = MIL::IRValue::AsTensor((MIL::IRValue *)v294.__r_.__value_.__r.__words[2]);
        Espresso::MILUtil::CastTensor(&v297, v256, v88, v87);
        std::string::size_type v5 = v297.__r_.__value_.__l.__size_;
        std::string::size_type v89 = v297.__r_.__value_.__r.__words[0];
        if (v297.__r_.__value_.__r.__words[0])
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v256 + 16))(v256, a3);
          std::string::basic_string[abi:ne180100]<0>(&v297, "const");
          MIL::IROpset::TryGetOperatorSharedPtr();
          MIL::Builder::OperationBuilder::Make();
          if (v270) {
            nitro::nitro_function::nitro_function(v270);
          }
          if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v297.__r_.__value_.__l.__data_);
          }
          (*(void (**)(char **__return_ptr, MIL::IROperation *))(*(void *)v84 + 200))(&v293, v84);
          if (v293[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)v293, *((void *)v293 + 1));
          }
          else
          {
            long long v90 = *(_OWORD *)v293;
            v297.__r_.__value_.__r.__words[2] = *((void *)v293 + 2);
            *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v90;
          }
          (*(void (**)(std::string::size_type))(*(void *)v89 + 32))(v89);
          MIL::Builder::OperationBuilder::AddOutput();
          if (v269) {
            nitro::nitro_function::nitro_function(v269);
          }
          if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v297.__r_.__value_.__l.__data_);
          }
          unint64_t v267 = &v293;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v267);
          std::string::basic_string[abi:ne180100]<0>(&v293, "val");
          std::string::size_type v265 = v89;
          uint64_t v266 = (std::__shared_weak_count *)v5;
          if (v5) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::SetAttribute();
          if (v268) {
            nitro::nitro_function::nitro_function(v268);
          }
          if (v266) {
            nitro::nitro_function::nitro_function(v266);
          }
          if (v294.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v293);
          }
          LocationPtr = (void *)MIL::IRObject::GetLocationPtr(v84);
          uint64_t v102 = (std::__shared_weak_count *)LocationPtr[1];
          v263[1] = *LocationPtr;
          uint64_t v264 = v102;
          if (v102) {
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::SetLocation();
          if (v264) {
            nitro::nitro_function::nitro_function(v264);
          }
          MIL::Builder::OperationBuilder::CreateOperation(&v260, v291);
          if (v292) {
            nitro::nitro_function::nitro_function(v292);
          }
          goto LABEL_217;
        }
      }
      else
      {
        std::string::size_type v5 = 0;
      }
      (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)v84 + 32))(&v260, v84);
LABEL_217:
      if (v5) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
      }
      goto LABEL_554;
    }
    std::string::basic_string[abi:ne180100]<0>(&v297, "x");
    Argumentuint64_t Name = (unsigned __int8 *)MIL::IROperation::GetArgumentName();
    unint64_t v92 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)ArgumentName);
    int8x8_t v93 = *(int8x8_t *)(a5 + 8);
    if (!*(void *)&v93)
    {
      uint64_t v97 = 0;
      goto LABEL_222;
    }
    std::string::size_type v5 = v92;
    uint64_t v252 = (MIL::IRObject *)v14;
    uint8x8_t v94 = (uint8x8_t)vcnt_s8(v93);
    v94.i16[0] = vaddlv_u8(v94);
    unint64_t v95 = v94.u32[0];
    if (v94.u32[0] > 1uLL)
    {
      unint64_t v96 = v92;
      if (v92 >= *(void *)&v93) {
        unint64_t v96 = v92 % *(void *)&v93;
      }
    }
    else
    {
      unint64_t v96 = (*(void *)&v93 - 1) & v92;
    }
    char v98 = *(unsigned __int8 ***)(*(void *)a5 + 8 * v96);
    if (!v98)
    {
      uint64_t v97 = 0;
      goto LABEL_221;
    }
    uint64_t v97 = *v98;
    if (!*v98) {
      goto LABEL_221;
    }
    while (2)
    {
      unint64_t v99 = *((void *)v97 + 1);
      if (v99 == v5)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v97 + 16, ArgumentName)) {
          goto LABEL_221;
        }
LABEL_187:
        uint64_t v97 = *(unsigned __int8 **)v97;
        if (!v97) {
          goto LABEL_221;
        }
        continue;
      }
      break;
    }
    if (v95 > 1)
    {
      if (v99 >= *(void *)&v93) {
        v99 %= *(void *)&v93;
      }
    }
    else
    {
      v99 &= *(void *)&v93 - 1;
    }
    if (v99 == v96) {
      goto LABEL_187;
    }
    uint64_t v97 = 0;
LABEL_221:
    uint64_t v14 = (std::__shared_weak_count *)v252;
    unint64_t v84 = v258;
LABEL_222:
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v297.__r_.__value_.__l.__data_);
      if (!v97) {
        goto LABEL_272;
      }
LABEL_224:
      unint64_t v103 = (MIL::IRObject *)*((void *)v97 + 5);
      std::string::size_type v5 = *((void *)v97 + 6);
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t Attributes = MIL::IRObject::GetAttributes(v103);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v297, Attributes);
      std::string::basic_string[abi:ne180100]<0>(&v293, "val");
      unint64_t v105 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v297, (uint64_t)&v293);
      if (v294.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v293);
      }
      if (v105)
      {
        uint64_t v107 = v105[5];
        uint64_t v106 = (std::__shared_weak_count *)v105[6];
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v108 = v295;
        v294.__r_.__value_.__r.__words[2] = v107;
        v295 = v106;
        if (v108) {
          nitro::nitro_function::nitro_function(v108);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v293, "source_val");
      uint64_t v109 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v297, (uint64_t)&v293);
      if (v294.__r_.__value_.__s.__data_[15] < 0) {
        operator delete(v293);
      }
      if (v109)
      {
        uint64_t v111 = v109[5];
        float v110 = (std::__shared_weak_count *)v109[6];
        if (v110) {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v112 = v295;
        v294.__r_.__value_.__r.__words[2] = v111;
        v295 = v110;
        if (v112) {
          nitro::nitro_function::nitro_function(v112);
        }
      }
      v253 = v103;
      uint64_t v113 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v103 + 56))(v103);
      long long v114 = (const std::string *)v113;
      char v115 = *(unsigned char *)(v113 + 23);
      if (v115 >= 0) {
        int64_t v116 = *(unsigned __int8 *)(v113 + 23);
      }
      else {
        int64_t v116 = *(void *)(v113 + 8);
      }
      if (v115 >= 0) {
        uint64_t v117 = v113;
      }
      else {
        uint64_t v117 = *(void *)v113;
      }
      uint64_t v118 = (unsigned char *)(v117 + v116);
      if (v116 >= 1)
      {
        uint64_t v119 = (void *)v117;
        do
        {
          uint64_t v120 = memchr(v119, 46, v116);
          if (!v120) {
            break;
          }
          if (*v120 == 46) {
            goto LABEL_252;
          }
          uint64_t v119 = v120 + 1;
          int64_t v116 = v118 - (unsigned char *)v119;
        }
        while (v118 - (unsigned char *)v119 > 0);
      }
      uint64_t v120 = v118;
LABEL_252:
      if (v120 == v118) {
        std::string::size_type v121 = 0;
      }
      else {
        std::string::size_type v121 = (std::string::size_type)&v120[-v117 + 1];
      }
      std::string::basic_string((std::string *)&v293, v114, v121, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v288);
      unint64_t v84 = v258;
      if (v294.__r_.__value_.__s.__data_[15] < 0)
      {
        switch(v294.__r_.__value_.__r.__words[0])
        {
          case 0x16uLL:
            uint64_t v125 = *(void *)(v293 + 14);
            BOOL v127 = *(void *)v293 == 0x70786574736E6F63 && *((void *)v293 + 1) == 0x6F745F74756C5F72;
            uint64_t v128 = 0x65736E65645F6F74;
            break;
          case 0x19uLL:
            char v129 = (char **)v293;
            goto LABEL_295;
          case 0x1BuLL:
            uint64_t v125 = *(void *)(v293 + 19);
            BOOL v127 = *(void *)v293 == 0x70786574736E6F63
                && *((void *)v293 + 1) == 0x656E696666615F72
                && *((void *)v293 + 2) == 0x746E61757165645FLL;
            uint64_t v128 = 0x657A69746E617571;
            break;
          default:
            char v132 = 1;
            goto LABEL_548;
        }
        if (v127 && v125 == v128) {
          goto LABEL_315;
        }
      }
      else if (v294.__r_.__value_.__s.__data_[15] == 22)
      {
        if (v293 == (char *)0x70786574736E6F63
          && v294.__r_.__value_.__r.__words[0] == 0x6F745F74756C5F72
          && *(std::string::size_type *)((char *)v294.__r_.__value_.__r.__words + 6) == 0x65736E65645F6F74)
        {
          goto LABEL_315;
        }
      }
      else
      {
        if (v294.__r_.__value_.__s.__data_[15] != 25)
        {
          if (v294.__r_.__value_.__s.__data_[15] == 27)
          {
            if (v293 != (char *)0x70786574736E6F63
              || v294.__r_.__value_.__r.__words[0] != 0x656E696666615F72
              || v294.__r_.__value_.__l.__size_ != 0x746E61757165645FLL
              || *(std::string::size_type *)((char *)&v294.__r_.__value_.__r.__words[1] + 3) != 0x657A69746E617571)
            {
              goto LABEL_305;
            }
LABEL_315:
            uint64_t v141 = (MIL::IRValueType *)MIL::IROperation::GetOutputType(v258);
            uint64_t v142 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v253 + 64))(v253);
            uint64_t v143 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v142 + 80))(v142);
            if ((*(uint64_t (**)(void, MIL::IRValueType *))(*(void *)**v143 + 72))(**v143, v141))
            {
              std::string::size_type v248 = v5;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v256 + 16))(v256, a3);
              MIL::IROpset::TryGetOperatorSharedPtr();
              MIL::Builder::OperationBuilder::Make();
              if (v290) {
                nitro::nitro_function::nitro_function(v290);
              }
              (*(void (**)(std::string *__return_ptr, MIL::IROperation *))(*(void *)v258 + 200))(&v287, v258);
              if (*(char *)(v287.__r_.__value_.__r.__words[0] + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v288, *(const std::string::value_type **)v287.__r_.__value_.__l.__data_, *(void *)(v287.__r_.__value_.__r.__words[0] + 8));
              }
              else
              {
                long long v144 = *(_OWORD *)v287.__r_.__value_.__l.__data_;
                v288.__r_.__value_.__r.__words[2] = *(void *)(v287.__r_.__value_.__r.__words[0] + 16);
                *(_OWORD *)&v288.__r_.__value_.__l.__data_ = v144;
              }
              MIL::Builder::OperationBuilder::AddOutput();
              if (v289) {
                nitro::nitro_function::nitro_function(v289);
              }
              if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v288.__r_.__value_.__l.__data_);
              }
              v283.__r_.__value_.__r.__words[0] = (std::string::size_type)&v287;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v283);
              long long v145 = *(uint64_t **)(MIL::IRObject::GetAttributes(v253) + 16);
              if (v145)
              {
                while (1)
                {
                  uint64_t v146 = (unsigned __int16 **)(v145 + 2);
                  if (v294.__r_.__value_.__s.__data_[15] < 0) {
                    break;
                  }
                  uint64_t v147 = &v293;
                  if (v294.__r_.__value_.__s.__data_[15] != 22)
                  {
                    if (v294.__r_.__value_.__s.__data_[15] == 25) {
                      goto LABEL_366;
                    }
                    if (v294.__r_.__value_.__s.__data_[15] != 27) {
                      goto LABEL_376;
                    }
LABEL_335:
                    uint64_t v149 = (uint64_t)*v147;
                    std::string v150 = v147[1];
                    uint64_t v151 = v147[2];
                    uint64_t v152 = *(uint64_t *)((char *)v147 + 19);
                    if (v149 == 0x70786574736E6F63
                      && v150 == (char *)0x656E696666615F72
                      && v151 == (char *)0x746E61757165645FLL
                      && v152 == 0x657A69746E617571)
                    {
                      int v156 = *((char *)v145 + 39);
                      if (v156 < 0)
                      {
                        if (v145[3] != 5) {
                          goto LABEL_345;
                        }
                        std::string v157 = *v146;
                      }
                      else
                      {
                        std::string v157 = (unsigned __int16 *)(v145 + 2);
                        if (v156 != 5) {
                          goto LABEL_345;
                        }
                      }
                      int v181 = *(_DWORD *)v157;
                      int v182 = *((unsigned __int8 *)v157 + 4);
                      if (v181 == 1818321779 && v182 == 101) {
                        goto LABEL_418;
                      }
                    }
LABEL_345:
                    if ((v294.__r_.__value_.__s.__data_[15] & 0x80) == 0)
                    {
                      uint64_t v147 = &v293;
                      if (v294.__r_.__value_.__s.__data_[15] != 22)
                      {
                        if (v294.__r_.__value_.__s.__data_[15] != 25) {
                          goto LABEL_376;
                        }
                        goto LABEL_366;
                      }
                      goto LABEL_355;
                    }
                    std::string::size_type v148 = v294.__r_.__value_.__r.__words[0];
LABEL_353:
                    if (v148 != 22) {
                      goto LABEL_364;
                    }
                    uint64_t v147 = (char **)v293;
                  }
LABEL_355:
                  uint64_t v158 = (uint64_t)*v147;
                  std::string v159 = v147[1];
                  uint64_t v160 = *(uint64_t *)((char *)v147 + 14);
                  if (v158 != 0x70786574736E6F63
                    || v159 != (char *)0x6F745F74756C5F72
                    || v160 != 0x65736E65645F6F74)
                  {
                    goto LABEL_362;
                  }
                  int v171 = *((char *)v145 + 39);
                  if (v171 < 0)
                  {
                    if (v145[3] != 3) {
                      goto LABEL_362;
                    }
                    std::string::size_type v172 = *v146;
                  }
                  else
                  {
                    std::string::size_type v172 = (unsigned __int16 *)(v145 + 2);
                    if (v171 != 3) {
                      goto LABEL_362;
                    }
                  }
                  int v175 = *v172;
                  int v176 = *((unsigned __int8 *)v172 + 2);
                  if (v175 != 30060 || v176 != 116)
                  {
LABEL_362:
                    if ((v294.__r_.__value_.__s.__data_[15] & 0x80) == 0) {
                      goto LABEL_376;
                    }
                    std::string::size_type v148 = v294.__r_.__value_.__r.__words[0];
LABEL_364:
                    if (v148 != 25) {
                      goto LABEL_376;
                    }
                    uint64_t v147 = (char **)v293;
LABEL_366:
                    uint64_t v163 = (uint64_t)*v147;
                    long long v164 = v147[1];
                    uint64_t v165 = v147[2];
                    int v166 = *((unsigned __int8 *)v147 + 24);
                    if (v163 != 0x70786574736E6F63
                      || v164 != (char *)0x6573726170735F72
                      || v165 != (char *)0x736E65645F6F745FLL
                      || v166 != 101)
                    {
                      goto LABEL_376;
                    }
                    int v173 = *((char *)v145 + 39);
                    if (v173 < 0)
                    {
                      if (v145[3] != 12) {
                        goto LABEL_376;
                      }
                      long long v174 = *v146;
                    }
                    else
                    {
                      long long v174 = (unsigned __int16 *)(v145 + 2);
                      if (v173 != 12) {
                        goto LABEL_376;
                      }
                    }
                    uint64_t v178 = *(void *)v174;
                    uint64_t v179 = *((unsigned int *)v174 + 2);
                    if (v178 != 0x5F6F72657A6E6F6ELL || v179 != 1635017060) {
                      goto LABEL_376;
                    }
                  }
LABEL_418:
                  uint64_t v184 = MIL::IRValue::AsTensor((MIL::IRValue *)v145[5]);
                  uint64_t v185 = (*(uint64_t (**)(uint64_t))(*(void *)v184 + 32))(v184);
                  int v186 = (*(uint64_t (**)(uint64_t))(*(void *)v185 + 88))(v185);
                  uint64_t v187 = MIL::IRValueType::AsTensorType(v141);
                  if (v186 != (*(unsigned int (**)(uint64_t))(*(void *)v187 + 88))(v187))
                  {
                    uint64_t v188 = MIL::IRValueType::AsTensorType(v141);
                    int v189 = (*(uint64_t (**)(uint64_t))(*(void *)v188 + 88))(v188);
                    uint64_t v190 = MIL::IRValue::AsTensor((MIL::IRValue *)v145[5]);
                    Espresso::MILUtil::CastTensor(&v277, v256, v190, v189);
                    long long v191 = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
                    if (*((char *)v145 + 39) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v287, (const std::string::value_type *)v145[2], v145[3]);
                    }
                    else
                    {
                      *(_OWORD *)&v287.__r_.__value_.__l.__data_ = *(_OWORD *)v146;
                      v287.__r_.__value_.__r.__words[2] = v145[4];
                    }
                    long long v285 = v191;
                    if (*((void *)&v191 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v191 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    MIL::Builder::OperationBuilder::SetAttribute();
                    if (v286) {
                      nitro::nitro_function::nitro_function(v286);
                    }
                    if (*((void *)&v285 + 1)) {
                      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v285 + 1));
                    }
                    if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v287.__r_.__value_.__l.__data_);
                    }
                    if (*((void *)&v191 + 1)) {
                      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v191 + 1));
                    }
                    goto LABEL_387;
                  }
LABEL_376:
                  if (*((char *)v145 + 39) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v283, (const std::string::value_type *)v145[2], v145[3]);
                  }
                  else
                  {
                    *(_OWORD *)&v283.__r_.__value_.__l.__data_ = *(_OWORD *)v146;
                    v283.__r_.__value_.__r.__words[2] = v145[4];
                  }
                  uint64_t v170 = (std::__shared_weak_count *)v145[6];
                  uint64_t v281 = v145[5];
                  uint64_t v282 = v170;
                  if (v170) {
                    atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  MIL::Builder::OperationBuilder::SetAttribute();
                  if (v284) {
                    nitro::nitro_function::nitro_function(v284);
                  }
                  if (v282) {
                    nitro::nitro_function::nitro_function(v282);
                  }
                  if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v283.__r_.__value_.__l.__data_);
                  }
LABEL_387:
                  long long v145 = (uint64_t *)*v145;
                  if (!v145) {
                    goto LABEL_432;
                  }
                }
                std::string::size_type v148 = v294.__r_.__value_.__r.__words[0];
                if (v294.__r_.__value_.__r.__words[0] == 27)
                {
                  uint64_t v147 = (char **)v293;
                  goto LABEL_335;
                }
                goto LABEL_353;
              }
LABEL_432:
              uint64_t v250 = v141;
              __int16 v192 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v253 + 160))(v253);
              __int16 v193 = v192 + 1;
              uint64_t v194 = (void *)*v192;
              if ((void *)*v192 != v192 + 1)
              {
                while (2)
                {
                  uint64_t v195 = (unsigned __int16 **)(v194 + 4);
                  if (v294.__r_.__value_.__s.__data_[15] < 0)
                  {
                    std::string::size_type v197 = v294.__r_.__value_.__r.__words[0];
                    if (v294.__r_.__value_.__r.__words[0] == 31)
                    {
                      int v196 = (char **)v293;
                      goto LABEL_440;
                    }
                  }
                  else
                  {
                    int v196 = &v293;
                    if (v294.__r_.__value_.__s.__data_[15] == 22) {
                      goto LABEL_460;
                    }
                    if (v294.__r_.__value_.__s.__data_[15] == 25) {
                      goto LABEL_471;
                    }
                    if (v294.__r_.__value_.__s.__data_[15] != 31) {
                      goto LABEL_481;
                    }
LABEL_440:
                    uint64_t v198 = (uint64_t)*v196;
                    char v199 = v196[1];
                    uint64_t v200 = v196[2];
                    uint64_t v201 = *(uint64_t *)((char *)v196 + 23);
                    if (v198 == 0x70786574736E6F63
                      && v199 == (char *)0x776B636F6C625F72
                      && v200 == (char *)0x666968735F657369
                      && v201 == 0x656C6163735F7466)
                    {
                      int v205 = *((char *)v194 + 55);
                      if (v205 < 0)
                      {
                        if (v194[5] != 5) {
                          goto LABEL_450;
                        }
                        int v206 = *v195;
                      }
                      else
                      {
                        int v206 = (unsigned __int16 *)(v194 + 4);
                        if (v205 != 5) {
                          goto LABEL_450;
                        }
                      }
                      int v231 = *(_DWORD *)v206;
                      int v232 = *((unsigned __int8 *)v206 + 4);
                      if (v231 == 1818321779 && v232 == 101) {
                        goto LABEL_526;
                      }
                    }
LABEL_450:
                    if ((v294.__r_.__value_.__s.__data_[15] & 0x80) == 0)
                    {
                      int v196 = &v293;
                      if (v294.__r_.__value_.__s.__data_[15] != 22)
                      {
                        if (v294.__r_.__value_.__s.__data_[15] != 25) {
                          goto LABEL_481;
                        }
LABEL_471:
                        uint64_t v212 = (uint64_t)*v196;
                        uint64_t v213 = v196[1];
                        unsigned int v214 = v196[2];
                        int v215 = *((unsigned __int8 *)v196 + 24);
                        if (v212 != 0x70786574736E6F63
                          || v213 != (char *)0x6573726170735F72
                          || v214 != (char *)0x736E65645F6F745FLL
                          || v215 != 101)
                        {
                          goto LABEL_481;
                        }
                        int v223 = *((char *)v194 + 55);
                        if (v223 < 0)
                        {
                          if (v194[5] != 12) {
                            goto LABEL_481;
                          }
                          uint64_t v224 = *v195;
                        }
                        else
                        {
                          uint64_t v224 = (unsigned __int16 *)(v194 + 4);
                          if (v223 != 12) {
                            goto LABEL_481;
                          }
                        }
                        uint64_t v228 = *(void *)v224;
                        uint64_t v229 = *((unsigned int *)v224 + 2);
                        if (v228 != 0x5F6F72657A6E6F6ELL || v229 != 1635017060)
                        {
LABEL_481:
                          if (*((char *)v194 + 55) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v273, (const std::string::value_type *)v194[4], v194[5]);
                          }
                          else
                          {
                            *(_OWORD *)&v273.__r_.__value_.__l.__data_ = *(_OWORD *)v195;
                            v273.__r_.__value_.__r.__words[2] = v194[6];
                          }
                          (*(void (**)(uint64_t *__return_ptr))(**(void **)v194[7] + 48))(&v271);
                          MIL::Builder::OperationBuilder::AddInput();
                          if (v274) {
                            nitro::nitro_function::nitro_function(v274);
                          }
                          if (v272) {
                            nitro::nitro_function::nitro_function(v272);
                          }
                          if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v273.__r_.__value_.__l.__data_);
                          }
                          goto LABEL_490;
                        }
LABEL_526:
                        v234 = (MIL::IRValue *)(*(uint64_t (**)(void))(**(void **)v194[7] + 40))(*(void *)v194[7]);
                        uint64_t v235 = MIL::IRValue::AsTensor(v234);
                        uint64_t v236 = (*(uint64_t (**)(uint64_t))(*(void *)v235 + 32))(v235);
                        int v237 = (*(uint64_t (**)(uint64_t))(*(void *)v236 + 88))(v236);
                        uint64_t v238 = MIL::IRValueType::AsTensorType(v250);
                        if (v237 == (*(unsigned int (**)(uint64_t))(*(void *)v238 + 88))(v238)) {
                          goto LABEL_481;
                        }
                        uint64_t v239 = MIL::IRValueType::AsTensorType(v250);
                        int v240 = (*(uint64_t (**)(uint64_t))(*(void *)v239 + 88))(v239);
                        int v241 = (MIL::IRValue *)(*(uint64_t (**)(void))(**(void **)v194[7] + 40))(*(void *)v194[7]);
                        uint64_t v242 = MIL::IRValue::AsTensor(v241);
                        Espresso::MILUtil::CastTensor(&v279, v256, v242, v240);
                        uint64_t v243 = v279;
                        float v247 = v280;
                        if (*((char *)v194 + 55) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v277, (const std::string::value_type *)v194[4], v194[5]);
                        }
                        else
                        {
                          *(_OWORD *)&v277.__r_.__value_.__l.__data_ = *(_OWORD *)v195;
                          v277.__r_.__value_.__r.__words[2] = v194[6];
                        }
                        uint64_t v275 = v243;
                        v276 = v247;
                        if (v247) {
                          atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        MIL::Builder::OperationBuilder::AddInput();
                        if (v278) {
                          nitro::nitro_function::nitro_function(v278);
                        }
                        if (v276) {
                          nitro::nitro_function::nitro_function(v276);
                        }
                        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v277.__r_.__value_.__l.__data_);
                        }
                        if (v247) {
                          nitro::nitro_function::nitro_function(v247);
                        }
LABEL_490:
                        uint64_t v219 = (void *)v194[1];
                        if (v219)
                        {
                          do
                          {
                            v220 = v219;
                            uint64_t v219 = (void *)*v219;
                          }
                          while (v219);
                        }
                        else
                        {
                          do
                          {
                            v220 = (void *)v194[2];
                            BOOL v57 = *v220 == (void)v194;
                            uint64_t v194 = v220;
                          }
                          while (!v57);
                        }
                        uint64_t v194 = v220;
                        if (v220 == v193) {
                          goto LABEL_540;
                        }
                        continue;
                      }
LABEL_460:
                      uint64_t v207 = (uint64_t)*v196;
                      v208 = v196[1];
                      uint64_t v209 = *(uint64_t *)((char *)v196 + 14);
                      if (v207 == 0x70786574736E6F63
                        && v208 == (char *)0x6F745F74756C5F72
                        && v209 == 0x65736E65645F6F74)
                      {
                        int v221 = *((char *)v194 + 55);
                        if (v221 < 0)
                        {
                          if (v194[5] != 3) {
                            goto LABEL_467;
                          }
                          uint64_t v222 = *v195;
                        }
                        else
                        {
                          uint64_t v222 = (unsigned __int16 *)(v194 + 4);
                          if (v221 != 3) {
                            goto LABEL_467;
                          }
                        }
                        int v225 = *v222;
                        int v226 = *((unsigned __int8 *)v222 + 2);
                        if (v225 == 30060 && v226 == 116) {
                          goto LABEL_526;
                        }
                      }
LABEL_467:
                      if ((v294.__r_.__value_.__s.__data_[15] & 0x80) == 0) {
                        goto LABEL_481;
                      }
                      std::string::size_type v197 = v294.__r_.__value_.__r.__words[0];
LABEL_469:
                      if (v197 != 25) {
                        goto LABEL_481;
                      }
                      int v196 = (char **)v293;
                      goto LABEL_471;
                    }
                    std::string::size_type v197 = v294.__r_.__value_.__r.__words[0];
                  }
                  break;
                }
                if (v197 == 22)
                {
                  int v196 = (char **)v293;
                  goto LABEL_460;
                }
                goto LABEL_469;
              }
LABEL_540:
              std::string::size_type v5 = v248;
              float v244 = (uint64_t *)MIL::IRObject::GetLocationPtr(v253);
              float v245 = (std::__shared_weak_count *)v244[1];
              uint64_t v279 = *v244;
              unint64_t v280 = v245;
              if (v245) {
                atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MIL::Builder::OperationBuilder::SetLocation();
              if (v280) {
                nitro::nitro_function::nitro_function(v280);
              }
              MIL::Builder::OperationBuilder::CreateOperation(&v260, v291);
              if (v292) {
                nitro::nitro_function::nitro_function(v292);
              }
            }
            else
            {
              (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)v258 + 32))(&v260, v258);
            }
            char v132 = 0;
LABEL_547:
            if (v294.__r_.__value_.__s.__data_[15] < 0) {
LABEL_548:
            }
              operator delete(v293);
          }
          else
          {
            char v132 = 1;
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((void *)v297.__r_.__value_.__r.__words[2]);
          float v246 = (void *)v297.__r_.__value_.__r.__words[0];
          v297.__r_.__value_.__r.__words[0] = 0;
          if (v246) {
            operator delete(v246);
          }
          if (v5) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v5);
          }
          if ((v132 & 1) == 0) {
            goto LABEL_554;
          }
          goto LABEL_159;
        }
        char v129 = &v293;
LABEL_295:
        uint64_t v133 = (uint64_t)*v129;
        long long v134 = v129[1];
        long long v135 = v129[2];
        int v136 = *((unsigned __int8 *)v129 + 24);
        if (v133 == 0x70786574736E6F63
          && v134 == (char *)0x6573726170735F72
          && v135 == (char *)0x736E65645F6F745FLL
          && v136 == 101)
        {
          goto LABEL_315;
        }
      }
LABEL_305:
      char v132 = 1;
      goto LABEL_547;
    }
    if (v97) {
      goto LABEL_224;
    }
LABEL_272:
    (*(void (**)(uint64_t *__return_ptr, MIL::IROperation *))(*(void *)v84 + 32))(&v260, v84);
LABEL_554:
    if (v295) {
      nitro::nitro_function::nitro_function(v295);
    }
LABEL_113:
    if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v296.__r_.__value_.__l.__data_);
      if (v14) {
LABEL_115:
      }
        nitro::nitro_function::nitro_function(v14);
    }
    else if (v14)
    {
      goto LABEL_115;
    }
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    memset(&v296, 0, sizeof(v296));
    char v58 = (uint64_t ***)(*(uint64_t (**)(void))(*(void *)*v257 + 208))();
    char v59 = **v58;
    for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = (*v58)[1]; v59 != i; v59 += 2)
    {
      uint64_t v61 = *v59;
      unsigned int v62 = (std::__shared_weak_count *)a2[1];
      v259[0] = *a2;
      v259[1] = v62;
      if (v62) {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v62) {
        nitro::nitro_function::nitro_function(v62);
      }
      std::string::size_type v5 = (std::string::size_type)v293;
      if (v293) {
        operator new();
      }
      v293 = 0;
      std::string::size_type v63 = v296.__r_.__value_.__l.__size_;
      if (v296.__r_.__value_.__l.__size_ >= v296.__r_.__value_.__r.__words[2])
      {
        uint64_t v65 = (uint64_t)(v296.__r_.__value_.__l.__size_ - v296.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        int64_t v67 = v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v296.__r_.__value_.__r.__words[2] - v296.__r_.__value_.__r.__words[0]) >> 3 > v66) {
          unint64_t v66 = v67 >> 3;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        v299 = &v296.__r_.__value_.__s.__data_[16];
        long long v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v68);
        uint64_t v70 = &v69[16 * v65];
        v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
        v297.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
        v298 = &v69[16 * v71];
        *(void *)uint64_t v70 = 0;
        *((void *)v70 + 1) = 0;
        v297.__r_.__value_.__r.__words[2] = (std::string::size_type)(v70 + 16);
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v296, &v297);
        std::string::size_type v64 = v296.__r_.__value_.__l.__size_;
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v297);
      }
      else
      {
        *(void *)v296.__r_.__value_.__l.__size_ = 0;
        *(void *)(v63 + 8) = 0;
        std::string::size_type v64 = v63 + 16;
      }
      v296.__r_.__value_.__l.__size_ = v64;
      long long v72 = v293;
      v293 = 0;
      if (v72) {
        (*(void (**)(char *))(*(void *)v72 + 8))(v72);
      }
    }
    (*(void (**)(char **__return_ptr))(*(void *)v260 + 40))(&v293);
    if (v293) {
      operator new();
    }
    v293 = 0;
    std::string::size_type v73 = v262;
    if ((unint64_t)v262 >= v263[0])
    {
      uint64_t v75 = ((uint64_t)v262 - v261) >> 4;
      unint64_t v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 60) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v77 = v263[0] - v261;
      if ((v263[0] - v261) >> 3 > v76) {
        unint64_t v76 = v77 >> 3;
      }
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v76;
      }
      v299 = (std::string::value_type *)v263;
      long long v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v78);
      int v80 = &v79[16 * v75];
      v297.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
      v297.__r_.__value_.__l.__size_ = (std::string::size_type)v80;
      v298 = &v79[16 * v81];
      *(void *)int v80 = 0;
      *((void *)v80 + 1) = 0;
      v297.__r_.__value_.__r.__words[2] = (std::string::size_type)(v80 + 16);
      std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(&v261, &v297);
      unint64_t v74 = v262;
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v297);
    }
    else
    {
      void *v262 = 0;
      v73[1] = 0;
      unint64_t v74 = v73 + 2;
    }
    v262 = v74;
    uint64_t v82 = v293;
    v293 = 0;
    if (v82) {
      (*(void (**)(char *))(*(void *)v82 + 8))(v82);
    }
    v297.__r_.__value_.__r.__words[0] = (std::string::size_type)&v296;
    std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v297);
    uint64_t v83 = v260;
    uint64_t v260 = 0;
    if (v83) {
      (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
    }
    uint64_t v11 = v257 + 2;
  }
  while (v257 + 2 != v255);
LABEL_556:
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a4 + 112))(a4, &v261);
  v297.__r_.__value_.__r.__words[0] = (std::string::size_type)&v261;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v297);
}

void sub_19224FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  BOOL v30 = *(std::__shared_weak_count **)(v28 - 224);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (*(char *)(v28 - 193) < 0) {
    operator delete(*(void **)(v28 - 216));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v28 - 144);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  unint64_t v31 = *(std::__shared_weak_count **)(v28 - 184);
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (*(char *)(v28 - 153) < 0) {
    operator delete(*(void **)(v28 - 176));
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  *(void *)(v28 - 192) = &a26;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 192));
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    std::string::size_type v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          nitro::nitro_function::nitro_function(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      std::string::size_type v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void E5Common::AutoMmapPtr::~AutoMmapPtr(E5Common::AutoMmapPtr *this)
{
  E5Common::AutoMmapPtr::~AutoMmapPtr(this);

  JUMPOUT(0x192FF16B0);
}

{
  uint64_t v2;
  uint64_t v3;
  E5Common::AutoMmapPtr *v4;
  uint64_t v5;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE3278A0;
  *((void *)this + 1) = 0;
  if (v2)
  {
    std::string::size_type v5 = v2;
    unint64_t v3 = *((void *)this + 5);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
  }
  uint64_t v4 = (E5Common::AutoMmapPtr *)*((void *)this + 5);
  if (v4 == (E5Common::AutoMmapPtr *)((char *)this + 16))
  {
    (*(void (**)(char *))(*((void *)this + 2) + 32))((char *)this + 16);
    E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  }
  else
  {
    if (v4) {
      (*(void (**)(E5Common::AutoMmapPtr *))(*(void *)v4 + 40))(v4);
    }
    E5RT::AsyncEventImpl::~AsyncEventImpl(this);
  }
}

void ___Z21GetPlatformHeuristicsRKNSt3__110shared_ptrIN8Espresso3netEEE_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  if (GetChipID(void)::onceToken != -1) {
    dispatch_once(&GetChipID(void)::onceToken, &__block_literal_global_25_20399);
  }
  GetPlatformHeuristics(std::shared_ptr<Espresso::net> const&)::chip_id = GetChipID(void)::chipID;
  operator new();
}

void sub_1922510E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v28);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v27);
  newpANEHeuristics::~newpANEHeuristics(v26);
  newpACCPHeuristics::~newpACCPHeuristics(v25);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v24);
  *std::string::size_type v23 = &unk_1EE3216A0;
  std::mutex::~mutex(a23);
  MEMORY[0x192FF16B0](v23, 0x10A1C401B1DED7CLL);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<SOC_PState,float>::unordered_map(uint64_t *a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    std::string::size_type v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 2;
    uint64_t v9 = &a2[2 * a3];
    while (1)
    {
      unint64_t v10 = *v5;
      if (v6)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v6 <= v10) {
            unint64_t v3 = v10 % v6;
          }
        }
        else
        {
          unint64_t v3 = (v6 - 1) & v10;
        }
        long long v12 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v12)
        {
          for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v12; i; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = (uint64_t *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == v10) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v6) {
                  v14 %= v6;
                }
              }
              else
              {
                v14 &= v6 - 1;
              }
              if (v14 != v3) {
                break;
              }
            }
          }
        }
      }
      int v15 = operator new(0x18uLL);
      *int v15 = 0;
      v15[1] = v10;
      _OWORD v15[2] = *(void *)v5;
      float v16 = (float)(unint64_t)(v7 + 1);
      float v17 = *((float *)a1 + 8);
      if (!v6 || (float)(v17 * (float)v6) < v16) {
        break;
      }
LABEL_65:
      uint64_t v33 = *a1;
      uint64_t v34 = *(void **)(*a1 + 8 * v3);
      if (v34)
      {
        *int v15 = *v34;
      }
      else
      {
        *int v15 = *v8;
        *uint64_t v8 = v15;
        *(void *)(v33 + 8 * v3) = v8;
        if (!*v15) {
          goto LABEL_74;
        }
        unint64_t v35 = *(void *)(*v15 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v35 >= v6) {
            v35 %= v6;
          }
        }
        else
        {
          v35 &= v6 - 1;
        }
        uint64_t v34 = (void *)(*a1 + 8 * v35);
      }
      void *v34 = v15;
LABEL_74:
      uint64_t v7 = a1[3] + 1;
      a1[3] = v7;
LABEL_75:
      v5 += 2;
      if (v5 == v9) {
        return a1;
      }
    }
    BOOL v18 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v18 = 1;
    }
    unint64_t v19 = v18 | (2 * v6);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = a1[1];
    }
    if (*(void *)&prime > v6) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v6 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          std::string::size_type v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int64_t v25 = (void *)*v8;
          if (*v8)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v8;
            unint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  unint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                int64_t v25 = v31;
                unint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = (void *)*a1;
        *a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v6 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v10) {
        unint64_t v3 = v10 % v6;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v10;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_192251678(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unordered_map<Device_PState,float>::unordered_map(uint64_t *a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    std::string::size_type v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 2;
    uint64_t v9 = &a2[2 * a3];
    while (1)
    {
      unint64_t v10 = *v5;
      if (v6)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v6 <= v10) {
            unint64_t v3 = v10 % v6;
          }
        }
        else
        {
          unint64_t v3 = (v6 - 1) & v10;
        }
        long long v12 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v12)
        {
          for (std::__split_buffer<std::pair<std::string, std::string>>::pointer i = *v12; i; std::__split_buffer<std::pair<std::string, std::string>>::pointer i = (uint64_t *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v10)
            {
              if (*((_DWORD *)i + 4) == v10) {
                goto LABEL_75;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v6) {
                  v14 %= v6;
                }
              }
              else
              {
                v14 &= v6 - 1;
              }
              if (v14 != v3) {
                break;
              }
            }
          }
        }
      }
      int v15 = operator new(0x18uLL);
      *int v15 = 0;
      v15[1] = v10;
      _OWORD v15[2] = *(void *)v5;
      float v16 = (float)(unint64_t)(v7 + 1);
      float v17 = *((float *)a1 + 8);
      if (!v6 || (float)(v17 * (float)v6) < v16) {
        break;
      }
LABEL_65:
      uint64_t v33 = *a1;
      uint64_t v34 = *(void **)(*a1 + 8 * v3);
      if (v34)
      {
        *int v15 = *v34;
      }
      else
      {
        *int v15 = *v8;
        *uint64_t v8 = v15;
        *(void *)(v33 + 8 * v3) = v8;
        if (!*v15) {
          goto LABEL_74;
        }
        unint64_t v35 = *(void *)(*v15 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v35 >= v6) {
            v35 %= v6;
          }
        }
        else
        {
          v35 &= v6 - 1;
        }
        uint64_t v34 = (void *)(*a1 + 8 * v35);
      }
      void *v34 = v15;
LABEL_74:
      uint64_t v7 = a1[3] + 1;
      a1[3] = v7;
LABEL_75:
      v5 += 2;
      if (v5 == v9) {
        return a1;
      }
    }
    BOOL v18 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v18 = 1;
    }
    unint64_t v19 = v18 | (2 * v6);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = a1[1];
    }
    if (*(void *)&prime > v6) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v6 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          std::string::size_type v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int64_t v25 = (void *)*v8;
          if (*v8)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v26) = v8;
            unint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }
                else
                {
                  v32 &= *(void *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * v32) = v25;
                    goto LABEL_56;
                  }
                  void *v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * v32) = v31;
                  unint64_t v31 = v25;
                }
                unint64_t v32 = v26;
LABEL_56:
                int64_t v25 = v31;
                unint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }
              while (v31);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        uint64_t v36 = (void *)*a1;
        *a1 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v6 = 0;
        a1[1] = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v10) {
        unint64_t v3 = v10 % v6;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v10;
    }
    goto LABEL_65;
  }
  return a1;
}

void sub_192251AA4(_Unwind_Exception *a1)
{
  operator delete(v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void newpANEHeuristics::newpANEHeuristics(newpANEHeuristics *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE321058;
  long long v2 = xmmword_192DF5EA8;
  uint64_t v3 = 0x4266666600000002;
  std::unordered_map<SOC_PState,float>::unordered_map((uint64_t *)this + 1, (int *)&v2, 3);
  long long v2 = xmmword_192DF5EC0;
  uint64_t v3 = 0x50FE109700000002;
  std::unordered_map<SOC_PState,float>::unordered_map((uint64_t *)this + 6, (int *)&v2, 3);
  long long v2 = xmmword_192DF5E90;
  uint64_t v3 = 0x4EAA3B1A00000002;
  std::unordered_map<Device_PState,float>::unordered_map((uint64_t *)this + 11, (int *)&v2, 3);
  long long v2 = xmmword_192DF5E90;
  uint64_t v3 = 0x4EAA3B1A00000002;
  std::unordered_map<Device_PState,float>::unordered_map((uint64_t *)this + 16, (int *)&v2, 3);
}

void sub_192251BF0(_Unwind_Exception *a1)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v2);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void **Espresso::AOT::SegmentsLowerer::GenerateEntryPointFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  Espresso::AOT::SegmentsLowerer::GenerateEntryPointFuncMeta(a1, a2, a3, (uint64_t)&v80);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v77 = *(void *)(a1 + 24);
  unint64_t v78 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::FunctionBuilder::Make();
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  uint64_t v8 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v4);
  uint64_t v9 = (void *)((char *)v8 + 8);
  unint64_t v10 = *(void **)v8;
  if (*(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset **)v8 != (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)((char *)v8 + 8))
  {
    do
    {
      if (*((char *)v10 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v76, (const std::string::value_type *)v10[4], v10[5]);
      }
      else {
        std::string v76 = *(std::string *)(v10 + 4);
      }
      uint64_t v8 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::FunctionBuilder::AddInput();
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v76.__r_.__value_.__l.__data_);
        float v16 = (void *)v10[1];
        if (v16)
        {
          do
          {
LABEL_20:
            float v17 = v16;
            float v16 = (void *)*v16;
          }
          while (v16);
          goto LABEL_12;
        }
      }
      else
      {
        float v16 = (void *)v10[1];
        if (v16) {
          goto LABEL_20;
        }
      }
      do
      {
        float v17 = (void *)v10[2];
        BOOL v18 = *v17 == (void)v10;
        unint64_t v10 = v17;
      }
      while (!v18);
LABEL_12:
      unint64_t v10 = v17;
    }
    while (v17 != v9);
  }
  Opsetuint64_t Name = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v8);
  std::string::size_type v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = OpsetName;
  if (v12 >= 0x17)
  {
    uint64_t v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v19 = v12 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_28:
    memmove(p_dst, v14, v13);
    p_dst->__r_.__value_.__s.__data_[v13] = 0;
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
  p_dst = &__dst;
  if (v12) {
    goto LABEL_28;
  }
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    std::string v72 = __dst;
    goto LABEL_30;
  }
LABEL_29:
  std::string::__init_copy_ctor_external(&v72, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_30:
  MIL::Builder::FunctionBuilder::AddBlock();
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  unint64_t v21 = 0x4EC4EC4EC4EC4EC5 * ((v81 - v80) >> 3);
  uint64_t v22 = v83;
  if (0xAAAAAAAAAAAAAAABLL * ((v83 - v82) >> 3) != v21 + 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected number of groups of TransferDefs.");
  }
  if (v81 != v80)
  {
    *(void *)&v51[1] = v4;
    *(void *)&long long v52 = a4;
    uint64_t v23 = 0;
    if (v21 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = 0x4EC4EC4EC4EC4EC5 * ((v81 - v80) >> 3);
    }
    do
    {
      uint64_t v25 = *(void *)(v82 + 24 * v23);
      if (*(void *)(v82 + 24 * v23 + 8) != v25)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          Espresso::AOT::SegmentsLowerer::AddTransferOp(v73, v25 + v26, *(void **)(a1 + 16));
          ++v27;
          uint64_t v25 = *(void *)(v82 + 24 * v23);
          v26 += 72;
        }
        while (v27 < 0x8E38E38E38E38E39 * ((*(void *)(v82 + 24 * v23 + 8) - v25) >> 3));
      }
      Espresso::AOT::SegmentsLowerer::AddCallOp(v73, (uint64_t)&v80[104 * v23++], (void *)(a1 + 40), *(void **)(a1 + 16));
    }
    while (v23 != v24);
    uint64_t v22 = v83;
    uint64_t v4 = *(void *)&v51[1];
  }
  uint64_t v29 = v22 - 24;
  uint64_t v28 = *(void *)(v22 - 24);
  if (*(void *)(v29 + 8) != v28)
  {
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      Espresso::AOT::SegmentsLowerer::AddTransferOp(v73, v28 + v30, *(void **)(a1 + 16));
      ++v31;
      uint64_t v28 = *(void *)(v83 - 24);
      v30 += 72;
    }
    while (v31 < 0x8E38E38E38E38E39 * ((*(void *)(v83 - 16) - v28) >> 3));
  }
  uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v33 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 88))(v32);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  if (*v33 != v34)
  {
    do
    {
      MIL::Builder::BlockBuilder::AddOutput();
      v35 += 24;
    }
    while (v35 != v34);
  }
  MIL::Builder::FunctionBuilder::SetSpecialization();
  std::string __p = operator new(0x20uLL);
  long long v52 = xmmword_192DAA350;
  *(_OWORD *)char v59 = xmmword_192DAA350;
  v51[1] = *(_OWORD *)"FlexibleShapeInformation";
  strcpy((char *)__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  uint64_t v36 = v70;
  if (v70)
  {
    uint64_t v37 = (char *)operator new(0x20uLL);
    long long v69 = v52;
    *(_OWORD *)uint64_t v37 = v51[1];
    strcpy(v37 + 16, "ormation");
    uint64_t v66 = v36;
    int64_t v67 = v71;
    unint64_t v68 = v37;
    if (v71) {
      atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::FunctionBuilder::SetAttribute();
    if (!v67 || atomic_fetch_add(&v67->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      if ((SHIBYTE(v69) & 0x80000000) == 0) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v67);
    if (SHIBYTE(v69) < 0) {
LABEL_53:
    }
      operator delete(v68);
  }
LABEL_54:
  std::string __p = operator new(0x20uLL);
  long long v52 = xmmword_192DB5600;
  *(_OWORD *)char v59 = xmmword_192DB5600;
  strcpy((char *)__p, "NeuralEngineOptimizedIOBuffer");
  qmemcpy(v51, "ptimizedIOBufferNeuralEngineOpti", sizeof(v51));
  MIL::IRObject::TryGetAttributeSharedPtr();
  operator delete(__p);
  unint64_t v38 = v64;
  if (v64)
  {
    if (*(unsigned char *)(a1 + 97))
    {
      uint8x8_t v39 = (char *)operator new(0x20uLL);
      long long v63 = v52;
      *(_OWORD *)uint8x8_t v39 = v51[1];
      *(_OWORD *)(v39 + 13) = v51[0];
      v39[29] = 0;
      uint64_t v60 = v38;
      uint64_t v61 = v65;
      unsigned int v62 = v39;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (v61 && !atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
        if (SHIBYTE(v63) < 0) {
          goto LABEL_61;
        }
      }
      else if (SHIBYTE(v63) < 0)
      {
LABEL_61:
        unint64_t v40 = v62;
LABEL_78:
        operator delete(v40);
      }
    }
    else
    {
      E5Common::Utils::MILDictToCpp<std::string,BOOL>(v64, (uint64_t)&__p);
      uint8x8_t v41 = v59[1];
      if (v59[1])
      {
        do
        {
          if (v41[40]) {
            v41[40] = 0;
          }
          uint8x8_t v41 = *(unsigned char **)v41;
        }
        while (v41);
      }
      E5Common::Utils::MILDictFromCpp<std::string,BOOL>((uint64_t)&__p, &v57);
      uint64_t v42 = operator new(0x20uLL);
      char v55 = v42;
      long long v56 = v52;
      *uint64_t v42 = v51[1];
      *(_OWORD *)((char *)v42 + 13) = v51[0];
      *((unsigned char *)v42 + 29) = 0;
      char v53 = v57;
      if (v57) {
        operator new();
      }
      uint64_t v54 = 0;
      BOOL v57 = 0;
      MIL::Builder::FunctionBuilder::SetAttribute();
      if (SHIBYTE(v56) < 0) {
        operator delete(v55);
      }
      int v43 = v57;
      BOOL v57 = 0;
      if (v43) {
        (*(void (**)(void *))(*(void *)v43 + 8))(v43);
      }
      unint64_t v44 = (void **)v59[1];
      if (v59[1])
      {
        do
        {
          int64_t v50 = (void **)*v44;
          if (*((char *)v44 + 39) < 0) {
            operator delete(v44[2]);
          }
          operator delete(v44);
          unint64_t v44 = v50;
        }
        while (v50);
      }
      unint64_t v40 = __p;
      std::string __p = 0;
      if (v40) {
        goto LABEL_78;
      }
    }
  }
  MIL::Builder::FunctionBuilder::CreateFunction(v79);
  int v45 = v65;
  if (v65 && !atomic_fetch_add(&v65->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  unint64_t v46 = v71;
  if (v71 && !atomic_fetch_add(&v71->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    unint64_t v47 = v74;
    if (!v74)
    {
LABEL_86:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
  }
  else
  {
    unint64_t v47 = v74;
    if (!v74) {
      goto LABEL_86;
    }
  }
  if (atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_86;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
LABEL_87:
  }
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_88:
  uint64_t v48 = v79;
  long long v79 = 0;
  if (v48) {
    (*(void (**)(MIL::Builder::FunctionBuilder *))(*(void *)v48 + 8))(v48);
  }
  return std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair((void **)&v80);
}

void sub_192252604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a24) {
    (*(void (**)(uint64_t))(*(void *)a24 + 8))(a24);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v58 - 232);
  if (*(char *)(v58 - 193) < 0) {
    operator delete(*(void **)(v58 - 216));
  }
  uint64_t v60 = *(void *)(v58 - 152);
  *(void *)(v58 - 152) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair((void **)(v58 - 144));
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::AddTransferOp(uint64_t a1, uint64_t a2, void *a3)
{
  std::string::size_type v5 = (std::string *)(a2 + 40);
  if (MIL::Builder::BlockBuilder::TryGetVariable()) {
    return;
  }
  if (!*(void *)(a2 + 64)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Output type cannot be null");
  }
  char v31 = 8;
  uint64_t v29 = 0;
  strcpy((char *)v30, "transfer");
  uint64_t v28 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  char v27 = 4;
  strcpy((char *)v26, "from");
  uint64_t v6 = *a3 + 24 * *(void *)a2;
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v25.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
  }
  MIL::Builder::OperationBuilder::AddInputString();
  char v24 = 2;
  strcpy((char *)__p, "to");
  uint64_t v8 = *a3 + 24 * *(void *)(a2 + 8);
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    v22.__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  }
  MIL::Builder::OperationBuilder::AddInputString();
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_15:
    operator delete(__p[0]);
    unint64_t v10 = v33;
    if (!v33) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
  if (v24 < 0) {
    goto LABEL_15;
  }
LABEL_12:
  unint64_t v10 = v33;
  if (!v33)
  {
LABEL_17:
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_22;
  }
LABEL_16:
  if (atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_18:
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_23:
    operator delete(v26[0]);
    uint8x8_t v11 = v32;
    if (!v32) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_22:
  operator delete(v25.__r_.__value_.__l.__data_);
  if (v27 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  uint8x8_t v11 = v32;
  if (!v32)
  {
LABEL_25:
    unint64_t v12 = v29;
    if (!v29) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_24:
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  unint64_t v12 = v29;
  if (!v29)
  {
LABEL_27:
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_26:
  if (atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (v31 < 0) {
LABEL_28:
  }
    operator delete(v30[0]);
LABEL_29:
  char v20 = 6;
  strcpy((char *)v19, "values");
  if (*(char *)(a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else {
    std::string v18 = *(std::string *)(a2 + 16);
  }
  MIL::Builder::OperationBuilder::AddInput();
  std::string::size_type v13 = v21;
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_36;
      }
LABEL_44:
      operator delete(v19[0]);
      if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
        goto LABEL_37;
      }
LABEL_45:
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
      goto LABEL_46;
    }
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (v20 < 0) {
    goto LABEL_44;
  }
LABEL_36:
  if (*(char *)(a2 + 63) < 0) {
    goto LABEL_45;
  }
LABEL_37:
  std::string v16 = *v5;
LABEL_46:
  MIL::Builder::OperationBuilder::AddOutput();
  unint64_t v14 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
LABEL_49:
  }
    operator delete(v16.__r_.__value_.__l.__data_);
LABEL_50:
  int v15 = v34;
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_192252CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v46 - 64);
  _Unwind_Resume(a1);
}

void sub_192252D18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v34 - 80);
  JUMPOUT(0x192252D4CLL);
}

void Espresso::AOT::SegmentsLowerer::GenerateEntryPointFuncMeta(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3;
  Espresso::AOT::SegmentsLowerer::MakeNewTensorNames(a3, *(void **)(a1 + 16), (uint64_t)v159);
  Espresso::AOT::SegmentsLowerer::GetOwnerSegments(v4, (uint64_t)v157);
  long long v154 = 0u;
  long long v155 = 0u;
  int v156 = 1065353216;
  uint64_t v134 = a2;
  long long v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 128))(a2);
  long long v9 = v7 + 1;
  uint64_t v8 = (void *)*v7;
  if ((void *)*v7 != v7 + 1)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v154, (uint64_t)(v8 + 4), (uint64_t)(v8 + 4));
      std::string::size_type v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          std::string::size_type v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v9);
  }
  long long v152 = 0uLL;
  unint64_t v153 = 0;
  std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(&v150, 0xCCCCCCCCCCCCCCCDLL * ((v4[1] - *v4) >> 4) + 1);
  uint64_t v11 = *v4;
  uint64_t v10 = v4[1];
  long long v135 = v4;
  if (v10 != *v4)
  {
    unint64_t v12 = 0;
    int v136 = (void *)(a1 + 40);
    while (1)
    {
      long long v139 = (void *)(v11 + 80 * v12);
      uint64_t v16 = v139[3];
      uint64_t v138 = v139[4];
      if (v16 != v138) {
        break;
      }
LABEL_12:
      if (++v12 >= 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4)) {
        goto LABEL_97;
      }
    }
    uint64_t v137 = 24 * v12;
LABEL_17:
    float v17 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v154, v16);
    std::string v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v157, v16);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v19 = v18[5];
    char v20 = (const std::string::value_type **)v16;
    if (!v17)
    {
      unint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v16);
      if (!v21) {
        goto LABEL_218;
      }
      int8x8_t v22 = (int8x8_t)v21[6];
      if (!*(void *)&v22) {
        goto LABEL_218;
      }
      uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
      v23.i16[0] = vaddlv_u8(v23);
      if (v23.u32[0] > 1uLL)
      {
        unint64_t v24 = v19;
        if (v19 >= *(void *)&v22) {
          unint64_t v24 = v19 % *(void *)&v22;
        }
      }
      else
      {
        unint64_t v24 = (*(void *)&v22 - 1) & v19;
      }
      std::string v25 = *(void **)(v21[5] + 8 * v24);
      if (!v25 || (uint64_t v26 = (void *)*v25) == 0) {
LABEL_218:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (v23.u32[0] < 2uLL)
      {
        uint64_t v27 = *(void *)&v22 - 1;
        while (1)
        {
          uint64_t v29 = v26[1];
          if (v19 == v29)
          {
            if (v26[2] == v19) {
              goto LABEL_40;
            }
          }
          else if ((v29 & v27) != v24)
          {
            goto LABEL_218;
          }
          uint64_t v26 = (void *)*v26;
          if (!v26) {
            goto LABEL_218;
          }
        }
      }
      while (1)
      {
        unint64_t v28 = v26[1];
        if (v19 == v28)
        {
          if (v26[2] == v19)
          {
LABEL_40:
            char v20 = (const std::string::value_type **)(v26 + 3);
            break;
          }
        }
        else
        {
          if (v28 >= *(void *)&v22) {
            v28 %= *(void *)&v22;
          }
          if (v28 != v24) {
            goto LABEL_218;
          }
        }
        uint64_t v26 = (void *)*v26;
        if (!v26) {
          goto LABEL_218;
        }
      }
    }
    uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v16);
    if (!v30) {
      goto LABEL_215;
    }
    int8x8_t v31 = (int8x8_t)v30[6];
    if (!*(void *)&v31) {
      goto LABEL_215;
    }
    uint8x8_t v32 = (uint8x8_t)vcnt_s8(v31);
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.u32[0] > 1uLL)
    {
      unint64_t v33 = v12;
      if (v12 >= *(void *)&v31) {
        unint64_t v33 = v12 % *(void *)&v31;
      }
    }
    else
    {
      unint64_t v33 = (*(void *)&v31 - 1) & v12;
    }
    uint64_t v34 = *(uint64_t ***)(v30[5] + 8 * v33);
    if (!v34 || (uint64_t v35 = *v34) == 0) {
LABEL_215:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v32.u32[0] < 2uLL)
    {
      uint64_t v36 = *(void *)&v31 - 1;
      while (1)
      {
        uint64_t v38 = v35[1];
        if (v12 == v38)
        {
          if (v35[2] == v12) {
            goto LABEL_62;
          }
        }
        else if ((v38 & v36) != v33)
        {
          goto LABEL_215;
        }
        uint64_t v35 = (uint64_t *)*v35;
        if (!v35) {
          goto LABEL_215;
        }
      }
    }
    while (1)
    {
      unint64_t v37 = v35[1];
      if (v12 == v37)
      {
        if (v35[2] == v12)
        {
LABEL_62:
          uint64_t v39 = *v4 + 80 * v19;
          if (v17) {
            uint64_t v39 = (uint64_t)v139;
          }
          uint64_t v40 = *(void *)(v39 + 72);
          uint64_t v41 = v139[9];
          uint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v136, (uint64_t)v139);
          if (!v42) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42[5] + 144))(v42[5], v16);
          *(void *)&long long v140 = v40;
          *((void *)&v140 + 1) = v41;
          if (*((char *)v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v141, *v20, (std::string::size_type)v20[1]);
          }
          else
          {
            long long v44 = *(_OWORD *)v20;
            v141.__r_.__value_.__r.__words[2] = (std::string::size_type)v20[2];
            *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v44;
          }
          if (*((char *)v35 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v35[3], v35[4]);
          }
          else
          {
            long long v45 = *(_OWORD *)(v35 + 3);
            __p.__r_.__value_.__r.__words[2] = v35[5];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
          }
          uint64_t v143 = v43;
          uint64_t v46 = v150 + v137;
          unint64_t v47 = *(void *)(v150 + v137 + 8);
          unint64_t v48 = *(void *)(v150 + v137 + 16);
          if (v47 < v48)
          {
            *(_OWORD *)unint64_t v47 = v140;
            long long v49 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
            *(void *)(v47 + 32) = *((void *)&v141.__r_.__value_.__l + 2);
            *(_OWORD *)(v47 + 16) = v49;
            memset(&v141, 0, sizeof(v141));
            std::string::size_type v50 = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)(v47 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v47 + 56) = v50;
            memset(&__p, 0, sizeof(__p));
            *(void *)(v47 + 64) = v143;
            int v51 = (char *)(v47 + 72);
            goto LABEL_93;
          }
          long long v52 = (void **)(v150 + 24 * v12);
          uint64_t v53 = v47 - (void)*v52;
          unint64_t v54 = 0x8E38E38E38E38E39 * (v53 >> 3) + 1;
          if (v54 > 0x38E38E38E38E38ELL) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v48 - (void)*v52) >> 3);
          if (2 * v55 > v54) {
            unint64_t v54 = 2 * v55;
          }
          if (v55 >= 0x1C71C71C71C71C7) {
            unint64_t v56 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56 > 0x38E38E38E38E38ELL) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          BOOL v57 = (char *)operator new(72 * v56);
          uint64_t v58 = &v57[8 * (v53 >> 3)];
          char v59 = &v57[72 * v56];
          *(_OWORD *)uint64_t v58 = v140;
          uint64_t v60 = &v57[v53];
          *(std::string *)(v60 + 16) = v141;
          memset(&v141, 0, sizeof(v141));
          std::string::size_type v61 = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v60 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          memset(&__p, 0, sizeof(__p));
          *((void *)v60 + 7) = v61;
          *((void *)v60 + 8) = v43;
          int v51 = v58 + 72;
          unsigned int v62 = *(void ***)(v46 + 8);
          long long v63 = (void **)*v52;
          if (v62 != *v52)
          {
            uint64_t v4 = v135;
            do
            {
              *(_OWORD *)(v58 - 72) = *(_OWORD *)(v62 - 9);
              long long v64 = *(_OWORD *)(v62 - 7);
              *((void *)v58 - 5) = *(v62 - 5);
              *(_OWORD *)(v58 - 56) = v64;
              *(v62 - 6) = 0;
              *(v62 - 5) = 0;
              *(v62 - 7) = 0;
              long long v65 = *((_OWORD *)v62 - 2);
              *((void *)v58 - 2) = *(v62 - 2);
              *((_OWORD *)v58 - 2) = v65;
              *(v62 - 3) = 0;
              *(v62 - 2) = 0;
              *(v62 - 4) = 0;
              *((void *)v58 - 1) = *(v62 - 1);
              v58 -= 72;
              v62 -= 9;
            }
            while (v62 != v63);
            unsigned int v62 = (void **)*v52;
            uint64_t v66 = *(void ***)(v46 + 8);
            *long long v52 = v58;
            *(void *)(v46 + 8) = v51;
            *(void *)(v46 + 16) = v59;
            while (2)
            {
              if (v66 == v62) {
                goto LABEL_91;
              }
              if (*((char *)v66 - 9) < 0)
              {
                operator delete(*(v66 - 4));
                if (*((char *)v66 - 33) < 0) {
                  goto LABEL_89;
                }
              }
              else if (*((char *)v66 - 33) < 0)
              {
LABEL_89:
                operator delete(*(v66 - 7));
              }
              v66 -= 9;
              continue;
            }
          }
          *long long v52 = v58;
          *(void *)(v46 + 8) = v51;
          *(void *)(v46 + 16) = v59;
          uint64_t v4 = v135;
LABEL_91:
          if (v62) {
            operator delete(v62);
          }
LABEL_93:
          *(void *)(v46 + 8) = v51;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_95;
            }
          }
          else if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_95:
            operator delete(v141.__r_.__value_.__l.__data_);
            v16 += 24;
            if (v16 == v138)
            {
LABEL_11:
              uint64_t v11 = *v4;
              uint64_t v10 = v4[1];
              goto LABEL_12;
            }
            goto LABEL_17;
          }
          v16 += 24;
          if (v16 == v138) {
            goto LABEL_11;
          }
          goto LABEL_17;
        }
      }
      else
      {
        if (v37 >= *(void *)&v31) {
          v37 %= *(void *)&v31;
        }
        if (v37 != v33) {
          goto LABEL_215;
        }
      }
      uint64_t v35 = (uint64_t *)*v35;
      if (!v35) {
        goto LABEL_215;
      }
    }
  }
LABEL_97:
  uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v134 + 40))(v134);
  unint64_t v68 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v67 + 88))(v67);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  if (*v68 == v69) {
    goto LABEL_136;
  }
  do
  {
LABEL_101:
    uint64_t v71 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v157, v70);
    if (!v71) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v72 = v71[5];
    uint64_t v73 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v70);
    if (!v73) {
      goto LABEL_219;
    }
    int8x8_t v74 = (int8x8_t)v73[6];
    if (!*(void *)&v74) {
      goto LABEL_219;
    }
    uint8x8_t v75 = (uint8x8_t)vcnt_s8(v74);
    v75.i16[0] = vaddlv_u8(v75);
    if (v75.u32[0] > 1uLL)
    {
      unint64_t v76 = v72;
      if (v72 >= *(void *)&v74) {
        unint64_t v76 = v72 % *(void *)&v74;
      }
    }
    else
    {
      unint64_t v76 = (*(void *)&v74 - 1) & v72;
    }
    uint64_t v77 = *(uint64_t ***)(v73[5] + 8 * v76);
    if (!v77 || (unint64_t v78 = *v77) == 0) {
LABEL_219:
    }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (v75.u32[0] < 2uLL)
    {
      uint64_t v79 = *(void *)&v74 - 1;
      while (1)
      {
        uint64_t v81 = v78[1];
        if (v72 == v81)
        {
          if (v78[2] == v72) {
            goto LABEL_123;
          }
        }
        else if ((v81 & v79) != v76)
        {
          goto LABEL_219;
        }
        unint64_t v78 = (uint64_t *)*v78;
        if (!v78) {
          goto LABEL_219;
        }
      }
    }
    while (1)
    {
      unint64_t v80 = v78[1];
      if (v72 == v80) {
        break;
      }
      if (v80 >= *(void *)&v74) {
        v80 %= *(void *)&v74;
      }
      if (v80 != v76) {
        goto LABEL_219;
      }
LABEL_113:
      unint64_t v78 = (uint64_t *)*v78;
      if (!v78) {
        goto LABEL_219;
      }
    }
    if (v78[2] != v72) {
      goto LABEL_113;
    }
LABEL_123:
    if (0xCCCCCCCCCCCCCCCDLL * ((v135[1] - *v135) >> 4) <= v72) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v82 = *(void *)(*v135 + 80 * v72 + 72);
    uint64_t v83 = (*(uint64_t (**)(uint64_t))(*(void *)v134 + 40))(v134);
    uint64_t v84 = (*(uint64_t (**)(void))(*(void *)(v83 + 64) + 16))();
    *(void *)&long long v140 = v82;
    *((void *)&v140 + 1) = v82;
    if (*((char *)v78 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v141, (const std::string::value_type *)v78[3], v78[4]);
    }
    else
    {
      long long v85 = *(_OWORD *)(v78 + 3);
      v141.__r_.__value_.__r.__words[2] = v78[5];
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v85;
    }
    if (*(char *)(v70 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v70, *(void *)(v70 + 8));
    }
    else
    {
      long long v86 = *(_OWORD *)v70;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v70 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v86;
    }
    uint64_t v143 = v84;
    uint64_t v87 = (v135[1] - *v135) >> 4;
    uint64_t v88 = v150 + 0x3333333333333338 * v87;
    unint64_t v89 = *(void *)(v88 + 8);
    if (v89 >= *(void *)(v88 + 16))
    {
      unint64_t v92 = std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>::__push_back_slow_path<Espresso::AOT::SegmentsLowerer::TransferDef>((void **)(v150 + 0x3333333333333338 * v87), (uint64_t)&v140);
    }
    else
    {
      *(_OWORD *)unint64_t v89 = v140;
      long long v90 = *(_OWORD *)&v141.__r_.__value_.__l.__data_;
      *(void *)(v89 + 32) = *((void *)&v141.__r_.__value_.__l + 2);
      *(_OWORD *)(v89 + 16) = v90;
      memset(&v141, 0, sizeof(v141));
      std::string::size_type v91 = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v89 + 40) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v89 + 56) = v91;
      memset(&__p, 0, sizeof(__p));
      *(void *)(v89 + 64) = v143;
      unint64_t v92 = (char *)(v89 + 72);
    }
    *(void *)(v88 + 8) = v92;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      uint64_t v4 = v135;
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_135;
      }
LABEL_100:
      v70 += 24;
      if (v70 == v69) {
        break;
      }
      goto LABEL_101;
    }
    uint64_t v4 = v135;
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_100;
    }
LABEL_135:
    operator delete(v141.__r_.__value_.__l.__data_);
    v70 += 24;
  }
  while (v70 != v69);
LABEL_136:
  uint64_t v93 = *v4;
  if (v4[1] != *v4)
  {
    for (unint64_t i = 0; i < 0xCCCCCCCCCCCCCCCDLL * ((v135[1] - *v135) >> 4); ++i)
    {
      unint64_t v96 = (uint64_t *)(v93 + 80 * i);
      uint64_t v147 = 0;
      std::string::size_type v148 = 0;
      uint64_t v149 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v147, v96[3], v96[4], 0xAAAAAAAAAAAAAAABLL * ((v96[4] - v96[3]) >> 3));
      uint64_t v97 = v96[3];
      if (v96[4] == v97) {
        goto LABEL_165;
      }
      unint64_t v98 = 0;
      do
      {
        unint64_t v99 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v97 + 24 * v98);
        if (!v99) {
          goto LABEL_216;
        }
        int8x8_t v100 = (int8x8_t)v99[6];
        if (!*(void *)&v100) {
          goto LABEL_216;
        }
        uint8x8_t v101 = (uint8x8_t)vcnt_s8(v100);
        v101.i16[0] = vaddlv_u8(v101);
        if (v101.u32[0] > 1uLL)
        {
          unint64_t v102 = i;
          if (i >= *(void *)&v100) {
            unint64_t v102 = i % *(void *)&v100;
          }
        }
        else
        {
          unint64_t v102 = (*(void *)&v100 - 1) & i;
        }
        unint64_t v103 = *(const std::string ***)(v99[5] + 8 * v102);
        if (!v103 || (std::string::size_type v104 = *v103) == 0) {
LABEL_216:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v101.u32[0] < 2uLL)
        {
          uint64_t v105 = *(void *)&v100 - 1;
          while (1)
          {
            std::string::size_type size = v104->__r_.__value_.__l.__size_;
            if (i == size)
            {
              if (v104->__r_.__value_.__r.__words[2] == i) {
                goto LABEL_164;
              }
            }
            else if ((size & v105) != v102)
            {
              goto LABEL_216;
            }
            std::string::size_type v104 = (const std::string *)v104->__r_.__value_.__r.__words[0];
            if (!v104) {
              goto LABEL_216;
            }
          }
        }
        while (1)
        {
          std::string::size_type v106 = v104->__r_.__value_.__l.__size_;
          if (i == v106) {
            break;
          }
          if (v106 >= *(void *)&v100) {
            v106 %= *(void *)&v100;
          }
          if (v106 != v102) {
            goto LABEL_216;
          }
LABEL_154:
          std::string::size_type v104 = (const std::string *)v104->__r_.__value_.__r.__words[0];
          if (!v104) {
            goto LABEL_216;
          }
        }
        if (v104->__r_.__value_.__r.__words[2] != i) {
          goto LABEL_154;
        }
LABEL_164:
        std::string::operator=((std::string *)(v96[3] + 24 * v98++), v104 + 1);
        uint64_t v97 = v96[3];
      }
      while (v98 < 0xAAAAAAAAAAAAAAABLL * ((v96[4] - v97) >> 3));
LABEL_165:
      uint64_t v108 = v96[6];
      if (v96[7] == v108) {
        goto LABEL_189;
      }
      unint64_t v109 = 0;
      while (2)
      {
        float v110 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(v159, v108 + 24 * v109);
        if (!v110) {
          goto LABEL_217;
        }
        int8x8_t v111 = (int8x8_t)v110[6];
        if (!*(void *)&v111) {
          goto LABEL_217;
        }
        uint8x8_t v112 = (uint8x8_t)vcnt_s8(v111);
        v112.i16[0] = vaddlv_u8(v112);
        if (v112.u32[0] > 1uLL)
        {
          unint64_t v113 = i;
          if (i >= *(void *)&v111) {
            unint64_t v113 = i % *(void *)&v111;
          }
        }
        else
        {
          unint64_t v113 = (*(void *)&v111 - 1) & i;
        }
        long long v114 = *(const std::string ***)(v110[5] + 8 * v113);
        if (!v114 || (char v115 = *v114) == 0) {
LABEL_217:
        }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        if (v112.u32[0] < 2uLL)
        {
          uint64_t v116 = *(void *)&v111 - 1;
          while (1)
          {
            std::string::size_type v118 = v115->__r_.__value_.__l.__size_;
            if (i == v118)
            {
              if (v115->__r_.__value_.__r.__words[2] == i) {
                goto LABEL_188;
              }
            }
            else if ((v118 & v116) != v113)
            {
              goto LABEL_217;
            }
            char v115 = (const std::string *)v115->__r_.__value_.__r.__words[0];
            if (!v115) {
              goto LABEL_217;
            }
          }
        }
        while (2)
        {
          std::string::size_type v117 = v115->__r_.__value_.__l.__size_;
          if (i != v117)
          {
            if (v117 >= *(void *)&v111) {
              v117 %= *(void *)&v111;
            }
            if (v117 != v113) {
              goto LABEL_217;
            }
LABEL_178:
            char v115 = (const std::string *)v115->__r_.__value_.__r.__words[0];
            if (!v115) {
              goto LABEL_217;
            }
            continue;
          }
          break;
        }
        if (v115->__r_.__value_.__r.__words[2] != i) {
          goto LABEL_178;
        }
LABEL_188:
        std::string::operator=((std::string *)(v96[6] + 24 * v109++), v115 + 1);
        uint64_t v108 = v96[6];
        if (v109 < 0xAAAAAAAAAAAAAAABLL * ((v96[7] - v108) >> 3)) {
          continue;
        }
        break;
      }
LABEL_189:
      uint64_t v119 = *v135;
      uint64_t v120 = *v135 + 80 * i;
      long long v160 = *(_OWORD *)v120;
      uint64_t v161 = *(void *)(v120 + 16);
      *(void *)(v120 + 8) = 0;
      *(void *)(v120 + 16) = 0;
      *(void *)uint64_t v120 = 0;
      Espresso::AOT::SegmentsLowerer::CallDef::CallDef((uint64_t)&v140, &v160, (uint64_t)&v147, v119 + 80 * i + 24, (__n128 *)(v119 + 80 * i + 48), *(void *)(v119 + 80 * i + 72));
      if (SHIBYTE(v161) < 0)
      {
        operator delete((void *)v160);
        uint64_t v121 = *((void *)&v152 + 1);
        if (*((void *)&v152 + 1) >= v153) {
          goto LABEL_193;
        }
LABEL_191:
        long long v122 = v140;
        *(void *)(v121 + 16) = v141.__r_.__value_.__r.__words[0];
        *(void *)(v121 + 24) = 0;
        *(_OWORD *)uint64_t v121 = v122;
        v141.__r_.__value_.__r.__words[0] = 0;
        long long v140 = 0uLL;
        *(void *)(v121 + 32) = 0;
        *(void *)(v121 + 40) = 0;
        *(_OWORD *)(v121 + 24) = *(_OWORD *)&v141.__r_.__value_.__r.__words[1];
        *(_OWORD *)&v141.__r_.__value_.__r.__words[1] = 0uLL;
        *(void *)(v121 + 40) = __p.__r_.__value_.__r.__words[0];
        *(void *)(v121 + 48) = 0;
        __p.__r_.__value_.__r.__words[0] = 0;
        *(void *)(v121 + 56) = 0;
        *(void *)(v121 + 64) = 0;
        *(_OWORD *)(v121 + 48) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        *(void *)(v121 + 64) = v143;
        *(void *)(v121 + 72) = 0;
        uint64_t v143 = 0;
        *(void *)(v121 + 80) = 0;
        *(void *)(v121 + 88) = 0;
        *(_OWORD *)(v121 + 72) = v144;
        *(void *)(v121 + 88) = v145;
        long long v144 = 0uLL;
        uint64_t v145 = 0;
        *(void *)(v121 + 96) = v146;
        char v123 = (char *)(v121 + 104);
      }
      else
      {
        uint64_t v121 = *((void *)&v152 + 1);
        if (*((void *)&v152 + 1) < v153) {
          goto LABEL_191;
        }
LABEL_193:
        char v123 = std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::CallDef>((void **)&v152, (uint64_t)&v140);
      }
      *((void *)&v152 + 1) = v123;
      Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)&v140);
      std::string::size_type v124 = (void **)v147;
      if (v147)
      {
        uint64_t v125 = v148;
        unint64_t v95 = v147;
        if (v148 != v147)
        {
          do
          {
            if (*((char *)v125 - 1) < 0) {
              operator delete(*(v125 - 3));
            }
            v125 -= 3;
          }
          while (v125 != v124);
          unint64_t v95 = v147;
        }
        std::string::size_type v148 = v124;
        operator delete(v95);
      }
      uint64_t v93 = *v135;
    }
  }
  *(_OWORD *)a4 = v152;
  *(void *)(a4 + 16) = v153;
  *(_OWORD *)(a4 + 24) = v150;
  *(void *)(a4 + 40) = v151;
  long long v126 = (void **)v155;
  if ((void)v155)
  {
    do
    {
      int v131 = (void **)*v126;
      if (*((char *)v126 + 39) < 0) {
        operator delete(v126[2]);
      }
      operator delete(v126);
      long long v126 = v131;
    }
    while (v131);
  }
  BOOL v127 = (void *)v154;
  *(void *)&long long v154 = 0;
  if (v127) {
    operator delete(v127);
  }
  uint64_t v128 = v158;
  if (v158)
  {
    do
    {
      char v132 = (void **)*v128;
      if (*((char *)v128 + 39) < 0) {
        operator delete(v128[2]);
      }
      operator delete(v128);
      uint64_t v128 = v132;
    }
    while (v132);
  }
  char v129 = (void *)v157[0];
  v157[0] = 0;
  if (v129) {
    operator delete(v129);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node((int)v159, (char *)v159[2]);
  long long v130 = (void *)v159[0];
  v159[0] = 0;
  if (v130) {
    operator delete(v130);
  }
}

void sub_192253CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::~vector[abi:ne180100](&a40);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v40 - 240);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v40 - 192);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](v40 - 152);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_192253E98(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>::vector(v1 + 1, *v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmentsLowerer::CallDef::~CallDef(Espresso::AOT::SegmentsLowerer::CallDef *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v4 = (void *)*((void *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 9);
    }
    *((void *)this + 10) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 6);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 7);
    long long v7 = (void *)*((void *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      long long v7 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v5;
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 4);
    uint64_t v10 = (void *)*((void *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0) {
          operator delete(*(void **)(v9 - 24));
        }
        v9 -= 24;
      }
      while (v9 != v8);
      uint64_t v10 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v8;
    operator delete(v10);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__deallocate_node(int a1, char *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (void **)*((void *)v2 + 7);
      if (v4)
      {
        do
        {
          uint64_t v6 = (void **)*v4;
          if (*((char *)v4 + 47) < 0) {
            operator delete(v4[3]);
          }
          operator delete(v4);
          uint64_t v4 = v6;
        }
        while (v6);
      }
      uint64_t v5 = (void *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v5) {
        operator delete(v5);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

char *std::vector<Espresso::AOT::SegmentsLowerer::CallDef>::__emplace_back_slow_path<Espresso::AOT::SegmentsLowerer::CallDef>(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * (v3 >> 3) + 1;
  if (v4 > 0x276276276276276) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v5 = 0x276276276276276;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x276276276276276) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 104 * v5;
  uint64_t v8 = (char *)operator new(104 * v5);
  uint64_t v9 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  uint64_t v10 = &v8[v7];
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v11 = &v8[v3];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v11 + 8) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 11) = 0;
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((void *)v11 + 11) = v12;
  *((void *)v11 + 12) = v13;
  unint64_t v14 = v9 + 104;
  uint64_t v16 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v14;
    a1[2] = v10;
    if (!v15) {
      return v14;
    }
    goto LABEL_15;
  }
  uint64_t v17 = 0;
  do
  {
    std::string v18 = &v9[v17];
    unint64_t v19 = &v15[v17];
    long long v20 = *(_OWORD *)&v15[v17 - 104];
    *((void *)v18 - 11) = *(void *)&v15[v17 - 88];
    *(_OWORD *)(v18 - 104) = v20;
    *((void *)v19 - 12) = 0;
    *((void *)v19 - 11) = 0;
    *((void *)v19 - 13) = 0;
    *((_OWORD *)v18 - 5) = *(_OWORD *)&v15[v17 - 80];
    *((void *)v18 - 8) = *(void *)&v15[v17 - 64];
    *((void *)v19 - 10) = 0;
    *((void *)v19 - 9) = 0;
    long long v21 = *(_OWORD *)&v15[v17 - 56];
    *((void *)v19 - 8) = 0;
    *(_OWORD *)(v18 - 56) = v21;
    *((void *)v18 - 5) = *(void *)&v15[v17 - 40];
    *((void *)v19 - 7) = 0;
    *((void *)v19 - 6) = 0;
    *((void *)v19 - 5) = 0;
    *((_OWORD *)v18 - 2) = *(_OWORD *)&v15[v17 - 32];
    uint64_t v22 = *(void *)&v15[v17 - 8];
    *((void *)v18 - 2) = *(void *)&v15[v17 - 16];
    *((void *)v19 - 4) = 0;
    *((void *)v19 - 3) = 0;
    *((void *)v19 - 2) = 0;
    *((void *)v18 - 1) = v22;
    v17 -= 104;
  }
  while (&v15[v17] != v16);
  uint8x8_t v23 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  *a1 = &v9[v17];
  a1[1] = v14;
  a1[2] = v10;
  if (v15 != v23)
  {
    do
      Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v15 - 104));
    while (v15 != v23);
    BOOL v15 = v23;
  }
  if (v15) {
LABEL_15:
  }
    operator delete(v15);
  return v14;
}

void **std::pair<std::vector<Espresso::AOT::SegmentsLowerer::CallDef>,std::vector<std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>>>::~pair(void **a1)
{
  uint64_t v2 = (void **)a1[3];
  if (v2)
  {
    uint64_t v3 = (void **)a1[4];
    unint64_t v4 = a1[3];
    if (v3 == v2)
    {
LABEL_17:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    unint64_t v5 = (void **)a1[4];
    while (1)
    {
      uint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      if (!v8) {
        goto LABEL_6;
      }
      uint64_t v9 = (void **)*(v3 - 2);
      uint64_t v6 = v7;
      if (v9 != v7) {
        break;
      }
LABEL_5:
      *(v3 - 2) = v7;
      operator delete(v6);
LABEL_6:
      uint64_t v3 = v5;
      if (v5 == v2)
      {
        unint64_t v4 = a1[3];
        goto LABEL_17;
      }
    }
    while (1)
    {
      if (*((char *)v9 - 9) < 0)
      {
        operator delete(*(v9 - 4));
        if (*((char *)v9 - 33) < 0) {
LABEL_15:
        }
          operator delete(*(v9 - 7));
      }
      else if (*((char *)v9 - 33) < 0)
      {
        goto LABEL_15;
      }
      v9 -= 9;
      if (v9 == v7)
      {
        uint64_t v6 = *v5;
        goto LABEL_5;
      }
    }
  }
LABEL_18:
  uint64_t v10 = (char *)*a1;
  if (*a1)
  {
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = *a1;
    if (v11 != v10)
    {
      do
        Espresso::AOT::SegmentsLowerer::CallDef::~CallDef((Espresso::AOT::SegmentsLowerer::CallDef *)(v11 - 104));
      while (v11 != v10);
      uint64_t v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void Espresso::AOT::SegmentsLowerer::AddCallOp(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a3, (unsigned __int8 *)a2);
  if (!v6) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Callee function does not exist");
  }
  uint64_t v7 = *((void *)v6 + 5);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
  (*(void (**)(unsigned char **__return_ptr, uint64_t))(*(void *)v7 + 160))(&v54, v7);
  uint64_t v9 = (v55 - v54) >> 3;
  if (v54)
  {
    unint64_t v55 = v54;
    operator delete(v54);
  }
  if (v8 != v9) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of callee function does not match CallDef");
  }
  char v56 = 4;
  strcpy((char *)&v54, "call");
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  MIL::Builder::BlockBuilder::AddOperation();
  if (v56 < 0)
  {
    operator delete(v54);
    uint64_t v10 = *(void *)(a2 + 24);
    if (*(void *)(a2 + 32) == v10) {
      goto LABEL_25;
    }
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a2 + 32) != v10)
  {
LABEL_9:
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = (long long *)(v10 + v11);
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v13, *((void *)v13 + 1));
      }
      else
      {
        long long v14 = *v13;
        v49.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v14;
      }
      BOOL v15 = (long long *)(*(void *)(a2 + 48) + v11);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v16 = *v15;
        v48.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v16;
      }
      MIL::Builder::OperationBuilder::AddInput();
      uint64_t v17 = v50;
      if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_20:
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
LABEL_24:
      }
        operator delete(v49.__r_.__value_.__l.__data_);
LABEL_10:
      ++v12;
      uint64_t v10 = *(void *)(a2 + 24);
      v11 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 32) - v10) >> 3));
  }
LABEL_25:
  uint64_t v18 = *(void *)(a2 + 72);
  if (*(void *)(a2 + 80) != v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      long long v21 = (long long *)(v18 + v19);
      if (*((char *)v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v21, *((void *)v21 + 1));
      }
      else
      {
        long long v22 = *v21;
        v46.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v22;
      }
      (*(void (**)(unsigned char **__return_ptr, uint64_t))(*(void *)v7 + 160))(&v54, v7);
      MIL::Builder::OperationBuilder::AddOutput();
      uint8x8_t v23 = v47;
      if (v47)
      {
        if (!atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
          break;
        }
      }
      unint64_t v24 = v54;
      if (v54) {
        goto LABEL_34;
      }
LABEL_35:
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      ++v20;
      uint64_t v18 = *(void *)(a2 + 72);
      v19 += 24;
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 80) - v18) >> 3)) {
        goto LABEL_39;
      }
    }
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    unint64_t v24 = v54;
    if (!v54) {
      goto LABEL_35;
    }
LABEL_34:
    unint64_t v55 = v24;
    operator delete(v24);
    goto LABEL_35;
  }
LABEL_39:
  MIL::IRTensorValueType::MakeScalar();
  char v44 = 7;
  strcpy((char *)__p, "backend");
  uint64_t v25 = *a4 + 24 * *(void *)(a2 + 96);
  if (*(char *)(v25 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)v25, *(void *)(v25 + 8));
  }
  else
  {
    long long v26 = *(_OWORD *)v25;
    v40.__r_.__value_.__r.__words[2] = *(void *)(v25 + 16);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
  }
  MIL::IRTensorValueType::MakeStringValue();
  uint64_t v41 = v54;
  if (v54) {
    operator new();
  }
  uint64_t v42 = 0;
  unint64_t v54 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  uint64_t v27 = v45;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v28 = v42;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = v54;
  unint64_t v54 = 0;
  if (v29) {
    (*(void (**)(void *))(*(void *)v29 + 8))(v29);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v44 & 0x80000000) == 0) {
      goto LABEL_54;
    }
  }
  else if ((v44 & 0x80000000) == 0)
  {
    goto LABEL_54;
  }
  operator delete(__p[0]);
LABEL_54:
  char v38 = 8;
  strcpy((char *)v37, "function");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v34 = *(std::string *)a2;
  }
  MIL::IRTensorValueType::MakeStringValue();
  uint64_t v35 = v54;
  if (v54) {
    operator new();
  }
  uint64_t v36 = 0;
  unint64_t v54 = 0;
  MIL::Builder::OperationBuilder::SetAttribute();
  uint64_t v30 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  int8x8_t v31 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint8x8_t v32 = v54;
  unint64_t v54 = 0;
  if (v32) {
    (*(void (**)(void *))(*(void *)v32 + 8))(v32);
  }
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_71;
    }
LABEL_74:
    operator delete(v37[0]);
    unint64_t v33 = v53;
    if (!v53) {
      return;
    }
    goto LABEL_75;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  if (v38 < 0) {
    goto LABEL_74;
  }
LABEL_71:
  unint64_t v33 = v53;
  if (!v53) {
    return;
  }
LABEL_75:
  if (!atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
}

void sub_192254B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v55 - 120);
  _Unwind_Resume(a1);
}

__n128 Espresso::AOT::SegmentsLowerer::CallDef::CallDef(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, __n128 *a5, uint64_t a6)
{
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)(a1 + 40) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(void *)(a1 + 64) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  __n128 result = *a5;
  *(__n128 *)(a1 + 72) = *a5;
  *(void *)(a1 + 88) = a5[1].n128_u64[0];
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  a5[1].n128_u64[0] = 0;
  *(void *)(a1 + 96) = a6;
  if (*(void *)(a1 + 32) - *(void *)(a1 + 24) != *(void *)(a1 + 56) - *(void *)(a1 + 48)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Number of params and inputs do not match");
  }
  return result;
}

void sub_192254E0C(_Unwind_Exception *a1)
{
  std::vector<std::string>::~vector[abi:ne180100](v4);
  std::vector<std::string>::~vector[abi:ne180100](v3);
  std::vector<std::string>::~vector[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::SegmentsLowerer::MakeNewTensorNames(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  unint64_t v54 = 0;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
LABEL_4:
    long long v6 = (void *)(v3 + 80 * v5);
    uint64_t v7 = (const void **)v6[3];
    unint64_t v8 = (const void **)v6[4];
    while (v7 != v8)
    {
      int v9 = *((char *)v7 + 23);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)v7 + 23);
      }
      else {
        size_t v10 = (size_t)v7[1];
      }
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v11 >= 0x17)
      {
        uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17) {
          uint64_t v13 = v11 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (std::string *)operator new(v13 + 1);
        __dst.__r_.__value_.__l.__size_ = v10 + 1;
        __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v10 + 1;
        if (!v10) {
          goto LABEL_21;
        }
      }
      if (v9 >= 0) {
        BOOL v15 = v7;
      }
      else {
        BOOL v15 = *v7;
      }
      memmove(p_dst, v15, v10);
LABEL_21:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v10) = 95;
      unint64_t v16 = v6[9];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v16) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v17 = *a2 + 24 * v16;
      int v18 = *(char *)(v17 + 23);
      if (v18 >= 0) {
        uint64_t v19 = (const std::string::value_type *)v17;
      }
      else {
        uint64_t v19 = *(const std::string::value_type **)v17;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        std::string::size_type v20 = *(void *)(v17 + 8);
      }
      long long v21 = std::string::append(&__dst, v19, v20);
      std::string::size_type v23 = v21->__r_.__value_.__r.__words[0];
      std::string::size_type size = v21->__r_.__value_.__l.__size_;
      uint64_t v55 = (unint64_t *)v7;
      v56[0] = size;
      *(void *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      char v24 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v7, (uint64_t)&std::piecewise_construct, (long long **)&v55);
      uint64_t v55 = &v54;
      long long v26 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v25 + 40, &v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v55);
      uint64_t v27 = v26;
      if (*((char *)v26 + 47) < 0) {
        operator delete((void *)v26[3]);
      }
      uint64_t v28 = v56[0];
      v27[3] = v23;
      v27[4] = v28;
      *(void *)((char *)v27 + 39) = *(void *)((char *)v56 + 7);
      *((unsigned char *)v27 + 47) = v24;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v7 += 3;
    }
    uint64_t v29 = (const void **)v6[6];
    uint64_t v30 = (const void **)v6[7];
    while (1)
    {
      if (v29 == v30)
      {
        unint64_t v5 = v54 + 1;
        unint64_t v54 = v5;
        uint64_t v3 = *a1;
        if (v5 >= 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4)) {
          return;
        }
        goto LABEL_4;
      }
      int v31 = *((char *)v29 + 23);
      if (v31 >= 0) {
        size_t v32 = *((unsigned __int8 *)v29 + 23);
      }
      else {
        size_t v32 = (size_t)v29[1];
      }
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v33 >= 0x17)
      {
        uint64_t v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v35 = v33 | 7;
        }
        uint64_t v36 = v35 + 1;
        std::string v34 = (std::string *)operator new(v35 + 1);
        __dst.__r_.__value_.__l.__size_ = v32 + 1;
        __dst.__r_.__value_.__r.__words[2] = v36 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        std::string v34 = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v32 + 1;
        if (!v32) {
          goto LABEL_49;
        }
      }
      if (v31 >= 0) {
        unint64_t v37 = v29;
      }
      else {
        unint64_t v37 = *v29;
      }
      memmove(v34, v37, v32);
LABEL_49:
      *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v32) = 95;
      unint64_t v38 = v6[9];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v38) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v39 = *a2 + 24 * v38;
      int v40 = *(char *)(v39 + 23);
      if (v40 >= 0) {
        uint64_t v41 = (const std::string::value_type *)v39;
      }
      else {
        uint64_t v41 = *(const std::string::value_type **)v39;
      }
      if (v40 >= 0) {
        std::string::size_type v42 = *(unsigned __int8 *)(v39 + 23);
      }
      else {
        std::string::size_type v42 = *(void *)(v39 + 8);
      }
      uint64_t v43 = std::string::append(&__dst, v41, v42);
      std::string::size_type v45 = v43->__r_.__value_.__r.__words[0];
      std::string::size_type v44 = v43->__r_.__value_.__l.__size_;
      uint64_t v55 = (unint64_t *)v29;
      v56[0] = v44;
      *(void *)((char *)v56 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
      char v46 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      uint64_t v47 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v29, (uint64_t)&std::piecewise_construct, (long long **)&v55);
      uint64_t v55 = &v54;
      std::string v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v47 + 40, &v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v55);
      std::string v49 = v48;
      if (*((char *)v48 + 47) < 0) {
        operator delete((void *)v48[3]);
      }
      uint64_t v50 = v56[0];
      v49[3] = v45;
      v49[4] = v50;
      *(void *)((char *)v49 + 39) = *(void *)((char *)v56 + 7);
      *((unsigned char *)v49 + 47) = v46;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      v29 += 3;
    }
  }
}

void sub_192255260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_192255274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_192255288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if ((a17 & 0x80000000) == 0)
  {
    std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::unordered_map<std::string,std::unordered_map<unsigned long,std::string>>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(uint64_t **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void *)i)
      {
        unint64_t v15 = *(void *)(i + 8);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(i + 16), a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = (char *)operator new(0x50uLL);
  v33[0] = (uint64_t)v16;
  v33[1] = a1 + 16;
  char v34 = 0;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v9;
  uint64_t v17 = (std::string *)(v16 + 16);
  int v18 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v34 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v26 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v26) {
      goto LABEL_33;
    }
    if (prime < *(void *)&v26)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v26 < 3uLL || (uint8x8_t v28 = (uint8x8_t)vcnt_s8(v26), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < *(void *)&v26) {
LABEL_33:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v4);
  if (v30)
  {
    *(void *)v33[0] = *v30;
    *uint64_t v30 = v33[0];
  }
  else
  {
    *(void *)v33[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v33[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v33[0])
    {
      unint64_t v31 = *(void *)(*(void *)v33[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v31 >= v10) {
          v31 %= v10;
        }
      }
      else
      {
        v31 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v31) = v33[0];
    }
  }
  uint64_t i = v33[0];
  v33[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100](v33, 0);
  return i;
}

void sub_19225567C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  void *i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t prime = v19;
    }
    else {
      size_t prime = v18;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_30;
    }
    if (prime < v8)
    {
      unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        unint64_t v21 = std::__next_prime(v21);
      }
      else
      {
        uint64_t v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2) {
          unint64_t v21 = v23;
        }
      }
      if (prime <= v21) {
        size_t prime = v21;
      }
      if (prime < v8) {
LABEL_30:
      }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    void *i = *v25;
LABEL_55:
    void *v25 = i;
    goto LABEL_56;
  }
  void *i = *v13;
  void *v13 = i;
  *(void *)(v24 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8) {
        v26 %= v8;
      }
    }
    else
    {
      v26 &= v8 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_55;
  }
LABEL_56:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_192255968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::pair<std::string,unsigned long>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    unint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint8x8_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *unint64_t v7 = *v11;
            uint64_t v12 = 8 * v13;
            void *v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            uint8x8_t v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          unint64_t v7 = v11;
          uint8x8_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<unsigned long,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (!*((unsigned char *)a1 + 16)) {
      goto LABEL_7;
    }
    uint64_t v3 = *(void ***)(v2 + 56);
    if (v3)
    {
      do
      {
        uint64_t v6 = (void **)*v3;
        if (*((char *)v3 + 47) < 0) {
          operator delete(v3[3]);
        }
        operator delete(v3);
        uint64_t v3 = v6;
      }
      while (v6);
    }
    unint64_t v4 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0;
    if (v4) {
      operator delete(v4);
    }
    if (*(char *)(v2 + 39) < 0)
    {
      operator delete(*(void **)(v2 + 16));
      unint64_t v5 = (void *)v2;
    }
    else
    {
LABEL_7:
      unint64_t v5 = (void *)v2;
    }
    operator delete(v5);
  }
}

uint64_t *Espresso::AOT::SegmentsLowerer::GetOwnerSegments@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = result[1] - *result;
  if (v3)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = v3 / 80;
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
    do
    {
      unint64_t v8 = (void *)(*v4 + 80 * v5);
      uint8x8_t v9 = (long long *)v8[3];
      unint64_t v10 = (long long *)v8[4];
      while (v9 != v10)
      {
        __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((void *)a2, (uint64_t)v9);
        if (!result)
        {
          unint64_t v13 = v9;
          __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v9, (uint64_t)&std::piecewise_construct, &v13);
          result[5] = v5;
        }
        uint8x8_t v9 = (long long *)((char *)v9 + 24);
      }
      uint8x8_t v11 = (long long *)v8[6];
      for (i = (long long *)v8[7]; v11 != i; uint8x8_t v11 = (long long *)((char *)v11 + 24))
      {
        unint64_t v13 = v11;
        __n128 result = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)v11, (uint64_t)&std::piecewise_construct, &v13);
        result[5] = v5;
      }
      ++v5;
    }
    while (v5 != v7);
  }
  return result;
}

void sub_192255CDC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192255CF0(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192255D04(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::AOT::SegmentsLowerer::TransferDef>::__push_back_slow_path<Espresso::AOT::SegmentsLowerer::TransferDef>(void **a1, uint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * (v3 >> 3) + 1;
  if (v4 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x38E38E38E38E38ELL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v7 = 72 * v5;
  unint64_t v8 = (char *)operator new(72 * v5);
  long long v9 = *(_OWORD *)(a2 + 16);
  unint64_t v10 = &v8[8 * (v3 >> 3)];
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  uint8x8_t v11 = &v8[v7];
  uint64_t v12 = &v8[v3];
  *((void *)v12 + 4) = *(void *)(a2 + 32);
  *((_OWORD *)v12 + 1) = v9;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v12 + 7) = v13;
  *((void *)v12 + 8) = v14;
  float v15 = v10 + 72;
  float v16 = (char *)*a1;
  BOOL v17 = (char *)a1[1];
  if (v17 == *a1)
  {
    *a1 = v10;
    a1[1] = v15;
    a1[2] = v11;
    if (!v17) {
      return v15;
    }
    goto LABEL_20;
  }
  do
  {
    *(_OWORD *)(v10 - 72) = *(_OWORD *)(v17 - 72);
    long long v18 = *(_OWORD *)(v17 - 56);
    *((void *)v10 - 5) = *((void *)v17 - 5);
    *(_OWORD *)(v10 - 56) = v18;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 7) = 0;
    long long v19 = *((_OWORD *)v17 - 2);
    *((void *)v10 - 2) = *((void *)v17 - 2);
    *((_OWORD *)v10 - 2) = v19;
    *((void *)v17 - 3) = 0;
    *((void *)v17 - 2) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v10 - 1) = *((void *)v17 - 1);
    v10 -= 72;
    v17 -= 72;
  }
  while (v17 != v16);
  float v20 = (char *)*a1;
  BOOL v17 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v15;
  a1[2] = v11;
  if (v17 != v20)
  {
    while (1)
    {
      if (*(v17 - 9) < 0)
      {
        operator delete(*((void **)v17 - 4));
        if (*(v17 - 33) < 0) {
LABEL_17:
        }
          operator delete(*((void **)v17 - 7));
      }
      else if (*(v17 - 33) < 0)
      {
        goto LABEL_17;
      }
      v17 -= 72;
      if (v17 == v20)
      {
        BOOL v17 = v20;
        break;
      }
    }
  }
  if (v17) {
LABEL_20:
  }
    operator delete(v17);
  return v15;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
}

void sub_192255F44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso16ANERuntimeEngine7contextC2ERKNSt3__110shared_ptrINS_15abstract_engineEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v5 = [v2 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v3 = [v5 objectForKeyedSubscript:@"espresso.ane_surface_alias"];

  if (v3)
  {
    unint64_t v4 = [v5 objectForKeyedSubscript:@"espresso.ane_surface_alias"];
    *(_DWORD *)(v1 + 144) = [v4 intValue];
  }
}

void sub_192256008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint8x8_t v11 = v10;

  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_split_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v16 = a4;
  char v12 = 0;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0x200000002;
  int v15 = 0;
  Espresso::SerDes::params_io<Espresso::split_params>(a2, (uint64_t)&v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "split");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_192256124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::split_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "cut");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 12));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "n_outputs");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "legacy_cut_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 16));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)(a2 + 4));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 8));
    goto LABEL_55;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "cut");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 12);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "n_outputs");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "legacy_cut_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 16);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)(a2 + 4) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 8);
  uint64_t v5 = a2 + 8;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_55:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1922565B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7(uint64_t *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  if (a3 == 1)
  {
    char v8 = operator new(0x178uLL);
    v8[1] = 0;
    v8[2] = 0;
    *char v8 = &unk_1EE381C70;
    uint64_t v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
    void v8[3] = &unk_1EE32B4B0;
    long long v10 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v8 + 22) = v10;
    v8[46] = *(void *)(a2 + 64);
    long long v11 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 20) = v11;
    *(void *)&long long v7 = v9;
    *((void *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v12, a1, (__n128 *)a2);
    long long v7 = v12;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_192256700(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso14DummyMPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(uint64_t *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>(uint64_t *a1, uint64_t *a2, __n128 *a3)
{
  int v6 = (__n128 *)operator new(0x178uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&unk_1EE386BD8;
  uint64_t v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&unk_1EE3505A0;
  __n128 v8 = a3[3];
  v6[21] = a3[2];
  v6[22] = v8;
  v6[23].n128_u64[0] = a3[4].n128_u64[0];
  __n128 result = a3[1];
  v6[19] = *a3;
  v6[20] = result;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1922567EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_softmax_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      __n128 v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      long long v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      long long v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        long long v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    uint64_t v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      int v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        int v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        long long v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          long long v19 = (std::__shared_weak_count *)*(v15 - 2);
          char v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          unint64_t v21 = 0;
          uint8x8_t v22 = 0;
          uint64_t v23 = 0;
          unint64_t v31 = (void **)&v21;
          char v32 = 0;
          unint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint8x8_t v22 = v21;
          uint64_t v23 = v21 + 9;
          uint8x8_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          unint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          unint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          unint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_192256B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context17transform_softmaxEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v3 && v3 != 0) {
    return;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2->i64[0] + 320))(a2->i64[0]);
  if (!*(_DWORD *)(v6 + 20)) {
    return;
  }
  if ((*(unsigned char *)(v6 + 26) | *(unsigned char *)(v6 + 24))) {
    return;
  }
  uint64_t v7 = *(void *)(a1 + 40) + 96;
  v36[0] = a2[3].i32[2];
  __n128 v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v36[0], v36);
  if (v8[4] - v8[3] != 24) {
    return;
  }
  uint64_t v9 = *(void *)(a1 + 40) + 56;
  v36[0] = a2[3].i32[2];
  long long v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v36[0], v36);
  if (v10[4] - v10[3] != 24) {
    return;
  }
  __asm { FMOV            V0.2S, #1.0 }
  *(unint64_t *)((char *)v36 + 4) = _D0;
  *(unint64_t *)((char *)&v36[1] + 4) = 0;
  *(unint64_t *)((char *)&v36[3] + 4) = 0;
  *(unint64_t *)((char *)&v36[2] + 4) = 0;
  LODWORD(v36[0]) = 3;
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(v15 + 16);
  int v16 = *(std::__shared_weak_count **)(v15 + 24);
  uint64_t v34 = v17;
  uint64_t v35 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_engine_factory::shared(&v32);
  uint64_t v18 = v32;
  std::string::basic_string[abi:ne180100]<0>(&__p, "activation");
  LODWORD(v28) = (***(uint64_t (****)(void))(v34 + 8))(*(void *)(v34 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v18, (uint64_t)&v34, (uint64_t)&__p, (uint64_t)v36, (int *)&v28);
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v19)
    {
      std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_18;
    }
  }
  else
  {
    long long v19 = 0;
  }
  std::string::size_type size = 0;
LABEL_18:
  if (lpsrc.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 16 * a2[3].i32[2]);
  if (*(char *)(v21 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v21 + 16), *(void *)(v21 + 24));
  }
  else {
    std::string __p = *(std::string *)(v21 + 16);
  }
  Espresso::single_match_state<Espresso::generic_softmax_kernel>::remove_layer(a2);
  v30[0] = v19;
  v30[1] = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "activation");
  uint64_t v22 = *(void *)(a1 + 40) + 56;
  unint64_t v23 = a2[3].i32[2];
  unint64_t v32 = v23;
  long long v24 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22, v23, &v32);
  uint64_t v25 = *(void *)(a1 + 40) + 96;
  unint64_t v26 = a2[3].i32[2];
  unint64_t v28 = v26;
  unint64_t v27 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v25, v26, &v28);
  Espresso::single_match_state<Espresso::generic_softmax_kernel>::add_kernel(a2, v30, &lpsrc, &__p, v24 + 3, v27 + 3);
  if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(lpsrc.__r_.__value_.__l.__data_);
  }
  if (size) {
    nitro::nitro_function::nitro_function(size);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    nitro::nitro_function::nitro_function(size);
  }
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_192256F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::softmax_params,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

uint64_t Espresso::convert_supported_4cc_string_to_uint(uint64_t *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    uint64_t v3 = a1;
    switch(*((unsigned char *)a1 + 23))
    {
      case 6:
        if (*(_DWORD *)a1 != 1195520563 || *((_WORD *)a1 + 2) != 16722) {
          goto LABEL_165;
        }
        return 1111970369;
      case 0xA:
        goto LABEL_41;
      case 0xD:
        if (*a1 == 0x6F706D6F43656E4FLL && *(uint64_t *)((char *)a1 + 5) == 0x38746E656E6F706DLL) {
          return 1278226488;
        }
        if (*a1 != 0x6F706D6F436F7754 || *(uint64_t *)((char *)a1 + 5) != 0x38746E656E6F706DLL) {
          goto LABEL_165;
        }
        return 843264056;
      case 0x10:
        goto LABEL_35;
      case 0x11:
        goto LABEL_158;
      case 0x12:
        if (*a1 == 0x6F706D6F43656E4FLL && a1[1] == 0x61483631746E656ELL && *((_WORD *)a1 + 8) == 26220) {
          goto LABEL_152;
        }
        if (*a1 != 0x6F706D6F436F7754 || a1[1] != 0x61483631746E656ELL || *((_WORD *)a1 + 8) != 26220) {
          goto LABEL_165;
        }
        goto LABEL_133;
      case 0x13:
        if (*a1 != 0x6F706D6F43656E4FLL
          || a1[1] != 0x6C463233746E656ELL
          || *(uint64_t *)((char *)a1 + 11) != 0x74616F6C46323374)
        {
          goto LABEL_165;
        }
        goto LABEL_142;
      case 0x16:
        goto LABEL_82;
      default:
        goto LABEL_165;
    }
  }
  uint64_t v5 = a1[1];
  if (v5 > 17)
  {
    if (v5 == 18)
    {
      uint64_t v17 = (uint64_t *)*a1;
      if (*(void *)*a1 == 0x6F706D6F43656E4FLL
        && *(void *)(*a1 + 8) == 0x61483631746E656ELL
        && *(_WORD *)(*a1 + 16) == 26220)
      {
LABEL_152:
        int v38 = 1278226488;
      }
      else
      {
        uint64_t v20 = *v17;
        uint64_t v21 = v17[1];
        int v22 = *((unsigned __int16 *)v17 + 8);
        if (v20 != 0x6F706D6F436F7754 || v21 != 0x61483631746E656ELL || v22 != 26220) {
          goto LABEL_67;
        }
LABEL_133:
        int v38 = 843264056;
      }
      return (v38 + 48);
    }
    if (v5 == 19)
    {
      if (*(void *)*a1 == 0x6F706D6F43656E4FLL
        && *(void *)(*a1 + 8) == 0x6C463233746E656ELL
        && *(void *)(*a1 + 11) == 0x74616F6C46323374)
      {
LABEL_142:
        int v41 = 1278226488;
        return (v41 + 46);
      }
      if ((v2 & 0x80) == 0)
      {
        if (*((unsigned __int8 *)a1 + 23) > 0x10u) {
          goto LABEL_80;
        }
        if (v2 != 10)
        {
          if (v2 != 16) {
            goto LABEL_165;
          }
LABEL_35:
          if (*a1 != 0x7469726170736944 || a1[1] != 0x363174616F6C4679) {
            goto LABEL_165;
          }
          return 1751411059;
        }
LABEL_41:
        if (*a1 != 0x6148414247523436 || *((_WORD *)a1 + 4) != 26220)
        {
LABEL_145:
          if (*a1 != 0x474232335F584741 || *((_WORD *)a1 + 4) != 16722) {
            goto LABEL_165;
          }
          return 641877825;
        }
        return 1380411457;
      }
    }
  }
  else if (v5 == 6)
  {
    if (*(_DWORD *)*a1 == 1195520563 && *(_WORD *)(*a1 + 4) == 16722) {
      return 1111970369;
    }
  }
  else if (v5 == 13)
  {
    uint64_t v6 = (uint64_t *)*a1;
    if (*(void *)*a1 == 0x6F706D6F43656E4FLL && *(void *)(*a1 + 5) == 0x38746E656E6F706DLL) {
      return 1278226488;
    }
    uint64_t v8 = *v6;
    uint64_t v9 = *(uint64_t *)((char *)v6 + 5);
    if (v8 == 0x6F706D6F436F7754 && v9 == 0x38746E656E6F706DLL) {
      return 843264056;
    }
  }
LABEL_67:
  if (a1[1] != 10) {
    goto LABEL_73;
  }
  if (*(void *)*a1 == 0x6148414247523436 && *(_WORD *)(*a1 + 8) == 26220) {
    return 1380411457;
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_79;
  }
LABEL_73:
  if (a1[1] != 16) {
    goto LABEL_91;
  }
  if (*(void *)*a1 == 0x7469726170736944 && *(void *)(*a1 + 8) == 0x363174616F6C4679) {
    return 1751411059;
  }
  if ((v2 & 0x80) != 0)
  {
LABEL_91:
    if (a1[1] == 10)
    {
      if (*(void *)*a1 == 0x474232335F584741 && *(_WORD *)(*a1 + 8) == 16722) {
        return 641877825;
      }
      if ((v2 & 0x80) == 0) {
        goto LABEL_165;
      }
    }
    if (a1[1] != 22) {
      goto LABEL_156;
    }
    if (*(void *)*a1 == 0x43656E4F5F584741
      && *(void *)(*a1 + 8) == 0x746E656E6F706D6FLL
      && *(void *)(*a1 + 14) == 0x666C61483631746ELL)
    {
      return 642527336;
    }
    if ((v2 & 0x80) != 0)
    {
LABEL_156:
      if (a1[1] != 17) {
        goto LABEL_165;
      }
      uint64_t v3 = (uint64_t *)*a1;
    }
    else
    {
      uint64_t v3 = a1;
      if (v2 != 17) {
        goto LABEL_165;
      }
    }
LABEL_158:
    uint64_t v43 = *v3;
    uint64_t v44 = v3[1];
    int v45 = *((unsigned __int8 *)v3 + 16);
    if (v43 == 0x43656E4F5F584741 && v44 == 0x746E656E6F706D6FLL && v45 == 56) {
      return 642527288;
    }
    goto LABEL_165;
  }
LABEL_79:
  if (v2 == 10) {
    goto LABEL_145;
  }
LABEL_80:
  uint64_t v3 = a1;
  if (v2 == 17) {
    goto LABEL_158;
  }
  if (v2 != 22) {
    goto LABEL_165;
  }
LABEL_82:
  if (*a1 == 0x43656E4F5F584741
    && a1[1] == 0x746E656E6F706D6FLL
    && *(uint64_t *)((char *)a1 + 14) == 0x666C61483631746ELL)
  {
    return 642527336;
  }
LABEL_165:
  uint64_t v16 = 706956392;
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "MultiSlice_Lossless_OneComponent16Half"))
  {
    return 707153000;
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "MultiSlice_UncompressedTiled_OneComponent16Half"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_OneComponent16Half"))
    {
      return 759967848;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_OneComponent16Half"))
    {
      return 793522280;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_OneComponent16Half"))
    {
      return 2085367912;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "AGX_64RGBAHalf")) {
      return 642934849;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_64RGBAHalf")) {
      return 760375361;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_64RGBAHalf")) {
      return 793929793;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_64RGBAHalf")) {
      return 2085775425;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy75_32BGRA")) {
      return 759318337;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy62_32BGRA")) {
      return 792872769;
    }
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossy50_32BGRA")) {
      return 2084718401;
    }
    uint64_t v16 = 875704422;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr8BiPlanarVideoRange"))
    {
      return 875704438;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr8BiPlanarFullRange"))
    {
      uint64_t v16 = 2016686640;
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10BiPlanarVideoRange"))
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10BiPlanarFullRange"))
        {
          return (v16 + 3276800);
        }
        uint64_t v16 = 1882468912;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarVideoRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarFullRange"))
        {
          return (v16 + 3276800);
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "420YpCbCr10PackedBiPlanarWideRange"))
        {
          return 1886859824;
        }
        uint64_t v16 = 875836518;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "444YpCbCr8BiPlanarFullRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "444YpCbCr8BiPlanarVideoRange"))
        {
          return 875836534;
        }
        uint64_t v16 = 641230384;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossless_420YpCbCr8BiPlanarFullRange"))
        {
          return v16;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "Lossless_420YpCbCr8BiPlanarVideoRange"))
        {
          return 641234480;
        }
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "TwoComponent32Float"))
        {
          if (*((char *)a1 + 23) >= 0) {
            std::string v49 = a1;
          }
          else {
            std::string v49 = (void *)*a1;
          }
          uint64_t v50 = v49;
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unsupported pixel format %s", &v50);
        }
        int v41 = 843264056;
        return (v41 + 46);
      }
    }
  }
  return v16;
}

void Espresso::inner_product_kernel_cpu::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t *a6)
{
  if (a6)
  {
    uint64_t v11 = *a6;
    if (*a6)
    {
      long long v12 = (std::__shared_weak_count *)a6[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v12 = 0;
LABEL_7:
  Espresso::generic_inner_product_kernel::__set_weight_raw_blob(a1, a2, (unsigned __int8 *)a3, a4, a5, a6);
  int v13 = *(unsigned __int8 *)(a3 + 23);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    switch(*(unsigned char *)(a3 + 23))
    {
      case 1:
        if (*(unsigned char *)a3 != 81) {
          goto LABEL_144;
        }
        goto LABEL_13;
      case 5:
        goto LABEL_125;
      case 6:
        if (*(_DWORD *)a3 == 1647861591 && *(_WORD *)(a3 + 4) == 29801) {
          goto LABEL_78;
        }
        if (*(_DWORD *)a3 == 1852399447 && *(_WORD *)(a3 + 4) == 14452) {
          goto LABEL_78;
        }
        goto LABEL_29;
      case 7:
        if (*(_DWORD *)a3 == 1769299799 && *(_DWORD *)(a3 + 3) == 947154537) {
          goto LABEL_78;
        }
        if (*(_DWORD *)a3 != 1852399447 || *(_DWORD *)(a3 + 3) != 909210734) {
          goto LABEL_144;
        }
        goto LABEL_54;
      case 8:
        if (*(void *)a3 == 0x38746E695F745F57) {
          goto LABEL_87;
        }
        if (*(void *)a3 == 0x745F656C61637351) {
          goto LABEL_132;
        }
        if ((v13 & 0x80) != 0) {
          goto LABEL_96;
        }
        if (v13 == 5) {
          goto LABEL_125;
        }
        if (v13 != 6) {
          goto LABEL_104;
        }
LABEL_29:
        BOOL v19 = *(_DWORD *)a3 == 1633907537 && *(_WORD *)(a3 + 4) == 25964;
        uint64_t v20 = a3;
        if (!v19) {
          goto LABEL_140;
        }
        goto LABEL_136;
      case 9:
        goto LABEL_105;
      default:
        goto LABEL_144;
    }
  }
  switch(*(void *)(a3 + 8))
  {
    case 1:
      if (**(unsigned char **)a3 == 81)
      {
LABEL_13:
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v324, 2, 1, 1, 1);
        std::string::size_type v14 = v324.__r_.__value_.__r.__words[0];
        uint64_t v15 = *(std::__shared_weak_count **)(a1 + 616);
        *(_OWORD *)(a1 + 608) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
        if (v15)
        {
          nitro::nitro_function::nitro_function(v15);
          std::string::size_type v16 = *(void *)(a1 + 608);
        }
        else
        {
          std::string::size_type v16 = v14;
        }
        if (a5 != 4 * *(int *)(v16 + 8))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v315, a5);
          uint8x8_t v112 = std::string::insert(&v315, 0, "Unexpected size s=");
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v316.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          long long v114 = std::string::append(&v316, "/blob=");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v317.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v314, 4 * *(int *)(*(void *)(a1 + 608) + 8));
          if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v116 = &v314;
          }
          else {
            uint64_t v116 = (std::string *)v314.__r_.__value_.__r.__words[0];
          }
          if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v314.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v314.__r_.__value_.__l.__size_;
          }
          std::string::size_type v118 = std::string::append(&v317, (const std::string::value_type *)v116, size);
          long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
          v320.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v119;
          v118->__r_.__value_.__l.__size_ = 0;
          v118->__r_.__value_.__r.__words[2] = 0;
          v118->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
          if ((v313 & 0x80u) == 0) {
            uint64_t v120 = (const std::string::value_type *)&v311;
          }
          else {
            uint64_t v120 = v311;
          }
          if ((v313 & 0x80u) == 0) {
            std::string::size_type v121 = v313;
          }
          else {
            std::string::size_type v121 = v312;
          }
          long long v122 = std::string::append(&v320, v120, v121);
          long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v321.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v124 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
          long long v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
          v322.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v125;
          v124->__r_.__value_.__l.__size_ = 0;
          v124->__r_.__value_.__r.__words[2] = 0;
          v124->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v308, ":");
          if ((v310 & 0x80u) == 0) {
            long long v126 = (const std::string::value_type *)&v308;
          }
          else {
            long long v126 = v308;
          }
          if ((v310 & 0x80u) == 0) {
            std::string::size_type v127 = v310;
          }
          else {
            std::string::size_type v127 = v309;
          }
          uint64_t v128 = std::string::append(&v322, v126, v127);
          long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
          v323.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v129;
          v128->__r_.__value_.__l.__size_ = 0;
          v128->__r_.__value_.__r.__words[2] = 0;
          v128->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v307, 726);
          if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v130 = &v307;
          }
          else {
            long long v130 = (std::string *)v307.__r_.__value_.__r.__words[0];
          }
          if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v131 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v131 = v307.__r_.__value_.__l.__size_;
          }
          char v132 = std::string::append(&v323, (const std::string::value_type *)v130, v131);
          long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
          v324.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v133;
          v132->__r_.__value_.__l.__size_ = 0;
          v132->__r_.__value_.__r.__words[2] = 0;
          v132->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &v324);
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        goto LABEL_370;
      }
      if ((v13 & 0x80) == 0) {
        goto LABEL_144;
      }
      goto LABEL_94;
    case 6:
      unint64_t v31 = *(int **)a3;
      if (**(_DWORD **)a3 != 1647861591 || *(_WORD *)(*(void *)a3 + 4) != 29801)
      {
        int v33 = *v31;
        int v34 = *((unsigned __int16 *)v31 + 2);
        if (v33 != 1852399447 || v34 != 14452) {
          goto LABEL_94;
        }
      }
      goto LABEL_78;
    case 7:
      if (**(_DWORD **)a3 == 1769299799 && *(_DWORD *)(*(void *)a3 + 3) == 947154537)
      {
LABEL_78:
        uint64_t v36 = *(std::__shared_weak_count **)(a1 + 568);
        *(_OWORD *)(a1 + 560) = 0u;
        if (v36) {
          nitro::nitro_function::nitro_function(v36);
        }
        v319[0] = v11;
        v319[1] = (uint64_t)v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v319, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
        uint64_t v37 = *(std::__shared_weak_count **)(a1 + 584);
        *(_OWORD *)(a1 + 576) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
        if (!v37) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
      if (**(_DWORD **)a3 != 1852399447 || *(_DWORD *)(*(void *)a3 + 3) != 909210734)
      {
LABEL_94:
        if (*(void *)(a3 + 8) == 8 && **(void **)a3 == 0x745F656C61637351)
        {
LABEL_132:
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 308), 1, 1, 1);
          std::string::size_type v46 = v324.__r_.__value_.__r.__words[0];
          uint64_t v47 = *(std::__shared_weak_count **)(a1 + 632);
          *(_OWORD *)(a1 + 624) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
          if (v47)
          {
            nitro::nitro_function::nitro_function(v47);
            std::string::size_type v16 = *(void *)(a1 + 624);
          }
          else
          {
            std::string::size_type v16 = v46;
          }
          if (a5 != 4 * *(int *)(v16 + 8))
          {
            uint64_t v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v315, a5);
            int v189 = std::string::insert(&v315, 0, "Unexpected size s=");
            long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
            v316.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v190;
            v189->__r_.__value_.__l.__size_ = 0;
            v189->__r_.__value_.__r.__words[2] = 0;
            v189->__r_.__value_.__r.__words[0] = 0;
            long long v191 = std::string::append(&v316, "/blob=");
            long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
            v317.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v192;
            v191->__r_.__value_.__l.__size_ = 0;
            v191->__r_.__value_.__r.__words[2] = 0;
            v191->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v314, 4 * *(int *)(*(void *)(a1 + 624) + 8));
            if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v193 = &v314;
            }
            else {
              __int16 v193 = (std::string *)v314.__r_.__value_.__r.__words[0];
            }
            if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v194 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v194 = v314.__r_.__value_.__l.__size_;
            }
            uint64_t v195 = std::string::append(&v317, (const std::string::value_type *)v193, v194);
            long long v196 = *(_OWORD *)&v195->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v195->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v196;
            v195->__r_.__value_.__l.__size_ = 0;
            v195->__r_.__value_.__r.__words[2] = 0;
            v195->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
            if ((v313 & 0x80u) == 0) {
              std::string::size_type v197 = (const std::string::value_type *)&v311;
            }
            else {
              std::string::size_type v197 = v311;
            }
            if ((v313 & 0x80u) == 0) {
              std::string::size_type v198 = v313;
            }
            else {
              std::string::size_type v198 = v312;
            }
            char v199 = std::string::append(&v320, v197, v198);
            long long v200 = *(_OWORD *)&v199->__r_.__value_.__l.__data_;
            v321.__r_.__value_.__r.__words[2] = v199->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v200;
            v199->__r_.__value_.__l.__size_ = 0;
            v199->__r_.__value_.__r.__words[2] = 0;
            v199->__r_.__value_.__r.__words[0] = 0;
            uint64_t v201 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
            long long v202 = *(_OWORD *)&v201->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v201->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v202;
            v201->__r_.__value_.__l.__size_ = 0;
            v201->__r_.__value_.__r.__words[2] = 0;
            v201->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v308, ":");
            if ((v310 & 0x80u) == 0) {
              int v203 = (const std::string::value_type *)&v308;
            }
            else {
              int v203 = v308;
            }
            if ((v310 & 0x80u) == 0) {
              std::string::size_type v204 = v310;
            }
            else {
              std::string::size_type v204 = v309;
            }
            int v205 = std::string::append(&v322, v203, v204);
            long long v206 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
            v323.__r_.__value_.__r.__words[2] = v205->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v206;
            v205->__r_.__value_.__l.__size_ = 0;
            v205->__r_.__value_.__r.__words[2] = 0;
            v205->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v307, 729);
            if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v207 = &v307;
            }
            else {
              uint64_t v207 = (std::string *)v307.__r_.__value_.__r.__words[0];
            }
            if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v208 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v208 = v307.__r_.__value_.__l.__size_;
            }
            uint64_t v209 = std::string::append(&v323, (const std::string::value_type *)v207, v208);
            long long v210 = *(_OWORD *)&v209->__r_.__value_.__l.__data_;
            v324.__r_.__value_.__r.__words[2] = v209->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v210;
            v209->__r_.__value_.__l.__size_ = 0;
            v209->__r_.__value_.__r.__words[2] = 0;
            v209->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v188, &v324);
            __cxa_throw(v188, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          goto LABEL_370;
        }
LABEL_96:
        if (*(void *)(a3 + 8) == 6)
        {
          if (**(_DWORD **)a3 == 1633907537 && *(_WORD *)(*(void *)a3 + 4) == 25964)
          {
LABEL_136:
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 304), 1, 1, 1);
            std::string::size_type v50 = v324.__r_.__value_.__r.__words[0];
            uint64_t v51 = *(std::__shared_weak_count **)(a1 + 648);
            *(_OWORD *)(a1 + 640) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
            if (v51)
            {
              nitro::nitro_function::nitro_function(v51);
              std::string::size_type v16 = *(void *)(a1 + 640);
            }
            else
            {
              std::string::size_type v16 = v50;
            }
            if (a5 != 4 * *(int *)(v16 + 8))
            {
              v270 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v315, a5);
              uint64_t v271 = std::string::insert(&v315, 0, "Unexpected size s=");
              long long v272 = *(_OWORD *)&v271->__r_.__value_.__l.__data_;
              v316.__r_.__value_.__r.__words[2] = v271->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v272;
              v271->__r_.__value_.__l.__size_ = 0;
              v271->__r_.__value_.__r.__words[2] = 0;
              v271->__r_.__value_.__r.__words[0] = 0;
              std::string v273 = std::string::append(&v316, "/blob=");
              long long v274 = *(_OWORD *)&v273->__r_.__value_.__l.__data_;
              v317.__r_.__value_.__r.__words[2] = v273->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v274;
              v273->__r_.__value_.__l.__size_ = 0;
              v273->__r_.__value_.__r.__words[2] = 0;
              v273->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v314, 4 * *(int *)(*(void *)(a1 + 640) + 8));
              if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v275 = &v314;
              }
              else {
                uint64_t v275 = (std::string *)v314.__r_.__value_.__r.__words[0];
              }
              if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v276 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v276 = v314.__r_.__value_.__l.__size_;
              }
              std::string v277 = std::string::append(&v317, (const std::string::value_type *)v275, v276);
              long long v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
              v320.__r_.__value_.__r.__words[2] = v277->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v278;
              v277->__r_.__value_.__l.__size_ = 0;
              v277->__r_.__value_.__r.__words[2] = 0;
              v277->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
              if ((v313 & 0x80u) == 0) {
                uint64_t v279 = (const std::string::value_type *)&v311;
              }
              else {
                uint64_t v279 = v311;
              }
              if ((v313 & 0x80u) == 0) {
                std::string::size_type v280 = v313;
              }
              else {
                std::string::size_type v280 = v312;
              }
              uint64_t v281 = std::string::append(&v320, v279, v280);
              long long v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
              v321.__r_.__value_.__r.__words[2] = v281->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v282;
              v281->__r_.__value_.__l.__size_ = 0;
              v281->__r_.__value_.__r.__words[2] = 0;
              v281->__r_.__value_.__r.__words[0] = 0;
              std::string v283 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
              long long v284 = *(_OWORD *)&v283->__r_.__value_.__l.__data_;
              v322.__r_.__value_.__r.__words[2] = v283->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v284;
              v283->__r_.__value_.__l.__size_ = 0;
              v283->__r_.__value_.__r.__words[2] = 0;
              v283->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v308, ":");
              if ((v310 & 0x80u) == 0) {
                long long v285 = (const std::string::value_type *)&v308;
              }
              else {
                long long v285 = v308;
              }
              if ((v310 & 0x80u) == 0) {
                std::string::size_type v286 = v310;
              }
              else {
                std::string::size_type v286 = v309;
              }
              std::string v287 = std::string::append(&v322, v285, v286);
              long long v288 = *(_OWORD *)&v287->__r_.__value_.__l.__data_;
              v323.__r_.__value_.__r.__words[2] = v287->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v288;
              v287->__r_.__value_.__l.__size_ = 0;
              v287->__r_.__value_.__r.__words[2] = 0;
              v287->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v307, 732);
              if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v289 = &v307;
              }
              else {
                v289 = (std::string *)v307.__r_.__value_.__r.__words[0];
              }
              if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v290 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v290 = v307.__r_.__value_.__l.__size_;
              }
              v291 = std::string::append(&v323, (const std::string::value_type *)v289, v290);
              long long v292 = *(_OWORD *)&v291->__r_.__value_.__l.__data_;
              v324.__r_.__value_.__r.__words[2] = v291->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v292;
              v291->__r_.__value_.__l.__size_ = 0;
              v291->__r_.__value_.__r.__words[2] = 0;
              v291->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v270, &v324);
              __cxa_throw(v270, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_370;
          }
          if ((v13 & 0x80) == 0)
          {
            if (v13 != 5)
            {
              uint64_t v20 = a3;
              if (v13 != 6)
              {
LABEL_104:
                if (v13 != 9) {
                  goto LABEL_144;
                }
LABEL_105:
                if (*(void *)a3 != 0x6D75735F776F7251 || *(unsigned char *)(a3 + 8) != 115)
                {
LABEL_144:
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "tree_b")&& *(void *)(a1 + 928))
                  {
                    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 404), 1, 1, 1);
                    uint64_t v55 = *(void *)(a1 + 928);
                    char v56 = *(std::__shared_weak_count **)(v55 + 8);
                    *(_OWORD *)uint64_t v55 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (v56) {
                      nitro::nitro_function::nitro_function(v56);
                    }
                    uint64_t v57 = 0;
                    uint64_t v58 = *(void *)(*(void *)(a1 + 928) + 16);
                    uint64_t v59 = *(int *)(v58 + 8);
                    do
                    {
                      v59 *= *(int *)(v58 + 12 + v57);
                      v57 += 4;
                    }
                    while (v57 != 12);
                    if (a5 != 4 * v59)
                    {
                      uint64_t v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::to_string(&v315, a5);
                      float v244 = std::string::insert(&v315, 0, "Unexpected size s=");
                      long long v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
                      v316.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v245;
                      v244->__r_.__value_.__l.__size_ = 0;
                      v244->__r_.__value_.__r.__words[2] = 0;
                      v244->__r_.__value_.__r.__words[0] = 0;
                      float v246 = std::string::append(&v316, "/blob=");
                      uint64_t v247 = 0;
                      long long v248 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
                      v317.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v248;
                      v246->__r_.__value_.__l.__size_ = 0;
                      v246->__r_.__value_.__r.__words[2] = 0;
                      v246->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v249 = *(void *)(*(void *)(a1 + 928) + 16);
                      uint64_t v250 = *(int *)(v249 + 8);
                      uint64_t v251 = v249 + 12;
                      do
                      {
                        v250 *= *(int *)(v251 + v247);
                        v247 += 4;
                      }
                      while (v247 != 12);
                      std::to_string(&v314, 4 * v250);
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v252 = &v314;
                      }
                      else {
                        uint64_t v252 = (std::string *)v314.__r_.__value_.__r.__words[0];
                      }
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v253 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v253 = v314.__r_.__value_.__l.__size_;
                      }
                      std::string v254 = std::string::append(&v317, (const std::string::value_type *)v252, v253);
                      long long v255 = *(_OWORD *)&v254->__r_.__value_.__l.__data_;
                      v320.__r_.__value_.__r.__words[2] = v254->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v255;
                      v254->__r_.__value_.__l.__size_ = 0;
                      v254->__r_.__value_.__r.__words[2] = 0;
                      v254->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
                      if ((v313 & 0x80u) == 0) {
                        uint64_t v256 = (const std::string::value_type *)&v311;
                      }
                      else {
                        uint64_t v256 = v311;
                      }
                      if ((v313 & 0x80u) == 0) {
                        std::string::size_type v257 = v313;
                      }
                      else {
                        std::string::size_type v257 = v312;
                      }
                      uint64_t v258 = std::string::append(&v320, v256, v257);
                      long long v259 = *(_OWORD *)&v258->__r_.__value_.__l.__data_;
                      v321.__r_.__value_.__r.__words[2] = v258->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v259;
                      v258->__r_.__value_.__l.__size_ = 0;
                      v258->__r_.__value_.__r.__words[2] = 0;
                      v258->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v260 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
                      long long v261 = *(_OWORD *)&v260->__r_.__value_.__l.__data_;
                      v322.__r_.__value_.__r.__words[2] = v260->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v261;
                      v260->__r_.__value_.__l.__size_ = 0;
                      v260->__r_.__value_.__r.__words[2] = 0;
                      v260->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v308, ":");
                      if ((v310 & 0x80u) == 0) {
                        v262 = (const std::string::value_type *)&v308;
                      }
                      else {
                        v262 = v308;
                      }
                      if ((v310 & 0x80u) == 0) {
                        std::string::size_type v263 = v310;
                      }
                      else {
                        std::string::size_type v263 = v309;
                      }
                      uint64_t v264 = std::string::append(&v322, v262, v263);
                      long long v265 = *(_OWORD *)&v264->__r_.__value_.__l.__data_;
                      v323.__r_.__value_.__r.__words[2] = v264->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v265;
                      v264->__r_.__value_.__l.__size_ = 0;
                      v264->__r_.__value_.__r.__words[2] = 0;
                      v264->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v307, 748);
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v266 = &v307;
                      }
                      else {
                        uint64_t v266 = (std::string *)v307.__r_.__value_.__r.__words[0];
                      }
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v267 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v267 = v307.__r_.__value_.__l.__size_;
                      }
                      unint64_t v268 = std::string::append(&v323, (const std::string::value_type *)v266, v267);
                      long long v269 = *(_OWORD *)&v268->__r_.__value_.__l.__data_;
                      v324.__r_.__value_.__r.__words[2] = v268->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v269;
                      v268->__r_.__value_.__l.__size_ = 0;
                      v268->__r_.__value_.__r.__words[2] = 0;
                      v268->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v243, &v324);
                      __cxa_throw(v243, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
LABEL_151:
                    uint64_t v60 = *(void **)(v58 + 24);
LABEL_371:
                    memcpy(v60, a4, a5);
                    goto LABEL_372;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "tree_map_to_index")&& *(void *)(a1 + 928))
                  {
                    Espresso::blob<int,1>::make(&v324, *(_DWORD *)(a1 + 304));
                    uint64_t v61 = *(void *)(a1 + 928);
                    unsigned int v62 = *(std::__shared_weak_count **)(v61 + 40);
                    *(_OWORD *)(v61 + 32) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (v62) {
                      nitro::nitro_function::nitro_function(v62);
                    }
                    std::string::size_type v16 = *(void *)(*(void *)(a1 + 928) + 32);
                    if (a5 != 4 * *(int *)(v16 + 8))
                    {
                      long long v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::to_string(&v315, a5);
                      long long v64 = std::string::insert(&v315, 0, "Unexpected size s=");
                      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                      v316.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v65;
                      v64->__r_.__value_.__l.__size_ = 0;
                      v64->__r_.__value_.__r.__words[2] = 0;
                      v64->__r_.__value_.__r.__words[0] = 0;
                      uint64_t v66 = std::string::append(&v316, "/blob=");
                      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
                      v317.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v67;
                      v66->__r_.__value_.__l.__size_ = 0;
                      v66->__r_.__value_.__r.__words[2] = 0;
                      v66->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v314, 4 * *(int *)(*(void *)(*(void *)(a1 + 928) + 32) + 8));
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unint64_t v68 = &v314;
                      }
                      else {
                        unint64_t v68 = (std::string *)v314.__r_.__value_.__r.__words[0];
                      }
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v69 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v69 = v314.__r_.__value_.__l.__size_;
                      }
                      uint64_t v70 = std::string::append(&v317, (const std::string::value_type *)v68, v69);
                      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                      v320.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v71;
                      v70->__r_.__value_.__l.__size_ = 0;
                      v70->__r_.__value_.__r.__words[2] = 0;
                      v70->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
                      if ((v313 & 0x80u) == 0) {
                        unint64_t v72 = (const std::string::value_type *)&v311;
                      }
                      else {
                        unint64_t v72 = v311;
                      }
                      if ((v313 & 0x80u) == 0) {
                        std::string::size_type v73 = v313;
                      }
                      else {
                        std::string::size_type v73 = v312;
                      }
                      int8x8_t v74 = std::string::append(&v320, v72, v73);
                      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                      v321.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v75;
                      v74->__r_.__value_.__l.__size_ = 0;
                      v74->__r_.__value_.__r.__words[2] = 0;
                      v74->__r_.__value_.__r.__words[0] = 0;
                      unint64_t v76 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
                      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
                      v322.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v77;
                      v76->__r_.__value_.__l.__size_ = 0;
                      v76->__r_.__value_.__r.__words[2] = 0;
                      v76->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v308, ":");
                      if ((v310 & 0x80u) == 0) {
                        unint64_t v78 = (const std::string::value_type *)&v308;
                      }
                      else {
                        unint64_t v78 = v308;
                      }
                      if ((v310 & 0x80u) == 0) {
                        std::string::size_type v79 = v310;
                      }
                      else {
                        std::string::size_type v79 = v309;
                      }
                      unint64_t v80 = std::string::append(&v322, v78, v79);
                      long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                      v323.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v81;
                      v80->__r_.__value_.__l.__size_ = 0;
                      v80->__r_.__value_.__r.__words[2] = 0;
                      v80->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v307, 752);
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v82 = &v307;
                      }
                      else {
                        uint64_t v82 = (std::string *)v307.__r_.__value_.__r.__words[0];
                      }
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v83 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v83 = v307.__r_.__value_.__l.__size_;
                      }
                      uint64_t v84 = std::string::append(&v323, (const std::string::value_type *)v82, v83);
                      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                      v324.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v85;
                      v84->__r_.__value_.__l.__size_ = 0;
                      v84->__r_.__value_.__r.__words[2] = 0;
                      v84->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v63, &v324);
                      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
LABEL_370:
                    uint64_t v60 = *(void **)(v16 + 16);
                    goto LABEL_371;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "tree_cluster_end")&& *(void *)(a1 + 928))
                  {
                    Espresso::blob<int,1>::make(&v324, *(_DWORD *)(a1 + 404));
                    uint64_t v86 = *(void *)(a1 + 928);
                    uint64_t v87 = *(std::__shared_weak_count **)(v86 + 40);
                    *(_OWORD *)(v86 + 32) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (v87) {
                      nitro::nitro_function::nitro_function(v87);
                    }
                    std::string::size_type v16 = *(void *)(*(void *)(a1 + 928) + 32);
                    if (a5 != 4 * *(int *)(v16 + 8))
                    {
                      uint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::to_string(&v315, a5);
                      unint64_t v89 = std::string::insert(&v315, 0, "Unexpected size s=");
                      long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
                      v316.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v90;
                      v89->__r_.__value_.__l.__size_ = 0;
                      v89->__r_.__value_.__r.__words[2] = 0;
                      v89->__r_.__value_.__r.__words[0] = 0;
                      std::string::size_type v91 = std::string::append(&v316, "/blob=");
                      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
                      v317.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v92;
                      v91->__r_.__value_.__l.__size_ = 0;
                      v91->__r_.__value_.__r.__words[2] = 0;
                      v91->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v314, 4 * *(int *)(*(void *)(*(void *)(a1 + 928) + 32) + 8));
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v93 = &v314;
                      }
                      else {
                        uint64_t v93 = (std::string *)v314.__r_.__value_.__r.__words[0];
                      }
                      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v94 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v94 = v314.__r_.__value_.__l.__size_;
                      }
                      unint64_t v95 = std::string::append(&v317, (const std::string::value_type *)v93, v94);
                      long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
                      v320.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v96;
                      v95->__r_.__value_.__l.__size_ = 0;
                      v95->__r_.__value_.__r.__words[2] = 0;
                      v95->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
                      if ((v313 & 0x80u) == 0) {
                        uint64_t v97 = (const std::string::value_type *)&v311;
                      }
                      else {
                        uint64_t v97 = v311;
                      }
                      if ((v313 & 0x80u) == 0) {
                        std::string::size_type v98 = v313;
                      }
                      else {
                        std::string::size_type v98 = v312;
                      }
                      unint64_t v99 = std::string::append(&v320, v97, v98);
                      long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                      v321.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v100;
                      v99->__r_.__value_.__l.__size_ = 0;
                      v99->__r_.__value_.__r.__words[2] = 0;
                      v99->__r_.__value_.__r.__words[0] = 0;
                      uint8x8_t v101 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
                      long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                      v322.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v102;
                      v101->__r_.__value_.__l.__size_ = 0;
                      v101->__r_.__value_.__r.__words[2] = 0;
                      v101->__r_.__value_.__r.__words[0] = 0;
                      std::string::basic_string[abi:ne180100]<0>(&v308, ":");
                      if ((v310 & 0x80u) == 0) {
                        unint64_t v103 = (const std::string::value_type *)&v308;
                      }
                      else {
                        unint64_t v103 = v308;
                      }
                      if ((v310 & 0x80u) == 0) {
                        std::string::size_type v104 = v310;
                      }
                      else {
                        std::string::size_type v104 = v309;
                      }
                      uint64_t v105 = std::string::append(&v322, v103, v104);
                      long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
                      v323.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v106;
                      v105->__r_.__value_.__l.__size_ = 0;
                      v105->__r_.__value_.__r.__words[2] = 0;
                      v105->__r_.__value_.__r.__words[0] = 0;
                      std::to_string(&v307, 756);
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v107 = &v307;
                      }
                      else {
                        uint64_t v107 = (std::string *)v307.__r_.__value_.__r.__words[0];
                      }
                      if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v108 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v108 = v307.__r_.__value_.__l.__size_;
                      }
                      unint64_t v109 = std::string::append(&v323, (const std::string::value_type *)v107, v108);
                      long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
                      v324.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v110;
                      v109->__r_.__value_.__l.__size_ = 0;
                      v109->__r_.__value_.__r.__words[2] = 0;
                      v109->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v88, &v324);
                      __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    goto LABEL_370;
                  }
                  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "block_starts"))
                  {
                    v306[0] = v11;
                    v306[1] = (uint64_t)v12;
                    if (v12) {
                      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v306, a5 >> 1, (a4 & 0x3F) == 0);
                    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 872);
                    *(_OWORD *)(a1 + 864) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (!v37) {
                      goto LABEL_84;
                    }
                  }
                  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "block_cols"))
                  {
                    v305[0] = v11;
                    v305[1] = (uint64_t)v12;
                    if (v12) {
                      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v305, a5 >> 1, (a4 & 0x3F) == 0);
                    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 888);
                    *(_OWORD *)(a1 + 880) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (!v37) {
                      goto LABEL_84;
                    }
                  }
                  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "sparse_weights_f32"))
                  {
                    v304[0] = v11;
                    v304[1] = (uint64_t)v12;
                    if (v12) {
                      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v304, a5, (a4 & 0x3F) == 0);
                    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 840);
                    *(_OWORD *)(a1 + 832) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (!v37) {
                      goto LABEL_84;
                    }
                  }
                  else
                  {
                    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)a3, "sparse_weights_f16"))
                    {
                      uint64_t v241 = *(void *)(a1 + 440);
                      if (!v241)
                      {
                        LODWORD(v323.__r_.__value_.__l.__data_) = 1;
                        LODWORD(v322.__r_.__value_.__l.__data_) = 1;
                        std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (int *)&v323, (int *)&v322, (int *)(a1 + 308), (int *)(a1 + 304));
                        double v235 = *(double *)&v324.__r_.__value_.__l.__data_;
                        uint64_t v242 = *(std::__shared_weak_count **)(a1 + 448);
                        *(_OWORD *)(a1 + 440) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                        if (v242)
                        {
                          nitro::nitro_function::nitro_function(v242);
                          uint64_t v241 = *(void *)(a1 + 440);
                        }
                        else
                        {
                          uint64_t v241 = *(void *)&v235;
                        }
                      }
                      Espresso::quantized_weights_helper::__set_weight_raw_blob(v241, v235, v236, v237, v234, a3, (char *)a4, a5, a6);
LABEL_372:
                      if (!v12) {
                        return;
                      }
                      goto LABEL_373;
                    }
                    v303[0] = v11;
                    v303[1] = (uint64_t)v12;
                    if (v12) {
                      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,1>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v303, a5, (a4 & 0x3F) == 0);
                    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 856);
                    *(_OWORD *)(a1 + 848) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                    if (!v37)
                    {
LABEL_84:
                      if (v12) {
                        nitro::nitro_function::nitro_function(v12);
                      }
                      goto LABEL_372;
                    }
                  }
LABEL_83:
                  nitro::nitro_function::nitro_function(v37);
                  goto LABEL_84;
                }
LABEL_134:
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 304), 1, 1, 1);
                std::string::size_type v48 = v324.__r_.__value_.__r.__words[0];
                std::string v49 = *(std::__shared_weak_count **)(a1 + 680);
                *(_OWORD *)(a1 + 672) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
                if (v49)
                {
                  nitro::nitro_function::nitro_function(v49);
                  std::string::size_type v16 = *(void *)(a1 + 672);
                }
                else
                {
                  std::string::size_type v16 = v48;
                }
                if (a5 != 4 * *(int *)(v16 + 8))
                {
                  unint64_t v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::to_string(&v315, a5);
                  uint64_t v212 = std::string::insert(&v315, 0, "Unexpected size s=");
                  long long v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
                  v316.__r_.__value_.__r.__words[2] = v212->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v213;
                  v212->__r_.__value_.__l.__size_ = 0;
                  v212->__r_.__value_.__r.__words[2] = 0;
                  v212->__r_.__value_.__r.__words[0] = 0;
                  unsigned int v214 = std::string::append(&v316, "/blob=");
                  long long v215 = *(_OWORD *)&v214->__r_.__value_.__l.__data_;
                  v317.__r_.__value_.__r.__words[2] = v214->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v215;
                  v214->__r_.__value_.__l.__size_ = 0;
                  v214->__r_.__value_.__r.__words[2] = 0;
                  v214->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v314, 4 * *(int *)(*(void *)(a1 + 672) + 8));
                  if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v216 = &v314;
                  }
                  else {
                    long long v216 = (std::string *)v314.__r_.__value_.__r.__words[0];
                  }
                  if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v217 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v217 = v314.__r_.__value_.__l.__size_;
                  }
                  v218 = std::string::append(&v317, (const std::string::value_type *)v216, v217);
                  long long v219 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
                  v320.__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v219;
                  v218->__r_.__value_.__l.__size_ = 0;
                  v218->__r_.__value_.__r.__words[2] = 0;
                  v218->__r_.__value_.__r.__words[0] = 0;
                  std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
                  if ((v313 & 0x80u) == 0) {
                    v220 = (const std::string::value_type *)&v311;
                  }
                  else {
                    v220 = v311;
                  }
                  if ((v313 & 0x80u) == 0) {
                    std::string::size_type v221 = v313;
                  }
                  else {
                    std::string::size_type v221 = v312;
                  }
                  uint64_t v222 = std::string::append(&v320, v220, v221);
                  long long v223 = *(_OWORD *)&v222->__r_.__value_.__l.__data_;
                  v321.__r_.__value_.__r.__words[2] = v222->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v223;
                  v222->__r_.__value_.__l.__size_ = 0;
                  v222->__r_.__value_.__r.__words[2] = 0;
                  v222->__r_.__value_.__r.__words[0] = 0;
                  uint64_t v224 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
                  long long v225 = *(_OWORD *)&v224->__r_.__value_.__l.__data_;
                  v322.__r_.__value_.__r.__words[2] = v224->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v225;
                  v224->__r_.__value_.__l.__size_ = 0;
                  v224->__r_.__value_.__r.__words[2] = 0;
                  v224->__r_.__value_.__r.__words[0] = 0;
                  std::string::basic_string[abi:ne180100]<0>(&v308, ":");
                  if ((v310 & 0x80u) == 0) {
                    int v226 = (const std::string::value_type *)&v308;
                  }
                  else {
                    int v226 = v308;
                  }
                  if ((v310 & 0x80u) == 0) {
                    std::string::size_type v227 = v310;
                  }
                  else {
                    std::string::size_type v227 = v309;
                  }
                  uint64_t v228 = std::string::append(&v322, v226, v227);
                  long long v229 = *(_OWORD *)&v228->__r_.__value_.__l.__data_;
                  v323.__r_.__value_.__r.__words[2] = v228->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v229;
                  v228->__r_.__value_.__l.__size_ = 0;
                  v228->__r_.__value_.__r.__words[2] = 0;
                  v228->__r_.__value_.__r.__words[0] = 0;
                  std::to_string(&v307, 738);
                  if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v230 = &v307;
                  }
                  else {
                    long long v230 = (std::string *)v307.__r_.__value_.__r.__words[0];
                  }
                  if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v231 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v231 = v307.__r_.__value_.__l.__size_;
                  }
                  int v232 = std::string::append(&v323, (const std::string::value_type *)v230, v231);
                  long long v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
                  v324.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v233;
                  v232->__r_.__value_.__l.__size_ = 0;
                  v232->__r_.__value_.__r.__words[2] = 0;
                  v232->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v211, &v324);
                  __cxa_throw(v211, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                goto LABEL_370;
              }
              goto LABEL_140;
            }
LABEL_125:
            if (*(_DWORD *)a3 != 1634296401 || *(unsigned char *)(a3 + 4) != 115) {
              goto LABEL_144;
            }
LABEL_130:
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 304), 1, 1, 1);
            std::string::size_type v44 = v324.__r_.__value_.__r.__words[0];
            int v45 = *(std::__shared_weak_count **)(a1 + 664);
            *(_OWORD *)(a1 + 656) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
            if (v45)
            {
              nitro::nitro_function::nitro_function(v45);
              std::string::size_type v16 = *(void *)(a1 + 656);
            }
            else
            {
              std::string::size_type v16 = v44;
            }
            if (a5 != 4 * *(int *)(v16 + 8))
            {
              uint64_t v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v315, a5);
              int v166 = std::string::insert(&v315, 0, "Unexpected size s=");
              long long v167 = *(_OWORD *)&v166->__r_.__value_.__l.__data_;
              v316.__r_.__value_.__r.__words[2] = v166->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v167;
              v166->__r_.__value_.__l.__size_ = 0;
              v166->__r_.__value_.__r.__words[2] = 0;
              v166->__r_.__value_.__r.__words[0] = 0;
              uint64_t v168 = std::string::append(&v316, "/blob=");
              long long v169 = *(_OWORD *)&v168->__r_.__value_.__l.__data_;
              v317.__r_.__value_.__r.__words[2] = v168->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v169;
              v168->__r_.__value_.__l.__size_ = 0;
              v168->__r_.__value_.__r.__words[2] = 0;
              v168->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v314, 4 * *(int *)(*(void *)(a1 + 656) + 8));
              if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v170 = &v314;
              }
              else {
                uint64_t v170 = (std::string *)v314.__r_.__value_.__r.__words[0];
              }
              if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v171 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v171 = v314.__r_.__value_.__l.__size_;
              }
              std::string::size_type v172 = std::string::append(&v317, (const std::string::value_type *)v170, v171);
              long long v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
              v320.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v173;
              v172->__r_.__value_.__l.__size_ = 0;
              v172->__r_.__value_.__r.__words[2] = 0;
              v172->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
              if ((v313 & 0x80u) == 0) {
                long long v174 = (const std::string::value_type *)&v311;
              }
              else {
                long long v174 = v311;
              }
              if ((v313 & 0x80u) == 0) {
                std::string::size_type v175 = v313;
              }
              else {
                std::string::size_type v175 = v312;
              }
              int v176 = std::string::append(&v320, v174, v175);
              long long v177 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
              v321.__r_.__value_.__r.__words[2] = v176->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v177;
              v176->__r_.__value_.__l.__size_ = 0;
              v176->__r_.__value_.__r.__words[2] = 0;
              v176->__r_.__value_.__r.__words[0] = 0;
              uint64_t v178 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
              long long v179 = *(_OWORD *)&v178->__r_.__value_.__l.__data_;
              v322.__r_.__value_.__r.__words[2] = v178->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v179;
              v178->__r_.__value_.__l.__size_ = 0;
              v178->__r_.__value_.__r.__words[2] = 0;
              v178->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100]<0>(&v308, ":");
              if ((v310 & 0x80u) == 0) {
                uint64_t v180 = (const std::string::value_type *)&v308;
              }
              else {
                uint64_t v180 = v308;
              }
              if ((v310 & 0x80u) == 0) {
                std::string::size_type v181 = v310;
              }
              else {
                std::string::size_type v181 = v309;
              }
              int v182 = std::string::append(&v322, v180, v181);
              long long v183 = *(_OWORD *)&v182->__r_.__value_.__l.__data_;
              v323.__r_.__value_.__r.__words[2] = v182->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v183;
              v182->__r_.__value_.__l.__size_ = 0;
              v182->__r_.__value_.__r.__words[2] = 0;
              v182->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v307, 735);
              if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v184 = &v307;
              }
              else {
                uint64_t v184 = (std::string *)v307.__r_.__value_.__r.__words[0];
              }
              if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v185 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v185 = v307.__r_.__value_.__l.__size_;
              }
              int v186 = std::string::append(&v323, (const std::string::value_type *)v184, v185);
              long long v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
              v324.__r_.__value_.__r.__words[2] = v186->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v187;
              v186->__r_.__value_.__l.__size_ = 0;
              v186->__r_.__value_.__r.__words[2] = 0;
              v186->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v165, &v324);
              __cxa_throw(v165, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_370;
          }
        }
        if (*(void *)(a3 + 8) == 5)
        {
          if (**(_DWORD **)a3 == 1634296401 && *(unsigned char *)(*(void *)a3 + 4) == 115) {
            goto LABEL_130;
          }
          if ((v13 & 0x80) == 0) {
            goto LABEL_144;
          }
        }
        if (*(void *)(a3 + 8) != 9) {
          goto LABEL_138;
        }
        if (**(void **)a3 == 0x6D75735F776F7251 && *(unsigned char *)(*(void *)a3 + 8) == 115) {
          goto LABEL_134;
        }
        if ((v13 & 0x80) != 0)
        {
LABEL_138:
          if (*(void *)(a3 + 8) != 6) {
            goto LABEL_144;
          }
          uint64_t v20 = *(void *)a3;
        }
        else
        {
          uint64_t v20 = a3;
          if (v13 != 6) {
            goto LABEL_144;
          }
        }
LABEL_140:
        int v52 = *(_DWORD *)v20;
        int v53 = *(unsigned __int16 *)(v20 + 4);
        BOOL v54 = v52 == 1701147252 && v53 == 22367;
        if (v54 && *(void *)(a1 + 928))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v324, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 404), 1, 1);
          uint64_t v134 = *(void *)(a1 + 928);
          long long v135 = *(std::__shared_weak_count **)(v134 + 8);
          *(_OWORD *)uint64_t v134 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
          if (v135) {
            nitro::nitro_function::nitro_function(v135);
          }
          uint64_t v136 = 0;
          uint64_t v58 = **(void **)(a1 + 928);
          uint64_t v137 = *(int *)(v58 + 8);
          do
          {
            v137 *= *(int *)(v58 + 12 + v136);
            v136 += 4;
          }
          while (v136 != 12);
          if (a5 != 4 * v137)
          {
            uint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v315, a5);
            long long v139 = std::string::insert(&v315, 0, "Unexpected size s=");
            long long v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
            v316.__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v140;
            v139->__r_.__value_.__l.__size_ = 0;
            v139->__r_.__value_.__r.__words[2] = 0;
            v139->__r_.__value_.__r.__words[0] = 0;
            std::string v141 = std::string::append(&v316, "/blob=");
            uint64_t v142 = 0;
            long long v143 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
            v317.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v317.__r_.__value_.__l.__data_ = v143;
            v141->__r_.__value_.__l.__size_ = 0;
            v141->__r_.__value_.__r.__words[2] = 0;
            v141->__r_.__value_.__r.__words[0] = 0;
            uint64_t v144 = **(void **)(a1 + 928);
            uint64_t v145 = *(int *)(v144 + 8);
            uint64_t v146 = v144 + 12;
            do
            {
              v145 *= *(int *)(v146 + v142);
              v142 += 4;
            }
            while (v142 != 12);
            std::to_string(&v314, 4 * v145);
            if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v147 = &v314;
            }
            else {
              uint64_t v147 = (std::string *)v314.__r_.__value_.__r.__words[0];
            }
            if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v148 = HIBYTE(v314.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v148 = v314.__r_.__value_.__l.__size_;
            }
            uint64_t v149 = std::string::append(&v317, (const std::string::value_type *)v147, v148);
            long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
            v320.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v150;
            v149->__r_.__value_.__l.__size_ = 0;
            v149->__r_.__value_.__r.__words[2] = 0;
            v149->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v311, " @ ");
            if ((v313 & 0x80u) == 0) {
              uint64_t v151 = (const std::string::value_type *)&v311;
            }
            else {
              uint64_t v151 = v311;
            }
            if ((v313 & 0x80u) == 0) {
              std::string::size_type v152 = v313;
            }
            else {
              std::string::size_type v152 = v312;
            }
            unint64_t v153 = std::string::append(&v320, v151, v152);
            long long v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
            v321.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v321.__r_.__value_.__l.__data_ = v154;
            v153->__r_.__value_.__l.__size_ = 0;
            v153->__r_.__value_.__r.__words[2] = 0;
            v153->__r_.__value_.__r.__words[0] = 0;
            long long v155 = std::string::append(&v321, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/KernelsCPU.mm");
            long long v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
            v322.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v156;
            v155->__r_.__value_.__l.__size_ = 0;
            v155->__r_.__value_.__r.__words[2] = 0;
            v155->__r_.__value_.__r.__words[0] = 0;
            std::string::basic_string[abi:ne180100]<0>(&v308, ":");
            if ((v310 & 0x80u) == 0) {
              std::string v157 = (const std::string::value_type *)&v308;
            }
            else {
              std::string v157 = v308;
            }
            if ((v310 & 0x80u) == 0) {
              std::string::size_type v158 = v310;
            }
            else {
              std::string::size_type v158 = v309;
            }
            std::string v159 = std::string::append(&v322, v157, v158);
            long long v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
            v323.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v160;
            v159->__r_.__value_.__l.__size_ = 0;
            v159->__r_.__value_.__r.__words[2] = 0;
            v159->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v307, 744);
            if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v161 = &v307;
            }
            else {
              uint64_t v161 = (std::string *)v307.__r_.__value_.__r.__words[0];
            }
            if ((v307.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v162 = HIBYTE(v307.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v162 = v307.__r_.__value_.__l.__size_;
            }
            uint64_t v163 = std::string::append(&v323, (const std::string::value_type *)v161, v162);
            long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
            v324.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v164;
            v163->__r_.__value_.__l.__size_ = 0;
            v163->__r_.__value_.__r.__words[2] = 0;
            v163->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v138, &v324);
            __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          goto LABEL_151;
        }
        goto LABEL_144;
      }
LABEL_54:
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = 0u;
      if (v25) {
        nitro::nitro_function::nitro_function(v25);
      }
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v26 = *(_DWORD *)(a1 + 304);
      int v27 = *(_DWORD *)(a1 + 308);
      uint64_t v28 = *(void *)(a1 + 8);
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 16);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!*(unsigned char *)(v28 + 73)) {
        goto LABEL_66;
      }
      if (v11 && (a4 & 0x3F) != 0)
      {
        if (!*(unsigned char *)(v28 + 123)) {
          goto LABEL_66;
        }
      }
      else if (!v11)
      {
LABEL_66:
        std::allocate_shared[abi:ne180100]<Espresso::blob<short,2>,std::allocator<Espresso::blob<short,2>>,int &,int &,int &,int &,void>(&v324, v27, v26, 1, 1);
        long long v302 = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
        std::string::size_type v30 = v324.__r_.__value_.__r.__words[0];
        if (a5 != 2 * *(int *)(v302 + 8) * (uint64_t)*(int *)(v302 + 12))
        {
          v293 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v321, a5);
          std::string v294 = std::string::insert(&v321, 0, "Unexpected size s=");
          long long v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
          v322.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v322.__r_.__value_.__l.__data_ = v295;
          v294->__r_.__value_.__l.__size_ = 0;
          v294->__r_.__value_.__r.__words[2] = 0;
          v294->__r_.__value_.__r.__words[0] = 0;
          std::string v296 = std::string::append(&v322, "/blob=");
          long long v297 = *(_OWORD *)&v296->__r_.__value_.__l.__data_;
          v323.__r_.__value_.__r.__words[2] = v296->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v323.__r_.__value_.__l.__data_ = v297;
          v296->__r_.__value_.__l.__size_ = 0;
          v296->__r_.__value_.__r.__words[2] = 0;
          v296->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v320, 2 * *(int *)(v30 + 8) * (uint64_t)*(int *)(v30 + 12));
          if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v298 = &v320;
          }
          else {
            v298 = (std::string *)v320.__r_.__value_.__r.__words[0];
          }
          if ((v320.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v299 = HIBYTE(v320.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v299 = v320.__r_.__value_.__l.__size_;
          }
          int v300 = std::string::append(&v323, (const std::string::value_type *)v298, v299);
          long long v301 = *(_OWORD *)&v300->__r_.__value_.__l.__data_;
          v324.__r_.__value_.__r.__words[2] = v300->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v324.__r_.__value_.__l.__data_ = v301;
          v300->__r_.__value_.__l.__size_ = 0;
          v300->__r_.__value_.__r.__words[2] = 0;
          v300->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v293, &v324);
          __cxa_throw(v293, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        memcpy(*(void **)(v324.__r_.__value_.__r.__words[0] + 16), a4, a5);
        if (!v12)
        {
LABEL_385:
          if (!v29) {
            goto LABEL_387;
          }
          goto LABEL_386;
        }
LABEL_384:
        nitro::nitro_function::nitro_function(v12);
        goto LABEL_385;
      }
      uint64_t v238 = (char *)operator new(0x58uLL);
      *((void *)v238 + 1) = 0;
      *((void *)v238 + 2) = 0;
      *(void *)uint64_t v238 = &unk_1EE389CA0;
      *((void *)v238 + 3) = &unk_1EE36C0B0;
      *(_OWORD *)(v238 + 56) = 0u;
      *(_OWORD *)(v238 + 72) = 0u;
      *((_DWORD *)v238 + 8) = v27;
      *((_DWORD *)v238 + 9) = v26;
      *((void *)v238 + 5) = a4;
      v238[48] = 0;
      *(void *)&long long v239 = v238 + 24;
      *((void *)&v239 + 1) = v238;
      long long v302 = v239;
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        *((void *)v238 + 7) = v11;
        *((void *)v238 + 8) = v12;
        goto LABEL_384;
      }
      *((void *)v238 + 7) = v11;
      *((void *)v238 + 8) = 0;
      if (v29) {
LABEL_386:
      }
        nitro::nitro_function::nitro_function(v29);
LABEL_387:
      int v240 = *(std::__shared_weak_count **)(a1 + 600);
      *(_OWORD *)(a1 + 592) = v302;
      if (v240) {
        nitro::nitro_function::nitro_function(v240);
      }
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
LABEL_373:
        nitro::nitro_function::nitro_function(v12);
      }
      return;
    case 8:
      if (**(void **)a3 != 0x38746E695F745F57) {
        goto LABEL_94;
      }
LABEL_87:
      int v38 = *(std::__shared_weak_count **)(a1 + 568);
      *(_OWORD *)(a1 + 560) = 0u;
      if (v38) {
        nitro::nitro_function::nitro_function(v38);
      }
      v318[0] = v11;
      v318[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,2>(&v324, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v318, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
      uint64_t v37 = *(std::__shared_weak_count **)(a1 + 904);
      *(_OWORD *)(a1 + 896) = *(_OWORD *)&v324.__r_.__value_.__l.__data_;
      if (!v37) {
        goto LABEL_84;
      }
      goto LABEL_83;
    default:
      goto LABEL_94;
  }
}

void sub_19225977C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (*(char *)(v66 - 89) < 0) {
    operator delete(*(void **)(v66 - 112));
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v66 - 121) < 0) {
    operator delete(*(void **)(v66 - 144));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v66 - 153) < 0) {
    operator delete(*(void **)(v66 - 176));
  }
  if (*(char *)(v66 - 185) < 0) {
    operator delete(*(void **)(v66 - 208));
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v66 - 217) < 0) {
    operator delete(*(void **)(v66 - 240));
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a50 < 0)
  {
    operator delete(a45);
    if ((v64 & 1) == 0)
    {
LABEL_28:
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v65);
  goto LABEL_28;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void Espresso::generic_inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 *a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v6 = a3;
  if (!a6)
  {
    uint64_t v9 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = *a6;
  if (!*a6)
  {
LABEL_6:
    long long v10 = 0;
    goto LABEL_7;
  }
  long long v10 = (std::__shared_weak_count *)a6[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (((char)a3[23] & 0x80000000) == 0)
  {
    int v11 = a3[23];
    if (v11 != 1)
    {
      if (v11 != 5)
      {
        if (v11 != 7) {
          goto LABEL_88;
        }
LABEL_16:
        if (*(_DWORD *)v6 == 828792695 && *(_DWORD *)(v6 + 3) == 1952396849)
        {
          v31[0] = v9;
          v31[1] = (uint64_t)v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v31, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
          uint64_t v15 = *(std::__shared_weak_count **)(a1 + 536);
          *(_OWORD *)(a1 + 528) = v43;
          if (!v15) {
            goto LABEL_85;
          }
        }
        else
        {
          if (*(_DWORD *)v6 != 862347127 || *(_DWORD *)(v6 + 3) != 1952395827) {
            goto LABEL_88;
          }
          v30[0] = v9;
          v30[1] = (uint64_t)v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v30, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
          uint64_t v15 = *(std::__shared_weak_count **)(a1 + 520);
          *(_OWORD *)(a1 + 512) = v43;
          if (!v15) {
            goto LABEL_85;
          }
        }
        nitro::nitro_function::nitro_function(v15);
LABEL_85:
        if (!v10) {
          goto LABEL_88;
        }
        int v22 = v10;
        goto LABEL_87;
      }
      if (*(_DWORD *)a3 != 828792663 || a3[4] != 54)
      {
        if (*(_DWORD *)a3 != 828792674 || a3[4] != 54) {
          goto LABEL_88;
        }
LABEL_63:
        v36[0] = v9;
        v36[1] = (uint64_t)v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v36, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
        if (v10) {
          nitro::nitro_function::nitro_function(v10);
        }
        uint64_t v28 = *(void *)(a1 + 16);
        uint64_t v34 = *(void *)(a1 + 8);
        uint64_t v35 = v28;
        if (v28) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
        }
        if ((char)v6[23] < 0) {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        }
        else {
          std::string v33 = *(std::string *)v6;
        }
        long long v32 = v43;
        if (*((void *)&v43 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::set_parameter_blob<unsigned short,1>();
      }
      goto LABEL_71;
    }
    int v16 = *a3;
    if (v16 != 98)
    {
      if (v16 != 87) {
        goto LABEL_88;
      }
LABEL_91:
      v42[0] = v9;
      v42[1] = (uint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v42, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v10) {
        nitro::nitro_function::nitro_function(v10);
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v43 + 1);
      long long v41 = v43;
      if (*((void *)&v43 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)a1 + 400))(a1, &v41);
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v41 + 1);
      if (!*((void *)&v41 + 1)) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
LABEL_44:
    v40[0] = v9;
    v40[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v40, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v43 + 1);
    long long v39 = v43;
    if (*((void *)&v43 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, long long *))(*(void *)a1 + 392))(a1, &v39);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_52;
    }
LABEL_51:
    nitro::nitro_function::nitro_function(v21);
LABEL_52:
    if (!v20) {
      goto LABEL_88;
    }
    int v22 = v20;
    goto LABEL_87;
  }
  uint64_t v12 = *((void *)a3 + 1);
  if (v12 == 1)
  {
    int v19 = **(unsigned __int8 **)a3;
    if (v19 == 87) {
      goto LABEL_91;
    }
    if (v19 != 98) {
      goto LABEL_88;
    }
    goto LABEL_44;
  }
  if (v12 != 5)
  {
    if (v12 != 7) {
      goto LABEL_88;
    }
    uint64_t v6 = *(unsigned __int8 **)a3;
    goto LABEL_16;
  }
  unint64_t v23 = *(int **)a3;
  if (**(_DWORD **)a3 != 828792663 || *(unsigned char *)(*(void *)a3 + 4) != 54)
  {
    int v25 = *v23;
    int v26 = *((unsigned __int8 *)v23 + 4);
    if (v25 == 828792674 && v26 == 54) {
      goto LABEL_63;
    }
    goto LABEL_88;
  }
LABEL_71:
  v38[0] = v9;
  v38[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v43, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v38, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  uint64_t v29 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  long long v37 = v43;
  if (*((void *)&v43 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 464))(a1, &v37, a2);
  if (*((void *)&v37 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (v29)
  {
    int v22 = v29;
LABEL_87:
    nitro::nitro_function::nitro_function(v22);
  }
LABEL_88:
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19225A220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a27) {
    nitro::nitro_function::nitro_function(a27);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 56);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::quantized_weights_helper::__set_weight_raw_blob(uint64_t a1, double a2, double a3, int32x2_t a4, uint64_t a5, uint64_t a6, char *a7, unint64_t a8, uint64_t *a9)
{
  if (!a9)
  {
    uint64_t v12 = 0;
    goto LABEL_6;
  }
  uint64_t v12 = *a9;
  if (!*a9)
  {
LABEL_6:
    int v13 = 0;
    goto LABEL_7;
  }
  int v13 = (std::__shared_weak_count *)a9[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  uint64_t v14 = 136;
  if (!*(_DWORD *)(a1 + 144)) {
    uint64_t v14 = 140;
  }
  uint64_t v15 = *(unsigned int *)(a1 + v14);
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v86 = *(std::string *)a6;
  }
  uint64_t v16 = (int)v15;
  if (!*(unsigned char *)(a1 + 152))
  {
LABEL_37:
    unsigned int v26 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v86.__r_.__value_.__l.__size_;
      if (v86.__r_.__value_.__l.__size_ != 4) {
        goto LABEL_77;
      }
      if (*v86.__r_.__value_.__l.__data_ != 87) {
        goto LABEL_80;
      }
      int v27 = *(unsigned __int8 *)(v86.__r_.__value_.__r.__words[0] + 3);
      if ((v27 - 57) >= 0xFFFFFFF8)
      {
        int v28 = *(unsigned __int8 *)(v86.__r_.__value_.__r.__words[0] + 2);
LABEL_46:
        if (v28 != 85 && v28 != 83) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognizable weight name");
        }
        uint64_t v30 = (v27 - 48);
        *(unsigned char *)(a1 + 164) = v28 == 83;
        *(_DWORD *)(a1 + 156) = v30;
        unint64_t v31 = *(int *)(a1 + 132) * (uint64_t)*(int *)(a1 + 128) * *(int *)(a1 + 136) * *(int *)(a1 + 140);
        unint64_t v32 = *(unsigned int *)(a1 + 148);
        if ((int)v32 < 1)
        {
          uint64_t v42 = 0;
        }
        else
        {
          unint64_t v33 = (v31 / v32 * v30 - 1) >> 3;
          int v34 = (v32 + 1) & 0xFFFFFFFE;
          __int32 v35 = v32 - 1;
          unsigned int v36 = (v32 - 1) & 0xFFFFFFFE;
          a4.i32[0] = v35;
          int64x2_t v37 = vdupq_n_s64(v33 + 1);
          int64x2_t v38 = 0uLL;
          do
          {
            int8x16_t v39 = (int8x16_t)v38;
            int64x2_t v38 = vaddq_s64(v37, v38);
            v34 -= 2;
          }
          while (v34);
          uint32x2_t v40 = vcgt_u32((uint32x2_t)vorr_s8((int8x8_t)vdup_n_s32(v36), (int8x8_t)0x100000000), (uint32x2_t)vdup_lane_s32(a4, 0));
          v41.i64[0] = v40.i32[0];
          v41.i64[1] = v40.i32[1];
          uint64_t v42 = vaddvq_s64((int64x2_t)vbslq_s8(v41, v39, (int8x16_t)v38));
        }
        if (v42 != a8) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long &,unsigned long &,int &>(a8, v42, v31, v30);
        }
        uint64_t v49 = *(void *)(a1 + 112);
        std::string::size_type v50 = *(std::__shared_weak_count **)(a1 + 120);
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(&v85, v49, a7, a8, v12, (uint64_t)v13, a8, (a7 & 0x3F) == 0);
        uint64_t v51 = *(std::__shared_weak_count **)(a1 + 8);
        *(_OWORD *)a1 = v85;
        if (v51) {
          nitro::nitro_function::nitro_function(v51);
        }
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        if (v50) {
          nitro::nitro_function::nitro_function(v50);
        }
        unsigned int v26 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        if ((*((unsigned char *)&v86.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_74;
        }
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
LABEL_77:
        if (size <= 7) {
          goto LABEL_80;
        }
        int v52 = (std::string *)v86.__r_.__value_.__r.__words[0];
LABEL_79:
        int v53 = (Espresso *)strncmp((const char *)v52, "lut_to_", 7uLL);
        if (v53) {
          goto LABEL_80;
        }
        if (*(int *)(a1 + 156) <= 0)
        {
          unsigned int v62 = Espresso::espresso_os_log_subsystem(v53, v54);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v85) = 0;
            _os_log_error_impl(&dword_1920CB000, v62, OS_LOG_TYPE_ERROR, "Configuring LUT before setting bitdepth. Cannot check size.", (uint8_t *)&v85, 2u);
          }

          unsigned int v26 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
        }
        if ((v26 & 0x80) != 0)
        {
          if (v86.__r_.__value_.__l.__size_ != 11)
          {
            if (v86.__r_.__value_.__l.__size_ != 12)
            {
              if (v86.__r_.__value_.__l.__size_ != 14) {
                goto LABEL_80;
              }
              if (*(void *)v86.__r_.__value_.__l.__data_ != 0x665F6F745F74756CLL
                || *(void *)(v86.__r_.__value_.__r.__words[0] + 6) != 0x323374616F6C665FLL)
              {
                goto LABEL_80;
              }
LABEL_153:
              int v71 = 2 << (*(_DWORD *)(a1 + 156) - 1);
              if (v71 >= 1 && a8 != 4 * *(_DWORD *)(a1 + 148) * v71) {
                Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_float32 linear size %d != %d", a8, 4 * (2 << (*(_DWORD *)(a1 + 156) - 1)));
              }
              uint64_t v72 = *(void *)(a1 + 112);
              std::string::size_type v73 = *(std::__shared_weak_count **)(a1 + 120);
              if (v73) {
                atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v13) {
                atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&v85, v72, a7, a8, v12, (uint64_t)v13, a8 >> 2, 0);
              int8x8_t v74 = *(std::__shared_weak_count **)(a1 + 40);
              *(_OWORD *)(a1 + 32) = v85;
              if (!v74) {
                goto LABEL_182;
              }
              goto LABEL_181;
            }
            long long v75 = (std::string *)v86.__r_.__value_.__r.__words[0];
            goto LABEL_169;
          }
          if (*(void *)v86.__r_.__value_.__l.__data_ != 0x695F6F745F74756CLL
            || *(void *)(v86.__r_.__value_.__r.__words[0] + 3) != 0x38746E695F6F745FLL)
          {
            goto LABEL_80;
          }
        }
        else
        {
          if (v26 != 11)
          {
            if (v26 != 12)
            {
              if (v26 != 14) {
                goto LABEL_80;
              }
              if (v86.__r_.__value_.__r.__words[0] != 0x665F6F745F74756CLL
                || *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 6) != 0x323374616F6C665FLL)
              {
                goto LABEL_80;
              }
              goto LABEL_153;
            }
            long long v75 = &v86;
LABEL_169:
            std::string::size_type v77 = v75->__r_.__value_.__r.__words[0];
            int v78 = v75->__r_.__value_.__r.__words[1];
            if (v77 != 0x755F6F745F74756CLL || v78 != 947154537) {
              goto LABEL_80;
            }
            uint64_t v80 = (2 << (*(unsigned char *)(a1 + 156) - 1));
            if ((int)v80 >= 1 && v80 != a8) {
              Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_uint8 %d != %d", a8, v80);
            }
            uint64_t v81 = *(void *)(a1 + 112);
            std::string::size_type v73 = *(std::__shared_weak_count **)(a1 + 120);
            if (v73) {
              atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<unsigned char,1>(&v85, v81, a7, a8, v12, (uint64_t)v13, a8, 0);
            int8x8_t v74 = *(std::__shared_weak_count **)(a1 + 72);
            *(_OWORD *)(a1 + 64) = v85;
            if (!v74) {
              goto LABEL_182;
            }
LABEL_181:
            nitro::nitro_function::nitro_function(v74);
LABEL_182:
            if (v13) {
              nitro::nitro_function::nitro_function(v13);
            }
            if (v73) {
              nitro::nitro_function::nitro_function(v73);
            }
LABEL_80:
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v86.__r_.__value_.__l.__size_ != 12)
              {
                if (v86.__r_.__value_.__l.__size_ != 13) {
                  goto LABEL_140;
                }
                if (*(void *)v86.__r_.__value_.__l.__data_ != 0x715F68635F726570
                  || *(void *)(v86.__r_.__value_.__r.__words[0] + 5) != 0x656C616373715F68)
                {
                  goto LABEL_140;
                }
                goto LABEL_96;
              }
              uint64_t v61 = (std::string *)v86.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 12)
              {
                if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 13) {
                  goto LABEL_140;
                }
                if (v86.__r_.__value_.__r.__words[0] != 0x715F68635F726570
                  || *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 5) != 0x656C616373715F68)
                {
                  goto LABEL_140;
                }
LABEL_96:
                if (4 * v16 != a8) {
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching per_ch_qscale size %d != %d", a8, 4 * v16);
                }
                uint64_t v57 = *(void *)(a1 + 112);
                uint64_t v58 = *(std::__shared_weak_count **)(a1 + 120);
                if (v58) {
                  atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v13) {
                  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&v85, v57, a7, a8, v12, (uint64_t)v13, v16, 0);
                uint64_t v59 = *(std::__shared_weak_count **)(a1 + 88);
                *(_OWORD *)(a1 + 80) = v85;
                if (v59) {
                  nitro::nitro_function::nitro_function(v59);
                }
                if (v13) {
                  nitro::nitro_function::nitro_function(v13);
                }
                if (!v58) {
                  goto LABEL_140;
                }
                uint64_t v60 = v58;
                goto LABEL_139;
              }
              uint64_t v61 = &v86;
            }
            std::string::size_type v64 = v61->__r_.__value_.__r.__words[0];
            int v65 = v61->__r_.__value_.__r.__words[1];
            if (v64 != 0x715F68635F726570 || v65 != 1935763810) {
              goto LABEL_140;
            }
            if (4 * v16 != a8) {
              Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching per_ch_qbias size %d != %d", a8, 4 * v16);
            }
            uint64_t v67 = *(void *)(a1 + 112);
            unint64_t v68 = *(std::__shared_weak_count **)(a1 + 120);
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<float,1>(&v85, v67, a7, a8, v12, (uint64_t)v13, a8 >> 2, 0);
            std::string::size_type v69 = *(std::__shared_weak_count **)(a1 + 104);
            *(_OWORD *)(a1 + 96) = v85;
            if (v69) {
              nitro::nitro_function::nitro_function(v69);
            }
            if (v13) {
              nitro::nitro_function::nitro_function(v13);
            }
            if (!v68) {
              goto LABEL_140;
            }
            uint64_t v60 = v68;
LABEL_139:
            nitro::nitro_function::nitro_function(v60);
            goto LABEL_140;
          }
          if (v86.__r_.__value_.__r.__words[0] != 0x695F6F745F74756CLL
            || *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 3) != 0x38746E695F6F745FLL)
          {
            goto LABEL_80;
          }
        }
        uint64_t v83 = (2 << (*(unsigned char *)(a1 + 156) - 1));
        if ((int)v83 >= 1 && v83 != a8) {
          Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching lut_to_int8 size %d != %d", a8, v83);
        }
        uint64_t v84 = *(void *)(a1 + 112);
        std::string::size_type v73 = *(std::__shared_weak_count **)(a1 + 120);
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob_static<signed char,1>(&v85, v84, a7, a8, v12, (uint64_t)v13, a8, 0);
        int8x8_t v74 = *(std::__shared_weak_count **)(a1 + 56);
        *(_OWORD *)(a1 + 48) = v85;
        if (!v74) {
          goto LABEL_182;
        }
        goto LABEL_181;
      }
    }
    else
    {
      if (HIBYTE(v86.__r_.__value_.__r.__words[2]) != 4)
      {
LABEL_74:
        if (v26 <= 7) {
          goto LABEL_80;
        }
        int v52 = &v86;
        goto LABEL_79;
      }
      if (v86.__r_.__value_.__s.__data_[0] != 87) {
        goto LABEL_80;
      }
      int v27 = v86.__r_.__value_.__s.__data_[3];
      if (v86.__r_.__value_.__s.__data_[3] - 57 > 0xFFFFFFF7)
      {
        int v28 = v86.__r_.__value_.__s.__data_[2];
        goto LABEL_46;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unrecognizable weight name");
  }
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    uint64_t v17 = &v86;
    switch(*((unsigned char *)&v86.__r_.__value_.__s + 23))
    {
      case 2:
        int data_low = LOWORD(v86.__r_.__value_.__l.__data_);
        goto LABEL_18;
      case 4:
        int data_low = (int)v86.__r_.__value_.__l.__data_;
        goto LABEL_28;
      case 9:
        if (v86.__r_.__value_.__r.__words[0] != 0x616D6E696D5F3857 || v86.__r_.__value_.__s.__data_[8] != 120) {
          goto LABEL_37;
        }
        goto LABEL_52;
      case 0xA:
        goto LABEL_32;
      default:
        goto LABEL_37;
    }
  }
  switch(v86.__r_.__value_.__l.__size_)
  {
    case 2uLL:
      int data_low = *(unsigned __int16 *)v86.__r_.__value_.__l.__data_;
LABEL_18:
      int v19 = 14423;
      goto LABEL_29;
    case 4uLL:
      int data_low = *(_DWORD *)v86.__r_.__value_.__l.__data_;
LABEL_28:
      int v19 = 947216215;
LABEL_29:
      if (data_low == v19) {
        MEMORY[0x192FF0F50](&v86, "W_U8");
      }
      goto LABEL_37;
    case 9uLL:
      int v21 = *(unsigned __int8 *)(v86.__r_.__value_.__r.__words[0] + 8);
      BOOL v22 = *(void *)v86.__r_.__value_.__l.__data_ == 0x616D6E696D5F3857;
      int v23 = 120;
      goto LABEL_33;
    case 0xAuLL:
      uint64_t v17 = (std::string *)v86.__r_.__value_.__r.__words[0];
LABEL_32:
      std::string::size_type v24 = v17->__r_.__value_.__r.__words[0];
      int v21 = LOWORD(v17->__r_.__value_.__r.__words[1]);
      BOOL v22 = v24 == 0x6E61725F38755F71;
      int v23 = 25959;
LABEL_33:
      if (!v22 || v21 != v23) {
        goto LABEL_37;
      }
LABEL_52:
      if (8 * (int)v15 != a8) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching legacy ranges size %d != %d", a8, 8 * (int)v15);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v85, v15, 1, 1, 1);
      long long v43 = *(std::__shared_weak_count **)(a1 + 88);
      *(_OWORD *)(a1 + 80) = v85;
      if (v43) {
        nitro::nitro_function::nitro_function(v43);
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v85, v15, 1, 1, 1);
      std::string::size_type v44 = *(std::__shared_weak_count **)(a1 + 104);
      *(_OWORD *)(a1 + 96) = v85;
      if (v44) {
        nitro::nitro_function::nitro_function(v44);
      }
      if ((int)v15 >= 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = *(void *)(*(void *)(a1 + 80) + 16);
        uint64_t v47 = *(void *)(*(void *)(a1 + 96) + 16);
        do
        {
          float v48 = *(float *)&a7[v45];
          *(float *)(v46 + v45) = (float)(*(float *)&a7[4 * v15 + v45] - v48) / 255.0;
          *(float *)(v47 + v45) = v48;
          v45 += 4;
        }
        while (4 * v15 != v45);
      }
      break;
    default:
      goto LABEL_37;
  }
LABEL_140:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
}

void sub_19225AD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, int *a5, int *a6, int *a7)
{
  uint64_t v14 = (char *)operator new(0xD0uLL);
  uint64_t v15 = v14;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1EE388110;
  uint64_t v16 = v14 + 24;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v17 = *a4;
  int v18 = *a5;
  int v19 = *a6;
  int v20 = *a7;
  *uint64_t v16 = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *((void *)v14 + 17) = a2;
  *((void *)v14 + 18) = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v14 + 38) = v17;
  *((_DWORD *)v14 + 39) = v18;
  *((_DWORD *)v14 + 40) = v19;
  *((_DWORD *)v14 + 41) = v20;
  *((void *)v14 + 21) = 0x100000000;
  v14[176] = 0;
  *((void *)v14 + 24) = 0;
  *((void *)v14 + 25) = 0;
  *(void *)(v14 + 180) = 0;
  v14[188] = 0;
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *a1 = v16;
  a1[1] = v15;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a6;
  uint64_t v15 = (std::__shared_weak_count *)a6[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (v16 && (a9 & 1) == 0)
    {
      if (!*(unsigned char *)(a2 + 123)) {
        goto LABEL_9;
      }
LABEL_13:
      int v18 = (char *)operator new(0x58uLL);
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *(void *)int v18 = &unk_1EE389D10;
      *((void *)v18 + 3) = &unk_1EE36C0F0;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_DWORD *)v18 + 8) = a7;
      *((_DWORD *)v18 + 9) = a8;
      *((void *)v18 + 5) = a4;
      v18[48] = 0;
      *a1 = v18 + 24;
      a1[1] = v18;
      if (!v15)
      {
        *((void *)v18 + 7) = v16;
        *((void *)v18 + 8) = 0;
        if (!a3) {
          return;
        }
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v18 + 7) = v16;
      *((void *)v18 + 8) = v15;
      goto LABEL_15;
    }
    if (v16) {
      goto LABEL_13;
    }
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v32, a7, a8, 1, 1);
  long long v17 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  if (a5 != 2 * *(int *)(v17 + 8) * (uint64_t)*(int *)(v17 + 12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v29, a5);
    int v20 = std::string::insert(&v29, 0, "Unexpected size s=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    BOOL v22 = std::string::append(&v30, "/blob=");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, 2 * *(int *)(v17 + 8) * (uint64_t)*(int *)(v17 + 12));
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = &v28;
    }
    else {
      std::string::size_type v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    unsigned int v26 = std::string::append(&v31, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v17 + 16), a4, a5);
  if (v15) {
LABEL_15:
  }
    nitro::nitro_function::nitro_function(v15);
  if (!a3) {
    return;
  }
LABEL_17:

  nitro::nitro_function::nitro_function(a3);
}

void sub_19225B1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::inner_product_kernel_cpu::set_f16_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 688) = v2;
  size_t v4 = *(std::__shared_weak_count **)(a1 + 696);
  *(void *)(a1 + 696) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, char a8)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a6;
  int v13 = (std::__shared_weak_count *)a6[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (v14 && (a8 & 1) == 0)
    {
      if (!*(unsigned char *)(a2 + 123)) {
        goto LABEL_9;
      }
LABEL_13:
      uint64_t v16 = (char *)operator new(0x58uLL);
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = 0;
      *(void *)uint64_t v16 = &unk_1EE389CD8;
      *((void *)v16 + 3) = &unk_1EE36C0D0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *((_DWORD *)v16 + 8) = a7;
      *((void *)v16 + 5) = a4;
      v16[48] = 0;
      *a1 = v16 + 24;
      a1[1] = v16;
      if (!v13)
      {
        *((void *)v16 + 7) = v14;
        *((void *)v16 + 8) = 0;
        if (!a3) {
          return;
        }
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v16 + 7) = v14;
      *((void *)v16 + 8) = v13;
      goto LABEL_15;
    }
    if (v14) {
      goto LABEL_13;
    }
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,1>,std::allocator<Espresso::blob<unsigned short,1>>,int &,int &,int &,int &,void>(&v30, a7, 1, 1, 1);
  std::string::size_type v15 = v30.__r_.__value_.__r.__words[0];
  *(_OWORD *)a1 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
  if (a5 != 2 * *(int *)(v15 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a5);
    int v18 = std::string::insert(&v27, 0, "Unexpected size s=");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = std::string::append(&v28, "/blob=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, 2 * *(int *)(v15 + 8));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v22 = &v26;
    }
    else {
      BOOL v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::string::size_type v24 = std::string::append(&v29, (const std::string::value_type *)v22, size);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v30);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v15 + 16), a4, a5);
  if (v13) {
LABEL_15:
  }
    nitro::nitro_function::nitro_function(v13);
  if (!a3) {
    return;
  }
LABEL_17:

  nitro::nitro_function::nitro_function(a3);
}

void sub_19225B550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::inner_product_kernel_cpu::set_weights(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 560) = v2;
  size_t v4 = *(std::__shared_weak_count **)(a1 + 568);
  *(void *)(a1 + 568) = v3;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, char a9)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *a6;
  std::string::size_type v15 = (std::__shared_weak_count *)a6[1];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (v16 && (a9 & 1) == 0)
    {
      if (!*(unsigned char *)(a2 + 123)) {
        goto LABEL_9;
      }
LABEL_13:
      int v18 = (char *)operator new(0x58uLL);
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      *(void *)int v18 = &unk_1EE389958;
      *((void *)v18 + 3) = &unk_1EE36BED0;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_DWORD *)v18 + 8) = a7;
      *((_DWORD *)v18 + 9) = a8;
      *((void *)v18 + 5) = a4;
      v18[48] = 0;
      *a1 = v18 + 24;
      a1[1] = v18;
      if (!v15)
      {
        *((void *)v18 + 7) = v16;
        *((void *)v18 + 8) = 0;
        if (!a3) {
          return;
        }
        goto LABEL_17;
      }
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)v18 + 7) = v16;
      *((void *)v18 + 8) = v15;
      goto LABEL_15;
    }
    if (v16) {
      goto LABEL_13;
    }
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v32, a7, a8, 1, 1);
  long long v17 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  if (a5 != 4 * *(int *)(v17 + 8) * (uint64_t)*(int *)(v17 + 12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v29, a5);
    int v20 = std::string::insert(&v29, 0, "Unexpected size s=");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    BOOL v22 = std::string::append(&v30, "/blob=");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v28, 4 * *(int *)(v17 + 8) * (uint64_t)*(int *)(v17 + 12));
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = &v28;
    }
    else {
      std::string::size_type v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    std::string v26 = std::string::append(&v31, (const std::string::value_type *)v24, size);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v32);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v17 + 16), a4, a5);
  if (v15) {
LABEL_15:
  }
    nitro::nitro_function::nitro_function(v15);
  if (!a3) {
    return;
  }
LABEL_17:

  nitro::nitro_function::nitro_function(a3);
}

void sub_19225B90C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 73) < 0) {
    operator delete(*(void **)(v39 - 96));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

void Espresso::BNNSEngine::inner_product_kernel::set_f16_biases(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 720) = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 728);
  *(void *)(a1 + 728) = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  *(_DWORD *)(a1 + 312) = *a2 != 0;
}

MIL::Builder::ProgramBuilder *Espresso::AOT::AddTotalSizeAttr@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 48))(&v232);
  uint64_t v226 = a1;
  uint64_t v6 = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)MIL::Builder::ProgramBuilder::Make();
  uint64_t v7 = v233;
  if (v233 && !atomic_fetch_add(&v233->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  Opsetuint64_t Name = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(v6);
  long long v10 = (void *)v9;
  if (v9 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  int v11 = OpsetName;
  if (v9 >= 0x17)
  {
    uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v13 = v9 | 7;
    }
    uint64_t v14 = v13 + 1;
    uint64_t v12 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    unint64_t v231 = v14 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v231) = v9;
    uint64_t v12 = __dst;
    if (!v9)
    {
      LOBYTE(__dst[0]) = 0;
      uint64_t v219 = a2[1];
      uint64_t v220 = *a2;
      if (*a2 == v219) {
        goto LABEL_348;
      }
      goto LABEL_13;
    }
  }
  Opsetuint64_t Name = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)memmove(v12, v11, (size_t)v10);
  *((unsigned char *)v10 + (void)v12) = 0;
  uint64_t v219 = a2[1];
  uint64_t v220 = *a2;
  if (*a2 == v219) {
    goto LABEL_348;
  }
LABEL_13:
  int64x2_t v218 = vdupq_n_s64(2uLL);
  int64x2_t v217 = vdupq_n_s64(4uLL);
  do
  {
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v228 = 0u;
    int v229 = 1065353216;
    std::string::size_type v15 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(OpsetName);
    size_t v17 = v16;
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    int v18 = v15;
    if (v16 >= 0x17)
    {
      uint64_t v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v20 = v16 | 7;
      }
      uint64_t v21 = v20 + 1;
      long long v19 = (void **)operator new(v20 + 1);
      size_t v259 = v17;
      unint64_t v260 = v21 | 0x8000000000000000;
      uint64_t v258 = v19;
    }
    else
    {
      HIBYTE(v260) = v16;
      long long v19 = (void **)&v258;
      if (!v16) {
        goto LABEL_23;
      }
    }
    memmove(v19, v18, v17);
LABEL_23:
    *((unsigned char *)v19 + v17) = 0;
    uint64_t Function = MIL::IRProgram::GetFunction();
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)Function + 64))(Function, &v258);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 56))(v23);
    long long v25 = **(MIL::IRObject ****)v24;
    std::string v26 = *(MIL::IRObject ***)(*(void *)v24 + 8);
    while (v25 != v26)
    {
      long long v27 = *v25;
      uint64_t v28 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)*v25 + 64))(*v25);
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 128))(v28);
      if ((v24 & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t Attributes = (void *)MIL::IRObject::GetAttributes(v27);
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v250, "function");
      std::string v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(Attributes, (uint64_t)&v250);
      if (!v30) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      MIL::IRValue::AsTensor((MIL::IRValue *)v30[5]);
      MIL::IRTensorValue::GetDataView<std::string>();
      if (!v31)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "index out of bounds");
        exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
      }
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v250.__r_.__value_.__l.__data_);
      }
      uint64_t v32 = MIL::IRProgram::GetFunction();
      unint64_t v33 = (void *)MIL::IRObject::GetAttributes(v27);
      *((unsigned char *)&v250.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v250, "backend");
      int v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v33, (uint64_t)&v250);
      if (!v34) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      MIL::IRValue::AsTensor((MIL::IRValue *)v34[5]);
      uint64_t v24 = MIL::IRTensorValue::GetDataView<std::string>();
      if (!v35)
      {
        unsigned int v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v214, "index out of bounds");
        v214->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4B8] + 16);
        __cxa_throw(v214, (struct type_info *)off_1E5745140, MEMORY[0x1E4FBA1B8]);
      }
      unsigned int v36 = (unsigned __int16 *)v24;
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v250.__r_.__value_.__l.__data_);
        int v37 = *((char *)v36 + 23);
        if ((v37 & 0x80000000) == 0)
        {
LABEL_35:
          uint64_t v38 = v37;
          uint64_t v39 = v36;
          if (v38 != 3) {
            goto LABEL_24;
          }
          goto LABEL_39;
        }
      }
      else
      {
        int v37 = *(char *)(v24 + 23);
        if ((v37 & 0x80000000) == 0) {
          goto LABEL_35;
        }
      }
      uint64_t v39 = *(unsigned __int16 **)v36;
      if (*((void *)v36 + 1) != 3) {
        goto LABEL_24;
      }
LABEL_39:
      int v40 = *v39;
      int v41 = *((unsigned __int8 *)v39 + 2);
      BOOL v42 = v40 == 28257 && v41 == 101;
      if (!v42) {
        goto LABEL_24;
      }
      long long v43 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v32 + 128))(v32);
      std::string::size_type v44 = v43 + 1;
      uint64_t v45 = (void *)*v43;
      if ((void *)*v43 != v43 + 1)
      {
        do
        {
          uint64_t v58 = (MIL::IRValueType *)v45[7];
          if (E5Common::Utils::IsTensor((uint64_t)v58))
          {
            uint64_t v60 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v58);
            unint64_t Rank = MIL::IRTensorValueType::Rank(v60);
          }
          else
          {
            if (!E5Common::Utils::IsTensorBuffer(v58, v59)) {
              goto LABEL_72;
            }
            unsigned int v62 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v58);
            long long v63 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v62);
            unint64_t Rank = MIL::IRTensorBufferValueType::GetRank(v63);
          }
          if (Rank > 1) {
            goto LABEL_72;
          }
          if (v64 < 1) {
            goto LABEL_72;
          }
          Argumentuint64_t Name = MIL::IROperation::GetArgumentName();
          if (*(char *)(ArgumentName + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)ArgumentName, *(void *)(ArgumentName + 8));
          }
          else
          {
            long long v66 = *(_OWORD *)ArgumentName;
            v250.__r_.__value_.__r.__words[2] = *(void *)(ArgumentName + 16);
            *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v66;
          }
          int64_t v251 = v64;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>((uint64_t)__p, (uint64_t)&v250, (uint64_t)&v250);
          if ((SHIBYTE(v250.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_72:
            uint64_t v67 = (void *)v45[1];
            if (!v67) {
              goto LABEL_76;
            }
            goto LABEL_73;
          }
          operator delete(v250.__r_.__value_.__l.__data_);
          uint64_t v67 = (void *)v45[1];
          if (!v67)
          {
            do
            {
LABEL_76:
              unint64_t v68 = (void *)v45[2];
              BOOL v42 = *v68 == (void)v45;
              uint64_t v45 = v68;
            }
            while (!v42);
            goto LABEL_61;
          }
          do
          {
LABEL_73:
            unint64_t v68 = v67;
            uint64_t v67 = (void *)*v67;
          }
          while (v67);
LABEL_61:
          uint64_t v45 = v68;
        }
        while (v68 != v44);
      }
      (*(void (**)(char ***__return_ptr, uint64_t))(*(void *)v32 + 160))(&v252, v32);
      uint64_t v46 = 0;
      for (unint64_t i = 0; i < (*(uint64_t (**)(MIL::IRObject *))(*(void *)v27 + 192))(v27); ++i)
      {
        if (i >= (v253 - (char *)v252) >> 3) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        float v48 = (MIL::IRValueType *)v252[i];
        if (E5Common::Utils::IsTensor((uint64_t)v48))
        {
          std::string::size_type v50 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v48);
          unint64_t v51 = MIL::IRTensorValueType::Rank(v50);
        }
        else
        {
          if (!E5Common::Utils::IsTensorBuffer(v48, v49)) {
            goto LABEL_46;
          }
          int v52 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v48);
          int v53 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v52);
          unint64_t v51 = MIL::IRTensorBufferValueType::GetRank(v53);
        }
        if (v51 <= 1)
        {
          if (v54 >= 1)
          {
            uint64_t v55 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v27 + 176))(v27);
            if (i >= (uint64_t)(v55[1] - *v55) >> 4) {
              std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t Name = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*v55 + v46));
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)Name, *(void *)(Name + 8));
            }
            else
            {
              long long v57 = *(_OWORD *)Name;
              v250.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
              *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v57;
            }
            int64_t v251 = v54;
            std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long long>>((uint64_t)__p, (uint64_t)&v250, (uint64_t)&v250);
            if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v250.__r_.__value_.__l.__data_);
            }
          }
        }
LABEL_46:
        v46 += 16;
      }
      uint64_t v24 = (uint64_t)v252;
      if (v252)
      {
        std::string::size_type v253 = (char *)v252;
        operator delete(v252);
      }
LABEL_24:
      v25 += 2;
    }
    if (SHIBYTE(v260) < 0) {
      operator delete(v258);
    }
    std::string::size_type v69 = E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName((E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)v24);
    size_t v71 = v70;
    if (v70 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v72 = v69;
    if (v70 >= 0x17)
    {
      uint64_t v74 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17) {
        uint64_t v74 = v70 | 7;
      }
      uint64_t v75 = v74 + 1;
      std::string::size_type v73 = (void **)operator new(v74 + 1);
      size_t v259 = v71;
      unint64_t v260 = v75 | 0x8000000000000000;
      uint64_t v258 = v73;
LABEL_90:
      memmove(v73, v72, v71);
      goto LABEL_91;
    }
    HIBYTE(v260) = v70;
    std::string::size_type v73 = (void **)&v258;
    if (v70) {
      goto LABEL_90;
    }
LABEL_91:
    *((unsigned char *)v73 + v71) = 0;
    uint64_t v76 = MIL::IRProgram::GetFunction();
    uint64_t v221 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v76 + 64))(v76, &v258);
    MIL::Builder::ProgramBuilder::GetFunction();
    MIL::Builder::FunctionBuilder::GetBlock();
    std::string::size_type v253 = 0;
    uint64_t v254 = 0;
    uint64_t v252 = &v253;
    std::string::size_type v77 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v76 + 128))(v76);
    int v78 = (void *)*v77;
    long long v223 = v77 + 1;
    if ((void *)*v77 != v77 + 1)
    {
LABEL_111:
      uint64_t v88 = v78 + 4;
      if (std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(v78 + 4)))
      {
        unint64_t v89 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v226 + 40))(v226);
        long long v90 = (MIL::MILContext *)v78[7];
        std::string::size_type v91 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, (uint64_t)(v78 + 4));
        if (!v91) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        if (*((char *)v78 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v250, (const std::string::value_type *)v78[4], v78[5]);
        }
        else
        {
          *(_OWORD *)&v250.__r_.__value_.__l.__data_ = *v88;
          v250.__r_.__value_.__r.__words[2] = v78[6];
        }
        int64_t v251 = TypeWithTotalSizeAttr;
        uint64_t v93 = v253;
        std::string::size_type v94 = &v253;
        unint64_t v95 = &v253;
        if (v253)
        {
          char v96 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
          if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v250.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v250.__r_.__value_.__l.__size_;
          }
          if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v98 = &v250;
          }
          else {
            std::string::size_type v98 = (std::string *)v250.__r_.__value_.__r.__words[0];
          }
          while (1)
          {
            while (1)
            {
              std::string::size_type v94 = (char **)v93;
              uint8x8_t v101 = (char *)*((void *)v93 + 4);
              unint64_t v99 = v93 + 32;
              long long v100 = v101;
              int v102 = v99[23];
              if (v102 >= 0) {
                size_t v103 = v99[23];
              }
              else {
                size_t v103 = *((void *)v99 + 1);
              }
              if (v102 >= 0) {
                std::string::size_type v104 = v99;
              }
              else {
                std::string::size_type v104 = v100;
              }
              if (v103 >= size) {
                size_t v105 = size;
              }
              else {
                size_t v105 = v103;
              }
              int v106 = memcmp(v98, v104, v105);
              BOOL v107 = size < v103;
              if (v106) {
                BOOL v107 = v106 < 0;
              }
              if (!v107) {
                break;
              }
              uint64_t v93 = *v94;
              unint64_t v95 = v94;
              if (!*v94) {
                goto LABEL_143;
              }
            }
            int v108 = memcmp(v104, v98, v105);
            BOOL v109 = v103 < size;
            if (v108) {
              BOOL v109 = v108 < 0;
            }
            if (!v109) {
              break;
            }
            uint64_t v93 = v94[1];
            if (!v93)
            {
              unint64_t v95 = v94 + 1;
              goto LABEL_143;
            }
          }
LABEL_192:
          long long v113 = v223;
          if (v96 < 0) {
            goto LABEL_222;
          }
          goto LABEL_223;
        }
LABEL_143:
        long long v110 = (char *)operator new(0x40uLL);
        int8x8_t v111 = (std::string *)(v110 + 32);
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v111, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
          uint64_t TypeWithTotalSizeAttr = v251;
        }
        else
        {
          *(_OWORD *)&v111->__r_.__value_.__l.__data_ = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
          *((void *)v110 + 6) = *((void *)&v250.__r_.__value_.__l + 2);
        }
        *((void *)v110 + 7) = TypeWithTotalSizeAttr;
        *(void *)long long v110 = 0;
        *((void *)v110 + 1) = 0;
        *((void *)v110 + 2) = v94;
        *unint64_t v95 = v110;
        if (*v252)
        {
          uint64_t v252 = (char **)*v252;
          long long v110 = *v95;
        }
        uint8x8_t v112 = v253;
        v110[24] = v110 == v253;
        long long v113 = v223;
        if (v110 != v112)
        {
          do
          {
            uint64_t v114 = *((void *)v110 + 2);
            if (*(unsigned char *)(v114 + 24)) {
              break;
            }
            long long v115 = *(char **)(v114 + 16);
            uint64_t v116 = *(void *)v115;
            if (*(void *)v115 == v114)
            {
              uint64_t v119 = *((void *)v115 + 1);
              if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), std::string::size_type v117 = (unsigned char *)(v119 + 24), v120))
              {
                if (*(char **)v114 == v110) {
                  goto LABEL_208;
                }
                goto LABEL_159;
              }
            }
            else if (!v116 || (v118 = *(unsigned __int8 *)(v116 + 24), std::string::size_type v117 = (unsigned char *)(v116 + 24), v118))
            {
              if (*(char **)v114 == v110)
              {
                uint64_t v149 = *((void *)v110 + 1);
                *(void *)uint64_t v114 = v149;
                if (v149)
                {
                  *(void *)(v149 + 16) = v114;
                  long long v115 = *(char **)(v114 + 16);
                }
                *((void *)v110 + 2) = v115;
                *(void *)(*(void *)(v114 + 16) + 8 * (**(void **)(v114 + 16) != v114)) = v110;
                *((void *)v110 + 1) = v114;
                *(void *)(v114 + 16) = v110;
                long long v115 = (char *)*((void *)v110 + 2);
              }
              else
              {
                long long v110 = (char *)*((void *)v110 + 2);
              }
              v110[24] = 1;
              v115[24] = 0;
              uint64_t v114 = *((void *)v115 + 1);
              long long v150 = *(char **)v114;
              *((void *)v115 + 1) = *(void *)v114;
              if (v150) {
                *((void *)v150 + 2) = v115;
              }
              *(void *)(v114 + 16) = *((void *)v115 + 2);
              *(void *)(*((void *)v115 + 2) + 8 * (**((void **)v115 + 2) != (void)v115)) = v114;
              *(void *)uint64_t v114 = v115;
              goto LABEL_220;
            }
            *(unsigned char *)(v114 + 24) = 1;
            long long v110 = v115;
            v115[24] = v115 == v112;
            *std::string::size_type v117 = 1;
          }
          while (v115 != v112);
        }
LABEL_221:
        ++v254;
        if ((*((unsigned char *)&v250.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_222;
        }
        goto LABEL_223;
      }
      if (*((char *)v78 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v250, (const std::string::value_type *)v78[4], v78[5]);
      }
      else
      {
        *(_OWORD *)&v250.__r_.__value_.__l.__data_ = *v88;
        v250.__r_.__value_.__r.__words[2] = v78[6];
      }
      int64_t v124 = v78[7];
      int64_t v251 = v124;
      long long v125 = v253;
      long long v126 = &v253;
      std::string::size_type v127 = &v253;
      if (v253)
      {
        char v96 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v128 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v128 = v250.__r_.__value_.__l.__size_;
        }
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v129 = &v250;
        }
        else {
          long long v129 = (std::string *)v250.__r_.__value_.__r.__words[0];
        }
        do
        {
          while (1)
          {
            long long v126 = (char **)v125;
            char v132 = (char *)*((void *)v125 + 4);
            long long v130 = v125 + 32;
            std::string::size_type v131 = v132;
            int v133 = v130[23];
            if (v133 >= 0) {
              size_t v134 = v130[23];
            }
            else {
              size_t v134 = *((void *)v130 + 1);
            }
            if (v133 >= 0) {
              long long v135 = v130;
            }
            else {
              long long v135 = v131;
            }
            if (v134 >= v128) {
              size_t v136 = v128;
            }
            else {
              size_t v136 = v134;
            }
            int v137 = memcmp(v129, v135, v136);
            BOOL v138 = v128 < v134;
            if (v137) {
              BOOL v138 = v137 < 0;
            }
            if (!v138) {
              break;
            }
            long long v125 = *v126;
            std::string::size_type v127 = v126;
            if (!*v126) {
              goto LABEL_190;
            }
          }
          int v139 = memcmp(v135, v129, v136);
          BOOL v140 = v134 < v128;
          if (v139) {
            BOOL v140 = v139 < 0;
          }
          if (!v140) {
            goto LABEL_192;
          }
          long long v125 = v126[1];
        }
        while (v125);
        std::string::size_type v127 = v126 + 1;
      }
LABEL_190:
      std::string v141 = (char *)operator new(0x40uLL);
      uint64_t v142 = (std::string *)(v141 + 32);
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v142, v250.__r_.__value_.__l.__data_, v250.__r_.__value_.__l.__size_);
        int64_t v124 = v251;
      }
      else
      {
        *(_OWORD *)&v142->__r_.__value_.__l.__data_ = *(_OWORD *)&v250.__r_.__value_.__l.__data_;
        *((void *)v141 + 6) = *((void *)&v250.__r_.__value_.__l + 2);
      }
      long long v113 = v223;
      *((void *)v141 + 7) = v124;
      *(void *)std::string v141 = 0;
      *((void *)v141 + 1) = 0;
      *((void *)v141 + 2) = v126;
      *std::string::size_type v127 = v141;
      if (*v252)
      {
        uint64_t v252 = (char **)*v252;
        std::string v141 = *v127;
      }
      long long v143 = v253;
      v141[24] = v141 == v253;
      if (v141 == v143) {
        goto LABEL_221;
      }
      while (1)
      {
        uint64_t v114 = *((void *)v141 + 2);
        if (*(unsigned char *)(v114 + 24)) {
          goto LABEL_221;
        }
        long long v115 = *(char **)(v114 + 16);
        uint64_t v144 = *(void *)v115;
        if (*(void *)v115 == v114)
        {
          uint64_t v147 = *((void *)v115 + 1);
          if (!v147 || (int v148 = *(unsigned __int8 *)(v147 + 24), v145 = (unsigned char *)(v147 + 24), v148))
          {
            if (*(char **)v114 == v141)
            {
LABEL_208:
              *(unsigned char *)(v114 + 24) = 1;
              v115[24] = 0;
              uint64_t v123 = *(void *)(v114 + 8);
              *(void *)long long v115 = v123;
              if (!v123) {
                goto LABEL_163;
              }
            }
            else
            {
LABEL_159:
              std::string::size_type v121 = *(uint64_t **)(v114 + 8);
              uint64_t v122 = *v121;
              *(void *)(v114 + 8) = *v121;
              if (v122)
              {
                *(void *)(v122 + 16) = v114;
                long long v115 = *(char **)(v114 + 16);
              }
              v121[2] = (uint64_t)v115;
              *(void *)(*(void *)(v114 + 16) + 8 * (**(void **)(v114 + 16) != v114)) = v121;
              *std::string::size_type v121 = v114;
              *(void *)(v114 + 16) = v121;
              long long v115 = (char *)v121[2];
              uint64_t v114 = *(void *)v115;
              *((unsigned char *)v121 + 24) = 1;
              v115[24] = 0;
              uint64_t v123 = *(void *)(v114 + 8);
              *(void *)long long v115 = v123;
              if (!v123)
              {
LABEL_163:
                *(void *)(v114 + 16) = *((void *)v115 + 2);
                *(void *)(*((void *)v115 + 2) + 8 * (**((void **)v115 + 2) != (void)v115)) = v114;
                *(void *)(v114 + 8) = v115;
LABEL_220:
                *((void *)v115 + 2) = v114;
                goto LABEL_221;
              }
            }
            *(void *)(v123 + 16) = v115;
            goto LABEL_163;
          }
        }
        else if (!v144 || (int v146 = *(unsigned __int8 *)(v144 + 24), v145 = (unsigned char *)(v144 + 24), v146))
        {
          if (*(char **)v114 == v141)
          {
            uint64_t v153 = *((void *)v141 + 1);
            *(void *)uint64_t v114 = v153;
            if (v153)
            {
              *(void *)(v153 + 16) = v114;
              long long v115 = *(char **)(v114 + 16);
            }
            *((void *)v141 + 2) = v115;
            *(void *)(*(void *)(v114 + 16) + 8 * (**(void **)(v114 + 16) != v114)) = v141;
            *((void *)v141 + 1) = v114;
            *(void *)(v114 + 16) = v141;
            long long v115 = (char *)*((void *)v141 + 2);
          }
          else
          {
            std::string v141 = (char *)*((void *)v141 + 2);
          }
          v141[24] = 1;
          v115[24] = 0;
          long long v154 = (char **)*((void *)v115 + 1);
          long long v155 = *v154;
          *((void *)v115 + 1) = *v154;
          if (v155) {
            *((void *)v155 + 2) = v115;
          }
          v154[2] = (char *)*((void *)v115 + 2);
          *(void *)(*((void *)v115 + 2) + 8 * (**((void **)v115 + 2) != (void)v115)) = v154;
          *long long v154 = v115;
          *((void *)v115 + 2) = v154;
          ++v254;
          if ((*((unsigned char *)&v250.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_223;
          }
LABEL_222:
          operator delete(v250.__r_.__value_.__l.__data_);
LABEL_223:
          MIL::Builder::FunctionBuilder::RemoveInput();
          uint64_t v151 = (void *)v78[1];
          if (v151)
          {
            do
            {
              std::string::size_type v152 = v151;
              uint64_t v151 = (void *)*v151;
            }
            while (v151);
          }
          else
          {
            do
            {
              std::string::size_type v152 = (void *)v78[2];
              BOOL v42 = *v152 == (void)v78;
              int v78 = v152;
            }
            while (!v42);
          }
          int v78 = v152;
          if (v152 == v113) {
            break;
          }
          goto LABEL_111;
        }
        *(unsigned char *)(v114 + 24) = 1;
        std::string v141 = v115;
        v115[24] = v115 == v143;
        unsigned char *v145 = 1;
        if (v115 == v143) {
          goto LABEL_221;
        }
      }
    }
    std::string::size_type v79 = (char *)v252;
    if (v252 != &v253)
    {
      do
      {
        if (v79[55] < 0) {
          std::string::__init_copy_ctor_external(&v250, *((const std::string::value_type **)v79 + 4), *((void *)v79 + 5));
        }
        else {
          std::string v250 = *(std::string *)(v79 + 32);
        }
        MIL::Builder::FunctionBuilder::AddInput();
        if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v250.__r_.__value_.__l.__data_);
          std::string v86 = (char *)*((void *)v79 + 1);
          if (v86)
          {
            do
            {
LABEL_105:
              uint64_t v87 = (char **)v86;
              std::string v86 = *(char **)v86;
            }
            while (v86);
            goto LABEL_97;
          }
        }
        else
        {
          std::string v86 = (char *)*((void *)v79 + 1);
          if (v86) {
            goto LABEL_105;
          }
        }
        do
        {
          uint64_t v87 = (char **)*((void *)v79 + 2);
          BOOL v42 = *v87 == v79;
          std::string::size_type v79 = (char *)v87;
        }
        while (!v42);
LABEL_97:
        std::string::size_type v79 = (char *)v87;
      }
      while (v87 != &v253);
    }
    unint64_t NumOperations = MIL::Builder::BlockBuilder::GetNumOperations(v255);
    unint64_t v81 = NumOperations;
    uint64_t v247 = 0;
    long long v248 = 0;
    uint64_t v249 = 0;
    if (NumOperations)
    {
      if (NumOperations >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v82 = 8 * NumOperations;
      uint64_t v83 = (int64x2_t *)operator new(8 * NumOperations);
      uint64_t v247 = v83;
      uint64_t v249 = &v83->i8[8 * v81];
      bzero(v83, 8 * v81);
      long long v248 = (int64x2_t *)((char *)v83 + v82);
      if ((unint64_t)(v82 - 8) < 0x18)
      {
        uint64_t v84 = 0;
        long long v85 = (uint64_t *)v83;
        goto LABEL_240;
      }
      unint64_t v156 = ((unint64_t)(v82 - 8) >> 3) + 1;
      uint64_t v84 = v156 & 0x3FFFFFFFFFFFFFFCLL;
      long long v85 = &v83->i64[v156 & 0x3FFFFFFFFFFFFFFCLL];
      std::string v157 = v83 + 1;
      uint64_t v158 = v156 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v159 = (int64x2_t)xmmword_192DBFE30;
      do
      {
        v157[-1] = v159;
        *std::string v157 = vaddq_s64(v159, v218);
        int64x2_t v159 = vaddq_s64(v159, v217);
        v157 += 2;
        v158 -= 4;
      }
      while (v158);
      if (v156 != v84)
      {
        do
LABEL_240:
          *v85++ = v84++;
        while (v85 != (uint64_t *)&v83->i8[v82]);
      }
    }
    else
    {
      uint64_t v83 = 0;
    }
    MIL::Builder::BlockBuilder::RemoveOperations();
    long long v160 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v221 + 56))(v221);
    uint64_t v161 = (void *)**v160;
    uint64_t v222 = (void *)(*v160)[1];
    if (v161 == v222)
    {
      if (v83) {
        goto LABEL_243;
      }
      goto LABEL_244;
    }
    while (2)
    {
      uint64_t v224 = v161;
      uint64_t v165 = *v161;
      float v244 = 0;
      long long v245 = 0;
      float v246 = 0;
      int v166 = (long long **)(*(uint64_t (**)(uint64_t))(*(void *)v165 + 176))(v165);
      uint64_t v225 = v165;
      uint64_t v168 = *v166;
      long long v167 = v166[1];
      if (*v166 != v167)
      {
        while (1)
        {
          uint64_t v170 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)v168);
          if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, v170))
          {
            std::string::size_type v175 = v245;
            if (v245 >= v246)
            {
              int v189 = v244;
              uint64_t v190 = (v245 - v244) >> 4;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 60) {
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v192 = v246 - v244;
              if ((v246 - v244) >> 3 > v191) {
                unint64_t v191 = v192 >> 3;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v193 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              std::string::size_type v194 = (char *)operator new(16 * v193);
              uint64_t v195 = &v194[16 * v190];
              long long v196 = *v168;
              *(_OWORD *)uint64_t v195 = *v168;
              if (*((void *)&v196 + 1))
              {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v196 + 1) + 8), 1uLL, memory_order_relaxed);
                std::string::size_type v175 = v245;
              }
              long long v169 = v195 + 16;
              if (v175 == v189)
              {
                float v244 = &v194[16 * v190];
                long long v245 = v195 + 16;
                float v246 = &v194[16 * v193];
              }
              else
              {
                do
                {
                  long long v197 = *((_OWORD *)v175 - 1);
                  v175 -= 16;
                  *((_OWORD *)v195 - 1) = v197;
                  v195 -= 16;
                  *(void *)std::string::size_type v175 = 0;
                  *((void *)v175 + 1) = 0;
                }
                while (v175 != v189);
                int v189 = v244;
                std::string::size_type v198 = v245;
                float v244 = v195;
                long long v245 = v169;
                float v246 = &v194[16 * v193];
                while (v198 != v189)
                {
                  char v199 = (std::__shared_weak_count *)*((void *)v198 - 1);
                  if (v199 && !atomic_fetch_add(&v199->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                  v198 -= 16;
                }
              }
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(void *)long long v245 = *(void *)v168;
              uint64_t v176 = *((void *)v168 + 1);
              *((void *)v175 + 1) = v176;
              if (v176) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v176 + 8), 1uLL, memory_order_relaxed);
              }
              long long v169 = v175 + 16;
            }
            long long v245 = v169;
            goto LABEL_257;
          }
          std::string::size_type v171 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(void *)v226 + 40))(v226);
          Type = (MIL::MILContext *)MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v168);
          long long v173 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(__p, v170);
          if (!v173) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          if (*(char *)(v170 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v240, *(const std::string::value_type **)v170, *(void *)(v170 + 8));
          }
          else
          {
            long long v174 = *(_OWORD *)v170;
            v240.__r_.__value_.__r.__words[2] = *(void *)(v170 + 16);
            *(_OWORD *)&v240.__r_.__value_.__l.__data_ = v174;
          }
          MIL::IRNamedValueType::Make();
          uint64_t v242 = v241;
          if (v241) {
            operator new();
          }
          uint64_t v243 = 0;
          uint64_t v241 = 0;
          uint64_t v178 = v245;
          if (v245 < v246)
          {
            *(void *)long long v245 = 0;
            *((void *)v178 + 1) = 0;
            long long v177 = v178 + 16;
            uint64_t v242 = 0;
            uint64_t v243 = 0;
          }
          else
          {
            long long v179 = v244;
            uint64_t v180 = (v245 - v244) >> 4;
            unint64_t v181 = v180 + 1;
            if ((unint64_t)(v180 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v182 = v246 - v244;
            if ((v246 - v244) >> 3 > v181) {
              unint64_t v181 = v182 >> 3;
            }
            if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v183 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v183 = v181;
            }
            if (v183 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v184 = (char *)operator new(16 * v183);
            std::string::size_type v185 = &v184[16 * v180];
            *(void *)std::string::size_type v185 = 0;
            long long v177 = v185 + 16;
            *(void *)&v184[v178 - v179 + 8] = 0;
            uint64_t v242 = 0;
            uint64_t v243 = 0;
            if (v178 == v179)
            {
              float v244 = v185;
              long long v245 = v185 + 16;
              float v246 = &v184[16 * v183];
            }
            else
            {
              do
              {
                long long v186 = *((_OWORD *)v178 - 1);
                v178 -= 16;
                *((_OWORD *)v185 - 1) = v186;
                v185 -= 16;
                *(void *)uint64_t v178 = 0;
                *((void *)v178 + 1) = 0;
              }
              while (v178 != v179);
              uint64_t v178 = v244;
              long long v187 = v245;
              float v244 = v185;
              long long v245 = v177;
              float v246 = &v184[16 * v183];
              while (v187 != v178)
              {
                uint64_t v188 = (std::__shared_weak_count *)*((void *)v187 - 1);
                if (v188 && !atomic_fetch_add(&v188->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                {
                  ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                  std::__shared_weak_count::__release_weak(v188);
                }
                v187 -= 16;
              }
            }
            if (v178) {
              operator delete(v178);
            }
          }
          long long v245 = v177;
          long long v200 = v243;
          if (v243)
          {
            if (!atomic_fetch_add(&v243->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          uint64_t v201 = v241;
          uint64_t v241 = 0;
          if (v201) {
            goto LABEL_308;
          }
LABEL_309:
          if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v240.__r_.__value_.__l.__data_);
            if (++v168 == v167) {
              goto LABEL_253;
            }
          }
          else
          {
LABEL_257:
            if (++v168 == v167) {
              goto LABEL_253;
            }
          }
        }
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
        uint64_t v201 = v241;
        uint64_t v241 = 0;
        if (!v201) {
          goto LABEL_309;
        }
LABEL_308:
        MIL::IRNamedValueType::~IRNamedValueType(v201);
        MEMORY[0x192FF16B0]();
        goto LABEL_309;
      }
LABEL_253:
      (*(void (**)(MIL::IRNamedValueType **__return_ptr))(*(void *)v225 + 32))(&v242);
      (*(void (**)(MIL::IRNamedValueType *, char **))(*(void *)v242 + 184))(v242, &v244);
      int32x2_t v237 = v242;
      if (v242) {
        operator new();
      }
      uint64_t v238 = 0;
      uint64_t v242 = 0;
      MIL::Builder::OperationBuilder::Make();
      uint64_t v235 = 0;
      double v236 = 0;
      MIL::Builder::BlockBuilder::AddOperation();
      long long v202 = v236;
      if (v236 && !atomic_fetch_add(&v236->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
        int v203 = v239;
        if (v239) {
          goto LABEL_320;
        }
      }
      else
      {
        int v203 = v239;
        if (v239)
        {
LABEL_320:
          if (!atomic_fetch_add(&v203->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
      }
      std::string::size_type v204 = v238;
      if (v238 && !atomic_fetch_add(&v238->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
        int v205 = v242;
        uint64_t v242 = 0;
        if (v205) {
LABEL_326:
        }
          (*(void (**)(MIL::IRNamedValueType *))(*(void *)v205 + 8))(v205);
      }
      else
      {
        int v205 = v242;
        uint64_t v242 = 0;
        if (v205) {
          goto LABEL_326;
        }
      }
      long long v206 = v244;
      if (v244)
      {
        uint64_t v207 = v245;
        long long v164 = v244;
        if (v245 != v244)
        {
          do
          {
            std::string::size_type v208 = (std::__shared_weak_count *)*((void *)v207 - 1);
            if (v208 && !atomic_fetch_add(&v208->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
              std::__shared_weak_count::__release_weak(v208);
            }
            v207 -= 16;
          }
          while (v207 != v206);
          long long v164 = v244;
        }
        long long v245 = v206;
        operator delete(v164);
      }
      uint64_t v161 = v224 + 2;
      if (v224 + 2 != v222) {
        continue;
      }
      break;
    }
    uint64_t v83 = v247;
    if (v247)
    {
LABEL_243:
      long long v248 = v83;
      operator delete(v83);
    }
LABEL_244:
    std::__tree<std::string>::destroy((uint64_t)&v252, v253);
    std::string::size_type v162 = v256;
    if (v256 && !atomic_fetch_add(&v256->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
      std::__shared_weak_count::__release_weak(v162);
      uint64_t v163 = v257;
      if (v257) {
        goto LABEL_247;
      }
    }
    else
    {
      uint64_t v163 = v257;
      if (v257)
      {
LABEL_247:
        if (!atomic_fetch_add(&v163->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
    }
    if (SHIBYTE(v260) < 0)
    {
      operator delete(v258);
      uint64_t v209 = (void **)v228[0];
      if (!v228[0]) {
        goto LABEL_343;
      }
    }
    else
    {
      uint64_t v209 = (void **)v228[0];
      if (!v228[0]) {
        goto LABEL_343;
      }
    }
    do
    {
      long long v210 = (void **)*v209;
      if (*((char *)v209 + 39) < 0) {
        operator delete(v209[2]);
      }
      operator delete(v209);
      uint64_t v209 = v210;
    }
    while (v210);
LABEL_343:
    Opsetuint64_t Name = (E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *)__p[0];
    __p[0] = 0;
    if (OpsetName) {
      operator delete(OpsetName);
    }
    v220 += 24;
  }
  while (v220 != v219);
LABEL_348:
  MIL::Builder::ProgramBuilder::CreateProgram((uint64_t *)__p, v234);
  if (((*((uint64_t (**)(void **))__p[1] + 2))(&__p[1]) & 1) == 0)
  {
    long long v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&__p[1]);
    std::operator+<char>();
    std::runtime_error::runtime_error(v216, &v250);
    __cxa_throw(v216, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v211 = __p[0];
  __p[0] = 0;
  *a3 = v211;
  MEMORY[0x192FEF390](&__p[1]);
  uint64_t v212 = __p[0];
  __p[0] = 0;
  if (v212) {
    (*(void (**)(void *))(*(void *)v212 + 8))(v212);
  }
  if (SHIBYTE(v231) < 0) {
    operator delete(__dst[0]);
  }
  __n128 result = v234;
  uint64_t v234 = 0;
  if (result) {
    return (MIL::Builder::ProgramBuilder *)(*(uint64_t (**)(MIL::Builder::ProgramBuilder *))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_19225D4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55)
{
  if (*(char *)(v57 - 185) < 0)
  {
    operator delete(*(void **)(v57 - 208));
    if ((v56 & 1) == 0)
    {
LABEL_6:
      std::pair<std::unique_ptr<MIL::IRProgram>,MIL::ValidationResult>::~pair((uint64_t *)&a25);
      if (a38 < 0)
      {
        operator delete(__p);
        uint64_t v59 = a41;
        a41 = 0;
        if (v59) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v59 = a41;
        a41 = 0;
        if (v59)
        {
LABEL_8:
          (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v56)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v55);
  goto LABEL_6;
}

uint64_t Espresso::AOT::IsFunctionSegmented(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  Opsetuint64_t Name = (MIL::Opsets::Common::ios15::ios15Opset *)E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(a1);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v4 = OpsetName;
  uint64_t v5 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v45 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v45) = v3;
  uint64_t v6 = __dst;
  if (v3) {
LABEL_8:
  }
    Opsetuint64_t Name = (MIL::Opsets::Common::ios15::ios15Opset *)memmove(v6, v4, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  unint64_t v9 = (MIL::Opsets::Common::ios16::ios16Opset *)MIL::Opsets::Common::ios15::ios15Opset::GetOpsetName(OpsetName);
  int v11 = (void *)v10;
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v12 = v9;
  if (v10 >= 0x17)
  {
    uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v14 = v10 | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v13 = operator new(v14 + 1);
    v42[1] = v11;
    unint64_t v43 = v15 | 0x8000000000000000;
    v42[0] = v13;
    goto LABEL_16;
  }
  HIBYTE(v43) = v10;
  uint64_t v13 = v42;
  if (v10) {
LABEL_16:
  }
    unint64_t v9 = (MIL::Opsets::Common::ios16::ios16Opset *)memmove(v13, v12, (size_t)v11);
  *((unsigned char *)v11 + (void)v13) = 0;
  unint64_t v16 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)MIL::Opsets::Common::ios16::ios16Opset::GetOpsetName(v9);
  int v18 = (void *)v17;
  if (v17 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  long long v19 = v16;
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    uint64_t v20 = operator new(v21 + 1);
    v40[1] = v18;
    unint64_t v41 = v22 | 0x8000000000000000;
    v40[0] = v20;
    goto LABEL_24;
  }
  HIBYTE(v41) = v17;
  uint64_t v20 = v40;
  if (v17) {
LABEL_24:
  }
    unint64_t v16 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)memmove(v20, v19, (size_t)v18);
  *((unsigned char *)v18 + (void)v20) = 0;
  uint64_t v23 = MIL::Opsets::Train::ios16Train::ios16_trainOpset::GetOpsetName(v16);
  long long v25 = (void *)v24;
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string v26 = (const void *)v23;
  if (v24 >= 0x17)
  {
    uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v28 = v24 | 7;
    }
    uint64_t v29 = v28 + 1;
    long long v27 = operator new(v28 + 1);
    v38[1] = v25;
    unint64_t v39 = v29 | 0x8000000000000000;
    v38[0] = v27;
    goto LABEL_32;
  }
  HIBYTE(v39) = v24;
  long long v27 = v38;
  if (v24) {
LABEL_32:
  }
    memmove(v27, v26, (size_t)v25);
  *((unsigned char *)v25 + (void)v27) = 0;
  char v37 = 5;
  strcpy((char *)v36, "ios17");
  char v35 = 5;
  strcpy((char *)__p, "ios18");
  uint64_t Function = MIL::IRProgram::GetFunction();
  if (!(*(uint64_t (**)(uint64_t, void **))(*(void *)Function + 64))(Function, __dst))
  {
    uint64_t v32 = 0;
    goto LABEL_39;
  }
  uint64_t v31 = operator new(0x38uLL);
  void *v31 = &unk_1EE37CD78;
  v31[1] = a1;
  uint64_t v31[2] = v42;
  v31[3] = v40;
  v31[4] = v36;
  v31[5] = __p;
  v31[6] = v38;
  uint64_t v47 = v31;
  uint64_t v32 = MIL::Util::Walk();
  if (v47 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
    if (v35 < 0) {
      goto LABEL_47;
    }
LABEL_40:
    if (v37 < 0) {
      goto LABEL_48;
    }
LABEL_41:
    if (SHIBYTE(v39) < 0) {
      goto LABEL_49;
    }
LABEL_42:
    if (SHIBYTE(v41) < 0) {
      goto LABEL_50;
    }
LABEL_43:
    if (SHIBYTE(v43) < 0) {
      goto LABEL_51;
    }
    goto LABEL_44;
  }
  if (!v47)
  {
LABEL_39:
    if (v35 < 0) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }
  (*(void (**)(void))(*v47 + 40))();
  if ((v35 & 0x80000000) == 0) {
    goto LABEL_40;
  }
LABEL_47:
  operator delete(__p[0]);
  if ((v37 & 0x80000000) == 0) {
    goto LABEL_41;
  }
LABEL_48:
  operator delete(v36[0]);
  if ((SHIBYTE(v39) & 0x80000000) == 0) {
    goto LABEL_42;
  }
LABEL_49:
  operator delete(v38[0]);
  if ((SHIBYTE(v41) & 0x80000000) == 0) {
    goto LABEL_43;
  }
LABEL_50:
  operator delete(v40[0]);
  if (SHIBYTE(v43) < 0)
  {
LABEL_51:
    operator delete(v42[0]);
    if (SHIBYTE(v45) < 0) {
      goto LABEL_52;
    }
    return v32;
  }
LABEL_44:
  if (SHIBYTE(v45) < 0) {
LABEL_52:
  }
    operator delete(__dst[0]);
  return v32;
}

void sub_19225DE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  std::function<BOOL ()(MIL::IROperation const&)>::~function((void *)(v45 - 104));
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a22);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a28);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a45 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
LABEL_13:
    operator delete(a40);
    _Unwind_Resume(a1);
  }
LABEL_12:
  operator delete(a34);
  if ((a45 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

const char *E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOpsetName(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  return "E5Backend_ios16";
}

void E5RT::ExecutionStream::CreateExecutionStream(E5RT::ExecutionStream *this)
{
}

void sub_19225DF88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT::ExecutionStreamImpl>::~unique_ptr[abi:ne180100]((E5RT::ExecutionStreamImpl **)va);
  _Unwind_Resume(a1);
}

void sub_19225DF9C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10A0C409CCEF1BCLL);
  _Unwind_Resume(a1);
}

double E5RT::ExecutionStreamImpl::ExecutionStreamImpl(E5RT::ExecutionStreamImpl *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((void *)this + 8) = atomic_fetch_add(&E5RT::ExecutionStreamImpl::m_streamId_counter, 1uLL);
  *((void *)this + 9) = 0;
  *((unsigned char *)this + 80) = 0;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 96) = 0;
  *((unsigned char *)this + 100) = 0;
  *((_WORD *)this + 52) = 0;
  return result;
}

void E5RT::ComputeProgram::LoadProgram()
{
}

void sub_19225EB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  E5RT::Status::~Status((E5RT::Status *)&a11);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 121) < 0)
  {
    operator delete(*(void **)(v34 - 144));
    if ((v30 & 1) == 0)
    {
LABEL_8:
      E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv((E5RT::ComputeProgramHeaderPriv *)&a17);
      E5RT_FB::ProgramT::~ProgramT(v31);
      MEMORY[0x192FF16B0]();
      v33[2](v33);

      kdebug_trace();
      uint64_t v36 = *(void *)(v34 - 168);
      *(void *)(v34 - 168) = 0;
      if (v36)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

void E5RT::ComputeProgramHeaderPriv::~ComputeProgramHeaderPriv(E5RT::ComputeProgramHeaderPriv *this)
{
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1000C40B2B1FC38);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1000C40B2B1FC38);
  }

  JUMPOUT(0x192FF16B0);
}

void E5Common::AutoResourcePtr::MakeFromFile()
{
}

void sub_19225F0A0(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10F1C40C2655342);
  _Unwind_Resume(a1);
}

void *E5Common::AutoMmapPtr::AutoMmapPtr(void *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  *a1 = &unk_1EE3278A0;
  a1[1] = 0;
  unint64_t v10 = a1 + 1;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (*(char *)(a2 + 23) >= 0) {
    int v11 = (const char *)a2;
  }
  else {
    int v11 = *(const char **)a2;
  }
  if (stat(v11, &v76))
  {
    std::operator+<char>();
    uint64_t v36 = std::string::append(&v71, ", errno: ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = __error();
    std::to_string(&v70, *v38);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v39 = &v70;
    }
    else {
      unint64_t v39 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v70.__r_.__value_.__l.__size_;
    }
    unint64_t v41 = std::string::append(&v72, (const std::string::value_type *)v39, size);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    unint64_t v43 = std::string::append(&v73, " (");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    uint64_t v45 = __error();
    uint64_t v46 = strerror(*v45);
    uint64_t v47 = std::string::append(&v74, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    uint64_t v49 = std::string::append(&v75, ")");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    size_t v78 = v49->__r_.__value_.__r.__words[2];
    long long v77 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_42;
      }
    }
    else if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_42:
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_43;
      }
      goto LABEL_70;
    }
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_43:
      operator delete(v73.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      goto LABEL_71;
    }
LABEL_70:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_44:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_45;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_45:
      operator delete(v72.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v75, "AutoMmapPtr");
        E5RT::Status::Status(&v74, 1, &v77);
        E5RT::E5RTError::E5RTError(exception, &v75, &v74);
      }
LABEL_73:
      operator delete(v71.__r_.__value_.__l.__data_);
      goto LABEL_74;
    }
LABEL_72:
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_73;
  }
  size_t v12 = E5RT::CastToSizeT<long long>(v76.st_size - a5);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v13 = (const char *)a2;
  }
  else {
    uint64_t v13 = *(const char **)a2;
  }
  uint64_t v14 = fopen(v13, "r");
  uint64_t v15 = v14;
  if (!v14)
  {
    std::operator+<char>();
    unint64_t v51 = std::string::append(&v71, ", errno: ");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    int v53 = __error();
    std::to_string(&v70, *v53);
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v54 = &v70;
    }
    else {
      int64_t v54 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v55 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v55 = v70.__r_.__value_.__l.__size_;
    }
    int v56 = std::string::append(&v72, (const std::string::value_type *)v54, v55);
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    uint64_t v58 = std::string::append(&v73, " (");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    uint64_t v60 = __error();
    uint64_t v61 = strerror(*v60);
    unsigned int v62 = std::string::append(&v74, v61);
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    int64_t v64 = std::string::append(&v75, ")");
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    size_t v78 = v64->__r_.__value_.__r.__words[2];
    long long v77 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v75.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_55;
      }
    }
    else if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_55:
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_56;
      }
      goto LABEL_77;
    }
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_56:
      operator delete(v73.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_57;
      }
      goto LABEL_78;
    }
LABEL_77:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_57:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_58;
      }
      goto LABEL_79;
    }
LABEL_78:
    operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_58:
      operator delete(v72.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        unint64_t v68 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v75, "AutoMmapPtr");
        E5RT::Status::Status(&v74, 1, &v77);
        E5RT::E5RTError::E5RTError(v68, &v75, &v74);
      }
LABEL_80:
      operator delete(v71.__r_.__value_.__l.__data_);
      goto LABEL_81;
    }
LABEL_79:
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  int v16 = fileno(v14);
  unint64_t v17 = mmap(0, v12, a3, a4, v16, a5);
  std::string::size_type v79 = (long long *)((char *)&v77 + 8);
  *(void *)&long long v77 = v17;
  *((void *)&v77 + 1) = &unk_1EE39B128;
  size_t v78 = v12;
  if ((unint64_t)v17 + 1 <= 1)
  {
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v70, ", errno: ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = __error();
    std::to_string(&__p, *v23);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
    }
    std::string v26 = std::string::append(&v71, (const std::string::value_type *)p_p, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = std::string::append(&v72, " (");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    int v30 = __error();
    uint64_t v31 = strerror(*v30);
    uint64_t v32 = std::string::append(&v73, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v74, ")");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v74.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
    }
    else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_29:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_30;
      }
      goto LABEL_63;
    }
    operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_30:
      operator delete(v72.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_64;
    }
LABEL_63:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_32;
      }
      goto LABEL_65;
    }
LABEL_64:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_32:
      operator delete(v71.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_67:
        long long v66 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(&v74, "AutoMmapPtr");
        E5RT::Status::Status(&v73, 1, &v75);
        E5RT::E5RTError::E5RTError(v66, &v74, &v73);
      }
LABEL_66:
      operator delete(v70.__r_.__value_.__l.__data_);
      goto LABEL_67;
    }
LABEL_65:
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v12) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  a1[6] = v18;
  a1[7] = v12;
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](v10, (uint64_t *)&v77);
  std::string::size_type v19 = v77;
  *(void *)&long long v77 = 0;
  if (v19)
  {
    v75.__r_.__value_.__r.__words[0] = v19;
    if (!v79) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(_OWORD *, std::string *))(*(void *)v79 + 48))(v79, &v75);
  }
  if (v79 == (long long *)((char *)&v77 + 8))
  {
    (*(void (**)(char *))(*((void *)&v77 + 1) + 32))((char *)&v77 + 8);
  }
  else if (v79)
  {
    (*(void (**)(void))(*(void *)v79 + 40))();
  }
  fclose(v15);
  return a1;
}

void sub_19225F8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  E5RT::Status::~Status((E5RT::Status *)&a42);
  if (a54 < 0)
  {
    operator delete(__p);
    if ((v57 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v57)
  {
LABEL_6:
    if (*(char *)(v58 - 105) < 0) {
      operator delete(*(void **)(v58 - 128));
    }
    std::unique_ptr<void,std::function<void ()(void *)>>::~unique_ptr[abi:ne180100](v55);
    E5RT::AsyncEventImpl::~AsyncEventImpl(v54);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

void sub_19225FC28(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x19225FC20);
}

uint64_t E5RT::CastToSizeT<long long>(uint64_t result)
{
  if (result < 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "CastToSizeT");
    std::string::basic_string[abi:ne180100]<0>(v2, "Cannot truncate value to size_t.");
    E5RT::Status::Status(v3, 1, v2);
    E5RT::E5RTError::E5RTError(exception, v4, v3);
  }
  return result;
}

void sub_19225FCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void *std::vector<std::shared_ptr<E5RT::ComputeProgramSection const>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    do
    {
      uint64_t v8 = v3 + v7;
      unint64_t v9 = &v6[v7];
      uint64_t v10 = *(void *)(v3 + v7 + 8);
      *(void *)unint64_t v9 = *(void *)(v3 + v7);
      *((void *)v9 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 16;
    }
    while (v8 + 16 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19225FE04(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    uint64_t v13 = v5;
    uint64_t v6 = a1[4];
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, &v13);
  }
  uint64_t v8 = (uint64_t **)(a1 + 4);
  uint64_t v7 = (uint64_t *)a1[4];
  unint64_t v9 = a1 + 1;
  a1[4] = 0;
  if (v7 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v9 + 32))(a1 + 1);
    uint64_t v10 = a2 + 4;
    int v11 = (uint64_t *)a2[4];
    if (v11) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v10 = a1 + 4;
    goto LABEL_12;
  }
  if (v7) {
    (*(void (**)(uint64_t *))(*v7 + 40))(v7);
  }
  uint64_t v10 = a2 + 4;
  int v11 = (uint64_t *)a2[4];
  if (!v11) {
    goto LABEL_11;
  }
LABEL_8:
  if (v11 != a2 + 1)
  {
    *uint64_t v8 = v11;
LABEL_12:
    *uint64_t v10 = 0;
    return a1;
  }
  *uint64_t v8 = v9;
  (*(void (**)(void, uint64_t *))(*(void *)*v10 + 24))(*v10, a1 + 1);
  return a1;
}

uint64_t E5Common::AutoMmapPtr::GetLength(E5Common::AutoMmapPtr *this)
{
  return *((void *)this + 7);
}

uint64_t E5Common::AutoMmapPtr::GetSpan(E5Common::AutoMmapPtr *this)
{
  return *((void *)this + 6);
}

void E5RT_FB::Program::UnPackTo(int *a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    uint64_t v5 = v4[2];
    if (v5)
    {
      uint64_t v6 = (int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5));
      uint64_t v7 = (_WORD *)*a2;
      if (!*a2) {
        operator new();
      }
      uint64_t v8 = (unsigned __int16 *)((char *)v6 - *v6);
      if (*v8 < 5u)
      {
        *uint64_t v7 = 0;
        if (*v8 >= 7u) {
          goto LABEL_8;
        }
      }
      else
      {
        uint64_t v9 = v8[2];
        if (v8[2]) {
          LOWORD(v9) = *(_WORD *)((char *)v6 + v9);
        }
        *uint64_t v7 = v9;
        if (*v8 >= 7u)
        {
LABEL_8:
          uint64_t v10 = v8[3];
          if (v8[3]) {
            LOWORD(v10) = *(_WORD *)((char *)v6 + v10);
          }
          v7[1] = v10;
          if (*v8 >= 9u)
          {
LABEL_11:
            uint64_t v11 = v8[4];
            if (v8[4]) {
              LOWORD(v11) = *(_WORD *)((char *)v6 + v11);
            }
            v7[2] = v11;
            if (*v8 >= 0xBu) {
              goto LABEL_14;
            }
            goto LABEL_42;
          }
LABEL_41:
          v7[2] = 0;
          if (*v8 >= 0xBu)
          {
LABEL_14:
            uint64_t v12 = v8[5];
            if (v12) {
              uint64_t v12 = *(void *)((char *)v6 + v12);
            }
            *((void *)v7 + 1) = v12;
            goto LABEL_19;
          }
LABEL_42:
          *((void *)v7 + 1) = 0;
          goto LABEL_19;
        }
      }
      v7[1] = 0;
      if (*v8 >= 9u) {
        goto LABEL_11;
      }
      goto LABEL_41;
    }
  }
  if (*a2)
  {
    *a2 = 0;
    MEMORY[0x192FF16B0]();
  }
LABEL_19:
  uint64_t v13 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v13 >= 7u && (uint64_t v14 = v13[3]) != 0)
  {
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = *(unsigned int *)((char *)a1 + v14);
    uint64_t v17 = a2[1];
    int v18 = (void *)a2[2];
    std::string::size_type v19 = &v15[v16];
    unint64_t v20 = *(unsigned int *)&v15[v16];
    unint64_t v21 = ((uint64_t)v18 - v17) >> 3;
    if (v20 <= v21)
    {
      if (v20 < v21)
      {
        std::string v26 = (void *)(v17 + 8 * v20);
        while (v18 != v26)
        {
          uint64_t v28 = *--v18;
          uint64_t v27 = v28;
          *int v18 = 0;
          if (v28)
          {
            if (*(char *)(v27 + 23) < 0) {
              operator delete(*(void **)v27);
            }
            MEMORY[0x192FF16B0](v27, 0x1012C4016A3B764);
          }
        }
        a2[2] = (uint64_t)v26;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__append((void **)a2 + 1, v20 - v21);
    }
    if (*(_DWORD *)v19)
    {
      unint64_t v29 = 0;
      int v30 = (unsigned int *)(v19 + 4);
      do
      {
        uint64_t v31 = *(void *)(a2[1] + 8 * v29);
        if (!v31) {
          operator new();
        }
        E5RT_FB::Section::UnPackTo((int *)((char *)v30 + *v30), v31);
        ++v29;
        ++v30;
      }
      while (v29 < *(unsigned int *)v19);
    }
  }
  else
  {
    long long v22 = (void *)a2[1];
    int v23 = (void *)a2[2];
    if (v23 != v22)
    {
      do
      {
        uint64_t v25 = *--v23;
        uint64_t v24 = v25;
        *int v23 = 0;
        if (v25)
        {
          if (*(char *)(v24 + 23) < 0) {
            operator delete(*(void **)v24);
          }
          MEMORY[0x192FF16B0](v24, 0x1012C4016A3B764);
        }
      }
      while (v23 != v22);
      a2[2] = (uint64_t)v22;
    }
  }
  uint64_t v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0)
  {
    uint64_t v34 = (unsigned int *)((char *)a1 + v33);
    uint64_t v35 = a2[4];
    if (!v35) {
      operator new();
    }
    E5RT_FB::Symtab::UnPackTo((int *)((char *)v34 + *v34), v35);
  }
  else
  {
    uint64_t v36 = (void *)a2[4];
    if (v36)
    {
      a2[4] = 0;
      long long v37 = (void *)*v36;
      if (*v36)
      {
        uint64_t v38 = (void *)v36[1];
        unint64_t v39 = (void *)*v36;
        if (v38 != v37)
        {
          do
          {
            uint64_t v41 = *--v38;
            uint64_t v40 = v41;
            *uint64_t v38 = 0;
            if (v41)
            {
              if (*(char *)(v40 + 23) < 0) {
                operator delete(*(void **)v40);
              }
              MEMORY[0x192FF16B0](v40, 0x1012C4004DB1A28);
            }
          }
          while (v38 != v37);
          unint64_t v39 = (void *)*v36;
        }
        v36[1] = v37;
        operator delete(v39);
      }
      MEMORY[0x192FF16B0](v36, 0x20C40960023A9);
    }
  }
  long long v42 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v42 >= 0xBu && (uint64_t v43 = v42[5]) != 0)
  {
    uint64_t v44 = *(unsigned int *)((char *)a1 + v43);
    uint64_t v45 = a2[5];
    uint64_t v46 = (void *)a2[6];
    std::string::size_type v121 = (int *)((char *)a1 + v43 + v44);
    unint64_t v47 = *v121;
    unint64_t v48 = ((uint64_t)v46 - v45) >> 3;
    uint64_t v119 = a2 + 5;
    if (v47 <= v48)
    {
      if (v47 < v48)
      {
        int64_t v54 = (void *)(v45 + 8 * v47);
        while (v46 != v54)
        {
          uint64_t v56 = *--v46;
          uint64_t v55 = v56;
          void *v46 = 0;
          if (v56)
          {
            int v57 = *(void **)v55;
            if (*(void *)v55)
            {
              *(void *)(v55 + 8) = v57;
              operator delete(v57);
            }
            MEMORY[0x192FF16B0](v55, 0x10C402FEFCB83);
          }
        }
        a2[6] = (uint64_t)v54;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__append((void **)a2 + 5, v47 - v48);
    }
    uint64_t v58 = a2 + 5;
    if (*v121)
    {
      unint64_t v59 = 0;
      uint64_t v120 = (uint64_t)a1 + v43 + v44 + 8;
      uint64_t v60 = (char *)a1 + v44 + v43;
      uint64_t v61 = v60 + 24;
      unsigned int v62 = v60 + 8;
      do
      {
        long long v63 = *(void **)(*v58 + 8 * v59);
        int64_t v64 = &v121[v59 + 1];
        uint64_t v65 = *v64;
        long long v66 = (int *)((char *)v64 + v65);
        if (!v63) {
          operator new();
        }
        uint64_t v67 = (unsigned __int16 *)((char *)v66 - *v66);
        if (*v67 < 5u) {
          goto LABEL_88;
        }
        uint64_t v68 = v67[2];
        if (!v67[2]) {
          goto LABEL_88;
        }
        uint64_t v69 = *(unsigned int *)((char *)v66 + v68);
        std::string v70 = (unsigned int *)((char *)v66 + v68 + v69);
        unint64_t v71 = *v70;
        std::string v73 = (char *)*v63;
        std::string v72 = (char *)v63[1];
        unint64_t v74 = (unint64_t)&v72[-*v63];
        BOOL v75 = v71 >= v74;
        size_t v76 = v71 - v74;
        if (v71 <= v74)
        {
          uint64_t v58 = v119;
          if (!v75) {
            v63[1] = &v73[v71];
          }
        }
        else
        {
          uint64_t v116 = v69;
          uint64_t v117 = v67[2];
          int v118 = v70;
          uint64_t v77 = v63[2];
          if (v77 - (uint64_t)v72 >= v76)
          {
            bzero(v72, v71 - v74);
            v63[1] = &v72[v76];
            std::string v70 = v118;
            uint64_t v58 = v119;
            uint64_t v69 = v116;
            uint64_t v68 = v117;
            goto LABEL_124;
          }
          unint64_t v78 = v77 - (void)v73;
          uint64_t v79 = 2 * v78;
          uint64_t v115 = *v70;
          if (2 * v78 <= v71) {
            uint64_t v79 = *v70;
          }
          if (v78 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v80 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v80 = v79;
          }
          size_t v112 = v80;
          uint64_t v114 = (char *)operator new(v80);
          long long v113 = &v114[v74];
          bzero(&v114[v74], v76);
          if (v72 != v73)
          {
            if (v74 < 8)
            {
              uint64_t v68 = v117;
              std::string v70 = v118;
              uint64_t v81 = v115;
              uint64_t v69 = v116;
              uint64_t v82 = &v114[v74];
              uint64_t v83 = v114;
              goto LABEL_120;
            }
            uint64_t v83 = v114;
            uint64_t v81 = v115;
            uint64_t v68 = v117;
            std::string v70 = v118;
            uint64_t v69 = v116;
            uint64_t v82 = &v114[v74];
            if ((unint64_t)(v73 - v114) < 0x20) {
              goto LABEL_120;
            }
            if (v74 >= 0x20)
            {
              unint64_t v84 = v74 & 0xFFFFFFFFFFFFFFE0;
              long long v85 = &v114[v74 - 16];
              std::string v86 = v72 - 16;
              unint64_t v87 = v74 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v88 = *(_OWORD *)v86;
                *((_OWORD *)v85 - 1) = *((_OWORD *)v86 - 1);
                *(_OWORD *)long long v85 = v88;
                v85 -= 32;
                v86 -= 32;
                v87 -= 32;
              }
              while (v87);
              if (v74 != v84)
              {
                if ((v74 & 0x18) == 0)
                {
                  uint64_t v82 = &v113[-v84];
                  v72 -= v84;
                  goto LABEL_120;
                }
                goto LABEL_115;
              }
            }
            else
            {
              unint64_t v84 = 0;
LABEL_115:
              uint64_t v82 = &v113[-(v74 & 0xFFFFFFFFFFFFFFF8)];
              unint64_t v89 = &v114[&v72[-v84] - v73 - 8];
              long long v90 = &v72[-v84 - 8];
              unint64_t v91 = v84 - (v74 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v92 = *(void *)v90;
                v90 -= 8;
                *(void *)unint64_t v89 = v92;
                v89 -= 8;
                v91 += 8;
              }
              while (v91);
              v72 -= v74 & 0xFFFFFFFFFFFFFFF8;
              if (v74 != (v74 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_120:
                uint64_t v93 = v82 - 1;
                do
                {
                  char v94 = *--v72;
                  *v93-- = v94;
                }
                while (v72 != v73);
              }
            }
            std::string v72 = v73;
            uint64_t v58 = v119;
            *long long v63 = v83;
            v63[1] = &v83[v81];
            v63[2] = &v83[v112];
            if (!v73) {
              goto LABEL_124;
            }
LABEL_123:
            operator delete(v72);
            uint64_t v69 = v116;
            uint64_t v68 = v117;
            std::string v70 = v118;
            goto LABEL_124;
          }
          std::string v70 = v118;
          uint64_t v58 = v119;
          uint64_t v69 = v116;
          uint64_t v68 = v117;
          *long long v63 = v113;
          v63[1] = &v114[v115];
          v63[2] = &v114[v112];
          if (v72) {
            goto LABEL_123;
          }
        }
LABEL_124:
        unsigned int v97 = *v70;
        char v96 = v70 + 1;
        uint64_t v95 = v97;
        if (v97)
        {
          std::string::size_type v98 = (char *)*v63;
          if (v95 < 8)
          {
            unint64_t v99 = v96;
            goto LABEL_139;
          }
          unint64_t v99 = v96;
          if ((unint64_t)&v98[-v120 - v65 - v68 - v69 + -4 * v59] >= 0x20)
          {
            if (v95 < 0x20)
            {
              uint64_t v100 = 0;
              goto LABEL_134;
            }
            uint64_t v100 = v95 & 0xFFFFFFE0;
            uint8x8_t v101 = v98 + 16;
            int v102 = &v61[v65 + v69 + v68];
            uint64_t v103 = v100;
            do
            {
              long long v104 = *(_OWORD *)v102;
              *(v101 - 1) = *((_OWORD *)v102 - 1);
              *uint8x8_t v101 = v104;
              v101 += 2;
              v102 += 32;
              v103 -= 32;
            }
            while (v103);
            if (v100 == v95) {
              goto LABEL_88;
            }
            if ((v95 & 0x18) != 0)
            {
LABEL_134:
              unint64_t v99 = (unsigned int *)((char *)v96 + (v95 & 0xFFFFFFF8));
              size_t v105 = &v98[v95 & 0xFFFFFFF8];
              int v106 = &v98[v100];
              BOOL v107 = &v62[v100 + v69 + v68 + v65];
              uint64_t v108 = v100 - (v95 & 0xFFFFFFF8);
              do
              {
                uint64_t v109 = *(void *)v107;
                v107 += 8;
                *(void *)int v106 = v109;
                v106 += 8;
                v108 += 8;
              }
              while (v108);
              std::string::size_type v98 = v105;
              if ((v95 & 0xFFFFFFF8) == v95) {
                goto LABEL_88;
              }
              goto LABEL_139;
            }
            v98 += v100;
            unint64_t v99 = (unsigned int *)((char *)v96 + v100);
          }
LABEL_139:
          long long v110 = (unsigned int *)((char *)v96 + v95);
          do
          {
            char v111 = *(unsigned char *)v99;
            unint64_t v99 = (unsigned int *)((char *)v99 + 1);
            *v98++ = v111;
          }
          while (v99 != v110);
        }
LABEL_88:
        ++v59;
        v61 += 4;
        v62 += 4;
      }
      while (v59 < *v121);
    }
  }
  else
  {
    uint64_t v49 = (void *)a2[5];
    long long v50 = (void *)a2[6];
    if (v50 != v49)
    {
      do
      {
        uint64_t v52 = *--v50;
        uint64_t v51 = v52;
        *long long v50 = 0;
        if (v52)
        {
          int v53 = *(void **)v51;
          if (*(void *)v51)
          {
            *(void *)(v51 + 8) = v53;
            operator delete(v53);
          }
          MEMORY[0x192FF16B0](v51, 0x10C402FEFCB83);
        }
      }
      while (v50 != v49);
      a2[6] = (uint64_t)v49;
    }
  }
}

void sub_192260B2C(_Unwind_Exception *a1)
{
  if (*v1) {
    sub_192454F78((uint64_t)v1, *v1);
  }
  MEMORY[0x192FF16B0](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_192260B60(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10C402FEFCB83);
  _Unwind_Resume(a1);
}

void sub_192260B84(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  MEMORY[0x192FF16B0](v1, 0x1012C4016A3B764);
  _Unwind_Resume(a1);
}

void E5RT_FB::Section::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  uint64_t v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v21 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v21 = v10 | 7;
        }
        p_dst = (long long *)operator new(v21 + 1);
        *((void *)&__dst + 1) = v10;
        uint64_t v23 = v21 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v23) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v23;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_31:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_31;
    }
  }
LABEL_7:
  uint64_t v13 = (unsigned __int16 *)((char *)a1 + v5);
  unsigned int v14 = *v13;
  if (v14 <= 6)
  {
    *(_DWORD *)(a2 + 24) = 0;
LABEL_21:
    *(void *)(a2 + 32) = 0;
LABEL_22:
    LODWORD(v18) = 0;
    *(void *)(a2 + 40) = 0;
    goto LABEL_23;
  }
  uint64_t v15 = v13[3];
  if (v13[3]) {
    LODWORD(v15) = *(int *)((char *)a1 + v15);
  }
  *(_DWORD *)(a2 + 24) = v15;
  if (v14 < 9) {
    goto LABEL_21;
  }
  uint64_t v16 = v13[4];
  if (v13[4]) {
    uint64_t v16 = *(void *)((char *)a1 + v16);
  }
  *(void *)(a2 + 32) = v16;
  if (v14 < 0xB) {
    goto LABEL_22;
  }
  uint64_t v17 = v13[5];
  if (v13[5]) {
    uint64_t v17 = *(void *)((char *)a1 + v17);
  }
  *(void *)(a2 + 40) = v17;
  if (v14 < 0xD)
  {
    *(_DWORD *)(a2 + 48) = 0;
    std::string::size_type v19 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v19 >= 0xFu) {
      goto LABEL_24;
    }
LABEL_33:
    LOBYTE(v20) = 0;
    goto LABEL_34;
  }
  uint64_t v18 = v13[6];
  if (!v18)
  {
LABEL_23:
    *(_DWORD *)(a2 + 48) = v18;
    std::string::size_type v19 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v19 >= 0xFu) {
      goto LABEL_24;
    }
    goto LABEL_33;
  }
  *(_DWORD *)(a2 + 48) = *(int *)((char *)a1 + v18);
  std::string::size_type v19 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v19 < 0xFu) {
    goto LABEL_33;
  }
LABEL_24:
  uint64_t v20 = v19[7];
  if (v20) {
    LOBYTE(v20) = *((unsigned char *)a1 + v20) != 0;
  }
LABEL_34:
  *(unsigned char *)(a2 + 52) = v20;
}

void std::vector<std::unique_ptr<E5RT_FB::SectionT>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_32;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_41;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    uint64_t v6 = &v5[-v20];
    uint64_t v21 = v5 - 16;
    long long v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)long long v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    uint64_t v27 = (char *)*a1;
    uint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)uint64_t v6 = 0;
        if (v29)
        {
          if (*(char *)(v28 + 23) < 0) {
            operator delete(*(void **)v28);
          }
          MEMORY[0x192FF16B0](v28, 0x1012C4016A3B764);
        }
      }
      while (v6 != v27);
      uint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_32:
      operator delete(v6);
    }
  }
}

void std::vector<std::unique_ptr<E5RT_FB::SectionDataT>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_32;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_41;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    uint64_t v6 = &v5[-v20];
    uint64_t v21 = v5 - 16;
    long long v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)long long v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    uint64_t v27 = (char *)*a1;
    uint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)uint64_t v6 = 0;
        if (v29)
        {
          int v30 = *(void **)v28;
          if (*(void *)v28)
          {
            *(void *)(v28 + 8) = v30;
            operator delete(v30);
          }
          MEMORY[0x192FF16B0](v28, 0x10C402FEFCB83);
        }
      }
      while (v6 != v27);
      uint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_32:
      operator delete(v6);
    }
  }
}

void E5RT_FB::Symtab::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 >= 5u && (uint64_t v4 = v3[2]) != 0)
  {
    uint64_t v5 = (int *)((char *)a1 + v4 + *(unsigned int *)((char *)a1 + v4));
    unint64_t v6 = *v5;
    uint64_t v7 = *(void **)(a2 + 8);
    unint64_t v8 = ((uint64_t)v7 - *(void *)a2) >> 3;
    if (v6 <= v8)
    {
      if (v6 < v8)
      {
        uint64_t v13 = *(void *)a2 + 8 * v6;
        while (v7 != (void *)v13)
        {
          uint64_t v15 = *--v7;
          uint64_t v14 = v15;
          *uint64_t v7 = 0;
          if (v15)
          {
            if (*(char *)(v14 + 23) < 0) {
              operator delete(*(void **)v14);
            }
            MEMORY[0x192FF16B0](v14, 0x1012C4004DB1A28);
          }
        }
        *(void *)(a2 + 8) = v13;
      }
    }
    else
    {
      std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__append((void **)a2, v6 - v8);
    }
    if (*v5)
    {
      unint64_t v16 = 0;
      uint64_t v17 = v5 + 1;
      do
      {
        uint64_t v18 = *(void *)(*(void *)a2 + 8 * v16);
        if (!v18) {
          operator new();
        }
        E5RT_FB::Symbol::UnPackTo((int *)((char *)v17 + *v17), v18);
        ++v16;
        ++v17;
      }
      while (v16 < *v5);
    }
  }
  else
  {
    uint64_t v9 = *(void **)a2;
    unint64_t v10 = *(void **)(a2 + 8);
    if (v10 != *(void **)a2)
    {
      do
      {
        uint64_t v12 = *--v10;
        uint64_t v11 = v12;
        *unint64_t v10 = 0;
        if (v12)
        {
          if (*(char *)(v11 + 23) < 0) {
            operator delete(*(void **)v11);
          }
          MEMORY[0x192FF16B0](v11, 0x1012C4004DB1A28);
        }
      }
      while (v10 != v9);
      *(void *)(a2 + 8) = v9;
    }
  }
}

void sub_192261404(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  MEMORY[0x192FF16B0](v1, 0x1012C4004DB1A28);
  _Unwind_Resume(a1);
}

void E5RT_FB::Symbol::UnPackTo(int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = -v4;
  unint64_t v6 = (unsigned __int16 *)((char *)a1 - v4);
  if (*v6 >= 5u)
  {
    uint64_t v7 = v6[2];
    if (v7)
    {
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = *(unsigned int *)((char *)a1 + v7);
      uint64_t v11 = &v8[v9 + 4];
      size_t v10 = *(unsigned int *)&v8[v9];
      if (v10 >= 0x17)
      {
        if ((v10 | 7) == 0x17) {
          uint64_t v22 = (v10 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v22 = v10 | 7;
        }
        p_dst = (long long *)operator new(v22 + 1);
        *((void *)&__dst + 1) = v10;
        uint64_t v24 = v22 - 0x7FFFFFFFFFFFFFFFLL;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v24) = *(_DWORD *)&v8[v9];
        p_dst = &__dst;
        if (!v10)
        {
          *((unsigned char *)&__dst + v10) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
LABEL_6:
            *(_OWORD *)a2 = __dst;
            *(void *)(a2 + 16) = v24;
            uint64_t v5 = -(uint64_t)*a1;
            goto LABEL_7;
          }
LABEL_33:
          operator delete(*(void **)a2);
          goto LABEL_6;
        }
      }
      memcpy(p_dst, v11, v10);
      *((unsigned char *)p_dst + v10) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_33;
    }
  }
LABEL_7:
  uint64_t v13 = (unsigned __int16 *)((char *)a1 + v5);
  unsigned int v14 = *v13;
  if (v14 <= 6)
  {
    LODWORD(v16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    goto LABEL_15;
  }
  uint64_t v15 = v13[3];
  if (v13[3]) {
    LODWORD(v15) = *(int *)((char *)a1 + v15);
  }
  *(_DWORD *)(a2 + 24) = v15;
  if (v14 < 9)
  {
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v18 = *v17;
    if (v18 > 0xA) {
      goto LABEL_16;
    }
LABEL_25:
    *(void *)(a2 + 32) = 0;
LABEL_26:
    uint64_t v21 = 0;
    *(void *)(a2 + 40) = 0;
    goto LABEL_27;
  }
  uint64_t v16 = v13[4];
  if (!v16)
  {
LABEL_15:
    *(_DWORD *)(a2 + 28) = v16;
    uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v18 = *v17;
    if (v18 > 0xA) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  *(_DWORD *)(a2 + 28) = *(int *)((char *)a1 + v16);
  uint64_t v17 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v18 = *v17;
  if (v18 <= 0xA) {
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v19 = v17[5];
  if (v17[5]) {
    uint64_t v19 = *(void *)((char *)a1 + v19);
  }
  *(void *)(a2 + 32) = v19;
  if (v18 < 0xD) {
    goto LABEL_26;
  }
  uint64_t v20 = v17[6];
  if (v17[6]) {
    uint64_t v20 = *(void *)((char *)a1 + v20);
  }
  *(void *)(a2 + 40) = v20;
  if (v18 < 0xF)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = v17[7];
    if (v21) {
      uint64_t v21 = *(void *)((char *)a1 + v21);
    }
  }
LABEL_27:
  *(void *)(a2 + 48) = v21;
}

void std::vector<std::unique_ptr<E5RT_FB::SymbolT>>::__append(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    uint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_32;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_41;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    unint64_t v6 = &v5[-v20];
    uint64_t v21 = v5 - 16;
    uint64_t v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)uint64_t v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)uint64_t v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_41:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)unint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    uint64_t v27 = (char *)*a1;
    unint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)unint64_t v6 = 0;
        if (v29)
        {
          if (*(char *)(v28 + 23) < 0) {
            operator delete(*(void **)v28);
          }
          MEMORY[0x192FF16B0](v28, 0x1012C4004DB1A28);
        }
      }
      while (v6 != v27);
      unint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_32:
      operator delete(v6);
    }
  }
}