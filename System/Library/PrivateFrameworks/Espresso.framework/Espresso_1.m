void sub_19213B814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  void *v73;
  uint64_t v74;
  void *v76;
  void *v77;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&STACK[0x230]);
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  if (v71) {
    nitro::nitro_function::nitro_function(v71);
  }

  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  v76 = *(void **)(v74 - 184);
  if (v76)
  {
    *(void *)(v74 - 176) = v76;
    operator delete(v76);
  }
  v77 = *(void **)(v74 - 120);
  if (v77)
  {
    *(void *)(v74 - 112) = v77;
    operator delete(v77);
  }
  _Unwind_Resume(a1);
}

void sub_19213BBB4()
{
}

int32x4_t *Espresso::padding_params_t::get_final_lrtb(int32x4_t *this, int16x4_t *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  *this = vmovl_s16(a2[1]);
  __int32 v10 = a2[2].i16[0];
  this[1].i32[0] = a2[2].i16[1];
  this[1].i32[1] = v10;
  int v11 = a2->i16[0];
  if (v11 != 4)
  {
    if (v11 == 2)
    {
      this->i64[0] = 0;
      this->i64[1] = 0;
      this[1].i64[0] = 0;
      return this;
    }
    if (v11 != 1) {
      return this;
    }
  }
  unsigned int v12 = ((a6 - 1) * a8 - a4 + a10) & ~(((a6 - 1) * a8 - a4 + a10) >> 31);
  unsigned int v13 = ((a5 - 1) * a7 - a3 + a9) & ~(((a5 - 1) * a7 - a3 + a9) >> 31);
  unsigned int v14 = v13 >> 1;
  unsigned int v15 = v13 - (v13 >> 1);
  unsigned int v16 = v12 >> 1;
  unsigned int v17 = v12 - (v12 >> 1);
  if (a2->i16[0] == 1)
  {
    this->i32[0] = v14;
    this->i32[1] = v15;
    this->i32[2] = v16;
    this->i32[3] = v17;
  }
  else
  {
    this->i32[0] = v15;
    this->i32[1] = v14;
    this->i32[2] = v17;
    this->i32[3] = v16;
  }
  this[1].i64[0] = 0;
  return this;
}

void Espresso::ANECompilerEngine::mix_deconv3d_kernel::get_padding(unsigned int *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  int v6 = *(__int16 *)(a2 + 70);
  if (v6 > 1) {
    int v7 = (*(_DWORD *)(a2 + 16) - 1) * v6 + 1;
  }
  else {
    int v7 = *(_DWORD *)(a2 + 16);
  }
  int v8 = *(__int16 *)(a2 + 72);
  if (v8 > 1) {
    int v9 = (*(_DWORD *)(a2 + 20) - 1) * v8 + 1;
  }
  else {
    int v9 = *(_DWORD *)(a2 + 20);
  }
  int v10 = *(__int16 *)(a2 + 74);
  if (v10 > 1) {
    int v11 = (*(_DWORD *)(a2 + 24) - 1) * v10 + 1;
  }
  else {
    int v11 = *(_DWORD *)(a2 + 24);
  }
  int v13 = a3[2];
  int v12 = a3[3];
  int v14 = *(__int16 *)(a2 + 66);
  int v16 = a4[2];
  int v15 = a4[3];
  int v17 = a3[4];
  int v18 = *(__int16 *)(a2 + 64);
  int v19 = a4[4];
  int v20 = *(__int16 *)(a2 + 68);
  unsigned int v62 = (v9 - v15 + (v12 - 1) * v14) & ~((v9 - v15 + (v12 - 1) * v14) >> 31);
  int v63 = ~(v12 * v14) + v15 + v9;
  int v64 = v9;
  unsigned int v21 = v9 + ~(v62 >> 1);
  unsigned int v22 = v63 - v21;
  a1[2] = v21;
  a1[3] = v63 - v21;
  unsigned int v56 = (v7 - v19 + (v17 - 1) * v18) & ~((v7 - v19 + (v17 - 1) * v18) >> 31);
  int v57 = ~(v17 * v18) + v19 + v7;
  int v58 = v7;
  unsigned int v59 = (v11 - v16 + (v13 - 1) * v20) & ~((v11 - v16 + (v13 - 1) * v20) >> 31);
  unsigned int v23 = v7 + ~(v56 >> 1);
  unsigned int v24 = v57 - v23;
  *a1 = v23;
  a1[1] = v57 - v23;
  int v60 = ~(v13 * v20) + v16 + v11;
  int v61 = v11;
  unsigned int v25 = v11 + ~(v59 >> 1);
  unsigned int v26 = v60 - v25;
  a1[4] = v60 - v25;
  a1[5] = v25;
  v27 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  v28 = [v27 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  v67 = v28;
  v29 = [v28 objectForKeyedSubscript:@"com.apple.espresso.force_pads"];

  if (v29)
  {
    v32 = [v67 objectForKeyedSubscript:@"com.apple.espresso.force_pads"];
    v33 = [v32 componentsSeparatedByString:@","];

    if ((unint64_t)[v33 count] <= 5) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("com.apple.espresso.force_pads should contain 6 elements for deconv3d");
    }
    v34 = [v33 objectAtIndexedSubscript:0];
    unsigned int v21 = [v34 intValue];
    a1[2] = v21;

    v35 = [v33 objectAtIndexedSubscript:1];
    unsigned int v22 = [v35 intValue];
    a1[3] = v22;

    v36 = [v33 objectAtIndexedSubscript:2];
    unsigned int v23 = [v36 intValue];
    *a1 = v23;

    v37 = [v33 objectAtIndexedSubscript:3];
    unsigned int v24 = [v37 intValue];
    a1[1] = v24;

    v38 = [v33 objectAtIndexedSubscript:4];
    unsigned int v25 = [v38 intValue];
    a1[5] = v25;

    v39 = [v33 objectAtIndexedSubscript:5];
    unsigned int v26 = [v39 intValue];
    a1[4] = v26;
  }
  v40 = Espresso::espresso_os_log_subsystem(v30, v31);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    int v47 = a3[3];
    int v48 = a4[3];
    int v49 = *(__int16 *)(a2 + 66);
    *(_DWORD *)buf = 67111168;
    int v69 = v47;
    __int16 v70 = 1024;
    int v71 = v48;
    __int16 v72 = 1024;
    int v73 = v49;
    __int16 v74 = 1024;
    int v75 = v64;
    __int16 v76 = 1024;
    int v77 = v63;
    __int16 v78 = 1024;
    unsigned int v79 = v62 >> 1;
    __int16 v80 = 1024;
    unsigned int v81 = v62 - (v62 >> 1);
    __int16 v82 = 1024;
    unsigned int v83 = v21;
    __int16 v84 = 1024;
    unsigned int v85 = v22;
    _os_log_debug_impl(&dword_1920CB000, v40, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }

  v43 = Espresso::espresso_os_log_subsystem(v41, v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    int v50 = a3[4];
    int v51 = a4[4];
    int v52 = *(__int16 *)(a2 + 64);
    *(_DWORD *)buf = 67111168;
    int v69 = v50;
    __int16 v70 = 1024;
    int v71 = v51;
    __int16 v72 = 1024;
    int v73 = v52;
    __int16 v74 = 1024;
    int v75 = v58;
    __int16 v76 = 1024;
    int v77 = v57;
    __int16 v78 = 1024;
    unsigned int v79 = v56 >> 1;
    __int16 v80 = 1024;
    unsigned int v81 = v56 - (v56 >> 1);
    __int16 v82 = 1024;
    unsigned int v83 = v23;
    __int16 v84 = 1024;
    unsigned int v85 = v24;
    _os_log_debug_impl(&dword_1920CB000, v43, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }

  v46 = Espresso::espresso_os_log_subsystem(v44, v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
  {
    int v53 = a3[2];
    int v54 = a4[2];
    int v55 = *(__int16 *)(a2 + 68);
    *(_DWORD *)buf = 67111168;
    int v69 = v53;
    __int16 v70 = 1024;
    int v71 = v54;
    __int16 v72 = 1024;
    int v73 = v55;
    __int16 v74 = 1024;
    int v75 = v61;
    __int16 v76 = 1024;
    int v77 = v60;
    __int16 v78 = 1024;
    unsigned int v79 = v59 >> 1;
    __int16 v80 = 1024;
    unsigned int v81 = v59 - (v59 >> 1);
    __int16 v82 = 1024;
    unsigned int v83 = v25;
    __int16 v84 = 1024;
    unsigned int v85 = v26;
    _os_log_debug_impl(&dword_1920CB000, v46, OS_LOG_TYPE_DEBUG, "DECONV3D %d %d %d %d %d  %d %d %d %d", buf, 0x38u);
  }
}

void sub_19213C1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t espresso_buffer_unpack_tensor_shape(int32x4_t *a1, void *a2, void *a3)
{
  if (a1)
  {
    if (a3)
    {
      unint64_t v5 = a1->u64[1];
      if (v5 <= 0xA)
      {
        uint64_t v6 = a1[7].i64[0];
        long long v17 = 0u;
        *(_OWORD *)__p = 0u;
        uint64_t v19 = 0;
        int32x4_t v14 = vuzp1q_s32(a1[5], a1[6]);
        int v15 = v6;
        int v16 = v5;
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v13, (const Espresso::layer_shape *)&v14, 0);
        uint64_t v7 = v16;
        if (a2) {
          *a2 = v16;
        }
        if (!v7) {
          goto LABEL_10;
        }
        int v8 = (int *)v13;
        int v9 = a3;
        uint64_t v10 = v7;
        do
        {
          uint64_t v11 = *v8++;
          *v9++ = v11;
          --v10;
        }
        while (v10);
        if (v7 <= 9) {
LABEL_10:
        }
          bzero(&a3[v7], 80 - 8 * v7);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void sub_19213C314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    unsigned int v21 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v21, v22);
    __cxa_end_catch();
    JUMPOUT(0x19213C300);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorSymbolicShapeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Validation::TensorDTypeConstraints  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t espresso_network_bind_buffer(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int32x4_t v14 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    uint64_t v15 = *a1;
    {
      if (a4)
      {
        switch(a6)
        {
          case 0x40000:
            if (a7 == 0x10000)
            {
              if (a5 != 0x20000)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v31, "mode_flags");
                std::runtime_error::runtime_error(exception, (const std::string *)v31);
                exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                LODWORD(exception[1].__vftable) = -6;
              }
              (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 128))(v31, a1, a2, a3);
              goto LABEL_39;
            }
            break;
          case 0x20000:
            switch(a7)
            {
              case 0x10000:
                if (a5 == 0x20000)
                {
                  uint64_t v19 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 88);
                }
                else
                {
                  if (a5 != 0x10000)
                  {
                    v28 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(v31, "mode_flags");
                    std::runtime_error::runtime_error(v28, (const std::string *)v31);
                    v28->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                    LODWORD(v28[1].__vftable) = -6;
                  }
                  uint64_t v19 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 80);
                }
                break;
              case 0x80000:
                if (a5 == 0x20000)
                {
                  uint64_t v19 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 120);
                }
                else
                {
                  if (a5 != 0x10000)
                  {
                    v27 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(v31, "mode_flags");
                    std::runtime_error::runtime_error(v27, (const std::string *)v31);
                    v27->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                    LODWORD(v27[1].__vftable) = -6;
                  }
                  uint64_t v19 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 112);
                }
                break;
              case 0x20000:
                int v18 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v31, "format_flags ESPRESSO_BIND_FORMAT_NCHW_INTERNAL_STORAGE");
                std::runtime_error::runtime_error(v18, (const std::string *)v31);
                v18->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                LODWORD(v18[1].__vftable) = -9;
              default:
                goto LABEL_35;
            }
            (*v19)(a1, a2, a3, a4);
            break;
          case 0x10000:
            switch(a7)
            {
              case 0x10000:
                if (a5 == 0x20000)
                {
                  (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 64))(v31, a1, a2, a3);
                }
                else
                {
                  if (a5 != 0x10000)
                  {
                    v30 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(v31, "mode_flags");
                    std::runtime_error::runtime_error(v30, (const std::string *)v31);
                    v30->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                    LODWORD(v30[1].__vftable) = -6;
                  }
                  (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 56))(v31, a1, a2, a3);
                }
                break;
              case 0x80000:
                if (a5 == 0x20000)
                {
                  (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 104))(v31, a1, a2, a3);
                }
                else
                {
                  if (a5 != 0x10000)
                  {
                    v29 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                    std::string::basic_string[abi:ne180100]<0>(v31, "mode_flags");
                    std::runtime_error::runtime_error(v29, (const std::string *)v31);
                    v29->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                    LODWORD(v29[1].__vftable) = -6;
                  }
                  (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t, uint64_t))(v15 + 96))(v31, a1, a2, a3);
                }
                break;
              case 0x20000:
                int v16 = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(v31, "format_flags ESPRESSO_BIND_FORMAT_NCHW_INTERNAL_STORAGE");
                std::runtime_error::runtime_error(v16, (const std::string *)v31);
                v16->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
                LODWORD(v16[1].__vftable) = -9;
              default:
                goto LABEL_35;
            }
LABEL_39:
            uint64_t v17 = 0;
            *(void *)(a4 + 160) = v32;
            long long v21 = v31[9];
            *(_OWORD *)(a4 + 128) = v31[8];
            *(_OWORD *)(a4 + 144) = v21;
            long long v22 = v31[5];
            *(_OWORD *)(a4 + 64) = v31[4];
            *(_OWORD *)(a4 + 80) = v22;
            long long v23 = v31[7];
            *(_OWORD *)(a4 + 96) = v31[6];
            *(_OWORD *)(a4 + 112) = v23;
            long long v24 = v31[1];
            *(_OWORD *)a4 = v31[0];
            *(_OWORD *)(a4 + 16) = v24;
            long long v25 = v31[3];
            *(_OWORD *)(a4 + 32) = v31[2];
            *(_OWORD *)(a4 + 48) = v25;
            goto LABEL_36;
        }
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v15 + 136))(a1, a2, a3, a5);
      }
LABEL_35:
      uint64_t v17 = 0;
      goto LABEL_36;
    }
  }
  uint64_t v17 = 4294967290;
LABEL_36:
  return v17;
}

void sub_19213C9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v17)
  {
LABEL_6:
    if (a2 == 1)
    {
      int v20 = (std::exception *)__cxa_begin_catch(exception_object);
      handle_ex_plan(v15, v20);
      __cxa_end_catch();
      JUMPOUT(0x19213C6D8);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void EspressoLight::espresso_plan::bind_output(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  v81[0] = a3;
  uint64_t v5 = *((void *)this + 133);
  int v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  }
  int v9 = (void *)((char *)this + 1072);
  size_t v10 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  if (*((char *)this + 1095) < 0)
  {
    if (v10 != *((void *)this + 135)) {
      goto LABEL_76;
    }
    if (v10 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v9 = (void *)*v9;
  }
  else if (v10 != *((unsigned __int8 *)this + 1095))
  {
LABEL_76:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_output on subnetwork");
  }
  if (memcmp(v9, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v10)) {
    goto LABEL_76;
  }
  if (atomic_load((unint64_t *)(v5 + 408)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v69, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, (const std::string *)v69);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -1;
  }
  int v12 = v81[0];
  EspressoLight::espresso_plan::default_blob_name_if_null(&v80, *((void **)this + 133), v81[0], (const char *)1, a2);
  uint64_t v13 = *(void *)(*((void *)this + 133) + 144);
  uint64_t v14 = *(void *)(v13 + 96);
  if (!v14) {
    goto LABEL_75;
  }
  uint64_t v15 = v13 + 96;
  do
  {
    int v16 = *(_DWORD *)(v14 + 32);
    BOOL v17 = v16 < v12;
    if (v16 >= v12) {
      int v18 = (uint64_t *)v14;
    }
    else {
      int v18 = (uint64_t *)(v14 + 8);
    }
    if (!v17) {
      uint64_t v15 = v14;
    }
    uint64_t v14 = *v18;
  }
  while (*v18);
  if (v15 == v13 + 96 || v12 < *(_DWORD *)(v15 + 32))
  {
LABEL_75:
    unsigned int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Output not declared");
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v59 = a2;
  uint64_t v19 = v15 + 40;
  int v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v15 + 40, &v80);
  if ((void *)(v15 + 48) == v20)
  {
    long long v21 = Espresso::net::bind_global_prefix[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v22 = &v80;
    }
    else {
      long long v22 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    __s = v22;
    int64_t v23 = strlen(Espresso::net::bind_global_prefix[0]);
    if (v23)
    {
      int64_t v24 = v23;
      int64_t v25 = (v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v80.__r_.__value_.__r.__words[2])
          : v80.__r_.__value_.__l.__size_;
      if (v25 < v23) {
        goto LABEL_34;
      }
      unsigned int v26 = __s;
      v27 = (std::string *)((char *)__s + v25);
      int v28 = *Espresso::net::bind_global_prefix[0];
      while (1)
      {
        int64_t v29 = v25 - v24;
        if (v29 == -1) {
          goto LABEL_34;
        }
        v30 = (std::string *)memchr(v26, v28, v29 + 1);
        if (!v30) {
          goto LABEL_34;
        }
        v31 = v30;
        if (!memcmp(v30, v21, v24)) {
          break;
        }
        unsigned int v26 = (std::string *)((char *)&v31->__r_.__value_.__l.__data_ + 1);
        int64_t v25 = (char *)v27 - ((char *)&v31->__r_.__value_.__l.__data_ + 1);
        if (v25 < v24) {
          goto LABEL_34;
        }
      }
      if (v31 == v27 || v31 != __s)
      {
LABEL_34:
        uint64_t v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v32, (const std::string *)v69);
        __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    v33 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 88), v12, v81);
    *(void *)int v69 = &v80;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33 + 5, &v80, (long long **)v69)[56] = 1;
    int v20 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v19, &v80);
    uint64_t v13 = *(void *)(*((void *)this + 133) + 144);
  }
  v34 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v13 + 40), v12, v81);
  v35 = v34 + 5;
  v36 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v34 + 5), &v80);
  if (v34 + 6 == v36)
  {
    uint64_t v37 = v81[0];
    v38 = (uint64_t *)(*(void *)(*((void *)this + 133) + 24) + 16 * v81[0]);
    uint64_t v39 = *v38;
    v40 = (std::__shared_weak_count *)v38[1];
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v77[0]) = *(unsigned char *)(v39 + 1352);
    memset(&v77[1], 0, 48);
    long long v78 = 0u;
    int v79 = 0;
    if (LOBYTE(v77[0]))
    {
      *(void *)&v77[2] = v39;
      memset(&v77[4], 0, 24);
      *(void *)&v77[10] = v39;
      v77[1] = 723714248;
      kdebug_trace();
    }
    v41 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 72), v37, v81);
    v42 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v41 + 5), &v80);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 72), v37, v81)+ 6 == v42)
    {
      uint64_t v43 = *(void *)(*(void *)(*((void *)this + 133) + 24) + 16 * v37);
      std::string::basic_string[abi:ne180100]<0>(v69, v59);
      Espresso::net::get_blob_or_global_with_prefix(v43, (std::string *)v69, &v65);
      if ((v69[23] & 0x80000000) != 0) {
        operator delete(*(void **)v69);
      }
      Espresso::abstract_blob_container::shape(v69, v65);
      v44 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 72), v37, v81);
      int v75 = &v80;
      v45 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44 + 5, &v80, (long long **)&v75);
      long long v46 = *(_OWORD *)&v69[16];
      *(_OWORD *)(v45 + 56) = *(_OWORD *)v69;
      *(_OWORD *)(v45 + 72) = v46;
      *((void *)v45 + 11) = v70;
      int v47 = (void *)*((void *)v45 + 12);
      if (v47)
      {
        *((void *)v45 + 13) = v47;
        operator delete(v47);
        *((void *)v45 + 12) = 0;
        *((void *)v45 + 13) = 0;
        *((void *)v45 + 14) = 0;
      }
      *((_OWORD *)v45 + 6) = v71;
      *((void *)v45 + 14) = v72;
      if (v66) {
        nitro::nitro_function::nitro_function(v66);
      }
    }
    int v48 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 72), v37, v81);
    *(void *)int v69 = &v80;
    int v49 = (int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48 + 5, &v80, (long long **)v69);
    int v50 = (long long *)(v49 + 14);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v75, v49[14], v49[15], v49[16], v49[18] * v49[17]);
    int v51 = v76;
    std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>((uint64_t)&v65, (uint64_t)v75, (uint64_t)v76, v50);
    std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>((std::string *)v69, (long long *)&v80, (uint64_t)&v65);
    v36 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(v35, v69, (uint64_t)v69);
    if (__p)
    {
      __int16 v74 = __p;
      operator delete(__p);
    }
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    if ((v69[23] & 0x80000000) != 0) {
      operator delete(*(void **)v69);
    }
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
    if (v51) {
      nitro::nitro_function::nitro_function(v51);
    }
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v77);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
  }
  int v53 = v36[7];
  int v52 = (std::__shared_weak_count *)v36[8];
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v54 = *(_OWORD *)(v36 + 11);
  *(_OWORD *)int v69 = *(_OWORD *)(v36 + 9);
  *(_OWORD *)&v69[16] = v54;
  int v55 = v36[14];
  __int16 v70 = (std::__shared_weak_count *)v36[13];
  long long v71 = 0uLL;
  uint64_t v72 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v71, v55, (uint64_t)v36[15], ((char *)v36[15] - (char *)v55) >> 2);
  *((unsigned char *)v20 + 56) = 1;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  v60[0] = *(_OWORD *)v69;
  v60[1] = *(_OWORD *)&v69[16];
  int v61 = v70;
  unsigned int v62 = 0;
  int v63 = 0;
  uint64_t v64 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v62, (const void *)v71, *((uint64_t *)&v71 + 1), (uint64_t)(*((void *)&v71 + 1) - v71) >> 2);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v60);
  if (v62)
  {
    int v63 = v62;
    operator delete(v62);
  }
  *(void *)a4 = v53[3];
  if ((void)v71)
  {
    *((void *)&v71 + 1) = v71;
    operator delete((void *)v71);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v80.__r_.__value_.__l.__data_);
  }
}

void sub_19213D1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v39 - 200));
  if (v38) {
    nitro::nitro_function::nitro_function(v38);
  }
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::bind_dyn_output(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v6 = *((void *)this + 133);
  int v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  }
  if (atomic_load((unint64_t *)(v6 + 408)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v30, "Binding buffers cannot be done while a plan is being executed.");
    std::runtime_error::runtime_error(exception, &v30);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1EE324018;
    LODWORD(exception[1].__vftable) = -1;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v30, *((void **)this + 133), a3, (const char *)1, a2);
  uint64_t v10 = *(void *)(*((void *)this + 133) + 24);
  if (a3 >= (unint64_t)((*(void *)(*((void *)this + 133) + 32) - v10) >> 4))
  {
    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Invalid network_index.");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v11 = (uint64_t *)(v10 + 16 * a3);
  uint64_t v12 = *v11;
  uint64_t v13 = (std::__shared_weak_count *)v11[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    long long v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Null network found.");
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v12 + 136), (unsigned __int8 *)&v30);
  if (!v14)
  {
    uint64_t v15 = std::runtime_error::runtime_error(&v29, "Blob not found.");
    std::runtime_error::~runtime_error(v15);
  }
  uint64_t v17 = *((void *)v14 + 5);
  int v16 = (std::__shared_weak_count *)*((void *)v14 + 6);
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v26 = v16;
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unsigned int v26 = 0;
  }
  uint64_t v25 = v17;
  Espresso::sync_copy_to_host(&v27, &v25);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v18 = v27;
  *(unsigned char *)(v27 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  Espresso::abstract_blob_container::shape(v22, v17);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v22);
  if (__p)
  {
    int64_t v24 = __p;
    operator delete(__p);
  }
  *(void *)a4 = *(void *)(v18 + 24);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_19213D59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_19213D65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19) {
    JUMPOUT(0x19213D62CLL);
  }
  JUMPOUT(0x19213D628);
}

void EspressoLight::espresso_plan::default_blob_name_if_null(std::string *this, void *a2, int a3, const char *a4, char *a5)
{
  if (a3 < 0 || (uint64_t)(a2[4] - a2[3]) >> 4 <= (unint64_t)a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network index");
    goto LABEL_36;
  }
  if (a5)
  {
    std::string::basic_string[abi:ne180100]<0>(this, a5);
    return;
  }
  if (!a4)
  {
    uint64_t v15 = a2[13];
    uint64_t v13 = a2 + 13;
    uint64_t v14 = v15;
    if (v15)
    {
      int v8 = v13;
      do
      {
        int v16 = *(_DWORD *)(v14 + 32);
        BOOL v17 = v16 < a3;
        if (v16 >= a3) {
          uint64_t v18 = (uint64_t *)v14;
        }
        else {
          uint64_t v18 = (uint64_t *)(v14 + 8);
        }
        if (!v17) {
          int v8 = (void *)v14;
        }
        uint64_t v14 = *v18;
      }
      while (*v18);
      if (v8 != v13 && *((_DWORD *)v8 + 8) <= a3) {
        goto LABEL_29;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No inputs declared");
LABEL_36:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v7 = a2[16];
  uint64_t v5 = a2 + 16;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_18;
  }
  int v8 = v5;
  do
  {
    int v9 = *(_DWORD *)(v6 + 32);
    BOOL v10 = v9 < a3;
    if (v9 >= a3) {
      uint64_t v11 = (uint64_t *)v6;
    }
    else {
      uint64_t v11 = (uint64_t *)(v6 + 8);
    }
    if (!v10) {
      int v8 = (void *)v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 == v5 || *((_DWORD *)v8 + 8) > a3)
  {
LABEL_18:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No outputs declared");
    goto LABEL_36;
  }
LABEL_29:
  uint64_t v19 = v8[5];
  if (*(char *)(v19 + 55) < 0)
  {
    long long v21 = *(const std::string::value_type **)(v19 + 32);
    std::string::size_type v22 = *(void *)(v19 + 40);
    std::string::__init_copy_ctor_external(this, v21, v22);
  }
  else
  {
    long long v20 = *(_OWORD *)(v19 + 32);
    this->__r_.__value_.__r.__words[2] = *(void *)(v19 + 48);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v20;
  }
}

void sub_19213D880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void setup_espresso_buffer_with_shape(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  long long v3 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v3;
  v4 = *(const void **)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 32);
  __p = 0;
  uint64_t v5 = *(void *)(a2 + 48);
  int v9 = 0;
  uint64_t v10 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v4, v5, (v5 - (uint64_t)v4) >> 2);
  setup_espresso_buffer_with_shape(a1, (int *)v6);
  if (__p)
  {
    int v9 = __p;
    operator delete(__p);
  }
}

uint64_t setup_espresso_buffer_with_shape(uint64_t result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  *(void *)(result + 24) = v3;
  *(void *)(result + 32) = v4;
  int v6 = a2[5];
  uint64_t v7 = a2[4];
  if ((int)v7 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = v8 * v5;
  *(_DWORD *)(result + 160) = 65568;
  *(void *)(result + 40) = v9;
  *(void *)(result + 48) = 4 * v2;
  uint64_t v10 = 4 * v2 * v3;
  *(void *)(result + 56) = v10;
  *(void *)(result + 64) = v10 * v4;
  *(void *)(result + 72) = v10 * v4 * v9;
  *(void *)(result + 80) = v2;
  *(void *)(result + 88) = v3;
  *(void *)(result + 96) = v4;
  *(void *)(result + 104) = v5;
  *(void *)(result + 112) = v7;
  *(void *)(result + 120) = 1;
  *(void *)(result + 128) = v2;
  uint64_t v11 = (int)v3 * (uint64_t)(int)v2;
  uint64_t v12 = v11 * v4;
  *(void *)(result + 136) = v11;
  *(void *)(result + 144) = v12;
  *(void *)(result + 152) = v12 * v5;
  if (v7 == 1) {
    int v13 = 4;
  }
  else {
    int v13 = 5;
  }
  if (v6 != -1) {
    int v13 = v6;
  }
  *(void *)(result + 8) = v13;
  *(void *)(result + 16) = v2;
  return result;
}

void Espresso::sync_copy_to_host(void *a1, void *a2)
{
  void (***v5)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v6;
  uint64_t v7;
  void v8[6];
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(__n128 *, __n128 *);
  void (*v14)(uint64_t);
  const char *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x4012000000;
  int v13 = __Block_byref_object_copy__144;
  uint64_t v14 = __Block_byref_object_dispose__145;
  uint64_t v15 = "";
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 56))(&v16);
  uint64_t v4 = *a2;
  uint64_t v5 = *(void (****)(uint64_t *__return_ptr, void))(*a2 + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3321888768;
  v8[2] = ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke;
  v8[3] = &unk_1EE38ED10;
  int v6 = (std::__shared_weak_count *)a2[1];
  v8[5] = v4;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[4] = &v10;
  Espresso::abstract_context::compute_batch_sync(v5, v8);
  uint64_t v7 = v11[7];
  *a1 = v11[6];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  _Block_object_dispose(&v10, 8);
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
}

void sub_19213DB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Block_object_dispose(&a17, 8);
  if (a24) {
    nitro::nitro_function::nitro_function(a24);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(void *a1, int a2, int a3, int a4, int a5)
{
  uint64_t v10 = operator new(0x60uLL);
  v10[1] = 0;
  v10[2] = 0;
  *uint64_t v10 = &unk_1EE3899C8;
  v10[3] = &unk_1EE36BF10;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  *((_DWORD *)v10 + 10) = a4;
  *((_DWORD *)v10 + 11) = a5;
  uint64_t v11 = (Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5);
  uint64_t v12 = Espresso::kern_alloc_uninitialized(v11);
  bzero(v12, (size_t)v11);
  v10[6] = v12;
  *((unsigned char *)v10 + 56) = 1;
  *a1 = v10 + 3;
  a1[1] = v10;
}

void sub_19213DC18(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[3].__shared_weak_owners_;
  if (shared_weak_owners) {
    nitro::nitro_function::nitro_function(shared_weak_owners);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3].__vftable;
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *Espresso::kern_alloc_uninitialized(Espresso *this)
{
  memptr = 0;
  int v2 = malloc_type_posix_memalign(&memptr, 0x1000uLL, ((unint64_t)this + 4095) & 0xFFFFFFFFFFFFF000, 0xE526A90BuLL);
  if (v2) {
    Espresso::throw_exception_selector<Espresso::memory_error,int &,unsigned long &>(v2, (uint64_t)this);
  }
  Espresso::on_alloc((Espresso *)memptr, this);
  return memptr;
}

void Espresso::on_alloc(Espresso *this, void *a2)
{
  if (Espresso::onceToken != -1) {
    dispatch_once(&Espresso::onceToken, &__block_literal_global_17798);
  }
  if (Espresso::alloc_dbg_queue) {
    BOOL v4 = Espresso::debug_allocated_mem == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 3221225472;
    v5[2] = ___ZN8Espresso8on_allocEPvm_block_invoke_2;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a2;
    v5[5] = this;
    dispatch_async((dispatch_queue_t)Espresso::alloc_dbg_queue, v5);
  }
}

void Espresso::abstract_context::compute_batch_sync(void (***a1)(uint64_t *__return_ptr, void), void *a2)
{
  uint64_t v3 = a2;
  BOOL v4 = (void *)MEMORY[0x192FF2020]();
  (**a1)(&v5, a1);
  if (v3) {
    v3[2](v3, &v5);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
  (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19213DE58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *Espresso::context_cpu::begin_batch@<X0>(char *this@<X0>, void *a2@<X8>)
{
  if (this[125] && (uint64_t v3 = *((void *)this + 19)) != 0 && !*(void *)(v3 + 8))
  {
    *a2 = *((void *)this + 18);
    a2[1] = v3;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    this = (char *)operator new(0x90uLL);
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *(void *)this = &unk_1EE38D2E0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    this[64] = 1;
    *(_OWORD *)(this + 72) = 0u;
    *(_OWORD *)(this + 88) = 0u;
    *(_OWORD *)(this + 104) = 0u;
    *((_WORD *)this + 60) = 256;
    *((void *)this + 16) = 0;
    *((void *)this + 17) = 0;
    *((void *)this + 3) = &unk_1EE377560;
    *a2 = this + 24;
    a2[1] = this;
  }
  return this;
}

uint64_t ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40), a2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
}

void Espresso::blob_cpu::__copy_to_host(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*a3)
  {
    (*(void (**)(vImage_Buffer *__return_ptr, uint64_t))(*(void *)a1 + 56))(&src, a1);
    long long v11 = *(_OWORD *)&src.data;
    src.data = 0;
    src.height = 0;
    uint64_t v12 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v11;
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
      if (src.height) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)src.height);
      }
    }
  }
  switch(*(_DWORD *)(a1 + 240))
  {
    case 1:
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 176);
      uint64_t v7 = *(void **)(v6 + 24);
      uint64_t v8 = *(void **)(*a3 + 24);
      vImagePixelCount v9 = *(int *)(v6 + 8);
      uint64_t v10 = v6 + 12;
      do
      {
        v9 *= *(int *)(v10 + v5);
        v5 += 4;
      }
      while (v5 != 12);
      src.data = v7;
      src.height = 1;
      src.width = v9;
      src.rowBytes = 2 * v9;
      v37.data = v8;
      v37.height = 1;
      v37.width = v9;
      v37.rowBytes = 4 * v9;
      vImageConvert_Planar16FtoPlanarF(&src, &v37, 0);
      break;
    case 2:
      uint64_t v22 = 0;
      uint64_t v23 = *(void *)(a1 + 192);
      int64_t v24 = *(const char **)(v23 + 24);
      vDSP_Length v25 = *(int *)(v23 + 8);
      uint64_t v26 = v23 + 12;
      do
      {
        v25 *= *(int *)(v26 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      vDSP_vflt8(v24, 1, *(float **)(*a3 + 24), 1, v25);
      break;
    case 3:
      uint64_t v27 = 0;
      uint64_t v28 = *(void *)(a1 + 208);
      std::runtime_error v29 = *(const int **)(v28 + 24);
      vDSP_Length v30 = *(int *)(v28 + 8);
      uint64_t v31 = v28 + 12;
      do
      {
        v30 *= *(int *)(v31 + v27);
        v27 += 4;
      }
      while (v27 != 12);
      vDSP_vflt32(v29, 1, *(float **)(*a3 + 24), 1, v30);
      break;
    case 4:
      uint64_t v32 = 0;
      uint64_t v33 = *(void *)(a1 + 192);
      v34 = *(const unsigned __int8 **)(v33 + 24);
      vDSP_Length v35 = *(int *)(v33 + 8);
      uint64_t v36 = v33 + 12;
      do
      {
        v35 *= *(int *)(v36 + v32);
        v32 += 4;
      }
      while (v32 != 12);
      vDSP_vfltu8(v34, 1, *(float **)(*a3 + 24), 1, v35);
      break;
    default:
      uint64_t v13 = *(void *)(a1 + 160);
      if (v13)
      {
        uint64_t v14 = 0;
        uint64_t v15 = *(int *)(v13 + 8);
        uint64_t v16 = v15;
        do
        {
          v16 *= *(int *)(v13 + 12 + v14);
          v14 += 4;
        }
        while (v14 != 12);
        uint64_t v17 = 0;
        uint64_t v18 = *(int *)(*a3 + 8);
        do
        {
          v18 *= *(int *)(*a3 + 12 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        if (4 * v16 > (unint64_t)(4 * v18)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Host blob has insufficient space. Was the blob shape changed after binding? Consider binding with ESPRESSO_BIND_PTR_DYNAMIC_OUTPUT after execution.");
        }
        uint64_t v19 = 0;
        long long v20 = *(const void **)(v13 + 24);
        uint64_t v21 = v13 + 12;
        do
        {
          v15 *= *(int *)(v21 + v19);
          v19 += 4;
        }
        while (v19 != 12);
        memcpy(*(void **)(*a3 + 24), v20, 4 * v15);
      }
      break;
  }
}

void Espresso::abstract_blob_container::create_host_blob(Espresso::abstract_blob_container *this@<X0>, void *a2@<X8>)
{
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    vImagePixelCount v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

std::string *std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v6 = *(_OWORD *)(a3 + 16);
  std::string::size_type v7 = *(void *)(a3 + 48);
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  this[3].__r_.__value_.__r.__words[0] = v7;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 56);
  this[4].__r_.__value_.__r.__words[0] = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  return this;
}

uint64_t std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *a4;
  long long v6 = a4[1];
  uint64_t v7 = *((void *)a4 + 4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 56), *((const void **)a4 + 5), *((void *)a4 + 6), (uint64_t)(*((void *)a4 + 6) - *((void *)a4 + 5)) >> 2);
  return a1;
}

void sub_19213E3E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x88uLL);
    v9[1] = a1 + 1;
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)((char *)v6 + 72) = *(_OWORD *)(a3 + 40);
    *(_OWORD *)((char *)v6 + 88) = *(_OWORD *)(a3 + 56);
    *((void *)v6 + 13) = *(void *)(a3 + 72);
    v6[7] = *(_OWORD *)(a3 + 80);
    *((void *)v6 + 16) = *(void *)(a3 + 96);
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void EspressoLight::espresso_plan::bind_input(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  v64[0] = a3;
  uint64_t v6 = *((void *)this + 133);
  if (*(_DWORD *)(v6 + 160) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v52, *(_DWORD *)(*((void *)this + 133) + 160));
    v44 = std::string::insert(&v52, 0, "Inconsistent phase of espresso_plan: ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    *(void *)&v55[16] = *((void *)&v44->__r_.__value_.__l + 2);
    *(_OWORD *)int v55 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v55);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  vImagePixelCount v9 = (void *)((char *)this + 1072);
  size_t v10 = strlen((const char *)EspressoLight::abstract_espresso_plan::main_function_name);
  if (*((char *)this + 1095) < 0)
  {
    if (v10 != *((void *)this + 135)) {
      goto LABEL_58;
    }
    if (v10 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    vImagePixelCount v9 = (void *)*v9;
  }
  else if (v10 != *((unsigned __int8 *)this + 1095))
  {
LABEL_58:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input on subnetwork");
  }
  if (memcmp(v9, (const void *)EspressoLight::abstract_espresso_plan::main_function_name, v10)) {
    goto LABEL_58;
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v63, (void *)v6, a3, 0, a2);
  uint64_t v11 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)this + 133) + 144) + 64), a3, v64);
  uint64_t v12 = v11 + 5;
  uint64_t v13 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v11 + 5), &v63);
  if (v11 + 6 == v13)
  {
    long long v46 = a2;
    uint64_t v14 = Espresso::net::bind_global_prefix[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v15 = &v63;
    }
    else {
      uint64_t v15 = (std::string *)v63.__r_.__value_.__r.__words[0];
    }
    int64_t v16 = strlen(Espresso::net::bind_global_prefix[0]);
    if (v16)
    {
      int64_t v17 = v16;
      int64_t v18 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v63.__r_.__value_.__r.__words[2])
          : v63.__r_.__value_.__l.__size_;
      if (v18 < v16) {
        goto LABEL_23;
      }
      uint64_t v19 = (std::string *)((char *)v15 + v18);
      int v20 = *Espresso::net::bind_global_prefix[0];
      uint64_t v21 = v15;
      while (1)
      {
        int64_t v22 = v18 - v17;
        if (v22 == -1) {
          goto LABEL_23;
        }
        uint64_t v23 = (std::string *)memchr(v21, v20, v22 + 1);
        if (!v23) {
          goto LABEL_23;
        }
        int64_t v24 = v23;
        if (!memcmp(v23, v14, v17)) {
          break;
        }
        uint64_t v21 = (std::string *)((char *)&v24->__r_.__value_.__l.__data_ + 1);
        int64_t v18 = (char *)v19 - ((char *)&v24->__r_.__value_.__l.__data_ + 1);
        if (v18 < v17) {
          goto LABEL_23;
        }
      }
      if (v24 == v19 || v24 != v15)
      {
LABEL_23:
        vDSP_Length v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v25, (const std::string *)v55);
        __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    *(void *)int v55 = &v63;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, &v63, (long long **)v55)[56] = 1;
    uint64_t v13 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v12, &v63);
    a2 = (char *)v46;
  }
  uint64_t v26 = std::__tree<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)this + 133) + 144) + 16), a3, v64);
  uint64_t v27 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v26 + 5), &v63);
  if (v26 + 6 == v27)
  {
    uint64_t v28 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 48), a3, v64);
    std::runtime_error v29 = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v28 + 5), &v63);
    if (std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 48), a3, v64)+ 6 == v29)
    {
      uint64_t v30 = *(void *)(*(void *)(*((void *)this + 133) + 24) + 16 * a3);
      std::string::basic_string[abi:ne180100]<0>(v55, a2);
      Espresso::net::get_blob_or_global_with_prefix(v30, (std::string *)v55, &v52);
      if ((v55[23] & 0x80000000) != 0) {
        operator delete(*(void **)v55);
      }
      Espresso::abstract_blob_container::shape(v55, (uint64_t)v52.__r_.__value_.__l.__data_);
      uint64_t v31 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 48), a3, v64);
      int v61 = &v63;
      uint64_t v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31 + 5, &v63, (long long **)&v61);
      long long v33 = *(_OWORD *)&v55[16];
      *(_OWORD *)(v32 + 56) = *(_OWORD *)v55;
      *(_OWORD *)(v32 + 72) = v33;
      *((void *)v32 + 11) = v56;
      v34 = (void *)*((void *)v32 + 12);
      if (v34)
      {
        *((void *)v32 + 13) = v34;
        operator delete(v34);
        *((void *)v32 + 12) = 0;
        *((void *)v32 + 13) = 0;
        *((void *)v32 + 14) = 0;
      }
      *((_OWORD *)v32 + 6) = *(_OWORD *)v57;
      *((void *)v32 + 14) = v58;
      if (v52.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
      }
    }
    vDSP_Length v35 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 48), a3, v64);
    *(void *)int v55 = &v63;
    uint64_t v36 = (int *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v35 + 5, &v63, (long long **)v55);
    vImage_Buffer v37 = (long long *)(v36 + 14);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v61, v36[14], v36[15], v36[16], v36[18] * v36[17]);
    v38 = v62;
    std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>::pair[abi:ne180100]<std::shared_ptr<Espresso::blob<float,4>>&,Espresso::layer_shape const&,0>((uint64_t)&v52, (uint64_t)v61, (uint64_t)v62, v37);
    std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>::pair[abi:ne180100]<std::string&,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>,0>((std::string *)v55, (long long *)&v63, (uint64_t)&v52);
    uint64_t v27 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<std::shared_ptr<Espresso::blob<float,4>>,Espresso::layer_shape>>>(v26 + 5, v55, (uint64_t)v55);
    if (__p)
    {
      int v60 = __p;
      operator delete(__p);
    }
    if (v56) {
      nitro::nitro_function::nitro_function(v56);
    }
    if ((v55[23] & 0x80000000) != 0) {
      operator delete(*(void **)v55);
    }
    if (v53)
    {
      long long v54 = v53;
      operator delete(v53);
    }
    if (v52.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
    }
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
  }
  v40 = v27[7];
  uint64_t v39 = (std::__shared_weak_count *)v27[8];
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v41 = *(_OWORD *)(v27 + 11);
  *(_OWORD *)int v55 = *(_OWORD *)(v27 + 9);
  *(_OWORD *)&v55[16] = v41;
  v42 = v27[14];
  unsigned int v56 = (std::__shared_weak_count *)v27[13];
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v57, v42, (uint64_t)v27[15], ((char *)v27[15] - (char *)v42) >> 2);
  *((unsigned char *)v13 + 56) = 1;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(void *)(a4 + 160) = 0;
  v47[0] = *(_OWORD *)v55;
  v47[1] = *(_OWORD *)&v55[16];
  int v48 = v56;
  int v49 = 0;
  int v50 = 0;
  uint64_t v51 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v49, v57[0], (uint64_t)v57[1], ((char *)v57[1] - (char *)v57[0]) >> 2);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v47);
  if (v49)
  {
    int v50 = v49;
    operator delete(v49);
  }
  *(void *)a4 = v40[3];
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  if (v39) {
    nitro::nitro_function::nitro_function(v39);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_19213EB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, std::__shared_weak_count *a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (*(char *)(v41 - 97) < 0) {
    operator delete(*(void **)(v41 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::switch_engine_batch::commit(Espresso::switch_engine_batch *this)
{
  uint64_t result = *((void *)this + 15);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

__n128 Espresso::ANERuntimeEngine::context::begin_batch@<Q0>(Espresso::ANERuntimeEngine::context *this@<X0>, __n128 *a2@<X8>)
{
  BOOL v4 = (char *)operator new(0x168uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)BOOL v4 = &unk_1EE383FE0;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  v4[121] = 1;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_DWORD *)v4 + 40) = 0;
  *((void *)v4 + 3) = &unk_1EE33AF58;
  *((void *)v4 + 21) = 128;
  *((void *)v4 + 22) = 0;
  *((void *)v4 + 26) = 0;
  *((void *)v4 + 23) = 0;
  *((void *)v4 + 24) = 0;
  *((void *)v4 + 25) = v4 + 208;
  *((void *)v4 + 27) = 0;
  *((void *)v4 + 28) = 850045863;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 338) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  result.n128_u64[0] = (unint64_t)(v4 + 24);
  result.n128_u64[1] = (unint64_t)v4;
  *((void *)v4 + 35) = 0;
  *((void *)v4 + 36) = 1018212795;
  char v6 = *((unsigned char *)this + 140);
  v4[120] = *((unsigned char *)this + 141);
  v4[353] = v6;
  *a2 = result;
  return result;
}

void Espresso::ANERuntimeEngine::batch::sync_wait(Espresso::ANERuntimeEngine::batch *this)
{
  *(void *)((char *)&v63[2] + 2) = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  if (*((unsigned char *)this + 96))
  {
    v52[0] = 1;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
    uint64_t v54 = 10007;
    int v53 = 723714224;
    kdebug_trace();
    std::mutex::lock((std::mutex *)((char *)this + 200));
    int v50 = (void *)*((void *)this + 39);
    std::mutex::unlock((std::mutex *)((char *)this + 200));
    if (*((unsigned char *)this + 328))
    {
      char v6 = Espresso::espresso_os_log_subsystem(v4, v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        int v61 = v50;
        _os_log_debug_impl(&dword_1920CB000, v6, OS_LOG_TYPE_DEBUG, "ANE Batch: sync_waiting for completion of request %zu\n", buf, 0xCu);
      }
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 200);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)((char *)this + 200));
    if (*((unsigned char *)this + 328))
    {
      vImagePixelCount v9 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        int v61 = v50;
        _os_log_debug_impl(&dword_1920CB000, v9, OS_LOG_TYPE_DEBUG, "ANE Batch: In wait_for_async_request_completion (req %zu) ...\n", buf, 0xCu);
      }
    }
    uint64_t v10 = *((void *)this + 19);
    if (*((void *)this + 20) == v10)
    {
      uint64_t v51 = 0;
      *((void *)this + 40) = v50;
    }
    else
    {
      unint64_t v11 = 0;
      unint64_t v12 = 0;
      uint64_t v51 = 0;
      int v49 = 0;
      Class v13 = 0;
      uint64_t v14 = ((char *)this + 184);
      do
      {
        uint64_t v15 = v10 + 16 * v12;
        int64_t v16 = *(objc_class **)v15;
        if (*((void *)this + 39) - *(void *)v15 < *((void *)this + 39) - *((void *)this + 40))
        {
          if (*(unsigned char *)(v15 + 12))
          {
            if (*((unsigned char *)this + 328))
            {
              uint64_t v1 = Espresso::espresso_os_log_subsystem(v7, v8);
              if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
              {
                int64_t v17 = *(objc_class **)v15;
                *(_DWORD *)buf = 134218240;
                int v61 = v17;
                __int16 v62 = 2048;
                v63[0] = v12;
                _os_log_debug_impl(&dword_1920CB000, v1, OS_LOG_TYPE_DEBUG, "ANE Batch: Waiting for completion of async_request %zu at array_index %zu", buf, 0x16u);
              }

              goto LABEL_20;
            }
            do
            {
              if (!*(unsigned char *)(v15 + 12)) {
                break;
              }
              std::condition_variable::wait((std::condition_variable *)((char *)this + 264), &__lk);
LABEL_20:
              ;
            }
            while (*(objc_class **)v15 == v16);
            if (*((unsigned char *)this + 328))
            {
              uint64_t v1 = Espresso::espresso_os_log_subsystem(v7, v8);
              if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v28 = *(objc_class **)v15;
                *(_DWORD *)buf = 134218240;
                int v61 = v28;
                __int16 v62 = 2048;
                v63[0] = v12;
                _os_log_debug_impl(&dword_1920CB000, v1, OS_LOG_TYPE_DEBUG, "ANE Batch: Done waiting for completion of async_request %zu at array_index %zu", buf, 0x16u);
              }
            }
          }
          isa = v14->isa;
          if (v14->isa)
          {
            uint64_t v1 = ((char *)this + 184);
            do
            {
              Class v19 = isa[4].isa;
              BOOL v20 = v19 >= v16;
              if (v19 >= v16) {
                uint64_t v21 = (NSObject **)isa;
              }
              else {
                uint64_t v21 = (NSObject **)&isa[1];
              }
              if (v20) {
                uint64_t v1 = isa;
              }
              isa = *v21;
            }
            while (*v21);
            if (v1 != v14 && v16 >= v1[4].isa)
            {
              if (!v11)
              {
                Class v13 = v1[5].isa;
                int v49 = (int)v1[6].isa;
                int64_t v22 = v1[7].isa;

                uint64_t v51 = v22;
              }
              uint64_t v23 = v1[1].isa;
              int64_t v24 = v1;
              if (v23)
              {
                do
                {
                  vDSP_Length v25 = (NSObject **)v23;
                  uint64_t v23 = v23->isa;
                }
                while (v23);
              }
              else
              {
                do
                {
                  vDSP_Length v25 = (NSObject **)v24[2].isa;
                  BOOL v26 = *v25 == v24;
                  int64_t v24 = v25;
                }
                while (!v26);
              }
              if (*((NSObject **)this + 22) == v1) {
                *((void *)this + 22) = v25;
              }
              uint64_t v27 = (uint64_t *)*((void *)this + 23);
              --*((void *)this + 24);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v27, (uint64_t *)v1);

              operator delete(v1);
              ++v11;
            }
          }
        }
        ++v12;
        uint64_t v10 = *((void *)this + 19);
      }
      while (v12 < (*((void *)this + 20) - v10) >> 4);
      *((void *)this + 40) = v50;
      if (v11)
      {
        std::runtime_error v29 = Espresso::espresso_os_log_subsystem(v7, v8);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v40 = "";
          if (v11 > 1) {
            v40 = "Only the first of these will be surfaced.";
          }
          *(_DWORD *)buf = 134218242;
          int v61 = (void *)v11;
          __int16 v62 = 2080;
          v63[0] = v40;
          _os_log_error_impl(&dword_1920CB000, v29, OS_LOG_TYPE_ERROR, "ANE Batch: %zu of the async requests being waited for returned errors. %s", buf, 0x16u);
        }

        uint64_t v32 = Espresso::espresso_os_log_subsystem(v30, v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          int v41 = [(objc_class *)v51 code];
          id v42 = [(objc_class *)v51 description];
          uint64_t v43 = [v42 UTF8String];
          if (v43)
          {
            uint64_t v1 = [(objc_class *)v51 description];
            v44 = (const char *)[v1 UTF8String];
          }
          else
          {
            v44 = "";
          }
          *(_DWORD *)buf = 134218498;
          int v61 = v13;
          __int16 v62 = 1024;
          LODWORD(v63[0]) = v41;
          WORD2(v63[0]) = 2080;
          *(void *)((char *)v63 + 6) = v44;
          _os_log_error_impl(&dword_1920CB000, v32, OS_LOG_TYPE_ERROR, "ANE Batch: Async request %zu returned error: code=%d err=%s", buf, 0x1Cu);
          if (v43) {
        }
          }
        if ([(objc_class *)v51 code] != 5)
        {
          long long v46 = [(objc_class *)v51 localizedDescription];
          int v47 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            int v47 = (void *)*v47;
          }
          if (v46) {
            int v48 = (const char *)[v46 UTF8String];
          }
          else {
            int v48 = "";
          }
          Espresso::throw_exception_selector<Espresso::generic_error,char const*,char const*>("ANEF error: %s, %s", (uint64_t)v47, (uint64_t)v48);
        }
        v34 = Espresso::espresso_os_log_subsystem((Espresso *)5, v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          long long v45 = (void *)((char *)this + 8);
          if (*((char *)this + 31) < 0) {
            long long v45 = (void *)*v45;
          }
          *(_DWORD *)buf = 136315394;
          int v61 = v45;
          __int16 v62 = 1024;
          LODWORD(v63[0]) = v49;
          _os_log_error_impl(&dword_1920CB000, v34, OS_LOG_TYPE_ERROR, "[Espresso::overflow_error] %s:%d", buf, 0x12u);
        }

        if (*((unsigned char *)this + 329))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::overflow_error::overflow_error(exception);
        }
      }
    }
    if (*((unsigned char *)this + 328))
    {
      uint64_t v36 = Espresso::espresso_os_log_subsystem(v7, v8);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        int v61 = v50;
        _os_log_debug_impl(&dword_1920CB000, v36, OS_LOG_TYPE_DEBUG, "ANE Batch: wait_for_async_request_completion (req %zu) completed.\n", buf, 0xCu);
      }
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (*((unsigned char *)this + 328))
    {
      uint64_t v39 = Espresso::espresso_os_log_subsystem(v37, v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134217984;
        int v61 = v50;
        _os_log_debug_impl(&dword_1920CB000, v39, OS_LOG_TYPE_DEBUG, "ANE Batch: sync_wait completed for request %zu\n", buf, 0xCu);
      }
    }
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v52);
  }
}

void sub_19213F534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::mutex *a23,char a24)
{
  if (a24) {
    std::mutex::unlock(a23);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a14);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::output_raw_ptr(EspressoLight::espresso_plan *this, uint64_t a2, char *a3)
{
  uint64_t v5 = *((void *)this + 133);
  int v6 = *(_DWORD *)(v5 + 160);
  if (v6 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v6);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&__p, (void *)v5, a2, (const char *)1, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  (*(void (**)(EspressoLight::espresso_plan *, uint64_t, std::string *))(*(void *)this + 96))(this, a2, p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19213F66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_plan::input_raw_ptr(EspressoLight::espresso_plan *this@<X0>, char *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  uint64_t v6 = *((void *)this + 133);
  int v7 = *(_DWORD *)(v6 + 160);
  if (v7 != 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v7);
  }
  EspressoLight::espresso_plan::default_blob_name_if_null(&v22, (void *)v6, a3, 0, a2);
  uint64_t v9 = *(void *)(*((void *)this + 133) + 24);
  if (a3 >= (unint64_t)((*(void *)(*((void *)this + 133) + 32) - v9) >> 4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = (uint64_t *)(v9 + 16 * a3);
  uint64_t v11 = *v10;
  unint64_t v12 = (std::__shared_weak_count *)v10[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11)
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Null network found.");
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::net::get_blob_or_global_with_prefix(v11, &v22, &v20);
  uint64_t v13 = v20;
  if (!v20)
  {
    int64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "Blob not found.");
    __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  Espresso::abstract_blob_container::shape(v17, v13);
  setup_espresso_buffer_with_shape(a4, (uint64_t)v17);
  if (__p)
  {
    Class v19 = __p;
    operator delete(__p);
  }
  *(void *)a4 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 104))(v13);
  *(_DWORD *)(a4 + 160) = 65568;
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_19213F888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  __cxa_free_exception(v20);
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  if (*(char *)(v21 - 33) < 0) {
    operator delete(*(void **)(v21 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::blob_container::unsafe_opaque_raw_pointer(id **this)
{
  if ((unint64_t)[*this[27] nFrames] >= 2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("unsafe_opaque_raw_pointer not supported with double buffer submit");
  }
  int v2 = *this[27];

  return [v2 ioSurfaceForMultiBufferFrame:0];
}

void sub_19213F9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void Espresso::net::__build(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if ((a4 & 0x80000000) != 0) {
    uint64_t v4 = (*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4;
  }
  unsigned int v8 = (***(uint64_t (****)(void))(*(void *)(a1 + 16) + 8))(*(void *)(*(void *)(a1 + 16) + 8));
  uint64_t v9 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(a1 + 528), v8);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  if (*(unsigned char *)(*(void *)(a1 + 16) + 124) && (uint64_t v12 = *(void *)(a1 + 1256)) != 0 && *(unsigned char *)(v12 + 124))
  {
    Espresso::net::__build_network_two_compilers(a1, a2, a3, v4);
  }
  else if (v11)
  {
    LOBYTE(v13[0]) = *(unsigned char *)(a1 + 1352);
    memset((char *)v13 + 4, 0, 68);
    if (LOBYTE(v13[0]))
    {
      v13[1] = a1;
      memset(&v13[2], 0, 24);
      v13[5] = a1;
      memset(&v13[6], 0, 24);
      HIDWORD(v13[0]) = 723714104;
      kdebug_trace();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2, a3, v4);
    Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v13);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19213FC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso25reload_network_on_contextERKNSt3__110shared_ptrINS_3netEEERKNS1_INS_16abstract_contextEEENS_12compute_pathE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::all_globals((Espresso::net *)&__p, **(void **)(a1 + 32));
  uint64_t v4 = v10;
  if (v10)
  {
    do
    {
      Espresso::net::get_global(&v7, *(void *)(a1 + 40), (unsigned __int8 *)v4 + 16);
      if (v7) {
        Espresso::blobcpy(a2, &v7, v4 + 5);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
    uint64_t v5 = v10;
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v5);
  uint64_t v6 = __p;
  std::string __p = 0;
  if (v6) {
    operator delete(v6);
  }
}

void sub_19213FD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    nitro::nitro_function::nitro_function(a4);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::net::all_globals(Espresso::net *this, uint64_t a2)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 1096);
  if (!v5)
  {
    uint64_t v6 = 0;
LABEL_6:
    uint64_t v27 = v6;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 1472);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)this, *(void *)(a2 + 1448));
    uint64_t v7 = *(unsigned __int8 **)(a2 + 1456);
    if (!v7)
    {
LABEL_47:
      uint64_t v6 = v27;
      if (!v27) {
        return;
      }
      goto LABEL_48;
    }
    unsigned int v8 = (void *)((char *)this + 16);
    while (1)
    {
      unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v7 + 16));
      unint64_t v10 = v9;
      unint64_t v11 = *((void *)this + 1);
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        unint64_t v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v2 = v9;
          if (v9 >= v11) {
            unint64_t v2 = v9 % v11;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v9;
        }
        uint64_t v14 = *(unsigned __int8 ***)(*(void *)this + 8 * v2);
        if (v14)
        {
          for (i = *v14; i; i = *(unsigned __int8 **)i)
          {
            unint64_t v16 = *((void *)i + 1);
            if (v16 == v10)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v7 + 16)) {
                goto LABEL_46;
              }
            }
            else
            {
              if (v13 > 1)
              {
                if (v16 >= v11) {
                  v16 %= v11;
                }
              }
              else
              {
                v16 &= v11 - 1;
              }
              if (v16 != v2) {
                break;
              }
            }
          }
        }
      }
      int64_t v17 = (char *)operator new(0x38uLL);
      v28[0] = v17;
      v28[1] = (char *)this + 16;
      char v29 = 0;
      *(void *)int64_t v17 = 0;
      *((void *)v17 + 1) = v10;
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v17 + 16), (long long *)v7 + 1);
      char v29 = 1;
      float v18 = (float)(unint64_t)(*((void *)this + 3) + 1);
      float v19 = *((float *)this + 8);
      if (!v11 || (float)(v19 * (float)v11) < v18)
      {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v11);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)this, v23);
        unint64_t v11 = *((void *)this + 1);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v2 = v10 % v11;
          }
          else {
            unint64_t v2 = v10;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v10;
        }
      }
      uint64_t v24 = *(void *)this;
      vDSP_Length v25 = *(void **)(*(void *)this + 8 * v2);
      if (v25)
      {
        *(void *)int64_t v17 = *v25;
      }
      else
      {
        *(void *)int64_t v17 = *v8;
        *unsigned int v8 = v17;
        *(void *)(v24 + 8 * v2) = v8;
        if (!*(void *)v17) {
          goto LABEL_45;
        }
        unint64_t v26 = *(void *)(*(void *)v17 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v26 >= v11) {
            v26 %= v11;
          }
        }
        else
        {
          v26 &= v11 - 1;
        }
        vDSP_Length v25 = (void *)(*(void *)this + 8 * v26);
      }
      *vDSP_Length v25 = v17;
LABEL_45:
      v28[0] = 0;
      ++*((void *)this + 3);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
LABEL_46:
      uint64_t v7 = *(unsigned __int8 **)v7;
      if (!v7) {
        goto LABEL_47;
      }
    }
  }
  uint64_t v6 = std::__shared_weak_count::lock(v5);
  if (!v6 || !*(void *)(a2 + 1088)) {
    goto LABEL_6;
  }
  Espresso::net::all_globals(this);
LABEL_48:

  nitro::nitro_function::nitro_function(v6);
}

void sub_192140068(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error>(const char *a1)
{
}

void Espresso::throw_exception<Espresso::not_implemented_error>(const char *a1)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::not_implemented_error::not_implemented_error(exception, a1);
}

void sub_192140108(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::~E5Backend_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this)
{
  MIL::IROpset::~IROpset(this);

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::E5ProgramImpl::E5ProgramImpl(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  uint64_t v6 = E5RT::E5Program::E5Program((void *)a1);
  E5RT::E5ProgramBuilder::E5ProgramBuilder(v6 + 1);
  *(void *)a1 = &unk_1EE324908;
  *(void *)(a1 + 8) = &unk_1EE324980;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = 0;
  std::string::operator=((std::string *)(a1 + 80), a3);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 40))();
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 56))(__p);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  unint64_t v9 = *(uint64_t **)v8;
  unint64_t v10 = *(uint64_t **)(v8 + 8);
  while (v9 != v10)
  {
    if (!(*(unsigned int (**)(void))(*(void *)*v9 + 24))())
    {
      if (((*(uint64_t (**)(void))(*(void *)*v9 + 40))() & 0x10) != 0)
      {
        exception = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "E5ProgramImpl");
        std::string::basic_string[abi:ne180100]<0>(v20, "Inference runtime doesn't support private functions yet.");
        E5RT::Status::Status(v21, 8, v20);
        E5RT::E5RTError::E5RTError(exception, v22, v21);
      }
      E5RT::E5ProgramImpl::LoadFunctionInfo(a1, *a2, *v9, __p);
    }
    v9 += 2;
  }
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16))
  {
    float v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "E5ProgramImpl");
    std::operator+<char>();
    E5RT::Status::Status(v21, 8, v20);
    E5RT::E5RTError::E5RTError(v19, v22, v21);
  }
  E5RT::E5ProgramImpl::LoadBuildInfo(a1, *a2);
  unint64_t v11 = v24;
  if (v24)
  {
    do
    {
      uint64_t v14 = (void *)*v11;
      uint64_t v15 = (void **)v11[5];
      if (v15)
      {
        do
        {
          int64_t v17 = (void **)*v15;
          if (*((char *)v15 + 39) < 0) {
            operator delete(v15[2]);
          }
          operator delete(v15);
          uint64_t v15 = v17;
        }
        while (v17);
      }
      unint64_t v16 = (void *)v11[3];
      v11[3] = 0;
      if (v16) {
        operator delete(v16);
      }
      operator delete(v11);
      unint64_t v11 = v14;
    }
    while (v14);
  }
  uint8x8_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  return a1;
}

void sub_1921404A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)&a22);
  if (*(char *)(v22 + 103) < 0) {
    operator delete(*v26);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v25);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v22 + 40));
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100](v24);
  E5RT::AsyncEventImpl::~AsyncEventImpl(v23);
  E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)v22);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_get_shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &unk_1EE399498;
  v6[1] = a1;
  _OWORD v6[2] = a2;
  v6[3] = a3;
  unint64_t v10 = v6;
  uint64_t v7 = E5RT::ExceptionSafeExecute((uint64_t)v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return v7;
}

void sub_1921406D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExceptionSafeExecute(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

void sub_192140794(_Unwind_Exception *a1)
{
}

void E5PlatformManagerImpl::GetCostModelIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 8);
  if (!sub_1923B1664((void *)(a1 + 8), a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid platform id");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = sub_1923B1664(v5, a2);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (*((char *)v6 + 79) < 0)
  {
    uint64_t v8 = (const std::string::value_type *)v6[7];
    std::string::size_type v9 = v6[8];
    std::string::__init_copy_ctor_external(a3, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)(v6 + 7);
    a3->__r_.__value_.__r.__words[2] = v6[9];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1921408A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t std::hash<E5Common::PlatformIdentifier>::operator()(uint64_t a1, uint64_t a2)
{
  return *(void *)a2 ^ (2 * *(unsigned int *)(a2 + 8));
}

BOOL E5Common::PlatformIdentifier::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

{
  return *(void *)a1 == a2 && *(_DWORD *)(a1 + 8) == 0;
}

uint64_t E5RT::GetE5RTLog(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_192455BC8;
  block[3] = &unk_1E5746408;
  block[4] = a1;
  if (qword_1E9303A10 != -1) {
    dispatch_once(&qword_1E9303A10, block);
  }
  return qword_1E9303A08;
}

void *std::vector<std::string>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 24 * a3;
    uint64_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      std::string::size_type v9 = (std::string *)&v6[v7];
      unint64_t v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_192140AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_192140AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::find<std::string>(void *a1, uint64_t a2)
{
  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  unint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    unint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        unint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          unint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        unint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void **std::map<Espresso::AOT::BackendIdentifier,double>::map[abi:ne180100](void **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  unint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      int8x8_t v7 = std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(a1, v4, &v13, &v12, a2);
      if (!*v7)
      {
        unint64_t v8 = operator new(0x30uLL);
        v8[2] = *(_OWORD *)a2;
        uint8x8_t v9 = v13;
        *(void *)unint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = v9;
        *int8x8_t v7 = (uint64_t)v8;
        unint64_t v10 = (void *)**a1;
        if (v10)
        {
          *a1 = v10;
          unint64_t v8 = (_OWORD *)*v7;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v8);
        a1[2] = (void *)((char *)a1[2] + 1);
      }
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_192140E20(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<Espresso::AOT::BackendIdentifier,double>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__tree_node<std::__value_type<Espresso::AOT::BackendIdentifier,double>,void *> *,long>>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    uint64_t v6 = a2;
    int8x8_t v7 = result;
    unint64_t v8 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(v7, v8, v18, &v17, v6 + 8);
      if (*result)
      {
        uint8x8_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v10 = result;
        uint64_t v11 = operator new(0x30uLL);
        v11[2] = *((_OWORD *)v6 + 2);
        uint8x8_t v12 = v18[0];
        *(void *)uint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = v12;
        *unint64_t v10 = (uint64_t)v11;
        unint64_t v13 = *(void **)*v7;
        if (v13)
        {
          *int8x8_t v7 = (uint64_t)v13;
          char v14 = (uint64_t *)*v10;
        }
        else
        {
          char v14 = (uint64_t *)v11;
        }
        __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        uint8x8_t v9 = (unsigned int *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            uint64_t v15 = v9;
            uint8x8_t v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        uint64_t v15 = (unsigned int *)*((void *)v6 + 2);
        BOOL v16 = *(void *)v15 == (void)v6;
        uint64_t v6 = v15;
      }
      while (!v16);
LABEL_3:
      uint64_t v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::__find_equal<Espresso::AOT::BackendIdentifier>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  unint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint8x8_t v9 = (uint64_t *)*a2;
      do
      {
        unint64_t v10 = v9;
        uint8x8_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      char v14 = a2;
      do
      {
        unint64_t v10 = (uint64_t *)v14[2];
        BOOL v15 = *v10 == (void)v14;
        char v14 = v10;
      }
      while (v15);
    }
    unsigned int v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v19 = (uint64_t *)v18;
          unsigned int v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20) {
            break;
          }
          uint64_t v18 = *v19;
          unint64_t v5 = v19;
          if (!*v19) {
            goto LABEL_25;
          }
        }
        if (v20 >= v16) {
          break;
        }
        unint64_t v5 = v19 + 1;
        uint64_t v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    uint64_t v11 = a2[1];
    if (v11)
    {
      uint8x8_t v12 = (uint64_t *)a2[1];
      do
      {
        unint64_t v13 = v12;
        uint8x8_t v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v21 = a2;
      do
      {
        unint64_t v13 = (uint64_t *)v21[2];
        BOOL v15 = *v13 == (void)v21;
        uint64_t v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      uint64_t v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t *)v22;
            unsigned int v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24) {
              break;
            }
            uint64_t v22 = *v23;
            unint64_t v5 = v23;
            if (!*v23) {
              goto LABEL_41;
            }
          }
          if (v24 >= v6) {
            break;
          }
          unint64_t v5 = v23 + 1;
          uint64_t v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void *std::__hash_table<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::__unordered_map_hasher<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::hash<E5RT::IOPort *>,std::equal_to<E5RT::IOPort *>,true>,std::__unordered_map_equal<E5RT::IOPort *,std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>,std::equal_to<E5RT::IOPort *>,std::hash<E5RT::IOPort *>,true>,std::allocator<std::__hash_value_type<E5RT::IOPort *,std::bitset<32ul>>>>::__emplace_unique_key_args<E5RT::IOPort *,std::piecewise_construct_t const&,std::tuple<E5RT::IOPort *&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v7 = *a2;
  unint64_t v8 = HIDWORD(*a2);
  unint64_t v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      char v14 = (void *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7) {
                return v14;
              }
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            char v14 = (void *)*v14;
            if (!v14) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7) {
              return v14;
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v4) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = 0;
  v18[1] = v10;
  v18[2] = **a4;
  v18[3] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v11 && (float)(v20 * (float)v11) >= v19)
  {
    uint64_t v21 = *(void *)a1;
    uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
    if (v22)
    {
LABEL_26:
      *uint64_t v18 = *v22;
LABEL_61:
      *uint64_t v22 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25) {
      size_t prime = v25;
    }
    else {
      size_t prime = v24;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (prime > v11) {
      goto LABEL_37;
    }
    if (prime < v11)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime < v11) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v30 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v4 = v10 % v11;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v10;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
        if (v22) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v30 & v10;
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * (v30 & v10));
      if (v22) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    unint64_t v31 = *(void *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_192141448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::__unordered_map_hasher<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::hash<E5RT::AsyncEvent const*>,std::equal_to<E5RT::AsyncEvent const*>,true>,std::__unordered_map_equal<E5RT::AsyncEvent const*,std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>,std::equal_to<E5RT::AsyncEvent const*>,std::hash<E5RT::AsyncEvent const*>,true>,std::allocator<std::__hash_value_type<E5RT::AsyncEvent const*,_ANESharedWaitEvent * {__strong}>>>::find<E5RT::AsyncEvent const*>(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = HIDWORD(*a2);
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v6;
    if (v6 >= *(void *)&v2) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (*(void *)&v2 - 1);
  }
  unint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  __n128 result = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v11 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v13 = result[1];
        if (v13 == v6)
        {
          if (result[2] == v3) {
            return result;
          }
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        __n128 result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v12 == v6)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v2) {
          v12 %= *(void *)&v2;
        }
        if (v12 != v8) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetMinorVersion(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 4);
}

uint64_t E5RT::ComputeProgramHeaderPriv::GetMajorVersion(E5RT::ComputeProgramHeaderPriv *this)
{
  return *(unsigned __int16 *)(*((void *)this + 1) + 2);
}

_OWORD *std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__push_back_slow_path<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions> const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v3;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 16 * v6;
  unint64_t v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  long long v12 = *a2;
  *(_OWORD *)uint64_t v11 = *a2;
  if (*((void *)&v12 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void **)a1;
    unint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v13 = &v10[v9];
  char v14 = v11 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_19;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v15;
    v11 -= 16;
    void *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v16 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      unint64_t v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_19:
  }
    operator delete(v3);
  return v14;
}

unint64_t E5RT::TensorDescriptor::GetRank(E5RT::TensorDescriptor *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)this + 1) + 8) - **((void **)this + 1)) >> 3);
}

uint64_t *E5RT::E5FunctionImpl::LoadOperandInfo@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(void))(**a2 + 24))() & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
    std::string::basic_string[abi:ne180100]<0>(v55, "Invalid symbol type.");
    E5RT::Status::Status(&v49, 8, v55);
    E5RT::E5RTError::E5RTError(exception, &__p, &v49);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**a2 + 16))();
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((void *)(a1 + 408), v8);
  uint64_t v10 = **a2;
  if (!v9)
  {
    if ((*(unsigned int (**)(void))(v10 + 24))() != 1)
    {
      uint64_t v43 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
      std::string::basic_string[abi:ne180100]<0>(v55, "Invalid symbol type.");
      E5RT::Status::Status(&v49, 8, v55);
      E5RT::E5RTError::E5RTError(v43, &__p, &v49);
    }
    uint64_t v14 = (*(uint64_t (**)(void))(**a2 + 56))();
    uint64_t v48 = 0;
    uint64_t v48 = (*(uint64_t (**)(void))(**a2 + 48))();
    uint64_t v15 = (*(uint64_t (**)(void))(**a2 + 16))();
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)v15;
      v47.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a3 + 48))(&__p, a3, 5, 1);
    unint64_t v17 = (uint64_t (*)(unsigned int **))__p;
    uint64_t v19 = *(void *)__p;
    uint64_t v18 = *((void *)__p + 1);
    uint64_t v46 = *(void *)__p;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    float v20 = v52;
    if (v52 == v17)
    {
      uint64_t v22 = v17;
    }
    else
    {
      do
      {
        uint64_t v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        float v20 = (uint64_t (*)(unsigned int **))((char *)v20 - 16);
      }
      while (v20 != v17);
      uint64_t v22 = __p;
      uint64_t v19 = v46;
    }
    std::string v52 = v17;
    operator delete(v22);
    BOOL v23 = (unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v19 + 40))(v19) + v14);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3)) {
      operator new();
    }
    std::string __p = &unk_1EE377EC0;
    std::string v52 = E5RT_FB::VerifySizePrefixedOperandDescBuffer;
    p_p = &__p;
    v55[0] = &unk_1EE377C58;
    v55[1] = E5RT_FB::UnPackSizePrefixedOperandDesc;
    long long v56 = v55;
    E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::OperandDescT>(v23, (uint64_t)&__p, (uint64_t)v55);
    unint64_t v24 = (unsigned __int8 *)v49;
    int v49 = 0;
    if (v56 == v55)
    {
      (*(void (**)(void *))(v55[0] + 32))(v55);
      unint64_t v25 = p_p;
      if (p_p != &__p) {
        goto LABEL_26;
      }
    }
    else
    {
      if (v56) {
        (*(void (**)(void *))(*v56 + 40))(v56);
      }
      unint64_t v25 = p_p;
      if (p_p != &__p)
      {
LABEL_26:
        if (v25)
        {
          (*((void (**)(void **))*v25 + 5))(v25);
          int v26 = *v24;
          if (v26 == 2)
          {
LABEL_35:
            unint64_t v27 = (unsigned int *)*((void *)v24 + 1);
            if (v27)
            {
              BOOL IsMultiSliceFormat = E5RT::IsMultiSliceFormat(*v27);
              uint64_t v30 = *((void *)v27 + 3);
              uint64_t v29 = (uint64_t *)*((void *)v27 + 4);
              if (IsMultiSliceFormat)
              {
                if ((uint64_t *)v30 == v29) {
                  E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*v27, *((void *)v27 + 1), *((void *)v27 + 2));
                }
                long long v45 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&__p, "CreateSurfaceFromDesc");
                std::string::basic_string[abi:ne180100]<0>(v55, "Bytes per row stride not supported with multi slice formats.");
                E5RT::Status::Status(&v49, 8, v55);
                E5RT::E5RTError::E5RTError(v45, &__p, &v49);
              }
              if ((uint64_t *)v30 != v29)
              {
                std::string __p = 0;
                std::string v52 = 0;
                int v53 = 0;
                uint64_t v31 = (uint64_t)v29 - v30;
                if ((uint64_t)v29 - v30 >= 0)
                {
                  uint64_t v32 = operator new((size_t)v29 - v30);
                  std::string __p = v32;
                  int v53 = (char *)v32 + 8 * (v31 >> 3);
                  long long v33 = (uint64_t *)v30;
                  v34 = (uint64_t (*)(unsigned int **))v32;
                  if ((unint64_t)(v31 - 8) < 0x18) {
                    goto LABEL_57;
                  }
                  unint64_t v35 = ((unint64_t)(v31 - 8) >> 3) + 1;
                  uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
                  long long v33 = (uint64_t *)(v30 + v36);
                  v34 = (uint64_t (*)(unsigned int **))((char *)v32 + v36);
                  vImage_Buffer v37 = v32 + 1;
                  v38 = (long long *)(v30 + 16);
                  uint64_t v39 = v35 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v40 = *v38;
                    *(v37 - 1) = *(v38 - 1);
                    _OWORD *v37 = v40;
                    v37 += 2;
                    v38 += 2;
                    v39 -= 4;
                  }
                  while (v39);
                  if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_57:
                    do
                    {
                      uint64_t v41 = *v33++;
                      *(void *)v34 = v41;
                      v34 = (uint64_t (*)(unsigned int **))((char *)v34 + 8);
                    }
                    while (v33 != v29);
                  }
                  std::string v52 = v34;
                  E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*v27, *((void *)v27 + 1), *((void *)v27 + 2), &__p);
                }
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              }
              E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(*v27, *((void *)v27 + 1), *((void *)v27 + 2));
            }
            goto LABEL_52;
          }
LABEL_32:
          if (v26 == 1 && *((void *)v24 + 1)) {
            E5RT::TensorDataType::TensorDataType(&v50);
          }
LABEL_52:
          v44 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "LoadOperandInfo");
          std::string::basic_string[abi:ne180100]<0>(v55, "Invalid operand type");
          E5RT::Status::Status(&v49, 8, v55);
          E5RT::E5RTError::E5RTError(v44, &__p, &v49);
        }
LABEL_31:
        int v26 = *v24;
        if (v26 == 2) {
          goto LABEL_35;
        }
        goto LABEL_32;
      }
    }
    (*((void (**)(void **))__p + 4))(&__p);
    goto LABEL_31;
  }
  uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))();
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>((void *)(a1 + 408), v11);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v13 = result[6];
  *a4 = result[5];
  a4[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_192142A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, unsigned __int8 *a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  E5RT::Status::~Status((E5RT::Status *)&a33);
  if (*(char *)(v45 - 121) < 0)
  {
    operator delete(*(void **)(v45 - 144));
    if ((v44 & 1) == 0)
    {
LABEL_6:
      if (a43 < 0) {
        operator delete(__p);
      }
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
      std::unique_ptr<E5RT_FB::OperandDescT>::~unique_ptr[abi:ne180100](&a20);
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
      if (a30 < 0)
      {
        operator delete(a25);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v43);
  goto LABEL_6;
}

void sub_192142E00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 16;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v10)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v10)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = (void *)(a1 + 16);
  uint64_t v14 = (unsigned __int8 *)operator new(0x28uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((void *)v14 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    uint64_t v28 = *(void *)a1;
    uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(void *)uint64_t v14 = *v29;
LABEL_89:
      void *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void *)a1;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void *)a1;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void *)a1;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v14 = *v25;
  *unint64_t v25 = v14;
  *(void *)(v28 + 8 * v3) = v25;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11) {
        v39 %= v11;
      }
    }
    else
    {
      v39 &= v11 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192143264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::TensorDataType::~TensorDataType(E5RT::TensorDataType *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324C08;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324C08;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324C08;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t E5RT::IOPort::GetPortDescriptorRef(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::GetPortDescriptorRef(this[1]);
}

uint64_t E5RT::IOPortImpl::GetPortDescriptorRef(E5RT::IOPortImpl *this)
{
  return *((void *)this + 2);
}

uint64_t std::__shared_ptr_pointer<E5RT_FB::SymbolT  *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

uint64_t E5RT::IOPort::GetPortDescriptor@<X0>(E5RT::IOPort *this@<X0>, void *a2@<X8>)
{
  return E5RT::IOPortImpl::GetPortDescriptor(*((void *)this + 1), a2);
}

uint64_t E5RT::TensorDescriptor::GetTensorShape(E5RT::TensorDescriptor *this)
{
  return *((void *)this + 1) + 24;
}

uint64_t E5RT::IOPortImpl::GetPortDescriptor@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  *a2 = *(void *)(this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::allocator<E5RT::E5OperandImpl>::construct[abi:ne180100]<E5RT::E5OperandImpl,std::string &,std::shared_ptr<E5RT::ComputeProgramSymbol const>,E5RT::AllocType &,unsigned long &,std::shared_ptr<E5RT::OperandDescriptor> &,std::unordered_set<std::string> const&>(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, unsigned int *a5, uint64_t *a6, uint64_t *a7, uint64_t a8)
{
  long long v15 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v8 = *a5;
  uint64_t v9 = *a6;
  unint64_t v10 = (std::__shared_weak_count *)a7[1];
  uint64_t v13 = *a7;
  uint64_t v14 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  E5RT::E5OperandImpl::E5OperandImpl(a2, a3, &v15, v8, v9, &v13, a8);
  unint64_t v11 = v14;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint8x8_t v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_19214348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<E5RT::E5OperandImpl const>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = *((void *)v14 + 1);
            if (v21 == v10)
            {
              uint64_t v22 = v14[39];
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = v14[39];
              }
              else {
                uint64_t v23 = *((void *)v14 + 3);
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = *(unsigned __int8 **)v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v14 + 1);
          if (v17 == v10)
          {
            uint64_t v18 = v14[39];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = v14[39];
            }
            else {
              uint64_t v19 = *((void *)v14 + 3);
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  unint64_t v25 = (void *)(a1 + 16);
  uint64_t v14 = (unsigned __int8 *)operator new(0x38uLL);
  v41[0] = v14;
  v41[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v10;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *((void *)v14 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v14 + 40) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  char v42 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (v11 && (float)(v27 * (float)v11) >= v26)
  {
    uint64_t v28 = *(void *)a1;
    uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
    if (v29)
    {
LABEL_54:
      *(void *)uint64_t v14 = *v29;
LABEL_89:
      void *v29 = v14;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v30 = 1;
    if (v11 >= 3) {
      BOOL v30 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v31 = v30 | (2 * v11);
    unint64_t v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32) {
      size_t prime = v32;
    }
    else {
      size_t prime = v31;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v34) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v34)
    {
      unint64_t v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v34 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        unint64_t v35 = std::__next_prime(v35);
      }
      else
      {
        uint64_t v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2) {
          unint64_t v35 = v37;
        }
      }
      if (prime <= v35) {
        size_t prime = v35;
      }
      if (prime < *(void *)&v34) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v28 = *(void *)a1;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v29) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v28 = *(void *)a1;
        uint64_t v29 = *(void **)(*(void *)a1 + 8 * v10);
        if (v29) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v38 & v10;
      uint64_t v28 = *(void *)a1;
      uint64_t v29 = *(void **)(*(void *)a1 + 8 * (v38 & v10));
      if (v29) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v14 = *v25;
  *unint64_t v25 = v14;
  *(void *)(v28 + 8 * v3) = v25;
  if (*(void *)v14)
  {
    unint64_t v39 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11) {
        v39 %= v11;
      }
    }
    else
    {
      v39 &= v11 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1921438C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::VerifyAndUnPackSizePrefixedE5RTBuffer<E5RT_FB::OperandDescT>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  v12[0] = a1;
  v12[1] = v3 + 4;
  v12[2] = 0xF424000000040;
  int v13 = 257;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  if (v3 >= 0x7FFFFFFB) {
    sub_192429E1C();
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5) {
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v12) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v12, "VerifyAndUnPackSizePrefixedE5RTBuffer");
    std::string::basic_string[abi:ne180100]<0>(v10, "Unable to verify E5 function info.");
    E5RT::Status::Status(v11, 8, v10);
    E5RT::E5RTError::E5RTError(exception, v12, v11);
  }
  v12[0] = a1;
  v10[0] = 0;
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
LABEL_8:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v7 + 48))(v7, v12, v10);
}

void sub_192143A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if (v23)
    {
LABEL_8:
      __cxa_free_exception(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (v23)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BOOL (*)(flatbuffers::Verifier &),std::allocator<BOOL (*)(flatbuffers::Verifier &)>,BOOL ()(flatbuffers::Verifier &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*),std::allocator<std::unique_ptr<E5RT_FB::OperandDescT> (*)(void const*,std::function<void ()(void **,unsigned long long)> const*)>,std::unique_ptr<E5RT_FB::OperandDescT> ()(void const*,std::function<void ()(void **,unsigned long long)> const*)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t E5RT_FB::OperandDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  uint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  if (v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20)) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    return 0;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    if (v20 < 7 || v7 - 1 < (unint64_t)&v3[v21]) {
      return 0;
    }
  }
  else if (v20 < 7)
  {
    return 0;
  }
  uint64_t v22 = v19[3];
  if (!v22) {
    return 0;
  }
  unint64_t v23 = (unint64_t)&v3[v22];
  BOOL v25 = (v23 & 3) == 0 || v4 == 0;
  if (v8 < v23 || !v25) {
    return 0;
  }
  uint64_t v26 = *(unsigned int *)(v2 + v23);
  if ((int)v26 < 1 || v7 - 1 < v23 + v26) {
    return 0;
  }
  if (!v21) {
    goto LABEL_52;
  }
  int v27 = *((unsigned __int8 *)a1 + v21);
  if (v27 == 2)
  {
    if (E5RT_FB::SurfaceDesc::Verify((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2)) {
      goto LABEL_52;
    }
    return 0;
  }
  if (v27 == 1
    && (E5RT_FB::TensorDesc::Verify((int *)((char *)a1 + v22 + *(unsigned int *)((char *)a1 + v22)), a2) & 1) == 0)
  {
    return 0;
  }
LABEL_52:
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t E5RT_FB::VerifySizePrefixedOperandDescBuffer(unsigned int **a1)
{
  unint64_t v1 = (unint64_t)a1[1];
  if (v1 >= 5
    && ((v2 = (uint64_t)*a1, v1 >= 0xC) ? (BOOL v3 = v1 - 4 == **a1) : (BOOL v3 = 0),
        v3 && (int v6 = *(_DWORD *)(v2 + 4), v4 = v2 + 4, v5 = v6, v6 >= 1) && v1 - 1 >= v5 + 4))
  {
    return E5RT_FB::OperandDesc::Verify((int *)(v4 + v5), (uint64_t)a1);
  }
  else
  {
    return 0;
  }
}

void E5RT_FB::UnPackSizePrefixedOperandDesc()
{
}

void sub_192143DE4(_Unwind_Exception *a1)
{
  E5RT_FB::OperandUnion::Reset(v1);
  MEMORY[0x192FF16B0](v1, 0x1080C403DA8C3A5);
  _Unwind_Resume(a1);
}

uint64_t E5RT_FB::OperandUnion::UnPack(uint64_t a1, int a2)
{
  if (a2 == 2) {
    operator new();
  }
  if (a2 == 1) {
    operator new();
  }
  return 0;
}

void sub_192143EE8(_Unwind_Exception *a1)
{
  BOOL v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  MEMORY[0x192FF16B0](v1, 0x1010C40AD2CAC56);
  _Unwind_Resume(a1);
}

void sub_192143F1C(_Unwind_Exception *a1)
{
  BOOL v3 = (void *)v1[9];
  if (v3)
  {
    v1[10] = (uint64_t)v3;
    operator delete(v3);
  }
  sub_192429EF0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *E5RT_FB::OperandUnion::Reset(unsigned __int8 *this)
{
  uint64_t v1 = (uint64_t)this;
  int v2 = *this;
  if (v2 == 2)
  {
    unint64_t v10 = (void *)*((void *)this + 1);
    if (v10)
    {
      uint64_t v11 = (void *)v10[3];
      if (v11)
      {
        v10[4] = v11;
        operator delete(v11);
      }
      unint64_t v8 = v10;
      uint64_t v9 = 0x1010C40AD2CAC56;
      goto LABEL_17;
    }
  }
  else if (v2 == 1)
  {
    BOOL v3 = (void *)*((void *)this + 1);
    if (v3)
    {
      uint64_t v4 = (void *)v3[9];
      if (v4)
      {
        v3[10] = v4;
        operator delete(v4);
      }
      uint64_t v5 = (void *)v3[4];
      if (v5)
      {
        v3[5] = v5;
        operator delete(v5);
      }
      int v6 = (void *)v3[1];
      if (v6)
      {
        v3[2] = v6;
        operator delete(v6);
      }
      uint64_t v7 = *v3;
      *BOOL v3 = 0;
      if (v7) {
        MEMORY[0x192FF16B0](v7, 0x1000C404A09149ALL);
      }
      unint64_t v8 = v3;
      uint64_t v9 = 0x1030C406E9DCED3;
LABEL_17:
      this = (unsigned __int8 *)MEMORY[0x192FF16B0](v8, v9);
    }
  }
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)uint64_t v1 = 0;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<E5RT::OperandDescriptor const>&>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (unsigned char *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v10 = v9;
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v10);
  unint64_t v12 = v11;
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v13) {
        unint64_t v4 = v11 % v13;
      }
    }
    else
    {
      unint64_t v4 = (v13 - 1) & v11;
    }
    unint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v7[23];
        if (v17 >= 0) {
          uint64_t v18 = v7[23];
        }
        else {
          uint64_t v18 = *((void *)v7 + 1);
        }
        if (v17 < 0) {
          uint64_t v7 = *(unsigned char **)v7;
        }
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v16[1];
            if (v23 == v12)
            {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v16 + 39);
              }
              else {
                uint64_t v25 = v16[3];
              }
              if (v25 == v18)
              {
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v16[2], v7, v16[3])) {
                    return v16;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v16 + 39)) {
                    return v16;
                  }
                  uint64_t v26 = 0;
                  while (*((unsigned __int8 *)v16 + v26 + 16) == v7[v26])
                  {
                    if (v24 == ++v26) {
                      return v16;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v13 - 1)) != v4)
            {
              goto LABEL_51;
            }
            unint64_t v16 = (uint64_t *)*v16;
            if (!v16) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v12)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v7, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v7[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v19 >= v13) {
              v19 %= v13;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_51:
  int v27 = operator new(0x38uLL);
  v45[0] = v27;
  v45[1] = a1 + 16;
  char v46 = 0;
  void *v27 = 0;
  v27[1] = v12;
  uint64_t v28 = (std::string *)(v27 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v27[4] = *(void *)(a3 + 16);
  }
  uint64_t v29 = a4[1];
  v27[5] = *a4;
  v27[6] = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v13 || (float)(v31 * (float)v13) < v30)
  {
    BOOL v34 = 1;
    if (v13 >= 3) {
      BOOL v34 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v13);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v42 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v4 = v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v12);
        long long v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v12;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v12));
      long long v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_59;
      }
    }
LABEL_83:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v43 >= v13) {
          v43 %= v13;
        }
      }
      else
      {
        v43 &= v13 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_94;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  long long v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_83;
  }
LABEL_59:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_94:
  unint64_t v16 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_19214447C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192144490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void E5RT::IOPort::BindMemoryObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  E5RT::IOPortImpl::BindMemoryObject(v2, &v4, 0);
  BOOL v3 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (*((void *)&v4 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_192144540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v3];
  unint64_t v9 = &v7[24 * v6];
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v10 = v8 + 24;
  unint64_t v11 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  uint8x8_t v14 = (char *)*a1;
  unint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    unint64_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

uint64_t E5RT::TensorDescriptor::GetTensorStrides(E5RT::TensorDescriptor *this)
{
  return *((void *)this + 1) + 48;
}

uint64_t E5RT::ExecutionStreamOperation::GetOutputPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPorts(this[1]);
}

uint64_t E5RT::TensorDescriptor::GetTensorDataTypeRef(E5RT::TensorDescriptor *this)
{
  return *((void *)this + 1) + 72;
}

uint64_t E5RT::TensorDataType::Impl::GetComponentSize(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetComponentSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid component size.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_192DB9832[v1];
}

void sub_19214479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::GetComponentSize(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetComponentSize(this[1]);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    long long v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          long long v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    long long v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          long long v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        long long v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t E5RT::ExecutionStreamOperation::GetInputPorts(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetInputPorts(this[1]);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::unordered_set<std::string>>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  long long v13 = (void *)(a1 + 16);
  char v14 = operator new(0x40uLL);
  unint64_t v10 = v14;
  *char v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  uint64_t v15 = *(void *)(a3 + 8);
  unint64_t v16 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v14[3] = v15;
  v14[4] = v16;
  uint64_t v17 = *(void *)(a3 + 24);
  v14[5] = v17;
  uint64_t v18 = *(void *)(a3 + 32);
  v14[6] = v18;
  *((_DWORD *)v14 + 14) = *(_DWORD *)(a3 + 40);
  if (v18)
  {
    unint64_t v19 = *(void *)(v17 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      BOOL v21 = v19 >= v16;
      unint64_t v20 = v19 % v16;
      if (!v21) {
        unint64_t v20 = v19;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v16 - 1);
    }
    *(void *)(v15 + 8 * v20) = v14 + 5;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
  }
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v7 && (float)(v23 * (float)v7) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    char v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (v25)
    {
LABEL_32:
      *unint64_t v10 = *v25;
LABEL_67:
      *char v25 = v10;
      goto LABEL_68;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v7 >= 3) {
      BOOL v26 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v7);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_43;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_43:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v24 = *(void *)a1;
        char v25 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v25) {
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v24 = *(void *)a1;
        char v25 = *(void **)(*(void *)a1 + 8 * v6);
        if (v25) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
      uint64_t v24 = *(void *)a1;
      char v25 = *(void **)(*(void *)a1 + 8 * v3);
      if (v25) {
        goto LABEL_32;
      }
    }
  }
  *unint64_t v10 = *v13;
  *long long v13 = v10;
  *(void *)(v24 + 8 * v3) = v13;
  if (*v10)
  {
    unint64_t v34 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_67;
  }
LABEL_68:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_192144DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unordered_set<std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<E5RT::PrecompiledComputeOpCreateOptions  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVector<unsigned long long>(flatbuffers::FlatBufferBuilder *this, const void *a2, uint64_t a3)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((unsigned char *)this + 78) = 1;
  unint64_t v6 = 8 * a3;
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, 8 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, v6, 8uLL);
  if (a3 && v6)
  {
    unint64_t v7 = *((void *)this + 7);
    unint64_t v8 = *((void *)this + 8);
    BOOL v9 = v7 >= v8;
    unint64_t v10 = v7 - v8;
    if (!v9 || v8 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v10 < v6) {
      flatbuffers::vector_downward::reallocate(this, v6);
    }
    unsigned int v11 = *((_DWORD *)this + 10);
    if (v11 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    uint64_t v12 = (void *)(*((void *)this + 7) - v6);
    *((void *)this + 7) = v12;
    *((_DWORD *)this + 10) = v11 + v6;
    memcpy(v12, a2, v6);
  }

  return flatbuffers::FlatBufferBuilder::EndVector(this, a3);
}

void E5RT_FB::SurfaceDesc::UnPackTo(int *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v5 = *v4;
  if (v5 <= 4)
  {
    *(_DWORD *)a2 = 0;
LABEL_15:
    *(void *)(a2 + 8) = 0;
LABEL_16:
    *(void *)(a2 + 16) = 0;
LABEL_17:
    uint64_t v15 = *(void *)(a2 + 24);
    if (*(void *)(a2 + 32) != v15) {
      *(void *)(a2 + 32) = v15;
    }
    goto LABEL_19;
  }
  uint64_t v6 = v4[2];
  if (v4[2]) {
    LODWORD(v6) = *(int *)((char *)a1 + v6);
  }
  *(_DWORD *)a2 = v6;
  if (v5 < 7) {
    goto LABEL_15;
  }
  uint64_t v7 = v4[3];
  if (v4[3]) {
    uint64_t v7 = *(void *)((char *)a1 + v7);
  }
  *(void *)(a2 + 8) = v7;
  if (v5 < 9) {
    goto LABEL_16;
  }
  uint64_t v8 = v4[4];
  if (v4[4]) {
    uint64_t v8 = *(void *)((char *)a1 + v8);
  }
  *(void *)(a2 + 16) = v8;
  if (v5 < 0xB) {
    goto LABEL_17;
  }
  uint64_t v9 = v4[5];
  if (!v4[5]) {
    goto LABEL_17;
  }
  uint64_t v10 = *(unsigned int *)((char *)a1 + v9);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = (uint64_t *)(a2 + 24);
  unint64_t v13 = *(unsigned int *)((char *)a1 + v9 + v10);
  unint64_t v14 = (*(void *)(a2 + 32) - v11) >> 3;
  if (v13 <= v14)
  {
    if (v13 < v14) {
      *(void *)(a2 + 32) = v11 + 8 * v13;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append(a2 + 24, v13 - v14);
    LODWORD(v13) = *(int *)((char *)a1 + v9 + v10);
  }
  if (v13)
  {
    uint64_t v18 = *v12;
    uint64_t v19 = v13;
    if (v13 < 0xA || (unint64_t)(v18 - ((void)a1 + v9) - v10 - 4) < 0x20)
    {
      uint64_t v20 = 0;
LABEL_29:
      BOOL v21 = (uint64_t *)((char *)&a1[2 * v20 + 1] + v10 + v9);
      float v22 = (void *)(v18 + 8 * v20);
      uint64_t v23 = v19 - v20;
      do
      {
        uint64_t v24 = *v21++;
        *v22++ = v24;
        --v23;
      }
      while (v23);
      goto LABEL_19;
    }
    uint64_t v20 = v13 & 0xFFFFFFFC;
    char v25 = (long long *)((char *)a1 + v10 + v9 + 20);
    BOOL v26 = (_OWORD *)(v18 + 16);
    uint64_t v27 = v19 & 0xFFFFFFFC;
    do
    {
      long long v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *BOOL v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 4;
    }
    while (v27);
    if (v20 != v19) {
      goto LABEL_29;
    }
  }
LABEL_19:
  unint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v16 >= 0xDu && (uint64_t v17 = v16[6]) != 0) {
    *(void *)(a2 + 48) = *(void *)((char *)a1 + v17);
  }
  else {
    *(void *)(a2 + 48) = 1;
  }
}

uint64_t E5RT_FB::SurfaceDesc::Verify(int *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  unint64_t v3 = (char *)a1 - *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  unint64_t v8 = v7 - 4;
  BOOL v9 = v7 >= 5 && v8 >= (unint64_t)v3;
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *a1;
  unsigned int v12 = *(_DWORD *)(a2 + 40) + 1;
  unsigned int v13 = *(_DWORD *)(a2 + 44) + 1;
  *(_DWORD *)(a2 + 40) = v12;
  *(_DWORD *)(a2 + 44) = v13;
  BOOL v14 = v12 > *(_DWORD *)(a2 + 16) || v13 > *(_DWORD *)(a2 + 20);
  if (v14) {
    return 0;
  }
  unint64_t v15 = (unint64_t)&v3[-v11];
  if ((v3 - v11))
  {
    if (v4 || v7 - 2 < v15) {
      return 0;
    }
  }
  else if (v7 - 2 < v15)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v15);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v9 = v7 >= v16;
  unint64_t v17 = v7 - v16;
  if (v17 == 0 || !v9 || v17 < v15) {
    return 0;
  }
  uint64_t v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 >= 5)
  {
    uint64_t v21 = v19[2];
    if (v19[2])
    {
      float v22 = &v3[v21];
      BOOL v23 = ((unint64_t)&v3[v21] & 3) == 0 || v4 == 0;
      BOOL v24 = v23;
      if (v8 < (unint64_t)v22 || !v24) {
        return 0;
      }
    }
    if (v20 >= 7)
    {
      uint64_t v25 = v19[3];
      if (v19[3])
      {
        if (((unint64_t)&v3[v25] & 7) != 0 && v4) {
          return 0;
        }
        if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v25]) {
          return 0;
        }
      }
      if (v20 >= 9)
      {
        uint64_t v26 = v19[4];
        if (v19[4])
        {
          if (((unint64_t)&v3[v26] & 7) != 0 && v4) {
            return 0;
          }
          if (v7 < 9 || v7 - 8 < (unint64_t)&v3[v26]) {
            return 0;
          }
        }
        if (v20 >= 0xB)
        {
          uint64_t v27 = v19[5];
          if (v27)
          {
            unint64_t v28 = (unint64_t)&v3[v27];
            BOOL v30 = (v28 & 3) == 0 || v4 == 0;
            if (v8 < v28 || !v30) {
              return 0;
            }
            uint64_t v31 = *(unsigned int *)(v2 + v28);
            if ((int)v31 < 1 || v7 - 1 < v28 + v31) {
              return 0;
            }
            uint8x8_t v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
            uint64_t v33 = (char *)v32 - v2;
            BOOL v35 = (v33 & 3) == 0 || v4 == 0;
            if (v8 < (unint64_t)v33 || !v35) {
              return 0;
            }
            uint64_t v36 = *v32;
            if (v36 > 0xFFFFFFE) {
              return 0;
            }
            unint64_t v37 = (8 * v36) | 4;
            BOOL v14 = v7 > v37;
            unint64_t v38 = v7 - v37;
            if (!v14 || v38 < (unint64_t)v33) {
              return 0;
            }
          }
        }
      }
    }
  }
  if (!flatbuffers::Table::VerifyField<unsigned long long>(a1, a2, 0xCu, 8)) {
    return 0;
  }
  --*(_DWORD *)(a2 + 40);
  return 1;
}

uint64_t E5RT::TensorDescriptor::TryGetDefaultTensorShape@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 120);
  uint64_t v3 = *(void *)(v2 + 128);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalDisableCompileTimeMPSGraphTypeInference<BOOL>", 57, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_192145470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalMatchE5MinimalCpuPatternsForStates(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_1921455BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetExperimentalDisableDataDependentShape(E5RT::E5CompilerOptions *this, unsigned __int8 a2)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3) {
  v5[1] = a2;
  }
  v5[0] = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, void *))(*(void *)v3 + 24))(v3, "experimentalDisableDataDependentShape<BOOL>", 43, v5);
  if (v5[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v5[0])(0, v5, 0, 0, 0);
  }
  return result;
}

void sub_192145708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    unsigned int v5 = *(const void **)a2;
    int64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
    if (v6) {
      goto LABEL_3;
    }
LABEL_8:
    exception = __cxa_allocate_exception(0x18uLL);
    unsigned int v13 = (char *)operator new(0x20uLL);
    long long v14 = xmmword_192DAB6A0;
    strcpy(v13, "SetComputeDeviceTypesAllowed");
    uint64_t v10 = (char *)operator new(0x30uLL);
    long long v11 = xmmword_192DA90F0;
    strcpy(v10, "Cannot provide zero compute device types.");
    E5RT::Status::Status(v12, 1, &v10);
    E5RT::E5RTError::E5RTError(exception, &v13, v12);
  }
  uint64_t v4 = 0;
  unsigned int v5 = *(const void **)a2;
  int64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v10 = 0;
  long long v11 = 0uLL;
  if (v6 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v7 = (char *)operator new(v6);
  memcpy(v7, v5, v6);
  *(void *)&long long v14 = v7;
  *((void *)&v14 + 1) = &v7[8 * (v6 >> 3)];
  uint64_t v15 = *((void *)&v14 + 1);
  long long v11 = 0uLL;
  uint64_t v10 = 0;
  unsigned int v13 = (char *)std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, char **))(*(void *)v4 + 24))(v4, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62, &v13);
  if (v13) {
    return ((uint64_t (*)(void, char **, void, void, void))v13)(0, &v13, 0, 0, 0);
  }
  return result;
}

void sub_19214598C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_192145A30(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  operator delete(v3);
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerOptions::SetMilEntryPoints(uint64_t a1, uint64_t *a2)
{
  v14[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = v6 - *a2;
    if (v6 != *a2) {
      goto LABEL_3;
    }
LABEL_15:
    exception = __cxa_allocate_exception(0x18uLL);
    HIBYTE(v14[2]) = 17;
    strcpy((char *)v14, "SetMilEntryPoints");
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_192DAB6B0;
    strcpy((char *)__p[0], "Cannot provide empty entry points.");
    E5RT::Status::Status(v13, 1, __p);
    E5RT::E5RTError::E5RTError(exception, v14, v13);
  }
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = v6 - *a2;
  if (v6 == *a2) {
    goto LABEL_15;
  }
LABEL_3:
  memset(__p, 0, sizeof(__p));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, v5, v6, 0xAAAAAAAAAAAAAAABLL * (v7 >> 3));
  *(_OWORD *)&v14[1] = *(_OWORD *)__p;
  v14[3] = __p[2];
  memset(__p, 0, sizeof(__p));
  v14[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  (*(void (**)(void *, const char *, uint64_t, void *))(*(void *)v4 + 24))(v4, "milEntryPoints<std::vector<std::string>>", 40, v14);
  if (v14[0]) {
    ((void (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  unint64_t v8 = (void **)__p[0];
  if (__p[0])
  {
    BOOL v9 = (void **)__p[1];
    uint64_t v10 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = __p[0];
    }
    __p[1] = v8;
    operator delete(v10);
  }
}

void sub_192145CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::E5CompilerOptions::SetPreferredCpuBackends(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
  else
  }
    uint64_t v4 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  memset(v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)v8 + 1, v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3));
  *(void *)&v8[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  uint64_t result = (*(uint64_t (**)(void *, const char *, uint64_t, _OWORD *))(*(void *)v4 + 24))(v4, "preferredCpuBackends<std::vector<std::string>>", 46, v8);
  if (*(void *)&v8[0]) {
    return (*(uint64_t (**)(void, _OWORD *, void, void, void))&v8[0])(0, v8, 0, 0, 0);
  }
  return result;
}

void sub_192145EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void E5RT::E5CompilerImpl::Compile<MIL::IRProgram>(uint64_t a1@<X0>, uint64_t a2@<X1>, E5RT::E5CompilerOptions *a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  E5RT::E5CompilerImpl::SaveMILHashIntoBundleCache(a1, a2, &v10);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v10.__pn_.__r_.__value_.__l.__data_, v10.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v10.__pn_;
  }
  E5RT::E5CompilerImpl::CompileInternal(a1, (std::string::size_type)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_8:
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_8;
  }
LABEL_6:
  std::mutex::unlock(v8);
}

void sub_192145FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
  {
    std::mutex::unlock(v20);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::mutex::unlock(v20);
  _Unwind_Resume(a1);
}

void sub_192146024(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void E5RT::E5Compiler::Compile(uint64_t a1@<X0>, uint64_t a2@<X1>, E5RT::E5CompilerOptions *a3@<X2>, void *a4@<X8>)
{
}

uint64_t E5RT::HandleSTLException(E5RT *this, const std::exception *a2)
{
  char v8 = 4;
  strcpy((char *)__p, "e5rt");
  E5RTLog = E5RT::GetE5RTLog((uint64_t)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(E5RTLog, OS_LOG_TYPE_ERROR)) {
    sub_1924554E4((unint64_t)this, (uint64_t)E5RTLog, (unint64_t *)__p);
  }
  (*(void (**)(E5RT *))(*(void *)this + 16))(this);
  uint64_t v4 = (char *)off_1EC24F268();
  strlcpy(v4, v5, 0x400uLL);
  return 11;
}

void sub_19214610C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *E5RT::OperandDescriptor::TryAsSurfaceDescriptor(void *this)
{
  if (this) {
  return this;
  }
}

uint64_t E5RT::IOBufferObject::GetDataSpan(E5RT::IOBufferObject *this)
{
  if (*((void *)this + 1)) {
    return *((void *)this + 5);
  }
  else {
    return 0;
  }
}

{
  if (*((void *)this + 1)) {
    return *((void *)this + 5);
  }
  else {
    return 0;
  }
}

uint64_t E5RT::BufferObject::GetDataSpan(E5RT::BufferObject *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 32))();
}

{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 24))();
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return v0;
}

atomic_ullong *volatile *OUTLINED_FUNCTION_1_2(atomic_ullong *volatile *result)
{
  return result;
}

void OUTLINED_FUNCTION_2()
{
  JUMPOUT(0x192FF16B0);
}

void E5RT_FB::ProgramT::~ProgramT(E5RT_FB::ProgramT *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6)
        {
          uint64_t v7 = *(void **)v5;
          if (*(void *)v5)
          {
            *(void *)(v5 + 8) = v7;
            operator delete(v7);
          }
          MEMORY[0x192FF16B0](v5, 0x10C402FEFCB83);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  char v8 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8)
  {
    uint64_t v9 = (void *)*v8;
    if (*v8)
    {
      uint64_t v10 = (void *)v8[1];
      long long v11 = (void *)*v8;
      if (v10 != v9)
      {
        do
        {
          uint64_t v13 = *--v10;
          uint64_t v12 = v13;
          *uint64_t v10 = 0;
          if (v13)
          {
            if (*(char *)(v12 + 23) < 0) {
              operator delete(*(void **)v12);
            }
            MEMORY[0x192FF16B0](v12, 0x1012C4004DB1A28);
          }
        }
        while (v10 != v9);
        long long v11 = (void *)*v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x192FF16B0](v8, 0x20C40960023A9);
  }
  long long v14 = (void *)*((void *)this + 1);
  if (v14)
  {
    uint64_t v15 = (void *)*((void *)this + 2);
    uint64_t v16 = (void *)*((void *)this + 1);
    if (v15 != v14)
    {
      do
      {
        uint64_t v18 = *--v15;
        uint64_t v17 = v18;
        *uint64_t v15 = 0;
        if (v18)
        {
          if (*(char *)(v17 + 23) < 0) {
            operator delete(*(void **)v17);
          }
          MEMORY[0x192FF16B0](v17, 0x1012C4016A3B764);
        }
      }
      while (v15 != v14);
      uint64_t v16 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v14;
    operator delete(v16);
  }
  uint64_t v19 = *(void *)this;
  *(void *)this = 0;
  if (v19) {
    MEMORY[0x192FF16B0](v19, 0x1000C40B2B1FC38);
  }
}

void E5RT::TensorDescriptor::CreateTensorDesc(int a1, E5RT::TensorDataType::Impl **this)
{
}

void sub_1921464B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, E5RT::TensorDescriptorImpl *a10)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v10, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1921464E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_1921464FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceDescriptor::TryGetCustomRowStrides(E5RT::SurfaceDescriptor *this)
{
  return *((void *)this + 1) + 40;
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceFormat(E5RT::SurfaceDescriptor *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 32);
}

void *E5RT::E5Program::E5Program(void *this)
{
  *this = &unk_1EE326B78;
  return this;
}

void *E5RT::E5ProgramBuilder::E5ProgramBuilder(void *this)
{
  *this = &unk_1EE3258F0;
  return this;
}

__CFDictionary *E5RT::ProgramLibrary::GetFunctionMetadata(uint64_t a1, uint64_t a2)
{
  return E5RT::ProgramLibraryImpl::GetFunctionMetadata(*(void *)(a1 + 8), a2);
}

uint64_t E5RT::ExecutionStreamOperation::PrepareOpForEncode(E5RT::ExecutionStreamOperation *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 40))();
}

void E5RT::E5CompilerConfigOptions::E5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *this)
{
}

void sub_192146750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v7 = v6;
  MEMORY[0x192FF16B0](v7, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_192146788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)va);
  E5RT::ConfigOptions::~ConfigOptions(v5);
  _Unwind_Resume(a1);
}

void sub_1921467A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerConfigOptions::defaultE5CompilerConfigOptions(E5RT::E5CompilerConfigOptions *a1@<X8>)
{
}

uint64_t flatbuffers::FlatBufferBuilder::Finish(flatbuffers::FlatBufferBuilder *this, int a2, const char *a3, int a4)
{
  if (*((unsigned char *)this + 78)) {
    sub_19244C6B0();
  }
  if (*((_DWORD *)this + 18)) {
    sub_19244C684();
  }
  *((void *)this + 8) = *((void *)this + 6);
  uint64_t v8 = 4;
  if (a4) {
    uint64_t v8 = 8;
  }
  flatbuffers::FlatBufferBuilder::PreAlign((uint64_t)this, v8 + 4 * (a3 != 0), *((void *)this + 10));
  if (a3)
  {
    if (strlen(a3) != 4) {
      sub_19244C78C();
    }
    unint64_t v9 = *((void *)this + 7);
    unint64_t v10 = *((void *)this + 8);
    BOOL v11 = v9 >= v10;
    unint64_t v12 = v9 - v10;
    if (!v11 || v10 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v12 <= 3) {
      flatbuffers::vector_downward::reallocate(this, 4uLL);
    }
    unsigned int v13 = *((_DWORD *)this + 10);
    if (v13 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    long long v14 = (_DWORD *)(*((void *)this + 7) - 4);
    *((void *)this + 7) = v14;
    *((_DWORD *)this + 10) = v13 + 4;
    *long long v14 = *(_DWORD *)a3;
  }
  flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unsigned int v15 = *((_DWORD *)this + 10);
  if (a2 - 1 >= v15) {
    sub_19244C760();
  }
  uint64_t result = flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
  unint64_t v17 = *((void *)this + 7);
  unint64_t v18 = *((void *)this + 8);
  BOOL v11 = v17 >= v18;
  unint64_t v19 = v17 - v18;
  if (!v11 || v18 < *((void *)this + 6)) {
    sub_19244C6DC();
  }
  if (v19 <= 3) {
    uint64_t result = flatbuffers::vector_downward::reallocate(this, 4uLL);
  }
  unsigned int v20 = *((_DWORD *)this + 10);
  if (v20 >= 0x7FFFFFFF) {
    sub_19244C708();
  }
  uint64_t v21 = *((void *)this + 7);
  *((_DWORD *)this + 10) = v20 + 4;
  *(_DWORD *)(v21 - 4) = v15 - a2 + 4;
  *((void *)this + 7) = v21 - 4;
  if (a4)
  {
    int v22 = *((_DWORD *)this + 10);
    uint64_t result = flatbuffers::FlatBufferBuilder::Align((uint64_t)this, 4uLL);
    unint64_t v23 = *((void *)this + 7);
    unint64_t v24 = *((void *)this + 8);
    BOOL v11 = v23 >= v24;
    unint64_t v25 = v23 - v24;
    if (!v11 || v24 < *((void *)this + 6)) {
      sub_19244C6DC();
    }
    if (v25 <= 3) {
      uint64_t result = flatbuffers::vector_downward::reallocate(this, 4uLL);
    }
    unsigned int v26 = *((_DWORD *)this + 10);
    if (v26 >= 0x7FFFFFFF) {
      sub_19244C708();
    }
    uint64_t v27 = *((void *)this + 7);
    *((_DWORD *)this + 10) = v26 + 4;
    *(_DWORD *)(v27 - 4) = v22;
    *((void *)this + 7) = v27 - 4;
  }
  *((unsigned char *)this + 79) = 1;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::string>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::string>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::string>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void Espresso::MILTranslator::LayerTranslator::~LayerTranslator(Espresso::MILTranslator::LayerTranslator *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::~__hash_table((uint64_t)this + 88);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 56, *((char **)this + 8));

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_cpu>>>>::~__hash_table((uint64_t)this);
}

void Espresso::reload_network_on_context(void *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  void (***v19)(uint64_t *__return_ptr, void);
  std::__shared_weak_count *v20;
  void v21[6];
  std::__shared_weak_count *v22;
  long long v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *__p[2];
  char v27;
  char *v28[3];
  long long v29;
  void v30[2];
  long long v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  uint64_t v8 = (char *)operator new(0xA8uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_1EE388FF0;
  *(_OWORD *)(v8 + 24) = 0u;
  unint64_t v9 = (void **)(v8 + 24);
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  unint64_t v10 = (std::__shared_weak_count *)a1[1];
  v30[0] = *a1;
  v30[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "model.espresso.weights");
  Espresso::serialize_network(v30, (uint64_t)__p, v9, 1, &v31);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  BOOL v11 = (std::__shared_weak_count *)*((void *)&v31 + 1);
  uint64_t v29 = v31;
  if (*((void *)&v31 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v32;
  unsigned int v13 = v33;
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v25 = v13;
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v25 = 0;
  }
  unint64_t v24 = v12;
  Espresso::load_network_shape(&v24, (uint64_t)__p);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  long long v14 = operator new(0x30uLL);
  v14[1] = 0;
  v14[2] = 0;
  *long long v14 = &unk_1EE386A18;
  v14[3] = &unk_1EE34F130;
  v14[4] = v9;
  v14[5] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  *(void *)&long long v15 = v14 + 3;
  *((void *)&v15 + 1) = v14;
  unint64_t v23 = v15;
  Espresso::load_and_shape_network((uint64_t)&v29, (const std::string *)(*a1 + 1024), a2, (Espresso::net *)__p, a3, (std::__shared_weak_count **)&v23, (std::string *)(*a1 + 592), (Espresso **)a4);
  uint64_t v16 = *(Espresso **)a4;
  if (*(unsigned char *)(*(void *)a2 + 72))
  {
    long long v17 = v23;
    if (*((void *)&v23 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v16 + 72) = v17;
    unint64_t v18 = (std::__shared_weak_count *)*((void *)v16 + 73);
    *((void *)v16 + 73) = *((void *)&v17 + 1);
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
  }
  unint64_t v19 = *(void (****)(uint64_t *__return_ptr, void))a2;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3321888768;
  v21[2] = ___ZN8Espresso25reload_network_on_contextERKNSt3__110shared_ptrINS_3netEEERKNS1_INS_16abstract_contextEEENS_12compute_pathE_block_invoke;
  v21[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v21[4] = a1;
  v21[5] = v16;
  unsigned int v20 = *(std::__shared_weak_count **)(a4 + 8);
  int v22 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_context::compute_batch_sync(v19, v21);
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (*((void *)&v23 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v23 + 1));
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v28, v28[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, (char *)__p[1]);
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (v33) {
    nitro::nitro_function::nitro_function(v33);
  }
  if (*((void *)&v31 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v31 + 1));
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v8);
}

void sub_192146E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  Espresso::network_shape::~network_shape((char **)&__p);
  if (v28)
  {
    nitro::nitro_function::nitro_function(v28);
    if (!v27)
    {
LABEL_10:
      Espresso::dropout_augment_lowmem::ret_t::~ret_t((Espresso::dropout_augment_lowmem::ret_t *)(v30 - 112));
      nitro::nitro_function::nitro_function(v26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  nitro::nitro_function::nitro_function(v27);
  goto LABEL_10;
}

void reshape_network(Espresso **a1, uint64_t **a2)
{
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v18 = v19;
  uint64_t v3 = *a1;
  uint64_t v4 = (long long *)*((void *)*a1 + 80);
  uint64_t v5 = (long long *)*((void *)*a1 + 81);
  if (v4 != v5)
  {
    do
    {
      v16[0] = v4;
      uint64_t v7 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v4, v16);
      v16[0] = v4;
      uint64_t v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v18, v4, v16);
      long long v9 = *(_OWORD *)(v7 + 56);
      long long v10 = *(_OWORD *)(v7 + 72);
      *((void *)v8 + 11) = *((void *)v7 + 11);
      *(_OWORD *)(v8 + 72) = v10;
      *(_OWORD *)(v8 + 56) = v9;
      if (v8 != v7) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v8 + 96, *((char **)v7 + 12), *((void *)v7 + 13), (uint64_t)(*((void *)v7 + 13) - *((void *)v7 + 12)) >> 2);
      }
      uint64_t v4 = (long long *)((char *)v4 + 24);
    }
    while (v4 != v5);
    uint64_t v3 = *a1;
  }
  BOOL v11 = (std::__shared_weak_count *)a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = (std::__shared_weak_count *)a1[1];
    long long v14 = *a1;
    long long v15 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v14 = v3;
    long long v15 = 0;
  }
  Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v14, (uint64_t)&v18, (uint64_t)v16);
  Espresso::shape_network_recursive(v3, (Espresso::net *)v16, 0, 0, v13);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v17, v17[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v16, (char *)v16[1]);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v18, v19[0]);
}

void sub_19214707C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  Espresso::network_shape::~network_shape(&a12);
  if (a11) {
    nitro::nitro_function::nitro_function(a11);
  }
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void Espresso::load_jsfile(void *a1, uint64_t a2, void *a3, int a4)
{
  v19[19] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    v15[0] = (void *)-1;
    v15[1] = 0;
    uint64_t v16 = -1;
    uint64_t v17 = 0;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v14 = *(std::string *)a2;
    }
    encrypted_file::load_file(v15, (uint64_t)&v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = v16;
    uint64_t v10 = v17;
    BOOL v11 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v12, (uint64_t)v11, a3);
    uint64_t v7 = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 296))(v12, v9, v10);
    uint64_t v8 = v13;
    encrypted_file::~encrypted_file((encrypted_file *)v15);
LABEL_12:
    *a1 = v7;
    a1[1] = v8;
    return;
  }
  std::ifstream::basic_ifstream((uint64_t *)v15);
  uint64_t v6 = v18;
  if (v18)
  {
    Espresso::load_js_fstream(&v12, (uint64_t)v15, a3);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  v15[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)v15 + *((void *)v15[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](&v16);
  std::istream::~istream();
  MEMORY[0x192FF15B0](v19);
  if (v6) {
    goto LABEL_12;
  }
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_1921472EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t Espresso::load_js_fstream(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v5, a3);
  return (*(uint64_t (**)(void))(*(void *)*a1 + 280))();
}

void sub_1921473CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_shape(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = v13;
  v13[0] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v13[1] = 0;
  std::string v14 = v15;
  uint64_t v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v10, (uint64_t)v6, a2);
  uint64_t v7 = v10;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 280))(v10, a1);
  uint64_t v8 = (std::__shared_weak_count *)v11;
  v9[0] = v7;
  v9[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_shape(v9, a3);
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
    nitro::nitro_function::nitro_function(v8);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v14, v15[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v12, v13[0]);
}

void sub_1921474D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
    nitro::nitro_function::nitro_function(v5);
  }
  Espresso::network_shape::~network_shape((char **)va);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::deserialize(uint64_t a1, void *a2)
{
  uint64_t v4 = MEMORY[0x192FF2020]();
  if (*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32)) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid stream passed to deserialize");
  }
  uint64_t v5 = (void *)v4;
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  uint64_t v6 = malloc_type_malloc(v8 + 1, 0xDB872EE4uLL);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error allocating memory for deserialization");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::istream::read();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 7) != 0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Error reading deserialization input");
  }
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 296))(a1, v6);
  free(v6);
}

void sub_1921476C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::serdes_object_json_objc::deserialize(Espresso::SerDes::serdes_object_json_objc *this, const unsigned __int8 *a2, uint64_t a3)
{
  id v4 = (id)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:a2 length:a3 freeWhenDone:0];
  uint64_t v5 = v4;
  if (!v4
    || (unint64_t)[v4 length] < 0x1D
    || (id v6 = v5, v7 = (unsigned char *)[v6 bytes], v8 = v7, *v7 != 112)
    || v7[1] != 98
    || v7[2] != 122)
  {
    id v11 = 0;
    id v12 = v5;
LABEL_11:

    goto LABEL_12;
  }
  LOBYTE(v23[0]) = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  v23[1] = [v6 length];
  long long v24 = 0u;
  long long v25 = 0u;
  HIDWORD(v23[0]) = 723714136;
  kdebug_trace();
  int v9 = (char)v8[3];
  if (v9 > 119)
  {
    if (v9 == 120)
    {
      compression_algorithm v10 = COMPRESSION_LZMA;
    }
    else
    {
      if (v9 != 122) {
        goto LABEL_28;
      }
      compression_algorithm v10 = COMPRESSION_ZLIB;
    }
  }
  else
  {
    if (v9 != 52)
    {
      if (v9 == 101)
      {
        compression_algorithm v10 = COMPRESSION_LZFSE;
        goto LABEL_20;
      }
LABEL_28:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,signed char const&>(v8[3]);
    }
    compression_algorithm v10 = COMPRESSION_LZ4;
  }
LABEL_20:
  unint64_t v22 = bswap64(*(void *)(v8 + 12));
  if (v22 >= 0x80000001) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Block size too big %lld", &v22);
  }
  objc_msgSend(MEMORY[0x1E4F1CA58], "dataWithLength:");
  id v11 = objc_claimAutoreleasedReturnValue();
  uint64_t v18 = (uint8_t *)[v11 mutableBytes];
  size_t v19 = [v11 length];
  id v12 = v6;
  size_t v20 = compression_decode_buffer(v18, v19, (const uint8_t *)([v12 bytes] + 28), objc_msgSend(v12, "length") - 28, 0, v10);
  if (v20 != [v11 length]) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("Mismatching decompression size %zu %zu", v20, [v11 length]);
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v23);

  if (v11)
  {
    id v11 = v11;
    uint64_t v5 = v12;
    id v12 = v11;
    goto LABEL_11;
  }
LABEL_12:
  BOOL v13 = v12;

  id v21 = 0;
  std::string v14 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v12 options:0 error:&v21];
  id v15 = v21;
  if (v15)
  {
    v23[0] = [v15 localizedDescription];
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Error reading the input file as JSON. Error: %s", v23);
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The top level object in the JSON input must be a dictionary");
  }
  uint64_t v16 = [MEMORY[0x1E4F1CA60] dictionaryWithDictionary:v14];
  uint64_t v17 = (void *)*((void *)this + 3);
  *((void *)this + 3) = v16;
}

void sub_1921479FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)va);

  _Unwind_Resume(a1);
}

void Espresso::load_network_shape(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)a2 = a2 + 8;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 40) = 0;
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "layer_shapes");
  Espresso::load_network_shape_with_key(v3, (uint64_t **)a2, (uint64_t)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "global_shapes");
  int v4 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v3 + 24))(v3, v8);
  int v5 = v4;
  if (v9 < 0)
  {
    operator delete(v8[0]);
    if (!v5) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, "global_shapes");
  Espresso::load_network_shape_with_key(v3, (uint64_t **)(a2 + 24), (uint64_t)v6);
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_192147B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  Espresso::network_shape::~network_shape(v27);
  _Unwind_Resume(a1);
}

void Espresso::load_network(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  v97[19] = *MEMORY[0x1E4F143B8];
  char v7 = (void *)MEMORY[0x192FF2020]();
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  v92[0] = *a2;
  v92[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = *(char *)(a1 + 23);
  compression_algorithm v10 = *(const std::string::value_type **)a1;
  std::string::size_type v11 = *(void *)(a1 + 8);
  if (v9 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  if (v9 >= 0) {
    BOOL v13 = (const std::string::value_type *)a1;
  }
  else {
    BOOL v13 = *(const std::string::value_type **)a1;
  }
  std::string v14 = (char *)&v13[v12];
  uint64_t v15 = v12 - 4;
  if (v12 >= 4)
  {
    long long v71 = *(const std::string::value_type **)a1;
    std::string::size_type v72 = *(void *)(a1 + 8);
    uint64_t v18 = v12;
    size_t v19 = (std::string::value_type *)v13;
    do
    {
      size_t v20 = (const std::string::value_type *)memchr(v19, 46, v18 - 3);
      if (!v20) {
        break;
      }
      if (*(_DWORD *)v20 == 1852400174) {
        goto LABEL_16;
      }
      size_t v19 = (std::string::value_type *)(v20 + 1);
      uint64_t v18 = v14 - v19;
    }
    while (v14 - v19 > 3);
    size_t v20 = &v13[v12];
LABEL_16:
    uint64_t v21 = v20 - v13;
    if (v20 == v14) {
      uint64_t v21 = -1;
    }
    BOOL v16 = v21 == v15;
    if (v12 >= 5)
    {
      uint64_t v22 = v12;
      unint64_t v23 = (std::string::value_type *)v13;
      do
      {
        uint64_t v17 = (const std::string::value_type *)memchr(v23, 46, v22 - 4);
        if (!v17) {
          break;
        }
        if (*(_DWORD *)v17 == 1852400174 && v17[4] == 58) {
          goto LABEL_28;
        }
        unint64_t v23 = (std::string::value_type *)(v17 + 1);
        uint64_t v22 = v14 - v23;
      }
      while (v14 - v23 > 4);
      uint64_t v17 = &v13[v12];
    }
    else
    {
      uint64_t v17 = &v13[v12];
    }
LABEL_28:
    compression_algorithm v10 = v71;
    std::string::size_type v11 = v72;
  }
  else
  {
    BOOL v16 = v15 == -1;
    uint64_t v17 = &v13[v12];
  }
  BOOL v26 = v17 != v14 && v17 - v13 != -1;
  if (v12)
  {
    uint64_t v27 = v13;
    uint64_t v28 = &v13[v12];
    do
    {
      if (*v27 == 46)
      {
        uint64_t v29 = 1u;
        while (v29 != 4)
        {
          if (&v27[v29] == v14) {
            goto LABEL_46;
          }
          int v30 = v27[v29];
          int v31 = aMil[v29++];
          if (v30 != v31) {
            goto LABEL_38;
          }
        }
        uint64_t v28 = v27;
      }
LABEL_38:
      ++v27;
    }
    while (v27 != v14);
LABEL_46:
    if (v28 == v14) {
      uint64_t v32 = -1;
    }
    else {
      uint64_t v32 = v28 - v13;
    }
    uint64_t v33 = v13;
    unint64_t v34 = &v13[v12];
    do
    {
      if (*v33 == 46)
      {
        uint64_t v35 = 1u;
        while (v35 != 5)
        {
          if (&v33[v35] == v14) {
            goto LABEL_60;
          }
          int v36 = v33[v35];
          int v37 = aMil_0[v35++];
          if (v36 != v37) {
            goto LABEL_51;
          }
        }
        unint64_t v34 = v33;
      }
LABEL_51:
      ++v33;
    }
    while (v33 != v14);
  }
  else
  {
    uint64_t v32 = -1;
    unint64_t v34 = v13;
  }
LABEL_60:
  BOOL v39 = v34 != v14 && v34 - v13 != -1;
  if (v16 || v26)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __str = *(std::string *)a1;
    }
    if (v26)
    {
      int v41 = *(char *)(a1 + 23);
      BOOL v42 = v41 < 0;
      uint64_t v43 = *(void *)a1;
      if (v41 >= 0) {
        uint64_t v43 = a1;
      }
      std::string::size_type v44 = *(unsigned __int8 *)(a1 + 23);
      if (v42) {
        std::string::size_type v44 = *(void *)(a1 + 8);
      }
      while (v44)
      {
        int v45 = *(unsigned __int8 *)(v43 + v44-- - 1);
        if (v45 == 58)
        {
          std::string::size_type v46 = v44;
          goto LABEL_87;
        }
      }
      std::string::size_type v46 = -1;
LABEL_87:
      std::string::basic_string(&v80, (const std::string *)a1, 0, v46, (std::allocator<char> *)&v91);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v80;
      std::string::basic_string(&v80, (const std::string *)a1, v46 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v91);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v80;
    }
    Espresso::load_network_binserializer((uint64_t)&__str, (const void **)&__p.__r_.__value_.__l.__data_, v92, a3, 2, a5);
  }
  else
  {
    int v40 = v32 == v15 || v39;
    if (v40 != 1)
    {
      if (v9 < 0) {
        std::string::__init_copy_ctor_external(&v91, v10, v11);
      }
      else {
        std::string v91 = *(std::string *)a1;
      }
      std::string::size_type size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      char v55 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
      long long v56 = (std::string *)v91.__r_.__value_.__r.__words[0];
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v91.__r_.__value_.__l.__size_;
      }
      else {
        long long v56 = &v91;
      }
      if (!size) {
        goto LABEL_122;
      }
      uint64_t v57 = (std::string *)((char *)v56 + size);
      uint64_t v58 = v56;
      unsigned int v59 = v57;
      do
      {
        if (v58->__r_.__value_.__s.__data_[0] == 46)
        {
          uint64_t v60 = 1u;
          while (v60 != 13)
          {
            if ((std::string *)((char *)v58 + v60) == v57) {
              goto LABEL_117;
            }
            int v61 = v58->__r_.__value_.__s.__data_[v60];
            int v62 = aEspressoNet[v60++];
            if (v61 != v62) {
              goto LABEL_109;
            }
          }
          unsigned int v59 = v58;
        }
LABEL_109:
        uint64_t v58 = (std::string *)((char *)v58 + 1);
      }
      while (v58 != v57);
LABEL_117:
      if (v59 == v57 || (char *)v59 - (char *)v56 == -1)
      {
LABEL_122:
        *a5 = 0;
        a5[1] = 0;
        if ((v55 & 0x80) == 0) {
          goto LABEL_181;
        }
      }
      else
      {
        std::string::replace(&v91, (char *)v59 - (char *)v56, 0xFFFFFFFFFFFFFFFFLL, ".espresso.shape");
        std::string::basic_string[abi:ne180100]<0>(v89, "json");
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
        v87 = 0;
        uint64_t v88 = 0;
        uint64_t v86 = &v87;
        if (a4)
        {
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
          v80.__r_.__value_.__r.__words[2] = -1;
          unsigned int v81 = 0;
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v84, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
          }
          else {
            std::string v84 = v91;
          }
          encrypted_file::load_file((void **)&v80.__r_.__value_.__l.__data_, (uint64_t)&v84);
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          Espresso::load_network_shape(v80.__r_.__value_.__r.__words[2], (uint64_t)v81, v89, (uint64_t)&__p);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
          std::string __str = __p;
          if (__p.__r_.__value_.__r.__words[2])
          {
            *(void *)(__p.__r_.__value_.__l.__size_ + 16) = &__str.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
            *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v86, v87);
          uint64_t v65 = (char *)v95;
          uint64_t v86 = v94;
          v87 = (char *)v95;
          uint64_t v88 = v96;
          if (v96)
          {
            *(void *)(v95 + 16) = &v87;
            v94 = (char **)&v95;
            uint64_t v95 = 0;
            uint64_t v96 = 0;
            uint64_t v65 = 0;
          }
          else
          {
            uint64_t v86 = &v87;
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v94, v65);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
          encrypted_file::~encrypted_file((encrypted_file *)&v80);
        }
        else
        {
          std::ifstream::basic_ifstream((uint64_t *)&__p);
          if (!*(_DWORD *)((char *)&v95 + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)))
          {
            Espresso::load_network_shape((uint64_t)&__p, v89, (uint64_t)&v80);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
            std::string __str = v80;
            if (v80.__r_.__value_.__r.__words[2])
            {
              *(void *)(v80.__r_.__value_.__l.__size_ + 16) = &__str.__r_.__value_.__l.__size_;
              v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80.__r_.__value_.__l.__size_;
              *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
            }
            else
            {
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v86, v87);
            v66 = (char *)v82;
            uint64_t v86 = v81;
            v87 = (char *)v82;
            uint64_t v88 = v83;
            if (v83)
            {
              *(void *)(v82 + 16) = &v87;
              unsigned int v81 = (char **)&v82;
              uint64_t v82 = 0;
              uint64_t v83 = 0;
              v66 = 0;
            }
            else
            {
              uint64_t v86 = &v87;
            }
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v81, v66);
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v80, (char *)v80.__r_.__value_.__l.__size_);
          }
          __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                    + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
          MEMORY[0x192FF1040](&__p.__r_.__value_.__r.__words[2]);
          std::istream::~istream();
          MEMORY[0x192FF15B0](v97);
        }
        Espresso::load_jsfile(&v78, a1, v89, a4);
        uint64_t v67 = v78;
        if (v78)
        {
          v68 = v7;
          Espresso::find_base_dir((uint64_t)&v80, (const std::string *)a1);
          int v69 = v79;
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          BOOL is_ane_context = Espresso::is_ane_context((uint64_t)v92);
          if (v69) {
            atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          Espresso::load_blob_storage(&v76, v67, (const void **)&v80.__r_.__value_.__l.__data_, 0, (uint64_t)&__p, 0, 0, is_ane_context);
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v69) {
            nitro::nitro_function::nitro_function(v69);
          }
          Espresso::load_and_shape_network(&v78, &v80, v92, &__str, a3, &v76, a1);
          *(unsigned char *)(*a5 + 1282) = a4;
          if (v77) {
            nitro::nitro_function::nitro_function(v77);
          }
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          v68 = v7;
          *a5 = 0;
          a5[1] = 0;
          int v69 = v79;
        }
        if (v69) {
          nitro::nitro_function::nitro_function(v69);
        }
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v86, v87);
        std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
        if (v90 < 0) {
          operator delete(v89[0]);
        }
        char v7 = v68;
        if ((*((unsigned char *)&v91.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_181;
        }
      }
      uint64_t v64 = (void *)v91.__r_.__value_.__r.__words[0];
      goto LABEL_180;
    }
    memset(&__p, 0, sizeof(__p));
    if (v9 < 0) {
      std::string::__init_copy_ctor_external(&__str, v10, v11);
    }
    else {
      std::string __str = *(std::string *)a1;
    }
    if (!v39) {
      goto LABEL_131;
    }
    int v47 = *(char *)(a1 + 23);
    BOOL v48 = v47 < 0;
    uint64_t v49 = *(void *)a1;
    if (v47 >= 0) {
      uint64_t v49 = a1;
    }
    std::string::size_type v50 = *(unsigned __int8 *)(a1 + 23);
    if (v48) {
      std::string::size_type v50 = *(void *)(a1 + 8);
    }
    while (v50)
    {
      int v51 = *(unsigned __int8 *)(v49 + v50-- - 1);
      if (v51 == 58)
      {
        std::string v52 = v8;
        std::string::size_type v53 = v50;
        goto LABEL_125;
      }
    }
    std::string v52 = v8;
    std::string::size_type v53 = -1;
LABEL_125:
    std::string::basic_string(&v80, (const std::string *)a1, 0, v53, (std::allocator<char> *)&v91);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v80;
    std::string::basic_string(&v80, (const std::string *)a1, v53 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v91);
    std::string __p = v80;
    std::string::size_type v63 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v80.__r_.__value_.__l.__size_;
    }
    uint64_t v8 = v52;
    if (v63)
    {
      Espresso::MILTranslator::TranslateProgram((uint64_t *)&v91, (uint64_t)&__str, (uint64_t)&__p);
    }
    else
    {
LABEL_131:
      std::string::basic_string[abi:ne180100]<0>(&v80, "main");
      Espresso::MILTranslator::TranslateProgram((uint64_t *)&v91, (uint64_t)&__str, (uint64_t)&v80);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    std::string::operator=((std::string *)(v91.__r_.__value_.__r.__words[0] + 592), &__str);
    Espresso::reload_network_on_context(&v91, v92, a3);
    *(unsigned char *)(*a5 + 1282) = a4;
    if (v91.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v91.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v64 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_180:
    operator delete(v64);
  }
LABEL_181:
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_19214864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  std::ifstream::~ifstream(&a51);
  Espresso::network_shape::~network_shape((char **)&a29);
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1, *((void *)a2 + 1));
    int v4 = (void *)*((void *)a2 + 12);
    if (v4)
    {
      *((void *)a2 + 13) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
    {
      operator delete(*((void **)a2 + 4));
      int v5 = a2;
    }
    else
    {
      int v5 = a2;
    }
    operator delete(v5);
  }
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  id v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x192FF1030](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  id v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x192FF1030](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_192148A10(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

void Espresso::load_and_shape_network(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, Espresso::net *a4@<X3>, unsigned int a5@<W4>, std::__shared_weak_count **a6@<X5>, std::string *a7@<X6>, Espresso **a8@<X8>)
{
  v51[4] = *(char **)MEMORY[0x1E4F143B8];
  BOOL v16 = *(void **)a1;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "json");
  Espresso::gen_precompilation_info_fstream(&v46, (uint64_t *)a7);
  unint64_t v38 = 0;
  BOOL v39 = 0;
  std::string::basic_string[abi:ne180100]<0>(buf, "shape");
  int v17 = (*(uint64_t (**)(void *, unsigned char *))(*(void *)v16 + 24))(v16, buf);
  int v18 = v17;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(*(void **)buf);
    if (v18) {
      goto LABEL_5;
    }
  }
  else if (v17)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&__p, "shape");
    (*(void (**)(uint64_t *__return_ptr, void *, void **))(*(void *)v16 + 120))(&v44, v16, &__p);
    Espresso::load_network_shape(&v44, (uint64_t)buf);
    if (v45) {
      nitro::nitro_function::nitro_function(v45);
    }
    if (v43 < 0) {
      operator delete(__p);
    }
    v40[0] = (uint64_t)v16;
    v40[1] = (uint64_t)v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::load_network_layers_internal(v40, a7, a2, a3, (uint64_t)buf, v46, a5, 0, (uint64_t *)&__p, a6);
    size_t v19 = (char *)__p;
    unint64_t v38 = (char *)__p;
    BOOL v39 = v42;
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v51, v51[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    goto LABEL_19;
  }
  std::string __p = v16;
  BOOL v42 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::load_network_layers_internal((uint64_t *)&__p, a7, a2, a3, (uint64_t)a4, v46, a5, 0, (uint64_t *)buf, a6);
  size_t v19 = *(char **)buf;
  unint64_t v38 = *(char **)buf;
  BOOL v39 = *(std::__shared_weak_count **)&buf[8];
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
LABEL_19:
  if (v19) {
    std::string::operator=((std::string *)(v19 + 592), a7);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  size_t v20 = (Espresso *)v38;
  if (v38)
  {
    std::string::operator=((std::string *)(v38 + 592), a7);
    uint64_t v21 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive(v20, a4, 0, 0);
    if (v21)
    {
      nitro::nitro_function::nitro_function(v21);
      unint64_t v34 = v20;
      uint64_t v35 = v21;
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      unint64_t v34 = v20;
      uint64_t v35 = 0;
    }
    uint64_t v22 = *(void **)a1;
    unint64_t v23 = *(std::__shared_weak_count **)(a1 + 8);
    v33[0] = v22;
    v33[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::load_subnetworks((uint64_t **)&v34, v33, a5, a6);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v21)
    {
      nitro::nitro_function::nitro_function(v21);
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v32[0] = (uint64_t)v20;
    v32[1] = (uint64_t)v21;
    Espresso::setup_layer_callbacks(v32);
    if (v21) {
      nitro::nitro_function::nitro_function(v21);
    }
    Espresso::setup_layers_post_load((uint64_t)&v38);
    BOOL v26 = Espresso::espresso_os_log_subsystem(v24, v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      int v27 = SHIBYTE(a7->__r_.__value_.__r.__words[2]);
      uint64_t v28 = (uint64_t *)a7->__r_.__value_.__r.__words[0];
      int v29 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
      *(_DWORD *)buf = 136315650;
      if (v27 >= 0) {
        int v30 = a7;
      }
      else {
        int v30 = (std::string *)v28;
      }
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v29;
      __int16 v49 = 1024;
      unsigned int v50 = a5;
      _os_log_impl(&dword_1920CB000, v26, OS_LOG_TYPE_INFO, "Loaded network: '%s' pf=%d cp=%d", buf, 0x18u);
    }

    *a8 = v20;
    a8[1] = (Espresso *)v21;
  }
  else
  {
    *a8 = 0;
    a8[1] = 0;
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
  }
}

void sub_192148E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (v36) {
    nitro::nitro_function::nitro_function(v36);
  }
  _Unwind_Resume(a1);
}

void Espresso::load_network_layers_internal(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, unsigned int a7@<W6>, char a8@<W7>, uint64_t *a9@<X8>, std::__shared_weak_count **a10)
{
  int v18 = (void *)MEMORY[0x192FF2020]();
  long long v56 = a1;
  uint64_t v19 = *a1;
  Espresso::load_network_metadata(v19, a2, a3, (Espresso::abstract_context **)a4, a10, a9);
  v71[0] = a7;
  std::string::basic_string[abi:ne180100]<0>(__p, "layers");
  (*(void (**)(Espresso ***__return_ptr, uint64_t, void **))(*(void *)v19 + 128))(&v69, v19, __p);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  size_t v20 = *(std::__shared_weak_count **)(a4 + 8);
  __p[0] = *(void **)a4;
  __p[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (void *)*a9;
  uint64_t v21 = (std::__shared_weak_count *)a9[1];
  uint64_t v65 = *a9;
  v66 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::run_dispatch_v2((uint64_t)&v58, (uint64_t *)__p, &v65, &v69, a5, v71, a6);
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (!v64) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to load network, invalid combination of --e5-compute-units or dispatch fallback hints specified in conjunction with network topology.");
  }
  if (*(unsigned char *)(*(void *)a4 + 56)
    && (uint64_t)(*(void *)(v22[89] + 56) - *(void *)(v22[89] + 48)) >> 2 == (v70 - (uint64_t)v69) >> 4)
  {
    unint64_t v23 = v60;
    uint64_t v24 = *(void *)(v58 + 72);
    uint64_t v25 = *(void *)(v58 + 80);
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    v22[157] = v24;
    BOOL v26 = (std::__shared_weak_count *)v22[158];
    v22[158] = v25;
    if (v26)
    {
      nitro::nitro_function::nitro_function(v26);
      uint64_t v24 = v22[157];
    }
    if (v24)
    {
      uint64_t v27 = v22[2];
      *(unsigned char *)(v24 + 54) = *(unsigned char *)(v27 + 54);
      *(unsigned char *)(v24 + 123) = *(unsigned char *)(v27 + 123);
    }
    uint64_t v28 = *v23;
    if (v23[1] != *v23)
    {
      for (unint64_t i = 0; i < 0x6DB6DB6DB6DB6DB7 * ((v23[1] - *v23) >> 5); ++i)
      {
        unint64_t v30 = v28 + 224 * i;
        int v31 = (void *)(v30 + 48);
        int v32 = *(char *)(v30 + 71);
        if (v32 < 0)
        {
          if (v31[1] == 13)
          {
            int v31 = (void *)*v31;
LABEL_27:
            uint64_t v33 = (void *)*v31;
            uint64_t v34 = *(void *)((char *)v31 + 5);
            if (v33 == (void *)0x6E6F635F64616F6CLL && v34 == 0x746E6174736E6F63)
            {
              unint64_t v36 = v28 + 224 * i;
              char v37 = *(void **)(v36 + 112);
              if (v37 != *(void **)(v36 + 120))
              {
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>((void *)v23[7], v37))
                {
                  uint64_t v38 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)(v23 + 6), v72, v37);
                  if (!v38) {
                    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                  }
                  uint64_t v40 = *(void *)(v38 + 56);
                  uint64_t v39 = *(void *)(v38 + 64);
                  if (v40 != v39)
                  {
                    uint64_t v41 = v40 + 8;
                    do
                    {
                      if (*(_DWORD *)(*(void *)(v22[89] + 48) + 4 * *(void *)(v41 - 8))) {
                        BOOL v42 = 1;
                      }
                      else {
                        BOOL v42 = v41 == v39;
                      }
                      v41 += 8;
                    }
                    while (!v42);
                  }
                  if (i) {
                    BOOL v43 = *(_DWORD *)(*(void *)(v22[89] + 48) + 4 * i - 4) != 0;
                  }
                  else {
                    BOOL v43 = 1;
                  }
                  BOOL v44 = i == ((v70 - (uint64_t)v69) >> 4) - 1
                     || *(_DWORD *)(*(void *)(v22[89] + 48) + 4 * i + 4) != 0;
                  if (v43 && v44) {
                    *(_DWORD *)(*(void *)(v22[89] + 48) + 4 * i) = 1;
                  }
                }
              }
            }
          }
        }
        else if (v32 == 13)
        {
          goto LABEL_27;
        }
        uint64_t v28 = *v23;
      }
    }
  }
  if (*(unsigned char *)(*(void *)a4 + 56))
  {
    uint64_t v45 = v22[89];
    uint64_t v46 = *(void *)(v45 + 48);
    unint64_t v47 = (*(void *)(v45 + 56) - v46) >> 2;
    if (v47 == (v70 - (uint64_t)v69) >> 4
      && (unint64_t)(v70 - (void)v69) >= 0x11
      && 0x6DB6DB6DB6DB6DB7 * ((v60[1] - *v60) >> 5) == v47)
    {
      if (v47 <= 2) {
        unint64_t v47 = 2;
      }
      unint64_t v48 = v47 - 1;
      uint64_t v49 = *v60 + 272;
      unsigned int v50 = (_DWORD *)(v46 + 4);
      do
      {
        int v51 = *(char *)(v49 + 23);
        if (v51 < 0)
        {
          if (*(void *)(v49 + 8) == 6)
          {
            uint64_t v52 = *(void *)v49;
LABEL_63:
            int v53 = *(_DWORD *)v52;
            int v54 = *(unsigned __int16 *)(v52 + 4);
            if (v53 == 1700750947 && v54 == 25710) {
              *unsigned int v50 = *(v50 - 1);
            }
          }
        }
        else
        {
          uint64_t v52 = v49;
          if (v51 == 6) {
            goto LABEL_63;
          }
        }
        v49 += 224;
        ++v50;
        --v48;
      }
      while (v48);
    }
  }
  v72[0] = (void **)&v69;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](v72);
  Espresso::load_network_layers_post_dispatch(a9, v56, &v58, &v60, v63, a5, a7, a8, (std::string::size_type *)a10);
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
}

void sub_19214946C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  Espresso::quantized_weights_helper::linear_quantization_data::~linear_quantization_data((Espresso::quantized_weights_helper::linear_quantization_data *)&a18);
  *(void *)(v32 - 104) = v32 - 136;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 104));
  uint64_t v34 = *(std::__shared_weak_count **)(a17 + 8);
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  _Unwind_Resume(a1);
}

void Espresso::setup_layers_post_load(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)a1 + 32);
  for (unint64_t i = *(uint64_t **)(*(void *)a1 + 40); v1 != i; v1 += 2)
  {
    uint64_t v4 = *v1;
    uint64_t v5 = *(const void **)(*v1 + 64);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v4 + 72);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::operator=((std::string *)(v6 + 424), (const std::string *)(*(void *)a1 + 592));
        if (v7) {
          nitro::nitro_function::nitro_function(v7);
        }
      }
    }
  }
}

void sub_1921495D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::setup_layer_callbacks(uint64_t *a1)
{
  v48[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "metal_flushes");
  uint64_t v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v2 + 472, __p);
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if ((void *)(*a1 + 480) != v3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p, (uint64_t)(v3 + 7), 24);
    memset(&v39, 0, sizeof(v39));
    char v37 = 0;
    uint64_t v38 = 0;
    for (unint64_t i = &v37;
          ;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&i, &v39, (uint64_t)&v39))
    {
      uint64_t v4 = (uint64_t)std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v39, 0x2Cu);
      if ((*(unsigned char *)(v4 + *(void *)(*(void *)v4 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v39;
      }
      else {
        uint64_t v7 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v39.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v8 = v7;
        while (1)
        {
          int v9 = v8->__r_.__value_.__s.__data_[0];
          BOOL v10 = v9 == 32 || v9 == 9;
          if (!v10) {
            break;
          }
          uint64_t v8 = (std::string *)((char *)v8 + 1);
          if (!--size) {
            goto LABEL_19;
          }
        }
        std::string::size_type v11 = (char *)v8 - (char *)v7;
      }
      else
      {
LABEL_19:
        std::string::size_type v11 = -1;
      }
      std::string::erase(&v39, 0, v11);
      std::string::size_type v12 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v13 = &v39;
      }
      else {
        BOOL v13 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v12 = v39.__r_.__value_.__l.__size_;
      }
      if (v12)
      {
        while (1)
        {
          int v14 = *((unsigned __int8 *)&v13[-1].__r_.__value_.__r.__words[2] + v12 + 7);
          if (v14 != 32 && v14 != 9) {
            break;
          }
          if (!--v12) {
            goto LABEL_32;
          }
        }
        uint64_t v16 = v12 - 1;
      }
      else
      {
LABEL_32:
        uint64_t v16 = -1;
      }
      std::string::erase(&v39, v16 + 1, 0xFFFFFFFFFFFFFFFFLL);
    }
    int v17 = *(uint64_t **)(*a1 + 32);
    int v18 = *(uint64_t **)(*a1 + 40);
    uint64_t v19 = v38;
    if (v17 == v18 || v38 == 0) {
      goto LABEL_39;
    }
    while (1)
    {
      unint64_t v30 = v37;
      if (!v37) {
        goto LABEL_74;
      }
      int v31 = (void *)(*v17 + 16);
      while (1)
      {
        uint64_t v4 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v31, (void *)v30 + 4);
        if ((v4 & 1) == 0) {
          break;
        }
LABEL_65:
        unint64_t v30 = *(char **)v30;
        if (!v30) {
          goto LABEL_74;
        }
      }
      uint64_t v4 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v30 + 4, v31);
      if (v4) {
        break;
      }
      uint64_t v32 = Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = (void *)(*v17 + 16);
        if (*(char *)(*v17 + 39) < 0) {
          uint64_t v35 = (void *)*v35;
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v35;
        _os_log_debug_impl(&dword_1920CB000, v32, OS_LOG_TYPE_DEBUG, "Will flush after layer %s", (uint8_t *)&buf, 0xCu);
      }

      uint64_t v33 = *v17;
      uint64_t v34 = (long long *)(*v17 + 160);
      *(void *)&long long buf = &off_1EE379620;
      *((void *)&buf + 1) = Espresso::submit_and_create_new_command_buffer;
      p_long long buf = &buf;
      if (v34 != &buf)
      {
        if (*(long long **)(v33 + 184) == v34)
        {
          std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone((uint64_t)&buf, v48);
          (*(void (**)(long long *))(*(void *)p_buf + 32))(p_buf);
          p_long long buf = 0;
          (*(void (**)(void, long long *))(**(void **)(v33 + 184) + 24))(*(void *)(v33 + 184), &buf);
          (*(void (**)(void))(**(void **)(v33 + 184) + 32))(*(void *)(v33 + 184));
          *(void *)(v33 + 184) = 0;
          p_long long buf = &buf;
          (*(void (**)(void *, long long *))(v48[0] + 24))(v48, v34);
          (*(void (**)(void *))(v48[0] + 32))(v48);
        }
        else
        {
          std::__function::__func<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&),std::allocator<void (*)(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>,void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::__clone((uint64_t)&buf, v34);
          (*(void (**)(long long *))(*(void *)p_buf + 32))(p_buf);
          p_long long buf = *(long long **)(v33 + 184);
        }
        *(void *)(v33 + 184) = v34;
      }
      std::__function::__value_func<void ()(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer const&)>::~__value_func[abi:ne180100](&buf);
      uint64_t v4 = std::__tree<std::string>::__erase_unique<std::string>(&i, (void *)(*v17 + 16));
      uint64_t v19 = v38;
LABEL_74:
      v17 += 2;
      if (v17 == v18 || !v19)
      {
LABEL_39:
        if (v19)
        {
          uint64_t v21 = Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(buf) = 0;
            _os_log_debug_impl(&dword_1920CB000, v21, OS_LOG_TYPE_DEBUG, "Could not find these layers to flush:", (uint8_t *)&buf, 2u);
          }

          uint64_t v24 = (uint64_t *)i;
          if (i != &v37)
          {
            do
            {
              uint64_t v25 = Espresso::espresso_os_log_subsystem(v22, v23);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v28 = v24 + 4;
                if (*((char *)v24 + 55) < 0) {
                  uint64_t v28 = (void *)*v28;
                }
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v28;
                _os_log_debug_impl(&dword_1920CB000, v25, OS_LOG_TYPE_DEBUG, "  %s", (uint8_t *)&buf, 0xCu);
              }

              BOOL v26 = (char *)v24[1];
              if (v26)
              {
                do
                {
                  uint64_t v27 = (char **)v26;
                  BOOL v26 = *(char **)v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  uint64_t v27 = (char **)v24[2];
                  BOOL v10 = *v27 == (char *)v24;
                  uint64_t v24 = (uint64_t *)v27;
                }
                while (!v10);
              }
              uint64_t v24 = (uint64_t *)v27;
            }
            while (v27 != &v37);
          }
        }
        std::__tree<std::string>::destroy((uint64_t)&i, v37);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        __p[0] = *(void **)MEMORY[0x1E4FBA408];
        uint64_t v29 = *(void *)(MEMORY[0x1E4FBA408] + 72);
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
        uint64_t v41 = v29;
        uint64_t v42 = MEMORY[0x1E4FBA470] + 16;
        if (v44 < 0) {
          operator delete(v43);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x192FF15B0](&v45);
        return;
      }
    }
    v30 += 8;
    goto LABEL_65;
  }
}

void sub_192149C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_subnetworks(uint64_t **a1, void *a2, unsigned int a3, std::__shared_weak_count **a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "script");
  int v8 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 24))(v7, &__p);
  int v9 = v8;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__p);
    if (!v9) {
      goto LABEL_51;
    }
  }
  else if (!v8)
  {
    goto LABEL_51;
  }
  uint64_t v10 = *v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "script");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v10 + 120))(&v65, v10, &__p);
  if (SHIBYTE(v55) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = v65;
  std::string::basic_string[abi:ne180100]<0>(&__p, "external_networks");
  int v12 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v11 + 24))(v11, &__p);
  int v13 = v12;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__p);
    if (!v13) {
      goto LABEL_49;
    }
LABEL_11:
    uint64_t v14 = v65;
    std::string::basic_string[abi:ne180100]<0>(&__p, "external_networks");
    (*(void (**)(long long **__return_ptr, uint64_t, void **))(*(void *)v14 + 120))(&v63, v14, &__p);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    unint64_t v48 = v5;
    std::string __p = 0;
    int v54 = 0;
    uint64_t v55 = 0;
    (*(void (**)(long long *, void **))(*(void *)v63 + 32))(v63, &__p);
    uint64_t v15 = (char *)__p;
    uint64_t v16 = v54;
    if (__p != v54)
    {
      do
      {
        int v17 = *a1;
        if (*((char *)*a1 + 1047) >= 0) {
          size_t v18 = *((unsigned __int8 *)*a1 + 1047);
        }
        else {
          size_t v18 = (*a1)[129];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v60, v18 + 1);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v19 = &v60;
        }
        else {
          uint64_t v19 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        if (v18)
        {
          if (*((char *)v17 + 1047) >= 0) {
            size_t v20 = v17 + 128;
          }
          else {
            size_t v20 = (const void *)v17[128];
          }
          memmove(v19, v20, v18);
        }
        *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 47;
        (*(void (**)(void **__return_ptr))(*(void *)v63 + 112))(&v57);
        if ((v59 & 0x80u) == 0) {
          uint64_t v21 = (const std::string::value_type *)&v57;
        }
        else {
          uint64_t v21 = (const std::string::value_type *)v57;
        }
        if ((v59 & 0x80u) == 0) {
          std::string::size_type v22 = v59;
        }
        else {
          std::string::size_type v22 = (std::string::size_type)v58;
        }
        unint64_t v23 = std::string::append(&v60, v21, v22);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v62 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)int v61 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if ((char)v59 < 0) {
          operator delete(v57);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        Espresso::load_network((uint64_t)v61, *a1 + 2, a3, 0, (uint64_t *)&v60);
        uint64_t v25 = (uint64_t)(*a1 + 123);
        uint64_t v57 = v15;
        BOOL v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, (uint64_t)v15, (uint64_t)&std::piecewise_construct, (long long **)&v57);
        uint64_t v27 = (std::__shared_weak_count *)v26[6];
        *(_OWORD *)(v26 + 5) = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
        if (v27) {
          nitro::nitro_function::nitro_function(v27);
        }
        std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v60, **a1, (std::__shared_weak_count *)(*a1)[1]);
        uint64_t v28 = (uint64_t)(*a1 + 123);
        uint64_t v57 = v15;
        uint64_t v29 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, (uint64_t)v15, (uint64_t)&std::piecewise_construct, (long long **)&v57)[5];
        std::string::size_type size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
        std::string::size_type v31 = v60.__r_.__value_.__r.__words[0];
        if (v60.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v60.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
        }
        *(void *)(v29 + 1088) = v31;
        uint64_t v32 = *(std::__shared_weak_count **)(v29 + 1096);
        *(void *)(v29 + 1096) = size;
        if (v32)
        {
          std::__shared_weak_count::__release_weak(v32);
          std::string::size_type size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
        }
        if (size) {
          nitro::nitro_function::nitro_function(size);
        }
        if (SHIBYTE(v62) < 0) {
          operator delete(v61[0]);
        }
        v15 += 24;
      }
      while (v15 != v16);
    }
    v61[0] = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    if (v64) {
      nitro::nitro_function::nitro_function(v64);
    }
    uint64_t v5 = v48;
    goto LABEL_49;
  }
  if (v12) {
    goto LABEL_11;
  }
LABEL_49:
  if (v66) {
    nitro::nitro_function::nitro_function(v66);
  }
LABEL_51:
  uint64_t v33 = *v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "subnetworks");
  int v34 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v33 + 24))(v33, &__p);
  int v35 = v34;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__p);
    if (!v35) {
      return;
    }
  }
  else if (!v34)
  {
    return;
  }
  uint64_t v36 = *v5;
  std::string::basic_string[abi:ne180100]<0>(&__p, "subnetworks");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v36 + 120))(&v57, v36, &__p);
  if (SHIBYTE(v55) < 0) {
    operator delete(__p);
  }
  v61[0] = 0;
  v61[1] = 0;
  std::string::size_type v62 = 0;
  (*(void (**)(void *, void **))(*(void *)v57 + 32))(v57, v61);
  char v37 = (long long *)v61[0];
  for (i = (long long *)v61[1]; v37 != i; char v37 = (long long *)((char *)v37 + 24))
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v57 + 120))(&v65);
    uint64_t v39 = v65;
    std::string::basic_string[abi:ne180100]<0>(&v60, "shape");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *))(*(void *)v39 + 120))(&v51, v39, &v60);
    Espresso::load_network_shape(&v51, (uint64_t)&__p);
    if (v52) {
      nitro::nitro_function::nitro_function(v52);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    uint64_t v40 = v66;
    v50[0] = v65;
    v50[1] = (uint64_t)v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::load_network_layers_internal(v50, (const std::string *)(*a1 + 74), (const std::string *)(*a1 + 128), (uint64_t)(*a1 + 2), (uint64_t)&__p, 0, a3, 0, (uint64_t *)&v60, a4);
    if (v40) {
      nitro::nitro_function::nitro_function(v40);
    }
    uint64_t v41 = (uint64_t)(*a1 + 123);
    unsigned __int8 v63 = v37;
    uint64_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, (uint64_t)v37, (uint64_t)&std::piecewise_construct, &v63);
    long long v43 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
    if (v60.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v60.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    char v44 = (std::__shared_weak_count *)v42[6];
    *(_OWORD *)(v42 + 5) = v43;
    if (v44) {
      nitro::nitro_function::nitro_function(v44);
    }
    uint64_t v46 = *a1;
    uint64_t v45 = a1[1];
    if (v45) {
      atomic_fetch_add_explicit(v45 + 2, 1uLL, memory_order_relaxed);
    }
    *(void *)(v43 + 1088) = v46;
    unint64_t v47 = *(std::__shared_weak_count **)(v43 + 1096);
    *(void *)(v43 + 1096) = v45;
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    if (*((void *)&v43 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive((Espresso *)v43, (Espresso::net *)&__p, 0, 0);
    if (*((void *)&v43 + 1))
    {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v43 + 1));
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v56, v56[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v54);
    if (v66) {
      nitro::nitro_function::nitro_function(v66);
    }
  }
  std::string __p = v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
}

void sub_19214A3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void **p_p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 120);
  if (v45) {
    nitro::nitro_function::nitro_function(v45);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v43 - 104);
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::is_ane_context(uint64_t a1)
{
  return (***(unsigned int (****)(void))(*(void *)a1 + 8))(*(void *)(*(void *)a1 + 8)) == 10006
      || (***(unsigned int (****)(void))(*(void *)a1 + 8))(*(void *)(*(void *)a1 + 8)) == 10007;
}

double Espresso::find_base_dir(uint64_t a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>((void *)a1, "");
  std::string::size_type v4 = std::string::rfind(a2, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1)
  {
    std::string::basic_string(&v6, a2, 0, v4, (std::allocator<char> *)&v7);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    double result = *(double *)&v6.__r_.__value_.__l.__data_;
    *(std::string *)a1 = v6;
  }
  return result;
}

void sub_19214A650(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::serialize_network(void *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, char a4@<W3>, _OWORD *a5@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v29, "json");
  *a5 = 0u;
  a5[1] = 0u;
  if (*(void *)(*a1 + 1008) || *(void *)(*a1 + 968))
  {
    uint64_t v10 = (std::__shared_weak_count *)a1[1];
    std::string::size_type v22 = (Espresso::net *)*a1;
    unint64_t v23 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::dump_network_layers(__p, &v22, 300, a3, a2, a4);
    std::pair<std::shared_ptr<Espresso::SerDes::generic_serdes_object>,std::shared_ptr<Espresso::SerDes::generic_serdes_object>>::operator=[abi:ne180100]((uint64_t)a5, (long long *)__p);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    uint64_t v11 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
    Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v20, (uint64_t)v11, v29);
    for (unint64_t i = *(void **)(*a1 + 1000); i; unint64_t i = (void *)*i)
    {
      int v13 = (std::__shared_weak_count *)i[6];
      int v17 = (Espresso::net *)i[5];
      size_t v18 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::dump_network_layers(__p, &v17, 300, a3, a2, a4);
      long long v19 = *(_OWORD *)__p;
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      if (v18) {
        nitro::nitro_function::nitro_function(v18);
      }
      (*(void (**)(uint64_t, void *, long long *))(*(void *)v20 + 240))(v20, i + 2, &v19);
      if (*((void *)&v19 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v19 + 1));
      }
    }
    uint64_t v14 = *(void *)a5;
    std::string::basic_string[abi:ne180100]<0>(__p, "subnetworks");
    (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)v14 + 240))(v14, __p, &v20);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = v21;
    if (v21) {
LABEL_24:
    }
      nitro::nitro_function::nitro_function(v15);
  }
  else
  {
    uint64_t v16 = (std::__shared_weak_count *)a1[1];
    long long v24 = (Espresso::net *)*a1;
    uint64_t v25 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::dump_network_layers(__p, &v24, 200, a3, a2, a4);
    std::pair<std::shared_ptr<Espresso::SerDes::generic_serdes_object>,std::shared_ptr<Espresso::SerDes::generic_serdes_object>>::operator=[abi:ne180100]((uint64_t)a5, (long long *)__p);
    if (v28) {
      nitro::nitro_function::nitro_function(v28);
    }
    if (__p[1]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v15 = v25;
    if (v25) {
      goto LABEL_24;
    }
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
}

void sub_19214A8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  Espresso::dropout_augment_lowmem::ret_t::~ret_t(v24);
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<Espresso::SerDes::generic_serdes_object>,std::shared_ptr<Espresso::SerDes::generic_serdes_object>>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  char v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t e5rt_get_last_error_message()
{
  return _ZTWN4E5RT19thread_error_bufferE();
}

uint64_t _ZTWN4E5RT19thread_error_bufferE()
{
  return off_1EC24F268();
}

uint64_t __copy_helper_block_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void Espresso::SerDes::layer_io<Espresso::generic_concat_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v14 = a4;
  char v13 = 0;
  __int16 v12 = 0;
  v11[0] = 0;
  unsigned char v11[8] = 0;
  Espresso::SerDes::params_io<Espresso::concat_params>(a2, (uint64_t)v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "concat");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19214AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::concat_params>(uint64_t a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "force_num_channels_of_first_blob");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_WORD *)(a2 + 40));
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (_DWORD *)a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, (unsigned char *)(a2 + 60));
    goto LABEL_31;
  }
  if (*(_WORD *)(a2 + 40))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "force_num_channels_of_first_blob");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 184))(v9, __p, a2 + 40);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (*(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 160))(v9, __p, a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 60);
  uint64_t v5 = a2 + 60;
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 208))(v9, __p, v5);
LABEL_31:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_19214AE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::generic_slice_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  long long v11 = xmmword_192DCA6B0;
  uint64_t v12 = 0x100000000;
  Espresso::SerDes::params_io<Espresso::slice_params_t>(a2, &v11, 0);
  Espresso::abstract_engine_factory::shared(&v9);
  uint64_t v5 = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "slice");
  int v6 = (***(uint64_t (****)(void))(*(void *)a3 + 8))(*(void *)(*(void *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)&v11, &v6);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_19214AF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::slice_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "start");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 1);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "end");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 2);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "stride");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 3);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v7, "static_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v9, a2 + 5);
    goto LABEL_67;
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "start");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 1);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, "end");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (a2[3] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "stride");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 3);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  if (a2[4])
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, a2 + 4);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  int v6 = a2[5];
  uint64_t v5 = a2 + 5;
  if (v6 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "static_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v7, &v9);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(void *)v9 + 160))(v9, __p, v5);
LABEL_67:
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_19214B4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::upsample_kernel::anec_validate_upsample_step(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int a5, float a6, float a7)
{
  id v13 = a3;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v55, (NSString *)(a2 + 352), v13);
  ANECResizeLayerDescInitialize();
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  ANECTensorDescInitialize();
  if (a5 >= 8 || ((0x97u >> a5) & 1) == 0)
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "upsample: unexpected compute path.");
    goto LABEL_4;
  }
  int v14 = off_1E5746F00[a5];
  uint64_t v15 = *(void *)(a4 + 12);
  *(void *)&long long v16 = (int)v15;
  *((void *)&v16 + 1) = SHIDWORD(v15);
  long long v41 = v16;
  uint64_t v17 = *(int *)(a4 + 8);
  uint64_t v39 = v14;
  uint64_t v42 = v17;
  *(void *)&long long v16 = (int)*(void *)a4;
  *((void *)&v16 + 1) = (int)HIDWORD(*(void *)a4);
  long long v40 = v16;
  float v45 = a6;
  float v46 = a7;
  size_t v18 = @"Linear";
  int v19 = *(_DWORD *)(a2 + 292);
  if (!v19) {
    size_t v18 = @"NearestNeighbor";
  }
  if (v19 != 1)
  {
    if (!v19)
    {
      if (a6 == 4.0 && a7 == 4.0 || a6 == 3.0 && a7 == 3.0 || a6 == 2.0 && a7 == 2.0)
      {
        long long v24 = @"UnalignedCorners";
        goto LABEL_26;
      }
      int v21 = *(unsigned __int8 *)(a2 + 316);
      std::string::size_type v22 = @"OffsetDefault";
      unint64_t v23 = @"OffsetDefaultWithNominalScale";
      goto LABEL_13;
    }
LABEL_17:
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "upsample: unsupported sampling_grid mode.");
    goto LABEL_4;
  }
  int v20 = *(_DWORD *)(a2 + 300);
  if (v20 == 1)
  {
    long long v24 = @"Default";
    goto LABEL_26;
  }
  if (v20) {
    goto LABEL_17;
  }
  int v21 = *(_DWORD *)(a2 + 296);
  std::string::size_type v22 = @"AlignedCorners";
  unint64_t v23 = @"UnalignedCorners";
LABEL_13:
  if (v21) {
    long long v24 = v22;
  }
  else {
    long long v24 = v23;
  }
LABEL_26:
  unint64_t v47 = @"Width";
  unint64_t v48 = v18;
  uint64_t v49 = @"Height";
  unsigned int v50 = v18;
  uint64_t v51 = @"Width";
  uint64_t v52 = v24;
  int v53 = @"Height";
  int v54 = v24;
  int v25 = ANECValidateResizeLayer();
  if (v25)
  {
    Espresso::ANECompilerEngine::violations_from_alternates<ANECResizeLayerDescAlternate>((uint64_t)v37, v44, v43);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"ANECValidateResizeLayer rejected with status ", 45);
    std::to_string(&v33, v25);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v26 = &v33;
    }
    else {
      BOOL v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v26, size);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    for (unint64_t i = v38; i; unint64_t i = (uint64_t **)*i)
    {
      uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", ", 2);
      char v30 = (const char *)[i[2] UTF8String];
      size_t v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
    }
    std::stringbuf::str();
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    uint64_t v32 = (void *)MEMORY[0x1E4FBA418];
    *(void *)(a1 + 24) = *((void *)&v33.__r_.__value_.__l + 2);
    v34[0] = *v32;
    *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = v32[3];
    v34[1] = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](&v36);
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v37);
  }
  else
  {
    *(unsigned char *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
  }
LABEL_4:
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
}

void sub_19214B938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v52 = *(std::__shared_weak_count **)(v50 - 88);
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::mix_reduce_kernel::is_valid_for_engine(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 48);
  char v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    char v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(uint64_t ***)(v6 + 72);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    char v8 = 0;
  }
  uint64_t v10 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 59));
  if (Espresso::ANECompilerEngine::is_mix((Espresso::ANECompilerEngine *)v10, v11))
  {
    long long v51 = *a2;
    char v12 = (std::__shared_weak_count *)*((void *)&v51 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    id v13 = v12;
    uint64_t is_valid_for_engine = Espresso::ANECompilerEngine::reduce_kernel::is_valid_for_engine(a1, (int64x2_t **)&v51, (int *)a3);
    if (v13) {
      nitro::nitro_function::nitro_function(v13);
    }
  }
  else
  {
    uint64_t v15 = *(void *)a3;
    if (*(void *)a3 == *(void *)(a3 + 8))
    {
      unint64_t v23 = (int64x2_t *)*((void *)a2 + 1);
      v50[0] = *(int64x2_t **)a2;
      v50[1] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->i64[1], 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v44, "Detected zero bottom tensor");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v46, (long long *)v44, a3, 0);
      Espresso::emit_kernel_validation_warning(v50, (Espresso::base_kernel::validate_for_engine_warning_t *)&v46);
      if (v49) {
        nitro::nitro_function::nitro_function(v49);
      }
      v38[0] = (void **)v48;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v38);
      v38[0] = (void **)v47;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v38);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      if (v23) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v23);
      }
      uint64_t is_valid_for_engine = 0;
    }
    else
    {
      uint64_t v16 = *(void *)(a3 + 24);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v17 = *(_OWORD *)(v15 + 16);
      uint64_t v18 = *(void *)(v15 + 32);
      v39[0] = *(_OWORD *)v15;
      v39[1] = v17;
      uint64_t v40 = v18;
      std::string __p = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v44, (const Espresso::net *)v9, (const Espresso::layer_shape *)v39, 1);
      if (__p)
      {
        uint64_t v42 = __p;
        operator delete(__p);
      }
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v19 = *(_OWORD *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 32);
      v33[0] = *(_OWORD *)v16;
      v33[1] = v19;
      uint64_t v34 = v20;
      char v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v35, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v38, (const Espresso::net *)v9, (const Espresso::layer_shape *)v33, 1);
      if (v35)
      {
        uint64_t v36 = v35;
        operator delete(v35);
      }
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      int v21 = *(long long **)(**(void **)(a3 + 48) + 224 * *(void *)(a3 + 72) + 136);
      if (*((char *)v21 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v21, *((void *)v21 + 1));
      }
      else
      {
        long long v22 = *v21;
        v32.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v22;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v9[45], &v32))
      {
        v29[0] = &v32;
        long long v24 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 44, &v32, (uint64_t)&std::piecewise_construct, (long long **)v29);
        *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)(v24 + 56);
        v47[0] = 0;
        v47[1] = 0;
        v46.__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v46.__r_.__value_.__r.__words[2], *((const void **)v24 + 9), *((void *)v24 + 10), (uint64_t)(*((void *)v24 + 10) - *((void *)v24 + 9)) >> 2);
        if (LODWORD(v46.__r_.__value_.__r.__words[1]) == -1) {
          int v25 = 1;
        }
        else {
          int v25 = v46.__r_.__value_.__r.__words[1];
        }
        if (v46.__r_.__value_.__r.__words[2])
        {
          v47[0] = *((void *)&v46.__r_.__value_.__l + 2);
          operator delete((void *)v46.__r_.__value_.__r.__words[2]);
        }
      }
      else
      {
        int v25 = *(_DWORD *)(a3 + 64);
      }
      unsigned int v26 = *(_DWORD *)(a1 + 280);
      if (v26 <= 0xC && ((1 << v26) & 0x1E13) != 0)
      {
        Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&v46, v10, v44, v38, (long long *)(a1 + 280), v25);
        if (SHIBYTE(v47[0]) < 0) {
          operator delete((void *)v46.__r_.__value_.__l.__size_);
        }
        uint64_t is_valid_for_engine = 1;
      }
      else
      {
        uint64_t v28 = (int64x2_t *)*((void *)a2 + 1);
        v31[0] = *(int64x2_t **)a2;
        v31[1] = v28;
        if (v28) {
          atomic_fetch_add_explicit(&v28->i64[1], 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v29, "Only Sum, Min, Max, Avg, Sumsq, Argmax, Argmin modes are supported for reduce");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v46, (long long *)v29, a3, 0);
        Espresso::emit_kernel_validation_warning(v31, (Espresso::base_kernel::validate_for_engine_warning_t *)&v46);
        if (v49) {
          nitro::nitro_function::nitro_function(v49);
        }
        uint64_t v52 = (void **)v48;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
        uint64_t v52 = (void **)v47;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v52);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        if (v28) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v28);
        }
        uint64_t is_valid_for_engine = 0;
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
    }
  }

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_19214BE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v53 - 240));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v52) {
    nitro::nitro_function::nitro_function(v52);
  }
  if (a23 < 0) {
    operator delete(a18);
  }

  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
  _Unwind_Resume(a1);
}

void sub_19214BF08()
{
  if (!v0) {
    JUMPOUT(0x19214BF00);
  }
  JUMPOUT(0x19214BEF8);
}

BOOL Espresso::ANECompilerEngine::mix_pool_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, int *a3)
{
  uint64_t v6 = (_OWORD *)*((void *)a3 + 6);
  char v7 = (std::__shared_weak_count *)*((void *)v6 + 10);
  if (v7)
  {
    char v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = (uint64_t **)*((void *)v6 + 9);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    char v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v9 + 59));
  uint64_t v10 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v10, v11))
  {
    char v12 = a2[1];
    v95[0] = *a2;
    v95[1] = v12;
    *a2 = 0;
    a2[1] = 0;
    BOOL is_valid_for_engine = Espresso::ANECompilerEngine::pool_kernel::is_valid_for_engine(a1, v95, (Espresso::ANECompilerEngine *)a3);
    if (v12) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v12);
    }
    goto LABEL_32;
  }
  if (*(_DWORD *)(a1 + 304) == 2 && *(_DWORD *)(a1 + 332) == 1)
  {
    int v14 = *a2;
    uint64_t v15 = a2[1];
    v94[0] = v14;
    v94[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "average_count_exclude_padding is not supported for L2 pooling");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v94, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
LABEL_22:
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    std::string v84 = (void **)v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v84);
    std::string v84 = (void **)&v89;
    int v21 = &v84;
LABEL_25:
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v21);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete((void *)__p);
    }
    if (v15) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v15);
    }
    BOOL is_valid_for_engine = 0;
    goto LABEL_32;
  }
  if (*((void *)a3 + 1) - *(void *)a3 != 64 || *((void *)a3 + 4) - *((void *)a3 + 3) != 64)
  {
    uint64_t v20 = *a2;
    uint64_t v15 = a2[1];
    v87[0] = v20;
    v87[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: expect only one input / output");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v87, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
    goto LABEL_22;
  }
  uint64_t v16 = (_OWORD *)*((void *)a3 + 6);
  long long v17 = (std::__shared_weak_count *)*((void *)v16 + 10);
  if (v17)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18)
    {
      long long v19 = (const Espresso::net *)*((void *)v16 + 9);
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  long long v19 = 0;
LABEL_37:
  uint64_t v23 = *(void *)a3;
  uint64_t v24 = *(void *)(*(void *)a3 + 32);
  long long v25 = *(_OWORD *)(*(void *)a3 + 16);
  v79[0] = *(_OWORD *)*(void *)a3;
  v79[1] = v25;
  uint64_t v80 = v24;
  unsigned int v81 = 0;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v81, *(const void **)(v23 + 40), *(void *)(v23 + 48), (uint64_t)(*(void *)(v23 + 48) - *(void *)(v23 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v84, v19, (const Espresso::layer_shape *)v79, 1);
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  unsigned int v26 = (_OWORD *)*((void *)a3 + 6);
  char v27 = (std::__shared_weak_count *)*((void *)v26 + 10);
  if (v27)
  {
    uint64_t v28 = std::__shared_weak_count::lock(v27);
    if (v28) {
      uint64_t v29 = (const Espresso::net *)*((void *)v26 + 9);
    }
    else {
      uint64_t v29 = 0;
    }
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v28 = 0;
  }
  char v30 = (_OWORD *)*((void *)a3 + 3);
  uint64_t v31 = *((void *)v30 + 4);
  long long v32 = v30[1];
  v71[0] = *v30;
  v71[1] = v32;
  uint64_t v72 = v31;
  int v73 = 0;
  __int16 v74 = 0;
  uint64_t v75 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v73, *((const void **)v30 + 5), *((void *)v30 + 6), (uint64_t)(*((void *)v30 + 6) - *((void *)v30 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v76, v29, (const Espresso::layer_shape *)v71, 1);
  if (v73)
  {
    __int16 v74 = v73;
    operator delete(v73);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v84, v10))
  {
    char v35 = *a2;
    uint64_t v15 = a2[1];
    v70[0] = v35;
    v70[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: Input tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v70, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
    goto LABEL_60;
  }
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(v76, v10))
  {
    uint64_t v36 = *a2;
    uint64_t v15 = a2[1];
    v69[0] = v36;
    v69[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "pool_kernel: Output tensor extents exceed ANE limits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v69, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
LABEL_60:
    if (v93) {
      nitro::nitro_function::nitro_function(v93);
    }
    v57[0] = (void **)v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v57);
    v57[0] = (void **)&v89;
    int v21 = v57;
    goto LABEL_25;
  }
  std::string v33 = *(long long **)(**((void **)a3 + 6) + 224 * *((void *)a3 + 9) + 136);
  if (*((char *)v33 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v33, *((void *)v33 + 1));
  }
  else
  {
    long long v34 = *v33;
    v68.__r_.__value_.__r.__words[2] = *((void *)v33 + 2);
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v34;
  }
  int v37 = a3[16];
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v9[45], &v68))
  {
    *(void *)&long long __p = &v68;
    uint64_t v38 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 44, &v68, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = *(_OWORD *)(v38 + 56);
    std::string::size_type v89 = 0;
    unint64_t v90 = 0;
    v88.__r_.__value_.__r.__words[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v88.__r_.__value_.__r.__words[2], *((const void **)v38 + 9), *((void *)v38 + 10), (uint64_t)(*((void *)v38 + 10) - *((void *)v38 + 9)) >> 2);
    int v37 = LODWORD(v88.__r_.__value_.__r.__words[1]) == -1 ? 1 : LODWORD(v88.__r_.__value_.__r.__words[1]);
    if (v88.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v89 = v88.__r_.__value_.__r.__words[2];
      operator delete((void *)v88.__r_.__value_.__r.__words[2]);
    }
  }
  uint64_t v39 = (_DWORD *)(a1 + 304);
  if (*(_DWORD *)(a1 + 360)
    || (unsigned int v41 = *(_DWORD *)(a1 + 308), v42 = *(_DWORD *)(a1 + 312), v41 == v86) && v42 == v85 && v77 == 1 && v78 == 1)
  {
    std::string::size_type v89 = 0;
    unint64_t v90 = 0xFFFFFFFF00000000;
    v88.__r_.__value_.__r.__words[2] = 0;
    char v91 = 0;
    if (*v39) {
      unsigned int v40 = 9;
    }
    else {
      unsigned int v40 = 1;
    }
    v88.__r_.__value_.__r.__words[0] = v40 | 0x358637BD00000000;
    v88.__r_.__value_.__l.__size_ = 0x100000003;
    Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw((uint64_t)&__p, v10, &v84, v76, (long long *)&v88, v37);
    if (SBYTE3(v64) < 0) {
      operator delete(*((void **)&__p + 1));
    }
    BOOL is_valid_for_engine = 1;
    goto LABEL_77;
  }
  unsigned int v43 = *(_DWORD *)(a1 + 304);
  int v44 = *(_DWORD *)(a1 + 356);
  long long v65 = *(_OWORD *)(a1 + 340);
  uint64_t v62 = *(void *)(a1 + 320);
  int v66 = v44;
  int v63 = 1;
  *(void *)&long long __p = __PAIR64__(v41, v43);
  *((void *)&__p + 1) = v42 | 0x100000000;
  uint64_t v64 = *(void *)(a1 + 332);
  int v67 = 0;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v59, (NSString *)(a1 + 432), v10);
  if (LOBYTE(v57[0]) || *v39 == 2) {
    goto LABEL_85;
  }
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = *(_OWORD *)(a1 + 384);
  v56[4] = *(_OWORD *)(a1 + 368);
  v56[5] = v45;
  v56[6] = *(_OWORD *)(a1 + 400);
  long long v46 = *(_OWORD *)(a1 + 320);
  v56[0] = *(_OWORD *)v39;
  v56[1] = v46;
  long long v47 = *(_OWORD *)(a1 + 352);
  v56[2] = *(_OWORD *)(a1 + 336);
  v56[3] = v47;
  BOOL v48 = Espresso::ANECompilerEngine::mix_pool_kernel::separated_pool_workaround_compatible((Espresso::ANECompilerEngine *)v9, (uint64_t)v56);
  if (v78 >= 17 || !v48)
  {
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    goto LABEL_102;
  }
  int v50 = v77;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  if (v50 >= 17)
  {
LABEL_102:
    long long v51 = *a2;
    uint64_t v52 = a2[1];
    v55[0] = v51;
    v55[1] = v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v53, "pool_kernel: validator failed and failed to transform_large_separated_pool");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v88, (long long *)v53, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v55, (Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v88);
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    if (v52) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v52);
    }
    BOOL is_valid_for_engine = 0;
    goto LABEL_86;
  }
LABEL_85:
  BOOL is_valid_for_engine = 1;
LABEL_86:
  if (v58 < 0) {
    operator delete(v57[1]);
  }
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
LABEL_77:
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
LABEL_32:

  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  return is_valid_for_engine;
}

void sub_19214C638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v57 - 224));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a40) {
    nitro::nitro_function::nitro_function(a40);
  }
  if (a54 < 0) {
    operator delete(a49);
  }

  if (v54) {
    nitro::nitro_function::nitro_function(v54);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_reduce_kernel::supported_by_hw(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4, long long *a5, int a6)
{
  id v37 = a2;
  if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(a3, v37)
    || !Espresso::ANECompilerEngine::blob_shape_ane_compatible(a4, v37))
  {
    *(unsigned char *)a1 = 0;
    std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Tensor dimensions exceed ANE limits.");
    goto LABEL_9;
  }
  unsigned int v11 = *((_DWORD *)a5 + 2);
  if (v11 <= 0x1F && ((1 << v11) & 0x8001019E) != 0)
  {
    unsigned int v12 = a3[6];
    if (*((unsigned char *)a5 + 40) && *((_DWORD *)a5 + 9) != -1)
    {
LABEL_7:
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "ND mode with nd_axis != -1 is not mapped to ANE.");
      goto LABEL_9;
    }
    if ((*(_DWORD *)a5 - 11) > 1) {
      goto LABEL_55;
    }
    BOOL v13 = a3[7] == 0;
    long long v14 = a5[1];
    long long v39 = *a5;
    v40[0] = v14;
    *(_OWORD *)((char *)v40 + 12) = *(long long *)((char *)a5 + 28);
    uint64_t v15 = get_reduce_axes((uint64_t)&v39, v12, v13);
    if ([v15 count] == 1)
    {
      uint64_t v16 = [v15 objectAtIndexedSubscript:0];
      long long v17 = v16;
      if (v16 == @"Channel")
      {
        if (a3[1] >= 0x801u)
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input channel count exceeds limits.");
          long long v17 = @"Channel";
          goto LABEL_51;
        }
        long long v17 = @"Channel";
      }
      else if (v16 == @"Width" || v16 == @"Height")
      {
        unsigned __int8 v38 = 0;
        id v18 = spatial_argmax_valid_only_after_transpose(v37, a3, v16, a6, &v38);
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v19);
        int v21 = v38;
        if (a3[3] >= 0x10u && !v38)
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input height count exceeds limits.");
LABEL_51:

          goto LABEL_9;
        }
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v20);
        unint64_t v29 = 7;
        if (((a6 - 2) & 0xFFFFFFFD) == 0) {
          unint64_t v29 = 15;
        }
        if (v29 < (int)a3[4] && !v21)
        {
          *(unsigned char *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input width count exceeds limits.");
          goto LABEL_51;
        }
      }
      goto LABEL_53;
    }
    if ([v15 count] != 2)
    {
LABEL_54:

LABEL_55:
      unint64_t v31 = (int)a3[1];
      if (v31 < 4) {
        goto LABEL_59;
      }
      unint64_t v32 = 2;
      if (v31 >> 1 > 2) {
        unint64_t v32 = v31 >> 1;
      }
      if ((v31 & 1) == 0) {
        goto LABEL_59;
      }
      uint64_t v35 = 0;
      while (v32 - 2 != v35)
      {
        unint64_t v36 = v31 % (v35 + 3);
        ++v35;
        if (!v36)
        {
          unint64_t v32 = v35 + 1;
          break;
        }
      }
      if (v31 >= 0x801 && v32 >= v31 >> 1)
      {
        char v34 = 0;
        std::string v33 = "ANECompiler doesn't support input channel count that is a                                         prime an"
              "d exceeds ANE's Unicast Cin limit. This can be addressed                                         by decomp"
              "osing into multiple ops that consume non-primes.";
      }
      else
      {
LABEL_59:
        std::string v33 = "Success";
        char v34 = 1;
      }
      *(unsigned char *)a1 = v34;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), v33);
      goto LABEL_9;
    }
    long long v17 = [v15 objectAtIndexedSubscript:0];
    long long v22 = [v15 objectAtIndexedSubscript:1];
    uint64_t v24 = v22;
    BOOL v26 = v17 == @"Height" && v22 == @"Width";
    BOOL v27 = v22 == @"Height" && v17 == @"Width";
    if (v27 || v26)
    {
      Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v23);
      if (a3[3] < 0x10u)
      {
        Espresso::ANECompilerEngine::is_mix_e((Espresso::ANECompilerEngine *)v37, v28);
        unint64_t v30 = 7;
        if (((a6 - 2) & 0xFFFFFFFD) == 0) {
          unint64_t v30 = 15;
        }
        if (v30 >= (int)a3[4])
        {

LABEL_53:
          goto LABEL_54;
        }
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input width count exceeds limits.");
      }
      else
      {
        *(unsigned char *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Input height count exceeds limits.");
      }
    }
    else
    {
      *(unsigned char *)a1 = 0;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Unsupported reduce axis mode for arg max");
    }

    goto LABEL_51;
  }
  if (*((unsigned char *)a5 + 40) && *((_DWORD *)a5 + 9) != -1) {
    goto LABEL_7;
  }
  *(unsigned char *)a1 = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Unsupported reduce axis mode");
LABEL_9:
}

void sub_19214CBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::general_concat_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, uint64_t *a3)
{
  uint64_t v5 = a3[6];
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 80);
  if (v6)
  {
    char v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      char v8 = *(const Espresso::net **)(v5 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    char v7 = 0;
  }
  char v8 = 0;
LABEL_6:
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  uint64_t v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  unsigned int v11 = v9;
  uint64_t v12 = *(void *)(a1 + 280);
  uint64_t v104 = v12;
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t v14 = a3[3];
    int v15 = *(_DWORD *)(v14 + 20);
    if (v15 == -1)
    {
      if (*(_DWORD *)(v14 + 16) == 1) {
        int v15 = 4;
      }
      else {
        int v15 = 5;
      }
    }
    int v13 = v15 + v12;
    LODWORD(v104) = v15 + v12;
  }
  else
  {
    int v13 = v12;
  }
  if ((v12 & 0xFF00000000) != 0)
  {
    uint64_t v16 = a3[3];
    int v17 = *(_DWORD *)(v16 + 20);
    if (v17 == -1)
    {
      if (*(_DWORD *)(v16 + 16) == 1) {
        int v17 = 4;
      }
      else {
        int v17 = 5;
      }
    }
    int v13 = v17 + ~v13;
    LODWORD(v104) = v13;
    BYTE4(v104) = 0;
  }
  int is_mix = Espresso::ANECompilerEngine::is_mix(v9, v10);
  if (v13 > 2) {
    int v19 = is_mix;
  }
  else {
    int v19 = 0;
  }
  if (v19 == 1)
  {
    uint64_t v20 = *a2;
    int v21 = a2[1];
    v103[0] = v20;
    v103[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported concat axis on batch with sub-batching architecture target.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v100, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v103, (Espresso::base_kernel::validate_for_engine_warning_t *)v100);
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    v74[0] = v101;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    v74[0] = &v100[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    if ((v100[23] & 0x80000000) != 0) {
      operator delete(*(void **)v100);
    }
    if (v98 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_116;
  }
  if (*a3 == a3[1])
  {
    uint64_t v62 = *a2;
    int v21 = a2[1];
    v99[0] = v62;
    v99[1] = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Detected zero bottom blob in general_concat");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v100, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v99, (Espresso::base_kernel::validate_for_engine_warning_t *)v100);
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    v74[0] = v101;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    v74[0] = &v100[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v74);
    if ((v100[23] & 0x80000000) != 0) {
      operator delete(*(void **)v100);
    }
    if (v98 < 0)
    {
      operator delete(__p[0]);
      if (!v21) {
        goto LABEL_118;
      }
      goto LABEL_117;
    }
LABEL_116:
    if (!v21)
    {
LABEL_118:
      BOOL v63 = 0;
      goto LABEL_142;
    }
LABEL_117:
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v21);
    goto LABEL_118;
  }
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = a3[3];
  uint64_t v23 = *(void *)(v22 + 32);
  long long v24 = *(_OWORD *)(v22 + 16);
  v92[0] = *(_OWORD *)v22;
  v92[1] = v24;
  uint64_t v93 = v23;
  v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v70 = v11;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v22 + 40), *(void *)(v22 + 48), (uint64_t)(*(void *)(v22 + 48) - *(void *)(v22 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)__p, v8, (const Espresso::layer_shape *)v92, 1);
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  std::string::size_type v89 = 0;
  unint64_t v90 = 0;
  unint64_t v91 = 0;
  uint64_t v25 = *a3;
  uint64_t v26 = a3[1];
  if (*a3 == v26)
  {
    unint64_t v29 = 0;
    BOOL v27 = 0;
    uint64_t v80 = 0;
    unsigned int v81 = 0;
    unint64_t v82 = 0;
LABEL_120:
    unsigned int v43 = 0;
    int v77 = 0;
    long long v78 = 0uLL;
LABEL_121:
    Espresso::ANECompilerEngine::bottom_constness_mask((Espresso::ANECompilerEngine *)v100, (v29 - v27) >> 5, (const Espresso::base_kernel::validate_for_engine_args_t *)a3);
    int v77 = *(void **)v100;
    long long v78 = *(_OWORD *)&v100[8];
LABEL_122:
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)v100, (NSString *)(a1 + 288), v70);
    Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw((uint64_t)v74, (uint64_t)v100, v70, &v89, (uint64_t *)&v80, &v77, __p, (unsigned int *)&v104);
    if (*(void *)&v100[8]) {
      nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v100[8]);
    }
    BOOL v63 = LOBYTE(v74[0]) != 0;
    if (!LOBYTE(v74[0]))
    {
      uint64_t v64 = *a2;
      long long v65 = a2[1];
      v73[0] = v64;
      v73[1] = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v100, (long long *)&v74[1], (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v73, (Espresso::base_kernel::validate_for_engine_warning_t *)v100);
      if (v102) {
        nitro::nitro_function::nitro_function(v102);
      }
      v105[0] = (void **)v101;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v105);
      v105[0] = (void **)&v100[24];
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v105);
      if ((v100[23] & 0x80000000) != 0) {
        operator delete(*(void **)v100);
      }
      if (v65) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v65);
      }
    }
    if (v76 < 0) {
      operator delete(v74[1]);
    }
    if (v77) {
      operator delete(v77);
    }
    if (v43)
    {
LABEL_138:
      unsigned int v81 = v43;
      operator delete(v43);
    }
LABEL_139:
    BOOL v27 = (char *)v89;
    if (v89)
    {
LABEL_140:
      unint64_t v90 = v27;
      operator delete(v27);
    }
  }
  else
  {
    int v69 = a2;
    BOOL v27 = 0;
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    while (1)
    {
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v30 = *(_OWORD *)v25;
      long long v31 = *(_OWORD *)(v25 + 16);
      uint64_t v85 = *(void *)(v25 + 32);
      v84[0] = v30;
      v84[1] = v31;
      v87 = 0;
      uint64_t v88 = 0;
      int v86 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v86, *(const void **)(v25 + 40), *(void *)(v25 + 48), (uint64_t)(*(void *)(v25 + 48) - *(void *)(v25 + 40)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v100, v8, (const Espresso::layer_shape *)v84, 1);
      if ((unint64_t)v29 >= v28)
      {
        uint64_t v33 = (v29 - v27) >> 5;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 59)
        {
          unint64_t v90 = v29;
          unint64_t v91 = v28;
          std::string::size_type v89 = v27;
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v28 - (void)v27) >> 4 > v34) {
          unint64_t v34 = (uint64_t)(v28 - (void)v27) >> 4;
        }
        if (v28 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        id v37 = (_OWORD *)(v35 + 32 * v33);
        _OWORD *v37 = *(_OWORD *)v100;
        v37[1] = *(_OWORD *)&v100[16];
        if (v29 == v27)
        {
          unsigned int v40 = (char *)(v35 + 32 * v33);
        }
        else
        {
          unint64_t v38 = v35 + 32 * v33;
          do
          {
            long long v39 = *((_OWORD *)v29 - 1);
            unsigned int v40 = (char *)(v38 - 32);
            *(_OWORD *)(v38 - 32) = *((_OWORD *)v29 - 2);
            *(_OWORD *)(v38 - 16) = v39;
            v29 -= 32;
            v38 -= 32;
          }
          while (v29 != v27);
        }
        unint64_t v28 = v35 + 32 * v36;
        unint64_t v29 = (char *)(v37 + 2);
        if (v27) {
          operator delete(v27);
        }
        BOOL v27 = v40;
      }
      else
      {
        long long v32 = *(_OWORD *)&v100[16];
        *(_OWORD *)unint64_t v29 = *(_OWORD *)v100;
        *((_OWORD *)v29 + 1) = v32;
        v29 += 32;
      }
      if (v86)
      {
        v87 = v86;
        operator delete(v86);
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      if (*(unsigned char *)(a1 + 285) && !Espresso::layer_shape::operator==(v25, *a3)) {
        break;
      }
      v25 += 64;
      if (v25 == v26)
      {
        unint64_t v90 = v29;
        unint64_t v91 = v28;
        std::string::size_type v89 = v27;
        uint64_t v42 = *a3;
        uint64_t v41 = a3[1];
        uint64_t v80 = 0;
        unsigned int v81 = 0;
        unint64_t v82 = 0;
        a2 = v69;
        if (v41 != v42)
        {
          unsigned int v43 = 0;
          unint64_t v44 = 0;
          long long v45 = 0;
          unint64_t v46 = 0;
          char v71 = 1;
          while (1)
          {
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(*(void *)(*(void *)a3[6] + 224 * a3[9] + 144)
                          - *(void *)(*(void *)a3[6] + 224 * a3[9] + 136)) >> 3) <= v46)
            {
              if (!v46)
              {
                unint64_t v82 = v44;
                std::string v68 = v69[1];
                v79[0] = *v69;
                v79[1] = v68;
                uint64_t v80 = (void **)v43;
                if (v68) {
                  atomic_fetch_add_explicit(&v68->i64[1], 1uLL, memory_order_relaxed);
                }
                std::string::basic_string[abi:ne180100]<0>(v74, "Unexpected: No available compute path in concat validation.");
                Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v100, (long long *)v74, (uint64_t)a3, 0);
                Espresso::emit_kernel_validation_warning(v79, (Espresso::base_kernel::validate_for_engine_warning_t *)v100);
                if (v102) {
                  nitro::nitro_function::nitro_function(v102);
                }
                int v77 = v101;
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
                int v77 = &v100[24];
                std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
                if ((v100[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v100);
                }
                if (v75 < 0) {
                  operator delete(v74[0]);
                }
                if (v68) {
                  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v68);
                }
                BOOL v63 = 0;
                if (v43) {
                  goto LABEL_138;
                }
                goto LABEL_139;
              }
              if ((unint64_t)v45 >= v44)
              {
                uint64_t v54 = (v45 - v43) >> 2;
                unint64_t v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62)
                {
                  unint64_t v82 = v44;
                  uint64_t v80 = (void **)v43;
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v44 - (void)v43) >> 1 > v55) {
                  unint64_t v55 = (uint64_t)(v44 - (void)v43) >> 1;
                }
                if (v44 - (unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v56 = v55;
                }
                if (v56) {
                  unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v56);
                }
                else {
                  uint64_t v57 = 0;
                }
                std::string v60 = (char *)(v56 + 4 * v54);
                *(_DWORD *)std::string v60 = *((_DWORD *)v45 - 1);
                uint64_t v49 = v60 + 4;
                while (v45 != v43)
                {
                  int v61 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                unint64_t v44 = v56 + 4 * v57;
                unsigned int v81 = v49;
                if (v43) {
                  operator delete(v43);
                }
                char v71 = 0;
                unsigned int v43 = v60;
              }
              else
              {
                char v71 = 0;
                *(_DWORD *)long long v45 = *((_DWORD *)v45 - 1);
                uint64_t v49 = v45 + 4;
              }
            }
            else
            {
              int v47 = Espresso::ANECompilerEngine::bottom_compute_path((Espresso::ANECompilerEngine *)a3, v8, (const Espresso::net *)v46);
              int v48 = v47;
              if ((unint64_t)v45 >= v44)
              {
                uint64_t v50 = (v45 - v43) >> 2;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62)
                {
                  unint64_t v82 = v44;
                  uint64_t v80 = (void **)v43;
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v44 - (void)v43) >> 1 > v51) {
                  unint64_t v51 = (uint64_t)(v44 - (void)v43) >> 1;
                }
                if (v44 - (unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v52 = v51;
                }
                if (v52) {
                  unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
                }
                else {
                  uint64_t v53 = 0;
                }
                char v58 = (char *)(v52 + 4 * v50);
                *(_DWORD *)char v58 = v48;
                uint64_t v49 = v58 + 4;
                while (v45 != v43)
                {
                  int v59 = *((_DWORD *)v45 - 1);
                  v45 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                unint64_t v44 = v52 + 4 * v53;
                unsigned int v81 = v49;
                if (v43) {
                  operator delete(v43);
                }
                unsigned int v43 = v58;
              }
              else
              {
                *(_DWORD *)long long v45 = v47;
                uint64_t v49 = v45 + 4;
              }
            }
            unsigned int v81 = v49;
            ++v46;
            long long v45 = v49;
            if (v46 >= (a3[1] - *a3) >> 6)
            {
              unint64_t v82 = v44;
              uint64_t v80 = (void **)v43;
              int v77 = 0;
              long long v78 = 0uLL;
              BOOL v27 = (char *)v89;
              unint64_t v29 = v90;
              if (v71)
              {
                a2 = v69;
                goto LABEL_121;
              }
              std::vector<BOOL>::reserve((uint64_t)&v77, (v90 - (unsigned char *)v89) >> 5);
              a2 = v69;
              std::vector<BOOL>::resize((uint64_t)&v77, (v29 - v27) >> 5);
              goto LABEL_122;
            }
          }
        }
        goto LABEL_120;
      }
    }
    unint64_t v90 = v29;
    unint64_t v91 = v28;
    std::string::size_type v89 = v27;
    int v67 = v69[1];
    v83[0] = *v69;
    v83[1] = v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v74, "All shapes in general_concat must match if interleave is set.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v100, (long long *)v74, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)v100);
    if (v102) {
      nitro::nitro_function::nitro_function(v102);
    }
    uint64_t v80 = (void **)v101;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v80);
    uint64_t v80 = (void **)&v100[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v80);
    if ((v100[23] & 0x80000000) != 0) {
      operator delete(*(void **)v100);
    }
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    if (v67) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v67);
    }
    BOOL v63 = 0;
    if (v27) {
      goto LABEL_140;
    }
  }
  unsigned int v11 = v70;
LABEL_142:

  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v63;
}

void sub_19214D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v64 - 232));
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v62) {
    nitro::nitro_function::nitro_function(v62);
  }
  if (v63) {
    operator delete(v63);
  }
  if (a44) {
    operator delete(a44);
  }

  if (v61) {
    nitro::nitro_function::nitro_function(v61);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANECompilerEngine::concat_kernel::is_valid_for_engine(uint64_t a1, int64x2_t **a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v5 = *((void *)a3 + 6);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 80);
  if (v6)
  {
    char v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      char v8 = *(const Espresso::net **)(v5 + 72);
      goto LABEL_6;
    }
  }
  else
  {
    char v7 = 0;
  }
  char v8 = 0;
LABEL_6:
  unint64_t v51 = v7;
  uint64_t v9 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v8 + 472);
  if (*((void *)a3 + 1) - *(void *)a3 <= 0x40uLL)
  {
    unint64_t v46 = a2[1];
    v83[0] = *a2;
    v83[1] = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->i64[1], 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v77, "Must have at least two tensors to concat.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v79, (long long *)v77, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    unint64_t v55 = (void **)v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v55);
    unint64_t v55 = (void **)v80 + 1;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v55);
    if (SBYTE7(v80[0]) < 0) {
      operator delete((void *)v79);
    }
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    if (v46) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v46);
    }
    BOOL v45 = 0;
  }
  else
  {
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *((void *)a3 + 3);
    uint64_t v11 = *(void *)(v10 + 32);
    long long v12 = *(_OWORD *)(v10 + 16);
    v72[0] = *(_OWORD *)v10;
    v72[1] = v12;
    uint64_t v73 = v11;
    long long __p = 0;
    char v75 = 0;
    uint64_t v76 = 0;
    uint64_t v50 = v9;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v10 + 40), *(void *)(v10 + 48), (uint64_t)(*(void *)(v10 + 48) - *(void *)(v10 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v77, v8, (const Espresso::layer_shape *)v72, 1);
    if (__p)
    {
      char v75 = __p;
      operator delete(__p);
    }
    if (v7) {
      nitro::nitro_function::nitro_function(v7);
    }
    __int16 v71 = 0;
    uint64_t v13 = *(void *)a3;
    if (*((void *)a3 + 1) == *(void *)a3) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v52 = v8;
    uint64_t v48 = a1;
    uint64_t v49 = a2;
    int v14 = *(_DWORD *)(v13 + 20);
    if (v14 == -1)
    {
      if (*(_DWORD *)(v13 + 16) == 1) {
        int v14 = 4;
      }
      else {
        int v14 = 5;
      }
    }
    int v15 = 0;
    unint64_t v16 = 0;
    int v17 = 0;
    unint64_t v18 = 0;
    unint64_t v19 = 0;
    int v70 = 2 * (v14 > 3);
    int v67 = 0;
    std::string v68 = 0;
    unint64_t v69 = 0;
    uint64_t v64 = 0;
    long long v65 = 0;
    unint64_t v66 = 0;
    do
    {
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = *(void *)a3;
      }
      uint64_t v20 = (long long *)(v13 + (v19 << 6));
      long long v21 = *v20;
      long long v22 = v20[1];
      uint64_t v60 = *((void *)v20 + 4);
      v59[0] = v21;
      v59[1] = v22;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      int v61 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *((const void **)v20 + 5), *((void *)v20 + 6), (uint64_t)(*((void *)v20 + 6) - *((void *)v20 + 5)) >> 2);
      Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v79, v52, (const Espresso::layer_shape *)v59, 1);
      uint64_t v23 = v68;
      if ((unint64_t)v68 >= v18)
      {
        uint64_t v25 = (v68 - v17) >> 5;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 59) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v18 - (void)v17) >> 4 > v26) {
          unint64_t v26 = (uint64_t)(v18 - (void)v17) >> 4;
        }
        if (v18 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        unint64_t v29 = (_OWORD *)(v27 + 32 * v25);
        _OWORD *v29 = v79;
        v29[1] = v80[0];
        if (v23 == v17)
        {
          long long v32 = (void *)(v27 + 32 * v25);
        }
        else
        {
          unint64_t v30 = v27 + 32 * v25;
          do
          {
            long long v31 = *((_OWORD *)v23 - 1);
            long long v32 = (void *)(v30 - 32);
            *(_OWORD *)(v30 - 32) = *((_OWORD *)v23 - 2);
            *(_OWORD *)(v30 - 16) = v31;
            v23 -= 32;
            v30 -= 32;
          }
          while (v23 != v17);
        }
        unint64_t v18 = v27 + 32 * v28;
        long long v24 = (char *)(v29 + 2);
        int v67 = v32;
        std::string v68 = (char *)(v29 + 2);
        unint64_t v69 = v18;
        if (v17) {
          operator delete(v17);
        }
        int v17 = v32;
      }
      else
      {
        *(_OWORD *)std::string v68 = v79;
        *((_OWORD *)v23 + 1) = v80[0];
        long long v24 = v23 + 32;
      }
      std::string v68 = v24;
      if (v61)
      {
        uint64_t v62 = v61;
        operator delete(v61);
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      int v33 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v52, (const Espresso::net *)v19);
      int v34 = v33;
      unint64_t v35 = v65;
      if ((unint64_t)v65 >= v16)
      {
        uint64_t v37 = (v65 - v15) >> 2;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v16 - (void)v15) >> 1 > v38) {
          unint64_t v38 = (uint64_t)(v16 - (void)v15) >> 1;
        }
        if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39) {
          unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v39);
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v41 = (char *)(v39 + 4 * v37);
        *(_DWORD *)uint64_t v41 = v34;
        uint64_t v36 = v41 + 4;
        while (v35 != v15)
        {
          int v42 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v41 - 1) = v42;
          v41 -= 4;
        }
        unint64_t v16 = v39 + 4 * v40;
        uint64_t v64 = v41;
        long long v65 = v36;
        unint64_t v66 = v16;
        if (v15) {
          operator delete(v15);
        }
        int v15 = v41;
        char v7 = v51;
      }
      else
      {
        *(_DWORD *)long long v65 = v33;
        uint64_t v36 = v35 + 4;
      }
      long long v65 = v36;
      ++v19;
      uint64_t v13 = *(void *)a3;
    }
    while (v19 < (uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 6);
    unsigned int v43 = v67;
    Espresso::ANECompilerEngine::bottom_constness_mask((Espresso::ANECompilerEngine *)v58, (v68 - (unsigned char *)v67) >> 5, a3);
    uint64_t v9 = v50;
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v79, (NSString *)(v48 + 344), v50);
    Espresso::ANECompilerEngine::general_concat_kernel::supported_by_hw((uint64_t)&v55, (uint64_t)&v79, v50, &v67, (uint64_t *)&v64, v58, v77, (unsigned int *)&v70);
    if (*((void *)&v79 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v79 + 1));
    }
    if (!(_BYTE)v55)
    {
      unint64_t v44 = v49[1];
      v54[0] = *v49;
      v54[1] = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->i64[1], 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v79, &v56, (uint64_t)a3, 0);
      Espresso::emit_kernel_validation_warning(v54, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
      if (v82) {
        nitro::nitro_function::nitro_function(v82);
      }
      v84[0] = (void **)v81;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v84);
      v84[0] = (void **)v80 + 1;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v84);
      if (SBYTE7(v80[0]) < 0) {
        operator delete((void *)v79);
      }
      if (v44) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v44);
      }
    }
    BOOL v45 = (_BYTE)v55 != 0;
    if (v57 < 0) {
      operator delete((void *)v56);
    }
    if (v58[0]) {
      operator delete(v58[0]);
    }
    if (v64) {
      operator delete(v64);
    }
    if (v43) {
      operator delete(v43);
    }
  }

  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  return v45;
}

void sub_19214DD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)(v59 - 232));
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }

  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::convolution_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  if (*((void *)a3 + 1) - *(void *)a3 != 128) {
    goto LABEL_31;
  }
  char v7 = *(int64x2_t **)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = (_OWORD *)*((void *)a3 + 6);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 10);
  if (v9)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = (const Espresso::base_kernel::validate_for_engine_args_t *)*((void *)v8 + 9);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 0;
LABEL_9:
  long long v12 = Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v11 + 472);
  uint64_t v13 = *(char **)a3;
  if (*((void *)a3 + 1) - *(void *)a3 != 128)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution requires two inputs.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_17;
  }
  if (*(int *)(a1 + 420) >= 2)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic weights not supported for group/depthwise convolutions");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
LABEL_17:
    if (v82) {
      nitro::nitro_function::nitro_function(v82);
    }
    uint64_t v54 = (void **)&v81;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v54);
    uint64_t v54 = (void **)&v80;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v54);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  int v24 = *((_DWORD *)v13 + 19);
  if (v24 >= 2)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ANEC only supports the 1x(C*K)xHxW layout");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 336))
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic weights are not supported with biases.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_17;
  }
  if (v24 != 1
    || *((_DWORD *)v13 + 20) != 1
    || *(_DWORD *)(a1 + 352) != *((_DWORD *)v13 + 16)
    || *(_DWORD *)(a1 + 356) != *((_DWORD *)v13 + 17)
    || *(_DWORD *)(a1 + 344) * *(_DWORD *)(a1 + 348) != *((_DWORD *)v13 + 18))
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution shape mismatch for kernel paramters and dynamic weights.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 364) != -1)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution does not support fused activations.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
LABEL_76:
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
LABEL_21:
    if (SBYTE7(v66) < 0) {
      operator delete(__p[0]);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    BOOL v14 = 0;
    goto LABEL_26;
  }
  if (*(_WORD *)(a1 + 396) != 1 || *(_WORD *)(a1 + 398) != 1)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Dynamic convolution does not support stride > 1.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_76;
  }
  unsigned int v25 = Espresso::ANECompilerEngine::bottom_compute_path(a3, v11, (const Espresso::net *)1);
  if (v25 >= 5 || ((0x17u >> v25) & 1) == 0)
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Unsupported compute_path selected.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_76;
  }
  int v26 = *(_DWORD *)(a1 + 348) * dword_192DCE7C4[v25] * *(_DWORD *)(a1 + 352) * *(_DWORD *)(a1 + 356);
  int v28 = v26 - 1;
  BOOL v27 = v26 < 1;
  int v29 = v26 + 30;
  if (v26 >= 1) {
    int v29 = v26 - 1;
  }
  unsigned int v30 = v29 & 0xFFFFFFE0;
  int v31 = v26 + 62;
  if (!v27) {
    int v31 = v28;
  }
  if (v30 != (v31 & 0xFFFFFFC0 | 0x20))
  {
    int v61 = v7;
    *(void *)&long long v62 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Data size(K*H*W*data_byte_size)'s 32 and 64 alignment not same.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v61, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    goto LABEL_76;
  }
  unsigned int v32 = v25;
  ANECPaddingInitialize();
  int32x4_t v77 = vmovl_s16(*(int16x4_t *)(a1 + 384));
  ANECCrossCorrelationLayerDescInitialize();
  int32x4_t v74 = v77;
  uint64_t v75 = v78;
  uint64_t v33 = *(int *)(a1 + 420);
  uint64_t v72 = *(int *)(a1 + 344);
  uint64_t v73 = v33;
  uint64_t v76 = *(void *)(a1 + 352);
  int v34 = (int64x2_t *)*((void *)&off_1E5746EC0 + v32);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v35 = *(char **)a3;
  uint64_t v36 = *(void *)(*(void *)a3 + 32);
  long long v37 = *(_OWORD *)(*(void *)a3 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)*(void *)a3;
  long long v66 = v37;
  uint64_t v67 = v36;
  std::string v68 = 0;
  unint64_t v69 = 0;
  uint64_t v70 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v68, *((const void **)v35 + 5), *((void *)v35 + 6), (uint64_t)(*((void *)v35 + 6) - *((void *)v35 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v71, v11, (const Espresso::layer_shape *)__p, 1);
  if (v68)
  {
    unint64_t v69 = v68;
    operator delete(v68);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  ANECTensorDescInitialize();
  *(void *)&long long v38 = v71[3];
  *((void *)&v38 + 1) = v71[4];
  long long v39 = v38;
  int v61 = v34;
  uint64_t v64 = v71[2];
  *(void *)&long long v38 = v71[0];
  *((void *)&v38 + 1) = v71[1];
  long long v62 = v38;
  long long v63 = v39;
  ANECTensorDimsInitialize();
  uint64_t v40 = *(int *)(a1 + 344);
  *(void *)&long long v58 = 1;
  *((void *)&v58 + 1) = v40;
  uint64_t v41 = *(int *)(a1 + 356) * (uint64_t)*(int *)(a1 + 352) * *(int *)(a1 + 348);
  *(void *)&long long v59 = 1;
  *((void *)&v59 + 1) = v41;
  uint64_t v60 = 1;
  ANECTensorDescInitialize();
  long long v55 = v58;
  long long v56 = v59;
  uint64_t v57 = 1;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v50, (NSString *)(a1 + 560), v12);
  int v42 = ANECValidateCrossCorrelationLayer();
  BOOL v14 = v42 == 0;
  if (v42)
  {
    v49[0] = v7;
    v49[1] = (int64x2_t *)v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::to_string(&v48, v42);
    unsigned int v43 = std::string::insert(&v48, 0, "convolution_kernel: ANECValidateCrossCorrelationLayer failed with status ");
    v47[0] = *v43;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)v47, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(v49, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
    if (SHIBYTE(v47[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    Espresso::ANECompilerEngine::violations_from_alternates<ANECCrossCorrelationLayerDescAlternate>((uint64_t)v47, v52, v53);
    unint64_t v44 = (uint64_t **)v47[0].__r_.__value_.__r.__words[2];
    if (v47[0].__r_.__value_.__r.__words[2])
    {
      do
      {
        v46[0] = v7;
        v46[1] = (int64x2_t *)v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v48, (char *)[v44[2] UTF8String]);
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v79, (long long *)&v48, (uint64_t)a3, 0);
        Espresso::emit_kernel_validation_warning(v46, (Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((Espresso::base_kernel::validate_for_engine_warning_t *)&v79);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (v6) {
          nitro::nitro_function::nitro_function(v6);
        }
        unint64_t v44 = (uint64_t **)*v44;
      }
      while (v44);
    }
    std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v47);
  }
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
LABEL_26:

  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  if (!v14) {
    return 0;
  }
LABEL_31:
  int v15 = (_OWORD *)*((void *)a3 + 6);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)v15 + 10);
  if (v16)
  {
    int v17 = std::__shared_weak_count::lock(v16);
    if (v17) {
      uint64_t v18 = *((void *)v15 + 9);
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    int v17 = 0;
  }
  uint64_t v20 = Espresso::ANECompilerEngine::ane_arch_allow_network_override(v18 + 472);
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v79, (NSString *)(a1 + 560), v20);
  long long v21 = *(int64x2_t **)a2;
  long long v22 = *(int64x2_t **)(a2 + 8);
  v45[0] = v21;
  v45[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->i64[1], 1uLL, memory_order_relaxed);
  }
  uint64_t is_valid_for_engine_conv = Espresso::ANECompilerEngine::is_valid_for_engine_conv((uint64_t)&v79, (uint64_t *)(a1 + 472), a1 + 304, a3, v45, 0);
  if (v22) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v22);
  }
  if (v79.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v79.__r_.__value_.__l.__size_);
  }

  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  return is_valid_for_engine_conv;
}

void sub_19214E740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }

  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::ane_kernel::get_ane_validator(Espresso::ANECompilerEngine::ane_kernel *this, NSString *a2, void *a3)
{
  uint64_t v5 = a3;
  NSString v6 = a2[24];
  long long v21 = v5;
  if (!v6
  {
    Espresso::ANECompilerEngine::engine::make_validator_for_arch(this, v5);
  }
  char v8 = v7;
  uint64_t v20 = v21;
  std::mutex::lock((std::mutex *)(v8 + 24));
  uint64_t v9 = v20;
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[(NSString *)v9 UTF8String]);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  int8x8_t v11 = *(int8x8_t *)(v8 + 96);
  if (!*(void *)&v11) {
    goto LABEL_20;
  }
  unint64_t v12 = v10;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v15 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v15 = (*(void *)&v11 - 1) & v10;
  }
  unint64_t v16 = *(unsigned __int8 ***)(*((void *)v8 + 11) + 8 * v15);
  if (!v16 || (int v17 = *v16) == 0) {
LABEL_20:
  }
    Espresso::ANECompilerEngine::engine::make_validator_for_arch(this, v9);
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 == v12) {
      break;
    }
    if (v14 > 1)
    {
      if (v18 >= *(void *)&v11) {
        v18 %= *(void *)&v11;
      }
    }
    else
    {
      v18 &= *(void *)&v11 - 1;
    }
    if (v18 != v15) {
      goto LABEL_20;
    }
LABEL_19:
    int v17 = *(unsigned __int8 **)v17;
    if (!v17) {
      goto LABEL_20;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:ne180100](v17 + 16, (unsigned __int8 *)__p)) {
    goto LABEL_19;
  }
  uint64_t v19 = *((void *)v17 + 6);
  *(void *)this = *((void *)v17 + 5);
  *((void *)this + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  std::mutex::unlock((std::mutex *)(v8 + 24));
}

void sub_19214EF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a23);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a11);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v23);

  _Unwind_Resume(a1);
}

uint64_t Espresso::ANECompilerEngine::bottom_compute_path(Espresso::ANECompilerEngine *this, const Espresso::base_kernel::validate_for_engine_args_t *a2, const Espresso::net *a3)
{
  uint64_t v3 = **((void **)this + 6) + 224 * *((void *)this + 9);
  uint64_t v4 = *(void *)(v3 + 136);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v3 + 144) - v4) >> 3) <= (int)a3) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = *((unsigned int *)this + 16);
  char v7 = (long long *)(v4 + 24 * (int)a3);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else
  {
    long long v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), &__p))
  {
    unsigned int v9 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)a2 + 352, &__p) + 8);
    if (v9 == -1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v9;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_19214F0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,Espresso::blob_numerical_properties>::at(uint64_t a1, void *a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

void Espresso::ANECompilerEngine::bottom_constness_mask(Espresso::ANECompilerEngine *this, unint64_t a2, const Espresso::base_kernel::validate_for_engine_args_t *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  std::vector<BOOL>::reserve((uint64_t)this, a2);
  if (a2)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      long long v8 = (uint64_t *)*((void *)a3 + 6);
      unint64_t v9 = *((void *)a3 + 9);
      uint64_t v10 = *v8;
      unint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v8[1] - *v8) >> 5);
      if (v11 <= v9) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = v10 + 224 * v9;
      uint64_t v13 = *(void *)(v12 + 136);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v12 + 144) - v13) >> 3) <= v7) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v14 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v8 + 3), (void *)(v13 + v6));
      if (v8 + 4 != v14) {
        break;
      }
      char v24 = 0;
      std::vector<BOOL>::push_back((uint64_t *)this, &v24);
LABEL_21:
      ++v7;
      v6 += 24;
      if (a2 == v7) {
        return;
      }
    }
    unint64_t v15 = v14[7];
    if (v11 <= v15) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v16 = v10 + 224 * v15;
    int v17 = (void *)(v16 + 48);
    int v18 = *(char *)(v16 + 71);
    if (v18 < 0)
    {
      if (v17[1] != 13)
      {
LABEL_19:
        BOOL v22 = 0;
LABEL_20:
        BOOL v23 = v22;
        std::vector<BOOL>::push_back((uint64_t *)this, &v23);
        goto LABEL_21;
      }
      int v17 = (void *)*v17;
    }
    else if (v18 != 13)
    {
      goto LABEL_19;
    }
    uint64_t v19 = (void *)*v17;
    uint64_t v20 = *(void *)((char *)v17 + 5);
    BOOL v22 = v19 == (void *)0x6E6F635F64616F6CLL && v20 == 0x746E6174736E6F63;
    goto LABEL_20;
  }
}

void sub_19214F2D0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::push_back(uint64_t *a1, unsigned char *a2)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)a1, v7);
    unint64_t v4 = a1[1];
  }
  a1[1] = v4 + 1;
  uint64_t v8 = *a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)(v8 + 8 * v9) | v10;
  }
  else {
    uint64_t v11 = *(void *)(v8 + 8 * v9) & ~v10;
  }
  *(void *)(v8 + 8 * v9) = v11;
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = 0;
    long long v5 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:ne180100](&v4, a2);
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v4, *(void **)a1, 0, (void *)(*(void *)a1 + 8 * (*(void *)(a1 + 8) >> 6)), *(_DWORD *)(a1 + 8) & 0x3F, *(void *)(a1 + 8));
    uint64_t v3 = *(void **)a1;
    *(void *)a1 = v4;
    *(_OWORD *)(a1 + 8) = v5;
    if (v3) {
      operator delete(v3);
    }
  }
}

void sub_19214F424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *result, void *a2, int a3, void *a4, int a5, uint64_t a6)
{
  unint64_t v6 = result[1];
  unint64_t v7 = v6 + a6;
  result[1] = v6 + a6;
  if (v6)
  {
    unint64_t v8 = v7 - 1;
    if (((v7 - 1) ^ (v6 - 1)) < 0x40) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v8 = v7 - 1;
  }
  unint64_t v9 = v8 >> 6;
  if (v7 >= 0x41) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  *(void *)(*result + 8 * v10) = 0;
LABEL_9:
  if (a2 != a4 || a3 != a5)
  {
    int v11 = v6 & 0x3F;
    uint64_t v12 = (uint64_t *)(*result + 8 * (v6 >> 6));
    do
    {
      uint64_t v13 = 1 << v11;
      if ((*a2 >> a3)) {
        uint64_t v14 = *v12 | v13;
      }
      else {
        uint64_t v14 = *v12 & ~v13;
      }
      *uint64_t v12 = v14;
      a2 += a3 == 63;
      if (a3 == 63) {
        a3 = 0;
      }
      else {
        ++a3;
      }
      v12 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
    }
    while (a2 != a4 || a3 != a5);
  }
  return result;
}

void anonymous namespace'::call_anec_validate_for_pool<Espresso::pool3d_params_t>(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, _DWORD *a5, uint64_t a6)
{
  v63[2] = *MEMORY[0x1E4F143B8];
  if (a4 < 8 && ((0x97u >> a4) & 1) != 0)
  {
    int v11 = off_1E5747950[a4];
    ANECTensorDescInitialize();
    uint64_t v12 = *(void *)(a3 + 3);
    *(void *)&long long v13 = (int)v12;
    *((void *)&v13 + 1) = SHIDWORD(v12);
    uint64_t v14 = (int)a3[2];
    long long v61 = v13;
    long long v59 = v11;
    uint64_t v62 = v14;
    *(void *)&long long v13 = (int)*(void *)a3;
    *((void *)&v13 + 1) = (int)HIDWORD(*(void *)a3);
    long long v60 = v13;
    ANECPoolLayerDescInitialize();
    unint64_t v15 = v49[0];
    uint64_t v16 = *(void *)v49[0];
    unsigned int v17 = *(_DWORD *)a6;
    int v18 = @"Zero";
    if (*(_DWORD *)a6 == 1) {
      int v18 = @"Negative";
    }
    uint64_t v19 = *(int *)(a6 + 12);
    uint64_t v20 = *(void *)(a6 + 4);
    *(void *)&long long v21 = (int)v20;
    *((void *)&v21 + 1) = SHIDWORD(v20);
    long long v50 = v21;
    v49[4] = v18;
    uint64_t v51 = v19;
    int v22 = v15[2];
    uint64_t v52 = v16;
    int v53 = v22;
    int32x2_t v23 = vrev64_s32(v48);
    if (v46
      || ((v24.i64[0] = v45,
           v24.u64[1] = (unint64_t)v23,
           (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_192DCA330, (int8x16_t)vceqzq_s32(v24))) & 0xF) == 0)
        ? (BOOL v25 = v47 == 0)
        : (BOOL v25 = 0),
          !v25))
    {
      uint64_t v54 = v45;
      int v55 = v46;
      int v56 = v47;
      int32x2_t v57 = v23;
    }
    if (!v17) {
      BOOL v58 = *(_DWORD *)(a6 + 28) != 0;
    }
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v26 = ANECValidatePoolLayer();
    if (v26)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECPoolLayerDescAlternate>((uint64_t)v42, v44, v43);
      std::to_string(&v39, v26);
      BOOL v27 = std::string::insert(&v39, 0, "pool_kernel: ANECValidatePoolLayer failed with status ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      int v29 = std::string::append(&v40, ". ");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)__p, (uint64_t)v42);
      if ((v38 & 0x80u) == 0) {
        int v31 = __p;
      }
      else {
        int v31 = (void **)__p[0];
      }
      if ((v38 & 0x80u) == 0) {
        std::string::size_type v32 = v38;
      }
      else {
        std::string::size_type v32 = (std::string::size_type)__p[1];
      }
      uint64_t v33 = std::string::append(&v41, (const std::string::value_type *)v31, v32);
      std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
      v63[0] = v33->__r_.__value_.__l.__size_;
      *(void *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
      char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 23) = *(void *)((char *)v63 + 7);
      uint64_t v36 = v63[0];
      *(void *)(a1 + 8) = v34;
      *(void *)(a1 + 16) = v36;
      *(unsigned char *)(a1 + 31) = v35;
      if ((char)v38 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v42);
    }
    else
    {
      *(unsigned char *)a1 = 1;
      std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 8), "Success");
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    unint64_t v7 = (void *)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(v7, "pool_kernel: invalid compute path for input");
  }
}

void sub_19214F894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::get_anec_final_strides<Espresso::pool3d_params_t>(char *a1, _DWORD *a2, int a3, int a4, _DWORD *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  int v8 = a2[5];
  if (a2[14])
  {
    int v9 = a2[4];
    a4 = a2[5];
  }
  else
  {
    int v10 = a2[6];
    BOOL v12 = v8 == a4 && a2[4] == a4 && v10 == a3;
    int v9 = a4;
    if (!v12)
    {
      __src[0] = a2[4];
      __src[1] = v8;
      __src[2] = v10;
      std::vector<int>::__assign_with_size[abi:ne180100]<int const*,int const*>(a1, (char *)__src, (uint64_t)&v41, 3uLL);
      return;
    }
  }
  int v13 = a5[4];
  if (a4 > 2 && a5[3] == 1) {
    int v15 = 1;
  }
  else {
    int v15 = a4;
  }
  uint64_t v16 = operator new(4uLL);
  if (v9 > 2 && v13 == 1) {
    int v18 = 1;
  }
  else {
    int v18 = v9;
  }
  *uint64_t v16 = v18;
  *(void *)a1 = v16;
  *((void *)a1 + 1) = v16 + 1;
  *((void *)a1 + 2) = v16 + 1;
  uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(2uLL);
  uint64_t v20 = *(char **)a1;
  long long v21 = (char *)*((void *)a1 + 1);
  *((_DWORD *)v19 + 1) = v15;
  int v22 = v19 + 4;
  int32x4_t v24 = &v19[4 * v23];
  BOOL v25 = v19 + 8;
  while (v21 != v20)
  {
    int v26 = *((_DWORD *)v21 - 1);
    v21 -= 4;
    *((_DWORD *)v22 - 1) = v26;
    v22 -= 4;
  }
  *(void *)a1 = v22;
  *((void *)a1 + 1) = v25;
  *((void *)a1 + 2) = v24;
  if (v20)
  {
    operator delete(v20);
    int32x4_t v24 = (char *)*((void *)a1 + 2);
  }
  *((void *)a1 + 1) = v25;
  if ((int)a2[6] > 2 && a5[2] == 1) {
    int v28 = 1;
  }
  else {
    int v28 = a2[6];
  }
  if (v25 >= v24)
  {
    long long v30 = *(char **)a1;
    uint64_t v31 = (uint64_t)&v25[-*(void *)a1] >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v33 = v24 - v30;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    BOOL v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v34) {
      unint64_t v35 = v32;
    }
    if (v35)
    {
      unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
      long long v30 = *(char **)a1;
      BOOL v25 = (char *)*((void *)a1 + 1);
    }
    else
    {
      uint64_t v36 = 0;
    }
    long long v37 = (int *)(v35 + 4 * v31);
    unint64_t v38 = v35 + 4 * v36;
    int *v37 = v28;
    int v29 = (char *)(v37 + 1);
    while (v25 != v30)
    {
      int v39 = *((_DWORD *)v25 - 1);
      v25 -= 4;
      *--long long v37 = v39;
    }
    *(void *)a1 = v37;
    *((void *)a1 + 1) = v29;
    *((void *)a1 + 2) = v38;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *((_DWORD *)v19 + 2) = v28;
    int v29 = v19 + 12;
  }
  *((void *)a1 + 1) = v29;
}

void sub_19214FB3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__CFString *anonymous namespace'::get_anec_pool_type(unsigned int a1)
{
  if (a1 >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "pool3d_kernel: unsupported pool type");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return off_1E5747990[a1];
}

{
  std::runtime_error *exception;

  if (a1 >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "pool_kernel: unsupported pool type");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return off_1E5747990[a1];
}

void sub_19214FBC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int *anonymous namespace'::get_anec_final_pad<Espresso::pool3d_params_t>(unsigned int *result, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v4 = a3[3];
  int v5 = a3[4];
  int v6 = a3[2];
  int v7 = a4[3];
  int v8 = a4[4];
  int v9 = a4[2];
  int v11 = *(_DWORD *)(a2 + 20);
  int v10 = *(_DWORD *)(a2 + 24);
  int v12 = *(_DWORD *)(a2 + 4);
  int v13 = *(_DWORD *)(a2 + 8);
  int v14 = *(__int16 *)(a2 + 36);
  int v15 = *(unsigned __int16 *)(a2 + 36);
  int v17 = *(_DWORD *)(a2 + 12);
  int v16 = *(_DWORD *)(a2 + 16);
  switch(v14)
  {
    case 4:
LABEL_4:
      unsigned int v18 = (v11 * (v7 - 1) - v4 + v13) & ~((v11 * (v7 - 1) - v4 + v13) >> 31);
      unsigned int v19 = (v16 * (v8 - 1) - v5 + v12) & ~((v16 * (v8 - 1) - v5 + v12) >> 31);
      unsigned int v20 = (v10 * (v9 - 1) - v6 + v17) & ~((v10 * (v9 - 1) - v6 + v17) >> 31);
      unsigned int v21 = v19 >> 1;
      unsigned int v22 = v19 - (v19 >> 1);
      unsigned int v23 = v18 >> 1;
      unsigned int v24 = v18 - (v18 >> 1);
      unsigned int v25 = v20 >> 1;
      unsigned int v26 = v20 - (v20 >> 1);
      if (v15 == 1) {
        unsigned int v27 = v21;
      }
      else {
        unsigned int v27 = v22;
      }
      if (v15 == 1)
      {
        unsigned int v28 = v23;
      }
      else
      {
        unsigned int v22 = v21;
        unsigned int v28 = v24;
      }
      if (v15 == 1) {
        unsigned int v29 = v24;
      }
      else {
        unsigned int v29 = v23;
      }
      if (v15 == 1) {
        unsigned int v30 = v26;
      }
      else {
        unsigned int v30 = v25;
      }
      if (v15 == 1) {
        unsigned int v31 = v25;
      }
      else {
        unsigned int v31 = v26;
      }
      break;
    case 2:
      unsigned int v27 = 0;
      unsigned int v22 = 0;
      unsigned int v28 = 0;
      unsigned int v29 = 0;
      unsigned int v30 = 0;
      unsigned int v31 = 0;
      break;
    case 1:
      goto LABEL_4;
    default:
      unsigned int v27 = *(__int16 *)(a2 + 44);
      unsigned int v22 = *(__int16 *)(a2 + 46);
      unsigned int v28 = *(__int16 *)(a2 + 48);
      unsigned int v29 = *(__int16 *)(a2 + 50);
      unsigned int v31 = *(__int16 *)(a2 + 52);
      unsigned int v30 = *(__int16 *)(a2 + 54);
      break;
  }
  *double result = v27;
  result[1] = v22;
  result[2] = v28;
  result[3] = v29;
  result[4] = v30;
  result[5] = v31;
  if (v15 == 3 && *(_DWORD *)(a2 + 32) == 2)
  {
    result[1] = v16 * (v8 - 1) - v5 + v12;
    result[3] = v11 * (v7 - 1) - v4 + v13;
    result[4] = v10 * (v9 - 1) - v6 + v17;
  }
  return result;
}

__CFString *spatial_argmax_valid_only_after_transpose(void *a1, _DWORD *a2, void *a3, int a4, unsigned char *a5)
{
  int v9 = a1;
  int v10 = a3;
  int v12 = v10;
  *a5 = 1;
  if (v10 != @"Width")
  {
    if (v10 == @"Height")
    {
      Espresso::ANECompilerEngine::is_mix_e(v9, v11);
      unsigned int v13 = a2[3];
      if (v13 >= 0x10)
      {
        if (v13 >= 0x801) {
          *a5 = 0;
        }
        unsigned int v14 = a2[1];
        int v15 = @"Height";
        if (v14 < 0x10) {
          goto LABEL_17;
        }
LABEL_16:
        *a5 = 0;
        goto LABEL_17;
      }
    }
LABEL_15:
    int v15 = 0;
    goto LABEL_16;
  }
  Espresso::ANECompilerEngine::is_mix_e(v9, v11);
  unint64_t v16 = 7;
  if (((a4 - 2) & 0xFFFFFFFD) == 0) {
    unint64_t v16 = 15;
  }
  unint64_t v17 = (int)a2[4];
  if (v16 >= v17) {
    goto LABEL_15;
  }
  if (v17 >= 0x801) {
    *a5 = 0;
  }
  unint64_t v18 = (int)a2[1];
  int v15 = @"Width";
  if (v16 < v18) {
    goto LABEL_16;
  }
LABEL_17:

  return v15;
}

void sub_19214FE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id get_reduce_axes(uint64_t a1, unsigned int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_60;
  }
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6 >= 0) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v8 = v6 - v7;
  if (v8 == -1) {
    int v9 = 1;
  }
  else {
    int v9 = *(_DWORD *)(a1 + 8);
  }
  if (v8 == -2) {
    int v9 = 2;
  }
  if (v8 == -3) {
    int v9 = 4;
  }
  int v5 = v8 == -4 ? 8 : v9;
  if (v8 == -5)
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
LABEL_17:
    if (a2 > 5) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    if (((a2 == 5) & a3) != 0) {
      int v11 = @"Batch";
    }
    else {
      int v11 = @"Depth";
    }
  }
  else
  {
LABEL_60:
    id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    id v10 = v12;
    switch(v5)
    {
      case 1:
        if (a2 > 5) {
          goto LABEL_56;
        }
        int v11 = @"Width";
        break;
      case 2:
        if (a2 <= 5) {
          goto LABEL_40;
        }
        goto LABEL_56;
      case 3:
        if (a2 > 5) {
          goto LABEL_56;
        }
        [v12 addObject:@"Width"];
LABEL_40:
        int v11 = @"Height";
        break;
      case 4:
        BOOL v16 = a2 == 5;
        if (a2 > 5) {
          goto LABEL_56;
        }
        goto LABEL_43;
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        goto LABEL_53;
      case 7:
        if (a2 > 5) {
          goto LABEL_56;
        }
        [v12 addObject:@"Width"];
        [v10 addObject:@"Height"];
        BOOL v16 = a2 == 5;
LABEL_43:
        BOOL v17 = v16;
        unint64_t v18 = @"Channel";
        unsigned int v19 = @"Depth";
        goto LABEL_49;
      case 8:
        if (a2 > 5) {
          goto LABEL_56;
        }
        BOOL v17 = a2 == 5;
        unint64_t v18 = @"Batch";
        unsigned int v19 = @"Channel";
LABEL_49:
        if ((v17 & a3) != 0) {
          int v11 = v19;
        }
        else {
          int v11 = v18;
        }
        break;
      case 16:
        goto LABEL_17;
      default:
        if (v5 != 31) {
          goto LABEL_53;
        }
        if (a2 >= 6) {
LABEL_56:
        }
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
        [v12 addObject:@"Width"];
        [v10 addObject:@"Height"];
        int v13 = (a2 == 5) & a3;
        if (v13) {
          unsigned int v14 = @"Depth";
        }
        else {
          unsigned int v14 = @"Channel";
        }
        [v10 addObject:v14];
        if (v13) {
          int v15 = @"Channel";
        }
        else {
          int v15 = @"Batch";
        }
        [v10 addObject:v15];
        if (v13) {
          int v11 = @"Batch";
        }
        else {
          int v11 = @"Depth";
        }
        break;
    }
  }
  [v10 addObject:v11];
LABEL_53:
  return v10;
}

void sub_1921500C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1,std::allocator<E5AOT::Operators::E5ML_ios16::Call::Make(MIL::MILContext &,std::string)::$_1>,std::string ()(MIL::IROperation const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EE379D00;
}

void *std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::generic_split_nd_kernel> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(Espresso::single_match_state<Espresso::ANECompilerEngine::inner_product_kernel> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::vector<std::shared_ptr<MIL::IROperation>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    uint64_t v2 = result;
    if (a2 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void Espresso::optimize_network(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  void (**v57)(void *__return_ptr);
  uint64_t v58;
  std::string *v59;
  uint64_t *v60;
  void *v61;
  unsigned char __str[32];
  uint64_t v64;
  long long v65;
  uint64_t v66;
  std::string v67;
  std::string v68;
  char v69;
  char **v70;
  char *v71[2];
  std::string *v72[3];
  std::string *v73[3];
  uint64_t v74;
  std::__shared_weak_count *v75;
  long long v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void v79[3];
  std::string *v80[3];
  std::string *v81[3];
  void v82[2];
  uint64_t *v83;
  void *v84[3];
  std::__shared_weak_count *v85;
  uint64_t *v86;
  uint64_t *v87;
  void *v88;
  std::__shared_weak_count *v89;
  long long *v90[2];

  int32x2_t v57 = a4;
  unsigned int v7 = operator new(0xE0uLL);
  v7[1] = 0;
  v7[2] = 0;
  *unsigned int v7 = &unk_1EE386900;
  long long v61 = v7;
  uint64_t v8 = (uint64_t)(v7 + 3);
  uint64_t v9 = *a1;
  id v10 = (std::__shared_weak_count *)a1[1];
  *(void *)std::string __str = v9;
  *(void *)&__str[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v68.__r_.__value_.__l.__data_ = 0uLL;
  Espresso::sequential_builder::sequential_builder((uint64_t)(v7 + 3), (uint64_t *)__str, a2, (uint64_t *)&v68);
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(&v88, *(void *)a3, *(std::__shared_weak_count **)(a3 + 8));
  _OWORD v84[2] = v88;
  uint64_t v85 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ((void (**)(uint64_t **__return_ptr))v57)[2](&v86);
  if (v85) {
    nitro::nitro_function::nitro_function(v85);
  }
  v84[0] = 0;
  v84[1] = 0;
  uint64_t v83 = (uint64_t *)v84;
  LODWORD(v90[0]) = 0;
  int v11 = *(const Espresso::net **)a3;
  BOOL v58 = v8;
  if (*(void *)(*(void *)a3 + 40) == *(void *)(*(void *)a3 + 32))
  {
    uint64_t v45 = v61;
    goto LABEL_87;
  }
  unint64_t v12 = 0;
  long long v59 = (std::string *)(v61 + 10);
  do
  {
    int v13 = v84[0];
    if (!v84[0]) {
      goto LABEL_16;
    }
    while (1)
    {
      int v14 = *((_DWORD *)v13 + 7);
      if ((int)v12 >= v14) {
        break;
      }
LABEL_15:
      int v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_16;
      }
    }
    if (v14 < (int)v12)
    {
      ++v13;
      goto LABEL_15;
    }
    if (*((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v83, v12, v90)+ 32))goto LABEL_82; {
    int v11 = *(const Espresso::net **)a3;
    }
LABEL_16:
    uint64_t v15 = *((void *)v11 + 4);
    uint64_t v16 = *(void *)(v15 + 16 * (int)v12);
    if (!v16) {
      goto LABEL_82;
    }
    BOOL v17 = v86;
    long long v60 = v87;
    if (v86 == v87) {
      goto LABEL_66;
    }
    char v18 = 0;
    while (2)
    {
      uint64_t v20 = *v17;
      unsigned int v19 = (std::__shared_weak_count *)v17[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t))(*(void *)v20 + 16))(&v68, v20, v12);
      std::string::size_type v21 = v68.__r_.__value_.__r.__words[0];
      if (v68.__r_.__value_.__r.__words[0])
      {
        unsigned int v22 = *(void **)(v68.__r_.__value_.__r.__words[0] + 16);
        std::string::size_type v23 = v68.__r_.__value_.__r.__words[0] + 24;
        if (v22 != (void *)(v68.__r_.__value_.__r.__words[0] + 24))
        {
          do
          {
            *(void *)std::string __str = *(void *)((char *)v22 + 28);
            *((unsigned char *)std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v83, *(int *)__str, __str)+ 32) = 1;
            unsigned int v24 = (void *)v22[1];
            if (v24)
            {
              do
              {
                unsigned int v25 = v24;
                unsigned int v24 = (void *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                unsigned int v25 = (void *)v22[2];
                BOOL v26 = *v25 == (void)v22;
                unsigned int v22 = v25;
              }
              while (!v26);
            }
            unsigned int v22 = v25;
          }
          while (v25 != (void *)v23);
        }
        for (unint64_t i = v84[0]; i; unint64_t i = (void *)*i)
        {
          int v28 = *((_DWORD *)i + 7);
          if ((int)v12 >= v28)
          {
            if (v28 >= (int)v12) {
              goto LABEL_48;
            }
            ++i;
          }
        }
        unsigned int v29 = (uint64_t *)(*(void *)(*(void *)a3 + 32) + 16 * (int)v12);
        uint64_t v31 = *v29;
        unsigned int v30 = (std::__shared_weak_count *)v29[1];
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(char *)(v31 + 223) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v31 + 200), *(void *)(v31 + 208));
        }
        else
        {
          *(_OWORD *)std::string __str = *(_OWORD *)(v31 + 200);
          *(void *)&__str[16] = *(void *)(v31 + 216);
        }
        std::string::operator=(v59, (const std::string *)__str);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        unint64_t v32 = *(std::__shared_weak_count **)(v31 + 72);
        v82[0] = *(void *)(v31 + 64);
        v82[1] = v32;
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = *(void *)a3 + 56;
        uint64_t v70 = (char **)(int)v12;
        BOOL v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33, (int)v12, &v70);
        memset(v81, 0, sizeof(v81));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v81, v34[3], v34[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34[4] - v34[3]) >> 3));
        uint64_t v35 = *(void *)a3 + 96;
        v67.__r_.__value_.__r.__words[0] = (int)v12;
        uint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v35, (int)v12, &v67);
        memset(v80, 0, sizeof(v80));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v80, v36[3], v36[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36[4] - v36[3]) >> 3));
        uint64_t v37 = v31 + 40;
        uint64_t v38 = v31 + 16;
        uint64_t v8 = v58;
        Espresso::sequential_builder::add_kernel(v58, v82, v37, v38, v81, v80);
        *(void *)std::string __str = v80;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        *(void *)std::string __str = v81;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
        if (v32) {
          nitro::nitro_function::nitro_function(v32);
        }
        if (*((char *)v61 + 103) < 0)
        {
          *(unsigned char *)v61[10] = 0;
          v61[11] = 0;
          if (v30) {
LABEL_47:
          }
            nitro::nitro_function::nitro_function(v30);
        }
        else
        {
          *((unsigned char *)v61 + 80) = 0;
          *((unsigned char *)v61 + 103) = 0;
          if (v30) {
            goto LABEL_47;
          }
        }
LABEL_48:
        int32x4_t v77 = v8;
        uint64_t v78 = (std::__shared_weak_count *)v61;
        atomic_fetch_add_explicit(v61 + 1, 1uLL, memory_order_relaxed);
        uint64_t v76 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        if (v68.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v68.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t *, long long *))(*(void *)v20 + 24))(v79, v20, &v77, &v76);
        std::__tree<int>::destroy((void *)v79[1]);
        if (*((void *)&v76 + 1)) {
          nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v76 + 1));
        }
        if (v78) {
          nitro::nitro_function::nitro_function(v78);
        }
        char v18 = 1;
      }
      if (v68.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v68.__r_.__value_.__l.__size_);
      }
      if (v19) {
        nitro::nitro_function::nitro_function(v19);
      }
      if (!v21)
      {
        v17 += 2;
        if (v17 != v60) {
          continue;
        }
      }
      break;
    }
    if ((v18 & 1) == 0)
    {
      uint64_t v15 = *(void *)(*(void *)a3 + 32);
      uint64_t v16 = *(void *)(v15 + 16 * (int)v12);
LABEL_66:
      int v39 = *(std::__shared_weak_count **)(v15 + 16 * (int)v12 + 8);
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v16 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)(v16 + 200), *(void *)(v16 + 208));
      }
      else
      {
        *(_OWORD *)std::string __str = *(_OWORD *)(v16 + 200);
        *(void *)&__str[16] = *(void *)(v16 + 216);
      }
      std::string::operator=(v59, (const std::string *)__str);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      std::string v40 = *(std::__shared_weak_count **)(v16 + 72);
      int32x4_t v74 = *(void *)(v16 + 64);
      uint64_t v75 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = *(void *)a3 + 56;
      v68.__r_.__value_.__r.__words[0] = (int)v12;
      int v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v41, (int)v12, &v68);
      memset(v73, 0, sizeof(v73));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v73, v42[3], v42[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[4] - v42[3]) >> 3));
      uint64_t v43 = *(void *)a3 + 96;
      uint64_t v70 = (char **)(int)v12;
      uint64_t v44 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v43, (int)v12, &v70);
      memset(v72, 0, sizeof(v72));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v72, v44[3], v44[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44[4] - v44[3]) >> 3));
      Espresso::sequential_builder::add_kernel(v8, &v74, v16 + 40, v16 + 16, v73, v72);
      *(void *)std::string __str = v72;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      *(void *)std::string __str = v73;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
      if (v75) {
        nitro::nitro_function::nitro_function(v75);
      }
      if (*((char *)v61 + 103) < 0)
      {
        *(unsigned char *)v61[10] = 0;
        v61[11] = 0;
        if (v39) {
LABEL_81:
        }
          nitro::nitro_function::nitro_function(v39);
      }
      else
      {
        *((unsigned char *)v61 + 80) = 0;
        *((unsigned char *)v61 + 103) = 0;
        if (v39) {
          goto LABEL_81;
        }
      }
    }
LABEL_82:
    unint64_t v12 = SLODWORD(v90[0]) + 1;
    ++LODWORD(v90[0]);
    int v11 = *(const Espresso::net **)a3;
    uint64_t v45 = v61;
  }
  while (v12 < (uint64_t)(*(void *)(*(void *)a3 + 40) - *(void *)(*(void *)a3 + 32)) >> 4);
LABEL_87:
  v71[0] = 0;
  v71[1] = 0;
  uint64_t v70 = v71;
  int v46 = (void *)*((void *)v11 + 29);
  int v47 = (void *)((char *)v11 + 240);
  if (v46 != (void *)((char *)v11 + 240))
  {
    do
    {
      if (*((char *)v46 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v46[4], v46[5]);
      }
      else {
        std::string v68 = *(std::string *)(v46 + 4);
      }
      unint64_t v69 = *((unsigned char *)v46 + 56);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v67, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
      }
      else {
        uint64_t v67 = v68;
      }
      uint64_t v48 = *(void *)a3 + 136;
      v90[0] = (long long *)&v67;
      if (*((void *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v48, (unsigned __int8 *)&v67, v90)+ 5))
      {
        uint64_t v49 = *(void *)a3 + 136;
        v90[0] = (long long *)&v67;
        long long v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (unsigned __int8 *)&v67, v90);
        Espresso::abstract_blob_container::shape(__str, *((void *)v50 + 5));
        v90[0] = (long long *)&v67;
        uint64_t v51 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v70, &v67, v90);
        long long v52 = *(_OWORD *)&__str[16];
        *(_OWORD *)(v51 + 56) = *(_OWORD *)__str;
        *(_OWORD *)(v51 + 72) = v52;
        *((void *)v51 + 11) = v64;
        int v53 = (void *)*((void *)v51 + 12);
        if (v53)
        {
          *((void *)v51 + 13) = v53;
          operator delete(v53);
          *((void *)v51 + 12) = 0;
          *((void *)v51 + 13) = 0;
          *((void *)v51 + 14) = 0;
        }
        *((_OWORD *)v51 + 6) = v65;
        *((void *)v51 + 14) = v66;
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      uint64_t v54 = (void *)v46[1];
      if (v54)
      {
        do
        {
          int v55 = v54;
          uint64_t v54 = (void *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          int v55 = (void *)v46[2];
          BOOL v26 = *v55 == (void)v46;
          int v46 = v55;
        }
        while (!v26);
      }
      int v46 = v55;
    }
    while (v55 != v47);
    uint64_t v45 = v61;
    int v11 = *(const Espresso::net **)a3;
  }
  Espresso::net::copy_parameters_from((Espresso::net *)v45[13], v11);
  Espresso::sequential_builder::build_from_shapes(v58, (uint64_t)&v70, a5);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v70, v71[0]);
  std::__tree<int>::destroy(v84[0]);
  *(void *)std::string __str = &v86;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  if (v89) {
    nitro::nitro_function::nitro_function(v89);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v61);
}

void sub_192150AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  long long v59 = *(std::__shared_weak_count **)(v57 - 144);
  if (v59) {
    nitro::nitro_function::nitro_function(v59);
  }
  if (v56) {
    nitro::nitro_function::nitro_function(v56);
  }
  nitro::nitro_function::nitro_function(a15);

  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_layer_to_network(uint64_t a1, void *a2, const std::string *a3, const std::string *a4, const std::string *a5, std::string **a6, std::string **a7)
{
  int v13 = (char *)operator new(0xF8uLL);
  *((void *)v13 + 1) = 0;
  *(void *)int v13 = &unk_1EE389DF0;
  *((void *)v13 + 2) = 0;
  *((void *)v13 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 161) = 0u;
  *((_OWORD *)v13 + 13) = 0u;
  *((_OWORD *)v13 + 14) = 0u;
  *((void *)v13 + 30) = 0;
  *((_DWORD *)v13 + 9) = *(_DWORD *)(a1 + 128);
  uint64_t v14 = *(void *)(*a2 + 8);
  if (!v14) {
    uint64_t v14 = *(void *)(a1 + 112);
  }
  *((_DWORD *)v13 + 8) = (***(uint64_t (****)(void))(v14 + 8))(*(void *)(v14 + 8));
  std::string::operator=((std::string *)(v13 + 64), a3);
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v17 = (std::__shared_weak_count *)*((void *)v13 + 12);
  *((void *)v13 + 11) = v16;
  *((void *)v13 + 12) = v15;
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  std::string::operator=((std::string *)(v13 + 40), a4);
  std::string::operator=((std::string *)(v13 + 224), a5);
  char v18 = *(uint64_t **)(a1 + 80);
  unsigned int v19 = (void *)v18[5];
  unint64_t v20 = v18[6];
  if ((unint64_t)v19 >= v20)
  {
    uint64_t v23 = v18[4];
    uint64_t v24 = ((uint64_t)v19 - v23) >> 4;
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v20 - v23;
    if (v26 >> 3 > v25) {
      unint64_t v25 = v26 >> 3;
    }
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v25;
    }
    v36[4] = (unint64_t)(v18 + 6);
    int v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v27);
    *(void *)&long long v29 = v13 + 24;
    *((void *)&v29 + 1) = v13;
    unsigned int v30 = &v28[16 * v24];
    v36[0] = (unint64_t)v28;
    v36[1] = (unint64_t)v30;
    v36[3] = (unint64_t)&v28[16 * v31];
    *(_OWORD *)unsigned int v30 = v29;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    v36[2] = (unint64_t)(v30 + 16);
    std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(v18 + 4, v36);
    std::string::size_type v21 = (void *)v18[5];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v36);
    unsigned int v22 = *(uint64_t **)(a1 + 80);
  }
  else
  {
    *unsigned int v19 = v13 + 24;
    v19[1] = v13;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    std::string::size_type v21 = v19 + 2;
    v18[5] = (uint64_t)(v19 + 2);
    unsigned int v22 = v18;
  }
  v18[5] = (uint64_t)v21;
  v36[0] = (((v22[5] - v22[4]) << 28) - 0x100000000) >> 32;
  unint64_t v32 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(v22 + 7), v36[0], v36);
  uint64_t v33 = *(void *)(a1 + 80);
  v36[0] = (((*(void *)(v33 + 40) - *(void *)(v33 + 32)) << 28) - 0x100000000) >> 32;
  BOOL v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v33 + 96, v36[0], v36);
  if (v32 + 3 != a6) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v32 + 3), *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  }
  if (v34 + 3 != a7) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v34 + 3), *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a7[1] - (char *)*a7) >> 3));
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v13);
}

void sub_192150FE0(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<Espresso::layer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::layer>>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::layer>>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>,std::reverse_iterator<std::shared_ptr<Espresso::layer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t Espresso::graph_optimization_rule_simple::match_at_layer@<X0>(Espresso::graph_optimization_rule_simple *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *uint64_t v6 = &unk_1EE388E30;
  void v6[3] = &unk_1EE365EC8;
  v6[4] = 0xFFFFFFFFLL;
  v6[6] = 0;
  v6[5] = v6 + 6;
  v6[10] = 0;
  v6[9] = 0;
  v6[7] = 0;
  v6[8] = v6 + 9;
  *a3 = v6 + 3;
  a3[1] = v6;
  return (*(uint64_t (**)(Espresso::graph_optimization_rule_simple *, uint64_t, void *))(*(void *)this
                                                                                                  + 40))(this, a2, a3);
}

void sub_192151164(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::sequential_builder::add_kernel(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, std::string **a5, std::string **a6)
{
  if (*(unsigned char *)(a1 + 184))
  {
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v12 = (const char *)a3;
    }
    else {
      unint64_t v12 = *(const char **)a3;
    }
    if (*(char *)(a4 + 23) >= 0) {
      int v13 = (const char *)a4;
    }
    else {
      int v13 = *(const char **)a4;
    }
    uint64_t v14 = (const char *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v14 = *(const char **)v14;
    }
    printf("\t[sequential_builder::add_kernel] %s %s dbg: %s\n", v12, v13, v14);
  }

  Espresso::sequential_builder::add_layer_to_network(a1, a2, (const std::string *)a3, (const std::string *)a4, (const std::string *)(a1 + 56), a5, a6);
}

void rule_input_underflow::match(uint64_t a1, int a2, uint64_t *a3)
{
  int v47 = a2;
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "conv");
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  v43[0] = *(void *)(a1 + 24);
  v43[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(&v45, v6, &__p, v43, a2);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = v45;
  if (!v45) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16 * a2);
  id v10 = *(const void **)(v9 + 64);
  if (v10
  {
    int v11 = *(std::__shared_weak_count **)(v9 + 72);
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v11);
    }
    goto LABEL_22;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v8 + 456))(&__p, v8);
  std::string::size_type v12 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (!v12)
  {
LABEL_22:
    unsigned int v19 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
    if (!v19) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v8 + 456))(&v41, v8);
  uint64_t v13 = 0;
  unint64_t v14 = *(int *)(v41 + 8);
  do
  {
    v14 *= *(int *)(v41 + 12 + v13);
    v13 += 4;
  }
  while (v13 != 12);
  unint64_t v15 = 0;
  for (double i = 0.0; ; double i = i + (float)((float)(1.0 / (float)v14) * fabsf(*(float *)(*(void *)(v41 + 24) + 4 * v15++))))
  {
    uint64_t v17 = 0;
    unint64_t v18 = *(int *)(v41 + 8);
    do
    {
      v18 *= *(int *)(v41 + 12 + v17);
      v17 += 4;
    }
    while (v17 != 12);
    if (v18 <= v15) {
      break;
    }
  }
  unint64_t v20 = *(uint64_t **)(a1 + 8);
  uint64_t v22 = *v20;
  std::string::size_type v21 = (std::__shared_weak_count *)v20[1];
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22 + 56, a2, &__p);
  if (v23[4] - v23[3] == 24)
  {
    unint64_t v40 = a2;
    uint64_t v24 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22 + 56, a2, &v40)[3];
    if (*((char *)v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v24, *((void *)v24 + 1));
    }
    else
    {
      long long v25 = *v24;
      __p.__r_.__value_.__r.__words[2] = *((void *)v24 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    }
    unint64_t v27 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 8) + 40), a2, &v47);
    if ((char *)v27[6] - (char *)v27[5] == 4)
    {
      unint64_t v28 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(a1 + 8) + 40), a2, &v47)[5];
      long long v29 = (uint64_t *)(*(void *)(*(void *)(a1 + 24) + 32) + 16 * v28);
      uint64_t v31 = *v29;
      unsigned int v30 = (std::__shared_weak_count *)v29[1];
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v32 = *(const void **)(v31 + 64);
      if (v32)
      {
        if (v33)
        {
          BOOL v34 = *(std::__shared_weak_count **)(v31 + 72);
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (fabsf(*(float *)((*(uint64_t (**)(void *))(*(void *)v33 + 320))(v33) + 4)) < 0.00001)
          {
            unint64_t v40 = v28;
            uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v22 + 56, v28, &v40);
            if (v35[4] - v35[3] != 24)
            {
              int v39 = (std::__shared_weak_count *)a3[1];
              *a3 = 0;
              a3[1] = 0;
              if (v39) {
                nitro::nitro_function::nitro_function(v39);
              }
              if (v34) {
                nitro::nitro_function::nitro_function(v34);
              }
              goto LABEL_52;
            }
            uint64_t v36 = *(void *)(a1 + 24) + 56;
            unint64_t v40 = v28;
            uint64_t v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, v28, &v40);
            std::string::operator=(&__p, (const std::string *)v37[3]);
          }
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
        }
      }
      if (v30) {
        nitro::nitro_function::nitro_function(v30);
      }
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v22 + 240), &__p))
    {
      float v38 = i;
      *(float *)(a1 + 40) = v38;
      if (i <= 0.00390625)
      {
LABEL_54:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_56;
      }
    }
    unsigned int v30 = (std::__shared_weak_count *)a3[1];
    *a3 = 0;
    a3[1] = 0;
LABEL_52:
    if (v30) {
      nitro::nitro_function::nitro_function(v30);
    }
    goto LABEL_54;
  }
  uint64_t v26 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
LABEL_56:
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  unsigned int v19 = v42;
  if (v42) {
LABEL_23:
  }
    nitro::nitro_function::nitro_function(v19);
LABEL_24:
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
}

void sub_19215171C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *Espresso::graph_optimization_rule_status::match_if_type<Espresso::generic_convolution_kernel>(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  int v35 = a5;
  uint64_t v10 = *a4;
  uint64_t v11 = *(void *)(*(void *)(*a4 + 32) + 16 * a5);
  uint64_t result = *(unsigned char **)(v11 + 64);
  if (result
  {
    uint64_t v13 = result;
    uint64_t v14 = *(void *)(v11 + 72);
    if (v14)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      uint64_t v10 = *a4;
    }
    unint64_t v15 = (std::__shared_weak_count *)a4[1];
    v22[0] = v10;
    v22[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::graph_node_t<Espresso::base_kernel>::graph_node_t(&v23, (uint64_t)v22, a5);
    uint64_t v16 = std::__tree<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::graph_node_t<Espresso::base_kernel>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 40), a3, (uint64_t)a3);
    *((_DWORD *)v16 + 14) = v23;
    long long v17 = v24;
    long long v24 = 0uLL;
    unint64_t v18 = (std::__shared_weak_count *)v16[9];
    *((_OWORD *)v16 + 4) = v17;
    if (v18) {
      nitro::nitro_function::nitro_function(v18);
    }
    unsigned int v19 = (void **)(v16 + 10);
    if (*((char *)v16 + 103) < 0) {
      operator delete(*v19);
    }
    v16[12] = v26;
    *(_OWORD *)unsigned int v19 = v25;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    unint64_t v20 = (void **)(v16 + 13);
    if (*((char *)v16 + 127) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)unint64_t v20 = __p;
    v16[15] = v28;
    HIBYTE(v28) = 0;
    LOBYTE(__p) = 0;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 16));
    *((_OWORD *)v16 + 8) = v29;
    v16[18] = v30;
    unsigned int v30 = 0;
    long long v29 = 0uLL;
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v16 + 19));
    *(_OWORD *)(v16 + 19) = v31;
    v16[21] = v32;
    unint64_t v32 = 0;
    long long v31 = 0uLL;
    std::string::size_type v21 = (void **)(v16 + 22);
    if (*((char *)v16 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)std::string::size_type v21 = v33;
    v16[24] = v34;
    HIBYTE(v34) = 0;
    LOBYTE(v33) = 0;
    v36[0] = (void **)&v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    v36[0] = (void **)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    if (*((void *)&v24 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
    }
    if (v15) {
      nitro::nitro_function::nitro_function(v15);
    }
    if (a5 == -1) {
      *(_DWORD *)(a2 + 8) = -1;
    }
    uint64_t result = std::__tree<std::__value_type<int,BOOL>,std::__map_value_compare<int,std::__value_type<int,BOOL>,std::less<int>,true>,std::allocator<std::__value_type<int,BOOL>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a2 + 16), a5, &v35);
    result[32] = 1;
    *a1 = v13;
    a1[1] = v14;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

void sub_192151A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  _Unwind_Resume(exception_object);
}

void *Espresso::reshape_networks_graph_coloring_raw_ptr(void *result, char **a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    uint64_t v5 = result;
    long long v28 = 0u;
    long long v29 = 0u;
    int v30 = 1065353216;
    do
    {
      std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>((uint64_t *)&v28, *(void *)(*(void *)v3 + 16), *(void *)(*(void *)v3 + 16), *(void *)(*(void *)v3 + 24));
      uint64_t v6 = *(unsigned int (****)(void))(*(void *)(*(void *)v3 + 16) + 8);
      if ((**v6)(v6) == 10007)
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = *(uint64_t (****)(void))(*(void *)(*(void *)v3 + 16) + 8);
        BOOL v7 = (**v8)(v8) == 10006;
      }
      for (double i = *(void **)(*(void *)v3 + 152); i; double i = (void *)*i)
      {
        uint64_t v10 = i[5];
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 72);
          if (v11)
          {
            BOOL v12 = !(***(unsigned int (****)(void))(v11 + 8))(*(void *)(v11 + 8))
               || (***(unsigned int (****)(void))(*(void *)(v10 + 72) + 8))(*(void *)(*(void *)(v10 + 72) + 8)) == 100;
            unint64_t v13 = *(void *)(v10 + 72);
            if (*(unsigned char *)(v13 + 44))
            {
              int v14 = !v12 || v7;
              BOOL v15 = *(unsigned char *)(v13 + 124) || v14 == 0;
              if (!v15
                && !std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v28, *((unint64_t *)&v28 + 1), *(void *)(v10 + 72)))
              {
                std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>((uint64_t *)&v28, v13, v13, *(void *)(v10 + 80));
              }
            }
          }
        }
      }
      v3 += 8;
    }
    while (v3 != v2);
    uint64_t v16 = *a2;
    long long v17 = a2[1];
    while (v16 != v17)
    {
      for (j = *(uint64_t **)(*(void *)v16 + 152); j; j = (uint64_t *)*j)
      {
        unsigned int v19 = (unint64_t *)j[5];
        if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,int>>>::find<std::shared_ptr<Espresso::abstract_blob_container>>(v28, *((unint64_t *)&v28 + 1), v19[9]))
        {
          unint64_t v20 = (uint64_t **)(*(void *)v16 + 184);
          v25[0] = (long long *)(j + 2);
          std::string::size_type v21 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, j + 2, v25);
          uint64_t v26 = 0;
          unint64_t v27 = 0;
          (*(void (**)(unint64_t *, char *, uint64_t *))(*v19 + 16))(v19, v21 + 56, &v26);
          if (v27) {
            nitro::nitro_function::nitro_function(v27);
          }
        }
      }
      v16 += 8;
    }
    uint64_t v22 = (void *)v29;
    if ((void)v29)
    {
      int v23 = 0;
      do
      {
        Espresso::reshape_networks_graph_coloring_raw_ptr_only_in_context(v25, v22 + 2, a2);
        long long v24 = v25[1];
        *uint64_t v5 = v25[0];
        v5[1] = v24;
        if (v23) {
          nitro::nitro_function::nitro_function(v23);
        }
        uint64_t v22 = (void *)*v22;
        int v23 = (std::__shared_weak_count *)v24;
      }
      while (v22);
    }
    return (void *)std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)&v28);
  }
  return result;
}

void sub_192151D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table((uint64_t)va);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::IREngine::engine::platform(Espresso::IREngine::engine *this)
{
  return 80000;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::__unordered_map_equal<std::shared_ptr<Espresso::abstract_blob_container>,std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<Espresso::abstract_blob_container>,unsigned long>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        nitro::nitro_function::nitro_function(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_table<std::shared_ptr<Espresso::abstract_context>,std::hash<std::shared_ptr<Espresso::abstract_context>>,std::equal_to<std::shared_ptr<Espresso::abstract_context>>,std::allocator<std::shared_ptr<Espresso::abstract_context>>>::__emplace_unique_key_args<std::shared_ptr<Espresso::abstract_context>,std::shared_ptr<Espresso::abstract_context> const&>(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = a1[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void **)(*a1 + 8 * v4);
    if (v13)
    {
      for (double i = (void *)*v13; i; double i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = a1 + 2;
  long long v17 = operator new(0x20uLL);
  *long long v17 = 0;
  v17[1] = v10;
  v17[2] = a3;
  v17[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v18 = (float)(unint64_t)(a1[3] + 1);
  float v19 = *((float *)a1 + 8);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = a1[1];
    if (*(void *)&prime > v11) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v24 = operator new(8 * *(void *)&prime);
          long long v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void *)*v16;
          if (*v16)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v28) = v16;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*a1 + 8 * v34))
                  {
                    *(void *)(*a1 + 8 * v34) = v27;
                    goto LABEL_57;
                  }
                  void *v27 = *v33;
                  void *v33 = **(void **)(*a1 + 8 * v34);
                  **(void **)(*a1 + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_57:
                unint64_t v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_61;
        }
        float v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v35 = *a1;
  uint64_t v36 = *(void **)(*a1 + 8 * v4);
  if (v36)
  {
    *long long v17 = *v36;
LABEL_74:
    void *v36 = v17;
    goto LABEL_75;
  }
  *long long v17 = *v16;
  *uint64_t v16 = v17;
  *(void *)(v35 + 8 * v4) = v16;
  if (*v17)
  {
    unint64_t v37 = *(void *)(*v17 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v37 >= v11) {
        v37 %= v11;
      }
    }
    else
    {
      v37 &= v11 - 1;
    }
    uint64_t v36 = (void *)(*a1 + 8 * v37);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
}

void sub_19215222C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<Espresso::abstract_blob_container>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::build_from_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Espresso::sequential_builder::build_from_shapes(a1, a2, 0, &v6);
  if (v7) {
    nitro::nitro_function::nitro_function(v7);
  }
  uint64_t v5 = *(void *)(a1 + 88);
  *a3 = *(void *)(a1 + 80);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
}

void Espresso::sequential_builder::build_from_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint8x8_t v31 = v5;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  if (v8 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      unint64_t v11 = *(std::__shared_weak_count **)(v8 + v9 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = *(void *)(*(void *)(v6 + 32) + v9);
      unint64_t v13 = (void *)(v12 + 40);
      int v14 = *(char *)(v12 + 63);
      if (v14 < 0)
      {
        if (*(void *)(v12 + 48) != 13) {
          goto LABEL_16;
        }
        unint64_t v13 = (void *)*v13;
      }
      else if (v14 != 13)
      {
        goto LABEL_16;
      }
      unint64_t v15 = (void *)*v13;
      uint64_t v16 = *(void *)((char *)v13 + 5);
      BOOL v17 = v15 == (void *)0x6E6F635F64616F6CLL && v16 == 0x746E6174736E6F63;
      if (v17)
      {
        v33[0] = v10;
        float v18 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6 + 56, v10, v33);
        std::vector<std::string>::__clear[abi:ne180100](v18 + 3);
        if (!v11) {
          goto LABEL_18;
        }
LABEL_17:
        nitro::nitro_function::nitro_function(v11);
        goto LABEL_18;
      }
LABEL_16:
      if (v11) {
        goto LABEL_17;
      }
LABEL_18:
      v9 += 16;
      ++v10;
    }
    while (v8 + v9 != v7);
  }
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  Espresso::net::_tag_inputs_and_outputs(*(Espresso::net **)(a1 + 80));
  uint64_t v19 = *(void *)(a1 + 80);
  BOOL v20 = *(void **)(v19 + 232);
  if (v20 != (void *)(v19 + 240))
  {
    do
    {
      unint64_t v21 = v20 + 4;
      if ((void *)(a2 + 8) == std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a2, v20 + 4))
      {
        if (*((char *)v20 + 55) < 0) {
          unint64_t v21 = (void *)*v21;
        }
        v33[0] = v21;
        Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("shape of input %s missed", v33);
      }
      unint64_t v22 = (void *)v20[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          unint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (void *)v20[2];
          BOOL v17 = *v23 == (void)v20;
          BOOL v20 = v23;
        }
        while (!v17);
      }
      BOOL v20 = v23;
    }
    while (v23 != (void *)(v19 + 240));
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 88);
  v32[0] = v19;
  v32[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v32, a2, (uint64_t)v33);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  long long v25 = *(Espresso **)(a1 + 80);
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 88);
  if (a3)
  {
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive(v25, (Espresso::net *)v33, 0, 1);
  }
  else
  {
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::shape_network_recursive(v25, (Espresso::net *)v33, 0, 0);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v27 = *(void *)(a1 + 88);
  *a4 = *(void *)(a1 + 80);
  a4[1] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v34, v34[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v33, (char *)v33[1]);
}

void sub_192152554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  Espresso::network_shape::~network_shape((char **)va);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso26optimize_network_with_ruleI20rule_input_underflowEENSt3__110shared_ptrINS_3netEEES5__block_invoke(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v4 = operator new(0x48uLL);
  uint64_t v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1EE380540;
  uint64_t v6 = v4 + 3;
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, v8);
    nitro::nitro_function::nitro_function(v8);
    v5[3] = &unk_1EE3218E8;
    *((_DWORD *)v5 + 16) = 1065353216;
    nitro::nitro_function::nitro_function(v8);
  }
  else
  {
    Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(v4 + 3, v7, 0);
    v5[3] = &unk_1EE3218E8;
    *((_DWORD *)v5 + 16) = 1065353216;
  }
  uint64_t v9 = v19;
  if (v19 >= (unint64_t)v20)
  {
    unint64_t v12 = (v19 >> 4) + 1;
    if (v12 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    if (v20 >> 3 > v12) {
      unint64_t v12 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v21[4] = (void **)&v20;
    int v14 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v13);
    *(void *)&long long v15 = v6;
    *((void *)&v15 + 1) = v5;
    uint64_t v16 = &v14[2 * (v19 >> 4)];
    v21[0] = v14;
    v21[1] = v16;
    v21[3] = &v14[2 * v17];
    *(_OWORD *)uint64_t v16 = v15;
    v21[2] = v16 + 2;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v18, v21);
    uint64_t v11 = v19;
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v21);
    uint64_t v19 = v11;
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
    *(void *)uint64_t v19 = v6;
    *(void *)(v9 + 8) = v5;
    uint64_t v11 = v9 + 16;
    uint64_t v19 = v9 + 16;
  }
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  v21[0] = (void **)&v18;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100](v21);
}

void sub_19215276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  nitro::nitro_function::nitro_function(v10);
  *(void *)(v11 - 40) = &a10;
  std::vector<std::shared_ptr<Espresso::graph_optimization_rule>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v8 = result + 1;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v18 = result;
    uint64_t v19 = v9;
    uint64_t v20 = v9;
    if (v9)
    {
      uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        uint64_t v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          if (v9 != v10)
          {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v9 + 7), (std::string *)v10[7], (std::string *)v10[8], 0xAAAAAAAAAAAAAAABLL * ((v10[8] - v10[7]) >> 3));
            std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v9 + 10, (long long *)v10[10], (long long *)(v10 + 11));
          }
          uint64_t v11 = *v8;
          unint64_t v12 = v5 + 1;
          unint64_t v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                unint64_t v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4)) {
                  break;
                }
                uint64_t v11 = *v12;
                unint64_t v13 = v12;
                if (!*v12) {
                  goto LABEL_16;
                }
              }
              uint64_t v11 = v12[1];
            }
            while (v11);
            unint64_t v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          uint64_t v9 = v19;
          uint64_t v20 = v19;
          if (v19) {
            uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          int v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              int v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              uint64_t v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          uint64_t v10 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__emplace_multi<std::pair<std::string const,Espresso::net_configuration> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v16 = (uint64_t *)a2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)a2[2];
          BOOL v15 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_192152978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::network_optimization_graph,std::allocator<Espresso::network_optimization_graph>,std::shared_ptr<Espresso::net> &,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = (char *)operator new(0x58uLL);
  uint64_t v7 = v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_1EE3885E0;
  uint64_t v8 = v6 + 24;
  v9[0] = a2;
  v9[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::net **)v6 + 3, (uint64_t)v9);
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_192152A34(_Unwind_Exception *a1)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t **Espresso::net::copy_parameters_from(Espresso::net *this, const Espresso::net *a2)
{
  if (this == a2)
  {
    std::string::operator=((std::string *)((char *)this + 424), (const std::string *)((char *)this + 424));
  }
  else
  {
    unint64_t v4 = (void *)*((void *)a2 + 41);
    uint64_t v5 = (char *)a2 + 336;
    if (*((void *)this + 43))
    {
      uint64_t v6 = (uint64_t **)((char *)this + 336);
      uint64_t v7 = *((void *)this + 41);
      uint64_t v8 = *((void *)this + 42);
      *((void *)this + 41) = (char *)this + 336;
      *(void *)(v8 + 16) = 0;
      *((void *)this + 42) = 0;
      *((void *)this + 43) = 0;
      if (*(void *)(v7 + 8)) {
        uint64_t v9 = *(uint64_t **)(v7 + 8);
      }
      else {
        uint64_t v9 = (uint64_t *)v7;
      }
      uint64_t v104 = (char *)this + 328;
      v105 = v9;
      v106 = v9;
      if (!v9
        || (v105 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9),
            v4 == (void *)v5))
      {
        uint64_t v17 = (char *)v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v4 + 4));
          *(_OWORD *)(v9 + 7) = *(_OWORD *)(v4 + 7);
          long long v10 = *(_OWORD *)(v4 + 9);
          long long v11 = *(_OWORD *)(v4 + 11);
          long long v12 = *(_OWORD *)(v4 + 13);
          *(_OWORD *)((char *)v9 + 116) = *(_OWORD *)((char *)v4 + 116);
          *(_OWORD *)(v9 + 13) = v12;
          *(_OWORD *)(v9 + 11) = v11;
          *(_OWORD *)(v9 + 9) = v10;
          unint64_t v13 = *v6;
          int v14 = (uint64_t **)((char *)this + 336);
          BOOL v15 = (uint64_t **)((char *)this + 336);
          if (*v6)
          {
            do
            {
              while (1)
              {
                int v14 = (uint64_t **)v13;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v106 + 4, v13 + 4)) {
                  break;
                }
                unint64_t v13 = *v14;
                BOOL v15 = v14;
                if (!*v14) {
                  goto LABEL_14;
                }
              }
              unint64_t v13 = v14[1];
            }
            while (v13);
            BOOL v15 = v14 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 41, (uint64_t)v14, v15, v106);
          uint64_t v9 = v105;
          v106 = v105;
          if (v105) {
            v105 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v105);
          }
          uint64_t v16 = (char *)v4[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint64_t v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (char *)v4[2];
              BOOL v68 = *(void *)v17 == (void)v4;
              unint64_t v4 = v17;
            }
            while (!v68);
          }
          if (!v9) {
            break;
          }
          unint64_t v4 = v17;
        }
        while (v17 != v5);
      }
      std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v104);
      unint64_t v4 = v17;
    }
    if (v4 != (void *)v5)
    {
      uint64_t v18 = (uint64_t **)((char *)this + 336);
      do
      {
        uint64_t v19 = (char *)operator new(0x88uLL);
        uint64_t v20 = v19;
        unint64_t v21 = v19 + 32;
        if (*((char *)v4 + 55) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), (const std::string::value_type *)v4[4], v4[5]);
        }
        else
        {
          long long v22 = *((_OWORD *)v4 + 2);
          *((void *)v19 + 6) = v4[6];
          *(_OWORD *)unint64_t v21 = v22;
        }
        *(_OWORD *)(v20 + 56) = *(_OWORD *)(v4 + 7);
        long long v23 = *(_OWORD *)(v4 + 9);
        long long v24 = *(_OWORD *)(v4 + 11);
        long long v25 = *(_OWORD *)(v4 + 13);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(v4 + 15);
        *(_OWORD *)(v20 + 104) = v25;
        *(_OWORD *)(v20 + 88) = v24;
        *(_OWORD *)(v20 + 72) = v23;
        uint64_t v26 = *v18;
        uint64_t v27 = (uint64_t **)((char *)this + 336);
        unint64_t v28 = (uint64_t **)((char *)this + 336);
        if (*v18)
        {
          do
          {
            while (1)
            {
              uint64_t v27 = (uint64_t **)v26;
              if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, v26 + 4)) {
                break;
              }
              uint64_t v26 = *v27;
              unint64_t v28 = v27;
              if (!*v27) {
                goto LABEL_38;
              }
            }
            uint64_t v26 = v27[1];
          }
          while (v26);
          unint64_t v28 = v27 + 1;
        }
LABEL_38:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 41, (uint64_t)v27, v28, (uint64_t *)v20);
        uint8x8_t v29 = (char *)v4[1];
        if (v29)
        {
          do
          {
            unint64_t v30 = v29;
            uint8x8_t v29 = *(char **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            unint64_t v30 = (char *)v4[2];
            BOOL v68 = *(void *)v30 == (void)v4;
            unint64_t v4 = v30;
          }
          while (!v68);
        }
        unint64_t v4 = v30;
      }
      while (v30 != v5);
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>((uint64_t)this + 352, *((uint64_t **)a2 + 44), (uint64_t *)a2 + 45);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)this + 59, *((long long **)a2 + 59), (long long *)a2 + 30);
    std::string::operator=((std::string *)((char *)this + 424), (const std::string *)((char *)a2 + 424));
    uint8x8_t v31 = (uint64_t *)*((void *)a2 + 50);
    uint64_t v32 = (char *)a2 + 408;
    if (*((void *)this + 52))
    {
      long long v33 = (uint64_t **)((char *)this + 408);
      uint64_t v34 = *((void *)this + 50);
      uint64_t v35 = *((void *)this + 51);
      *((void *)this + 50) = (char *)this + 408;
      *(void *)(v35 + 16) = 0;
      *((void *)this + 51) = 0;
      *((void *)this + 52) = 0;
      if (*(void *)(v34 + 8)) {
        uint64_t v36 = *(uint64_t **)(v34 + 8);
      }
      else {
        uint64_t v36 = (uint64_t *)v34;
      }
      uint64_t v104 = (char *)this + 400;
      v105 = v36;
      v106 = v36;
      if (!v36
        || (v105 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v36),
            v31 == (uint64_t *)v32))
      {
        uint64_t v41 = (char *)v31;
      }
      else
      {
        do
        {
          *((_DWORD *)v36 + 8) = *((_DWORD *)v31 + 8);
          if (v36 != v31)
          {
            std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>((uint64_t)(v36 + 5), (uint64_t *)v31[5], v31 + 6);
            uint64_t v36 = v106;
          }
          unint64_t v37 = *v33;
          float v38 = (uint64_t **)((char *)this + 408);
          int v39 = (uint64_t **)((char *)this + 408);
          if (*v33)
          {
            do
            {
              while (1)
              {
                float v38 = (uint64_t **)v37;
                if (*((_DWORD *)v36 + 8) >= *((_DWORD *)v37 + 8)) {
                  break;
                }
                unint64_t v37 = (uint64_t *)*v37;
                int v39 = v38;
                if (!*v38) {
                  goto LABEL_58;
                }
              }
              unint64_t v37 = (uint64_t *)v37[1];
            }
            while (v37);
            int v39 = v38 + 1;
          }
LABEL_58:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 50, (uint64_t)v38, v39, v36);
          uint64_t v36 = v105;
          v106 = v105;
          if (v105) {
            v105 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v105);
          }
          unint64_t v40 = (char *)v31[1];
          if (v40)
          {
            do
            {
              uint64_t v41 = v40;
              unint64_t v40 = *(char **)v40;
            }
            while (v40);
          }
          else
          {
            do
            {
              uint64_t v41 = (char *)v31[2];
              BOOL v68 = *(void *)v41 == (void)v31;
              uint8x8_t v31 = (uint64_t *)v41;
            }
            while (!v68);
          }
          if (!v36) {
            break;
          }
          uint8x8_t v31 = (uint64_t *)v41;
        }
        while (v41 != v32);
      }
      std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v104);
      uint8x8_t v31 = (uint64_t *)v41;
    }
    if (v31 != (uint64_t *)v32)
    {
      int v42 = (uint64_t **)((char *)this + 408);
      do
      {
        uint64_t v43 = (uint64_t *)operator new(0x40uLL);
        *((_DWORD *)v43 + 8) = *((_DWORD *)v31 + 8);
        std::map<std::string,Espresso::blob_numerical_properties>::map[abi:ne180100]((uint64_t)(v43 + 5), v31 + 5);
        uint64_t v44 = *v42;
        uint64_t v45 = (uint64_t **)((char *)this + 408);
        int v46 = (uint64_t **)((char *)this + 408);
        if (*v42)
        {
          do
          {
            while (1)
            {
              uint64_t v45 = (uint64_t **)v44;
              if (*((_DWORD *)v43 + 8) >= *((_DWORD *)v44 + 8)) {
                break;
              }
              uint64_t v44 = (uint64_t *)*v44;
              int v46 = v45;
              if (!*v45) {
                goto LABEL_78;
              }
            }
            uint64_t v44 = (uint64_t *)v44[1];
          }
          while (v44);
          int v46 = v45 + 1;
        }
LABEL_78:
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)this + 50, (uint64_t)v45, v46, v43);
        int v47 = (char *)v31[1];
        if (v47)
        {
          do
          {
            uint64_t v48 = v47;
            int v47 = *(char **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            uint64_t v48 = (char *)v31[2];
            BOOL v68 = *(void *)v48 == (void)v31;
            uint8x8_t v31 = (uint64_t *)v48;
          }
          while (!v68);
        }
        uint8x8_t v31 = (uint64_t *)v48;
      }
      while (v48 != v32);
    }
  }
  uint64_t v49 = *((void *)a2 + 121);
  uint64_t v50 = *((void *)a2 + 122);
  if (v50) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 121) = v49;
  uint64_t v51 = (std::__shared_weak_count *)*((void *)this + 122);
  *((void *)this + 122) = v50;
  if (v51) {
    nitro::nitro_function::nitro_function(v51);
  }
  if (this != a2)
  {
    *((_DWORD *)this + 230) = *((_DWORD *)a2 + 230);
    long long v52 = (uint64_t *)*((void *)a2 + 113);
    uint64_t v53 = *((void *)this + 112);
    if (!v53) {
      goto LABEL_97;
    }
    for (uint64_t i = 0; i != v53; *(void *)(*((void *)this + 111) + 8 * i++) = 0)
      ;
    int v55 = (uint64_t *)*((void *)this + 113);
    *((void *)this + 114) = 0;
    *((void *)this + 113) = 0;
    if (v55)
    {
      while (v52)
      {
        unint64_t v56 = v52[2];
        void v55[2] = v56;
        long long v57 = *(_OWORD *)(v52 + 3);
        *((unsigned char *)v55 + 40) = *((unsigned char *)v52 + 40);
        *(_OWORD *)(v55 + 3) = v57;
        BOOL v58 = (uint64_t *)*v55;
        v55[1] = v56;
        inserted = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)this + 888, v56, v55 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform((void *)this + 111, v55, inserted);
        long long v52 = (uint64_t *)*v52;
        int v55 = v58;
        if (!v58) {
          goto LABEL_97;
        }
      }
      do
      {
        uint64_t v70 = (uint64_t *)*v55;
        operator delete(v55);
        int v55 = v70;
      }
      while (v70);
    }
    else
    {
LABEL_97:
      while (v52)
      {
        long long v60 = operator new(0x30uLL);
        *long long v60 = 0;
        long long v61 = *((_OWORD *)v52 + 2);
        *((_OWORD *)v60 + 1) = *((_OWORD *)v52 + 1);
        *((_OWORD *)v60 + 2) = v61;
        unint64_t v62 = v60[2];
        v60[1] = v62;
        long long v63 = std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_prepare((uint64_t)this + 888, v62, v60 + 2);
        std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__node_insert_multi_perform((void *)this + 111, v60, v63);
        long long v52 = (uint64_t *)*v52;
      }
    }
    *((_DWORD *)this + 288) = *((_DWORD *)a2 + 288);
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>((void *)this + 140, *((void **)a2 + 142), 0);
    *((_DWORD *)this + 368) = *((_DWORD *)a2 + 368);
    uint64_t v64 = (uint64_t *)*((void *)a2 + 182);
    uint64_t v65 = *((void *)this + 181);
    if (v65)
    {
      for (uint64_t j = 0; j != v65; ++j)
        *(void *)(*((void *)this + 180) + 8 * j) = 0;
      uint64_t v67 = *((void *)this + 182);
      *((void *)this + 183) = 0;
      *((void *)this + 182) = 0;
      if (v67) {
        BOOL v68 = v64 == 0;
      }
      else {
        BOOL v68 = 1;
      }
      if (v68)
      {
        unint64_t v69 = (void *)v67;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v67 + 16), (const std::string *)(v64 + 2));
          uint64_t v72 = v64[5];
          uint64_t v71 = v64[6];
          if (v71) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v73 = *(std::__shared_weak_count **)(v67 + 48);
          *(void *)(v67 + 40) = v72;
          *(void *)(v67 + 48) = v71;
          if (v73) {
            nitro::nitro_function::nitro_function(v73);
          }
          unint64_t v69 = *(void **)v67;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1440, v67);
          uint64_t v64 = (uint64_t *)*v64;
          if (!v69) {
            break;
          }
          uint64_t v67 = (uint64_t)v69;
        }
        while (v64);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v69);
    }
    for (; v64; uint64_t v64 = (uint64_t *)*v64)
    {
      int32x4_t v74 = (char *)operator new(0x38uLL);
      uint64_t v104 = v74;
      v105 = (uint64_t *)((char *)this + 1456);
      LOBYTE(v106) = 0;
      *(void *)int32x4_t v74 = 0;
      *((void *)v74 + 1) = 0;
      uint64_t v75 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v74 + 16), (long long *)v64 + 1);
      LOBYTE(v106) = 1;
      *((void *)v74 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v75);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1440, (uint64_t)v74);
      uint64_t v104 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v104);
    }
  }
  uint64_t v76 = *((void *)a2 + 136);
  uint64_t v77 = *((void *)a2 + 137);
  if (v77) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 16), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 136) = v76;
  uint64_t v78 = (std::__shared_weak_count *)*((void *)this + 137);
  *((void *)this + 137) = v77;
  if (v78) {
    std::__shared_weak_count::__release_weak(v78);
  }
  if (this == a2)
  {
    return (uint64_t **)std::string::operator=((std::string *)((char *)this + 1024), (const std::string *)((char *)this + 1024));
  }
  else
  {
    *((_DWORD *)this + 270) = *((_DWORD *)a2 + 270);
    std::string v79 = (uint64_t *)*((void *)a2 + 133);
    uint64_t v80 = *((void *)this + 132);
    if (v80)
    {
      for (uint64_t k = 0; k != v80; ++k)
        *(void *)(*((void *)this + 131) + 8 * k) = 0;
      uint64_t v82 = *((void *)this + 133);
      *((void *)this + 134) = 0;
      *((void *)this + 133) = 0;
      if (v82) {
        BOOL v83 = v79 == 0;
      }
      else {
        BOOL v83 = 1;
      }
      if (v83)
      {
        std::string v84 = (void *)v82;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v82 + 16), (const std::string *)(v79 + 2));
          if ((uint64_t *)v82 != v79)
          {
            *(_DWORD *)(v82 + 72) = *((_DWORD *)v79 + 18);
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<unsigned long,void *> *>>((void *)(v82 + 40), (void *)v79[7]);
          }
          std::string v84 = *(void **)v82;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1048, v82);
          std::string v79 = (uint64_t *)*v79;
          if (!v84) {
            break;
          }
          uint64_t v82 = (uint64_t)v84;
        }
        while (v79);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(v84);
    }
    for (; v79; std::string v79 = (uint64_t *)*v79)
    {
      uint64_t v85 = (char *)operator new(0x50uLL);
      int v86 = v85;
      uint64_t v104 = v85;
      v105 = (uint64_t *)((char *)this + 1064);
      LOBYTE(v106) = 0;
      v87 = v85 + 16;
      *(void *)uint64_t v85 = 0;
      *((void *)v85 + 1) = 0;
      if (*((char *)v79 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v85 + 16), (const std::string::value_type *)v79[2], v79[3]);
      }
      else
      {
        long long v88 = *((_OWORD *)v79 + 1);
        *((void *)v85 + 4) = v79[4];
        _OWORD *v87 = v88;
      }
      *(_OWORD *)(v86 + 40) = 0u;
      *(_OWORD *)(v86 + 56) = 0u;
      *((_DWORD *)v86 + 18) = *((_DWORD *)v79 + 18);
      std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)(v86 + 40), v79[6]);
      std::string::size_type v89 = (void *)v79[7];
      uint64_t v90 = (uint64_t)v86;
      if (v89)
      {
        do
        {
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)(v86 + 40), v89 + 2, v89 + 2);
          std::string::size_type v89 = (void *)*v89;
        }
        while (v89);
        uint64_t v90 = (uint64_t)v104;
      }
      LOBYTE(v106) = 1;
      *((void *)v86 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v87);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 1048, v90);
      uint64_t v104 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v104);
    }
    std::string::operator=((std::string *)((char *)this + 1024), (const std::string *)((char *)a2 + 1024));
    *((_DWORD *)this + 254) = *((_DWORD *)a2 + 254);
    unint64_t v91 = (uint64_t *)*((void *)a2 + 125);
    uint64_t v92 = *((void *)this + 124);
    if (v92)
    {
      for (uint64_t m = 0; m != v92; ++m)
        *(void *)(*((void *)this + 123) + 8 * m) = 0;
      uint64_t v94 = *((void *)this + 125);
      *((void *)this + 126) = 0;
      *((void *)this + 125) = 0;
      if (v94) {
        BOOL v95 = v91 == 0;
      }
      else {
        BOOL v95 = 1;
      }
      if (v95)
      {
        uint64_t v96 = (void *)v94;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v94 + 16), (const std::string *)(v91 + 2));
          uint64_t v99 = v91[5];
          uint64_t v98 = v91[6];
          if (v98) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v98 + 8), 1uLL, memory_order_relaxed);
          }
          v100 = *(std::__shared_weak_count **)(v94 + 48);
          *(void *)(v94 + 40) = v99;
          *(void *)(v94 + 48) = v98;
          if (v100) {
            nitro::nitro_function::nitro_function(v100);
          }
          uint64_t v96 = *(void **)v94;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 984, v94);
          unint64_t v91 = (uint64_t *)*v91;
          if (!v96) {
            break;
          }
          uint64_t v94 = (uint64_t)v96;
        }
        while (v91);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v96);
    }
    for (; v91; unint64_t v91 = (uint64_t *)*v91)
    {
      v101 = (char *)operator new(0x38uLL);
      uint64_t v104 = v101;
      v105 = (uint64_t *)((char *)this + 1000);
      LOBYTE(v106) = 0;
      *(void *)v101 = 0;
      *((void *)v101 + 1) = 0;
      v102 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v101 + 16), (long long *)v91 + 1);
      LOBYTE(v106) = 1;
      *((void *)v101 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v102);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)this + 984, (uint64_t)v101);
      uint64_t v104 = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v104);
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)this + 800, *((std::string **)a2 + 100), *((std::string **)a2 + 101), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 101) - *((void *)a2 + 100)) >> 3));
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)this + 103, *((long long **)a2 + 103), (long long *)a2 + 52);
    v103 = (uint64_t *)*((void *)a2 + 97);
    return std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::net_configuration>,std::__tree_node<std::__value_type<std::string,Espresso::net_configuration>,void *> *,long>>((uint64_t **)this + 97, v103, (uint64_t *)a2 + 98);
  }
}

void sub_19215348C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v8 = result + 1;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v18 = result;
    uint64_t v19 = v9;
    uint64_t v20 = v9;
    if (v9)
    {
      uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        long long v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          std::string::operator=((std::string *)(v9 + 7), (const std::string *)((char *)v10 + 56));
          long long v11 = *v8;
          long long v12 = v5 + 1;
          unint64_t v13 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20 + 4, v11 + 4)) {
                  break;
                }
                long long v11 = *v12;
                unint64_t v13 = v12;
                if (!*v12) {
                  goto LABEL_14;
                }
              }
              long long v11 = v12[1];
            }
            while (v11);
            unint64_t v13 = v12 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v5, (uint64_t)v12, v13, v20);
          uint64_t v9 = v19;
          uint64_t v20 = v19;
          if (v19) {
            uint64_t v19 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          }
          int v14 = (long long *)*((void *)v10 + 1);
          if (v14)
          {
            do
            {
              a2 = v14;
              int v14 = *(long long **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v10 + 2);
              BOOL v15 = *(void *)a2 == (void)v10;
              long long v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          long long v10 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t *)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>((uint64_t)v5, a2 + 2);
      uint64_t v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (long long *)*((void *)a2 + 2);
          BOOL v15 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_192153794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v8 = (uint64_t **)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      uint64_t v9 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v9 = v6;
    }
    long long v22 = (uint64_t *)a1;
    long long v23 = v9;
    long long v24 = v9;
    if (v9)
    {
      long long v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        long long v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 4));
          *(_OWORD *)(v9 + 7) = *(_OWORD *)(v10 + 7);
          if (v9 != v10) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 72, (char *)v10[9], v10[10], (v10[10] - v10[9]) >> 2);
          }
          long long v11 = *v8;
          long long v12 = (uint64_t **)(a1 + 8);
          unint64_t v13 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                long long v12 = (uint64_t **)v11;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, v11 + 4)) {
                  break;
                }
                long long v11 = *v12;
                unint64_t v13 = v12;
                if (!*v12) {
                  goto LABEL_16;
                }
              }
              long long v11 = v12[1];
            }
            while (v11);
            unint64_t v13 = v12 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v24);
          uint64_t v9 = v23;
          long long v24 = v23;
          if (v23) {
            long long v23 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v23);
          }
          int v14 = (uint64_t *)v10[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              int v14 = (uint64_t *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v10[2];
              BOOL v15 = *a2 == (void)v10;
              long long v10 = a2;
            }
            while (!v15);
          }
          if (!v9) {
            break;
          }
          long long v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v22);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__construct_node<std::pair<std::string const,Espresso::blob_numerical_properties> const&>((uint64_t)&v22, a1, (uint64_t)(a2 + 4));
      uint64_t v16 = v22;
      uint64_t v17 = *(uint64_t **)(a1 + 8);
      uint64_t v18 = (uint64_t **)(a1 + 8);
      uint64_t v19 = (uint64_t **)(a1 + 8);
      if (v17)
      {
        do
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v17;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16 + 4, v17 + 4)) {
              break;
            }
            uint64_t v17 = *v18;
            uint64_t v19 = v18;
            if (!*v18) {
              goto LABEL_33;
            }
          }
          uint64_t v17 = v18[1];
        }
        while (v17);
        uint64_t v19 = v18 + 1;
      }
LABEL_33:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v18, v19, v16);
      long long v22 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *>>>>::reset[abi:ne180100]((uint64_t)&v22);
      uint64_t v20 = (uint64_t *)a2[1];
      if (v20)
      {
        do
        {
          unint64_t v21 = v20;
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v21 = (uint64_t *)a2[2];
          BOOL v15 = *v21 == (void)a2;
          a2 = v21;
        }
        while (!v15);
      }
      a2 = v21;
    }
    while (v21 != a3);
  }
}

void sub_1921539E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *> *>>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      long long v10 = v8;
    }
    else
    {
      do
      {
        _OWORD v8[2] = v4[2];
        uint64_t v12 = v4[3];
        uint64_t v11 = v4[4];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v13 = (std::__shared_weak_count *)v8[4];
        v8[3] = v12;
        v8[4] = v11;
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        long long v10 = (uint64_t *)*v8;
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(a1, v8);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        uint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node((int)a1, v10);
  }
  for (; v4 != a3; unint64_t v4 = (void *)*v4)
  {
    int v14 = (uint64_t *)operator new(0x28uLL);
    *int v14 = 0;
    v14[1] = 0;
    uint64_t v15 = v4[2];
    v14[2] = v15;
    uint64_t v16 = v4[4];
    v14[3] = v4[3];
    v14[4] = v16;
    if (v16)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      uint64_t v15 = v14[2];
    }
    uint64_t v17 = *(void *)(v15 + 8);
    if (v17 < 0)
    {
      uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v19 = 5381;
      do
      {
        uint64_t v17 = v19;
        unsigned int v20 = *v18++;
        uint64_t v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    v14[1] = v17;
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(a1, v14);
  }
}

void sub_192153B40(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_192153B58(_Unwind_Exception *a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi(void *a1, uint64_t *a2)
{
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void *)(a2[2] + 8);
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  int8x8_t v10 = (int8x8_t)a1[1];
  unint64_t v11 = a2[1];
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v10) {
      v11 %= *(void *)&v10;
    }
  }
  else
  {
    v11 &= *(void *)&v10 - 1;
  }
  if (!inserted)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v11) = a1 + 2;
    if (!*a2) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v10) {
        v13 %= *(void *)&v10;
      }
    }
    else
    {
      v13 &= *(void *)&v10 - 1;
    }
LABEL_21:
    *(void *)(*a1 + 8 * v13) = a2;
    goto LABEL_22;
  }
  *a2 = *inserted;
  uint64_t *inserted = (uint64_t)a2;
  if (*a2)
  {
    unint64_t v13 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v13 >= *(void *)&v10) {
        v13 %= *(void *)&v10;
      }
    }
    else
    {
      v13 &= *(void *)&v10 - 1;
    }
    if (v13 != v11) {
      goto LABEL_21;
    }
  }
LABEL_22:
  ++a1[3];
  return a2;
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (v6 && (float)(v8 * (float)v6) >= v7)
  {
    unint64_t v9 = v6 - 1;
    if ((v6 & (v6 - 1)) == 0) {
      goto LABEL_4;
    }
    goto LABEL_39;
  }
  BOOL v19 = 1;
  if (v6 >= 3) {
    BOOL v19 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v20 = v19 | (2 * v6);
  unint64_t v21 = vcvtps_u32_f32(v7 / v8);
  if (v20 <= v21) {
    size_t prime = v21;
  }
  else {
    size_t prime = v20;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  if (prime > v6) {
    goto LABEL_25;
  }
  if (prime < v6)
  {
    size_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 >= 3)
    {
      uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] <= 1uLL)
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          size_t v23 = v25;
        }
        if (prime <= v23) {
          size_t prime = v23;
        }
        if (prime >= v6) {
          goto LABEL_38;
        }
LABEL_25:
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<false>(a1, prime);
        goto LABEL_38;
      }
    }
    size_t v26 = std::__next_prime(v23);
    if (prime <= v26) {
      size_t prime = v26;
    }
    if (prime < v6) {
      goto LABEL_25;
    }
  }
LABEL_38:
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = v6 - 1;
  if ((v6 & (v6 - 1)) != 0)
  {
LABEL_39:
    unint64_t v27 = a2;
    if (v6 <= a2) {
      unint64_t v27 = a2 % v6;
    }
    unint64_t v28 = *(void **)(*(void *)a1 + 8 * v27);
    if (!v28) {
      return 0;
    }
    int v29 = 0;
    uint64_t v30 = *a3;
    while (1)
    {
      uint64_t v15 = v28;
      unint64_t v28 = (void *)*v28;
      if (!v28) {
        return v15;
      }
      unint64_t v33 = v28[1];
      unint64_t v34 = v33;
      if (v33 >= v6) {
        unint64_t v34 = v33 % v6;
      }
      if (v34 != v27) {
        return v15;
      }
      if (v33 == a2)
      {
        uint64_t v35 = *(void *)(v28[2] + 8);
        uint64_t v36 = *(void *)(v30 + 8);
        if (v35 == v36)
        {
          BOOL v31 = 1;
          goto LABEL_45;
        }
        if ((v36 & v35) < 0 != __OFSUB__(v35, v36))
        {
          BOOL v31 = strcmp((const char *)(v35 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v36 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
          goto LABEL_45;
        }
      }
      BOOL v31 = 0;
LABEL_45:
      int v32 = v29 & !v31;
      v29 |= v31;
      if (v32 == 1) {
        return v15;
      }
    }
  }
LABEL_4:
  int8x8_t v10 = *(void **)(*(void *)a1 + 8 * (v9 & a2));
  if (v10)
  {
    int v11 = 0;
    uint64_t v12 = *a3;
    while (1)
    {
      uint64_t v15 = v10;
      int8x8_t v10 = (void *)*v10;
      if (!v10) {
        return v15;
      }
      uint64_t v16 = v10[1];
      if ((v16 & v9) != (v9 & a2)) {
        return v15;
      }
      if (v16 == a2)
      {
        uint64_t v17 = *(void *)(v10[2] + 8);
        uint64_t v18 = *(void *)(v12 + 8);
        if (v17 == v18)
        {
          BOOL v13 = 1;
          goto LABEL_8;
        }
        if ((v18 & v17) < 0 != __OFSUB__(v17, v18))
        {
          BOOL v13 = strcmp((const char *)(v17 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v18 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
          goto LABEL_8;
        }
      }
      BOOL v13 = 0;
LABEL_8:
      char v14 = v11 & !v13;
      v11 |= v13;
      if (v14) {
        return v15;
      }
    }
  }
  return 0;
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    float v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v12 = (void *)*v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = v12[1];
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            float v7 = v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            char v14 = (void *)*v12;
            if (*v12)
            {
              uint64_t v15 = *(void *)(v12[2] + 8);
              uint64_t v16 = v12;
              while (1)
              {
                uint64_t v17 = v14;
                if (!std::type_info::operator==[abi:ne180100](v15, *(void *)(v14[2] + 8))) {
                  break;
                }
                char v14 = (void *)*v17;
                uint64_t v16 = v17;
                if (!*v17) {
                  goto LABEL_32;
                }
              }
              char v14 = v17;
              uint64_t v17 = v16;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              uint64_t v17 = v12;
            }
            *float v7 = v14;
            *uint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            float v7 = v12;
            unint64_t v8 = v13;
          }
          uint64_t v12 = (void *)*v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    int v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *Espresso::graph_optimization_rule_simple::graph_optimization_rule_simple(void *a1, void *a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &unk_1EE35AF00;
  a1[1] = a2;
  a1[2] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[1];
  a1[3] = *a2;
  a1[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
  *a1 = &unk_1EE365E88;
  return a1;
}

void *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_192154254(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::gather_nd_kernel_cpu::on_resized(void *a1, uint64_t a2, uint64_t **a3)
{
  Espresso::abstract_blob_container::shape(v6, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v9, (const Espresso::layer_shape *)v6, 0);
  Espresso::layer_nd_shape::strides_vector(&v10, (uint64_t)v9);
  uint64_t v4 = a1 + 37;
  unint64_t v5 = (void *)a1[37];
  if (v5)
  {
    a1[38] = v5;
    operator delete(v5);
    void *v4 = 0;
    a1[38] = 0;
    a1[39] = 0;
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&v10.__begin_;
  a1[39] = v10.__end_cap_.__value_;
  memset(&v10, 0, sizeof(v10));
  if (__p)
  {
    size_t v8 = __p;
    operator delete(__p);
  }
}

void sub_192154308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *Espresso::layer_nd_shape::strides_vector(std::vector<int> *this, uint64_t a2)
{
  uint64_t result = std::vector<int>::vector(this, *(int *)(a2 + 20));
  int v4 = *(_DWORD *)(a2 + 20);
  unint64_t v5 = (v4 - 1);
  std::vector<int>::pointer begin = result->__begin_;
  result->__begin_[(int)v5] = 1;
  if (v4 >= 2)
  {
    int v7 = 1;
    do
    {
      v7 *= *(_DWORD *)(a2 + 4 * v5);
      BOOL v8 = v5-- > 1;
      begin[v5] = v7;
    }
    while (v8);
  }
  return result;
}

void Espresso::compute_network_shape_starting_from_data_shapes(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(a3, v4, a2);
  if (v5)
  {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1921543E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v96 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v89 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  memset(v87, 0, sizeof(v87));
  int v88 = 1065353216;
  memset(v85, 0, sizeof(v85));
  int v86 = 1065353216;
  uint64_t v81 = 0;
  if (*(void *)(a2 + 40) != *(void *)(a2 + 32))
  {
    uint64_t v4 = (Espresso *)(a3 + 8);
    do
    {
      *(void *)long long buf = &v81;
      unint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(a2 + 56, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v6 = (void *)v5[3];
      int v7 = (void *)v5[4];
      BOOL v8 = v6;
      if (v6 != v7)
      {
        do
        {
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)v4, v6))
          {
            uint8x8_t v9 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, v6);
            *(void *)long long buf = v6;
            std::vector<int> v10 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v6, (long long **)buf);
            long long v11 = *(_OWORD *)(v9 + 56);
            long long v12 = *(_OWORD *)(v9 + 72);
            *((void *)v10 + 11) = *((void *)v9 + 11);
            *(_OWORD *)(v10 + 72) = v12;
            *(_OWORD *)(v10 + 56) = v11;
            if (v10 != v9) {
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v10 + 96, *((char **)v9 + 12), *((void *)v9 + 13), (uint64_t)(*((void *)v9 + 13) - *((void *)v9 + 12)) >> 2);
            }
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v87, (uint64_t)v6))
          {
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v85, (unint64_t *)&v81, &v81);
          }
          v6 += 3;
        }
        while (v6 != v7);
        uint64_t v6 = (void *)v5[3];
        BOOL v8 = (void *)v5[4];
      }
      uint64_t v13 = *(void *)(*(void *)(*(void *)(v89 + 32) + 16 * (void)v81) + 64);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v13 + 264))(v13, 0xAAAAAAAAAAAAAAABLL * (v8 - v6)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v85, (unint64_t)v81))
      {
        *(void *)long long buf = &v81;
        char v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v89 + 96, (unint64_t *)&v81, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
        uint64_t v15 = v14[3];
        uint64_t v16 = v14[4];
        while (v15 != v16)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v87, v15, v15);
          v15 += 24;
        }
      }
      uint64_t v81 = (long long *)((char *)v81 + 1);
      a2 = v89;
      uint64_t v18 = *(void *)(v89 + 32);
      uint64_t v17 = *(void *)(v89 + 40);
    }
    while ((unint64_t)v81 < (v17 - v18) >> 4);
    int v84 = 0;
    uint64_t v77 = v18;
    if (v17 != v18)
    {
      unint64_t v19 = 0;
      do
      {
        *(void *)long long buf = v84;
        unint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(a2 + 56, v84, buf);
        uint64_t v81 = 0;
        uint64_t v82 = 0;
        unint64_t v83 = 0;
        std::vector<Espresso::layer_shape>::reserve((uint64_t *)&v81, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3));
        unint64_t v21 = (char *)v20[3];
        long long v22 = (char *)v20[4];
        while (v21 != v22)
        {
          __p[0] = v21;
          size_t v23 = (long long *)(std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v21, (long long **)__p)+ 56);
          uint8x8_t v24 = v82;
          if ((unint64_t)v82 >= v83)
          {
            uint64_t v25 = (long long *)std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>((uint64_t *)&v81, v23);
          }
          else
          {
            std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)&v81, v23);
            uint64_t v25 = v24 + 4;
          }
          uint64_t v82 = v25;
          v21 += 24;
        }
        if (!v84)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, "");
          uint64_t v39 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)v4, buf);
          uint64_t v40 = v39;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (v40)
            {
LABEL_73:
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              uint64_t v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, __p);
              long long v66 = *(_OWORD *)(v65 + 9);
              *(_OWORD *)long long buf = *(_OWORD *)(v65 + 7);
              *(_OWORD *)&buf[16] = v66;
              uint64_t v67 = (const void *)v65[12];
              uint64_t v92 = v65[11];
              uint64_t v93 = 0;
              uint64_t v94 = 0;
              uint64_t v95 = 0;
              std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v93, v67, v65[13], (uint64_t)(v65[13] - (void)v67) >> 2);
              std::vector<Espresso::layer_shape>::__assign_with_size[abi:ne180100]<Espresso::layer_shape const*,Espresso::layer_shape const*>((uint64_t *)&v81, (long long *)buf, &v96, 1uLL);
              if (v93)
              {
                uint64_t v94 = v93;
                operator delete(v93);
              }
              if (SHIBYTE(v80) < 0) {
                operator delete(__p[0]);
              }
              BOOL v68 = (char *)v20[3];
              unint64_t v69 = (char *)v20[4];
              if (v68 != v69)
              {
                uint64_t v70 = 0;
                do
                {
                  uint64_t v71 = v81;
                  __p[0] = v68;
                  uint64_t v72 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v68, (long long **)__p);
                  long long v73 = v71[v70];
                  long long v74 = v71[v70 + 1];
                  *((void *)v72 + 11) = *(void *)&v71[v70 + 2];
                  *(_OWORD *)(v72 + 72) = v74;
                  *(_OWORD *)(v72 + 56) = v73;
                  if (&v71[v70] != (long long *)(v72 + 56)) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v72 + 96, *((char **)&v71[v70 + 2] + 1), *(void *)&v71[v70 + 3], (uint64_t)(*(void *)&v71[v70 + 3] - *((void *)&v71[v70 + 2] + 1)) >> 2);
                  }
                  v68 += 24;
                  v70 += 4;
                }
                while (v68 != v69);
              }
            }
          }
          else if (v39)
          {
            goto LABEL_73;
          }
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v80 = 0;
        std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(__p, v81, v82, ((char *)v82 - (char *)v81) >> 6);
        *(void *)long long buf = v84;
        size_t v26 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v89 + 96, v84, buf);
        unint64_t v28 = v26;
        uint64_t v30 = (void *)*((void *)v26 + 3);
        int v29 = (void *)*((void *)v26 + 4);
        if (v30 == v29)
        {
          BOOL v33 = 1;
        }
        else
        {
          uint64_t v76 = v26;
          uint64_t v31 = 0;
          unint64_t v32 = 1;
          while (1)
          {
            size_t v26 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(a3, v30);
            BOOL v33 = v4 != v26;
            if (v4 == v26) {
              break;
            }
            unint64_t v34 = v26;
            uint64_t v35 = (char *)__p[0];
            if (v32 - 1 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              std::vector<Espresso::layer_shape>::resize((uint64_t *)__p, v32);
              uint64_t v35 = (char *)__p[0];
            }
            uint64_t v36 = &v35[v31];
            long long v37 = *(_OWORD *)((char *)v34 + 56);
            long long v38 = *(_OWORD *)((char *)v34 + 72);
            *((void *)v36 + 4) = *((void *)v34 + 11);
            *(_OWORD *)uint64_t v36 = v37;
            *((_OWORD *)v36 + 1) = v38;
            if (v36 != (char *)v34 + 56) {
              size_t v26 = (Espresso *)std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v36 + 40, *((char **)v34 + 12), *((void *)v34 + 13), (uint64_t)(*((void *)v34 + 13) - *((void *)v34 + 12)) >> 2);
            }
            v30 += 3;
            ++v32;
            v31 += 64;
            if (v30 == v29)
            {
              BOOL v33 = 1;
              break;
            }
          }
          unint64_t v28 = v76;
        }
        if (!v33)
        {
          size_t v26 = *(Espresso **)(*(void *)(v77 + 16 * v19) + 64);
          if (v26)
          {
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v26 + 64))(buf);
            std::vector<Espresso::layer_shape>::__vdeallocate((uint64_t *)__p);
            *(_OWORD *)long long __p = *(_OWORD *)buf;
            uint64_t v80 = *(void *)&buf[16];
            uint64_t v90 = (long long *)buf;
            memset(buf, 0, 24);
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
          }
        }
        int v42 = __p[0];
        for (uint64_t i = __p[1]; v42 != i; v42 += 8)
        {
          v42[3] = 0;
          v42[4] = 0;
        }
        uint64_t v44 = (long long *)*((void *)v28 + 3);
        uint64_t v43 = (uint64_t *)*((void *)v28 + 4);
        if (v44 != (long long *)v43)
        {
          uint64_t v45 = 0;
          unint64_t v46 = 0;
          do
          {
            int v47 = (char *)__p[0];
            if (v46 >= ((char *)__p[1] - (char *)__p[0]) >> 6)
            {
              uint64_t v51 = Espresso::espresso_os_log_subsystem(v26, v27);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v64 = v44;
                if (*((char *)v44 + 23) < 0) {
                  uint64_t v64 = *(long long **)v44;
                }
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = v64;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v84;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v46;
                _os_log_debug_impl(&dword_1920CB000, v51, OS_LOG_TYPE_DEBUG, "TODO: Blob shape not found:%s layer:%d j=%d", buf, 0x18u);
              }

              uint64_t v90 = v44;
              long long v52 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              *(void *)&long long v53 = 0x100000001;
              *((void *)&v53 + 1) = 0x100000001;
              *(_OWORD *)(v52 + 56) = v53;
              *((void *)v52 + 9) = 0xFFFFFFFF00000001;
              *((void *)v52 + 10) = 0;
              *((void *)v52 + 11) = 0;
              int v55 = v52 + 96;
              uint64_t v54 = (void *)*((void *)v52 + 12);
              if (v54)
              {
                *((void *)v52 + 13) = v54;
                operator delete(v54);
                *int v55 = 0;
                v55[1] = 0;
                void v55[2] = 0;
              }
              *int v55 = 0;
              v55[1] = 0;
              void v55[2] = 0;
            }
            else
            {
              uint64_t v90 = v44;
              uint64_t v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              long long v49 = *(_OWORD *)&v47[v45];
              long long v50 = *(_OWORD *)&v47[v45 + 16];
              *((void *)v48 + 11) = *(void *)&v47[v45 + 32];
              *(_OWORD *)(v48 + 72) = v50;
              *(_OWORD *)(v48 + 56) = v49;
              if (&v47[v45] != v48 + 56) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v48 + 96, *(char **)&v47[v45 + 40], *(void *)&v47[v45 + 48], (uint64_t)(*(void *)&v47[v45 + 48] - *(void *)&v47[v45 + 40]) >> 2);
              }
            }
            if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v85, v19))
            {
              uint64_t v90 = v44;
              unint64_t v56 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
              if ((*((_DWORD *)v56 + 18) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 17) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 16) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 15) & 0x80000000) != 0
                || (*((_DWORD *)v56 + 14) & 0x80000000) != 0)
              {
                uint64_t v90 = v44;
                long long v57 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
                *(void *)&long long v58 = 0x100000001;
                *((void *)&v58 + 1) = 0x100000001;
                *(_OWORD *)(v57 + 56) = v58;
                *((void *)v57 + 9) = 0xFFFFFFFF00000001;
                *((void *)v57 + 10) = 0;
                *((void *)v57 + 11) = 0;
                long long v60 = v57 + 96;
                long long v59 = (void *)*((void *)v57 + 12);
                if (v59)
                {
                  *((void *)v57 + 13) = v59;
                  operator delete(v59);
                  *long long v60 = 0;
                  v60[1] = 0;
                  _OWORD v60[2] = 0;
                }
                *long long v60 = 0;
                v60[1] = 0;
                _OWORD v60[2] = 0;
              }
            }
            uint64_t v90 = v44;
            long long v61 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, v44, &v90);
            long long v62 = *(_OWORD *)(v61 + 72);
            *(_OWORD *)long long buf = *(_OWORD *)(v61 + 56);
            *(_OWORD *)&buf[16] = v62;
            long long v63 = (const void *)*((void *)v61 + 12);
            uint64_t v92 = *((void *)v61 + 11);
            uint64_t v93 = 0;
            uint64_t v94 = 0;
            uint64_t v95 = 0;
            std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v93, v63, *((void *)v61 + 13), (uint64_t)(*((void *)v61 + 13) - (void)v63) >> 2);
            size_t v26 = (Espresso *)v93;
            if (v93)
            {
              uint64_t v94 = v93;
              operator delete(v93);
            }
            uint64_t v44 = (long long *)((char *)v44 + 24);
            v45 += 64;
            ++v46;
          }
          while (v44 != (long long *)v43);
        }
        ++v84;
        *(void *)long long buf = __p;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)long long buf = &v81;
        std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v19;
        a2 = v89;
        uint64_t v77 = *(void *)(v89 + 32);
      }
      while (v19 < (*(void *)(v89 + 40) - v77) >> 4);
    }
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v85);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v87);
}

void sub_192154DD0()
{
  __cxa_end_catch();
  *(void *)(v0 - 192) = &v1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 192));
  JUMPOUT(0x192154E84);
}

void sub_192154DE4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192154EB4);
}

void sub_192154DF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  unint64_t v27 = *(void **)(v26 - 152);
  if (v27)
  {
    *(void *)(v26 - 144) = v27;
    operator delete(v27);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  *(void *)(v26 - 192) = &v28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 192));
  JUMPOUT(0x192154E9CLL);
}

void sub_192154E48()
{
}

void Espresso::inner_product_top_shape(void *a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v29 + 1) = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
  *(_OWORD *)&v17[16] = v5;
  uint64_t v6 = *(const void **)(a3 + 40);
  uint64_t v18 = *(void *)(a3 + 32);
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, v6, *(void *)(a3 + 48), (uint64_t)(*(void *)(a3 + 48) - (void)v6) >> 2);
  *(_OWORD *)long long v12 = *(_OWORD *)v17;
  *(_OWORD *)&v12[16] = *(_OWORD *)&v17[16];
  uint64_t v13 = v18;
  long long __p = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
  char v7 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_192DCA240, *(int32x4_t *)&v17[4])));
  BOOL v8 = *(_DWORD *)&v17[16] != 1;
  if (*(_DWORD *)&v17[20] != -1) {
    BOOL v8 = *(_DWORD *)&v17[20] == 5;
  }
  if (*(_DWORD *)&v17[16]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = v8;
  }
  if ((v7 & 1) == 0 && *(int *)v17 >= 1 && !v9)
  {
    BOOL v10 = *(int *)&v17[20] >= 4 || *(_DWORD *)&v17[20] == -1;
    if (!v10 || *(unsigned char *)(a2 + 40))
    {
      *(_DWORD *)long long v12 = *(_DWORD *)a2;
    }
    else
    {
      *(void *)long long v12 = 0x100000001;
      *(_DWORD *)&unsigned char v12[8] = *(_DWORD *)a2;
      *(void *)&v12[12] = vextq_s8(*(int8x16_t *)&v17[4], *(int8x16_t *)&v17[4], 8uLL).u64[0];
    }
  }
  v24[0] = *(_OWORD *)v12;
  v24[1] = *(_OWORD *)&v12[16];
  uint64_t v25 = v13;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, __p, (uint64_t)v15, (v15 - (unsigned char *)__p) >> 2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v22 = a1;
  char v23 = 0;
  long long v11 = (char *)operator new(0x40uLL);
  *a1 = v11;
  a1[1] = v11;
  a1[2] = v11 + 64;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a1 + 2), v24, &v29, (uint64_t)v11);
  if (v26)
  {
    unint64_t v27 = v26;
    operator delete(v26);
  }
  if (__p)
  {
    uint64_t v15 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    unint64_t v20 = v19;
    operator delete(v19);
  }
}

void sub_1921550B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void **a25)
{
  *(void *)(v25 + 8) = v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a25);
  long long v29 = *(void **)(v27 - 72);
  if (v29)
  {
    *(void *)(v27 - 64) = v29;
    operator delete(v29);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_inner_product_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
}

void Espresso::generic_reduce_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, void *a3@<X8>)
{
  *((void *)&v33 + 1) = *MEMORY[0x1E4F143B8];
  long long v5 = *a2;
  long long v15 = **a2;
  long long v16 = (*a2)[1];
  uint64_t v17 = *((void *)*a2 + 4);
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v18, *((const void **)v5 + 5), *((void *)v5 + 6), (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2);
  if (*(unsigned char *)(a1 + 320))
  {
    unsigned int v6 = *(_DWORD *)(a1 + 316);
    if ((v6 & 0x80000000) == 0)
    {
      int v7 = DWORD1(v16);
      if (v16 == 1) {
        int v8 = 4;
      }
      else {
        int v8 = 5;
      }
      if (DWORD1(v16) == -1) {
        int v7 = v8;
      }
      v6 -= v7;
    }
    if (v6 >= 0xFFFFFFFB) {
      *(_DWORD *)(a1 + 288) = *((_DWORD *)&unk_192DE94B8 + v6 + 5);
    }
  }
  int v9 = *(_DWORD *)(a1 + 288);
  switch(v9)
  {
    case 1:
      LODWORD(v15) = 1;
      goto LABEL_21;
    case 2:
      DWORD1(v15) = 1;
      goto LABEL_21;
    case 3:
      *(void *)&long long v15 = 0x100000001;
      goto LABEL_21;
    case 4:
      goto LABEL_19;
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      goto LABEL_21;
    case 7:
      *(void *)&long long v15 = 0x100000001;
LABEL_19:
      DWORD2(v15) = 1;
      goto LABEL_21;
    case 8:
      HIDWORD(v15) = 1;
      goto LABEL_21;
    case 16:
      goto LABEL_15;
    default:
      if (v9 != 31) {
        goto LABEL_21;
      }
      *(void *)&long long v10 = 0x100000001;
      *((void *)&v10 + 1) = 0x100000001;
      long long v15 = v10;
LABEL_15:
      LODWORD(v16) = 1;
LABEL_21:
      if ((*(_DWORD *)(a1 + 280) & 0xFFFFFFFE) == 6)
      {
        long long v23 = v15;
        long long v24 = v16;
        uint64_t v25 = v17;
        long long __p = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 2);
        v29[0] = v15;
        v29[1] = v16;
        uint64_t v30 = v17;
        uint64_t v31 = 0;
        v32[0] = 0;
        v32[1] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v31, v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t v21 = a3;
        char v22 = 0;
        long long v11 = (char *)operator new(0x80uLL);
        *a3 = v11;
        a3[1] = v11;
        a3[2] = v11 + 128;
        uint64_t v12 = 0;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v23, &v33, (uint64_t)v11);
        do
        {
          uint64_t v13 = (void *)v32[v12 - 1];
          if (v13)
          {
            v32[v12] = v13;
            operator delete(v13);
          }
          v12 -= 8;
        }
        while (v12 != -16);
      }
      else
      {
        long long v23 = v15;
        long long v24 = v16;
        uint64_t v25 = v17;
        long long __p = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v18, (uint64_t)v19, (v19 - (unsigned char *)v18) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t v21 = a3;
        char v22 = 0;
        char v14 = (char *)operator new(0x40uLL);
        *a3 = v14;
        a3[1] = v14;
        a3[2] = v14 + 64;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v23, v29, (uint64_t)v14);
        if (__p)
        {
          uint64_t v27 = __p;
          operator delete(__p);
        }
      }
      if (v18)
      {
        unint64_t v19 = v18;
        operator delete(v18);
      }
      return;
  }
}

void sub_1921553F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v27 = v26;
  *(void *)(v25 + 8) = v27;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::generic_reshape_kernel::has_dynamic_top_shape(Espresso::generic_reshape_kernel *this, unint64_t a2)
{
  return a2 >= 2 && *((unsigned char *)this + 312) != 0;
}

void *Espresso::base_kernel::top_shapes_for_bottom_shapes@<X0>(long long **a1@<X1>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<Espresso::layer_shape>::__init_with_size[abi:ne180100]<Espresso::layer_shape*,Espresso::layer_shape*>(a2, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 6);
}

void Espresso::generic_reshape_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  *((void *)&v32 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1] - *a2;
  if (*(unsigned char *)(a1 + 312) || v6 != 128)
  {
    if (v6 >= 0x81)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Invalid argument");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v10 = *(_OWORD *)(v5 + 16);
    uint64_t v11 = *(void *)(v5 + 32);
    v14[0] = *(_OWORD *)v5;
    v14[1] = v10;
    uint64_t v15 = v11;
    long long __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v5 + 40), *(void *)(v5 + 48), (uint64_t)(*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 2);
    Espresso::generic_reshape_kernel::top_shape_using_auto_axis(a1, (int *)v14, (uint64_t)&v26);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
    v21[0] = v26;
    v21[1] = v27;
    uint64_t v22 = v28;
    long long v23 = 0;
    long long v24 = 0;
    uint64_t v25 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v23, v29, (uint64_t)v30, (v30 - (unsigned char *)v29) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v19 = a3;
    char v20 = 0;
    uint64_t v12 = (char *)operator new(0x40uLL);
    *a3 = v12;
    a3[1] = v12;
    a3[2] = v12 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v21, &v26, (uint64_t)v12);
    if (v23)
    {
      long long v24 = v23;
      operator delete(v23);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)(v5 + 80);
    long long v26 = *(_OWORD *)(v5 + 64);
    long long v27 = v7;
    int v8 = *(const void **)(v5 + 104);
    uint64_t v28 = *(void *)(v5 + 96);
    long long v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29, v8, *(void *)(v5 + 112), (uint64_t)(*(void *)(v5 + 112) - (void)v8) >> 2);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *(void *)&v21[0] = a3;
    BYTE8(v21[0]) = 0;
    int v9 = (char *)operator new(0x40uLL);
    *a3 = v9;
    a3[1] = v9;
    a3[2] = v9 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v26, &v32, (uint64_t)v9);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
}

void sub_1921556E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

int32x2_t Espresso::generic_reshape_kernel::top_shape_using_auto_axis@<D0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)a2);
  if (*(unsigned char *)(a1 + 313))
  {
    int v7 = a2[5];
    if (v7 == -1)
    {
      if (a2[4] == 1) {
        int v7 = 4;
      }
      else {
        int v7 = 5;
      }
    }
    int v8 = *(_DWORD *)(a1 + 300);
    if (v7 != v8) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int &>(v7, v8);
    }
  }
  if (!*(_DWORD *)(a1 + 308) || *(int *)(a1 + 316) < 2)
  {
    int v17 = *(_DWORD *)(a1 + 280);
    int v18 = *(_DWORD *)(a1 + 284);
    int v19 = *(_DWORD *)(a1 + 288);
    int v20 = *(_DWORD *)(a1 + 292);
    int v21 = *(_DWORD *)(a1 + 296);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(void *)(a3 + 56) = 0;
    *(_DWORD *)a3 = v17;
    *(_DWORD *)(a3 + 4) = v18;
    *(_DWORD *)(a3 + 8) = v19;
    *(_DWORD *)(a3 + 12) = v20;
    int v22 = *(_DWORD *)(a1 + 300);
    if (v22 == -1) {
      int v22 = 5;
    }
    *(_DWORD *)(a3 + 16) = v21;
    *(_DWORD *)(a3 + 20) = -1;
    if (v17)
    {
      if (v18) {
        goto LABEL_29;
      }
    }
    else
    {
      *(_DWORD *)a3 = *a2;
      if (v18)
      {
LABEL_29:
        if (v19) {
          goto LABEL_30;
        }
        goto LABEL_38;
      }
    }
    if (v22 < 2) {
      int v23 = 1;
    }
    else {
      int v23 = a2[1];
    }
    *(_DWORD *)(a3 + 4) = v23;
    if (v19)
    {
LABEL_30:
      if (v20) {
        goto LABEL_31;
      }
      goto LABEL_42;
    }
LABEL_38:
    if (v22 < 3) {
      int v24 = 1;
    }
    else {
      int v24 = a2[2];
    }
    *(_DWORD *)(a3 + 8) = v24;
    if (v20)
    {
LABEL_31:
      if (v21)
      {
LABEL_50:
        long long v27 = (Espresso *)Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v41, (const Espresso::layer_shape *)a3, 0);
        unint64_t known_element_count = Espresso::get_known_element_count(v27, v28);
        if (HIDWORD(known_element_count))
        {
          if (v6 && (int)known_element_count > v6) {
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>(*a2, a2[1], a2[2], a2[3], a2[4], *(_DWORD *)a3, *(_DWORD *)(a3 + 4), *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 12), *(_DWORD *)(a3 + 16));
          }
          if (*(_DWORD *)a3 == -1) {
            *(_DWORD *)a3 = v6 / (int)known_element_count;
          }
          if (*(_DWORD *)(a3 + 4) == -1) {
            *(_DWORD *)(a3 + 4) = v6 / (int)known_element_count;
          }
          if (*(_DWORD *)(a3 + 8) == -1) {
            *(_DWORD *)(a3 + 8) = v6 / (int)known_element_count;
          }
          if (*(_DWORD *)(a3 + 12) == -1) {
            *(_DWORD *)(a3 + 12) = v6 / (int)known_element_count;
          }
          if (*(_DWORD *)(a3 + 16) == -1) {
            *(_DWORD *)(a3 + 16) = v6 / (int)known_element_count;
          }
        }
        int v31 = *(_DWORD *)(a1 + 300);
        if ((v31 & 0x80000000) == 0) {
          *(_DWORD *)(a3 + 20) = v31;
        }
        return result;
      }
LABEL_46:
      if (v22 < 5) {
        int v26 = 1;
      }
      else {
        int v26 = a2[4];
      }
      *(_DWORD *)(a3 + 16) = v26;
      goto LABEL_50;
    }
LABEL_42:
    if (v22 < 4) {
      int v25 = 1;
    }
    else {
      int v25 = a2[3];
    }
    *(_DWORD *)(a3 + 12) = v25;
    if (v21) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v41, (const Espresso::layer_shape *)a2, 0);
  int v9 = *(_DWORD *)(a1 + 280);
  int8x16_t v10 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(a1 + 284));
  int8x16_t v38 = vextq_s8(v10, v10, 8uLL);
  int v39 = v9;
  int v40 = 5;
  if (*(int *)(a1 + 300) >= 0) {
    unint64_t v11 = *(unsigned int *)(a1 + 300);
  }
  else {
    unint64_t v11 = v41[5];
  }
  Espresso::layer_nd_shape::set_rank((Espresso::layer_nd_shape *)&v38, v11);
  int v13 = v40;
  if (v40)
  {
    unint64_t v14 = 0;
    do
    {
      if (!v38.i32[v14])
      {
        v38.i32[v14] = v41[v14];
        int v13 = v40;
      }
      ++v14;
    }
    while (v14 < v13);
  }
  unint64_t v15 = Espresso::get_known_element_count((Espresso *)&v38, v12);
  if (HIDWORD(v15))
  {
    if (v6 && (int)v15 > v6)
    {
      Espresso::layer_nd_shape::repr(&v37, (uint64_t)v41);
      int v32 = SHIBYTE(v37.__r_.__value_.__r.__words[2]);
      std::string::size_type v33 = v37.__r_.__value_.__r.__words[0];
      Espresso::layer_nd_shape::repr(&v36, (uint64_t)&v38);
      if (v32 >= 0) {
        unint64_t v34 = &v37;
      }
      else {
        unint64_t v34 = (std::string *)v33;
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v36;
      }
      else {
        uint64_t v35 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &,unsigned long>("generic_reshape_kernel: Invalid bottom shape (%s) for reshape to (%s)", (uint64_t)v34, (uint64_t)v35);
    }
    if (v13)
    {
      uint64_t v16 = 0;
      while (v38.i32[v16] != -1)
      {
        if (v13 == ++v16) {
          return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, a3);
        }
      }
      v38.i32[v16] = v6 / (int)v15;
    }
  }
  return Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, a3);
}

void sub_192155AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Espresso::get_known_element_count(Espresso *this, const Espresso::layer_nd_shape *a2)
{
  uint64_t v2 = *((int *)this + 5);
  if (!v2) {
    return 1;
  }
  LODWORD(v3) = 0;
  LODWORD(v4) = 1;
  do
  {
    int v6 = *(_DWORD *)this;
    this = (Espresso *)((char *)this + 4);
    int v5 = v6;
    BOOL v7 = v6 <= 1;
    if (v6 >= 1) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = (v3 + 1);
    }
    if (v7) {
      int v5 = 1;
    }
    uint64_t v4 = (v4 * v5);
    --v2;
  }
  while (v2);
  if (v3 > 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Invalid dst shape %d negatives", v3);
  }
  return v4 | ((unint64_t)(v3 == 1) << 32);
}

void Espresso::generic_expand_dims_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v42 = *MEMORY[0x1E4F143B8];
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v34, *a2, 0);
  Espresso::layer_nd_shape::shape_vector(&v33, (uint64_t)&v34);
  uint64_t v30 = a3;
  int v31 = 0;
  unint64_t v32 = 0;
  int v5 = *(_DWORD *)(a1 + 284);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  int v7 = v6 + HIDWORD(v35);
  if ((int)v6 + HIDWORD(v35) > 5)
  {
    long long v29 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      long long v29 = (void *)*v29;
    }
    *(void *)__x = v29;
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("generic_expand_dims_kernel: Output rank cannot be more than 5 in %s", __x);
  }
  int v8 = 0;
  int v9 = 0;
  for (uint64_t i = 0; i != v6; ++i)
  {
    if (*(int *)(a1 + 284) <= 0) {
      unint64_t v11 = (int *)(a1 + 280);
    }
    else {
      unint64_t v11 = (int *)(a1 + 4 * i + 288);
    }
    int v12 = *v11;
    int v13 = v7 & (v12 >> 31);
    int v14 = v13 + v12;
    if (v13 + v12 < 0 || v14 >= v7) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid axis %d for rank %zu", (v13 + v12), SHIDWORD(v35));
    }
    unint64_t v15 = v8;
    if (v8 != v9)
    {
      while (*v15 != v14)
      {
        if (++v15 == v9)
        {
          unint64_t v15 = v9;
          break;
        }
      }
    }
    if (v15 != v9) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("All the values in the 'axes' parameter of expand_dims kernel must be unique");
    }
    if ((unint64_t)v9 >= v32)
    {
      uint64_t v16 = v9 - v8;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v32 - (void)v8;
      if ((uint64_t)(v32 - (void)v8) >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v19);
      }
      else {
        uint64_t v20 = 0;
      }
      int v21 = (int *)(v19 + 4 * v16);
      *int v21 = v14;
      for (uint64_t j = v21 + 1; v9 != v8; --v21)
      {
        int v23 = *--v9;
        *(v21 - 1) = v23;
      }
      int v31 = v21;
      unint64_t v32 = v19 + 4 * v20;
      if (v8) {
        operator delete(v8);
      }
      int v8 = v21;
      int v9 = j;
    }
    else
    {
      *v9++ = v14;
    }
  }
  std::__sort<std::__less<int,int> &,int *>();
  if (v9 != v31)
  {
    unint64_t v24 = 0;
    do
    {
      v25.__i_ = &v33.__begin_[v31[v24]];
      __x[0] = 1;
      std::vector<int>::insert(&v33, v25, __x);
      ++v24;
    }
    while (v9 - v31 > v24);
  }
  memset(__x, 0, sizeof(__x));
  LODWORD(v39) = 0;
  int64_t v26 = (char *)v33.__end_ - (char *)v33.__begin_;
  if (v33.__end_ != v33.__begin_)
  {
    uint64_t v27 = v26 >> 2;
    if ((unint64_t)(v26 >> 2) <= 1) {
      uint64_t v27 = 1;
    }
    memcpy(__x, v33.__begin_, 4 * v27);
  }
  HIDWORD(v39) = (unint64_t)v26 >> 2;
  long long v34 = *(_OWORD *)__x;
  uint64_t v35 = v39;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v34, 0, (uint64_t)__x);
  void *v30 = 0;
  v30[1] = 0;
  v30[2] = 0;
  std::string v36 = v30;
  char v37 = 0;
  uint64_t v28 = (char *)operator new(0x40uLL);
  void *v30 = v28;
  v30[1] = v28;
  v30[2] = v28 + 64;
  v30[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(v30 + 2), (long long *)__x, &v42, (uint64_t)v28);
  if (__p)
  {
    uint64_t v41 = __p;
    operator delete(__p);
  }
  if (v31) {
    operator delete(v31);
  }
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
}

void sub_192155EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  *(void *)(v29 + 8) = v30;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a21);
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::value_type *__x)
{
  int v5 = this;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    std::vector<int>::pointer begin = this->__begin_;
    unint64_t v14 = end - this->__begin_ + 1;
    if (v14 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)__position.__i_ - (char *)begin;
    uint64_t v16 = __position.__i_ - begin;
    uint64_t v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14) {
      unint64_t v14 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    __v.__end_cap_.__value_ = (std::allocator<int> *)p_end_cap;
    if (v18)
    {
      uint64_t v20 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    int v21 = &v20[v16];
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (begin == __position.__i_) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 1;
        }
        unint64_t v24 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        int v21 = (int *)((char *)v24 + (v23 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v24;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v24[v25];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= v22 >> 1;
        __v.__begin_ = v21;
      }
    }
    *int v21 = *__x;
    __v.__end_ = v21 + 1;
    std::vector<int>::__swap_out_circular_buffer(v5, &__v, (std::vector<int>::pointer)__position.__i_);
    this = (std::vector<int> *)__v.__first_;
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    std::__wrap_iter<const int *>::iterator_type v9 = __position.__i_ + 1;
    int8x16_t v10 = end - 1;
    std::vector<int>::pointer v11 = this->__end_;
    while (v10 < end)
    {
      int v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9) {
      this = (std::vector<int> *)memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    }
    *__position.__i_ = *__x;
  }
  return (std::vector<int>::iterator)this;
}

void sub_1921560FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  std::vector<int>::pointer begin = __v->__begin_;
  std::vector<int>::pointer v6 = this->__begin_;
  int v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<int>::pointer v8 = __p;
    int v7 = __v->__begin_;
    do
    {
      int v9 = *--v8;
      *--int v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    int v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  int v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void Espresso::generic_squeeze_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v68 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const Espresso::layer_shape **)a2;
  if (*(void *)(a2 + 8) - (void)v4 != 64) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_squeeze_kernel: one input required");
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v60, v4, 0);
  if (!HIDWORD(v61))
  {
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    __src.__begin_ = (std::vector<int>::pointer)a3;
    LOBYTE(__src.__end_) = 0;
    int v9 = (char *)operator new(0x40uLL);
    *(void *)a3 = v9;
    *(void *)(a3 + 8) = v9;
    *(void *)(a3 + 16) = v9 + 64;
    *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, &__dst, &v68, (uint64_t)v9);
    int8x16_t v10 = __p;
    if (!__p) {
      return;
    }
    uint64_t v67 = __p;
    goto LABEL_100;
  }
  Espresso::layer_nd_shape::shape_vector(&__src, (uint64_t)&v60);
  long long v57 = 0;
  unint64_t v58 = 0;
  if (*(unsigned char *)(a1 + 416))
  {
    std::vector<int>::pointer begin = __src.__begin_;
    end = __src.__end_;
    if (__src.__begin_ == __src.__end_)
    {
      end = __src.__begin_;
    }
    else
    {
      while (*begin != 1)
      {
        if (++begin == __src.__end_) {
          goto LABEL_66;
        }
      }
      if (begin != __src.__end_)
      {
        for (uint64_t i = begin + 1; i != end; ++i)
        {
          if (*i != 1) {
            *begin++ = *i;
          }
        }
      }
      if (begin != end)
      {
        end = begin;
        __src.__end_ = begin;
      }
    }
LABEL_66:
    std::vector<int>::pointer v36 = __src.__begin_;
    if (*(int *)(a1 + 420) <= 1)
    {
      uint64_t v37 = (char *)end - (char *)__src.__begin_;
      if (end == __src.__begin_)
      {
        if (end >= __src.__end_cap_.__value_)
        {
          uint64_t v42 = v37 >> 2;
          int64_t v43 = (char *)__src.__end_cap_.__value_ - (char *)__src.__begin_;
          if (((char *)__src.__end_cap_.__value_ - (char *)__src.__begin_) >> 1 <= (unint64_t)((v37 >> 2) + 1)) {
            uint64_t v44 = v42 + 1;
          }
          else {
            uint64_t v44 = v43 >> 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          unint64_t v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v45);
          std::vector<int>::pointer v47 = __src.__begin_;
          std::vector<int>::pointer v48 = __src.__end_;
          long long v49 = (int *)&v46[4 * v42];
          uint64_t v51 = (int *)&v46[4 * v50];
          *long long v49 = 1;
          end = v49 + 1;
          while (v48 != v47)
          {
            int v52 = *--v48;
            *--long long v49 = v52;
          }
          __src.__begin_ = v49;
          __src.__end_ = end;
          __src.__end_cap_.__value_ = v51;
          if (v47) {
            operator delete(v47);
          }
        }
        else
        {
          *end++ = 1;
        }
        __src.__end_ = end;
        std::vector<int>::pointer v36 = __src.__begin_;
      }
    }
    long long __dst = 0uLL;
    LODWORD(v65) = 0;
    uint64_t v53 = (char *)end - (char *)v36;
    if (end != v36)
    {
      uint64_t v54 = v53 >> 2;
      if ((unint64_t)(v53 >> 2) <= 1) {
        uint64_t v54 = 1;
      }
      memcpy(&__dst, v36, 4 * v54);
    }
    HIDWORD(v65) = (unint64_t)v53 >> 2;
    long long v60 = __dst;
    uint64_t v61 = v65;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    long long v62 = (void *)a3;
    char v63 = 0;
    int v55 = (char *)operator new(0x40uLL);
    *(void *)a3 = v55;
    *(void *)(a3 + 8) = v55;
    *(void *)(a3 + 16) = v55 + 64;
    *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>(a3 + 16, &__dst, &v68, (uint64_t)v55);
    uint64_t v41 = __p;
    if (!__p) {
      goto LABEL_98;
    }
    uint64_t v67 = __p;
  }
  else
  {
    unint64_t v56 = (void *)a3;
    std::__split_buffer<int>::pointer v11 = 0;
    int64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = *(_DWORD *)(a1 + 284);
    if (v14 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v14;
    }
    do
    {
      if (*(int *)(a1 + 284) <= 0) {
        uint64_t v16 = (unsigned int *)(a1 + 280);
      }
      else {
        uint64_t v16 = (unsigned int *)(a1 + 4 * v13 + 288);
      }
      uint64_t v17 = *v16;
      if ((v17 & 0x80000000) != 0 && (uint64_t v17 = (HIDWORD(v61) + v17), (int)v17 < 0)
        || SHIDWORD(v61) <= (unint64_t)v17)
      {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Invalid axis %d for rank %zu", v17, SHIDWORD(v61));
      }
      uint64_t v18 = *((unsigned int *)&v60 + v17);
      if (v18 != 1) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Cannot squeeze a dimension whose value is not 1: shape[%d]=%d", v17, v18);
      }
      uint64_t v19 = v11;
      if (v11 != v12)
      {
        while (*(_DWORD *)v19 != v17)
        {
          v19 += 4;
          if (v19 == v12)
          {
            uint64_t v19 = v12;
            break;
          }
        }
      }
      if (v19 != v12) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("All the values in the 'axes' parameter of squeeze kernel must be unique");
      }
      if ((unint64_t)v12 >= v58)
      {
        uint64_t v20 = (v12 - v11) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v22 = v58 - (void)v11;
        if ((uint64_t)(v58 - (void)v11) >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23) {
          unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v25 = (char *)(v23 + 4 * v20);
        *(_DWORD *)uint64_t v25 = v17;
        for (uint64_t j = v25 + 4; v12 != v11; v25 -= 4)
        {
          int v27 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v25 - 1) = v27;
        }
        long long v57 = v25;
        unint64_t v58 = v23 + 4 * v24;
        if (v11) {
          operator delete(v11);
        }
        std::__split_buffer<int>::pointer v11 = v25;
        int64_t v12 = j;
      }
      else
      {
        *(_DWORD *)int64_t v12 = v17;
        v12 += 4;
      }
      ++v13;
    }
    while (v13 != v15);
    unint64_t v28 = 126 - 2 * __clz((v12 - v57) >> 2);
    if (v12 == v57) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(v12, v12, (uint64_t)v57, v57, v29, 1);
    if (v12 == v57)
    {
      int v31 = __src.__end_;
    }
    else
    {
      unint64_t v30 = 0;
      int v31 = __src.__end_;
      do
      {
        if (*(int *)(a1 + 420) > 1 || (unint64_t)((char *)v31 - (char *)__src.__begin_) >= 5)
        {
          std::vector<int> v33 = &__src.__begin_[*(int *)&v57[4 * v30]];
          int64_t v34 = (char *)v31 - (char *)(v33 + 1);
          if (v31 != v33 + 1) {
            memmove(&__src.__begin_[*(int *)&v57[4 * v30]], v33 + 1, (char *)v31 - (char *)(v33 + 1));
          }
          int v31 = (int *)((char *)v33 + v34);
          __src.__end_ = (int *)((char *)v33 + v34);
        }
        ++v30;
      }
      while (v30 < (v12 - v57) >> 2);
    }
    long long __dst = 0uLL;
    LODWORD(v65) = 0;
    uint64_t v38 = (char *)v31 - (char *)__src.__begin_;
    if (v31 != __src.__begin_)
    {
      uint64_t v39 = v38 >> 2;
      if ((unint64_t)(v38 >> 2) <= 1) {
        uint64_t v39 = 1;
      }
      memcpy(&__dst, __src.__begin_, 4 * v39);
    }
    HIDWORD(v65) = (unint64_t)v38 >> 2;
    long long v60 = __dst;
    uint64_t v61 = v65;
    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v60, 0, (uint64_t)&__dst);
    *unint64_t v56 = 0;
    v56[1] = 0;
    v56[2] = 0;
    long long v62 = v56;
    char v63 = 0;
    int v40 = (char *)operator new(0x40uLL);
    *unint64_t v56 = v40;
    v56[1] = v40;
    v56[2] = v40 + 64;
    v56[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(v56 + 2), &__dst, &v68, (uint64_t)v40);
    if (__p)
    {
      uint64_t v67 = __p;
      operator delete(__p);
    }
    if (!v57) {
      goto LABEL_98;
    }
    uint64_t v41 = v57;
  }
  operator delete(v41);
LABEL_98:
  int8x16_t v10 = __src.__begin_;
  if (!__src.__begin_) {
    return;
  }
  __src.__end_ = __src.__begin_;
LABEL_100:
  operator delete(v10);
}

void sub_1921567C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fill_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a3[1] == *a3) {
    int32x4_t v52 = 0uLL;
  }
  else {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v52, *a3);
  }
  std::vector<int>::pointer v8 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) == *(void *)a4 || !*(unsigned char *)(a1 + 312)) {
    goto LABEL_46;
  }
  int v9 = *(_DWORD *)(a1 + 300);
  *(_OWORD *)&v49[8] = 0u;
  long long v50 = 0u;
  uint64_t v51 = 0;
  int32x4_t v48 = *(int32x4_t *)(a1 + 284);
  *(_DWORD *)long long v49 = v9;
  *(_DWORD *)&v49[4] = -1;
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v46, v8);
  if (!*(void *)(*(void *)a2 + 64))
  {
    std::vector<int>::pointer v36 = "fill_kernel_cpu: dynamic parameters require interpreter";
    goto LABEL_59;
  }
  uint64_t v10 = v46;
  std::vector<int>::size_type v11 = *(int *)(v46 + 8);
  if (*(_DWORD *)(a1 + 308))
  {
    uint64_t v12 = 0;
    unint64_t v13 = *(int *)(v46 + 8);
    do
    {
      v13 *= *(int *)(v46 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    if (v13 <= 5)
    {
      for (uint64_t i = 0; i != 12; i += 4)
        v11 *= *(int *)(v46 + 12 + i);
      std::vector<int>::vector(&v45, v11);
      unint64_t v15 = 0;
      std::vector<int>::pointer begin = v45.__begin_;
      while (1)
      {
        uint64_t v17 = 0;
        unint64_t v18 = *(int *)(v10 + 8);
        do
        {
          v18 *= *(int *)(v10 + 12 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        if (v18 <= v15) {
          break;
        }
        begin[v15] = (int)(float)(*(float *)(*(void *)(v10 + 24) + 4 * v15) + 0.5);
        ++v15;
      }
      v43[0] = 0;
      v43[1] = 0;
      uint64_t v44 = 0;
      std::vector<int>::pointer v19 = v45.__begin_;
      int64_t v20 = (char *)v45.__end_ - (char *)v45.__begin_;
      if (v45.__end_ != v45.__begin_)
      {
        uint64_t v21 = v20 >> 2;
        if ((unint64_t)(v20 >> 2) <= 1) {
          uint64_t v21 = 1;
        }
        uint64_t v22 = v43;
        do
        {
          int v23 = *v19++;
          *v22++ = v23;
          --v21;
        }
        while (v21);
      }
      HIDWORD(v44) = (unint64_t)v20 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v43, 0, (uint64_t)v39);
      int32x4_t v48 = v39[0];
      *(int32x4_t *)long long v49 = v39[1];
      *(void *)&v49[16] = v40;
      if ((void)v50)
      {
        *((void *)&v50 + 1) = v50;
        operator delete((void *)v50);
      }
      long long v50 = *(_OWORD *)__p;
      uint64_t v51 = v42;
      if (v45.__begin_)
      {
        v45.__end_ = v45.__begin_;
        operator delete(v45.__begin_);
      }
      goto LABEL_31;
    }
    std::vector<int>::pointer v36 = "fill_kernel_cpu: invalid rank";
LABEL_59:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v36);
  }
  for (uint64_t j = 0; j != 12; j += 4)
    v11 *= *(int *)(v46 + 12 + j);
  if (v11 != 5)
  {
    std::vector<int>::pointer v36 = "Blob with full 5d shape is required as fill argument";
    goto LABEL_59;
  }
  uint64_t v25 = *(float32x4_t **)(v46 + 24);
  v26.i64[0] = 0x3F0000003F000000;
  v26.i64[1] = 0x3F0000003F000000;
  int32x4_t v48 = vcvtq_s32_f32(vaddq_f32(*v25, v26));
  *(_DWORD *)long long v49 = (int)(float)(v25[1].f32[0] + 0.5);
LABEL_31:
  Espresso::abstract_blob_container::shape(v39[0].i8, **a3);
  BOOL v27 = Espresso::layer_shape::operator==((uint64_t)v39, (uint64_t)&v48);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v27)
  {
    unint64_t v28 = (std::__shared_weak_count *)operator new(0x98uLL);
    v28->__shared_weak_owners_ = 0;
    v28->__shared_owners_ = 0;
    v28->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE3896B8;
    *(_OWORD *)&v28[2].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v28[3].__shared_owners_ = 0u;
    *(_OWORD *)&v28[1].__shared_owners_ = 0u;
    v28[2].std::__shared_count = 0u;
    v28[4].std::__shared_count = 0u;
    *(_OWORD *)&v28[4].__shared_weak_owners_ = 0u;
    *(_OWORD *)&v28[5].__shared_owners_ = 0u;
    v28[5].__shared_weak_owners_ = 0;
    v28[6].__vftable = 0;
    LODWORD(v28[2].__vftable) = 1065353216;
    v28[2].__shared_owners_ = 0x1FFFFFFFFLL;
    v28[4].__vftable = 0;
    v28[4].__shared_owners_ = 0;
    v28[2].__shared_weak_owners_ = 0;
    v28[3].__vftable = 0;
    LOBYTE(v28[3].__shared_weak_owners_) = 0;
    v28[3].__shared_owners_ = 0;
    v28[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE36B910;
    v28[5].__vftable = 0;
    v28[5].__shared_owners_ = 0;
    LOBYTE(v28[6].__vftable) = 0;
    LOBYTE(v28[6].__vftable) = *(unsigned char *)(*(void *)(a1 + 8) + 126);
    uint64_t v29 = **a3;
    uint64_t v37 = v28 + 1;
    uint64_t v38 = v28;
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(uint64_t, int32x4_t *, std::__shared_weak_count **))(*(void *)v29 + 16))(v29, &v48, &v37);
    if (v38) {
      nitro::nitro_function::nitro_function(v38);
    }
    nitro::nitro_function::nitro_function(v28);
  }
  if (a3[1] == *a3)
  {
    int32x4_t v30 = 0uLL;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(v39, *a3);
    int32x4_t v30 = v39[0];
  }
  int v31 = (std::__shared_weak_count *)v52.i64[1];
  int32x4_t v52 = v30;
  if (v31) {
    nitro::nitro_function::nitro_function(v31);
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
  if ((void)v50)
  {
    *((void *)&v50 + 1) = v50;
    operator delete((void *)v50);
  }
LABEL_46:
  if (v52.i64[0])
  {
    uint64_t v32 = 0;
    vDSP_Length v33 = *(int *)(v52.i64[0] + 8);
    vDSP_Length v34 = v33;
    do
    {
      v34 *= *(int *)(v52.i64[0] + 12 + v32);
      v32 += 4;
    }
    while (v32 != 12);
    if (v34)
    {
      for (uint64_t k = 0; k != 12; k += 4)
        v33 *= *(int *)(v52.i64[0] + 12 + k);
      vDSP_vfill((const float *)(a1 + 280), *(float **)(v52.i64[0] + 24), 1, v33);
    }
  }
  if (v52.i64[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v52.i64[1]);
  }
}

void sub_192156CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  nitro::nitro_function::nitro_function(v26);
  if (a26) {
    nitro::nitro_function::nitro_function(a26);
  }
  uint64_t v29 = *(void **)(v27 - 88);
  if (v29)
  {
    *(void *)(v27 - 80) = v29;
    operator delete(v29);
  }
  int32x4_t v30 = *(std::__shared_weak_count **)(v27 - 56);
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  _Unwind_Resume(a1);
}

int32x2_t Espresso::layer_nd_shape::to_canonical_5d_shape@<D0>(Espresso::layer_nd_shape *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 24) = 0u;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)a3 = xmmword_192DC3600;
  *(void *)(a3 + 16) = 0xFFFFFFFF00000001;
  int v4 = *((_DWORD *)this + 5);
  if (a2)
  {
    int32x2_t v5 = (int32x2_t)0x100000001;
    int v6 = 1;
    int v7 = 1;
    int v8 = 1;
    switch(v4)
    {
      case 0:
        goto LABEL_12;
      case 1:
        goto LABEL_11;
      case 2:
        goto LABEL_6;
      case 3:
        goto LABEL_8;
      case 4:
        goto LABEL_5;
      case 5:
        goto LABEL_7;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v16, *((int *)this + 5));
        std::vector<int>::size_type v11 = std::string::insert(&v16, 0, "Invalid rank: ");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v17);
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  int32x2_t v5 = (int32x2_t)0x100000001;
  int v6 = 1;
  int v7 = 1;
  int v8 = 1;
  switch(v4)
  {
    case 0:
      break;
    case 1:
      v5.i32[0] = 1;
      v5.i32[1] = *(_DWORD *)this;
      break;
    case 2:
      int32x2_t v5 = *(int32x2_t *)this;
      break;
    case 3:
      int32x2_t v5 = *(int32x2_t *)((char *)this + 4);
LABEL_11:
      int v6 = *(_DWORD *)this;
      break;
    case 4:
LABEL_5:
      int32x2_t v5 = *(int32x2_t *)((char *)this + 8);
LABEL_6:
      int v7 = *(_DWORD *)this;
      int v6 = *((_DWORD *)this + 1);
      break;
    case 5:
LABEL_7:
      int32x2_t v5 = *(int32x2_t *)((char *)this + 12);
LABEL_8:
      int v7 = *((_DWORD *)this + 1);
      int v6 = *((_DWORD *)this + 2);
      int v8 = *(_DWORD *)this;
      break;
    default:
      unint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v16, *((int *)this + 5));
      int v14 = std::string::insert(&v16, 0, "Invalid rank: ");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v13, &v17);
      __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_12:
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  int32x2_t result = vrev64_s32(v5);
  *(int32x2_t *)a3 = result;
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v7;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v4;
  return result;
}

void sub_192156F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(_DWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5, char a6)
{
  while (2)
  {
    while (2)
    {
      while (2)
      {
        uint64_t v89 = a1;
        uint64_t v12 = (uint64_t)a1;
        for (uint64_t i = a2; ; uint64_t i = v28)
        {
          uint64_t v14 = i - a4;
          unint64_t v15 = (i - a4) >> 2;
          if (v7 || !v6)
          {
            switch(v15)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                int v45 = *((_DWORD *)i - 1);
                if (*(_DWORD *)a4 < v45)
                {
                  *((_DWORD *)i - 1) = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v45;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), a3, (uint64_t)(a4 + 4));
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), (uint64_t)(i - 8), (uint64_t)(i - 8), a3, (uint64_t)(a4 + 4));
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v12, (uint64_t)i, (uint64_t)(i - 4), (uint64_t)(i - 4), (uint64_t)(i - 8), (uint64_t)(i - 8), (uint64_t)(i - 12), (uint64_t)(i - 12), a3, (uint64_t)(a4 + 4));
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 95)
          {
            uint64_t v46 = i - 4;
            BOOL v48 = i == a4 || v46 == a4;
            if (a6)
            {
              if (!v48)
              {
                uint64_t v49 = 0;
                long long v50 = i - 4;
                do
                {
                  int v52 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  int v51 = v52;
                  int v53 = *(_DWORD *)v46;
                  if (v52 < v53)
                  {
                    uint64_t v54 = v49;
                    while (1)
                    {
                      uint64_t v55 = v54;
                      unint64_t v56 = &i[v54];
                      *((_DWORD *)v56 - 2) = v53;
                      if (!v55) {
                        break;
                      }
                      int v53 = *(_DWORD *)&i[v55];
                      uint64_t v54 = v55 + 4;
                      if (v51 >= v53)
                      {
                        long long v57 = &i[v55 - 4];
                        goto LABEL_76;
                      }
                    }
                    long long v57 = v56 - 4;
LABEL_76:
                    *(_DWORD *)long long v57 = v51;
                  }
                  v49 -= 4;
                  uint64_t v46 = v50;
                }
                while (v50 != a4);
              }
            }
            else if (!v48)
            {
              unint64_t v83 = i - 8;
              int v84 = i - 4;
              do
              {
                int v86 = *((_DWORD *)v84 - 1);
                v84 -= 4;
                int v85 = v86;
                int v87 = *(_DWORD *)v46;
                if (v86 < v87)
                {
                  int v88 = v83;
                  do
                  {
                    *(_DWORD *)int v88 = v87;
                    int v87 = *((_DWORD *)v88 + 2);
                    v88 += 4;
                  }
                  while (v85 < v87);
                  *(_DWORD *)int v88 = v85;
                }
                v83 -= 4;
                uint64_t v46 = v84;
              }
              while (v84 != a4);
            }
            return;
          }
          if (!a5)
          {
            if (i != a4)
            {
              int64_t v58 = (v15 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= (4 * v59) >> 2)
                {
                  uint64_t v61 = (4 * v59) >> 1;
                  uint64_t v62 = v61 | 1;
                  char v63 = &i[-4 * (v61 | 1)];
                  uint64_t v64 = v61 + 2;
                  if (v64 < (uint64_t)v15 && *((_DWORD *)v63 - 1) < *((_DWORD *)v63 - 2))
                  {
                    v63 -= 4;
                    uint64_t v62 = v64;
                  }
                  uint64_t v65 = &i[-4 * v60];
                  int v66 = *((_DWORD *)v63 - 1);
                  int v67 = *((_DWORD *)v65 - 1);
                  if (v66 >= v67)
                  {
                    do
                    {
                      *((_DWORD *)v65 - 1) = v66;
                      uint64_t v65 = v63;
                      if (v58 < v62) {
                        break;
                      }
                      uint64_t v68 = (2 * v62) | 1;
                      char v63 = &i[-4 * v68];
                      uint64_t v69 = 2 * v62 + 2;
                      if (v69 < (uint64_t)v15 && *((_DWORD *)v63 - 1) < *((_DWORD *)v63 - 2))
                      {
                        v63 -= 4;
                        uint64_t v68 = v69;
                      }
                      int v66 = *((_DWORD *)v63 - 1);
                      uint64_t v62 = v68;
                    }
                    while (v66 >= v67);
                    *((_DWORD *)v65 - 1) = v67;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v70 = (unint64_t)v14 >> 2;
              do
              {
                uint64_t v71 = 0;
                int v72 = *((_DWORD *)i - 1);
                long long v73 = i;
                do
                {
                  long long v74 = &v73[4 * ~v71];
                  uint64_t v75 = (2 * v71) | 1;
                  uint64_t v76 = 2 * v71 + 2;
                  if (v76 < v70 && *((_DWORD *)v74 - 1) < *((_DWORD *)v74 - 2))
                  {
                    v74 -= 4;
                    uint64_t v75 = v76;
                  }
                  *((_DWORD *)v73 - 1) = *((_DWORD *)v74 - 1);
                  long long v73 = v74;
                  uint64_t v71 = v75;
                }
                while (v75 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
                uint64_t v77 = v74 - 4;
                if (v74 == a4 + 4)
                {
                  *(_DWORD *)uint64_t v77 = v72;
                }
                else
                {
                  *(_DWORD *)uint64_t v77 = *(_DWORD *)a4;
                  *(_DWORD *)a4 = v72;
                  if (i - v77 >= 5)
                  {
                    unint64_t v78 = (((unint64_t)(i - v77) >> 2) - 2) >> 1;
                    std::string v79 = &i[-4 * v78];
                    int v80 = *((_DWORD *)v79 - 1);
                    int v81 = *(_DWORD *)v77;
                    if (v80 < v81)
                    {
                      do
                      {
                        *((_DWORD *)v74 - 1) = v80;
                        long long v74 = v79;
                        if (!v78) {
                          break;
                        }
                        unint64_t v78 = (v78 - 1) >> 1;
                        std::string v79 = &i[-4 * v78];
                        int v80 = *((_DWORD *)v79 - 1);
                      }
                      while (v80 < v81);
                      *((_DWORD *)v74 - 1) = v81;
                    }
                  }
                }
                a4 += 4;
              }
              while (v70-- > 2);
            }
            return;
          }
          unint64_t v16 = v15 >> 1;
          uint64_t v17 = (uint64_t)&i[-4 * (v15 >> 1)];
          if ((unint64_t)v14 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v12, (uint64_t)i, (uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
            uint64_t v18 = v12;
            uint64_t v19 = (uint64_t)&i[4 * (1 - v16)];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)(i - 4), (uint64_t)(i - 4), v19, v19, (uint64_t)(a4 + 8), (uint64_t)(a4 + 8));
            uint64_t v20 = (uint64_t)&i[4 * ~v16];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)(i - 8), (uint64_t)(i - 8), v20, v20, (uint64_t)(a4 + 12), (uint64_t)(a4 + 12));
            uint64_t v21 = v19;
            uint64_t v22 = v19;
            uint64_t v12 = v18;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v21, v22, v17, v17, v20, v20);
            int v23 = *((_DWORD *)i - 1);
            *((_DWORD *)i - 1) = *(_DWORD *)(v17 - 4);
            *(_DWORD *)(v17 - 4) = v23;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)&i[-4 * (v15 >> 1)], (uint64_t)&i[-4 * (v15 >> 1)], v12, (uint64_t)i, (uint64_t)(a4 + 4), (uint64_t)(a4 + 4));
          }
          --a5;
          uint64_t v24 = i - 4;
          if (a6) {
            break;
          }
          int v25 = *((_DWORD *)i - 1);
          if (*(_DWORD *)i < v25) {
            goto LABEL_29;
          }
          float32x4_t v26 = i - 4;
          if (v25 >= *(_DWORD *)a4)
          {
            do
            {
              unint64_t v28 = v26;
              if (v26 <= a4) {
                break;
              }
              v26 -= 4;
            }
            while (v25 >= *((_DWORD *)v28 - 1));
          }
          else
          {
            uint64_t v27 = i;
            do
            {
              unint64_t v28 = v27 - 4;
              int v29 = *((_DWORD *)v27 - 2);
              v27 -= 4;
            }
            while (v25 >= v29);
          }
          int32x4_t v30 = a4;
          if (v28 > a4)
          {
            int32x4_t v30 = a4;
            do
            {
              int v31 = *(_DWORD *)v30;
              v30 += 4;
            }
            while (v25 < v31);
          }
          while (v30 < v28)
          {
            int v32 = *((_DWORD *)v28 - 1);
            *((_DWORD *)v28 - 1) = *((_DWORD *)v30 - 1);
            *((_DWORD *)v30 - 1) = v32;
            do
            {
              int v33 = *((_DWORD *)v28 - 2);
              v28 -= 4;
            }
            while (v25 >= v33);
            do
            {
              int v34 = *(_DWORD *)v30;
              v30 += 4;
            }
            while (v25 < v34);
          }
          BOOL v6 = v28 + 4 >= i;
          BOOL v7 = v28 + 4 == i;
          if (v28 + 4 != i) {
            *(_DWORD *)uint64_t v24 = *(_DWORD *)v28;
          }
          a6 = 0;
          *(_DWORD *)unint64_t v28 = v25;
        }
        int v25 = *(_DWORD *)v24;
LABEL_29:
        uint64_t v35 = i;
        do
        {
          std::vector<int>::pointer v36 = v35;
          v35 -= 4;
        }
        while (*((_DWORD *)v36 - 2) < v25);
        uint64_t v37 = a4;
        if (v36 == i)
        {
          uint64_t v37 = a4;
          do
          {
            if (v37 >= v35) {
              break;
            }
            int v39 = *(_DWORD *)v37;
            v37 += 4;
          }
          while (v39 >= v25);
        }
        else
        {
          do
          {
            int v38 = *(_DWORD *)v37;
            v37 += 4;
          }
          while (v38 >= v25);
        }
        a2 = v35;
        if (v37 < v35)
        {
          uint64_t v40 = v37;
          do
          {
            int v41 = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = *((_DWORD *)v40 - 1);
            *((_DWORD *)v40 - 1) = v41;
            do
            {
              int v42 = *((_DWORD *)a2 - 2);
              a2 -= 4;
            }
            while (v42 < v25);
            do
            {
              int v43 = *(_DWORD *)v40;
              v40 += 4;
            }
            while (v43 >= v25);
          }
          while (v40 < a2);
        }
        if (a2 + 4 != i) {
          *(_DWORD *)uint64_t v24 = *(_DWORD *)a2;
        }
        *(_DWORD *)a2 = v25;
        if (v37 < v35)
        {
LABEL_50:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>,false>(v12, i, a2 + 4, a2 + 4, a5, a6 & 1);
          a6 = 0;
          a1 = a2 + 4;
          continue;
        }
        break;
      }
      char v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>(v12, (uint64_t)i, (uint64_t)(a2 + 4), (_DWORD *)a2 + 1);
      if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<int *>>>((uint64_t)a2, (uint64_t)a2, a3, a4))
      {
        a1 = a2 + 4;
        if (v44) {
          continue;
        }
        goto LABEL_50;
      }
      break;
    }
    a3 = (uint64_t)(a2 + 4);
    a4 = a2 + 4;
    a2 = i;
    a1 = v89;
    if ((v44 & 1) == 0) {
      continue;
    }
    break;
  }
}

void Espresso::generic_stack_nd_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const Espresso::layer_shape **a2@<X1>, void *a3@<X8>)
{
  *(void *)&long long v39 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  int32x2_t v5 = a2[1];
  if (v5 == *a2) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice_kernel: atleast one bottom blob required");
  }
  uint64_t v29 = 0;
  int32x4_t v30 = 0;
  v31[0] = 0;
  do
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v25, v4, 0);
    Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v25);
    BOOL v7 = v30;
    if ((unint64_t)v30 >= v31[0])
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((v31[0] - v29) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * ((v31[0] - v29) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v31[0] - v29) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      std::vector<int>::pointer v36 = v31;
      std::vector<int>::size_type v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
      uint64_t v12 = (std::vector<int> *)&v11[24 * v8];
      *(void *)&long long v33 = v11;
      *((void *)&v33 + 1) = v12;
      uint64_t v35 = &v11[24 * v13];
      v12->__begin_ = 0;
      v12->__end_ = 0;
      v12->__end_cap_.__value_ = 0;
      *uint64_t v12 = __p;
      memset(&__p, 0, sizeof(__p));
      int v34 = v12 + 1;
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(&v29, &v33);
      uint64_t v14 = v30;
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v33);
      int32x4_t v30 = v14;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    else
    {
      v30->__begin_ = 0;
      v7->__end_ = 0;
      v7->__end_cap_.__value_ = 0;
      *BOOL v7 = __p;
      memset(&__p, 0, sizeof(__p));
      int32x4_t v30 = v7 + 1;
    }
    int v4 = (const Espresso::layer_shape *)((char *)v4 + 64);
  }
  while (v4 != v5);
  int v15 = *((_DWORD *)*a2 + 5);
  if (v15 == -1)
  {
    if (*((_DWORD *)*a2 + 4) == 1) {
      int v15 = 4;
    }
    else {
      int v15 = 5;
    }
  }
  std::vector<int>::vector(&__p, v15 + 1);
  int v16 = *(_DWORD *)(a1 + 280);
  memset(v24, 0, sizeof(v24));
  std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(v24, v29, (uint64_t)v30, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - v29) >> 3));
  NDLayers::stack_nd_shape_computation(v16, v24, (char **)&__p);
  *(void *)&long long v33 = v24;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v25[0] = 0;
  v25[1] = 0;
  int v26 = 0;
  std::vector<int>::pointer begin = __p.__begin_;
  int64_t v18 = (char *)__p.__end_ - (char *)__p.__begin_;
  if (__p.__end_ != __p.__begin_)
  {
    uint64_t v19 = v18 >> 2;
    if ((unint64_t)(v18 >> 2) <= 1) {
      uint64_t v19 = 1;
    }
    uint64_t v20 = v25;
    do
    {
      int v21 = *begin++;
      *v20++ = v21;
      --v19;
    }
    while (v19);
  }
  int v27 = (unint64_t)v18 >> 2;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v25, 0, (uint64_t)&v33);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31[1] = a3;
  char v32 = 0;
  uint64_t v22 = (char *)operator new(0x40uLL);
  *a3 = v22;
  a3[1] = v22;
  a3[2] = v22 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v33, &v39, (uint64_t)v22);
  if (v37)
  {
    int v38 = v37;
    operator delete(v37);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  *(void *)&long long v33 = &v29;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
}

void sub_1921579F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, char *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  *(void *)(v31 + 8) = v32;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = a17;
    operator delete(a17);
  }
  a17 = &a20;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::vector<int> *Espresso::layer_nd_shape::shape_vector(std::vector<int> *this, uint64_t a2)
{
  int32x2_t result = std::vector<int>::vector(this, *(int *)(a2 + 20));
  if (*(int *)(a2 + 20) >= 1)
  {
    uint64_t v4 = 0;
    std::vector<int>::pointer begin = result->__begin_;
    do
    {
      begin[v4] = *(_DWORD *)(a2 + 4 * v4);
      ++v4;
    }
    while (v4 < *(int *)(a2 + 20));
  }
  return result;
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_192157B28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        uint64_t v16 = a1[1];
        do
        {
          int64_t v18 = *(void **)(v16 - 24);
          v16 -= 24;
          uint64_t v17 = v18;
          if (v18)
          {
            *(void *)(v4 - 16) = v17;
            operator delete(v17);
          }
          uint64_t v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      size_t v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      v20[4] = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      std::vector<int>::size_type v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v10);
      uint64_t v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      void v20[3] = &v11[24 * v13];
      size_t v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0;
    *(void *)(v4 - 16) = 0;
    v4 -= 24;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  unint64_t v6 = (void *)*result;
  *int32x2_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::vector<int>>::__init_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<int>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)v6[1];
    std::vector<int>::size_type v11 = v7;
    uint64_t v12 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    void v9[2] = &v12;
    char v10 = 0;
    if (a2 == a3)
    {
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = v7;
      do
      {
        *uint64_t v8 = 0;
        v8[1] = 0;
        _OWORD v8[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
        uint64_t v8 = v12 + 3;
        v12 += 3;
        a2 += 24;
      }
      while (a2 != a3);
    }
    char v10 = 1;
    int32x2_t result = (void *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v8;
  }
  return result;
}

void sub_192157E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    int32x2_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int32x2_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_192157EFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int32x2_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        unint64_t v6 = *(void **)(v4 - 24);
        v4 -= 24;
        long long v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

char *std::vector<std::vector<int>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  int32x2_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void Espresso::pass_blob_name_indexing_result::~pass_blob_name_indexing_result(Espresso::pass_blob_name_indexing_result *this)
{
  *(void *)this = &unk_1EE365EE8;
  uint64_t v3 = (void **)((char *)this + 176);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 128);
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  Espresso::pass_blob_name_indexing_result::~pass_blob_name_indexing_result(this);

  JUMPOUT(0x192FF16B0);
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      unint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      long long v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = (char *)v1[1];
      do
      {
        size_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Espresso::generic_batch_matmul_kernel::top_shapes_for_bottom_shapes(unsigned char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *((void *)&v87 + 1) = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const Espresso::layer_shape **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 <= 0x7FuLL) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_batch_matmul_kernel: two inputs required");
  }
  if (a1[280])
  {
    long long v6 = *((_OWORD *)v4 + 1);
    uint64_t v7 = *((void *)v4 + 4);
    long long __x = *(_OWORD *)v4;
    long long v82 = v6;
    uint64_t v83 = v7;
    int v84 = 0;
    int v85 = 0;
    uint64_t v86 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v84, *((const void **)v4 + 5), *((void *)v4 + 6), (uint64_t)(*((void *)v4 + 6) - *((void *)v4 + 5)) >> 2);
    if (*(int *)v4 > 1
      || (*((int *)v4 + 16) <= 1 ? (BOOL v8 = *((_DWORD *)v4 + 1) <= 1) : (BOOL v8 = 0),
          v8 ? (BOOL v9 = *((_DWORD *)v4 + 17) < 2) : (BOOL v9 = 0),
          !v9))
    {
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("generic_batch_matmul_kernel: not implemented for 4D+ tensors");
    }
    signed int v10 = *((_DWORD *)v4 + 4);
    int v11 = *((_DWORD *)v4 + 20);
    if (v11 == 1 || v10 == 1 || v10 == v11)
    {
      if (*((_DWORD *)v4 + 2) == *((_DWORD *)v4 + 19))
      {
        *(void *)&long long __x = 0x100000001;
        int v12 = *((_DWORD *)v4 + 3);
        DWORD2(__x) = *((_DWORD *)v4 + 18);
        HIDWORD(__x) = v12;
        if (v10 <= v11) {
          signed int v10 = v11;
        }
        *(void *)&long long v82 = __PAIR64__(*((_DWORD *)v4 + 5), v10);
        long long v75 = __x;
        long long v76 = v82;
        uint64_t v77 = v83;
        std::vector<int> __p = 0;
        std::string v79 = 0;
        uint64_t v80 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v84, (uint64_t)v85, (v85 - (unsigned char *)v84) >> 2);
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        uint64_t v70 = a3;
        char v71 = 0;
        uint64_t v13 = (char *)operator new(0x40uLL);
        *a3 = v13;
        a3[1] = v13;
        a3[2] = v13 + 64;
        a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v75, &__x, (uint64_t)v13);
        if (__p)
        {
          std::string v79 = __p;
          operator delete(__p);
        }
        std::vector<int>::pointer v14 = (std::vector<int>::pointer)v84;
        if (v84)
        {
          int v85 = v84;
LABEL_102:
          operator delete(v14);
          return;
        }
        return;
      }
      int64_t v59 = "generic_batch_matmul_kernel: not compatible for multiplication";
    }
    else
    {
      int64_t v59 = "generic_batch_matmul_kernel: seq dimensions do not match";
    }
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v59);
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v75, *(const Espresso::layer_shape **)a2, 0);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v70, (const Espresso::layer_shape *)(*(void *)a2 + 64), 0);
  uint64_t v16 = &v75;
  if (DWORD1(v76) <= v72) {
    uint64_t v16 = (long long *)&v70;
  }
  long long v68 = *v16;
  uint64_t v69 = *((void *)v16 + 2);
  Espresso::layer_nd_shape::shape_vector(&v67, (uint64_t)&v75);
  Espresso::layer_nd_shape::shape_vector(&v66, (uint64_t)&v70);
  if (HIDWORD(v69) <= 1)
  {
    uint64_t v69 = 0x200000000;
    long long v68 = 0x100000001uLL;
  }
  Espresso::layer_nd_shape::shape_vector(&v65, (uint64_t)&v68);
  memset(&v64, 0, sizeof(v64));
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, v67.__begin_, (uint64_t)v67.__end_, v67.__end_ - v67.__begin_);
  int v17 = a1[281];
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  uint64_t v61 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, v66.__begin_, (uint64_t)v66.__end_, v66.__end_ - v66.__begin_);
  v18.__i_ = v64.__begin_;
  if (v64.__end_ == v64.__begin_)
  {
    int v51 = "Invalid shape of first argument.";
    goto LABEL_112;
  }
  size_t v19 = v61;
  uint64_t v20 = v62;
  if (v62 == v61)
  {
    int v51 = "Invalid shape of second argument.";
    goto LABEL_112;
  }
  if ((std::vector<int>::pointer)((char *)v65.__end_ - (char *)v65.__begin_) < (std::vector<int>::pointer)8)
  {
    int v51 = "Invalid rank of output.";
LABEL_112:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v51);
  }
  int v21 = a1[282];
  if ((std::vector<int>::pointer)((char *)v64.__end_ - (char *)v64.__begin_) == (std::vector<int>::pointer)4)
  {
    LODWORD(__x) = 1;
    std::vector<int>::insert(&v64, v18, (std::vector<int>::value_type *)&__x);
    size_t v19 = v61;
    uint64_t v20 = v62;
  }
  unint64_t v22 = (v20 - v19) >> 2;
  if (v20 - v19 == 4)
  {
    if ((unint64_t)v20 >= v63)
    {
      uint64_t v24 = v63 - (void)v19;
      uint64_t v25 = v24 >> 1;
      if (v24 >> 1 <= v22 + 1) {
        uint64_t v25 = v22 + 1;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v25;
      }
      int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v26);
      unint64_t v28 = (char *)v61;
      uint64_t v29 = v62;
      int32x4_t v30 = &v27[4 * v22];
      uint64_t v32 = &v27[4 * v31];
      *(_DWORD *)int32x4_t v30 = 1;
      int v23 = v30 + 4;
      while (v29 != v28)
      {
        int v33 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v30 - 1) = v33;
        v30 -= 4;
      }
      uint64_t v61 = v30;
      uint64_t v62 = v23;
      unint64_t v63 = (unint64_t)v32;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v20 = 1;
      int v23 = v20 + 4;
    }
    uint64_t v62 = v23;
    size_t v19 = v61;
    unint64_t v22 = (v23 - (unsigned char *)v61) >> 2;
  }
  std::vector<int>::pointer begin = v64.__begin_;
  unint64_t v35 = (char *)v65.__end_ - (char *)v65.__begin_;
  unint64_t v36 = v65.__end_ - v65.__begin_;
  if (v36 != v64.__end_ - v64.__begin_ && v36 != v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid rank of output");
    goto LABEL_114;
  }
  unint64_t v38 = v64.__end_ - v64.__begin_;
  uint64_t v39 = -2;
  if (v17) {
    uint64_t v40 = -2;
  }
  else {
    uint64_t v40 = -1;
  }
  int v41 = v64.__begin_[v38 + v40];
  if (v21) {
    uint64_t v42 = -1;
  }
  else {
    uint64_t v42 = -2;
  }
  if (v41 != *(_DWORD *)&v19[4 * v22 + 4 * v42])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incompatible shapes for matrix multiplication.");
LABEL_114:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v21) {
    uint64_t v43 = -2;
  }
  else {
    uint64_t v43 = -1;
  }
  unint64_t v44 = v22 + v43;
  if (v17) {
    uint64_t v39 = -1;
  }
  int v45 = *(_DWORD *)&v19[4 * v44];
  uint64_t v46 = &v65.__begin_[v36];
  *(v46 - 2) = v64.__begin_[v38 + v39];
  *(v46 - 1) = v45;
  if (v35 >= 9)
  {
    if (v36 <= 3) {
      unint64_t v36 = 3;
    }
    std::vector<int>::pointer v47 = v46 - 3;
    BOOL v48 = &begin[v38 - 3];
    uint64_t v49 = (int *)&v19[4 * v22 - 12];
    unint64_t v50 = 2;
    int v51 = "Invalid shapes for broadcasting";
    do
    {
      if (v38 > v50 && v22 > v50)
      {
        int v52 = *v48;
        int v53 = *v49;
        if (*v49 != 1 && v52 != 1 && v52 != v53) {
          goto LABEL_112;
        }
        if (v52 <= v53) {
          int v52 = *v49;
        }
        *std::vector<int>::pointer v47 = v52;
      }
      if (v38 > v50 && v22 <= v50) {
        *std::vector<int>::pointer v47 = *v48;
      }
      if (v38 <= v50 && v22 > v50) {
        *std::vector<int>::pointer v47 = *v49;
      }
      ++v50;
      --v47;
      --v48;
      --v49;
    }
    while (v36 != v50);
  }
  if (v61)
  {
    uint64_t v62 = (char *)v61;
    operator delete(v61);
    std::vector<int>::pointer begin = v64.__begin_;
  }
  if (begin)
  {
    v64.__end_ = begin;
    operator delete(begin);
  }
  long long __x = 0uLL;
  LODWORD(v82) = 0;
  int64_t v56 = (char *)v65.__end_ - (char *)v65.__begin_;
  if (v65.__end_ != v65.__begin_)
  {
    uint64_t v57 = v56 >> 2;
    if ((unint64_t)(v56 >> 2) <= 1) {
      uint64_t v57 = 1;
    }
    memcpy(&__x, v65.__begin_, 4 * v57);
  }
  DWORD1(v82) = (unint64_t)v56 >> 2;
  long long v68 = __x;
  uint64_t v69 = v82;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v68, 0, (uint64_t)&__x);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v73 = a3;
  char v74 = 0;
  int64_t v58 = (char *)operator new(0x40uLL);
  *a3 = v58;
  a3[1] = v58;
  a3[2] = v58 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &__x, &v87, (uint64_t)v58);
  if (v84)
  {
    int v85 = v84;
    operator delete(v84);
  }
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    operator delete(v65.__begin_);
  }
  if (v66.__begin_)
  {
    v66.__end_ = v66.__begin_;
    operator delete(v66.__begin_);
  }
  std::vector<int>::pointer v14 = v67.__begin_;
  if (v67.__begin_)
  {
    v67.__end_ = v67.__begin_;
    goto LABEL_102;
  }
}

void sub_192158860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  __cxa_free_exception(v39);
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::generic_topk_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *((void *)&v46 + 1) = *MEMORY[0x1E4F143B8];
  long long v6 = *a2;
  uint64_t v7 = (uint64_t *)*((void *)*a2 + 4);
  long long v8 = (*a2)[1];
  long long v41 = **a2;
  long long v42 = v8;
  uint64_t v43 = v7;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v45 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  a3[2] = 0;
  *a3 = 0;
  a3[1] = 0;
  unint64_t v38 = a3;
  char v39 = 0;
  BOOL v9 = operator new(0x40uLL);
  *a3 = (uint64_t)v9;
  a3[1] = (uint64_t)v9;
  a3[2] = (uint64_t)v9 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), &v41, &v46, (uint64_t)v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 294))
  {
    signed int v10 = *a2;
    unint64_t v12 = a3[1];
    unint64_t v11 = a3[2];
    if (v12 >= v11)
    {
      uint64_t v14 = (uint64_t)(v12 - *a3) >> 6;
      if ((unint64_t)(v14 + 1) >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v11 - *a3;
      uint64_t v16 = v15 >> 5;
      if (v15 >> 5 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v43 = a3 + 2;
      if (v17) {
        unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v19 = v17 + (v14 << 6);
      *(void *)&long long v41 = v17;
      *((void *)&v41 + 1) = v19;
      *(void *)&long long v42 = v19;
      *((void *)&v42 + 1) = v17 + (v18 << 6);
      long long v20 = *v10;
      long long v21 = v10[1];
      *(void *)(v19 + 32) = *((void *)v10 + 4);
      *(_OWORD *)unint64_t v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      *(void *)(v19 + 48) = 0;
      *(void *)(v19 + 56) = 0;
      *(void *)(v19 + 40) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v19 + 40), *((const void **)v10 + 5), *((void *)v10 + 6), (uint64_t)(*((void *)v10 + 6) - *((void *)v10 + 5)) >> 2);
      *(void *)&long long v42 = v42 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v41);
      uint64_t v13 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v41);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, *a2);
      uint64_t v13 = v12 + 64;
    }
    a3[1] = v13;
  }
  if (*(unsigned char *)(a1 + 285))
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v38, (const Espresso::layer_shape *)*a2, 0);
    unsigned int v22 = *(_DWORD *)(a1 + 288);
    if ((v22 & 0x80000000) != 0 && (v22 += v40, (v22 & 0x80000000) != 0) || (int)v22 >= v40) {
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis argument in topk_kernel_cpu.");
    }
    int v23 = *(_DWORD *)(a1 + 280);
    if (v23 != -1)
    {
      int v24 = *((_DWORD *)&v38 + v22);
      uint64_t v25 = v22;
LABEL_31:
      if (v24 >= v23) {
        int v29 = v23;
      }
      else {
        int v29 = v24;
      }
      *((_DWORD *)&v38 + v25) = v29;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, (uint64_t)&v41);
      uint64_t v30 = *a3;
      long long v31 = v41;
      long long v32 = v42;
      *(void *)(v30 + 32) = v43;
      *(_OWORD *)uint64_t v30 = v31;
      *(_OWORD *)(v30 + 16) = v32;
      int v33 = *(void **)(v30 + 40);
      if (v33)
      {
        *(void *)(v30 + 48) = v33;
        operator delete(v33);
        *(void *)(v30 + 40) = 0;
        *(void *)(v30 + 48) = 0;
        *(void *)(v30 + 56) = 0;
      }
      *(_OWORD *)(v30 + 40) = *(_OWORD *)__p;
      *(void *)(v30 + 56) = v45;
      if (*(unsigned char *)(a1 + 294))
      {
        Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v38, 0, (uint64_t)&v41);
        uint64_t v34 = *a3;
        long long v35 = v42;
        *(_OWORD *)(v34 + 64) = v41;
        *(_OWORD *)(v34 + 80) = v35;
        *(void *)(v34 + 96) = v43;
        unint64_t v36 = *(void **)(v34 + 104);
        if (v36)
        {
          *(void *)(v34 + 112) = v36;
          operator delete(v36);
          *(void *)(v34 + 104) = 0;
          *(void *)(v34 + 112) = 0;
          *(void *)(v34 + 120) = 0;
        }
        *(_OWORD *)(v34 + 104) = *(_OWORD *)__p;
        *(void *)(v34 + 120) = v45;
      }
      return;
    }
    if ((char *)a2[1] - (char *)*a2 == 64)
    {
      if (*(unsigned char *)(a1 + 293))
      {
        if (*(unsigned char *)(a1 + 285))
        {
          uint64_t v25 = v22;
          int v24 = *((_DWORD *)&v38 + v22);
          int v23 = v24;
          goto LABEL_31;
        }
        uint64_t v37 = "topk_kernel_cpu with k == -1 (sort) requires single_axis_topk == true.";
      }
      else
      {
        uint64_t v37 = "topk_kernel_cpu with k == -1 (sort) requires sort == true.";
      }
    }
    else
    {
      uint64_t v37 = "topk_kernel_cpu with k == -1 (sort) does not support support dynamic k.";
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v37);
  }
  int v26 = *((_DWORD *)*a2 + 5);
  int v27 = *(_DWORD *)(a1 + 280);
  unint64_t v28 = (_DWORD *)*a3;
  if (v26 == -1 || v26 >= 4)
  {
    void v28[2] = v27;
    if (*(unsigned char *)(a1 + 294)) {
      v28[18] = v27;
    }
  }
  else
  {
    _DWORD *v28 = v27;
    if (*(unsigned char *)(a1 + 294)) {
      v28[16] = v27;
    }
  }
}

void sub_192158CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

Espresso::AOT::CompilerOptionsForE5 *Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5(Espresso::AOT::CompilerOptionsForE5 *this, const Espresso::AOT::AOTCompilerOptions *a2)
{
  *((_OWORD *)this + 3) = 0u;
  uint64_t v4 = (char *)this + 48;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  long long v5 = (std::string *)((char *)this + 24);
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  v128 = (std::string *)((char *)this + 88);
  *(_OWORD *)((char *)this + 136) = 0u;
  long long v6 = (char *)this + 136;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  v126 = (char *)this + 184;
  v127 = (char *)this + 160;
  *(_OWORD *)((char *)this + 216) = 0u;
  v125 = (std::string *)((char *)this + 216);
  v129 = (char *)this + 240;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((void *)this + 33) = 0;
  *((_DWORD *)this + 68) = 1065353216;
  v124 = (std::string *)((char *)this + 280);
  *((unsigned char *)this + 303) = 2;
  strcpy((char *)this + 280, "no");
  v122 = (std::string *)((char *)this + 304);
  strcpy((char *)this + 304, "classic_cpu");
  *(_DWORD *)((char *)this + 327) = 11;
  *((unsigned char *)this + 331) = 1;
  *((_DWORD *)this + 83) = 0;
  *((unsigned char *)this + 336) = 1;
  uint64_t v7 = (char *)this + 337;
  *(_DWORD *)((char *)this + 337) = 0;
  *((_DWORD *)this + 85) = 0;
  Input = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetInput(a2);
  std::string::operator=((std::string *)this, Input);
  Output = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetOutput(a2);
  std::string::operator=(v5, Output);
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 2;
  strcpy((char *)&__str, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&__str, (uint64_t)v134);
  v123 = v7;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__str, "platforms");
  signed int v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  unint64_t v11 = v10;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11) {
      goto LABEL_26;
    }
  }
  else if (!v10)
  {
    goto LABEL_26;
  }
  if (*((_DWORD *)v11 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v131, (const std::string::value_type *)v11[5], v11[6]);
  }
  else {
    std::string v131 = *(std::string *)(v11 + 5);
  }
  std::string::size_type size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v131.__r_.__value_.__l.__size_;
  }
  if (size != 1) {
    goto LABEL_20;
  }
  uint64_t v13 = &v131;
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v13 = (std::string *)v131.__r_.__value_.__r.__words[0];
  }
  if (v13->__r_.__value_.__s.__data_[0] == 42)
  {
    uint64_t v14 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v10);
    (*(void (**)(std::string *__return_ptr))(*(void *)v14 + 88))(&__str);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign((uint64_t)v4, (uint64_t *)&__str);
    uint64_t v15 = (void *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        uint64_t v16 = (void *)*v15;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v15 + 2));
        operator delete(v15);
        uint64_t v15 = v16;
      }
      while (v16);
    }
  }
  else
  {
LABEL_20:
    uint64_t v17 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v10);
    (*(void (**)(std::string *__return_ptr))(*(void *)v17 + 56))(&__str);
    std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign((uint64_t)v4, (uint64_t *)&__str);
    uint64_t v18 = (void *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        unint64_t v19 = (void *)*v18;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v18 + 2));
        operator delete(v18);
        uint64_t v18 = v19;
      }
      while (v19);
    }
  }
  long long v20 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v20) {
    operator delete(v20);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
LABEL_26:
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&__str, "platform-families");
  long long v21 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  unsigned int v22 = v21;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v22) {
      goto LABEL_42;
    }
  }
  else if (!v21)
  {
    goto LABEL_42;
  }
  if (*((_DWORD *)v22 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v22 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v131, (const std::string::value_type *)v22[5], v22[6]);
  }
  else {
    std::string v131 = *(std::string *)(v22 + 5);
  }
  uint64_t v23 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)v21);
  (*(void (**)(std::string *__return_ptr))(*(void *)v23 + 64))(&__str);
  int v24 = (uint64_t *)__str.__r_.__value_.__r.__words[2];
  if (__str.__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)v4, (uint64_t)(v24 + 2), (_OWORD *)v24 + 1);
      int v24 = (uint64_t *)*v24;
    }
    while (v24);
    uint64_t v25 = (void *)__str.__r_.__value_.__r.__words[2];
    if (__str.__r_.__value_.__r.__words[2])
    {
      do
      {
        int v26 = (void *)*v25;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v25 + 2));
        operator delete(v25);
        uint64_t v25 = v26;
      }
      while (v26);
    }
  }
  int v27 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v27) {
    operator delete(v27);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
LABEL_42:
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "cpu-target-os");
  unint64_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  int v29 = v28;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v29) {
      goto LABEL_52;
    }
  }
  else if (!v28)
  {
    goto LABEL_52;
  }
  if (*((_DWORD *)v29 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v29 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v29[5], v29[6]);
  }
  else {
    std::string __str = *(std::string *)(v29 + 5);
  }
  std::string::operator=(v128, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_52:
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__str, "cpu-target-arch");
  uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  long long v31 = v30;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v31) {
      goto LABEL_62;
    }
  }
  else if (!v30)
  {
    goto LABEL_62;
  }
  if (*((_DWORD *)v31 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v31 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v31[5], v31[6]);
  }
  else {
    std::string __str = *(std::string *)(v31 + 5);
  }
  std::string::operator=((std::string *)((char *)this + 112), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_62:
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__str, "dump-ir-only");
  long long v32 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  int v33 = v32;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v33) {
      goto LABEL_68;
    }
  }
  else if (!v32)
  {
    goto LABEL_68;
  }
  if (*((_DWORD *)v33 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 208) = *((unsigned char *)v33 + 40);
LABEL_68:
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__str, "compute-units");
  uint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&__str);
  long long v35 = v34;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v35) {
      goto LABEL_80;
    }
  }
  else if (!v34)
  {
    goto LABEL_80;
  }
  if (*((_DWORD *)v35 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v35 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v35[5], v35[6]);
  }
  else {
    std::string __str = *(std::string *)(v35 + 5);
  }
  E5RT::ParseComputeUnits((uint64_t *)&__str, &v131.__r_.__value_.__l.__data_);
  unint64_t v36 = *(void **)v6;
  if (*(void *)v6)
  {
    *((void *)this + 18) = v36;
    operator delete(v36);
    *(void *)long long v6 = 0;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 2) = 0;
  }
  *(std::string *)((char *)this + 136) = v131;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_80:
  *((unsigned char *)&v131.__r_.__value_.__s + 23) = 3;
  LODWORD(v131.__r_.__value_.__l.__data_) = 6647393;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&v131, (uint64_t)&__str);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v131.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v131, "options-plist");
  uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&__str, (uint64_t)&v131);
  unint64_t v38 = v37;
  if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v37) {
      goto LABEL_88;
    }
LABEL_86:
    if (*((_DWORD *)v38 + 16) != 3) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    std::string::operator=(v125, (const std::string *)(v38 + 5));
    goto LABEL_88;
  }
  operator delete(v131.__r_.__value_.__l.__data_);
  if (v38) {
    goto LABEL_86;
  }
LABEL_88:
  *((unsigned char *)&v131.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v131, "options");
  char v39 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&__str, (uint64_t)&v131);
  signed int v40 = v39;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v40) {
      goto LABEL_126;
    }
  }
  else if (!v39)
  {
    goto LABEL_126;
  }
  if (*((_DWORD *)v40 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 1;
  LOWORD(__p[0].__r_.__value_.__l.__data_) = 44;
  E5Common::StringUtils::Split(v40 + 5, (char *)__p, (uint64_t)&v131);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    std::string::size_type v41 = v131.__r_.__value_.__l.__size_;
    long long v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    if (v131.__r_.__value_.__r.__words[0] == v131.__r_.__value_.__l.__size_)
    {
LABEL_95:
      if (v42) {
        goto LABEL_119;
      }
      goto LABEL_126;
    }
  }
  else
  {
    std::string::size_type v41 = v131.__r_.__value_.__l.__size_;
    long long v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    if (v131.__r_.__value_.__r.__words[0] == v131.__r_.__value_.__l.__size_) {
      goto LABEL_95;
    }
  }
  v121 = v5;
  do
  {
    *((unsigned char *)&v132.__r_.__value_.__s + 23) = 1;
    LOWORD(v132.__r_.__value_.__l.__data_) = 61;
    E5Common::StringUtils::Split(v42, (char *)&v132, (uint64_t)__p);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v132.__r_.__value_.__l.__data_);
      uint64_t v44 = __p[0].__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3) < 2)
      {
LABEL_107:
        memset(&v132, 0, sizeof(v132));
        goto LABEL_109;
      }
    }
    else
    {
      uint64_t v44 = __p[0].__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3) < 2)
        goto LABEL_107;
    }
    if (*(char *)(v44 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
      uint64_t v44 = __p[0].__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string v132 = *(std::string *)(v44 + 24);
    }
LABEL_109:
    v136 = (long long *)v44;
    uint64_t v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v129, v44, (uint64_t)&std::piecewise_construct, &v136);
    long long v46 = (void **)(v45 + 5);
    if (*((char *)v45 + 63) < 0)
    {
      operator delete(*v46);
      *(std::string *)long long v46 = v132;
      std::string::size_type v47 = __p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0]) {
        goto LABEL_101;
      }
    }
    else
    {
      *(_OWORD *)long long v46 = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
      v45[7] = v132.__r_.__value_.__r.__words[2];
      std::string::size_type v47 = __p[0].__r_.__value_.__r.__words[0];
      if (!__p[0].__r_.__value_.__r.__words[0]) {
        goto LABEL_101;
      }
    }
    std::string::size_type v48 = __p[0].__r_.__value_.__l.__size_;
    uint64_t v43 = (void *)v47;
    if (__p[0].__r_.__value_.__l.__size_ != v47)
    {
      do
      {
        if (*(char *)(v48 - 1) < 0) {
          operator delete(*(void **)(v48 - 24));
        }
        v48 -= 24;
      }
      while (v48 != v47);
      uint64_t v43 = (void *)__p[0].__r_.__value_.__r.__words[0];
    }
    __p[0].__r_.__value_.__l.__size_ = v47;
    operator delete(v43);
LABEL_101:
    v42 += 3;
  }
  while (v42 != (uint64_t *)v41);
  long long v42 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
  long long v5 = v121;
  if (v131.__r_.__value_.__r.__words[0])
  {
LABEL_119:
    std::string::size_type v49 = v131.__r_.__value_.__l.__size_;
    unint64_t v50 = v42;
    if ((uint64_t *)v131.__r_.__value_.__l.__size_ != v42)
    {
      do
      {
        if (*(char *)(v49 - 1) < 0) {
          operator delete(*(void **)(v49 - 24));
        }
        v49 -= 24;
      }
      while ((uint64_t *)v49 != v42);
      unint64_t v50 = (uint64_t *)v131.__r_.__value_.__r.__words[0];
    }
    v131.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
    operator delete(v50);
  }
LABEL_126:
  *((unsigned char *)&v131.__r_.__value_.__s + 23) = 20;
  strcpy((char *)&v131, "require-ane-resident");
  int v51 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&v131);
  int v52 = v51;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v52) {
      goto LABEL_132;
    }
  }
  else if (!v51)
  {
    goto LABEL_132;
  }
  if (*((_DWORD *)v52 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  std::string::operator=(v124, (const std::string *)(v52 + 5));
LABEL_132:
  *((unsigned char *)this + 328) = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(a2);
  *((unsigned char *)&v131.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v131, ".mil");
  int v53 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
  int v54 = v53;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v54) {
      goto LABEL_137;
    }
LABEL_134:
    if (Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(a2))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "MIL program must be nullptr when the input file has a .mil extension.");
      goto LABEL_352;
    }
LABEL_145:
    char v58 = 1;
  }
  else
  {
    if (v53) {
      goto LABEL_134;
    }
LABEL_137:
    *((unsigned char *)&v131.__r_.__value_.__s + 23) = 13;
    strcpy((char *)&v131, ".espresso.net");
    char v56 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
    char v57 = v56;
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v56) {
        goto LABEL_139;
      }
LABEL_141:
      *((unsigned char *)&v131.__r_.__value_.__s + 23) = 8;
      strcpy((char *)&v131, ".milhash");
      int v59 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)this, (unsigned __int8 *)&v131);
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v131.__r_.__value_.__l.__data_);
      }
      if (v59)
      {
        if (Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(a2)) {
          goto LABEL_145;
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "MIL program must be provided when the input file has a .milhash extension.");
      }
      else
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "--input file must have either .mil, .espresso.net, or .milhash extensions.");
      }
LABEL_352:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
    }
    operator delete(v131.__r_.__value_.__l.__data_);
    if ((v57 & 1) == 0) {
      goto LABEL_141;
    }
LABEL_139:
    char v58 = 0;
  }
  *((unsigned char *)this + 331) = v58;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = xmmword_192DAA350;
  strcpy(v131.__r_.__value_.__l.__data_, "force-classic-aot-old-hw");
  int64_t v60 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)&v131);
  uint64_t v61 = v60;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v131.__r_.__value_.__l.__data_);
    if (!v61) {
      goto LABEL_152;
    }
  }
  else if (!v60)
  {
    goto LABEL_152;
  }
  if (*((_DWORD *)v61 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 333) = *((unsigned char *)v61 + 40);
LABEL_152:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__p, "experimental");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)__p, (uint64_t)&v131);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v132.__r_.__value_.__s + 23) = 3;
  LODWORD(v132.__r_.__value_.__l.__data_) = 7696483;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)&v132, (uint64_t)__p);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v132.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v132, "preferred-backend");
  uint64_t v62 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)&v132);
  unint64_t v63 = v62;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v132.__r_.__value_.__l.__data_);
    if (!v63) {
      goto LABEL_166;
    }
  }
  else if (!v62)
  {
    goto LABEL_166;
  }
  if (*((_DWORD *)v63 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v63 + 63) < 0)
  {
    if (!v63[6]) {
      goto LABEL_166;
    }
    goto LABEL_165;
  }
  if (*((unsigned char *)v63 + 63)) {
LABEL_165:
  }
    std::string::operator=(v122, (const std::string *)(v63 + 5));
LABEL_166:
  std::vector<int> v64 = (void **)__p[0].__r_.__value_.__r.__words[2];
  if (__p[0].__r_.__value_.__r.__words[2])
  {
    do
    {
      std::vector<int> v65 = (void **)*v64;
      uint64_t v66 = *((unsigned int *)v64 + 16);
      if (v66 != -1) {
        ((void (*)(std::string *, void **))off_1EE39B968[v66])(&v132, v64 + 5);
      }
      *((_DWORD *)v64 + 16) = -1;
      if (*((char *)v64 + 39) < 0) {
        operator delete(v64[2]);
      }
      operator delete(v64);
      std::vector<int> v64 = v65;
    }
    while (v65);
  }
  std::vector<int> v67 = (void *)__p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  if (v67) {
    operator delete(v67);
  }
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
  strcpy((char *)__p, "classic-validation");
  long long v68 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v69 = v68;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v69) {
      goto LABEL_187;
    }
  }
  else if (!v68)
  {
    goto LABEL_187;
  }
  if (*((_DWORD *)v69 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v69 + 63) < 0) {
    std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v69[5], v69[6]);
  }
  else {
    __p[0] = *(std::string *)(v69 + 5);
  }
  E5RT::ParseComputeUnits((uint64_t *)__p, &v132.__r_.__value_.__l.__data_);
  uint64_t v70 = *(void **)v127;
  if (*(void *)v127)
  {
    *((void *)this + 21) = v70;
    operator delete(v70);
    *(void *)v127 = 0;
    *((void *)v127 + 1) = 0;
    *((void *)v127 + 2) = 0;
  }
  *(std::string *)((char *)this + 160) = v132;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_187:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__p, "classic-cost");
  char v71 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  unsigned int v72 = v71;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v72) {
      goto LABEL_199;
    }
  }
  else if (!v71)
  {
    goto LABEL_199;
  }
  if (*((_DWORD *)v72 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v72 + 63) < 0) {
    std::string::__init_copy_ctor_external(__p, (const std::string::value_type *)v72[5], v72[6]);
  }
  else {
    __p[0] = *(std::string *)(v72 + 5);
  }
  E5RT::ParseComputeUnits((uint64_t *)__p, &v132.__r_.__value_.__l.__data_);
  long long v73 = *(void **)v126;
  if (*(void *)v126)
  {
    *((void *)this + 24) = v73;
    operator delete(v73);
    *(void *)v126 = 0;
    *((void *)v126 + 1) = 0;
    *((void *)v126 + 2) = 0;
  }
  *(std::string *)((char *)this + 184) = v132;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
LABEL_199:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 21;
  strcpy((char *)__p, "on-device-compilation");
  char v74 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(v134, (uint64_t)__p);
  long long v75 = v74;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v75) {
      goto LABEL_205;
    }
LABEL_201:
    if (*((_DWORD *)v75 + 16)) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    int v76 = *((unsigned __int8 *)v75 + 40);
    *((unsigned char *)this + 329) = v76;
    if (v76)
    {
LABEL_206:
      if (!*((void *)this + 9))
      {
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)E5RT::GetCurrentPlatform((E5RT *)v74);
        LODWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
        std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__emplace_unique_key_args<E5Common::PlatformIdentifier,E5Common::PlatformIdentifier const&>((uint64_t)v4, (uint64_t)__p, __p);
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)__p);
      }
    }
  }
  else
  {
    if (v74) {
      goto LABEL_201;
    }
LABEL_205:
    if (*((unsigned char *)this + 329)) {
      goto LABEL_206;
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DAB6A0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "mil-cost-skip-decision-trees");
  uint64_t v77 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  unint64_t v78 = v77;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v78) {
      goto LABEL_214;
    }
  }
  else if (!v77)
  {
    goto LABEL_214;
  }
  if (*((_DWORD *)v78 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 330) = *((unsigned char *)v78 + 40);
LABEL_214:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DB16A0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-classic-cpu-fallback-for-mlc");
  std::string v79 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v80 = v79;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v80) {
      goto LABEL_220;
    }
  }
  else if (!v79)
  {
    goto LABEL_220;
  }
  if (*((_DWORD *)v80 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 332) = *((unsigned char *)v80 + 40);
LABEL_220:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DBA240;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-ranked-segmentation");
  int v81 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  long long v82 = v81;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v82) {
      goto LABEL_226;
    }
  }
  else if (!v81)
  {
    goto LABEL_226;
  }
  if (*((_DWORD *)v82 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 334) = *((unsigned char *)v82 + 40);
LABEL_226:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DAB6A0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "disable-data-dependent-shape");
  uint64_t v83 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  int v84 = v83;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v84) {
      goto LABEL_232;
    }
  }
  else if (!v83)
  {
    goto LABEL_232;
  }
  if (*((_DWORD *)v84 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 335) = *((unsigned char *)v84 + 40);
LABEL_232:
  strcpy((char *)__p, "enable-mpsgraphpackage");
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 22;
  int v85 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v86 = v85;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v86) {
      goto LABEL_238;
    }
  }
  else if (!v85)
  {
    goto LABEL_238;
  }
  if (*((_DWORD *)v86 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 336) = *((unsigned char *)v86 + 40);
LABEL_238:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DAB6C0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "enable-default-function-for-range-dim");
  long long v87 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  int v88 = v87;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v88) {
      goto LABEL_244;
    }
  }
  else if (!v87)
  {
    goto LABEL_244;
  }
  if (*((_DWORD *)v88 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unsigned char *v123 = *((unsigned char *)v88 + 40);
LABEL_244:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DB16C0;
  strcpy(__p[0].__r_.__value_.__l.__data_, "coalesce-ops-with-consumers");
  uint64_t v89 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v90 = v89;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v90) {
      goto LABEL_250;
    }
  }
  else if (!v89)
  {
    goto LABEL_250;
  }
  if (*((_DWORD *)v90 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 340) = *((unsigned char *)v90 + 40);
LABEL_250:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 19;
  strcpy((char *)__p, "move-read-state-ops");
  unint64_t v91 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v92 = v91;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v92) {
      goto LABEL_256;
    }
  }
  else if (!v91)
  {
    goto LABEL_256;
  }
  if (*((_DWORD *)v92 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 338) = *((unsigned char *)v92 + 40);
LABEL_256:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 18;
  strcpy((char *)__p, "shrink-quant-group");
  uint64_t v93 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v94 = v93;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v94) {
      goto LABEL_262;
    }
  }
  else if (!v93)
  {
    goto LABEL_262;
  }
  if (*((_DWORD *)v94 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 339) = *((unsigned char *)v94 + 40);
LABEL_262:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DB5600;
  strcpy(__p[0].__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns");
  uint64_t v95 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  long long v96 = v95;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v96) {
      goto LABEL_268;
    }
  }
  else if (!v95)
  {
    goto LABEL_268;
  }
  if (*((_DWORD *)v96 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 341) = *((unsigned char *)v96 + 40);
LABEL_268:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_192DAC000;
  strcpy(__p[0].__r_.__value_.__l.__data_, "match-e5-minimal-cpu-patterns-for-states");
  v97 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  uint64_t v98 = v97;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v98) {
      goto LABEL_274;
    }
  }
  else if (!v97)
  {
    goto LABEL_274;
  }
  if (*((_DWORD *)v98 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 342) = *((unsigned char *)v98 + 40);
LABEL_274:
  *((unsigned char *)&__p[0].__r_.__value_.__s + 23) = 14;
  strcpy((char *)__p, "merge-segments");
  uint64_t v99 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(&v131, (uint64_t)__p);
  v100 = v99;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v100) {
      goto LABEL_280;
    }
  }
  else if (!v99)
  {
    goto LABEL_280;
  }
  if (*((_DWORD *)v100 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *((unsigned char *)this + 343) = *((unsigned char *)v100 + 40);
LABEL_280:
  Espresso::AOT::CompilerOptionsForE5::AssertValid((std::string *)this);
  if (*((char *)this + 47) < 0)
  {
    v102 = (std::string *)*((void *)this + 3);
    uint64_t v101 = *((void *)this + 4);
    v103 = (_DWORD *)(v101 - 7);
    if (v101 >= 7) {
      goto LABEL_284;
    }
  }
  else
  {
    uint64_t v101 = *((unsigned __int8 *)this + 47);
    v102 = v5;
    v103 = (_DWORD *)(v101 - 7);
    if ((unint64_t)v101 < 7) {
      goto LABEL_295;
    }
LABEL_284:
    uint64_t v104 = (char *)v102 + v101;
    v105 = v102;
    do
    {
      v106 = (char *)memchr(v105, 46, v101 - 6);
      if (!v106) {
        break;
      }
      if (*(_DWORD *)v106 == 1853186606 && *(_DWORD *)(v106 + 3) == 1701602414)
      {
        if ((_DWORD *)(v106 - (char *)v102) == v103 && v106 != v104 && v106 - (char *)v102 != -1) {
          goto LABEL_296;
        }
        break;
      }
      v105 = (std::string *)(v106 + 1);
      uint64_t v101 = v104 - (char *)v105;
    }
    while (v104 - (char *)v105 >= 7);
  }
LABEL_295:
  std::string::append(v5, ".bundle", 7uLL);
LABEL_296:
  v108 = (void **)v131.__r_.__value_.__r.__words[2];
  if (v131.__r_.__value_.__r.__words[2])
  {
    do
    {
      v109 = (void **)*v108;
      uint64_t v110 = *((unsigned int *)v108 + 16);
      if (v110 != -1) {
        ((void (*)(std::string *, void **))off_1EE39B968[v110])(__p, v108 + 5);
      }
      *((_DWORD *)v108 + 16) = -1;
      if (*((char *)v108 + 39) < 0) {
        operator delete(v108[2]);
      }
      operator delete(v108);
      v108 = v109;
    }
    while (v109);
  }
  v111 = (void *)v131.__r_.__value_.__r.__words[0];
  v131.__r_.__value_.__r.__words[0] = 0;
  if (v111) {
    operator delete(v111);
  }
  v112 = (void **)__str.__r_.__value_.__r.__words[2];
  if (__str.__r_.__value_.__r.__words[2])
  {
    do
    {
      v113 = (void **)*v112;
      uint64_t v114 = *((unsigned int *)v112 + 16);
      if (v114 != -1) {
        ((void (*)(std::string *, void **))off_1EE39B968[v114])(&v131, v112 + 5);
      }
      *((_DWORD *)v112 + 16) = -1;
      if (*((char *)v112 + 39) < 0) {
        operator delete(v112[2]);
      }
      operator delete(v112);
      v112 = v113;
    }
    while (v113);
  }
  v115 = (void *)__str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[0] = 0;
  if (v115) {
    operator delete(v115);
  }
  v116 = v135;
  if (v135)
  {
    do
    {
      v117 = (void **)*v116;
      uint64_t v118 = *((unsigned int *)v116 + 16);
      if (v118 != -1) {
        ((void (*)(std::string *, void **))off_1EE39B968[v118])(&__str, v116 + 5);
      }
      *((_DWORD *)v116 + 16) = -1;
      if (*((char *)v116 + 39) < 0) {
        operator delete(v116[2]);
      }
      operator delete(v116);
      v116 = v117;
    }
    while (v117);
  }
  v119 = (void *)v134[0];
  v134[0] = 0;
  if (v119) {
    operator delete(v119);
  }
  return this;
}

void sub_19215A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, char *a12, void **a13, void **a14, uint64_t a15, void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  __cxa_free_exception(v49);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v50 - 192);
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v50 - 152);
  if (*a12 < 0)
  {
    operator delete(*a14);
    if (*(char *)(v48 + 303) < 0)
    {
LABEL_12:
      operator delete(*a16);
      std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a24);
      if (*(char *)(v48 + 239) < 0)
      {
LABEL_13:
        operator delete(*a17);
        int v52 = *a18;
        if (*a18)
        {
LABEL_14:
          *(void *)(v48 + 192) = v52;
          operator delete(v52);
          int v53 = *a19;
          if (*a19)
          {
LABEL_15:
            *(void *)(v48 + 168) = v53;
            operator delete(v53);
            int v54 = *a13;
            if (*a13)
            {
LABEL_16:
              *(void *)(v48 + 144) = v54;
              operator delete(v54);
              std::pair<std::string const,std::string>::~pair(a20);
              std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](a11);
              if (*(char *)(v48 + 47) < 0)
              {
LABEL_17:
                operator delete(*a10);
                if (*(char *)(v48 + 23) < 0)
                {
LABEL_18:
                  operator delete(*(void **)v48);
                  _Unwind_Resume(a1);
                }
LABEL_9:
                _Unwind_Resume(a1);
              }
LABEL_8:
              if (*(char *)(v48 + 23) < 0) {
                goto LABEL_18;
              }
              goto LABEL_9;
            }
LABEL_7:
            std::pair<std::string const,std::string>::~pair(a20);
            std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](a11);
            if (*(char *)(v48 + 47) < 0) {
              goto LABEL_17;
            }
            goto LABEL_8;
          }
LABEL_6:
          int v54 = *a13;
          if (*a13) {
            goto LABEL_16;
          }
          goto LABEL_7;
        }
LABEL_5:
        int v53 = *a19;
        if (*a19) {
          goto LABEL_15;
        }
        goto LABEL_6;
      }
LABEL_4:
      int v52 = *a18;
      if (*a18) {
        goto LABEL_14;
      }
      goto LABEL_5;
    }
  }
  else if (*(char *)(v48 + 303) < 0)
  {
    goto LABEL_12;
  }
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a24);
  if (*(char *)(v48 + 239) < 0) {
    goto LABEL_13;
  }
  goto LABEL_4;
}

void sub_19215A964()
{
  std::unordered_set<E5Common::PlatformIdentifier>::~unordered_set[abi:ne180100](v0 - 192);
  JUMPOUT(0x19215A974);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v27, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v22 = v13[1];
          if (v22 == v8)
          {
            uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v24 = v13[3];
            }
            if (v24 == v15)
            {
              uint64_t v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                for (uint64_t i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  uint64_t v25 = (const void **)((char *)v25 + 1);
                  if (!--v23) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          int32x2_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            long long v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              for (uint64_t j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                long long v20 = (const void **)((char *)v20 + 1);
                if (!--v18) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        int32x2_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void Espresso::AOT::EstimatorMILDecisionTree::EstimateCost(uint64_t a1, uint64_t a2)
{
  v111[20] = *MEMORY[0x1E4F143B8];
  uint64_t v95 = E5Common::E5PlatformManager::Instance((E5Common::E5PlatformManager *)a1);
  unint64_t v4 = (MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unint64_t v6 = **v4;
  unint64_t v5 = (*v4)[1];
  if (v6 == v5) {
LABEL_124:
  }
    operator new();
  uint64_t v94 = a1 + 32;
  uint64_t v92 = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v93 = *MEMORY[0x1E4FBA418];
  double v7 = 0.0;
  while (1)
  {
    unint64_t v8 = *v6;
    if ((*(uint64_t (**)(MIL::IROperation *))(*(void *)*v6 + 192))(*v6))
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t OutputType = MIL::IROperation::TryGetOutputType(v8);
        if (OutputType)
        {
          if (!(*(uint64_t (**)(uint64_t))(*(void *)OutputType + 24))(OutputType)) {
            goto LABEL_3;
          }
        }
      }
      while (++v9 < (unint64_t)(*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 192))(v8));
    }
    Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(v8, buf);
    uint64_t v11 = *(void *)buf;
    (*(void (**)(double **__return_ptr, void, MIL::IROperation *))(**(void **)buf + 16))(&v96, *(void *)buf, v8);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    if (!*(unsigned char *)(a1 + 48)) {
      goto LABEL_55;
    }
    Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree((Espresso::AOT::EstimatorMILDecisionTree *)a1, v8, (uint64_t)buf);
    Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree((Espresso::AOT::EstimatorMILDecisionTree *)a1, v8, (uint64_t)&__p);
    if (v98 == &__p) {
      break;
    }
    if (v98)
    {
      (*(void (**)(void))(v98->__r_.__value_.__r.__words[0] + 40))();
      unint64_t v12 = v100;
      if (!v100) {
        goto LABEL_125;
      }
      goto LABEL_15;
    }
    uint64_t v18 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 64))(v8);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    Espresso::AOT::GetOperatorType(v19, &__p);
    if (*(char *)(a1 + 31) < 0)
    {
      long long v20 = *(uint64_t **)(a1 + 8);
      if (*(void *)(a1 + 16) != 14)
      {
LABEL_35:
        BOOL v16 = 1;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_36;
        }
        goto LABEL_37;
      }
    }
    else
    {
      long long v20 = (uint64_t *)(a1 + 8);
      if (*(unsigned char *)(a1 + 31) != 14) {
        goto LABEL_35;
      }
    }
    uint64_t v21 = *v20;
    uint64_t v22 = *(uint64_t *)((char *)v20 + 6);
    if (v21 != 0x6D696E696D5F3565 || v22 != 0x7570635F6C616D69) {
      goto LABEL_29;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ == 10)
      {
        if (*(void *)__p.__r_.__value_.__l.__data_ == 0x6174735F64616572
          && *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 8) == 25972)
        {
LABEL_29:
          BOOL v16 = 1;
          if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_36;
          }
          goto LABEL_37;
        }
      }
      else if (__p.__r_.__value_.__l.__size_ == 11)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_101:
        std::string::size_type v87 = p_p->__r_.__value_.__r.__words[0];
        uint64_t v88 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 3);
        BOOL v16 = v87 == 0x74735F6574697277 && v88 == 0x65746174735F6574;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_36:
        }
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_37:
        float v14 = 0.0;
        unint64_t v17 = v100;
        if (v100 == (std::string *)buf) {
          goto LABEL_22;
        }
        goto LABEL_52;
      }
      BOOL v16 = 0;
      goto LABEL_36;
    }
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 10)
    {
      BOOL v16 = __p.__r_.__value_.__r.__words[0] == 0x6174735F64616572
         && LOWORD(__p.__r_.__value_.__r.__words[1]) == 25972;
      float v14 = 0.0;
      unint64_t v17 = v100;
      if (v100 == (std::string *)buf)
      {
LABEL_22:
        (*(void (**)(unsigned char *))(*(void *)buf + 32))(buf);
        goto LABEL_54;
      }
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 11)
      {
        p_p = &__p;
        goto LABEL_101;
      }
      BOOL v16 = 0;
      float v14 = 0.0;
      unint64_t v17 = v100;
      if (v100 == (std::string *)buf) {
        goto LABEL_22;
      }
    }
LABEL_52:
    if (v17) {
      (*(void (**)(std::string *))(v17->__r_.__value_.__r.__words[0] + 40))(v17);
    }
LABEL_54:
    if (!v16)
    {
      int v30 = 0;
      float v31 = 0.0;
      goto LABEL_63;
    }
LABEL_55:
    if (*(char *)(a1 + 31) < 0)
    {
      uint64_t v29 = *(void *)(a1 + 8);
      uint64_t v28 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v28 = *(unsigned __int8 *)(a1 + 31);
      uint64_t v29 = a1 + 8;
    }
    *(_DWORD *)long long buf = Espresso::AOT::GetBackendIdentifier(v29, v28);
    double v32 = (*(double (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v95 + 104))(v95, v94, buf);
    if (*(char *)(a1 + 31) < 0)
    {
      uint64_t v34 = *(void *)(a1 + 8);
      uint64_t v33 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v33 = *(unsigned __int8 *)(a1 + 31);
      uint64_t v34 = a1 + 8;
    }
    *(_DWORD *)long long buf = Espresso::AOT::GetBackendIdentifier(v34, v33);
    float v14 = v32;
    float v31 = (*(double (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v95 + 112))(v95, v94, buf);
    int v30 = 1;
LABEL_63:
    double v35 = *v96;
    double v36 = v96[1] * 0.0009765625;
    double v37 = v31;
    if (v31 <= 0.0) {
      double v38 = 0.0;
    }
    else {
      double v38 = v36 / v31;
    }
    double v39 = v35 / v14;
    if (v14 <= 0.0) {
      double v39 = 0.0;
    }
    double v7 = v7 + fmax(v39, v38) * 1000.0;
    if (!*(unsigned char *)(a1 + 49))
    {
      *(void *)long long buf = operator new(0x28uLL);
      *(_OWORD *)&buf[8] = xmmword_192DAB6B0;
      strcpy(*(char **)buf, "espresso.e5compiler.log_cost_model");
      int v40 = Espresso::AOT::Utils::IsDefaultsWritePresent((uint64_t *)buf);
      int v41 = v40;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (!v41) {
          goto LABEL_94;
        }
      }
      else if (!v40)
      {
        goto LABEL_94;
      }
      double v35 = *v96;
      double v36 = v96[1] * 0.0009765625;
    }
    BOOL IsMemoryBoundInTheory = Espresso::AOT::EstimatorMILDecisionTree::IsMemoryBoundInTheory((Espresso::AOT::EstimatorMILDecisionTree *)a1, v35, v36);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
    *(void *)&buf[*(void *)(*(void *)buf - 24) + 16] = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"gFlopCnt,", 9);
    uint64_t v43 = (void *)std::ostream::operator<<();
    uint64_t v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"totalMB,", 8);
    uint64_t v45 = (void *)std::ostream::operator<<();
    long long v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"kKBPerOC,", 9);
    std::string::size_type v47 = (void *)std::ostream::operator<<();
    uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"mbKernel,", 9);
    std::string::size_type v49 = (void *)std::ostream::operator<<();
    uint64_t v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"mbInputTensors,", 15);
    int v51 = (void *)std::ostream::operator<<();
    int v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"mbOutputTensors,", 16);
    int v53 = (void *)std::ostream::operator<<();
    int v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"opsPerByte,", 11);
    uint64_t v55 = (void *)std::ostream::operator<<();
    char v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"inputTensorX,", 13);
    char v57 = (void *)std::ostream::operator<<();
    char v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"outputTensorX,", 14);
    int v59 = (void *)std::ostream::operator<<();
    int64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"outputChannelCount,", 19);
    uint64_t v61 = (void *)std::ostream::operator<<();
    uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"kernelX,", 8);
    unint64_t v63 = (void *)std::ostream::operator<<();
    std::vector<int> v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"kernelY,", 8);
    std::vector<int> v65 = (void *)std::ostream::operator<<();
    uint64_t v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"dilationX,", 10);
    std::vector<int> v67 = (void *)std::ostream::operator<<();
    long long v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"dilationY,", 10);
    uint64_t v69 = (void *)std::ostream::operator<<();
    uint64_t v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"workUnitEfficiency16,", 21);
    char v71 = (void *)std::ostream::operator<<();
    unsigned int v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)",", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"isL2Resident,", 13);
    std::ostream::operator<<();
    std::stringbuf::str();
    *(void *)long long buf = v93;
    *(void *)&buf[*(void *)(v93 - 24)] = v92;
    *(void *)&buf[8] = MEMORY[0x1E4FBA470] + 16;
    if (v110 < 0) {
      operator delete(v109[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](v111);
    char v74 = Espresso::espresso_os_log_subsystem(0, v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
    {
      long long v75 = v5;
      int v76 = (void *)(*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 176))(v8);
      if (*v76 == v76[1])
      {
        std::string v79 = "op_has_no_output";
      }
      else
      {
        uint64_t v77 = (MIL::IRNamedValueType ***)(*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 176))(v8);
        uint64_t Name = MIL::IRNamedValueType::GetName(**v77);
        if (*(char *)(Name + 23) >= 0) {
          std::string v79 = (const char *)Name;
        }
        else {
          std::string v79 = *(const char **)Name;
        }
      }
      uint64_t v80 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 64))(v8);
      uint64_t v81 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 16))(v80);
      if (*(char *)(v81 + 23) >= 0) {
        uint64_t v82 = v81;
      }
      else {
        uint64_t v82 = *(void *)v81;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v83 = &__p;
      }
      else {
        uint64_t v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v84 = "True";
      if (v30) {
        int v84 = "False";
      }
      int v85 = "Compute";
      if (IsMemoryBoundInTheory) {
        int v85 = "Memory";
      }
      *(_DWORD *)long long buf = 136316930;
      *(void *)&uint8_t buf[4] = v79;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v82;
      *(_WORD *)&buf[22] = 2080;
      v100 = v83;
      __int16 v101 = 2048;
      double v102 = v14;
      __int16 v103 = 2048;
      double v104 = v37;
      __int16 v105 = 2048;
      double v106 = v7;
      __int16 v107 = 2080;
      v108 = v84;
      LOWORD(v109[0]) = 2080;
      *(void **)((char *)v109 + 2) = (void *)v85;
      _os_log_impl(&dword_1920CB000, v74, OS_LOG_TYPE_INFO, "[CostModelFeature],%s,Op,%s,%s,GFLOP/s,%f,GBP/s,%f,Runtime,%f,UsedDTree,%s,Bound:%s", buf, 0x52u);
      unint64_t v5 = v75;
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_94:
      uint64_t v86 = v96;
      long long v96 = 0;
      if (!v86) {
        goto LABEL_3;
      }
LABEL_97:
      MEMORY[0x192FF16B0](v86, 0x1000C401CC6BE04);
      goto LABEL_3;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    uint64_t v86 = v96;
    long long v96 = 0;
    if (v86) {
      goto LABEL_97;
    }
LABEL_3:
    v6 += 2;
    if (v6 == v5) {
      goto LABEL_124;
    }
  }
  (*(void (**)(std::string *))(__p.__r_.__value_.__r.__words[0] + 32))(&__p);
  unint64_t v12 = v100;
  if (!v100) {
LABEL_125:
  }
    std::__throw_bad_function_call[abi:ne180100]();
LABEL_15:
  float v13 = (*(float (**)(std::string *, double *))(v12->__r_.__value_.__r.__words[0] + 48))(v12, v96);
  float v14 = v13;
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v15 = *(_DWORD **)(a1 + 8);
    if (*(void *)(a1 + 16) != 4) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v15 = (_DWORD *)(a1 + 8);
    if (*(unsigned char *)(a1 + 31) != 4) {
      goto LABEL_20;
    }
  }
  if (*v15 == 1936617058)
  {
    uint64_t v24 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)v8 + 64))(v8);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    Espresso::AOT::GetOperatorType(v25, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v26 = __p.__r_.__value_.__l.__size_ != 4 || *(_DWORD *)__p.__r_.__value_.__l.__data_ != 1970038130;
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1970038130;
    }
    if (v26) {
      float v14 = v14 * 1.1502;
    }
    if (v14 > 0.0)
    {
LABEL_21:
      BOOL v16 = 0;
      unint64_t v17 = v100;
      if (v100 == (std::string *)buf) {
        goto LABEL_22;
      }
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_20:
  if (v13 > 0.0) {
    goto LABEL_21;
  }
LABEL_51:
  BOOL v16 = 1;
  unint64_t v17 = v100;
  if (v100 == (std::string *)buf) {
    goto LABEL_22;
  }
  goto LABEL_52;
}

void sub_19215B960(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void sub_19215B984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a24)
  {
    MEMORY[0x192FF16B0](a24, 0x1000C401CC6BE04);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(Espresso::AOT::EstimatorMILDecisionTree *this@<X0>, const MIL::IROperation *a2@<X1>, uint64_t a3@<X8>)
{
  if (Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(MIL::IROperation const&)::onceToken != -1) {
    dispatch_once(&Espresso::AOT::EstimatorMILDecisionTree::GetDecisionTree(MIL::IROperation const&)::onceToken, &__block_literal_global_12);
  }
  uint64_t v6 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 64))(a2);
  double v7 = (E5Common::E5PlatformManager *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  uint64_t v8 = E5Common::E5PlatformManager::Instance(v7);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 96))(__p);
  Espresso::AOT::Backends::CostModel::DecisionTreeModelRegistry::GetDecisionTreeModel((uint64_t)v7, (uint64_t *)this + 1, (const void **)__p, a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19215BB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t E5Common::E5PlatformManager::Instance(E5Common::E5PlatformManager *this)
{
  if (qword_1E9301C90 != -1) {
    dispatch_once(&qword_1E9301C90, &unk_1EE39A088);
  }
  return qword_1E9301C88;
}

uint64_t Espresso::AOT::GetBackendIdentifier(uint64_t a1, uint64_t a2)
{
  v14[0] = a1;
  v14[1] = a2;
  switch(a2)
  {
    case 2:
      if (*(_WORD *)a1 != 13669) {
        goto LABEL_44;
      }
      return 0;
    case 3:
      if (*(_WORD *)a1 == 28257 && *(unsigned char *)(a1 + 2) == 101)
      {
        uint64_t result = 2;
      }
      else if (*(_WORD *)a1 == 27757 && *(unsigned char *)(a1 + 2) == 99)
      {
        uint64_t result = 4;
      }
      else
      {
        if (*(_WORD *)a1 != 26981 || *(unsigned char *)(a1 + 2) != 114)
        {
LABEL_44:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
          char v10 = std::string::insert(&__dst, 0, "Unsupported backend: ");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v13.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &v13);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
        }
        uint64_t result = 6;
      }
      break;
    case 4:
      if (*(_DWORD *)a1 == 1869504878)
      {
        uint64_t result = 1;
      }
      else
      {
        if (*(_DWORD *)a1 != 1936617058) {
          goto LABEL_44;
        }
        uint64_t result = 8;
      }
      break;
    case 8:
      if (*(void *)a1 != 0x6C6C61635F74696ALL) {
        goto LABEL_44;
      }
      return 7;
    case 9:
      if (*(void *)a1 != 0x706172675F73706DLL || *(unsigned char *)(a1 + 8) != 104) {
        goto LABEL_44;
      }
      return 5;
    case 11:
      if (*(void *)a1 != 0x5F63697373616C63 || *(void *)(a1 + 3) != 0x7570635F63697373) {
        goto LABEL_44;
      }
      return 3;
    case 14:
      if (*(void *)a1 != 0x6D696E696D5F3565 || *(void *)(a1 + 6) != 0x7570635F6C616D69) {
        goto LABEL_44;
      }
      return 9;
    default:
      goto LABEL_44;
  }
  return result;
}

void sub_19215BEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(const MIL::IROperation *a1@<X1>, void *a2@<X8>)
{
  if (Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken != -1) {
    dispatch_once(&Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(MIL::IROperation const&)::onceToken, &__block_literal_global);
  }
  uint64_t v5 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a1 + 56))(a1);
  Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::CreateEstimator(v5, &v6);
  if (!v6) {
    operator new();
  }
  *a2 = v6;
}

void sub_19215C060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    Espresso::AOT::EstimatorMILDecisionTree::GetResourceEstimator(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::Utils::IsDefaultsWritePresent(uint64_t *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v3 = [v2 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  if (v3)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v4 = a1;
    }
    else {
      unint64_t v4 = (uint64_t *)*a1;
    }
    uint64_t v5 = [NSString stringWithUTF8String:v4];
    uint64_t v6 = [v3 objectForKeyedSubscript:v5];
    uint64_t v7 = [v6 BOOLValue];

    return v7;
  }
  else
  {

    return 0;
  }
}

void sub_19215C144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19215C15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19215C170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19215C180(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void Espresso::AOT::Backends::CostModel::GRUOpEstimator::~GRUOpEstimator(Espresso::AOT::Backends::CostModel::GRUOpEstimator *this)
{
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator(this);

  JUMPOUT(0x192FF16B0);
}

double E5PlatformManagerImpl::GetMaxGFlops(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  if (*a3 == 7)
  {
    int8x8_t v13 = *(int8x8_t *)(a1 + 56);
    if (!*(void *)&v13) {
      goto LABEL_169;
    }
    float v14 = **(void ***)(a1 + 48);
    if (!v14) {
      goto LABEL_169;
    }
    uint64_t v15 = (void *)*v14;
    if (!v15) {
      goto LABEL_169;
    }
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] < 2uLL)
    {
      uint64_t v17 = *(void *)&v13 - 1;
      while (1)
      {
        uint64_t v18 = v15[1];
        if (v18)
        {
          if ((v18 & v17) != 0) {
            goto LABEL_169;
          }
        }
        else if (!v15[2])
        {
          goto LABEL_34;
        }
        uint64_t v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_169;
        }
      }
    }
    while (1)
    {
      unint64_t v21 = v15[1];
      if (v21)
      {
        if (v21 < *(void *)&v13 || v21 % *(void *)&v13) {
          goto LABEL_169;
        }
      }
      else if (!v15[2])
      {
LABEL_34:
        for (uint64_t i = (uint64_t *)v15[4]; i; uint64_t i = (uint64_t *)i[1])
        {
          while (1)
          {
            unsigned int v20 = *((_DWORD *)i + 8);
            if (v20 < 4) {
              break;
            }
            uint64_t i = (uint64_t *)*i;
            if (!i) {
              goto LABEL_160;
            }
          }
          if (v20 == 3) {
            return *((double *)i + 5) * 0.5;
          }
        }
        goto LABEL_160;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_169;
      }
    }
  }
  if (v3 != 6)
  {
    int8x8_t v22 = *(int8x8_t *)(a1 + 56);
    if (!*(void *)&v22) {
      goto LABEL_169;
    }
    unint64_t v23 = *a2;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = *a2;
      if (*(void *)&v22 <= v23) {
        unint64_t v25 = v23 % *(void *)&v22;
      }
    }
    else
    {
      unint64_t v25 = (*(void *)&v22 - 1) & v23;
    }
    char v27 = *(void ***)(a1 + 48);
    uint64_t v28 = v27[v25];
    if (!v28) {
      goto LABEL_123;
    }
    uint64_t v29 = (void *)*v28;
    if (!*v28) {
      goto LABEL_123;
    }
    uint64_t v30 = *(void *)&v22 - 1;
    if (v24.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v31 = v29[1];
        if (v31 == v23)
        {
          if (v29[2] == v23) {
            goto LABEL_70;
          }
        }
        else if ((v31 & v30) != v25)
        {
          goto LABEL_123;
        }
        uint64_t v29 = (void *)*v29;
        if (!v29) {
          goto LABEL_123;
        }
      }
    }
    while (1)
    {
      unint64_t v32 = v29[1];
      if (v32 == v23)
      {
        if (v29[2] == v23)
        {
LABEL_70:
          if (v24.u32[0] > 1uLL)
          {
            unint64_t v33 = *a2;
            if (*(void *)&v22 <= v23) {
              unint64_t v33 = v23 % *(void *)&v22;
            }
          }
          else
          {
            unint64_t v33 = v30 & v23;
          }
          uint64_t v34 = v27[v33];
          if (!v34) {
            goto LABEL_169;
          }
          double v35 = (void *)*v34;
          if (!v35) {
            goto LABEL_169;
          }
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v36 = v35[1];
              if (v36 == v23)
              {
                if (v35[2] == v23) {
                  goto LABEL_82;
                }
              }
              else if ((v36 & v30) != v33)
              {
                goto LABEL_169;
              }
              double v35 = (void *)*v35;
              if (!v35) {
                goto LABEL_169;
              }
            }
          }
          while (1)
          {
            unint64_t v45 = v35[1];
            if (v45 == v23)
            {
              if (v35[2] == v23)
              {
LABEL_82:
                uint64_t v39 = v35[4];
                double v37 = v35 + 4;
                uint64_t v38 = v39;
                if (!v39) {
                  goto LABEL_93;
                }
                int v40 = v37;
                do
                {
                  unsigned int v41 = *(_DWORD *)(v38 + 32);
                  BOOL v42 = v41 >= v3;
                  if (v41 >= v3) {
                    uint64_t v43 = (uint64_t *)v38;
                  }
                  else {
                    uint64_t v43 = (uint64_t *)(v38 + 8);
                  }
                  if (v42) {
                    int v40 = (void *)v38;
                  }
                  uint64_t v38 = *v43;
                }
                while (*v43);
                if (v40 == v37 || v3 < *((_DWORD *)v40 + 8)) {
LABEL_93:
                }
                  int v40 = v37;
                if (v24.u32[0] > 1uLL)
                {
                  unint64_t v44 = *a2;
                  if (*(void *)&v22 <= v23) {
                    unint64_t v44 = v23 % *(void *)&v22;
                  }
                }
                else
                {
                  unint64_t v44 = v30 & v23;
                }
                long long v46 = v27[v44];
                if (!v46) {
                  goto LABEL_169;
                }
                std::string::size_type v47 = (void *)*v46;
                if (!v47) {
                  goto LABEL_169;
                }
                if (v24.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v48 = v47[1];
                    if (v48 == v23)
                    {
                      if (v47[2] == v23) {
                        goto LABEL_113;
                      }
                    }
                    else if ((v48 & v30) != v44)
                    {
                      goto LABEL_169;
                    }
                    std::string::size_type v47 = (void *)*v47;
                    if (!v47) {
                      goto LABEL_169;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v50 = v47[1];
                  if (v50 == v23)
                  {
                    if (v47[2] == v23)
                    {
LABEL_113:
                      if (v40 != v47 + 4)
                      {
                        if (v24.u32[0] > 1uLL)
                        {
                          unint64_t v49 = *a2;
                          if (*(void *)&v22 <= v23) {
                            unint64_t v49 = v23 % *(void *)&v22;
                          }
                        }
                        else
                        {
                          unint64_t v49 = v30 & v23;
                        }
                        char v57 = v27[v49];
                        if (v57)
                        {
                          char v58 = (void *)*v57;
                          if (v58)
                          {
                            if (v24.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                uint64_t v59 = v58[1];
                                if (v59 == v23)
                                {
                                  if (v58[2] == v23) {
                                    goto LABEL_154;
                                  }
                                }
                                else if ((v59 & v30) != v49)
                                {
                                  goto LABEL_169;
                                }
                                char v58 = (void *)*v58;
                                if (!v58) {
                                  goto LABEL_169;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v61 = v58[1];
                              if (v61 == v23)
                              {
                                if (v58[2] == v23)
                                {
LABEL_154:
                                  for (uint64_t j = (uint64_t *)v58[4]; j; uint64_t j = (uint64_t *)j[1])
                                  {
                                    while (1)
                                    {
                                      unsigned int v60 = *((_DWORD *)j + 8);
                                      if (v3 >= v60) {
                                        break;
                                      }
                                      uint64_t j = (uint64_t *)*j;
                                      if (!j) {
                                        goto LABEL_160;
                                      }
                                    }
                                    if (v60 >= v3) {
                                      return *((double *)j + 5);
                                    }
                                  }
LABEL_160:
                                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                                }
                              }
                              else
                              {
                                if (v61 >= *(void *)&v22) {
                                  v61 %= *(void *)&v22;
                                }
                                if (v61 != v49) {
                                  break;
                                }
                              }
                              char v58 = (void *)*v58;
                            }
                            while (v58);
                          }
                        }
LABEL_169:
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
LABEL_123:
                      if (*v27)
                      {
                        int v51 = (void *)**v27;
                        if (v51)
                        {
                          if (v24.u32[0] < 2uLL)
                          {
                            uint64_t v52 = *(void *)&v22 - 1;
                            while (1)
                            {
                              uint64_t v53 = v51[1];
                              if (v53)
                              {
                                if ((v53 & v52) != 0) {
                                  goto LABEL_169;
                                }
                              }
                              else if (!v51[2])
                              {
                                goto LABEL_131;
                              }
                              int v51 = (void *)*v51;
                              if (!v51) {
                                goto LABEL_169;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v56 = v51[1];
                            if (v56)
                            {
                              if (v56 < *(void *)&v22 || v56 % *(void *)&v22) {
                                goto LABEL_169;
                              }
                            }
                            else if (!v51[2])
                            {
LABEL_131:
                              uint64_t j = (uint64_t *)v51[4];
                              if (!j) {
                                goto LABEL_160;
                              }
                              while (1)
                              {
                                while (1)
                                {
                                  unsigned int v55 = *((_DWORD *)j + 8);
                                  if (v3 >= v55) {
                                    break;
                                  }
                                  uint64_t j = (uint64_t *)*j;
                                  if (!j) {
                                    goto LABEL_160;
                                  }
                                }
                                if (v55 >= v3) {
                                  return *((double *)j + 5);
                                }
                                uint64_t j = (uint64_t *)j[1];
                                if (!j) {
                                  goto LABEL_160;
                                }
                              }
                            }
                            int v51 = (void *)*v51;
                            if (!v51) {
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    if (v50 >= *(void *)&v22) {
                      v50 %= *(void *)&v22;
                    }
                    if (v50 != v44) {
                      goto LABEL_169;
                    }
                  }
                  std::string::size_type v47 = (void *)*v47;
                  if (!v47) {
                    goto LABEL_169;
                  }
                }
              }
            }
            else
            {
              if (v45 >= *(void *)&v22) {
                v45 %= *(void *)&v22;
              }
              if (v45 != v33) {
                goto LABEL_169;
              }
            }
            double v35 = (void *)*v35;
            if (!v35) {
              goto LABEL_169;
            }
          }
        }
      }
      else
      {
        if (v32 >= *(void *)&v22) {
          v32 %= *(void *)&v22;
        }
        if (v32 != v25) {
          goto LABEL_123;
        }
      }
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        goto LABEL_123;
      }
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 56);
  if (!*(void *)&v4) {
    goto LABEL_169;
  }
  uint64_t v5 = **(void ***)(a1 + 48);
  if (!v5) {
    goto LABEL_169;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_169;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9)
      {
        if ((v9 & v8) != 0) {
          goto LABEL_169;
        }
      }
      else if (!v6[2])
      {
        goto LABEL_12;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_169;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v6[1];
    if (!v12) {
      break;
    }
    if (v12 < *(void *)&v4 || v12 % *(void *)&v4) {
      goto LABEL_169;
    }
LABEL_20:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_169;
    }
  }
  if (v6[2]) {
    goto LABEL_20;
  }
LABEL_12:
  char v10 = (uint64_t *)v6[4];
  if (!v10) {
    goto LABEL_160;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v11 = *((_DWORD *)v10 + 8);
      if (v11 < 3) {
        break;
      }
      char v10 = (uint64_t *)*v10;
      if (!v10) {
        goto LABEL_160;
      }
    }
    if (v11 == 2) {
      return *((double *)v10 + 5);
    }
    char v10 = (uint64_t *)v10[1];
    if (!v10) {
      goto LABEL_160;
    }
  }
}

double E5PlatformManagerImpl::GetMaxGBBW(uint64_t a1, unint64_t *a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  if (*a3 == 7)
  {
    int8x8_t v13 = *(int8x8_t *)(a1 + 56);
    if (!*(void *)&v13) {
      goto LABEL_169;
    }
    float v14 = **(void ***)(a1 + 48);
    if (!v14) {
      goto LABEL_169;
    }
    uint64_t v15 = (void *)*v14;
    if (!v15) {
      goto LABEL_169;
    }
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] < 2uLL)
    {
      uint64_t v17 = *(void *)&v13 - 1;
      while (1)
      {
        uint64_t v18 = v15[1];
        if (v18)
        {
          if ((v18 & v17) != 0) {
            goto LABEL_169;
          }
        }
        else if (!v15[2])
        {
          goto LABEL_34;
        }
        uint64_t v15 = (void *)*v15;
        if (!v15) {
          goto LABEL_169;
        }
      }
    }
    while (1)
    {
      unint64_t v21 = v15[1];
      if (v21)
      {
        if (v21 < *(void *)&v13 || v21 % *(void *)&v13) {
          goto LABEL_169;
        }
      }
      else if (!v15[2])
      {
LABEL_34:
        for (uint64_t i = (uint64_t *)v15[7]; i; uint64_t i = (uint64_t *)i[1])
        {
          while (1)
          {
            unsigned int v20 = *((_DWORD *)i + 8);
            if (v20 < 4) {
              break;
            }
            uint64_t i = (uint64_t *)*i;
            if (!i) {
              goto LABEL_160;
            }
          }
          if (v20 == 3) {
            return *((double *)i + 5) * 0.5;
          }
        }
        goto LABEL_160;
      }
      uint64_t v15 = (void *)*v15;
      if (!v15) {
        goto LABEL_169;
      }
    }
  }
  if (v3 != 6)
  {
    int8x8_t v22 = *(int8x8_t *)(a1 + 56);
    if (!*(void *)&v22) {
      goto LABEL_169;
    }
    unint64_t v23 = *a2;
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v25 = *a2;
      if (*(void *)&v22 <= v23) {
        unint64_t v25 = v23 % *(void *)&v22;
      }
    }
    else
    {
      unint64_t v25 = (*(void *)&v22 - 1) & v23;
    }
    char v27 = *(void ***)(a1 + 48);
    uint64_t v28 = v27[v25];
    if (!v28) {
      goto LABEL_123;
    }
    uint64_t v29 = (void *)*v28;
    if (!*v28) {
      goto LABEL_123;
    }
    uint64_t v30 = *(void *)&v22 - 1;
    if (v24.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v31 = v29[1];
        if (v31 == v23)
        {
          if (v29[2] == v23) {
            goto LABEL_70;
          }
        }
        else if ((v31 & v30) != v25)
        {
          goto LABEL_123;
        }
        uint64_t v29 = (void *)*v29;
        if (!v29) {
          goto LABEL_123;
        }
      }
    }
    while (1)
    {
      unint64_t v32 = v29[1];
      if (v32 == v23)
      {
        if (v29[2] == v23)
        {
LABEL_70:
          if (v24.u32[0] > 1uLL)
          {
            unint64_t v33 = *a2;
            if (*(void *)&v22 <= v23) {
              unint64_t v33 = v23 % *(void *)&v22;
            }
          }
          else
          {
            unint64_t v33 = v30 & v23;
          }
          uint64_t v34 = v27[v33];
          if (!v34) {
            goto LABEL_169;
          }
          double v35 = (void *)*v34;
          if (!v35) {
            goto LABEL_169;
          }
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v36 = v35[1];
              if (v36 == v23)
              {
                if (v35[2] == v23) {
                  goto LABEL_82;
                }
              }
              else if ((v36 & v30) != v33)
              {
                goto LABEL_169;
              }
              double v35 = (void *)*v35;
              if (!v35) {
                goto LABEL_169;
              }
            }
          }
          while (1)
          {
            unint64_t v45 = v35[1];
            if (v45 == v23)
            {
              if (v35[2] == v23)
              {
LABEL_82:
                uint64_t v39 = v35[7];
                double v37 = v35 + 7;
                uint64_t v38 = v39;
                if (!v39) {
                  goto LABEL_93;
                }
                int v40 = v37;
                do
                {
                  unsigned int v41 = *(_DWORD *)(v38 + 32);
                  BOOL v42 = v41 >= v3;
                  if (v41 >= v3) {
                    uint64_t v43 = (uint64_t *)v38;
                  }
                  else {
                    uint64_t v43 = (uint64_t *)(v38 + 8);
                  }
                  if (v42) {
                    int v40 = (void *)v38;
                  }
                  uint64_t v38 = *v43;
                }
                while (*v43);
                if (v40 == v37 || v3 < *((_DWORD *)v40 + 8)) {
LABEL_93:
                }
                  int v40 = v37;
                if (v24.u32[0] > 1uLL)
                {
                  unint64_t v44 = *a2;
                  if (*(void *)&v22 <= v23) {
                    unint64_t v44 = v23 % *(void *)&v22;
                  }
                }
                else
                {
                  unint64_t v44 = v30 & v23;
                }
                long long v46 = v27[v44];
                if (!v46) {
                  goto LABEL_169;
                }
                std::string::size_type v47 = (void *)*v46;
                if (!v47) {
                  goto LABEL_169;
                }
                if (v24.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v48 = v47[1];
                    if (v48 == v23)
                    {
                      if (v47[2] == v23) {
                        goto LABEL_113;
                      }
                    }
                    else if ((v48 & v30) != v44)
                    {
                      goto LABEL_169;
                    }
                    std::string::size_type v47 = (void *)*v47;
                    if (!v47) {
                      goto LABEL_169;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v50 = v47[1];
                  if (v50 == v23)
                  {
                    if (v47[2] == v23)
                    {
LABEL_113:
                      if (v40 != v47 + 7)
                      {
                        if (v24.u32[0] > 1uLL)
                        {
                          unint64_t v49 = *a2;
                          if (*(void *)&v22 <= v23) {
                            unint64_t v49 = v23 % *(void *)&v22;
                          }
                        }
                        else
                        {
                          unint64_t v49 = v30 & v23;
                        }
                        char v57 = v27[v49];
                        if (v57)
                        {
                          char v58 = (void *)*v57;
                          if (v58)
                          {
                            if (v24.u32[0] < 2uLL)
                            {
                              while (1)
                              {
                                uint64_t v59 = v58[1];
                                if (v59 == v23)
                                {
                                  if (v58[2] == v23) {
                                    goto LABEL_154;
                                  }
                                }
                                else if ((v59 & v30) != v49)
                                {
                                  goto LABEL_169;
                                }
                                char v58 = (void *)*v58;
                                if (!v58) {
                                  goto LABEL_169;
                                }
                              }
                            }
                            do
                            {
                              unint64_t v61 = v58[1];
                              if (v61 == v23)
                              {
                                if (v58[2] == v23)
                                {
LABEL_154:
                                  for (uint64_t j = (uint64_t *)v58[7]; j; uint64_t j = (uint64_t *)j[1])
                                  {
                                    while (1)
                                    {
                                      unsigned int v60 = *((_DWORD *)j + 8);
                                      if (v3 >= v60) {
                                        break;
                                      }
                                      uint64_t j = (uint64_t *)*j;
                                      if (!j) {
                                        goto LABEL_160;
                                      }
                                    }
                                    if (v60 >= v3) {
                                      return *((double *)j + 5);
                                    }
                                  }
LABEL_160:
                                  std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
                                }
                              }
                              else
                              {
                                if (v61 >= *(void *)&v22) {
                                  v61 %= *(void *)&v22;
                                }
                                if (v61 != v49) {
                                  break;
                                }
                              }
                              char v58 = (void *)*v58;
                            }
                            while (v58);
                          }
                        }
LABEL_169:
                        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
                      }
LABEL_123:
                      if (*v27)
                      {
                        int v51 = (void *)**v27;
                        if (v51)
                        {
                          if (v24.u32[0] < 2uLL)
                          {
                            uint64_t v52 = *(void *)&v22 - 1;
                            while (1)
                            {
                              uint64_t v53 = v51[1];
                              if (v53)
                              {
                                if ((v53 & v52) != 0) {
                                  goto LABEL_169;
                                }
                              }
                              else if (!v51[2])
                              {
                                goto LABEL_131;
                              }
                              int v51 = (void *)*v51;
                              if (!v51) {
                                goto LABEL_169;
                              }
                            }
                          }
                          while (1)
                          {
                            unint64_t v56 = v51[1];
                            if (v56)
                            {
                              if (v56 < *(void *)&v22 || v56 % *(void *)&v22) {
                                goto LABEL_169;
                              }
                            }
                            else if (!v51[2])
                            {
LABEL_131:
                              uint64_t j = (uint64_t *)v51[7];
                              if (!j) {
                                goto LABEL_160;
                              }
                              while (1)
                              {
                                while (1)
                                {
                                  unsigned int v55 = *((_DWORD *)j + 8);
                                  if (v3 >= v55) {
                                    break;
                                  }
                                  uint64_t j = (uint64_t *)*j;
                                  if (!j) {
                                    goto LABEL_160;
                                  }
                                }
                                if (v55 >= v3) {
                                  return *((double *)j + 5);
                                }
                                uint64_t j = (uint64_t *)j[1];
                                if (!j) {
                                  goto LABEL_160;
                                }
                              }
                            }
                            int v51 = (void *)*v51;
                            if (!v51) {
                              goto LABEL_169;
                            }
                          }
                        }
                      }
                      goto LABEL_169;
                    }
                  }
                  else
                  {
                    if (v50 >= *(void *)&v22) {
                      v50 %= *(void *)&v22;
                    }
                    if (v50 != v44) {
                      goto LABEL_169;
                    }
                  }
                  std::string::size_type v47 = (void *)*v47;
                  if (!v47) {
                    goto LABEL_169;
                  }
                }
              }
            }
            else
            {
              if (v45 >= *(void *)&v22) {
                v45 %= *(void *)&v22;
              }
              if (v45 != v33) {
                goto LABEL_169;
              }
            }
            double v35 = (void *)*v35;
            if (!v35) {
              goto LABEL_169;
            }
          }
        }
      }
      else
      {
        if (v32 >= *(void *)&v22) {
          v32 %= *(void *)&v22;
        }
        if (v32 != v25) {
          goto LABEL_123;
        }
      }
      uint64_t v29 = (void *)*v29;
      if (!v29) {
        goto LABEL_123;
      }
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 56);
  if (!*(void *)&v4) {
    goto LABEL_169;
  }
  uint64_t v5 = **(void ***)(a1 + 48);
  if (!v5) {
    goto LABEL_169;
  }
  uint64_t v6 = (void *)*v5;
  if (!v6) {
    goto LABEL_169;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v8 = *(void *)&v4 - 1;
    while (1)
    {
      uint64_t v9 = v6[1];
      if (v9)
      {
        if ((v9 & v8) != 0) {
          goto LABEL_169;
        }
      }
      else if (!v6[2])
      {
        goto LABEL_12;
      }
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_169;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v6[1];
    if (!v12) {
      break;
    }
    if (v12 < *(void *)&v4 || v12 % *(void *)&v4) {
      goto LABEL_169;
    }
LABEL_20:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_169;
    }
  }
  if (v6[2]) {
    goto LABEL_20;
  }
LABEL_12:
  char v10 = (uint64_t *)v6[7];
  if (!v10) {
    goto LABEL_160;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v11 = *((_DWORD *)v10 + 8);
      if (v11 < 3) {
        break;
      }
      char v10 = (uint64_t *)*v10;
      if (!v10) {
        goto LABEL_160;
      }
    }
    if (v11 == 2) {
      return *((double *)v10 + 5);
    }
    char v10 = (uint64_t *)v10[1];
    if (!v10) {
      goto LABEL_160;
    }
  }
}

uint64_t std::__function::__func<float (*)(Espresso::AOT::DTrees::CostModelFeature const&),std::allocator<float (*)(Espresso::AOT::DTrees::CostModelFeature const&)>,float ()(Espresso::AOT::DTrees::CostModelFeature const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

float Espresso::AOT::DTrees::addCpuEp()
{
  return 8.0;
}

void Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator::~BaseMatmulOpEstimator(void **this)
{
  *this = &unk_1EE36B8E8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
LABEL_3:
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::AOT::AbstractMILOpResourceEstimator *v2;
  uint64_t vars8;

  *this = &unk_1EE36B8E8;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v2 = (Espresso::AOT::AbstractMILOpResourceEstimator *)this;
      goto LABEL_5;
    }
  }
  else if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[1]);
  uint64_t v2 = (Espresso::AOT::AbstractMILOpResourceEstimator *)this;

LABEL_5:
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator(v2);
}

float Espresso::AOT::DTrees::transposeCpuEp()
{
  return 3.0;
}

void std::__hash_table<E5Common::PlatformIdentifier,std::hash<E5Common::PlatformIdentifier>,std::equal_to<E5Common::PlatformIdentifier>,std::allocator<E5Common::PlatformIdentifier>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    int8x8_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        uint64_t v5 = (void *)*v4;
        E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v4 + 2));
        operator delete(v4);
        int8x8_t v4 = v5;
      }
      while (v5);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  unsigned int v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }
    else
    {
      v15 &= v16 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *unsigned int v11 = 0;
    v11[1] = 0;
  }
}

float Espresso::AOT::DTrees::mulCpuEp()
{
  return 5.0;
}

float Espresso::AOT::DTrees::gatherCpuEp()
{
  return 8.0;
}

void Espresso::AOT::Backends::CostModel::NormalizeOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::NormalizeOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_19215D0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *unint64_t v15 = 0;
  MEMORY[0x192FF16B0](v16, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

float Espresso::AOT::DTrees::reduce_sumCpuEp()
{
  return 12.0;
}

float Espresso::AOT::DTrees::linearCpuEp(uint64_t a1)
{
  double v1 = *(double *)(a1 + 48);
  if (v1 <= 56.295)
  {
    BOOL v3 = v1 <= 13.8;
    float result = 30.574;
    if (!v3) {
      return 201.39;
    }
  }
  else
  {
    float result = 165.45;
    if (*(double *)(a1 + 88) > 2560.0) {
      return 503.8;
    }
  }
  return result;
}

void Espresso::AOT::SegmenterShortestPath::BuildStateGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  MIL::IRProgram::GetFunction();
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v21, a2);
  std::string __p = operator new(0x20uLL);
  long long v23 = xmmword_192DAA350;
  strcpy((char *)__p, "FlexibleShapeInformation");
  MIL::IRObject::TryGetAttributeSharedPtr();
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p);
    if (!v20) {
      goto LABEL_14;
    }
  }
  else if (!v20)
  {
    goto LABEL_14;
  }
  MIL::Attributes::FlexibleShapeInfo::Make();
  MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes((uint64_t *)&v18, v13);
  if (!v18)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "MIL program has non-constant (dynamic) shapes with FlexibleShapeInformation attribute. But, it misses Default Shape Please consult MIL Framework or milPython on adding this to the MIL text.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  MEMORY[0x192FEFD50](v14, a2);
  MIL::Passes::PropagateInputTensorShapes();
  if ((MIL::Passes::TypeInferenceResult::IsGood((MIL::Passes::TypeInferenceResult *)&__p) & 1) == 0)
  {
    uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::MILResult::GetMessage((MIL::MILResult *)&__p);
    std::operator+<char>();
    std::runtime_error::runtime_error(v12, &buf);
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  MIL::Transform::ProgramTransformer::GetProgram((uint64_t *)&buf, (MIL::Transform::ProgramTransformer *)v14);
  std::string::size_type v4 = buf.__r_.__value_.__r.__words[0];
  MEMORY[0x192FEF710](&__p);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)v14);
  uint64_t v5 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v13)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(v13);
    MEMORY[0x192FF16B0]();
  }
  if (v4) {
    MIL::IRProgram::GetFunction();
  }
LABEL_14:
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  unint64_t v15 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v15, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  Espresso::AOT::SegmenterShortestPath::OpCostMap::OpCostMap((char **)&v18, (uint64_t *)&v15);
  uint64_t v8 = (void **)v15;
  if (v15)
  {
    uint64_t v9 = v16;
    uint64_t v10 = v15;
    if (v16 != v15)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      uint64_t v10 = v15;
    }
    uint64_t v16 = v8;
    operator delete(v10);
  }
  Espresso::AOT::MILSegmenterOptions::GetSaveSegmentationData(*(Espresso::AOT::MILSegmenterOptions **)(a1 + 48));
  std::make_unique[abi:ne180100]<Espresso::AOT::MILSegmenterAnalytics,BOOL const&,MIL::IRProgram const&,std::vector<std::string> const&,std::string const&>();
}

void sub_19215F620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x240]);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a38);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a44);
  Espresso::AOT::SegmenterShortestPath::StateGraph::~StateGraph((Espresso::AOT::SegmenterShortestPath::StateGraph *)(v72 - 176));
  std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::~pair(&a49);
  std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::~vector[abi:ne180100](&a55);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a64);
  std::unique_ptr<Espresso::AOT::MILSegmenterAnalytics>::~unique_ptr[abi:ne180100](&a70);
  Espresso::AOT::SegmenterShortestPath::OpCostMap::~OpCostMap((Espresso::AOT::SegmenterShortestPath::OpCostMap *)&a72);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  _Unwind_Resume(a1);
}

double Espresso::AOT::CostEstimate::GetRuntime(Espresso::AOT::CostEstimate *this)
{
  return *((double *)this + 1);
}

void Espresso::AOT::CostEstimate::~CostEstimate(Espresso::AOT::CostEstimate *this)
{
}

uint64_t *Espresso::AOT::BackendRegistry::GetCostEstimator@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  float result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    uint64_t v8 = v7;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v8);
  }
  uint64_t v6 = result[8];
  *a3 = result[7];
  a3[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v27, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v22 = v13[1];
          if (v8 == v22)
          {
            uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v24 = v13[3];
            }
            if (v24 == v15)
            {
              uint64_t v25 = (const void **)(v13 + 2);
              if ((v23 & 0x80) != 0)
              {
                if (!memcmp(*v25, v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                for (uint64_t i = v2; *(unsigned __int8 *)v25 == *i; ++i)
                {
                  uint64_t v25 = (const void **)((char *)v25 + 1);
                  if (!--v23) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v22 & v16) != v10)
          {
            return 0;
          }
          float result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            uint64_t v20 = (const void **)(v13 + 2);
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp(*v20, v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              for (uint64_t j = v2; *(unsigned __int8 *)v20 == *j; ++j)
              {
                uint64_t v20 = (const void **)((char *)v20 + 1);
                if (!--v18) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        float result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

void Espresso::AOT::SegmenterShortestPath::StateGraph::AddEdge(Espresso::AOT::SegmenterShortestPath::StateGraph *this, uint64_t a2, uint64_t a3, double a4)
{
  unint64_t v6 = (double **)(*((void *)this + 4) + 24 * a2);
  unint64_t v8 = v6[1];
  unint64_t v7 = (unint64_t)v6[2];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = *v6;
    uint64_t v11 = ((char *)v8 - (char *)*v6) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (double *)&v15[16 * v11];
    *(void *)uint64_t v16 = a3;
    v16[1] = a4;
    uint8x8_t v9 = v16 + 2;
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 2;
        v8 -= 2;
      }
      while (v8 != v10);
      unint64_t v8 = *v6;
    }
    *unint64_t v6 = v16;
    v6[1] = v9;
    _OWORD v6[2] = (double *)&v15[16 * v14];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)unint64_t v8 = a3;
    v8[1] = a4;
    uint8x8_t v9 = v8 + 2;
  }
  v6[1] = v9;
}

void Espresso::AOT::EstimateTransferCostBetweenBackends(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if ((a1[23] & 0x80u) == 0) {
    uint64_t v2 = a1[23];
  }
  else {
    uint64_t v2 = *((void *)a1 + 1);
  }
  int v3 = (char)a2[23];
  if (v3 >= 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v2 == v4)
  {
    if (v3 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((a1[23] & 0x80) != 0)
    {
      memcmp(*(const void **)a1, a2, *((void *)a1 + 1));
    }
    else if (a1[23])
    {
      unint64_t v5 = a1;
      uint64_t v6 = a1[23];
      do
      {
        if (*v5 != *a2) {
          break;
        }
        ++v5;
        ++a2;
        --v6;
      }
      while (v6);
    }
  }
  operator new();
}

void sub_192160030(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CostEstimate::CostEstimate(uint64_t this, double a2)
{
  *(void *)this = &unk_1EE36AF98;
  *(double *)(this + 8) = a2;
  return this;
}

{
  *(void *)this = &unk_1EE36AF98;
  *(double *)(this + 8) = a2;
  return this;
}

void Espresso::AOT::EstimatorMILDecisionTree::EstimateCost(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
}

void Espresso::AOT::DispatchUnitToBlock(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  unint64_t v5 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v4);
  uint64_t v6 = *(void *)(**v5 + 16 * *a3);
  unint64_t v7 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 208))(v6);
  uint64_t v8 = **v7;
  if ((*v7)[1] == v8)
  {
    unint64_t v56 = 0;
    char v57 = 0;
    unint64_t v58 = 0;
    *(_OWORD *)uint64_t v53 = 0u;
    *(_OWORD *)int v54 = 0u;
    int v55 = 1065353216;
    uint64_t v10 = *(void *)(**v5 + 16 * *a3);
    uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 160))(v10);
    unint64_t v12 = v11 + 1;
    uint64_t v13 = (void *)*v11;
    if ((void *)*v11 != v11 + 1)
    {
      do
      {
        uint64_t v14 = v13[7];
        if (((v13[8] - v14) & 0xFFFFFFFF0) != 0)
        {
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          do
          {
            if ((*(unsigned int (**)(void))(**(void **)(v14 + v15) + 16))(*(void *)(v14 + v15)))
            {
              uint64_t Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)(v13[7] + v15));
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v53, Name))
              {
                if (*(char *)(Name + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)Name, *(void *)(Name + 8));
                }
                else
                {
                  long long v18 = *(_OWORD *)Name;
                  v52.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
                  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v18;
                }
                MIL::IROperation::GetParameterType();
                MIL::IRNamedValueType::Make();
                std::string::size_type v47 = __p;
                if (__p) {
                  operator new();
                }
                uint64_t v48 = 0;
                std::string __p = 0;
                uint64_t v20 = v57;
                if ((unint64_t)v57 < v58)
                {
                  *(void *)char v57 = v47;
                  *((void *)v20 + 1) = 0;
                  std::string::size_type v47 = 0;
                  uint64_t v48 = 0;
                  char v57 = v20 + 16;
                  uint64_t v19 = (MIL::IRNamedValueType *)__p;
                  std::string __p = 0;
                  if (v19)
                  {
                    MIL::IRNamedValueType::~IRNamedValueType(v19);
                    MEMORY[0x192FF16B0]();
                  }
                }
                else
                {
                  uint64_t v21 = std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(&v56, (uint64_t)&v47);
                  uint64_t v22 = (std::__shared_weak_count *)v48;
                  char v57 = v21;
                  if (v48 && !atomic_fetch_add(v48 + 1, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                    std::__shared_weak_count::__release_weak(v22);
                    std::string __p = 0;
                  }
                  else
                  {
                    std::string __p = 0;
                  }
                }
                if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v52.__r_.__value_.__l.__data_);
                }
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v53, Name, Name);
              }
            }
            ++v16;
            uint64_t v14 = v13[7];
            v15 += 16;
          }
          while (v16 < ((unint64_t)(v13[8] - v14) >> 4));
        }
        uint64_t v23 = (void *)v13[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v13[2];
            BOOL v25 = *v24 == (void)v13;
            uint64_t v13 = v24;
          }
          while (!v25);
        }
        uint64_t v13 = v24;
      }
      while (v24 != v12);
    }
    BOOL v26 = (MIL::UnknownLocation *)(*(void *(**)(uint64_t *__return_ptr))(**(void **)(**v5 + 16 * *a3)
                                                                                   + 32))(&v51);
    MIL::UnknownLocation::Make(v49, v26);
    v49[1] = v49[0];
    if (v49[0]) {
      operator new();
    }
    unint64_t v50 = 0;
    v49[0] = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(**v5 + 16 * *a3) + 200))(&v47);
    uint64_t v59 = v51;
    if (v51) {
      operator new();
    }
    unsigned int v60 = 0;
    uint64_t v51 = 0;
    std::vector<std::shared_ptr<MIL::IROperation>>::vector[abi:ne180100](&__p, &v59, 1uLL);
    MIL::IRBlock::Make();
    char v27 = (char *)__p;
    if (__p)
    {
      uint64_t v28 = v46;
      uint64_t v29 = __p;
      if (v46 != __p)
      {
        do
        {
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v28 - 1);
          if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
          v28 -= 16;
        }
        while (v28 != v27);
        uint64_t v29 = __p;
      }
      long long v46 = v27;
      operator delete(v29);
    }
    uint64_t v31 = v60;
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    unint64_t v32 = (atomic_ullong *)v47;
    if (v47)
    {
      unint64_t v33 = v48;
      uint64_t v34 = v47;
      if (v48 != v47)
      {
        do
        {
          if (*((char *)v33 - 1) < 0) {
            operator delete((void *)*(v33 - 3));
          }
          v33 -= 3;
        }
        while (v33 != v32);
        uint64_t v34 = v47;
      }
      uint64_t v48 = v32;
      operator delete(v34);
    }
    double v35 = v50;
    if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
    uint64_t v36 = v49[0];
    v49[0] = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    uint64_t v37 = v51;
    uint64_t v51 = 0;
    if (v37) {
      (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
    }
    uint64_t v38 = (void **)v54[0];
    if (v54[0])
    {
      do
      {
        uint64_t v43 = (void **)*v38;
        if (*((char *)v38 + 39) < 0) {
          operator delete(v38[2]);
        }
        operator delete(v38);
        uint64_t v38 = v43;
      }
      while (v43);
    }
    uint64_t v39 = v53[0];
    v53[0] = 0;
    if (v39) {
      operator delete(v39);
    }
    int v40 = v56;
    if (v56)
    {
      unsigned int v41 = v57;
      BOOL v42 = v56;
      if (v57 != v56)
      {
        do
        {
          unint64_t v44 = (std::__shared_weak_count *)*((void *)v41 - 1);
          if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
          v41 -= 16;
        }
        while (v41 != v40);
        BOOL v42 = v56;
      }
      char v57 = v40;
      operator delete(v42);
    }
  }
  else
  {
    uint8x8_t v9 = *(void (**)(void))(**(void **)v8 + 32);
    v9();
  }
}

void sub_1921608A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  std::vector<std::string>::~vector[abi:ne180100](&a14);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  uint64_t v30 = a17;
  a17 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = a20;
  a20 = 0;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
    std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a28);
    std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v28 - 136));
    _Unwind_Resume(a1);
  }
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a28);
  std::vector<std::shared_ptr<E5RT::IOPort>>::~vector[abi:ne180100]((void **)(v28 - 136));
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>::__push_back_slow_path<std::shared_ptr<E5RT::ExecutionStreamOperationInternal>>(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  uint64_t v11 = &v10[16 * v3];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  unint64_t v12 = v11 + 16;
  uint64_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15) {
      return v12;
    }
    goto LABEL_17;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  unint64_t v17 = *a1;
  uint64_t v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      long long v18 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v15 -= 16;
    }
    while (v15 != v17);
    uint64_t v15 = v17;
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v12;
}

void *std::vector<std::shared_ptr<MIL::IROperation>>::vector[abi:ne180100](void *a1, void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = 2 * a3;
    BOOL v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    unint64_t v7 = &a2[v5];
    do
    {
      uint64_t v8 = a2[1];
      *BOOL v6 = *a2;
      v6[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      a2 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_192160E24(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *uint64_t v15 = *v19;
LABEL_61:
      *uint64_t v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192161158(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *Espresso::AOT::BackendRegistry::GetValidator@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  float result = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    uint64_t v8 = v7;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Backend %s is not registered", &v8);
  }
  uint64_t v6 = result[6];
  *a3 = result[5];
  a3[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

Espresso::AOT::ValidationMessage **Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults(Espresso::AOT::ValidationMessage **result, uint64_t *a2, uint64_t a3, Espresso::AOT::ValidationResult **a4, uint64_t a5, unint64_t a6)
{
  v147 = result;
  if (*(unsigned char *)result)
  {
    uint64_t v6 = result;
    uint64_t Function = MIL::IRProgram::GetFunction();
    uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
    (*(void (**)(Espresso::AOT::ValidationMessage *))(*(void *)v6[1] + 40))(v6[1]);
    MIL::IRTensorValueType::MakeScalar();
    (*(void (**)(Espresso::AOT::ValidationMessage *))(*(void *)v6[1] + 40))(v6[1]);
    Scalar = (MIL::IRTensorValueType *)MIL::IRTensorValueType::MakeScalar();
    v130 = a4;
    uint64_t ValidDispatchUnits = Espresso::AOT::ValidationResult::GetValidDispatchUnits(*a4);
    uint64_t v10 = *(void **)ValidDispatchUnits;
    std::string v131 = *(void **)(ValidDispatchUnits + 8);
    if (*(void **)ValidDispatchUnits != v131)
    {
      while (1)
      {
        uint64_t v11 = (std::__shared_weak_count *)a2[1];
        uint64_t v180 = *a2;
        v181 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v132 = v10;
        Espresso::AOT::DispatchUnitToBlock((uint64_t)&v180, a3, v10);
        unint64_t v12 = v181;
        if (v181 && !atomic_fetch_add(&v181->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        uint64_t v13 = (MIL::IRObject ****)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*v182 + 8))(v182);
        uint64_t v15 = **v13;
        uint64_t v14 = (*v13)[1];
        v135 = v14;
LABEL_12:
        if (v15 != v14) {
          break;
        }
        uint64_t v72 = v182;
        v182 = 0;
        if (v72) {
          (*((void (**)(Espresso::AOT::ValidationMessage **))*v72 + 1))(v72);
        }
        uint64_t v10 = v132 + 1;
        if (v132 + 1 == v131) {
          goto LABEL_119;
        }
      }
      v138 = v15;
      uint64_t Location = MIL::IRObject::GetLocation(*v15);
      (*(void (**)(void ***__return_ptr))(*(void *)Location + 24))(&DispatchUnit);
      v174 = 0;
      v175 = 0;
      v176 = 0;
      float v17 = (char *)operator new(8uLL);
      char v144 = 0;
      *(void *)float v17 = v137;
      uint64_t v18 = v17 + 8;
      v174 = v17;
      v176 = v17 + 8;
LABEL_16:
      v175 = v18 - 8;
      uint64_t v19 = (MIL::IRObject ****)(*(uint64_t (**)(void))(**((void **)v18 - 1) + 56))(*((void *)v18 - 1));
      unint64_t v21 = **v19;
      BOOL v20 = (*v19)[1];
      for (i = v20; ; BOOL v20 = i)
      {
        if (v21 == v20) {
          goto LABEL_15;
        }
        unint64_t v24 = *v21;
        uint8x8_t v25 = (uint64_t ***)(*(uint64_t (**)(MIL::IRObject *))(*(void *)*v21 + 208))(*v21);
        v150 = v24;
        uint64_t v26 = **v25;
        unint64_t v27 = (*v25)[1];
        if (v26 != v27) {
          break;
        }
LABEL_52:
        uint64_t v47 = MIL::IRObject::GetLocation(v150);
        (*(void (**)(void ***__return_ptr))(*(void *)v47 + 24))(&v171);
        if ((v173 & 0x80u) == 0) {
          size_t v48 = v173;
        }
        else {
          size_t v48 = v172;
        }
        uint64_t v49 = v179;
        if ((v179 & 0x80u) != 0) {
          uint64_t v49 = v178;
        }
        if (v48 == v49)
        {
          if ((v179 & 0x80u) == 0) {
            unint64_t v50 = (void **)&DispatchUnit;
          }
          else {
            unint64_t v50 = DispatchUnit;
          }
          if ((v173 & 0x80) != 0)
          {
            unint64_t v22 = v171;
            int v23 = memcmp(v171, v50, v172);
            operator delete(v22);
            if (!v23) {
              goto LABEL_73;
            }
          }
          else
          {
            if (!v173) {
              goto LABEL_73;
            }
            uint64_t v51 = 0;
            do
            {
              int v52 = *((unsigned __int8 *)&v171 + v51);
              int v53 = *((unsigned __int8 *)v50 + v51);
            }
            while (v52 == v53 && v173 - 1 != v51++);
            if (v52 == v53)
            {
LABEL_73:
              int v55 = v147[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v147[3] - v55) >> 3) <= a6) {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v56 = (long long *)((char *)v55 + 24 * a6);
              if (*((char *)v56 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v170, *(const std::string::value_type **)v56, *((void *)v56 + 1));
              }
              else
              {
                long long v57 = *v56;
                v170.__r_.__value_.__r.__words[2] = *((void *)v56 + 2);
                *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v57;
              }
              char v167 = 9;
              strcpy((char *)__p, "supported");
              MIL::IRTensorValueType::MakeStringValue();
              v168 = v171;
              if (v171) {
                operator new();
              }
              v169 = 0;
              v171 = 0;
              MIL::IRObject::SetAttribute();
              unint64_t v58 = v169;
              if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
                uint64_t v59 = v171;
                v171 = 0;
                if (v59) {
LABEL_82:
                }
                  (*((void (**)(void **))*v59 + 1))(v59);
              }
              else
              {
                uint64_t v59 = v171;
                v171 = 0;
                if (v59) {
                  goto LABEL_82;
                }
              }
              if (v167 < 0)
              {
                operator delete(__p[0]);
                if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
                  goto LABEL_105;
                }
              }
              else
              {
                if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_85;
                }
LABEL_105:
                operator delete(v170.__r_.__value_.__l.__data_);
              }
LABEL_85:
              (*(void (**)(void ***__return_ptr))(**(void **)a5 + 16))(&v171);
              double Runtime = Espresso::AOT::CostEstimate::GetRuntime((Espresso::AOT::CostEstimate *)v171);
              uint64_t v61 = v171;
              v171 = 0;
              if (v61) {
                (*((void (**)(void **))*v61 + 1))(v61);
              }
              uint64_t v62 = v147[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v147[3] - v62) >> 3) <= a6) {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v63 = (const void **)((char *)v62 + 24 * a6);
              int v64 = *((char *)v63 + 23);
              if (v64 >= 0) {
                size_t v65 = *((unsigned __int8 *)v63 + 23);
              }
              else {
                size_t v65 = (size_t)v63[1];
              }
              unint64_t v66 = v65 + 17;
              if (v65 + 17 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v66 >= 0x17)
              {
                uint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v66 | 7) != 0x17) {
                  uint64_t v68 = v66 | 7;
                }
                uint64_t v69 = v68 + 1;
                p_dst = (void **)operator new(v68 + 1);
                size_t v164 = v65 + 17;
                unint64_t v165 = v69 | 0x8000000000000000;
                std::string __dst = p_dst;
LABEL_98:
                if (v64 >= 0) {
                  uint64_t v70 = v63;
                }
                else {
                  uint64_t v70 = *v63;
                }
                memmove(p_dst, v70, v65);
                goto LABEL_102;
              }
              size_t v164 = 0;
              unint64_t v165 = 0;
              std::string __dst = 0;
              p_dst = (void **)&__dst;
              HIBYTE(v165) = v65 + 17;
              if (v65) {
                goto LABEL_98;
              }
LABEL_102:
              strcpy((char *)p_dst + v65, "_estimatedRuntime");
              MIL::IRTensorValueType::MakeFloat64Value((uint64_t *)&v171, Scalar, Runtime);
              v161 = v171;
              if (v171) {
                operator new();
              }
              uint64_t v162 = 0;
              v171 = 0;
              MIL::IRObject::SetAttribute();
              char v71 = v171;
              v171 = 0;
              if (v71) {
                (*((void (**)(void **))*v71 + 1))(v71);
              }
              if (SHIBYTE(v165) < 0) {
                operator delete(__dst);
              }
              char v144 = 1;
LABEL_15:
              uint64_t v18 = v175;
              if (v175 == v174)
              {
                if ((v144 & 1) == 0)
                {
                  v128 = (void **)&DispatchUnit;
                  if ((v179 & 0x80u) != 0) {
                    v128 = DispatchUnit;
                  }
                  v171 = v128;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Could not find a op in the input program. op: %s", &v171);
                }
                if (v175) {
                  operator delete(v175);
                }
                if ((char)v179 < 0) {
                  operator delete(DispatchUnit);
                }
                uint64_t v15 = v138 + 2;
                uint64_t v14 = v135;
                goto LABEL_12;
              }
              goto LABEL_16;
            }
          }
        }
        else if ((v173 & 0x80) != 0)
        {
          operator delete(v171);
        }
        v21 += 2;
      }
      unint64_t v28 = v175;
      while (1)
      {
        uint64_t v30 = *v26;
        if (v28 < v176)
        {
          *(void *)unint64_t v28 = v30;
          uint64_t v29 = v28 + 8;
          goto LABEL_23;
        }
        uint64_t v31 = v174;
        uint64_t v32 = (v28 - v174) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = v176 - v174;
        if ((v176 - v174) >> 2 > v33) {
          unint64_t v33 = v34 >> 2;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          if (v35 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v36 = (char *)operator new(8 * v35);
          uint64_t v37 = &v36[8 * v32];
          *(void *)uint64_t v37 = v30;
          uint64_t v29 = v37 + 8;
          if (v28 == v31)
          {
LABEL_34:
            v174 = v37;
            v175 = v29;
            v176 = &v36[8 * v35];
            if (!v28) {
              goto LABEL_23;
            }
LABEL_41:
            operator delete(v28);
            goto LABEL_23;
          }
        }
        else
        {
          uint64_t v36 = 0;
          uint64_t v37 = (char *)(8 * v32);
          *(void *)(8 * v32) = v30;
          uint64_t v29 = (char *)(8 * v32 + 8);
          if (v28 == v31) {
            goto LABEL_34;
          }
        }
        unint64_t v38 = v28 - 8 - v31;
        if (v38 < 0x168)
        {
          uint64_t v39 = v28;
          goto LABEL_39;
        }
        if (&v36[v28 - v31 - 8 - (v38 & 0xFFFFFFFFFFFFFFF8)] > &v36[v28 - v31 - 8]) {
          break;
        }
        if (&v28[-(v38 & 0xFFFFFFFFFFFFFFF8) - 8] > v28 - 8)
        {
          uint64_t v39 = v28;
          goto LABEL_39;
        }
        if ((unint64_t)(v31 - v36) < 0x20)
        {
          uint64_t v39 = v28;
          goto LABEL_39;
        }
        uint64_t v41 = (v38 >> 3) + 1;
        uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v39 = &v28[-v42];
        v37 -= v42;
        uint64_t v43 = &v36[8 * v32 - 16];
        unint64_t v44 = v28 - 16;
        uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v46 = *(_OWORD *)v44;
          *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
          *(_OWORD *)uint64_t v43 = v46;
          v43 -= 32;
          v44 -= 32;
          v45 -= 4;
        }
        while (v45);
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_39;
        }
LABEL_40:
        unint64_t v28 = v174;
        v174 = v37;
        v175 = v29;
        v176 = &v36[8 * v35];
        if (v28) {
          goto LABEL_41;
        }
LABEL_23:
        v175 = v29;
        v26 += 2;
        unint64_t v28 = v29;
        if (v26 == v27) {
          goto LABEL_52;
        }
      }
      uint64_t v39 = v28;
      do
      {
LABEL_39:
        uint64_t v40 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v37 - 1) = v40;
        v37 -= 8;
      }
      while (v39 != v31);
      goto LABEL_40;
    }
LABEL_119:
    float result = (Espresso::AOT::ValidationMessage **)Espresso::AOT::ValidationResult::GetValidationMessages(*v130);
    v143 = *result;
    v136 = result[1];
    if (*result != v136)
    {
      while (1)
      {
        long long v73 = (std::__shared_weak_count *)a2[1];
        uint64_t v159 = *a2;
        v160 = v73;
        if (v73) {
          atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        DispatchUnit = (void **)Espresso::AOT::ValidationMessage::GetDispatchUnit(v143);
        Espresso::AOT::DispatchUnitToBlock((uint64_t)&v159, a3, &DispatchUnit);
        char v74 = v160;
        if (v160 && !atomic_fetch_add(&v160->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
        long long v75 = (MIL::IRObject ****)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*v182 + 8))(v182);
        uint64_t v77 = **v75;
        int v76 = (*v75)[1];
        v139 = v76;
LABEL_129:
        if (v77 != v76) {
          break;
        }
        float result = v182;
        v182 = 0;
        if (result) {
          float result = (Espresso::AOT::ValidationMessage **)(*((uint64_t (**)(Espresso::AOT::ValidationMessage **))*result
        }
                                                         + 1))(result);
        v143 = (Espresso::AOT::ValidationMessage *)((char *)v143 + 32);
        if (v143 == v136) {
          return result;
        }
      }
      v141 = (MIL::IRTensorValueType *)v77;
      uint64_t v78 = MIL::IRObject::GetLocation(*v77);
      (*(void (**)(void ***__return_ptr))(*(void *)v78 + 24))(&DispatchUnit);
      v174 = 0;
      v175 = 0;
      v176 = 0;
      std::string v79 = (char *)operator new(8uLL);
      char v145 = 0;
      *(void *)std::string v79 = v137;
      uint64_t v80 = v79 + 8;
      v174 = v79;
      v176 = v79 + 8;
LABEL_133:
      v175 = v80 - 8;
      uint64_t v81 = (MIL::IRObject ****)(*(uint64_t (**)(void))(**((void **)v80 - 1) + 56))(*((void *)v80 - 1));
      uint64_t v83 = **v81;
      uint64_t v82 = (*v81)[1];
      for (j = v82; ; uint64_t v82 = j)
      {
        if (v83 == v82) {
          goto LABEL_132;
        }
        uint64_t v86 = *v83;
        std::string::size_type v87 = (uint64_t ***)(*(uint64_t (**)(MIL::IRObject *))(*(void *)*v83 + 208))(*v83);
        v151 = v86;
        uint64_t v88 = **v87;
        uint64_t v89 = (*v87)[1];
        if (v88 != v89) {
          break;
        }
LABEL_169:
        uint64_t v109 = MIL::IRObject::GetLocation(v151);
        (*(void (**)(void ***__return_ptr))(*(void *)v109 + 24))(&v171);
        if ((v173 & 0x80u) == 0) {
          size_t v110 = v173;
        }
        else {
          size_t v110 = v172;
        }
        uint64_t v111 = v179;
        if ((v179 & 0x80u) != 0) {
          uint64_t v111 = v178;
        }
        if (v110 == v111)
        {
          if ((v179 & 0x80u) == 0) {
            p_DispatchUnit = (void **)&DispatchUnit;
          }
          else {
            p_DispatchUnit = DispatchUnit;
          }
          if ((v173 & 0x80) != 0)
          {
            int v84 = v171;
            int v85 = memcmp(v171, p_DispatchUnit, v172);
            operator delete(v84);
            if (!v85) {
              goto LABEL_190;
            }
          }
          else
          {
            if (!v173) {
              goto LABEL_190;
            }
            uint64_t v113 = 0;
            do
            {
              int v114 = *((unsigned __int8 *)&v171 + v113);
              int v115 = *((unsigned __int8 *)p_DispatchUnit + v113);
            }
            while (v114 == v115 && v173 - 1 != v113++);
            if (v114 == v115)
            {
LABEL_190:
              v117 = v147[2];
              if (0xAAAAAAAAAAAAAAABLL * ((v147[3] - v117) >> 3) <= a6) {
                std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v118 = (const void **)((char *)v117 + 24 * a6);
              int v119 = *((char *)v118 + 23);
              if (v119 >= 0) {
                size_t v120 = *((unsigned __int8 *)v118 + 23);
              }
              else {
                size_t v120 = (size_t)v118[1];
              }
              unint64_t v121 = v120 + 18;
              if (v120 + 18 > 0x7FFFFFFFFFFFFFF7) {
                std::string::__throw_length_error[abi:ne180100]();
              }
              if (v121 >= 0x17)
              {
                uint64_t v123 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v121 | 7) != 0x17) {
                  uint64_t v123 = v121 | 7;
                }
                uint64_t v124 = v123 + 1;
                v122 = operator new(v123 + 1);
                size_t v157 = v120 + 18;
                unint64_t v158 = v124 | 0x8000000000000000;
                v156 = v122;
              }
              else
              {
                size_t v157 = 0;
                unint64_t v158 = 0;
                v156 = 0;
                v122 = &v156;
                HIBYTE(v158) = v120 + 18;
                if (!v120) {
                  goto LABEL_205;
                }
              }
              if (v119 >= 0) {
                v125 = v118;
              }
              else {
                v125 = *v118;
              }
              memmove(v122, v125, v120);
LABEL_205:
              strcpy((char *)v122 + v120, "_validationMessage");
              Espresso::AOT::ValidationMessage::GetMessage(v143, (uint64_t)&v152);
              MIL::IRTensorValueType::MakeStringValue();
              v154 = v171;
              if (v171) {
                operator new();
              }
              v155 = 0;
              v171 = 0;
              MIL::IRObject::SetAttribute();
              v126 = v155;
              if (v155 && !atomic_fetch_add(&v155->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
                v127 = v171;
                v171 = 0;
                if (v127) {
LABEL_210:
                }
                  (*((void (**)(void **))*v127 + 1))(v127);
              }
              else
              {
                v127 = v171;
                v171 = 0;
                if (v127) {
                  goto LABEL_210;
                }
              }
              if (v153 < 0)
              {
                operator delete(v152);
                if (SHIBYTE(v158) < 0) {
                  goto LABEL_215;
                }
              }
              else if (SHIBYTE(v158) < 0)
              {
LABEL_215:
                operator delete(v156);
              }
              char v145 = 1;
LABEL_132:
              uint64_t v80 = v175;
              if (v175 == v174)
              {
                if ((v145 & 1) == 0)
                {
                  v129 = (void **)&DispatchUnit;
                  if ((v179 & 0x80u) != 0) {
                    v129 = DispatchUnit;
                  }
                  v171 = v129;
                  Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Could not find a op in the input program. op: %s", &v171);
                }
                if (v175) {
                  operator delete(v175);
                }
                if ((char)v179 < 0) {
                  operator delete(DispatchUnit);
                }
                int v76 = v139;
                uint64_t v77 = (MIL::IRObject **)((char *)v141 + 16);
                goto LABEL_129;
              }
              goto LABEL_133;
            }
          }
        }
        else if ((v173 & 0x80) != 0)
        {
          operator delete(v171);
        }
        v83 += 2;
      }
      uint64_t v90 = v175;
      while (1)
      {
        uint64_t v92 = *v88;
        if (v90 < v176)
        {
          *(void *)uint64_t v90 = v92;
          unint64_t v91 = v90 + 8;
          goto LABEL_140;
        }
        uint64_t v93 = v174;
        uint64_t v94 = (v90 - v174) >> 3;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v96 = v176 - v174;
        if ((v176 - v174) >> 2 > v95) {
          unint64_t v95 = v96 >> 2;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          if (v97 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v98 = (char *)operator new(8 * v97);
          uint64_t v99 = &v98[8 * v94];
          *(void *)uint64_t v99 = v92;
          unint64_t v91 = v99 + 8;
          if (v90 == v93)
          {
LABEL_151:
            v174 = v99;
            v175 = v91;
            v176 = &v98[8 * v97];
            if (!v90) {
              goto LABEL_140;
            }
LABEL_158:
            operator delete(v90);
            goto LABEL_140;
          }
        }
        else
        {
          uint64_t v98 = 0;
          uint64_t v99 = (char *)(8 * v94);
          *(void *)(8 * v94) = v92;
          unint64_t v91 = (char *)(8 * v94 + 8);
          if (v90 == v93) {
            goto LABEL_151;
          }
        }
        unint64_t v100 = v90 - 8 - v93;
        if (v100 < 0x168)
        {
          __int16 v101 = v90;
          goto LABEL_156;
        }
        if (&v98[v90 - v93 - 8 - (v100 & 0xFFFFFFFFFFFFFFF8)] > &v98[v90 - v93 - 8]) {
          break;
        }
        if (&v90[-(v100 & 0xFFFFFFFFFFFFFFF8) - 8] > v90 - 8)
        {
          __int16 v101 = v90;
          goto LABEL_156;
        }
        if ((unint64_t)(v93 - v98) < 0x20)
        {
          __int16 v101 = v90;
          goto LABEL_156;
        }
        uint64_t v103 = (v100 >> 3) + 1;
        uint64_t v104 = 8 * (v103 & 0x3FFFFFFFFFFFFFFCLL);
        __int16 v101 = &v90[-v104];
        v99 -= v104;
        __int16 v105 = &v98[8 * v94 - 16];
        double v106 = v90 - 16;
        uint64_t v107 = v103 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v108 = *(_OWORD *)v106;
          *((_OWORD *)v105 - 1) = *((_OWORD *)v106 - 1);
          *(_OWORD *)__int16 v105 = v108;
          v105 -= 32;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        if (v103 != (v103 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_156;
        }
LABEL_157:
        uint64_t v90 = v174;
        v174 = v99;
        v175 = v91;
        v176 = &v98[8 * v97];
        if (v90) {
          goto LABEL_158;
        }
LABEL_140:
        v175 = v91;
        v88 += 2;
        uint64_t v90 = v91;
        if (v88 == v89) {
          goto LABEL_169;
        }
      }
      __int16 v101 = v90;
      do
      {
LABEL_156:
        uint64_t v102 = *((void *)v101 - 1);
        v101 -= 8;
        *((void *)v99 - 1) = v102;
        v99 -= 8;
      }
      while (v101 != v93);
      goto LABEL_157;
    }
  }
  return result;
}

void sub_192162380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v58 = *(void *)(v56 - 112);
  *(void *)(v56 - 112) = 0;
  if (!v58) {
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::ValidationResult::GetValidDispatchUnits(Espresso::AOT::ValidationResult *this)
{
  return (uint64_t)this + 8;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,unsigned long long>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned long long>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned long long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *uint64_t v15 = *v26;
LABEL_59:
    *uint64_t v26 = v15;
    goto LABEL_60;
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192162978(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double Espresso::AOT::SegmenterShortestPath::EstimateLaunchCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2)
{
  Espresso::AOT::BackendRegistry::GetCostEstimator((void *)this + 1, *((void *)this + 7) + 24 * a2, &v6);
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr))(*(void *)v6 + 32))(&v8);
  double Runtime = Espresso::AOT::CostEstimate::GetRuntime(v8);
  uint64_t v3 = v8;
  unint64_t v8 = 0;
  if (v3) {
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return Runtime;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return Runtime;
}

void sub_192162AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13)
  {
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

double Espresso::AOT::SegmenterShortestPath::EstimateEndCost(Espresso::AOT::SegmenterShortestPath *this, uint64_t a2)
{
  Espresso::AOT::BackendRegistry::GetCostEstimator((void *)this + 1, *((void *)this + 7) + 24 * a2, &v6);
  (*(void (**)(Espresso::AOT::CostEstimate **__return_ptr))(*(void *)v6 + 40))(&v8);
  double Runtime = Espresso::AOT::CostEstimate::GetRuntime(v8);
  uint64_t v3 = v8;
  unint64_t v8 = 0;
  if (v3) {
    (*(void (**)(Espresso::AOT::CostEstimate *))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = v7;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return Runtime;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return Runtime;
}

void sub_192162BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  a12 = 0;
  if (v13)
  {
    Espresso::AOT::MILSegmenterAnalytics::UpdateWithValidationResults();
    std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::AOT::EstimateLaunchCostForBackend()
{
}

void sub_192162D3C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::EstimateEndCostForBackend()
{
}

void sub_192162E50(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0x1081C40FC6463CFLL);
  _Unwind_Resume(a1);
}

void Espresso::AOT::EstimatorMILDecisionTree::EndCost(Espresso::AOT::EstimatorMILDecisionTree *this)
{
}

void Espresso::AOT::EstimatorMILDecisionTree::LaunchCost(Espresso::AOT::EstimatorMILDecisionTree *this)
{
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILSegmenterAnalytics,BOOL const&,MIL::IRProgram const&,std::vector<std::string> const&,std::string const&>()
{
}

void sub_192163024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  std::vector<std::string>::~vector[abi:ne180100](v17);
  uint64_t v19 = *v16;
  *float v16 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a15);
  MEMORY[0x192FF16B0](v15, 0x1032C4077945F96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::MILSegmenterOptions::GetExcludedBackendsPerEntryPoint(Espresso::AOT::MILSegmenterOptions *this)
{
  return (uint64_t)this + 64;
}

void Espresso::AOT::Validators::EirValidator::Validate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  char v24 = 4;
  strcpy(v23, "call");
  strcpy(v26, "\nwrite_state");
  strcpy(v25, "read_state");
  v26[24] = 11;
  *(_OWORD *)unint64_t v8 = 0u;
  *(_OWORD *)uint8x8_t v9 = 0u;
  int v10 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v8, (uint64_t)v23, (uint64_t)v23);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v8, (uint64_t)v25, (uint64_t)v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v8, (uint64_t)&v26[1], (uint64_t)&v26[1]);
  char v14 = 5;
  strcpy(v13, "ios15");
  char v16 = 5;
  strcpy(v15, "ios16");
  char v18 = 5;
  strcpy(v17, "ios17");
  v19[23] = 11;
  strcpy(v19, "ios16_train");
  v20[23] = 11;
  strcpy(v20, "ios17_train");
  char v22 = 5;
  strcpy(v21, "ios18");
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  int v7 = 1065353216;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v13, (uint64_t)v13);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v15, (uint64_t)v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v17, (uint64_t)v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v19, (uint64_t)v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v20, (uint64_t)v20);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)__p, (uint64_t)v21, (uint64_t)v21);
  v11[0] = &unk_1EE37CD20;
  v11[3] = v11;
  char v12 = 1;
  Espresso::AOT::Utils::OpBlackListValidate(a2, a3, v8, __p, (uint64_t)v11);
}

void sub_192163504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::optional<std::function<BOOL ()(MIL::IROperation const&)>>::~optional((uint64_t)&a20);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  if (a60 < 0)
  {
    operator delete(a55);
    if (a54 < 0)
    {
LABEL_17:
      operator delete(a49);
      if (a48 < 0)
      {
LABEL_18:
        operator delete(a43);
        if (a42 < 0)
        {
LABEL_19:
          operator delete(a37);
          if (a36 < 0)
          {
LABEL_20:
            operator delete(a31);
            if ((a30 & 0x80000000) == 0)
            {
LABEL_12:
              std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
              if (*(char *)(v60 - 57) < 0)
              {
                operator delete(*(void **)(v60 - 80));
                if (*(char *)(v60 - 81) < 0)
                {
LABEL_14:
                  operator delete(*(void **)(v60 - 104));
                  if (*(char *)(v60 - 105) < 0)
                  {
LABEL_15:
                    operator delete(*(void **)(v60 - 128));
                    _Unwind_Resume(a1);
                  }
LABEL_22:
                  _Unwind_Resume(a1);
                }
              }
              else if (*(char *)(v60 - 81) < 0)
              {
                goto LABEL_14;
              }
              if (*(char *)(v60 - 105) < 0) {
                goto LABEL_15;
              }
              goto LABEL_22;
            }
LABEL_11:
            operator delete(__p);
            goto LABEL_12;
          }
LABEL_10:
          if ((a30 & 0x80000000) == 0) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
LABEL_9:
        if (a36 < 0) {
          goto LABEL_20;
        }
        goto LABEL_10;
      }
LABEL_8:
      if (a42 < 0) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }
  }
  else if (a54 < 0)
  {
    goto LABEL_17;
  }
  if (a48 < 0) {
    goto LABEL_18;
  }
  goto LABEL_8;
}

void *std::vector<Espresso::AOT::CostGraph::Node>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_192163718(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<Espresso::AOT::CostGraph::Node>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>,std::vector<std::unordered_map<unsigned long,unsigned long long>>>::~pair(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = (void *)a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            int64_t v6 = (void *)*v5;
            operator delete(v5);
            uint64_t v5 = v6;
          }
          while (v6);
        }
        unint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        unint64_t v7 = v8;
        *uint64_t v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  uint8x8_t v9 = (void *)*a1;
  if (*a1)
  {
    int v10 = (void *)a1[1];
    uint64_t v11 = (void *)*a1;
    if (v10 != v9)
    {
      do
      {
        char v12 = (void *)*(v10 - 3);
        if (v12)
        {
          do
          {
            uint64_t v13 = (void *)*v12;
            operator delete(v12);
            char v12 = v13;
          }
          while (v13);
        }
        uint64_t v15 = (void *)*(v10 - 5);
        v10 -= 5;
        char v14 = v15;
        *int v10 = 0;
        if (v15) {
          operator delete(v14);
        }
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*,Espresso::AOT::CostGraph::Node*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint8x8_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[16 * (v10 >> 4)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1921638F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_192163908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::AOT::CostGraph::Node>,Espresso::AOT::CostGraph::Node*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char **std::vector<std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>>::vector(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1921639C0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

char **std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_192163A70(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::unordered_map<unsigned long long,std::vector<unsigned long>>>::vector();
  }
  _Unwind_Resume(exception_object);
}

char **std::vector<std::unordered_map<unsigned long,unsigned long long>>::vector(char **a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(40 * a2);
    *a1 = v4;
    a1[1] = v4;
    uint64_t v5 = &v4[40 * a2];
    a1[2] = v5;
    do
    {
      *(_OWORD *)uint64_t v4 = 0uLL;
      *((_OWORD *)v4 + 1) = 0uLL;
      *((_DWORD *)v4 + 8) = 1065353216;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_192163B20(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<std::unordered_map<unsigned long,double>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Espresso::AOT::CostGraph::Node>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_192163BEC(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<Espresso::AOT::CostGraph::Node>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::AOT::SegmenterShortestPath::OpCostMap::PruneOpToCostBasedOnAttribs(void *a1, uint64_t a2, char *a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  uint64_t v8 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
  uint64_t v9 = **v8;
  uint64_t v10 = (*v8)[1];
  if (v9 != v10)
  {
    uint64_t v11 = *(void **)"IntendedBackend";
    char v12 = *(void **)"dBackend";
    while (1)
    {
      char v109 = 15;
      strcpy((char *)__p, "IntendedBackend");
      if (MIL::IRObject::TryGetAttribute()) {
        break;
      }
      v9 += 16;
      if (v9 == v10) {
        return;
      }
    }
    char v14 = Espresso::espresso_os_log_subsystem(0, v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      if (a3[23] >= 0) {
        uint64_t v15 = a3;
      }
      else {
        uint64_t v15 = *(char **)a3;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v15;
      _os_log_impl(&dword_1920CB000, v14, OS_LOG_TYPE_INFO, "[SegmenterShortestPath::OpCostMap] Prune OpToCost Mapping for function: %s", (uint8_t *)__p, 0xCu);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 48))(&v103, a2);
    uint64_t v16 = MIL::IRProgram::GetFunction();
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
    uint64_t v20 = v18;
    if (*(void *)(*(void *)v18 + 8) != **(void **)v18)
    {
      unint64_t v21 = 0;
      *(void *)&long long v19 = 136315138;
      long long v99 = v19;
      qmemcpy(v98, "dBackendIntended", sizeof(v98));
      uint64_t v97 = v18;
      do
      {
        char v109 = 15;
        __p[0] = v11;
        *(void **)((char *)__p + 7) = v12;
        HIBYTE(__p[1]) = 0;
        uint64_t Attribute = MIL::IRObject::TryGetAttribute();
        uint64_t v24 = Attribute;
        if (v109 < 0)
        {
          operator delete(__p[0]);
          if (!v24) {
            goto LABEL_16;
          }
        }
        else if (!Attribute)
        {
          goto LABEL_16;
        }
        if (v21 >= (uint64_t)(*(void *)(*(void *)v20 + 8) - **(void **)v20) >> 4) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        HIBYTE(v107) = 15;
        *(void *)&long long buf = v11;
        *(void *)((char *)&buf + 7) = v12;
        HIBYTE(buf) = 0;
        uint64_t v25 = (MIL::IRValue *)MIL::IRObject::GetAttribute();
        E5Common::Utils::MILListToCpp<std::string>(v25, (uint64_t)__p);
        if ((SHIBYTE(v107) & 0x80000000) == 0)
        {
          unint64_t v28 = (void **)__p[0];
          uint64_t v27 = (void **)__p[1];
          if (__p[0] != __p[1]) {
            goto LABEL_30;
          }
LABEL_26:
          uint64_t v20 = v97;
          char v12 = (void *)v98[0];
          if (v28) {
            goto LABEL_195;
          }
          goto LABEL_15;
        }
        operator delete((void *)buf);
        unint64_t v28 = (void **)__p[0];
        uint64_t v27 = (void **)__p[1];
        if (__p[0] == __p[1]) {
          goto LABEL_26;
        }
        while (1)
        {
LABEL_30:
          uint64_t v30 = a1[3];
          uint64_t v29 = a1[4];
          if (v30 == v29)
          {
LABEL_52:
            uint64_t v43 = Espresso::espresso_os_log_subsystem(0, v26);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
            {
              unint64_t v44 = v28;
              if (*((char *)v28 + 23) < 0) {
                unint64_t v44 = (void **)*v28;
              }
              LODWORD(buf) = v99;
              *(void *)((char *)&buf + 4) = v44;
              _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, "[SegmenterShortestPath::OpCostMap] Backend: %s not passed as an option for segmentation or backward compat path in use", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_29;
          }
          uint64_t v31 = 0;
          char v32 = *((unsigned char *)v28 + 23);
          if (v32 >= 0) {
            unint64_t v33 = (void *)*((unsigned __int8 *)v28 + 23);
          }
          else {
            unint64_t v33 = v28[1];
          }
          if (v32 >= 0) {
            uint64_t v34 = (unsigned __int8 *)v28;
          }
          else {
            uint64_t v34 = (unsigned __int8 *)*v28;
          }
          uint64_t v35 = a1[3];
          while (1)
          {
            uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
            uint64_t v37 = (v36 & 0x80u) == 0 ? (void *)*(unsigned __int8 *)(v35 + 23) : *(void **)(v35 + 8);
            if (v37 == v33) {
              break;
            }
LABEL_39:
            ++v31;
            v35 += 24;
            if (v35 == v29) {
              goto LABEL_52;
            }
          }
          if ((v36 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v35, v34, *(void *)(v35 + 8))) {
              goto LABEL_49;
            }
            goto LABEL_39;
          }
          if (*(unsigned char *)(v35 + 23))
          {
            uint64_t v38 = 0;
            while (*(unsigned __int8 *)(v35 + v38) == v34[v38])
            {
              if (v36 == ++v38) {
                goto LABEL_49;
              }
            }
            goto LABEL_39;
          }
LABEL_49:
          uint64_t v39 = (void *)(*a1 + 40 * v31);
          int8x8_t v40 = (int8x8_t)v39[1];
          if (v40)
          {
            uint8x8_t v41 = (uint8x8_t)vcnt_s8(v40);
            v41.i16[0] = vaddlv_u8(v41);
            if (v41.u32[0] > 1uLL)
            {
              unint64_t v42 = v21;
              if (v21 >= *(void *)&v40) {
                unint64_t v42 = v21 % *(void *)&v40;
              }
            }
            else
            {
              unint64_t v42 = (*(void *)&v40 - 1) & v21;
            }
            uint64_t v45 = *(void **)(*v39 + 8 * v42);
            if (v45)
            {
              long long v46 = (void *)*v45;
              if (v46) {
                break;
              }
            }
          }
LABEL_29:
          v28 += 3;
          if (v28 == v27) {
            goto LABEL_194;
          }
        }
        if (v41.u32[0] < 2uLL)
        {
          uint64_t v47 = *(void *)&v40 - 1;
          while (1)
          {
            uint64_t v49 = v46[1];
            if (v49 == v21)
            {
              if (v46[2] == v21) {
                goto LABEL_73;
              }
            }
            else if ((v49 & v47) != v42)
            {
              goto LABEL_29;
            }
            long long v46 = (void *)*v46;
            if (!v46) {
              goto LABEL_29;
            }
          }
        }
        while (1)
        {
          unint64_t v48 = v46[1];
          if (v48 == v21) {
            break;
          }
          if (v48 >= *(void *)&v40) {
            v48 %= *(void *)&v40;
          }
          if (v48 != v42) {
            goto LABEL_29;
          }
LABEL_62:
          long long v46 = (void *)*v46;
          if (!v46) {
            goto LABEL_29;
          }
        }
        if (v46[2] != v21) {
          goto LABEL_62;
        }
LABEL_73:
        unint64_t v50 = 0;
        unint64_t v51 = 0;
        long long buf = 0uLL;
        unint64_t v107 = 0;
        do
        {
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v51) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          int v53 = (void *)(*a1 + 40 * v51);
          int8x8_t v54 = (int8x8_t)v53[1];
          if (v54)
          {
            uint8x8_t v55 = (uint8x8_t)vcnt_s8(v54);
            v55.i16[0] = vaddlv_u8(v55);
            if (v55.u32[0] > 1uLL)
            {
              unint64_t v56 = v21;
              if (v21 >= *(void *)&v54) {
                unint64_t v56 = v21 % *(void *)&v54;
              }
            }
            else
            {
              unint64_t v56 = (*(void *)&v54 - 1) & v21;
            }
            long long v57 = *(void **)(*v53 + 8 * v56);
            if (v57)
            {
              uint64_t v58 = (void *)*v57;
              if (v58)
              {
                if (v55.u32[0] < 2uLL)
                {
                  uint64_t v59 = *(void *)&v54 - 1;
                  while (1)
                  {
                    uint64_t v61 = v58[1];
                    if (v61 == v21)
                    {
                      if (v58[2] == v21) {
                        goto LABEL_101;
                      }
                    }
                    else if ((v61 & v59) != v56)
                    {
                      goto LABEL_78;
                    }
                    uint64_t v58 = (void *)*v58;
                    if (!v58) {
                      goto LABEL_78;
                    }
                  }
                }
                do
                {
                  unint64_t v60 = v58[1];
                  if (v60 == v21)
                  {
                    if (v58[2] == v21)
                    {
LABEL_101:
                      uint64_t v62 = v30 + 24 * v51;
                      if ((unint64_t)v50 < v107)
                      {
                        if (*(char *)(v62 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)v62, *(void *)(v62 + 8));
                        }
                        else
                        {
                          long long v52 = *(_OWORD *)v62;
                          v50->__r_.__value_.__r.__words[2] = *(void *)(v62 + 16);
                          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v52;
                        }
                        ++v50;
                      }
                      else
                      {
                        unint64_t v50 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&buf, v62);
                      }
                      *((void *)&buf + 1) = v50;
                      uint64_t v30 = a1[3];
                      uint64_t v29 = a1[4];
                      break;
                    }
                  }
                  else
                  {
                    if (v60 >= *(void *)&v54) {
                      v60 %= *(void *)&v54;
                    }
                    if (v60 != v56) {
                      break;
                    }
                  }
                  uint64_t v58 = (void *)*v58;
                }
                while (v58);
              }
            }
          }
LABEL_78:
          ++v51;
        }
        while (v51 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v30) >> 3));
        unint64_t v100 = 0;
        __int16 v101 = 0;
        uint64_t v102 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v100, buf, (uint64_t)v50, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v50 - buf) >> 3));
        unint64_t v63 = (unsigned __int8 *)v100;
        int v64 = v101;
        if (v100 == v101)
        {
LABEL_122:
          if (v63 + 24 != v64) {
            goto LABEL_126;
          }
        }
        else
        {
          char v65 = *((unsigned char *)v28 + 23);
          if (v65 >= 0) {
            unint64_t v66 = (void *)*((unsigned __int8 *)v28 + 23);
          }
          else {
            unint64_t v66 = v28[1];
          }
          if (v65 >= 0) {
            std::vector<int> v67 = (unsigned __int8 *)v28;
          }
          else {
            std::vector<int> v67 = (unsigned __int8 *)*v28;
          }
          do
          {
            uint64_t v68 = v63[23];
            if ((v68 & 0x80u) == 0) {
              uint64_t v69 = (void *)v63[23];
            }
            else {
              uint64_t v69 = (void *)*((void *)v63 + 1);
            }
            if (v69 == v66)
            {
              if ((v68 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v63, v67, *((void *)v63 + 1))) {
                  goto LABEL_122;
                }
              }
              else
              {
                if (!v63[23]) {
                  goto LABEL_122;
                }
                uint64_t v70 = 0;
                while (v63[v70] == v67[v70])
                {
                  if (v68 == ++v70) {
                    goto LABEL_122;
                  }
                }
              }
            }
            v63 += 24;
          }
          while (v63 != v64);
          unint64_t v63 = v64;
          do
          {
LABEL_126:
            if ((char)v63[23] < 0) {
              operator delete(*(void **)v63);
            }
            *(_OWORD *)unint64_t v63 = *(_OWORD *)(v63 + 24);
            *((void *)v63 + 2) = *((void *)v63 + 5);
            v63[47] = 0;
            char v71 = (char *)(v63 + 48);
            v63[24] = 0;
            v63 += 24;
          }
          while (v71 != (char *)v64);
          int v64 = v101;
        }
        while (v64 != v63)
        {
          if ((char)*(v64 - 1) < 0) {
            operator delete(*((void **)v64 - 3));
          }
          v64 -= 24;
        }
        __int16 v101 = v63;
        uint64_t v72 = (unsigned __int8 *)v100;
        if (v100 == v63)
        {
          if (!v63) {
            goto LABEL_184;
          }
          goto LABEL_135;
        }
        while (2)
        {
          unint64_t v105 = v21;
          uint64_t v76 = a1[3];
          uint64_t v75 = a1[4];
          if (v76 == v75) {
            goto LABEL_142;
          }
          unint64_t v77 = 0;
          signed __int8 v78 = v72[23];
          if (v78 >= 0) {
            uint64_t v79 = v72[23];
          }
          else {
            uint64_t v79 = *((void *)v72 + 1);
          }
          if (v78 >= 0) {
            uint64_t v80 = v72;
          }
          else {
            uint64_t v80 = *(unsigned __int8 **)v72;
          }
          while (2)
          {
            uint64_t v81 = *(unsigned __int8 *)(v76 + 23);
            if ((v81 & 0x80u) == 0) {
              uint64_t v82 = *(unsigned __int8 *)(v76 + 23);
            }
            else {
              uint64_t v82 = *(void *)(v76 + 8);
            }
            if (v82 != v79)
            {
LABEL_151:
              ++v77;
              v76 += 24;
              if (v76 == v75) {
                goto LABEL_142;
              }
              continue;
            }
            break;
          }
          if ((v81 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v76, v80, *(void *)(v76 + 8))) {
              goto LABEL_161;
            }
            goto LABEL_151;
          }
          if (*(unsigned char *)(v76 + 23))
          {
            uint64_t v83 = 0;
            while (*(unsigned __int8 *)(v76 + v83) == v80[v83])
            {
              if (v81 == ++v83) {
                goto LABEL_161;
              }
            }
            goto LABEL_151;
          }
LABEL_161:
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= v77) {
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          }
          int v84 = (void *)(*a1 + 40 * v77);
          int8x8_t v85 = (int8x8_t)v84[1];
          if (v85)
          {
            uint8x8_t v86 = (uint8x8_t)vcnt_s8(v85);
            v86.i16[0] = vaddlv_u8(v86);
            if (v86.u32[0] > 1uLL)
            {
              unint64_t v87 = v21;
              if (*(void *)&v85 <= v21) {
                unint64_t v87 = v21 % *(void *)&v85;
              }
            }
            else
            {
              unint64_t v87 = (*(void *)&v85 - 1) & v21;
            }
            uint64_t v88 = *(void **)(*v84 + 8 * v87);
            if (v88)
            {
              uint64_t v89 = (void *)*v88;
              if (v89)
              {
                if (v86.u32[0] < 2uLL)
                {
                  uint64_t v90 = *(void *)&v85 - 1;
                  while (1)
                  {
                    uint64_t v92 = v89[1];
                    if (v92 == v21)
                    {
                      if (v89[2] == v21) {
                        goto LABEL_141;
                      }
                    }
                    else if ((v92 & v90) != v87)
                    {
                      goto LABEL_142;
                    }
                    uint64_t v89 = (void *)*v89;
                    if (!v89) {
                      goto LABEL_142;
                    }
                  }
                }
                do
                {
                  unint64_t v91 = v89[1];
                  if (v91 == v21)
                  {
                    if (v89[2] == v21)
                    {
LABEL_141:
                      std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__erase_unique<unsigned long long>(v84, &v105);
                      break;
                    }
                  }
                  else
                  {
                    if (v91 >= *(void *)&v85) {
                      v91 %= *(void *)&v85;
                    }
                    if (v91 != v87) {
                      break;
                    }
                  }
                  uint64_t v89 = (void *)*v89;
                }
                while (v89);
              }
            }
          }
LABEL_142:
          v72 += 24;
          if (v72 != v63) {
            continue;
          }
          break;
        }
        unint64_t v63 = (unsigned __int8 *)v100;
        if (!v100)
        {
LABEL_184:
          char v74 = (void **)buf;
          if (!(void)buf) {
            goto LABEL_194;
          }
LABEL_187:
          uint64_t v93 = (void **)*((void *)&buf + 1);
          uint64_t v94 = v74;
          if (*((void ***)&buf + 1) != v74)
          {
            do
            {
              if (*((char *)v93 - 1) < 0) {
                operator delete(*(v93 - 3));
              }
              v93 -= 3;
            }
            while (v93 != v74);
            uint64_t v94 = (void **)buf;
          }
          *((void *)&buf + 1) = v74;
          operator delete(v94);
          goto LABEL_194;
        }
LABEL_135:
        long long v73 = (void **)v101;
        if (v101 == v63)
        {
          __int16 v101 = v63;
          operator delete(v63);
          char v74 = (void **)buf;
          if (!(void)buf) {
            goto LABEL_194;
          }
          goto LABEL_187;
        }
        do
        {
          if (*((char *)v73 - 1) < 0) {
            operator delete(*(v73 - 3));
          }
          v73 -= 3;
        }
        while (v73 != (void **)v63);
        __int16 v101 = v63;
        operator delete(v100);
        char v74 = (void **)buf;
        if ((void)buf) {
          goto LABEL_187;
        }
LABEL_194:
        unint64_t v28 = (void **)__p[0];
        uint64_t v20 = v97;
        char v12 = (void *)v98[0];
        if (__p[0])
        {
LABEL_195:
          unint64_t v95 = (void **)__p[1];
          char v22 = v28;
          if (__p[1] != v28)
          {
            do
            {
              if (*((char *)v95 - 1) < 0) {
                operator delete(*(v95 - 3));
              }
              v95 -= 3;
            }
            while (v95 != v28);
            char v22 = (void **)__p[0];
          }
          __p[1] = v28;
          operator delete(v22);
        }
LABEL_15:
        uint64_t v11 = (void *)v98[1];
LABEL_16:
        ++v21;
      }
      while (v21 < (uint64_t)(*(void *)(*(void *)v20 + 8) - **(void **)v20) >> 4);
    }
    uint64_t v96 = v104;
    if (v104)
    {
      if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
}

void sub_1921646CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void Espresso::AOT::Backends::CostModel::RNNOpEstimator::EstimateComputeResources(Espresso::AOT::Backends::CostModel::RNNOpEstimator *this, const MIL::IROperation *a2)
{
}

void sub_192164CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a26) {
    operator delete(a26);
  }
  *a9 = 0;
  MEMORY[0x192FF16B0](v31, 0x1000C401CC6BE04);
  _Unwind_Resume(a1);
}

void Espresso::AOT::E5AOTCompilerBackendFactory::Instantiate(uint64_t a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  char v10 = 2;
  strcpy((char *)__p, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)a2, (uint64_t)__p, (uint64_t)v12);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  v11[23] = 21;
  strcpy(v11, "on-device-compilation");
  __p[0] = v11;
  size_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, (uint64_t)v11, (uint64_t)&std::piecewise_construct, (long long **)__p);
  if (!*((_DWORD *)v5 + 16))
  {
    int v6 = *((unsigned __int8 *)v5 + 40);
    __p[0] = v11;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (uint64_t)v11, (uint64_t)&std::piecewise_construct, (long long **)__p)+ 5;
    if (v6) {
      uint64_t v8 = "true";
    }
    else {
      uint64_t v8 = "false";
    }
    MEMORY[0x192FF0F50](v7, v8);
    Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)__p, a2);
    if (Espresso::AOT::CompilerOptionsForE5::GetUseMilE5Compiler((Espresso::AOT::CompilerOptionsForE5 *)__p)) {
      std::make_unique[abi:ne180100]<Espresso::AOT::E5AOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>();
    }
    std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>();
  }
  std::__throw_bad_variant_access[abi:ne180100]();
}

void sub_192165000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)&__p);
  if (*(char *)(v15 - 89) < 0) {
    operator delete(*(void **)(v15 - 112));
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100](v15 - 88);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::E5AOTCompilerBackend,Espresso::AOT::AOTCompilerOptions,std::unordered_map<std::string,std::string>>()
{
}

void sub_192165198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C402E6D0B92);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseMilE5Compiler(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 331);
}

void *Espresso::AOT::E5AOTCompilerBackend::E5AOTCompilerBackend(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12, a2);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)__p, a3);
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend((uint64_t)a1, v12, (uint64_t)__p);
  int v6 = (void **)v11;
  if (v11)
  {
    do
    {
      uint64_t v9 = (void **)*v6;
      if (*((char *)v6 + 63) < 0)
      {
        operator delete(v6[5]);
        if (*((char *)v6 + 39) < 0) {
LABEL_10:
        }
          operator delete(v6[2]);
      }
      else if (*((char *)v6 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v6);
      int v6 = v9;
    }
    while (v9);
  }
  uint64_t v7 = __p[0];
  __p[0] = 0;
  if (v7) {
    operator delete(v7);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v12);
  *a1 = &unk_1EE36B3D8;
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 23), a2);
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 40), a2);
  return a1;
}

void sub_1921652D8(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_1921652F4(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_192165308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_192165324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va);
  _Unwind_Resume(a1);
}

void *Espresso::AOT::MILCompilerForE5::MILCompilerForE5(void *a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21, a2);
  int v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  uint64_t v9 = *(void **)(a3 + 24);
  v19[0] = v8;
  v19[1] = v9;
  int v20 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v19;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler((uint64_t)a1, (const Espresso::AOT::AOTCompilerOptions *)v21, (uint64_t)__p);
  uint64_t v11 = (void **)v19[0];
  if (v19[0])
  {
    do
    {
      uint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_20:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_20;
      }
      operator delete(v11);
      uint64_t v11 = v14;
    }
    while (v14);
  }
  char v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v21);
  *a1 = &unk_1EE36B190;
  Espresso::AOT::CompilerOptionsForE5::CompilerOptionsForE5((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33), a2);
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)(a1 + 76), a2);
  a1[93] = 0;
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation((Espresso::AOT::MILCompilerForE5 *)a1, (uint64_t)(a1 + 94));
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicCost((Espresso::AOT::MILCompilerForE5 *)a1, (uint64_t)(a1 + 99));
  char v17 = 2;
  strcpy((char *)v16, "e5");
  HIBYTE(v15[2]) = 17;
  strcpy((char *)v15, "platform-families");
  Espresso::AOT::AOTCompilerOptions::UnsetOption((uint64_t)(a1 + 76), (long long *)v16, (uint64_t)v15);
  if (SHIBYTE(v15[2]) < 0)
  {
    operator delete(v15[0]);
    if ((v17 & 0x80000000) == 0) {
      goto LABEL_12;
    }
  }
  else if ((v17 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v16[0]);
LABEL_12:
  if (Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 33))) {
    std::make_unique[abi:ne180100]<Espresso::AOT::Classic::ClassicAOTCompilerBackend,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> &>();
  }
  return a1;
}

void sub_1921655B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v24);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v23);
  uint64_t v26 = *((void *)v20 + 93);
  *((void *)v20 + 93) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v22);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(v21);
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v20);
  _Unwind_Resume(a1);
}

void sub_192165654(_Unwind_Exception *a1)
{
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(v2);
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_192165670(_Unwind_Exception *a1)
{
  Espresso::AOT::AbstractMILCompiler::~AbstractMILCompiler(v1);
  _Unwind_Resume(a1);
}

void sub_192165684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)va1);
  _Unwind_Resume(a1);
}

std::string *Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(std::string *this, const Espresso::AOT::AOTCompilerOptions *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    this[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
    size_t v5 = (std::string *)((char *)this + 32);
    if ((*((char *)a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    this[1].__r_.__value_.__s.__data_[0] = *((unsigned char *)a2 + 24);
    size_t v5 = (std::string *)((char *)this + 32);
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *((_OWORD *)a2 + 2);
      v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 6);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
LABEL_6:
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((void *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v7;
  }
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 20);
  std::unordered_map<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>::unordered_map((uint64_t)&this[3].__r_.__value_.__r.__words[2], (uint64_t)a2 + 88);
  this[5].__r_.__value_.__l.__size_ = *((void *)a2 + 16);
  return this;
}

void sub_19216578C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19216591C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_192165930(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              int v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (uint64_t j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  int v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x50uLL);
  unint64_t v28 = v27;
  v44[0] = v27;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v27 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map((uint64_t)(v28 + 40), a3 + 24);
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v33 = 1;
    if (v11 >= 3) {
      BOOL v33 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v11);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v41 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        char v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v31 = *(void **)(*(void *)a1 + 8 * v10);
        char v32 = (void *)v44[0];
        if (v31) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v3 = v41 & v10;
      uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v41 & v10));
      char v32 = (void *)v44[0];
      if (v31) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v32 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v44[0])
    {
      unint64_t v42 = *(void *)(*(void *)v44[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v42 >= v11) {
          v42 %= v11;
        }
      }
      else
      {
        v42 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v44[0];
    }
    goto LABEL_92;
  }
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v3);
  char v32 = (void *)v44[0];
  if (!v31) {
    goto LABEL_81;
  }
LABEL_57:
  void *v32 = *v31;
  void *v31 = v44[0];
LABEL_92:
  uint64_t v14 = (uint64_t *)v44[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192165DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192165DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192165DC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_192165F0C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_192165F20(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<BOOL,int,float,std::string>> const&>(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              int v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                for (uint64_t j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  int v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x48uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  char v44 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100]((std::string *)(v27 + 16), a3);
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        float v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        float v30 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      float v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      uint64_t v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_54;
      }
    }
LABEL_78:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_89;
  }
  float v30 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_78;
  }
LABEL_54:
  void *v31 = *v30;
  void *v30 = v43[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192166364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192166378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::variant<BOOL,int,float,std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__s.__data_[0] = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = -1;
  uint64_t v5 = *((unsigned int *)a2 + 12);
  if (v5 != -1)
  {
    ((void (*)(unsigned char *, std::string *, char *))off_1EE39B818[v5])(v7, &this[1], (char *)a2 + 24);
    LODWORD(this[2].__r_.__value_.__l.__data_) = v5;
  }
  return this;
}

void sub_19216642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_1EE39B7B8[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetUseClassicAOTCompilerOldHW(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return *((unsigned __int8 *)this + 333);
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(Espresso::AOT::MILCompilerForE5 *this@<X0>, uint64_t a2@<X8>)
{
  ComputeUnitsWithClassicValidation = (int **)Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicValidation((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends((uint64_t)this, ComputeUnitsWithClassicValidation, &v7);
  uint64_t v5 = (unsigned int *)v7;
  BOOL v6 = v8;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v5 != v6)
  {
    do
    {
      std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(a2, v5, v5);
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = (unsigned int *)v7;
  }
  if (v5)
  {
    unint64_t v8 = v5;
    operator delete(v5);
  }
}

void sub_192166558(_Unwind_Exception *a1)
{
  long long v3 = (void *)v1[2];
  if (v3)
  {
    do
    {
      long long v4 = (void *)*v3;
      operator delete(v3);
      long long v3 = v4;
    }
    while (v4);
  }
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicValidation(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 160;
}

void Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicCost(Espresso::AOT::MILCompilerForE5 *this@<X0>, uint64_t a2@<X8>)
{
  ComputeUnitsWithClassicCost = (int **)Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicCost((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends((uint64_t)this, ComputeUnitsWithClassicCost, &v7);
  uint64_t v5 = (unsigned int *)v7;
  BOOL v6 = v8;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (v5 != v6)
  {
    do
    {
      std::__hash_table<Espresso::AOT::BackendIdentifier,std::hash<Espresso::AOT::BackendIdentifier>,std::equal_to<Espresso::AOT::BackendIdentifier>,std::allocator<Espresso::AOT::BackendIdentifier>>::__emplace_unique_key_args<Espresso::AOT::BackendIdentifier,Espresso::AOT::BackendIdentifier const&>(a2, v5, v5);
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = (unsigned int *)v7;
  }
  if (v5)
  {
    unint64_t v8 = v5;
    operator delete(v5);
  }
}

void sub_192166630(_Unwind_Exception *a1)
{
  long long v3 = (void *)v1[2];
  if (v3)
  {
    do
    {
      long long v4 = (void *)*v3;
      operator delete(v3);
      long long v3 = v4;
    }
    while (v4);
  }
  Espresso::AOT::MILCompilerForE5::ExtractBkdsWithClassicValidation(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::ComputeUnitsToBackends(uint64_t a1@<X0>, int **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v3 = *a2;
  long long v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v137 = a2[1];
    v138 = (Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264);
    do
    {
      int v7 = *v3;
      if (*v3)
      {
        if (v7 != 1)
        {
          if (v7 != 2) {
            goto LABEL_5;
          }
          unint64_t v9 = (int *)a3[1];
          unint64_t v8 = (unint64_t)a3[2];
          if ((unint64_t)v9 < v8)
          {
            int v6 = 2;
            goto LABEL_4;
          }
          unint64_t v11 = *a3;
          uint64_t v24 = (char *)v9 - *a3;
          uint64_t v25 = v24 >> 2;
          unint64_t v26 = (v24 >> 2) + 1;
          if (v26 >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v27 = v8 - (void)v11;
          if (v27 >> 1 > v26) {
            unint64_t v26 = v27 >> 1;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v26;
          }
          if (v16)
          {
            if (v16 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v17 = operator new(4 * v16);
            uint64_t v18 = &v17[4 * v25];
            *(_DWORD *)uint64_t v18 = 2;
            uint64_t v19 = v18 + 4;
            if (v9 == (int *)v11) {
              goto LABEL_53;
            }
LABEL_47:
            unint64_t v39 = (char *)(v9 - 1) - v11;
            if (v39 < 0x2C) {
              goto LABEL_210;
            }
            if ((unint64_t)((char *)v9 - &v17[v24]) < 0x20) {
              goto LABEL_210;
            }
            uint64_t v40 = (v39 >> 2) + 1;
            uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v42 = &v9[v41 / 0xFFFFFFFFFFFFFFFCLL];
            v18 -= v41;
            uint64_t v43 = &v17[v24 - 16];
            char v44 = v9 - 4;
            uint64_t v45 = v40 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v46 = *(_OWORD *)v44;
              *(v43 - 1) = *((_OWORD *)v44 - 1);
              _OWORD *v43 = v46;
              v43 -= 2;
              v44 -= 8;
              v45 -= 8;
            }
            while (v45);
            unint64_t v9 = v42;
            if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_210:
              do
              {
                int v47 = *--v9;
                *((_DWORD *)v18 - 1) = v47;
                v18 -= 4;
              }
              while (v9 != (int *)v11);
            }
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = (char *)(4 * v25);
            uint8x8_t v38 = (_DWORD *)(4 * v25);
            _DWORD *v38 = 2;
            uint64_t v19 = (char *)(v38 + 1);
            if (v9 != (int *)v11) {
              goto LABEL_47;
            }
          }
LABEL_53:
          *a3 = v18;
          a3[1] = v19;
          a3[2] = &v17[4 * v16];
          if (v11) {
            operator delete(v11);
          }
          a3[1] = v19;
          goto LABEL_5;
        }
        unint64_t v9 = (int *)a3[1];
        unint64_t v10 = (unint64_t)a3[2];
        if ((unint64_t)v9 < v10)
        {
          int v6 = 5;
LABEL_4:
          *unint64_t v9 = v6;
          a3[1] = (char *)(v9 + 1);
          goto LABEL_5;
        }
        unint64_t v11 = *a3;
        uint64_t v12 = (char *)v9 - *a3;
        uint64_t v13 = v12 >> 2;
        unint64_t v14 = (v12 >> 2) + 1;
        if (v14 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v10 - (void)v11;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v17 = operator new(4 * v16);
          uint64_t v18 = &v17[4 * v13];
          *(_DWORD *)uint64_t v18 = 5;
          uint64_t v19 = v18 + 4;
          if (v9 == (int *)v11) {
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v17 = 0;
          uint64_t v18 = (char *)(4 * v13);
          float v28 = (_DWORD *)(4 * v13);
          _DWORD *v28 = 5;
          uint64_t v19 = (char *)(v28 + 1);
          if (v9 == (int *)v11) {
            goto LABEL_53;
          }
        }
        unint64_t v29 = (char *)(v9 - 1) - v11;
        if (v29 < 0x2C) {
          goto LABEL_211;
        }
        if ((unint64_t)((char *)v9 - &v17[v12]) < 0x20) {
          goto LABEL_211;
        }
        uint64_t v30 = (v29 >> 2) + 1;
        uint64_t v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
        BOOL v32 = &v9[v31 / 0xFFFFFFFFFFFFFFFCLL];
        v18 -= v31;
        unint64_t v33 = &v17[v12 - 16];
        unint64_t v34 = v9 - 4;
        uint64_t v35 = v30 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          _OWORD *v33 = v36;
          v33 -= 2;
          v34 -= 8;
          v35 -= 8;
        }
        while (v35);
        unint64_t v9 = v32;
        if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_211:
          do
          {
            int v37 = *--v9;
            *((_DWORD *)v18 - 1) = v37;
            v18 -= 4;
          }
          while (v9 != (int *)v11);
        }
        goto LABEL_53;
      }
      CpuPreferredBackstd::vector<int>::pointer end = Espresso::AOT::CompilerOptionsForE5::GetCpuPreferredBackend(v138);
      char v140 = 1;
      LOWORD(__p[0]) = 44;
      E5Common::StringUtils::Split((uint64_t *)CpuPreferredBackend, (char *)__p, (uint64_t)&v141);
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v21 = (void **)v141;
      uint64_t v22 = v142;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v142 - (unsigned char *)v141) >> 3) >= 2)
      {
        int v23 = *(char *)(CpuPreferredBackend + 23);
        if (v23 < 0)
        {
          if (*(void *)(CpuPreferredBackend + 8) != 16) {
            goto LABEL_203;
          }
          CpuPreferredBackstd::vector<int>::pointer end = *(void *)CpuPreferredBackend;
        }
        else if (v23 != 16)
        {
          goto LABEL_203;
        }
        if ((*(void *)CpuPreferredBackend != 0x616C632C736E6E62
           || *(void *)(CpuPreferredBackend + 8) != 0x7570635F63697373)
          && (*(void *)CpuPreferredBackend != 0x5F63697373616C63
           || *(void *)(CpuPreferredBackend + 8) != 0x736E6E622C757063))
        {
LABEL_203:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("When specifying multiple preferred backends, only bnns and classic_cpu are supported.");
        }
      }
      if (v141 == v142)
      {
        if (v142) {
          goto LABEL_183;
        }
        goto LABEL_190;
      }
      do
      {
        uint64_t v52 = *((unsigned __int8 *)v21 + 23);
        if (*((char *)v21 + 23) < 0)
        {
          int v53 = *v21;
          if (v21[1] != (void *)4) {
            goto LABEL_79;
          }
        }
        else
        {
          int v53 = v21;
          if (v52 != 4) {
            goto LABEL_79;
          }
        }
        if (*v53 == 1936617058)
        {
          unint64_t v77 = a3[1];
          unint64_t v76 = (unint64_t)a3[2];
          if ((unint64_t)v77 < v76)
          {
            *(_DWORD *)unint64_t v77 = 8;
            unint64_t v50 = v77 + 4;
            goto LABEL_71;
          }
          uint64_t v68 = *a3;
          uint64_t v96 = v77 - *a3;
          uint64_t v97 = v96 >> 2;
          unint64_t v98 = (v96 >> 2) + 1;
          if (v98 >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v99 = v76 - (void)v68;
          if (v99 >> 1 > v98) {
            unint64_t v98 = v99 >> 1;
          }
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v98;
          }
          if (v73)
          {
            if (v73 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v74 = operator new(4 * v73);
            uint64_t v75 = &v74[4 * v97];
            *(_DWORD *)uint64_t v75 = 8;
            unint64_t v51 = v75 + 4;
            if (v77 == v68) {
              goto LABEL_180;
            }
          }
          else
          {
            char v74 = 0;
            uint64_t v75 = (char *)(4 * v97);
            int v115 = (_DWORD *)(4 * v97);
            _DWORD *v115 = 8;
            unint64_t v51 = (char *)(v115 + 1);
            if (v77 == v68) {
              goto LABEL_180;
            }
          }
          unint64_t v116 = v77 - 4 - v68;
          if (v116 < 0x2C) {
            goto LABEL_212;
          }
          if ((unint64_t)(v77 - &v74[v96]) < 0x20) {
            goto LABEL_212;
          }
          uint64_t v117 = (v116 >> 2) + 1;
          uint64_t v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
          int v119 = &v77[-v118];
          v75 -= v118;
          size_t v120 = &v74[v96 - 16];
          unint64_t v121 = v77 - 16;
          uint64_t v122 = v117 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v123 = *(_OWORD *)v121;
            *(v120 - 1) = *((_OWORD *)v121 - 1);
            *size_t v120 = v123;
            v120 -= 2;
            v121 -= 32;
            v122 -= 8;
          }
          while (v122);
          unint64_t v77 = v119;
          if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_212:
            do
            {
              int v124 = *((_DWORD *)v77 - 1);
              v77 -= 4;
              *((_DWORD *)v75 - 1) = v124;
              v75 -= 4;
            }
            while (v77 != v68);
          }
          goto LABEL_180;
        }
LABEL_79:
        if ((v52 & 0x80) != 0)
        {
          int8x8_t v54 = (unsigned __int16 *)*v21;
          if (v21[1] == (void *)3)
          {
LABEL_83:
            int v55 = *v54;
            int v56 = *((unsigned __int8 *)v54 + 2);
            if (v55 == 27757 && v56 == 99) {
              goto LABEL_95;
            }
          }
        }
        else
        {
          int8x8_t v54 = (unsigned __int16 *)v21;
          if (v52 == 3) {
            goto LABEL_83;
          }
        }
        if ((v52 & 0x80) != 0)
        {
          uint64_t v58 = *v21;
          if (v21[1] != (void *)8) {
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v58 = v21;
          if (v52 != 8) {
            goto LABEL_92;
          }
        }
        if (*v58 != 0x736E6E622F636C6DLL)
        {
LABEL_92:
          if ((v52 & 0x80) != 0)
          {
            uint64_t v59 = (uint64_t *)*v21;
            if (v21[1] != (void *)11) {
              goto LABEL_192;
            }
          }
          else
          {
            uint64_t v59 = (uint64_t *)v21;
            if (v52 != 11) {
              goto LABEL_192;
            }
          }
          uint64_t v63 = *v59;
          uint64_t v64 = *(uint64_t *)((char *)v59 + 3);
          if (v63 != 0x5F63697373616C63 || v64 != 0x7570635F63697373)
          {
LABEL_192:
            if ((v52 & 0x80) != 0) {
              unint64_t v21 = (void **)*v21;
            }
            __p[0] = v21;
            Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("Unknown CPU backend name '%s' specified as the preferred CPU backend.", __p);
          }
          std::vector<int> v67 = a3[1];
          unint64_t v66 = (unint64_t)a3[2];
          if ((unint64_t)v67 >= v66)
          {
            uint64_t v68 = *a3;
            uint64_t v69 = v67 - *a3;
            uint64_t v70 = v69 >> 2;
            unint64_t v71 = (v69 >> 2) + 1;
            if (v71 >> 62) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v72 = v66 - (void)v68;
            if (v72 >> 1 > v71) {
              unint64_t v71 = v72 >> 1;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 >> 62) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              char v74 = operator new(4 * v73);
              uint64_t v75 = &v74[4 * v70];
              *(_DWORD *)uint64_t v75 = 3;
              unint64_t v51 = v75 + 4;
              if (v67 == v68) {
                goto LABEL_180;
              }
            }
            else
            {
              char v74 = 0;
              uint64_t v75 = (char *)(4 * v70);
              uint8x8_t v86 = (_DWORD *)(4 * v70);
              *uint8x8_t v86 = 3;
              unint64_t v51 = (char *)(v86 + 1);
              if (v67 == v68) {
                goto LABEL_180;
              }
            }
            unint64_t v87 = v67 - 4 - v68;
            if (v87 < 0x2C) {
              goto LABEL_213;
            }
            if ((unint64_t)(v67 - &v74[v69]) < 0x20) {
              goto LABEL_213;
            }
            uint64_t v88 = (v87 >> 2) + 1;
            uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v90 = &v67[-v89];
            v75 -= v89;
            unint64_t v91 = &v74[v69 - 16];
            uint64_t v92 = v67 - 16;
            uint64_t v93 = v88 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v94 = *(_OWORD *)v92;
              *(v91 - 1) = *((_OWORD *)v92 - 1);
              *unint64_t v91 = v94;
              v91 -= 2;
              v92 -= 32;
              v93 -= 8;
            }
            while (v93);
            std::vector<int> v67 = v90;
            if (v88 != (v88 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_213:
              do
              {
                int v95 = *((_DWORD *)v67 - 1);
                v67 -= 4;
                *((_DWORD *)v75 - 1) = v95;
                v75 -= 4;
              }
              while (v67 != v68);
            }
            goto LABEL_180;
          }
LABEL_70:
          *(_DWORD *)std::vector<int> v67 = 3;
          unint64_t v50 = v67 + 4;
LABEL_71:
          unint64_t v51 = v50;
LABEL_72:
          a3[1] = v51;
          goto LABEL_73;
        }
LABEL_95:
        uint64_t v61 = a3[1];
        unint64_t v60 = (unint64_t)a3[2];
        if ((unint64_t)v61 < v60)
        {
          *(_DWORD *)uint64_t v61 = 4;
          uint64_t v62 = v61 + 4;
          goto LABEL_153;
        }
        signed __int8 v78 = *a3;
        uint64_t v79 = v61 - *a3;
        uint64_t v80 = v79 >> 2;
        unint64_t v81 = (v79 >> 2) + 1;
        if (v81 >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v82 = v60 - (void)v78;
        if (v82 >> 1 > v81) {
          unint64_t v81 = v82 >> 1;
        }
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v83 = v81;
        }
        if (v83)
        {
          if (v83 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int v84 = operator new(4 * v83);
          int8x8_t v85 = &v84[4 * v80];
          *(_DWORD *)int8x8_t v85 = 4;
          uint64_t v62 = v85 + 4;
          if (v61 == v78) {
            goto LABEL_151;
          }
LABEL_145:
          unint64_t v101 = v61 - 4 - v78;
          if (v101 < 0x2C) {
            goto LABEL_214;
          }
          if ((unint64_t)(v61 - &v84[v79]) < 0x20) {
            goto LABEL_214;
          }
          uint64_t v102 = (v101 >> 2) + 1;
          uint64_t v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v104 = &v61[-v103];
          v85 -= v103;
          unint64_t v105 = &v84[v79 - 16];
          double v106 = v61 - 16;
          uint64_t v107 = v102 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v108 = *(_OWORD *)v106;
            *(v105 - 1) = *((_OWORD *)v106 - 1);
            _OWORD *v105 = v108;
            v105 -= 2;
            v106 -= 32;
            v107 -= 8;
          }
          while (v107);
          uint64_t v61 = v104;
          if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_214:
            do
            {
              int v109 = *((_DWORD *)v61 - 1);
              v61 -= 4;
              *((_DWORD *)v85 - 1) = v109;
              v85 -= 4;
            }
            while (v61 != v78);
          }
          goto LABEL_151;
        }
        int v84 = 0;
        int8x8_t v85 = (char *)(4 * v80);
        unint64_t v100 = (_DWORD *)(4 * v80);
        _DWORD *v100 = 4;
        uint64_t v62 = (char *)(v100 + 1);
        if (v61 != v78) {
          goto LABEL_145;
        }
LABEL_151:
        *a3 = v85;
        a3[1] = v62;
        a3[2] = &v84[4 * v83];
        if (v78) {
          operator delete(v78);
        }
LABEL_153:
        a3[1] = v62;
        if (Espresso::AOT::CompilerOptionsForE5::GetEnableClassicCpuFallbackForMlc(v138))
        {
          std::vector<int> v67 = a3[1];
          unint64_t v110 = (unint64_t)a3[2];
          if ((unint64_t)v67 < v110) {
            goto LABEL_70;
          }
          uint64_t v68 = *a3;
          uint64_t v111 = v67 - *a3;
          uint64_t v112 = v111 >> 2;
          unint64_t v113 = (v111 >> 2) + 1;
          if (v113 >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v114 = v110 - (void)v68;
          if (v114 >> 1 > v113) {
            unint64_t v113 = v114 >> 1;
          }
          if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v113;
          }
          if (v73)
          {
            if (v73 >> 62) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            char v74 = operator new(4 * v73);
            uint64_t v75 = &v74[4 * v112];
            *(_DWORD *)uint64_t v75 = 3;
            unint64_t v51 = v75 + 4;
            if (v67 == v68) {
              goto LABEL_180;
            }
          }
          else
          {
            char v74 = 0;
            uint64_t v75 = (char *)(4 * v112);
            v125 = (_DWORD *)(4 * v112);
            _DWORD *v125 = 3;
            unint64_t v51 = (char *)(v125 + 1);
            if (v67 == v68) {
              goto LABEL_180;
            }
          }
          unint64_t v126 = v67 - 4 - v68;
          if (v126 < 0x2C) {
            goto LABEL_215;
          }
          if ((unint64_t)(v67 - &v74[v111]) < 0x20) {
            goto LABEL_215;
          }
          uint64_t v127 = (v126 >> 2) + 1;
          uint64_t v128 = 4 * (v127 & 0x7FFFFFFFFFFFFFF8);
          v129 = &v67[-v128];
          v75 -= v128;
          v130 = &v74[v111 - 16];
          std::string v131 = v67 - 16;
          uint64_t v132 = v127 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v133 = *(_OWORD *)v131;
            *(v130 - 1) = *((_OWORD *)v131 - 1);
            _OWORD *v130 = v133;
            v130 -= 2;
            v131 -= 32;
            v132 -= 8;
          }
          while (v132);
          std::vector<int> v67 = v129;
          if (v127 != (v127 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_215:
            do
            {
              int v134 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v75 - 1) = v134;
              v75 -= 4;
            }
            while (v67 != v68);
          }
LABEL_180:
          *a3 = v75;
          a3[1] = v51;
          a3[2] = &v74[4 * v73];
          if (v68) {
            operator delete(v68);
          }
          goto LABEL_72;
        }
LABEL_73:
        v21 += 3;
      }
      while (v21 != v22);
      uint64_t v22 = (void **)v141;
      if (v141)
      {
LABEL_183:
        v135 = v142;
        v136 = v22;
        if (v142 != v22)
        {
          do
          {
            if (*((char *)v135 - 1) < 0) {
              operator delete(*(v135 - 3));
            }
            v135 -= 3;
          }
          while (v135 != v22);
          v136 = v141;
        }
        v142 = v22;
        operator delete(v136);
      }
LABEL_190:
      long long v4 = v137;
LABEL_5:
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_1921670E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnitsWithClassicCost(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 184;
}

uint64_t *Espresso::AOT::AOTCompilerOptions::UnsetOption(uint64_t a1, long long *a2, uint64_t a3)
{
  int v6 = a2;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v6);
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__erase_unique<std::string>(v4 + 5, a3);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__erase_unique<std::string>(void *a1, uint64_t a2)
{
  float result = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<E5RT::AneDevice>>>>::remove(a1, result, (uint64_t)&__p);
    long long v4 = (void **)__p;
    std::string __p = 0;
    if (v4)
    {
      if (v7)
      {
        uint64_t v5 = *((unsigned int *)v4 + 16);
        if (v5 != -1) {
          ((void (*)(char *, void **))off_1EE39B7B8[v5])(&v8, v4 + 5);
        }
        *((_DWORD *)v4 + 16) = -1;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
      }
      operator delete(v4);
    }
    return (uint64_t *)1;
  }
  return result;
}

uint64_t Espresso::AOT::AbstractMILCompiler::AbstractMILCompiler(uint64_t a1, const Espresso::AOT::AOTCompilerOptions *a2, uint64_t a3)
{
  Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18, a2);
  int v6 = *(void **)a3;
  unint64_t v7 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  char v8 = *(void **)(a3 + 16);
  __p[0] = v6;
  __p[1] = (void *)v7;
  unint64_t v9 = *(void **)(a3 + 24);
  v16[0] = v8;
  v16[1] = v9;
  int v17 = *(_DWORD *)(a3 + 32);
  if (v9)
  {
    unint64_t v10 = v8[1];
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *((void *)v6 + v10) = v16;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend(a1, v18, (uint64_t)__p);
  unint64_t v11 = (void **)v16[0];
  if (v16[0])
  {
    do
    {
      unint64_t v14 = (void **)*v11;
      if (*((char *)v11 + 63) < 0)
      {
        operator delete(v11[5]);
        if (*((char *)v11 + 39) < 0) {
LABEL_16:
        }
          operator delete(v11[2]);
      }
      else if (*((char *)v11 + 39) < 0)
      {
        goto LABEL_16;
      }
      operator delete(v11);
      unint64_t v11 = v14;
    }
    while (v14);
  }
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)v18);
  *(void *)a1 = &unk_1EE36B370;
  Espresso::AOT::AbstractMILCompiler::ExtractOptions(a2, (std::string *)(a1 + 184));
  return a1;
}

void sub_1921673BC(_Unwind_Exception *a1)
{
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v1);
  _Unwind_Resume(a1);
}

void sub_1921673D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void Espresso::AOT::AbstractMILCompiler::ExtractOptions(Espresso::AOT::AbstractMILCompiler *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t Input = Espresso::AOT::AOTCompilerOptions::GetInput(this);
  if (*(char *)(Input + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)Input, *(void *)(Input + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)Input;
    a2->__r_.__value_.__r.__words[2] = *(void *)(Input + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
  uint64_t Output = Espresso::AOT::AOTCompilerOptions::GetOutput(this);
  if (*(char *)(Output + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2 + 1, *(const std::string::value_type **)Output, *(void *)(Output + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)Output;
    a2[1].__r_.__value_.__r.__words[2] = *(void *)(Output + 16);
    *(_OWORD *)&a2[1].__r_.__value_.__l.__data_ = v8;
  }
  unint64_t v9 = (std::string::__raw *)&a2[2];
  HIBYTE(v25) = 4;
  strcpy((char *)__p, "main");
  std::vector<std::string>::vector[abi:ne180100](a2[2].__r_.__value_.__r.__words, (uint64_t)__p, 1uLL);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  a2[3].__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v23.__r_.__value_.__s + 23) = 3;
  LODWORD(v23.__r_.__value_.__l.__data_) = 7104877;
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this, (uint64_t)&v23, (uint64_t)__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  *((unsigned char *)&v23.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&v23, "entry-points");
  unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::find<std::string>(__p, (uint64_t)&v23);
  unint64_t v11 = v10;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!v11) {
      goto LABEL_29;
    }
  }
  else if (!v10)
  {
    goto LABEL_29;
  }
  if (*((_DWORD *)v11 + 16) != 3) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (*((char *)v11 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v23, (const std::string::value_type *)v11[5], v11[6]);
  }
  else {
    std::string v23 = *(std::string *)(v11 + 5);
  }
  char v20 = 1;
  LOWORD(v19) = 44;
  E5Common::StringUtils::Split((uint64_t *)&v23, (char *)&v19, (uint64_t)&v21);
  uint64_t v12 = (void *)v9->__words[0];
  if (v9->__words[0])
  {
    std::string::size_type size = a2[2].__r_.__value_.__l.__size_;
    unint64_t v14 = (void *)v9->__words[0];
    if ((void *)size != v12)
    {
      do
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      while ((void *)size != v12);
      unint64_t v14 = (void *)v9->__words[0];
    }
    a2[2].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    operator delete(v14);
    v9->__words[0] = 0;
    a2[2].__r_.__value_.__l.__size_ = 0;
    a2[2].__r_.__value_.__r.__words[2] = 0;
  }
  *(_OWORD *)&a2[2].__r_.__value_.__l.__data_ = v21;
  a2[2].__r_.__value_.__r.__words[2] = v22;
  std::string::size_type v22 = 0;
  long long v21 = 0uLL;
  if (v20 < 0)
  {
    operator delete(v19);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
LABEL_29:
  a2[3].__r_.__value_.__r.__words[0] = Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(this);
  Espresso::AOT::AbstractMILCompiler::Options::AssertValid(a2);
  uint64_t v15 = v25;
  if (v25)
  {
    do
    {
      unint64_t v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(std::string *, void **))off_1EE39B938[v17])(&v23, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      uint64_t v15 = v16;
    }
    while (v16);
  }
  uint64_t v18 = __p[0];
  __p[0] = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_1921676F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  Espresso::AOT::AbstractMILCompiler::Options::~Options(v32);
  _Unwind_Resume(a1);
}

void sub_1921677BC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1921677C4);
  }
  __clang_call_terminate(a1);
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetOutput(Espresso::AOT::AOTCompilerOptions *this)
{
  return (uint64_t)this + 56;
}

uint64_t Espresso::AOT::AOTCompilerOptions::TryGetMILProgram(Espresso::AOT::AOTCompilerOptions *this)
{
  return *((void *)this + 16);
}

void Espresso::AOT::GetToolchainInfo(uint64_t a1@<X8>)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v50 = 0x2B2382A000000000;
  long long v51 = 0u;
  long long v52 = 0u;
  kdebug_trace();
  version_string = espresso_get_version_string();
  strcpy((char *)&__str, "espressoc-version");
  *((unsigned char *)&__str.__r_.__value_.__s + 23) = 17;
  long long v3 = v55;
  size_t v4 = strlen(version_string);
  if (v4 > 0x7FFFFFFFFFFFFFF7) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    long long v3 = operator new(v6 + 1);
    v55[1] = v5;
    unint64_t v56 = v7 | 0x8000000000000000;
    v55[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v56) = v4;
  if (v4) {
LABEL_8:
  }
    memmove(v3, version_string, (size_t)v5);
  *((unsigned char *)v5 + (void)v3) = 0;
  std::unordered_map<std::string,std::string>::unordered_map(a1, (uint64_t)&__str, 1);
  if (SHIBYTE(v56) < 0)
  {
    operator delete(v55[0]);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_75:
    operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_11;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_75;
  }
LABEL_11:
  uint64_t v8 = 0;
  unint64_t v9 = 0x1E4F28000uLL;
  do
  {
    unint64_t v10 = &(&off_1E5746A20)[v8];
    size_t v11 = (size_t)(&off_1E5746A20)[v8 + 3];
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10[2];
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      uint64_t v13 = (long long *)operator new(v14 + 1);
      __dst[1] = (long long *)v11;
      int64_t v49 = v15 | 0x8000000000000000;
      __dst[0] = v13;
LABEL_20:
      memmove(v13, v12, v11);
      goto LABEL_21;
    }
    HIBYTE(v49) = (&off_1E5746A20)[v8 + 3];
    uint64_t v13 = (long long *)__dst;
    if (v11) {
      goto LABEL_20;
    }
LABEL_21:
    *((unsigned char *)v13 + v11) = 0;
    size_t v16 = (size_t)(&off_1E5746A20)[v8 + 5];
    if (v16 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10[4];
    if (v16 >= 0x17)
    {
      uint64_t v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v21 = v16 | 7;
      }
      uint64_t v22 = v21 + 1;
      p_p = operator new(v21 + 1);
      size_t v46 = v16;
      unint64_t v47 = v22 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v47) = (&off_1E5746A20)[v8 + 5];
      p_p = &__p;
      if (!v16)
      {
        LOBYTE(__p) = 0;
        int v19 = SHIBYTE(v47);
        if ((SHIBYTE(v47) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_31;
      }
    }
    memmove(p_p, v17, v16);
    *((unsigned char *)p_p + v16) = 0;
    int v19 = SHIBYTE(v47);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
    {
LABEL_25:
      if (v19)
      {
        char v20 = &__p;
LABEL_33:
        std::string v23 = *(void **)(v9 + 2896);
        uint64_t v24 = [NSString stringWithUTF8String:v20];
        uint64_t v25 = [v23 bundleWithPath:v24];
        goto LABEL_38;
      }
      goto LABEL_34;
    }
LABEL_31:
    if (v46)
    {
      char v20 = __p;
      goto LABEL_33;
    }
LABEL_34:
    uint64_t v26 = *(void **)(v9 + 2896);
    if (v49 >= 0) {
      uint64_t v27 = __dst;
    }
    else {
      uint64_t v27 = (long long **)__dst[0];
    }
    uint64_t v24 = [NSString stringWithUTF8String:v27];
    uint64_t v25 = [v26 bundleWithIdentifier:v24];
LABEL_38:
    float v28 = (void *)v25;

    if (!v28)
    {
      __str.__r_.__value_.__s.__data_[0] = 0;
      LOBYTE(v55[0]) = 0;
      goto LABEL_52;
    }
    unint64_t v29 = [v28 infoDictionary];
    uint64_t v30 = [v29 valueForKey:@"CFBundleVersion"];

    if (v30)
    {
      unint64_t v31 = v9;
      BOOL v32 = (const char *)[v30 UTF8String];
      size_t v33 = strlen(v32);
      if (v33 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v34 = v33;
      if (v33 >= 0x17)
      {
        uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v36 = v33 | 7;
        }
        uint64_t v37 = v36 + 1;
        uint64_t v35 = (std::string *)operator new(v36 + 1);
        v53.__r_.__value_.__l.__size_ = v34;
        v53.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
      }
      else
      {
        *((unsigned char *)&v53.__r_.__value_.__s + 23) = v33;
        uint64_t v35 = &v53;
        if (!v33) {
          goto LABEL_50;
        }
      }
      memmove(v35, v32, v34);
LABEL_50:
      v35->__r_.__value_.__s.__data_[v34] = 0;
      std::string __str = v53;
      LOBYTE(v55[0]) = 1;
      unint64_t v9 = v31;
      goto LABEL_51;
    }
    __str.__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v55[0]) = 0;
LABEL_51:

LABEL_52:
    if (SHIBYTE(v47) < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v49) < 0)
      {
LABEL_57:
        operator delete(__dst[0]);
        if (!LOBYTE(v55[0])) {
          goto LABEL_12;
        }
        goto LABEL_58;
      }
    }
    else if (SHIBYTE(v49) < 0)
    {
      goto LABEL_57;
    }
    if (!LOBYTE(v55[0])) {
      goto LABEL_12;
    }
LABEL_58:
    std::string::size_type v38 = (std::string::size_type)(&off_1E5746A20)[v8 + 1];
    if (v38 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = (&off_1E5746A20)[v8];
    if (v38 >= 0x17)
    {
      uint64_t v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v38 | 7) != 0x17) {
        uint64_t v41 = v38 | 7;
      }
      uint64_t v42 = v41 + 1;
      uint64_t v40 = (std::string *)operator new(v41 + 1);
      v53.__r_.__value_.__l.__size_ = v38;
      v53.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    }
    else
    {
      *((unsigned char *)&v53.__r_.__value_.__s + 23) = (&off_1E5746A20)[v8 + 1];
      uint64_t v40 = &v53;
      if (!v38) {
        goto LABEL_66;
      }
    }
    memmove(v40, v39, v38);
LABEL_66:
    v40->__r_.__value_.__s.__data_[v38] = 0;
    __dst[0] = (long long *)&v53;
    uint64_t v43 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (uint64_t)&v53, (uint64_t)&std::piecewise_construct, __dst);
    std::string::operator=((std::string *)(v43 + 40), &__str);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (LOBYTE(v55[0]) && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_12:
    v8 += 6;
  }
  while (v8 != 12);
  if (E5RT::g_trace_analysis_level >= v50) {
    kdebug_trace();
  }
}

void sub_192167D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::AOT::AOTCompilerBackend::AOTCompilerBackend(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EE36B2C0;
  uint64_t v5 = (Espresso::AOT::AOTCompilerOptions *)(a1 + 8);
  uint64_t v6 = (Espresso::AOT::AOTCompilerOptions *)Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(a1 + 8, a2);
  int BuildForProfiling = Espresso::AOT::AOTCompilerOptions::GetBuildForProfiling(v6);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "built-for-profiling");
  pn.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (long long **)&pn)+ 40;
  if (BuildForProfiling) {
    unint64_t v9 = "true";
  }
  else {
    unint64_t v9 = "false";
  }
  MEMORY[0x192FF0F50](v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t Input = Espresso::AOT::AOTCompilerOptions::GetInput(v5);
  memset(&__p, 0, sizeof(__p));
  uint64_t v11 = *(unsigned __int8 *)(Input + 23);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = (std::string *)Input;
  }
  else {
    uint64_t v12 = *(std::string **)Input;
  }
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(Input + 8);
  }
  std::string::append[abi:ne180100]<char const*,0>(&__p, v12, (std::string *)((char *)v12 + v11));
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (!pn.__r_.__value_.__s.__data_[0] || pn.__r_.__value_.__s.__data_[0] == 255)
  {
    uint64_t v13 = (const std::string *)Espresso::AOT::AOTCompilerOptions::GetInput(v5);
    *((unsigned char *)&pn.__r_.__value_.__s + 23) = 15;
    strcpy((char *)&pn, "input-file-path");
    v26.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&pn;
    uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)&pn, (uint64_t)&std::piecewise_construct, (long long **)&v26);
    std::string::operator=((std::string *)(v14 + 40), v13);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_26;
    }
    uint64_t v15 = (void *)pn.__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  std::__fs::filesystem::__canonical(&v26, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, v26.__pn_.__r_.__value_.__l.__data_, v26.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = v26.__pn_;
  }
  char v25 = 15;
  strcpy((char *)v24, "input-file-path");
  unint64_t v29 = v24;
  size_t v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (uint64_t)v24, (uint64_t)&std::piecewise_construct, (long long **)&v29);
  uint64_t v17 = (void **)(v16 + 40);
  if ((char)v16[63] < 0) {
    operator delete(*v17);
  }
  *(std::string *)uint64_t v17 = pn;
  *((unsigned char *)&pn.__r_.__value_.__s + 23) = 0;
  pn.__r_.__value_.__s.__data_[0] = 0;
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(pn.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v26.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v15 = (void *)v26.__pn_.__r_.__value_.__r.__words[0];
LABEL_25:
    operator delete(v15);
  }
LABEL_26:
  uint64_t v18 = *(void *)a3;
  unint64_t v19 = *(void *)(a3 + 8);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v20 = *(void *)(a3 + 16);
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 144) = v18;
  *(void *)(a1 + 152) = v19;
  uint64_t v21 = *(void *)(a3 + 24);
  *(void *)(a1 + 168) = v21;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a3 + 32);
  if (v21)
  {
    unint64_t v22 = *(void *)(v20 + 8);
    if ((v19 & (v19 - 1)) != 0)
    {
      if (v22 >= v19) {
        v22 %= v19;
      }
    }
    else
    {
      v22 &= v19 - 1;
    }
    *(void *)(v18 + 8 * v22) = a1 + 160;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1921681E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v33);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = *((void *)v15 + 1);
            if (v22 == v11)
            {
              uint64_t v23 = v15[39];
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = v15[39];
              }
              else {
                uint64_t v24 = *((void *)v15 + 3);
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                    return v15;
                  }
                }
                else
                {
                  if (!v15[39]) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = *(unsigned __int8 **)v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v11)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  std::__fs::filesystem::path v26 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x40uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v11;
  uint64_t v27 = *a4;
  long long v28 = **a4;
  *((void *)v15 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v15 + 6) = 0;
  *((void *)v15 + 7) = 0;
  *((void *)v15 + 5) = 0;
  char v45 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    uint64_t v31 = *(void *)a1;
    BOOL v32 = *(void **)(*(void *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(void *)uint64_t v15 = *v32;
LABEL_89:
      void *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    BOOL v33 = 1;
    if (v12 >= 3) {
      BOOL v33 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35) {
      size_t prime = v35;
    }
    else {
      size_t prime = v34;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v37) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v37)
    {
      unint64_t v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v37 < 3uLL || (uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        unint64_t v38 = std::__next_prime(v38);
      }
      else
      {
        uint64_t v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2) {
          unint64_t v38 = v40;
        }
      }
      if (prime <= v38) {
        size_t prime = v38;
      }
      if (prime < *(void *)&v37) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v31 = *(void *)a1;
        BOOL v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v32) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v31 = *(void *)a1;
        BOOL v32 = *(void **)(*(void *)a1 + 8 * v11);
        if (v32) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v41 & v11;
      uint64_t v31 = *(void *)a1;
      BOOL v32 = *(void **)(*(void *)a1 + 8 * (v41 & v11));
      if (v32) {
        goto LABEL_54;
      }
    }
  }
  *(void *)uint64_t v15 = *v26;
  *std::__fs::filesystem::path v26 = v15;
  *(void *)(v31 + 8 * v4) = v26;
  if (*(void *)v15)
  {
    unint64_t v42 = *(void *)(*(void *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12) {
        v42 %= v12;
      }
    }
    else
    {
      v42 &= v12 - 1;
    }
    BOOL v32 = (void *)(*(void *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1921686B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::AOTCompilerOptions::GetInput(Espresso::AOT::AOTCompilerOptions *this)
{
  return (uint64_t)this + 32;
}

uint64_t Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)float result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(result + 24) = *((unsigned char *)a2 + 24);
  long long v3 = a2[2];
  *(void *)(result + 48) = *((void *)a2 + 6);
  *(_OWORD *)(result + 32) = v3;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  long long v4 = *(long long *)((char *)a2 + 56);
  *(void *)(result + 72) = *((void *)a2 + 9);
  *(_OWORD *)(result + 56) = v4;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  *(_DWORD *)(result + 80) = *((_DWORD *)a2 + 20);
  uint64_t v5 = *((void *)a2 + 11);
  *((void *)a2 + 11) = 0;
  *(void *)(result + 88) = v5;
  *(void *)(result + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = 0;
  uint64_t v6 = *((void *)a2 + 13);
  *(void *)(result + 104) = v6;
  uint64_t v7 = *((void *)a2 + 14);
  *(void *)(result + 112) = v7;
  *(_DWORD *)(result + 120) = *((_DWORD *)a2 + 30);
  if (v7)
  {
    unint64_t v8 = *(void *)(v6 + 8);
    unint64_t v9 = *(void *)(result + 96);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(void *)(v5 + 8 * v8) = result + 104;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
  }
  *(void *)(result + 128) = *((void *)a2 + 16);
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)float result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(result + 24) = *((unsigned char *)a2 + 24);
  long long v3 = a2[2];
  *(void *)(result + 48) = *((void *)a2 + 6);
  *(_OWORD *)(result + 32) = v3;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  long long v4 = *(long long *)((char *)a2 + 56);
  *(void *)(result + 72) = *((void *)a2 + 9);
  *(_OWORD *)(result + 56) = v4;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = 0;
  *(_DWORD *)(result + 80) = *((_DWORD *)a2 + 20);
  uint64_t v5 = *((void *)a2 + 11);
  *((void *)a2 + 11) = 0;
  *(void *)(result + 88) = v5;
  *(void *)(result + 96) = *((void *)a2 + 12);
  *((void *)a2 + 12) = 0;
  uint64_t v6 = *((void *)a2 + 13);
  *(void *)(result + 104) = v6;
  uint64_t v7 = *((void *)a2 + 14);
  *(void *)(result + 112) = v7;
  *(_DWORD *)(result + 120) = *((_DWORD *)a2 + 30);
  if (v7)
  {
    unint64_t v8 = *(void *)(v6 + 8);
    unint64_t v9 = *(void *)(result + 96);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(void *)(v5 + 8 * v8) = result + 104;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
  }
  *(void *)(result + 128) = *((void *)a2 + 16);
  return result;
}

const char *espresso_get_version_string()
{
  return "3402.5.1";
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_192168820(_Unwind_Exception *a1)
{
  long long v3 = *(void ***)(v1 + 16);
  if (v3) {
    std::unordered_map<std::string,std::string>::unordered_map(v3);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>::unordered_map((void **)v1);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::CreateEIRInnerProductParams(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v61, "weight");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v63) < 0) {
    operator delete(v61);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 96))(v5);
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v61, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
  unint64_t v8 = v61;
  uint64_t v7 = v62;
  if ((char *)v62 - (char *)v61 != 16)
  {
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(__p);
    int v33 = v60;
    unint64_t v34 = (void **)__p[0];
    std::string::basic_string[abi:ne180100]<0>(&v58, "weight must be rank 2");
    if (v33 >= 0) {
      unint64_t v35 = __p;
    }
    else {
      unint64_t v35 = v34;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v58;
    }
    else {
      uint64_t v36 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v35, (uint64_t)v36);
  }
  if (v61 != v62)
  {
    do
    {
      if (!(*(uint64_t (**)(void))(*(void *)*v8 + 16))())
      {
        uint64_t v27 = MIL::IRObject::GetLocation(a2);
        (*(void (**)(void **__return_ptr))(*(void *)v27 + 24))(__p);
        int v28 = v60;
        float v29 = (void **)__p[0];
        std::string::basic_string[abi:ne180100]<0>(&v58, "unexpected non-constant dimension in weights");
        if (v28 >= 0) {
          float v30 = __p;
        }
        else {
          float v30 = v29;
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v31 = &v58;
        }
        else {
          uint64_t v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v30, (uint64_t)v31);
      }
      ++v8;
    }
    while (v8 != v7);
    uint64_t v7 = v61;
  }
  uint64_t v9 = MIL::IRDimension::AsConstant(*v7);
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v11 = MIL::IRDimension::AsConstant(v61[1]);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
  if (v10 - 1 >= 0xFFFFFFFF)
  {
    uint64_t v37 = MIL::IRObject::GetLocation(a2);
    unint64_t v38 = __p;
    (*(void (**)(void **__return_ptr))(*(void *)v37 + 24))(__p);
    if (v60 < 0) {
      unint64_t v38 = (void **)__p[0];
    }
    std::to_string(&v57, v10);
    uint8x8_t v39 = std::string::insert(&v57, 0, "invalid number of output channels = ");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v41 = &v58;
    }
    else {
      unint64_t v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v38, (uint64_t)v41);
  }
  unint64_t v13 = v12;
  if ((unint64_t)(v12 - 1) >= 0xFFFFFFFF)
  {
    uint64_t v42 = MIL::IRObject::GetLocation(a2);
    uint64_t v43 = __p;
    (*(void (**)(void **__return_ptr))(*(void *)v42 + 24))(__p);
    if (v60 < 0) {
      uint64_t v43 = (void **)__p[0];
    }
    std::to_string(&v57, v13);
    char v44 = std::string::insert(&v57, 0, "invalid number of input channels = ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v58.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v46 = &v58;
    }
    else {
      size_t v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v43, (uint64_t)v46);
  }
  unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  if (v13 * v10 != v14)
  {
    uint64_t v47 = MIL::IRObject::GetLocation(a2);
    (*(void (**)(void **__return_ptr))(*(void *)v47 + 24))(__p);
    int v48 = v60;
    int64_t v49 = (void **)__p[0];
    WeightArraySizeErrorString(&v58, v14, v13, v10);
    if (v48 >= 0) {
      uint64_t v50 = __p;
    }
    else {
      uint64_t v50 = v49;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v51 = &v58;
    }
    else {
      long long v51 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v50, (uint64_t)v51);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  int IsParameterSet = MIL::IROperation::IsParameterSet();
  int v16 = IsParameterSet;
  if (v60 < 0)
  {
    operator delete(__p[0]);
    if (!v16) {
      goto LABEL_18;
    }
  }
  else if (!IsParameterSet)
  {
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "bias");
  uint64_t v17 = MIL::IROperation::GetParameterType();
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  if (v10 != v18)
  {
    uint64_t v52 = MIL::IRObject::GetLocation(a2);
    (*(void (**)(void **__return_ptr))(*(void *)v52 + 24))(__p);
    int v53 = v60;
    int8x8_t v54 = (void **)__p[0];
    BiasArraySizeErrorString(&v58, v18, v10);
    if (v53 >= 0) {
      int v55 = __p;
    }
    else {
      int v55 = v54;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v56 = &v58;
    }
    else {
      unint64_t v56 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v55, (uint64_t)v56);
  }
LABEL_18:
  *((unsigned char *)this + 40) = 0;
  *((_DWORD *)this + 13) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 7) = _D0;
  *(void *)((char *)this + 124) = 0;
  *(void *)((char *)this + 12) = 0;
  *(void *)((char *)this + 20) = _D0;
  *(void *)((char *)this + 84) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 44) = 0;
  *((_DWORD *)this + 9) = 0;
  *(void *)((char *)this + 100) = 0;
  *(void *)((char *)this + 116) = 0;
  *(void *)((char *)this + 108) = 0;
  *(_DWORD *)this = v10;
  *((_DWORD *)this + 1) = v13;
  *((_DWORD *)this + 2) = v16;
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  uint64_t v24 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v25 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v24);
  uint64_t v26 = MIL::IRTensorValueType::Rank(v25);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  *((unsigned char *)this + 40) = (unint64_t)(v26 - 4) < 0xFFFFFFFFFFFFFFFDLL;
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_192168E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  float v30 = *(void **)(v28 - 72);
  if (v30)
  {
    *(void *)(v28 - 64) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddElementWiseBinaryBroadcast(std::string *a1, uint64_t a2, const MIL::IROperation *a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v48 = *MEMORY[0x1E4F143B8];
  int v14 = *(char *)(a6 + 23);
  if (v14 < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    if (*(char *)(a6 + 23) < 0)
    {
      if (*(void *)(a6 + 8)) {
        goto LABEL_3;
      }
    }
    else if (*(unsigned char *)(a6 + 23))
    {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v47 = *(std::string *)a6;
    if ((_BYTE)v14)
    {
LABEL_3:
      char v44 = 0;
      long long v45 = 0;
      size_t v46 = 0;
      unint64_t v37 = (unint64_t)&v44;
      LOBYTE(v38) = 0;
      char v44 = (std::string *)operator new(0x18uLL);
      long long v45 = v44;
      size_t v46 = v44 + 1;
      long long v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46, (long long *)&v47, &v48, v44);
      goto LABEL_7;
    }
  }
  (*(void (**)(std::string **__return_ptr, const MIL::IROperation *))(*(void *)a3 + 200))(&v44, a3);
LABEL_7:
  if (*(char *)(a7 + 23) < 0)
  {
    if (*(void *)(a7 + 8)) {
      goto LABEL_9;
    }
LABEL_11:
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v43, a3);
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a7 + 23)) {
    goto LABEL_11;
  }
LABEL_9:
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a2 + 168), a7, (uint64_t)&v43);
LABEL_12:
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a2, a5, a3);
  uint64_t v15 = 0;
  uint64_t v38 = 1065353216;
  uint64_t v39 = 897988541;
  int v41 = 0;
  int v42 = 0;
  unint64_t v37 = a4;
  char v40 = 1;
  {
    if (++v15 == 6) {
      goto LABEL_17;
    }
  }
LABEL_17:
    goto LABEL_28;
  uint64_t v17 = 0;
  {
    if (++v17 == 3) {
      goto LABEL_23;
    }
  }
LABEL_23:
  {
LABEL_28:
    uint64_t v25 = *(void *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    uint64_t Location = MIL::IRObject::GetLocation(a3);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v35, v25, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v37, a5, (uint64_t *)&v44, 14, Location);
    uint64_t v24 = v36;
    if (!v36) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v19 = *(void *)(a2 + 40);
  if (a4 != 101)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    uint64_t v28 = MIL::IRObject::GetLocation(a3);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v29, v19, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v37, (uint64_t)a5, (uint64_t *)&v44, v28);
    uint64_t v24 = v30;
    if (!v30) {
      goto LABEL_30;
    }
LABEL_29:
    nitro::nitro_function::nitro_function(v24);
    goto LABEL_30;
  }
  uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v19 + 200), (unsigned __int8 *)(*a5 + 24));
  if (!v20) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v21 = *((_DWORD *)v20 + 10);
  uint64_t v22 = *(void *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  uint64_t v23 = MIL::IRObject::GetLocation(a3);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v31, v22, (uint64_t)__p, (uint64_t)&v43, (uint64_t)&v37, a5, (uint64_t *)&v44, v21, v23);
  uint64_t v24 = v32;
  if (v32) {
    goto LABEL_29;
  }
LABEL_30:
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (v45 == v44) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (SHIBYTE(v44->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v44->__r_.__value_.__l.__data_, v44->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v27 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v27;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  unint64_t v37 = (unint64_t)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_192169344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  a23 = v35 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  _Unwind_Resume(a1);
}

void Espresso::correct_jump_labels_after_ordering_change(Espresso *this, Espresso::net *a2)
{
  long long v3 = (void *)((char *)this + 928);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear((uint64_t)this + 928);
  std::vector<unsigned long>::vector(__p, (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4);
  uint64_t v4 = *((void *)this + 4);
  if (*((void *)this + 5) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      char v40 = (long long *)(*(void *)(v4 + v5) + 16);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)v40, (uint64_t)&std::piecewise_construct, &v40)[5] = v6;
      if (std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)this + 111, v6))
      {
        unint64_t v7 = v6;
      }
      *((void *)__p[0] + v6++) = v7;
      uint64_t v4 = *((void *)this + 4);
      uint64_t v8 = *((void *)this + 5);
      v5 += 16;
    }
    while (v6 < (v8 - v4) >> 4);
    if (v8 != v4)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = (uint64_t *)(v4 + v9);
        uint64_t v13 = *v11;
        uint64_t v12 = (std::__shared_weak_count *)v11[1];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v14 = *(const void **)(v13 + 64);
        if (!v14) {
          goto LABEL_23;
        }
        if (!v15) {
          goto LABEL_23;
        }
        int v16 = v15;
        uint64_t v17 = *(std::__shared_weak_count **)(v13 + 72);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v3, (uint64_t)(v15 + 8)))
        {
          if (v16[31] >= 0) {
            int v33 = v16 + 8;
          }
          else {
            int v33 = (const char *)*((void *)v16 + 1);
          }
          char v34 = (const char *)(v13 + 40);
          if (*(char *)(v13 + 63) < 0) {
            char v34 = *(const char **)v34;
          }
          uint64_t v35 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0) {
            uint64_t v35 = *(const char **)v35;
          }
          Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*,char const*>(v33, v34, v35);
        }
        char v40 = (long long *)(v16 + 8);
        unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v16 + 8), (uint64_t)&std::piecewise_construct, &v40);
        std::string::operator=((std::string *)(v16 + 8), (const std::string *)(*(void *)(*((void *)this + 4) + 16 * *((void *)__p[0] + v18[5])) + 16));
        if (v19) {
          break;
        }
        if (v17) {
          goto LABEL_22;
        }
LABEL_23:
        if (v12) {
          nitro::nitro_function::nitro_function(v12);
        }
        ++v10;
        uint64_t v4 = *((void *)this + 4);
        uint64_t v22 = *((void *)this + 5);
        v9 += 16;
        if (v10 >= (v22 - v4) >> 4)
        {
          if (v22 != v4)
          {
            uint64_t v23 = 0;
            unint64_t v24 = 0;
            do
            {
              uint64_t v25 = (uint64_t *)(v4 + v23);
              uint64_t v27 = *v25;
              uint64_t v26 = (std::__shared_weak_count *)v25[1];
              if (v26) {
                atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v28 = *(const void **)(v27 + 64);
              if (v28)
              {
                if (v29)
                {
                  float v30 = *(std::__shared_weak_count **)(v27 + 72);
                  if (v30) {
                    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v31 = (std::string *)(v29 + 296);
                  char v40 = (long long *)(v29 + 296);
                  BOOL v32 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v29 + 296), (uint64_t)&std::piecewise_construct, &v40);
                  std::string::operator=(v31, (const std::string *)(*(void *)(*((void *)this + 4) + 16 * *((void *)__p[0] + v32[5])) + 16));
                  if (v30) {
                    nitro::nitro_function::nitro_function(v30);
                  }
                }
              }
              if (v26) {
                nitro::nitro_function::nitro_function(v26);
              }
              ++v24;
              uint64_t v4 = *((void *)this + 4);
              v23 += 16;
            }
            while (v24 < (*((void *)this + 5) - v4) >> 4);
          }
          goto LABEL_39;
        }
      }
      uint64_t v20 = v19;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v3, (uint64_t)(v19 + 328)))
      {
        if (v20[351] >= 0) {
          uint64_t v36 = v20 + 328;
        }
        else {
          uint64_t v36 = (const char *)*((void *)v20 + 41);
        }
        unint64_t v37 = (const char *)(v13 + 40);
        if (*(char *)(v13 + 63) < 0) {
          unint64_t v37 = *(const char **)v37;
        }
        uint64_t v38 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          uint64_t v38 = *(const char **)v38;
        }
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*,char const*>(v36, v37, v38);
      }
      char v40 = (long long *)(v20 + 328);
      int v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (uint64_t)(v20 + 328), (uint64_t)&std::piecewise_construct, &v40);
      std::string::operator=((std::string *)(v20 + 328), (const std::string *)(*(void *)(*((void *)this + 4) + 16 * *((void *)__p[0] + v21[5])) + 16));
      if (!v17) {
        goto LABEL_23;
      }
      nitro::nitro_function::nitro_function(v17);
LABEL_22:
      nitro::nitro_function::nitro_function(v17);
      goto LABEL_23;
    }
  }
LABEL_39:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192169818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12) {
    nitro::nitro_function::nitro_function(v12);
  }
  if (v11) {
    nitro::nitro_function::nitro_function(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1921698EC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::TranslateElementWiseBinary(uint64_t a1, MIL::IRObject *a2, unsigned int a3)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  unint64_t v7 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(ParameterType);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v160, "y");
  uint64_t v8 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  unint64_t v10 = MIL::IRTensorValueType::Rank(v7);
  unint64_t v11 = MIL::IRTensorValueType::Rank(v9);
  uint64_t v12 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v7 + 96))(v7);
  v150 = 0;
  __s1 = 0;
  uint64_t v151 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__s1, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  uint64_t v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v9 + 96))(v9);
  v147 = 0;
  __s2 = 0;
  uint64_t v148 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__s2, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  MIL::IROperation::TryGetParameterValueSharedPtr();
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v160, "y");
  MIL::IROperation::TryGetParameterValueSharedPtr();
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v160, "x");
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *, std::string *, void))(*(void *)a2 + 120))(a2, &v160, 0);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v160, "y");
  uint64_t v15 = (*(uint64_t (**)(MIL::IRObject *, std::string *, void))(*(void *)a2 + 120))(a2, &v160, 0);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    if (*(char *)(v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v141, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
    }
    else
    {
      long long v16 = *(_OWORD *)v14;
      v141.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
      *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v16;
    }
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(void *)a2 + 200))(&v156, a2);
    std::string::size_type v17 = v156.__r_.__value_.__r.__words[0];
    if (*(char *)(v156.__r_.__value_.__r.__words[0] + 23) >= 0) {
      size_t v18 = *(unsigned __int8 *)(v156.__r_.__value_.__r.__words[0] + 23);
    }
    else {
      size_t v18 = *(void *)(v156.__r_.__value_.__r.__words[0] + 8);
    }
    uint64_t v19 = &v160;
    std::string::basic_string[abi:ne180100]((uint64_t)&v160, v18 + 12);
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v19 = (std::string *)v160.__r_.__value_.__r.__words[0];
    }
    if (v18)
    {
      if (*(char *)(v17 + 23) >= 0) {
        uint64_t v20 = (const void *)v17;
      }
      else {
        uint64_t v20 = *(const void **)v17;
      }
      memmove(v19, v20, v18);
    }
    strcpy((char *)v19 + v18, "__x__literal");
    Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a1 + 128), (uint64_t)&v160, (uint64_t)&v141);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v160.__r_.__value_.__l.__data_);
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  }
  if (v15)
  {
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
    }
    else
    {
      long long v21 = *(_OWORD *)v15;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
    }
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(void *)a2 + 200))(&v156, a2);
    std::string::size_type v22 = v156.__r_.__value_.__r.__words[0];
    if (*(char *)(v156.__r_.__value_.__r.__words[0] + 23) >= 0) {
      size_t v23 = *(unsigned __int8 *)(v156.__r_.__value_.__r.__words[0] + 23);
    }
    else {
      size_t v23 = *(void *)(v156.__r_.__value_.__r.__words[0] + 8);
    }
    unint64_t v24 = &v160;
    std::string::basic_string[abi:ne180100]((uint64_t)&v160, v23 + 12);
    if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v24 = (std::string *)v160.__r_.__value_.__r.__words[0];
    }
    if (v23)
    {
      if (*(char *)(v22 + 23) >= 0) {
        uint64_t v25 = (const void *)v22;
      }
      else {
        uint64_t v25 = *(const void **)v22;
      }
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "__y__literal");
    Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a1 + 128), (uint64_t)&v160, (uint64_t)&__str);
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v160.__r_.__value_.__l.__data_);
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  }
  if (a3 > 1)
  {
    if (a3 == 13 && !v11 && v142)
    {
      if (!v14)
      {
        v129 = v144;
        v130 = v145;
        if (v145) {
          atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t Location = MIL::IRObject::GetLocation(a2);
        Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)&v141, (uint64_t)&v141, (uint64_t)&v129, Location);
        if (v130) {
          nitro::nitro_function::nitro_function(v130);
        }
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = v141;
      }
      memset(&v160, 0, sizeof(v160));
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      v152.__r_.__value_.__s.__data_[8] = 0;
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v160.__r_.__value_.__l.__size_ = v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[0] + 24;
      v160.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160.__r_.__value_.__r.__words[2], (long long *)&v156, (long long *)&__s, (std::string *)v160.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      std::string::basic_string[abi:ne180100]<0>(&v134, "");
      Espresso::MILTranslator::LayerTranslator::GetFloatScalarValue(v142, a2, v43);
      Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&v128, a1, a2, 0xDu, (uint64_t *)&v160, (uint64_t)&v152, (uint64_t)&v134, v44);
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v45 = (void *)v128.__r_.__value_.__r.__words[0];
LABEL_126:
        operator delete(v45);
      }
LABEL_127:
      if (v136 < 0) {
        operator delete(v134);
      }
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (void *)v156.__r_.__value_.__r.__words[0];
LABEL_330:
        operator delete(v50);
        goto LABEL_331;
      }
      goto LABEL_331;
    }
  }
  else if (!v10 && v144 || !v11 && v142)
  {
    if (v10 || !v144)
    {
      if (!v14)
      {
        uint64_t v132 = v144;
        long long v133 = v145;
        if (v145) {
          atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = MIL::IRObject::GetLocation(a2);
        Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)&v141, (uint64_t)&v141, (uint64_t)&v132, v32);
        if (v133) {
          nitro::nitro_function::nitro_function(v133);
        }
      }
      if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = v141;
      }
      memset(&v160, 0, sizeof(v160));
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      v152.__r_.__value_.__s.__data_[8] = 0;
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v160.__r_.__value_.__l.__size_ = v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[0] + 24;
      v160.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160.__r_.__value_.__r.__words[2], (long long *)&v156, (long long *)&__s, (std::string *)v160.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      std::string::basic_string[abi:ne180100]<0>(&v134, "");
      Espresso::MILTranslator::LayerTranslator::GetFloatScalarValue(v142, a2, v48);
      Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&__p, a1, a2, a3, (uint64_t *)&v160, (uint64_t)&v152, (uint64_t)&v134, v49);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v45 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_126;
      }
    }
    else
    {
      if (!v15)
      {
        v138 = v142;
        v139 = v143;
        if (v143) {
          atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = MIL::IRObject::GetLocation(a2);
        Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)&__str, (uint64_t)&__str, (uint64_t)&v138, v26);
        if (v139) {
          nitro::nitro_function::nitro_function(v139);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = __str;
      }
      memset(&v160, 0, sizeof(v160));
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      v152.__r_.__value_.__s.__data_[8] = 0;
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v160.__r_.__value_.__l.__size_ = v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[0] + 24;
      v160.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160.__r_.__value_.__r.__words[2], (long long *)&v156, (long long *)&__s, (std::string *)v160.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      std::string::basic_string[abi:ne180100]<0>(&v134, "");
      Espresso::MILTranslator::LayerTranslator::GetFloatScalarValue(v144, a2, v46);
      Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&v137, a1, a2, a3, (uint64_t *)&v160, (uint64_t)&v152, (uint64_t)&v134, v47);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      {
        long long v45 = (void *)v137.__r_.__value_.__r.__words[0];
        goto LABEL_126;
      }
    }
    goto LABEL_127;
  }
  if (!v14)
  {
    unint64_t v126 = v144;
    uint64_t v127 = v145;
    if (v145) {
      atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)&v141, (uint64_t)&v141, (uint64_t)&v126, v28);
    if (v127) {
      nitro::nitro_function::nitro_function(v127);
    }
  }
  if (!v15)
  {
    int v124 = v142;
    v125 = v143;
    if (v143) {
      atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::LayerTranslator::LoadConstant(a1, (uint64_t)&__str, (uint64_t)&__str, (uint64_t)&v124, v29);
    if (v125) {
      nitro::nitro_function::nitro_function(v125);
    }
  }
  if (v150 - (unsigned char *)__s1 == v147 - (unsigned char *)__s2 && !memcmp(__s1, __s2, v150 - (unsigned char *)__s1))
  {
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v160, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
    }
    else {
      std::string v160 = v141;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v161, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(void *)&long long v162 = *((void *)&__str.__r_.__value_.__l + 2);
    }
    memset(&v156, 0, sizeof(v156));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    v152.__r_.__value_.__s.__data_[8] = 0;
    v156.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
    v156.__r_.__value_.__r.__words[2] = v156.__r_.__value_.__r.__words[0] + 48;
    v156.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156.__r_.__value_.__r.__words[2], (long long *)&v160, (long long *)((char *)&v162 + 8), (std::string *)v156.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v152, "");
    std::string::basic_string[abi:ne180100]<0>(&v134, "");
    Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&v123, a1, a2, a3, (uint64_t *)&v156, (uint64_t)&v152, (uint64_t)&v134, 1.0);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v123.__r_.__value_.__l.__data_);
    }
    if (v136 < 0) {
      operator delete(v134);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    for (uint64_t i = 0; i != -48; i -= 24)
    {
      if (*((char *)&v162 + i + 7) < 0) {
        operator delete(*(void **)((char *)&v160 + i + 24));
      }
    }
    goto LABEL_331;
  }
  uint64_t v30 = 0;
  uint64_t v31 = (int *)"N8Espresso5MILES11ReshapeGradE";
  {
    if (++v30 == 3) {
      goto LABEL_95;
    }
  }
LABEL_95:
  {
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v160, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
    }
    else {
      std::string v160 = v141;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v161, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(void *)&long long v162 = *((void *)&__str.__r_.__value_.__l + 2);
    }
    memset(&v156, 0, sizeof(v156));
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    v152.__r_.__value_.__s.__data_[8] = 0;
    v156.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
    v156.__r_.__value_.__r.__words[2] = v156.__r_.__value_.__r.__words[0] + 48;
    v156.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156.__r_.__value_.__r.__words[2], (long long *)&v160, (long long *)((char *)&v162 + 8), (std::string *)v156.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v152, "");
    std::string::basic_string[abi:ne180100]<0>(&v134, "");
    Espresso::MILTranslator::LayerTranslator::AddElementWiseBinaryBroadcast(&v98, a1, a2, a3, (uint64_t *)&v156, (uint64_t)&v152, (uint64_t)&v134);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (v136 < 0) {
      operator delete(v134);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
    for (uint64_t j = 0; j != -48; j -= 24)
    {
      if (*((char *)&v162 + j + 7) < 0) {
        operator delete(*(void **)((char *)&v160 + j + 24));
      }
    }
    goto LABEL_331;
  }
  v160.__r_.__value_.__r.__words[0] = 1;
  std::vector<unsigned long>::vector(&v134, 5uLL, &v160);
  v160.__r_.__value_.__r.__words[0] = 1;
  std::vector<unsigned long>::vector(&v121, 5uLL, &v160);
  if (v10)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 5 - v10;
    do
    {
      uint64_t v35 = (*(uint64_t (**)(void))(**(void **)((char *)__s1 + v33) + 16))(*(void *)((char *)__s1 + v33));
      if (v35)
      {
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v35 + 48))(v35);
        *((void *)v134 + v34) = v36;
      }
      else
      {
        *((void *)v134 + v34) = 0;
      }
      ++v34;
      v33 += 8;
    }
    while (v34 != 5);
  }
  if (v11)
  {
    uint64_t v37 = 0;
    unint64_t v38 = 5 - v11;
    do
    {
      uint64_t v39 = (*(uint64_t (**)(void))(**(void **)((char *)__s2 + v37) + 16))(*(void *)((char *)__s2 + v37));
      if (v39)
      {
        uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 48))(v39);
        *((void *)v121 + v38) = v40;
      }
      else
      {
        *((void *)v121 + v38) = 0;
      }
      ++v38;
      v37 += 8;
    }
    while (v38 != 5);
  }
  std::string::basic_string[abi:ne180100]<0>(&v120, "");
  std::string::basic_string[abi:ne180100]<0>(&v119, "");
  for (uint64_t k = v134; ; ++k)
  {
    if (k == v135)
    {
      std::string::operator=(&v120, &__str);
      p_str = &v141;
      goto LABEL_155;
    }
    if (*k != 1) {
      break;
    }
  }
  for (uint64_t m = v121; m != v122; ++m)
  {
    if (*m != 1) {
      goto LABEL_156;
    }
  }
  std::string::operator=(&v120, &v141);
  p_str = &__str;
LABEL_155:
  std::string::operator=(&v119, p_str);
LABEL_156:
  int v53 = operator new(8uLL);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
  *int v53 = 1;
  v160.__r_.__value_.__l.__size_ = (std::string::size_type)(v53 + 1);
  v160.__r_.__value_.__r.__words[2] = (std::string::size_type)(v53 + 1);
  long long v161 = 0uLL;
  *(void *)&long long v162 = 0;
  int8x8_t v54 = operator new(8uLL);
  *(void *)&long long v161 = v54;
  *int8x8_t v54 = 2;
  *((void *)&v161 + 1) = v54 + 1;
  long long v162 = (unint64_t)(v54 + 1);
  v163 = 0;
  size_t v164 = 0;
  int v55 = operator new(0x10uLL);
  *((void *)&v162 + 1) = v55;
  *int v55 = xmmword_192DCA8F0;
  v163 = v55 + 1;
  size_t v164 = v55 + 1;
  unint64_t v165 = 0;
  v166 = 0;
  char v167 = 0;
  unint64_t v56 = operator new(0x18uLL);
  v56[2] = 4;
  *(_OWORD *)unint64_t v56 = xmmword_192E051D8;
  unint64_t v165 = v56;
  v166 = (char *)(v56 + 3);
  char v167 = (char *)(v56 + 3);
  v168 = 0;
  v169 = 0;
  std::string v170 = 0;
  std::string v57 = operator new(0x20uLL);
  v169 = v57 + 2;
  std::string v170 = v57 + 2;
  *std::string v57 = xmmword_192E051F0;
  v57[1] = unk_192E05200;
  v168 = v57;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  unint64_t v116 = 0;
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  v152.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v58 = 0;
  unint64_t v116 = (char *)operator new(0x78uLL);
  uint64_t v117 = v116;
  uint64_t v118 = v116 + 120;
  unint64_t v113 = v116;
  v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)&v118;
  v156.__r_.__value_.__l.__size_ = (std::string::size_type)&v158;
  v156.__r_.__value_.__r.__words[2] = (std::string::size_type)&v113;
  uint64_t v59 = v116;
  __s.__r_.__value_.__s.__data_[0] = 0;
  do
  {
    *(void *)uint64_t v59 = 0;
    *((void *)v59 + 1) = 0;
    *((void *)v59 + 2) = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v59, *(const void **)((char *)&v160.__r_.__value_.__l.__data_ + v58 * 8), *(std::string::size_type *)((char *)&v160.__r_.__value_.__l.__size_ + v58 * 8), (uint64_t)(*(std::string::size_type *)((char *)&v160.__r_.__value_.__l.__size_ + v58 * 8)- v160.__r_.__value_.__r.__words[v58]) >> 3);
    uint64_t v59 = (char *)v113 + 24;
    unint64_t v113 = (char *)v113 + 24;
    v58 += 3;
  }
  while (v58 != 15);
  __s.__r_.__value_.__s.__data_[0] = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::vector<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v156);
  uint64_t v60 = 0;
  uint64_t v117 = v59;
  do
  {
    uint64_t v61 = *(_OWORD **)((char *)&v168 + v60);
    if (v61)
    {
      *(_OWORD **)((char *)&v169 + v60) = v61;
      operator delete(v61);
    }
    v60 -= 24;
  }
  while (v60 != -120);
  uint64_t v97 = a1;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  unint64_t v113 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v113, *((const void **)v117 - 3), *((void *)v117 - 2), (uint64_t)(*((void *)v117 - 2) - *((void *)v117 - 3)) >> 3);
  uint64_t v62 = v116;
  uint64_t v63 = v117;
  if (v116 != v117)
  {
    uint64_t v64 = v113;
    size_t v65 = v114 - (unsigned char *)v113;
    unint64_t v66 = v134;
    std::vector<int> v67 = v121;
    while (1)
    {
      uint64_t v69 = *(uint64_t **)v62;
      uint64_t v68 = (uint64_t *)*((void *)v62 + 1);
      if (a3 != 1 || (char *)v68 - (char *)v69 != v65 || memcmp(*(const void **)v62, v64, v65))
      {
        if (v69 == v68) {
          goto LABEL_171;
        }
        char v70 = 1;
        unint64_t v71 = v69;
        do
        {
          uint64_t v72 = *v71++;
          v70 &= v66[v72] == v67[v72];
        }
        while (v71 != v68);
        if (v70)
        {
LABEL_171:
          uint64_t v73 = 0;
          char v74 = 1;
          do
          {
            uint64_t v75 = v69;
            if (v69 != v68)
            {
              uint64_t v75 = v69;
              while (*v75 != v73)
              {
                if (++v75 == v68)
                {
                  uint64_t v75 = v68;
                  break;
                }
              }
            }
            BOOL v76 = v75 != v68 || v66[v73] == 1;
            v74 &= v76;
            ++v73;
          }
          while (v73 != 5);
          if (v74)
          {
            std::string::operator=(&v120, &__str);
            std::string::operator=(&v119, &v141);
            goto LABEL_212;
          }
          uint64_t v77 = 0;
          char v78 = 1;
          do
          {
            uint64_t v79 = v69;
            if (v69 != v68)
            {
              uint64_t v79 = v69;
              while (*v79 != v77)
              {
                if (++v79 == v68)
                {
                  uint64_t v79 = v68;
                  break;
                }
              }
            }
            BOOL v80 = v79 != v68 || v67[v77] == 1;
            v78 &= v80;
            ++v77;
          }
          while (v77 != 5);
          if (v78) {
            break;
          }
        }
      }
      v62 += 24;
      if (v62 == v63) {
        goto LABEL_212;
      }
    }
    std::string::operator=(&v120, &v141);
    std::string::operator=(&v119, &__str);
  }
LABEL_212:
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v82 = v97;
    if (v120.__r_.__value_.__l.__size_)
    {
      if (a3 != 33)
      {
        std::string::__init_copy_ctor_external(&v160, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
        goto LABEL_238;
      }
LABEL_218:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = __str;
      }
      memset(&v160, 0, sizeof(v160));
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      v152.__r_.__value_.__s.__data_[8] = 0;
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v160.__r_.__value_.__l.__size_ = v160.__r_.__value_.__r.__words[0];
      v160.__r_.__value_.__r.__words[2] = v160.__r_.__value_.__r.__words[0] + 24;
      v160.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v160.__r_.__value_.__r.__words[2], (long long *)&v156, (long long *)&__s, (std::string *)v160.__r_.__value_.__l.__data_);
      Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(v82, (uint64_t *)&v160, a2);
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __str.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v160, size + 9);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int8x8_t v85 = &v160;
      }
      else {
        int8x8_t v85 = (std::string *)v160.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint8x8_t v86 = &__str;
        }
        else {
          uint8x8_t v86 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v85, v86, size);
      }
      strcpy((char *)v85 + size, "_negative");
      Espresso::MILTranslator::LayerTranslator::GetUniqueLayerAndBlobNames((uint64_t)&v156, v82, (uint64_t)&v160);
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v160.__r_.__value_.__l.__data_);
      }
      v160.__r_.__value_.__r.__words[2] = 897988541;
      LOBYTE(v161) = 0;
      *(void *)((char *)&v162 + 4) = 0;
      v160.__r_.__value_.__r.__words[0] = 1;
      v160.__r_.__value_.__l.__size_ = 3212836864;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v158, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v158 = __str;
      }
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v154, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v154 = __s;
      }
      uint64_t v88 = *(void *)(v82 + 40);
      std::string::basic_string[abi:ne180100]<0>(&v152, "elementwise");
      uint64_t v107 = 0;
      long long v108 = 0;
      int v109 = 0;
      uint64_t v107 = (std::string *)operator new(0x18uLL);
      long long v108 = v107;
      int v109 = v107 + 1;
      long long v108 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v109, (long long *)&v158, (long long *)&v159, v107);
      uint64_t v104 = 0;
      unint64_t v105 = 0;
      double v106 = 0;
      unint64_t v100 = &v104;
      char v101 = 0;
      uint64_t v104 = operator new(0x18uLL);
      unint64_t v105 = v104;
      double v106 = (char *)v104 + 24;
      unint64_t v105 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v106, (long long *)&v154, (long long *)&v155, (std::string *)v104);
      uint64_t v89 = MIL::IRObject::GetLocation(a2);
      Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v110, v88, (uint64_t)&v152, (uint64_t)&v156, (uint64_t)&v160, (uint64_t)&v107, (uint64_t *)&v104, v89);
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
      unint64_t v100 = &v104;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
      uint64_t v104 = &v107;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      uint64_t v90 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v91 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v91 = v141.__r_.__value_.__l.__size_;
      }
      std::string::size_type v92 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v92 = v119.__r_.__value_.__l.__size_;
      }
      uint64_t v93 = &v119;
      if (v91 != v92) {
        goto LABEL_296;
      }
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v94 = &v119;
      }
      else {
        long long v94 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v141.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v141.__r_.__value_.__l.__data_, v94, v141.__r_.__value_.__l.__size_))
        {
LABEL_294:
          uint64_t v93 = &v119;
LABEL_296:
          std::string::operator=(v93, &__s);
          if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v152, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
          }
          else {
            std::string v152 = v120;
          }
          if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v153, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
          }
          else {
            std::string v153 = v119;
          }
          uint64_t v107 = 0;
          long long v108 = 0;
          int v109 = 0;
          uint64_t v104 = &v107;
          LOBYTE(v105) = 0;
          uint64_t v107 = (std::string *)operator new(0x30uLL);
          long long v108 = v107;
          int v109 = v107 + 2;
          long long v108 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v109, (long long *)&v152, (long long *)&v154, v107);
          std::string::basic_string[abi:ne180100]<0>(&v104, "");
          std::string::basic_string[abi:ne180100]<0>(&v100, "");
          Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&v103, v82, a2, 0, (uint64_t *)&v107, (uint64_t)&v104, (uint64_t)&v100, 1.0);
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v103.__r_.__value_.__l.__data_);
          }
          if (v102 < 0) {
            operator delete(v100);
          }
          if (SHIBYTE(v106) < 0) {
            operator delete(v104);
          }
          uint64_t v104 = &v107;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v104);
          for (uint64_t n = 0; n != -6; n -= 3)
          {
            if (SHIBYTE(v153.__r_.__value_.__r.__words[n + 2]) < 0) {
              operator delete(*(void **)((char *)&v152 + n * 8 + 24));
            }
          }
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v156.__r_.__value_.__l.__data_);
          }
          goto LABEL_320;
        }
      }
      else if (*((unsigned char *)&v141.__r_.__value_.__s + 23))
      {
        int v95 = &v141;
        while (v95->__r_.__value_.__s.__data_[0] == v94->__r_.__value_.__s.__data_[0])
        {
          int v95 = (std::string *)((char *)v95 + 1);
          long long v94 = (std::string *)((char *)v94 + 1);
          if (!--v90) {
            goto LABEL_295;
          }
        }
        goto LABEL_294;
      }
LABEL_295:
      uint64_t v93 = &v120;
      goto LABEL_296;
    }
  }
  else
  {
    uint64_t v82 = v97;
    if (*((unsigned char *)&v120.__r_.__value_.__s + 23))
    {
      if (a3 != 33)
      {
        std::string v160 = v120;
LABEL_238:
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v161, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v161 = *(_OWORD *)&v119.__r_.__value_.__l.__data_;
          *(void *)&long long v162 = *((void *)&v119.__r_.__value_.__l + 2);
        }
        memset(&v156, 0, sizeof(v156));
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
        v152.__r_.__value_.__s.__data_[8] = 0;
        v156.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
        v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
        v156.__r_.__value_.__r.__words[2] = v156.__r_.__value_.__r.__words[0] + 48;
        v156.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156.__r_.__value_.__r.__words[2], (long long *)&v160, (long long *)((char *)&v162 + 8), (std::string *)v156.__r_.__value_.__l.__data_);
        std::string::basic_string[abi:ne180100]<0>(&v152, "");
        std::string::basic_string[abi:ne180100]<0>(&v158, "");
        Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(&v112, v82, a2, a3, (uint64_t *)&v156, (uint64_t)&v152, (uint64_t)&v158, 1.0);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
        for (iuint64_t i = 0; ii != -48; ii -= 24)
        {
          if (*((char *)&v162 + ii + 7) < 0) {
            operator delete(*(void **)((char *)&v160 + ii + 24));
          }
        }
        goto LABEL_320;
      }
      goto LABEL_218;
    }
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v160, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
  }
  else {
    std::string v160 = v141;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v161, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v161 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *(void *)&long long v162 = *((void *)&__str.__r_.__value_.__l + 2);
  }
  memset(&v156, 0, sizeof(v156));
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
  v152.__r_.__value_.__s.__data_[8] = 0;
  v156.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  v156.__r_.__value_.__l.__size_ = v156.__r_.__value_.__r.__words[0];
  v156.__r_.__value_.__r.__words[2] = v156.__r_.__value_.__r.__words[0] + 48;
  v156.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v156.__r_.__value_.__r.__words[2], (long long *)&v160, (long long *)((char *)&v162 + 8), (std::string *)v156.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v152, "");
  std::string::basic_string[abi:ne180100]<0>(&v158, "");
  Espresso::MILTranslator::LayerTranslator::AddElementWiseBinaryBroadcast(&v99, v82, a2, a3, (uint64_t *)&v156, (uint64_t)&v152, (uint64_t)&v158);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v152.__r_.__value_.__l.__data_);
  }
  v152.__r_.__value_.__r.__words[0] = (std::string::size_type)&v156;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v152);
  for (juint64_t j = 0; jj != -48; jj -= 24)
  {
    if (*((char *)&v162 + jj + 7) < 0) {
      operator delete(*(void **)((char *)&v160 + jj + 24));
    }
  }
LABEL_320:
  if (v113)
  {
    uint64_t v114 = v113;
    operator delete(v113);
  }
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v119.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  uint64_t v50 = v134;
  if (v134)
  {
    v135 = v134;
    goto LABEL_330;
  }
LABEL_331:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (v143) {
    nitro::nitro_function::nitro_function(v143);
  }
  if (v145) {
    nitro::nitro_function::nitro_function(v145);
  }
  if (__s2)
  {
    v147 = __s2;
    operator delete(__s2);
  }
  if (__s1)
  {
    v150 = __s1;
    operator delete(__s1);
  }
}

void sub_19216B2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (*(char *)(v72 - 233) < 0) {
    operator delete(*(void **)(v72 - 256));
  }
  std::pair<std::string const,std::string>::~pair((uint64_t)&STACK[0x2E0]);
  if (a33) {
    operator delete(a33);
  }
  *(void *)(v72 - 224) = &a36;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 224));
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (STACK[0x248]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x248]);
  }
  if (STACK[0x258]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x258]);
  }
  char v74 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v75;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::analysis_pass_graph_coloring,std::allocator<Espresso::analysis_pass_graph_coloring>,std::unordered_map<std::string,int>,std::vector<unsigned long>,void>(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = operator new(0x60uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *unint64_t v6 = &unk_1EE388A78;
  void v6[3] = &unk_1EE362848;
  std::unordered_map<std::string,int>::unordered_map((uint64_t)(v6 + 4), a2);
  v6[9] = 0;
  v6[10] = 0;
  v6[11] = 0;
  float result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v6 + 9, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

void sub_19216BAEC(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19216BB7C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19216BBF8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  float result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::unordered_map<std::string,int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_19216BD74(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19216BD88(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,int> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  uint64_t v15 = (std::string *)(v13 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v13 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v13 + 10) = *(_DWORD *)(a3 + 24);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  size_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t v13 = *v23;
LABEL_41:
    *size_t v23 = v13;
    goto LABEL_42;
  }
  *(void *)uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*(void *)v13)
  {
    unint64_t v24 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    size_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_19216BFE8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    float result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19216C06C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddElementWiseBinary(std::string *a1, uint64_t a2, const MIL::IROperation *a3, unsigned int a4, uint64_t *a5, uint64_t a6, uint64_t a7, float a8)
{
  *(void *)&long long v51 = *MEMORY[0x1E4F143B8];
  int v16 = *(char *)(a6 + 23);
  if (v16 < 0)
  {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    if (*(char *)(a6 + 23) < 0)
    {
      if (*(void *)(a6 + 8)) {
        goto LABEL_3;
      }
    }
    else if (*(unsigned char *)(a6 + 23))
    {
      goto LABEL_3;
    }
  }
  else
  {
    std::string v50 = *(std::string *)a6;
    if ((_BYTE)v16)
    {
LABEL_3:
      float v47 = 0;
      long long v48 = 0;
      float v49 = 0;
      unint64_t v39 = (unint64_t)&v47;
      LOBYTE(v40) = 0;
      float v47 = (std::string *)operator new(0x18uLL);
      long long v48 = v47;
      float v49 = v47 + 1;
      long long v48 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v49, (long long *)&v50, &v51, v47);
      goto LABEL_7;
    }
  }
  (*(void (**)(std::string **__return_ptr, const MIL::IROperation *))(*(void *)a3 + 200))(&v47, a3);
LABEL_7:
  if (*(char *)(a7 + 23) < 0)
  {
    if (*(void *)(a7 + 8)) {
      goto LABEL_9;
    }
LABEL_11:
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v46, a3);
    goto LABEL_12;
  }
  if (!*(unsigned char *)(a7 + 23)) {
    goto LABEL_11;
  }
LABEL_9:
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a2 + 168), a7, (uint64_t)&v46);
LABEL_12:
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a2, a5, a3);
  uint64_t v17 = 0;
  uint64_t v41 = 0x358637BD00000000;
  int v42 = 0;
  char v43 = 0;
  int v44 = 0;
  int v45 = 0;
  unint64_t v39 = a4;
  float v40 = a8;
  {
    if (++v17 == 6) {
      goto LABEL_17;
    }
  }
LABEL_17:
    goto LABEL_28;
  uint64_t v19 = 0;
  {
    if (++v19 == 3) {
      goto LABEL_23;
    }
  }
LABEL_23:
  {
LABEL_28:
    uint64_t v27 = *(void *)(a2 + 40);
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    uint64_t Location = MIL::IRObject::GetLocation(a3);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v37, v27, (uint64_t)__p, (uint64_t)&v46, (uint64_t)&v39, a5, (uint64_t *)&v47, 14, Location);
    uint64_t v26 = v38;
    if (!v38) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v21 = *(void *)(a2 + 40);
  if (a4 != 101)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
    uint64_t v30 = MIL::IRObject::GetLocation(a3);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v31, v21, (uint64_t)__p, (uint64_t)&v46, (uint64_t)&v39, (uint64_t)a5, (uint64_t *)&v47, v30);
    uint64_t v26 = v32;
    if (!v32) {
      goto LABEL_30;
    }
LABEL_29:
    nitro::nitro_function::nitro_function(v26);
    goto LABEL_30;
  }
  uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v21 + 200), (unsigned __int8 *)(*a5 + 24));
  if (!v22) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v23 = *((_DWORD *)v22 + 10);
  uint64_t v24 = *(void *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "elementwise");
  uint64_t v25 = MIL::IRObject::GetLocation(a3);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(&v33, v24, (uint64_t)__p, (uint64_t)&v46, (uint64_t)&v39, a5, (uint64_t *)&v47, v23, v25);
  uint64_t v26 = v34;
  if (v34) {
    goto LABEL_29;
  }
LABEL_30:
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v48 == v47) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a1, v47->__r_.__value_.__l.__data_, v47->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v29 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  unint64_t v39 = (unint64_t)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
}

void sub_19216C460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  a23 = v35 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  int v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::elementwise_params>(a1, a2, a3, a4, a5, (uint64_t *)a6, a7, *((_DWORD *)v16 + 10), a8);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void E5RT::SurfaceDescriptor::CreateSurfaceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      memset(__p, 0, sizeof(__p));
      operator new();
    }
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "CreateSurfaceDescriptor");
  std::string::basic_string[abi:ne180100]<0>(v4, "Invalid surface dimensions. Specified width or height must not be 0.");
  E5RT::Status::Status(v5, 1, v4);
  E5RT::E5RTError::E5RTError(exception, __p, v5);
}

{
  void *exception;
  void v4[3];
  unsigned char v5[8];
  void *__p[3];

  if (a2)
  {
    if (a3)
    {
      memset(__p, 0, sizeof(__p));
      operator new();
    }
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "CreateSurfaceDescriptor");
  std::string::basic_string[abi:ne180100]<0>(v4, "Invalid surface dimensions. Specified width or height must not be 0.");
  E5RT::Status::Status(v5, 1, v4);
  E5RT::E5RTError::E5RTError(exception, __p, v5);
}

void sub_19216C75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v10, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::SurfaceDescriptorImpl>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_19216C798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = v22;
  MEMORY[0x192FF16B0](v23, 0x1010C40037D6C11);
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19216C820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v19);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t E5RT::SurfaceDescriptorImpl::SurfaceDescriptorImpl(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 24) = a6;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v11 = *(const void **)a5;
  uint64_t v10 = *(void *)(a5 + 8);
  int64_t v12 = v10 - *(void *)a5;
  if (v10 != *(void *)a5)
  {
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(v10 - *(void *)a5);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    unint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  if (a2 >= 0x22)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "GetSurfaceFormatPlaneCount");
    std::string::basic_string[abi:ne180100]<0>(v22, "Invalid surface format");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(exception, v24, v23);
  }
  uint64_t v15 = qword_192DB8D58[a2];
  *(void *)(a1 + 16) = v15;
  uint64_t v16 = *(void *)(a5 + 8);
  if (*(void *)a5 != v16 && v15 != (v16 - *(void *)a5) >> 3)
  {
    uint64_t v19 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v22, "Invalid custom per row stride. Length of custom strides is not equal to plane count.");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(v19, v24, v23);
  }
  if (a6 < 2)
  {
    if (E5RT::IsMultiSliceFormat(a2))
    {
      unint64_t v20 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v22, "Cannot specify slices < 2 for multi slice format.");
      E5RT::Status::Status(v23, 1, v22);
      E5RT::E5RTError::E5RTError(v20, v24, v23);
    }
  }
  else if (!E5RT::IsMultiSliceFormat(a2))
  {
    uint64_t v17 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v24, "SurfaceDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v22, "Cannot specify slices > 1 for non-multi slice format.");
    E5RT::Status::Status(v23, 1, v22);
    E5RT::E5RTError::E5RTError(v17, v24, v23);
  }
  return a1;
}

void sub_19216CB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      uint64_t v27 = *v23;
      if (*v23)
      {
        *(void *)(v22 + 48) = v27;
        operator delete(v27);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

BOOL E5RT::IsMultiSliceFormat(unsigned int a1)
{
  return a1 > 0x1F;
}

uint64_t E5RT::TensorDescriptorImpl::TensorDescriptorImpl(uint64_t a1, uint64_t *a2, E5RT::TensorDataType *a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 48) = 0u;
  BOOL v6 = (void **)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v7 = (void **)(a1 + 24);
  size_t v8 = (E5RT::TensorDataType::Impl **)(a1 + 72);
  *(_OWORD *)a1 = 0u;
  E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a3);
  *(void *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = a4;
  *(void *)(a1 + 128) = 0;
  LODWORD(a4) = E5RT::TensorDataType::GetElementSize(v8);
  uint64_t v39 = 1;
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  int64_t v12 = v11 - *a2;
  unint64_t v13 = v12 >> 3;
  unint64_t v14 = *(unsigned char **)(a1 + 24);
  if (v12 >> 3 <= (unint64_t)((uint64_t)(*(void *)(a1 + 40) - (void)v14) >> 3)) {
    goto LABEL_13;
  }
  if (v12 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = *(unsigned char **)(a1 + 32);
  uint64_t v16 = (char *)operator new(v12);
  uint64_t v17 = v15 - v14;
  BOOL v18 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v19 = v18;
  if (v15 != v14)
  {
    if ((unint64_t)(v17 - 8) < 0x58)
    {
      uint64_t v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v28 = *((void *)v15 - 1);
        v15 -= 8;
        *((void *)v19 - 1) = v28;
        v19 -= 8;
      }
      while (v15 != v14);
      goto LABEL_11;
    }
    uint64_t v19 = &v16[(v15 - v14) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v15 - &v16[v17 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v20 = v17 >> 3;
    unint64_t v21 = ((unint64_t)(v17 - 8) >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v23 = &v15[-v22];
    uint64_t v19 = &v18[-v22];
    uint64_t v24 = &v16[8 * v20 - 16];
    int v25 = (long long *)(v15 - 16);
    uint64_t v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v27 = *v25;
      *((_OWORD *)v24 - 1) = *(v25 - 1);
      *(_OWORD *)uint64_t v24 = v27;
      v24 -= 32;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    uint64_t v15 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v18;
  *(void *)(a1 + 40) = &v16[8 * v13];
  if (v14) {
    operator delete(v14);
  }
LABEL_13:
  std::vector<E5RT::TensorDimensionImpl>::reserve((char **)a1, v13);
  a4 = a4;
  *(void *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = a4;
  *(unsigned char *)(a1 + 104) = 1;
  if (v11 != v10)
  {
    uint64_t v29 = a2[1];
    if (v29 == *a2)
    {
      int v32 = 1;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 1;
      int v32 = 1;
      do
      {
        uint64_t v33 = v31 * a4;
        if (v32) {
          a4 = v33;
        }
        else {
          a4 = 0x7FFFFFFFFFFFFFFFLL;
        }
        uint64_t v34 = *(void *)(v29 - 8);
        v29 -= 8;
        uint64_t v39 = v34;
        uint64_t v35 = *(char **)a1;
        E5RT::TensorDimensionImpl::TensorDimensionImpl(v38, v30, v34, a4);
        std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, (uint64_t)v35, v38);
        E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v38);
        std::vector<unsigned long>::insert(v7, *v7, (char *)&v39);
        char v36 = *v6;
        v38[0].n128_u64[0] = a4;
        std::vector<long>::insert(v6, v36, v38);
        uint64_t v31 = v39;
        *(void *)(a1 + 88) *= v39;
        int v32 = *(unsigned __int8 *)(a1 + 104);
        if (*(unsigned char *)(a1 + 104) && v31 == -1)
        {
          int v32 = 0;
          *(unsigned char *)(a1 + 104) = 0;
        }
        ++v30;
      }
      while (v29 != *a2);
    }
    *(void *)(a1 + 96) = **(void **)(a1 + 48) * **(void **)(a1 + 24);
    if (!v32)
    {
      *(void *)(a1 + 88) = -1;
      *(void *)(a1 + 96) = -1;
    }
  }
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

void sub_19216CEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, E5RT::TensorDataType *a10, char a11)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](a9);
  E5RT::TensorDataType::~TensorDataType(a10);
  uint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v11 + 56) = v15;
    operator delete(v15);
    uint64_t v16 = *v12;
    if (!*v12)
    {
LABEL_3:
      std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v11);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v16 = *v12;
    if (!*v12) {
      goto LABEL_3;
    }
  }
  *(void *)(v11 + 32) = v16;
  operator delete(v16);
  std::vector<E5RT::TensorDimensionImpl>::~vector[abi:ne180100]((void **)v11);
  _Unwind_Resume(a1);
}

void E5RT::TensorDescriptor::CreateTensorDescriptorWithStridesSizeComponentAxis(void *a1, void *a2, int a3, E5RT::TensorDataType::Impl **this)
{
  E5RT::TensorDataType::GetNumComponents(this);
  E5RT::TensorDataType::GetElementSize(this);
  if (a2[1] - *a2 == a1[1] - *a1) {
    operator new();
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v10, "CreateTensorDescriptorWithStridesSizeComponentAxis");
  std::string::basic_string[abi:ne180100]<0>(v8, "Stride and length must be specified for all dimensions.");
  E5RT::Status::Status(v9, 1, v8);
  E5RT::E5RTError::E5RTError(exception, v10, v9);
}

void sub_19216D0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, E5RT::TensorDescriptorImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, E5RT::TensorDescriptorImpl *a14)
{
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a9);
  MEMORY[0x192FF16B0](v14, 0xA1C40BD48D6D6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_19216D10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<E5RT::TensorDescriptorImpl>::~unique_ptr[abi:ne180100]((E5RT::TensorDescriptorImpl **)va);
  _Unwind_Resume(a1);
}

void sub_19216D120(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x192FF16B0](v2, 0x10B0C40553E7BE0);
  _Unwind_Resume(a1);
}

void sub_19216D148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::Impl::GetElementSize(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetElementSize");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid element size.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_192DB9826[v1];
}

void sub_19216D278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::GetElementSize(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetElementSize(this[1]);
}

uint64_t E5RT::TensorDataType::Impl::GetNumComponents(E5RT::TensorDataType::Impl *this)
{
  uint64_t v1 = *((int *)this + 1);
  if (v1 >= 0xC)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "GetNumComponents");
    std::string::basic_string[abi:ne180100]<0>(v4, "Invalid component pack.");
    E5RT::Status::Status(v5, 6, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  return byte_192DB981A[v1];
}

void sub_19216D3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDataType::GetNumComponents(E5RT::TensorDataType::Impl **this)
{
  return E5RT::TensorDataType::Impl::GetNumComponents(this[1]);
}

void *E5RT::OperandDescriptor::OperandDescriptor(void *this)
{
  *this = &unk_1EE325A00;
  return this;
}

{
  *this = &unk_1EE325A00;
  return this;
}

uint64_t E5RT::TensorDescriptorImpl::TensorDescriptorImpl(uint64_t a1, uint64_t *a2, void *a3, E5RT::TensorDataType *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 24) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 40) = v16;
    bzero(v15, v14 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a1 + 32) = v16;
  }
  uint64_t v18 = *a2;
  uint64_t v17 = a2[1];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *(void *)(a1 + 48) = v20;
    unint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 64) = v21;
    bzero(v20, v19 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a1 + 56) = v21;
  }
  uint64_t v22 = (E5RT::TensorDataType::Impl **)E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a4);
  *(void *)(a1 + 96) = a5;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = a6;
  LODWORD(a5) = E5RT::TensorDataType::GetElementSize(v22);
  uint64_t v24 = *a2;
  uint64_t v23 = a2[1];
  unint64_t v25 = (v23 - *a2) >> 3;
  std::vector<E5RT::TensorDimensionImpl>::reserve((char **)a1, v25);
  *(void *)(a1 + 88) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  if (v23 == v24)
  {
    unint64_t ElementSize = E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType::Impl **)a4);
    unint64_t v38 = *(void *)(a1 + 96);
    if (v38) {
      goto LABEL_23;
    }
LABEL_30:
    *(void *)(a1 + 96) = ElementSize;
    if (*(unsigned char *)(a1 + 104)) {
      goto LABEL_25;
    }
LABEL_31:
    *(void *)(a1 + 88) = -1;
    *(void *)(a1 + 96) = -1;
    goto LABEL_25;
  }
  uint64_t v26 = 0;
  unint64_t v27 = v25 - 1;
  int v28 = 1;
  uint64_t v29 = 1;
  a5 = a5;
  do
  {
    uint64_t v30 = *(void *)(*a3 + 8 * v27);
    if (v30 <= 0)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v45, "Negative strides not supported yet.");
      E5RT::Status::Status(v46, 1, v45);
      E5RT::E5RTError::E5RTError(exception, v44, v46);
    }
    if (v28)
    {
      unint64_t v31 = v29 * a5;
      if (a5 == 0x7FFFFFFFFFFFFFFFLL) {
        unint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    else
    {
      unint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
      if (v30 != 0x7FFFFFFFFFFFFFFFLL)
      {
        int v42 = __cxa_allocate_exception(0x18uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
        std::string::basic_string[abi:ne180100]<0>(v45, "Invalid stride specified. Stride must be unknown if any inner dimension length is unknown.");
        E5RT::Status::Status(v46, 1, v45);
        E5RT::E5RTError::E5RTError(v42, v44, v46);
      }
    }
    if (v31 > v30)
    {
      uint64_t v41 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v45, "Specified stride is insufficient to pack elements along axis.");
      E5RT::Status::Status(v46, 1, v45);
      E5RT::E5RTError::E5RTError(v41, v44, v46);
    }
    a5 = *(void *)(*a3 + 8 * v27);
    uint64_t v29 = *(void *)(*a2 + 8 * v27);
    int v32 = *(char **)a1;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(v44, v26, v29, a5);
    std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, (uint64_t)v32, v44);
    E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v44);
    uint64_t v33 = *(void **)(a1 + 24);
    uint64_t v34 = v27;
    v33[v34] = v29;
    uint64_t v35 = *(void **)(a1 + 48);
    v35[v34] = a5;
    *(void *)(a1 + 88) *= v29;
    int v28 = *(unsigned __int8 *)(a1 + 104);
    if (v29 == -1 && v28 != 0)
    {
      int v28 = 0;
      *(unsigned char *)(a1 + 104) = 0;
    }
    --v27;
    ++v26;
  }
  while (v27 < v25);
  unint64_t ElementSize = *v35 * *v33;
  unint64_t v38 = *(void *)(a1 + 96);
  if (!v38) {
    goto LABEL_30;
  }
LABEL_23:
  if (v38 < ElementSize)
  {
    char v43 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v44, "TensorDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v45, "size must be big enough to host the tensor");
    E5RT::Status::Status(v46, 1, v45);
    E5RT::E5RTError::E5RTError(v43, v44, v46);
  }
  if (!*(unsigned char *)(a1 + 104)) {
    goto LABEL_31;
  }
LABEL_25:
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

{
  void **v12;
  void **v13;
  E5RT::TensorDataType::Impl **v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unsigned char *v19;
  unsigned char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  long long *v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unsigned char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *exception;
  void *v46;
  E5RT::TensorDataType *v47;
  unsigned int ElementSize;
  __n128 v49[2];
  void v50[3];
  char v51[8];
  uint64_t v52;

  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v12 = (void **)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v13 = (void **)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v14 = (E5RT::TensorDataType::Impl **)E5RT::TensorDataType::TensorDataType((E5RT::TensorDataType *)(a1 + 72), a4);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 96) = a5;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = a6;
  *(void *)(a1 + 128) = 0;
  unint64_t ElementSize = E5RT::TensorDataType::GetElementSize(v14);
  float v47 = a4;
  uint64_t v52 = 1;
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v17 = v15 - *a2;
  uint64_t v18 = v17 >> 3;
  uint64_t v19 = *(unsigned char **)(a1 + 24);
  if (v17 >> 3 <= (unint64_t)((uint64_t)(*(void *)(a1 + 40) - (void)v19) >> 3)) {
    goto LABEL_13;
  }
  if (v17 < 0) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v20 = *(unsigned char **)(a1 + 32);
  unint64_t v21 = (char *)operator new(v17);
  uint64_t v22 = v20 - v19;
  uint64_t v23 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v24 = v23;
  if (v20 != v19)
  {
    if ((unint64_t)(v22 - 8) < 0x58)
    {
      uint64_t v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v33 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v24 - 1) = v33;
        v24 -= 8;
      }
      while (v20 != v19);
      goto LABEL_11;
    }
    uint64_t v24 = &v21[(v20 - v19) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v20 - &v21[v22 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_10;
    }
    unint64_t v25 = v22 >> 3;
    uint64_t v26 = ((unint64_t)(v22 - 8) >> 3) + 1;
    unint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    int v28 = &v20[-v27];
    uint64_t v24 = &v23[-v27];
    uint64_t v29 = &v21[8 * v25 - 16];
    uint64_t v30 = (long long *)(v20 - 16);
    unint64_t v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int v32 = *v30;
      *((_OWORD *)v29 - 1) = *(v30 - 1);
      *(_OWORD *)uint64_t v29 = v32;
      v29 -= 32;
      v30 -= 2;
      v31 -= 4;
    }
    while (v31);
    uint64_t v20 = v28;
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)(a1 + 24) = v24;
  *(void *)(a1 + 32) = v23;
  *(void *)(a1 + 40) = &v21[8 * v18];
  if (v19) {
    operator delete(v19);
  }
LABEL_13:
  std::vector<E5RT::TensorDimensionImpl>::reserve((char **)a1, v18);
  *(void *)(a1 + 88) = 1;
  *(unsigned char *)(a1 + 104) = 1;
  if (v15 == v16)
  {
    int v42 = E5RT::TensorDataType::GetElementSize((E5RT::TensorDataType::Impl **)v47);
    char v43 = *(void *)(a1 + 96);
    if (v43) {
      goto LABEL_24;
    }
LABEL_29:
    *(void *)(a1 + 96) = v42;
    if (*(unsigned char *)(a1 + 104)) {
      goto LABEL_26;
    }
LABEL_30:
    *(void *)(a1 + 88) = -1;
    *(void *)(a1 + 96) = -1;
    goto LABEL_26;
  }
  uint64_t v34 = 0;
  uint64_t v35 = v18 - 1;
  char v36 = 1;
  uint64_t v37 = ElementSize;
  do
  {
    unint64_t v38 = *(void *)(*a3 + 8 * v35);
    if (!v38)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v49, "TensorDescriptorImpl");
      std::string::basic_string[abi:ne180100]<0>(v50, "Axis alignment cannot be 0.");
      E5RT::Status::Status(v51, 1, v50);
      E5RT::E5RTError::E5RTError(exception, v49, v51);
    }
    if (v36) {
      uint64_t v37 = (v38 + v52 * v37 - 1) / v38 * v38;
    }
    else {
      uint64_t v37 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v52 = *(void *)(*a2 + 8 * v35);
    uint64_t v39 = *(char **)a1;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(v49, v34, v52, v37);
    std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>((unint64_t *)a1, (uint64_t)v39, v49);
    E5RT::TensorDimensionImpl::~TensorDimensionImpl((E5RT::TensorDimensionImpl *)v49);
    std::vector<unsigned long>::insert(v13, *v13, (char *)&v52);
    float v40 = *v12;
    v49[0].n128_u64[0] = v37;
    std::vector<long>::insert(v12, v40, v49);
    uint64_t v41 = v52;
    *(void *)(a1 + 88) *= v52;
    char v36 = *(unsigned __int8 *)(a1 + 104);
    if (*(unsigned char *)(a1 + 104) && v41 == -1)
    {
      char v36 = 0;
      *(unsigned char *)(a1 + 104) = 0;
    }
    --v35;
    ++v34;
  }
  while (v35 < v18);
  int v42 = *(void *)*v12 * *(void *)*v13;
  char v43 = *(void *)(a1 + 96);
  if (!v43) {
    goto LABEL_29;
  }
LABEL_24:
  if (v43 < v42)
  {
    std::string v46 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v49, "TensorDescriptorImpl");
    std::string::basic_string[abi:ne180100]<0>(v50, "size must be big enough to host the tensor");
    E5RT::Status::Status(v51, 1, v50);
    E5RT::E5RTError::E5RTError(v46, v49, v51);
  }
  if (!*(unsigned char *)(a1 + 104)) {
    goto LABEL_30;
  }
LABEL_26:
  E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(a1);
  return a1;
}

void sub_19216D8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, E5RT::TensorDataType *a11, void **a12, void **a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v29 = (std::__shared_weak_count *)v27[16];
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  E5RT::TensorDataType::~TensorDataType(a11);
  uint64_t v30 = *a12;
  if (*a12)
  {
    v27[7] = v30;
    operator delete(v30);
    unint64_t v31 = *a13;
    if (!*a13)
    {
LABEL_6:
      int v32 = (char *)*v27;
      if (!*v27) {
        goto LABEL_7;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v31 = *a13;
    if (!*a13) {
      goto LABEL_6;
    }
  }
  v27[4] = v31;
  operator delete(v31);
  int v32 = (char *)*v27;
  if (!*v27) {
LABEL_7:
  }
    _Unwind_Resume(a1);
LABEL_10:
  uint64_t v33 = (char *)v27[1];
  uint64_t v34 = v32;
  if (v33 != v32)
  {
    uint64_t v35 = v33 - 40;
    char v36 = v33 - 40;
    uint64_t v37 = v33 - 40;
    do
    {
      unint64_t v38 = *(void (***)(char *))v37;
      v37 -= 40;
      (*v38)(v36);
      v35 -= 40;
      BOOL v39 = v36 == v32;
      char v36 = v37;
    }
    while (!v39);
    uint64_t v34 = *v27;
  }
  v27[1] = v32;
  operator delete(v34);
  _Unwind_Resume(a1);
}

__n128 *std::vector<E5RT::TensorDimensionImpl>::emplace<E5RT::TensorDimensionImpl>(unint64_t *a1, uint64_t a2, __n128 *a3)
{
  unint64_t v6 = *a1;
  int8x8_t v5 = (__n128 *)a1[1];
  uint64_t v7 = (uint64_t)(a2 - *a1) / 40;
  size_t v8 = (__n128 *)(*a1 + 40 * v7);
  unint64_t v9 = a1[2];
  if ((unint64_t)v5 < v9)
  {
    if (v8 == v5)
    {
      E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)(*a1 + 40 * v7), a3);
      a1[1] = (unint64_t)&v8[2].n128_u64[1];
      return v8;
    }
    uint64_t v37 = a1 + 2;
    E5RT::TensorDimensionImpl::TensorDimensionImpl(&v33, a3);
    unint64_t v10 = a1[1];
    uint64_t v11 = (__n128 *)(v10 - 40);
    if (v10 < 0x28)
    {
      uint64_t v14 = &v8[2].n128_i8[8];
      a1[1] = v10;
      if ((__int8 *)v10 == &v8[2].n128_i8[8])
      {
LABEL_34:
        __n128 v31 = E5RT::TensorDimensionImpl::operator=(v8, &v33);
        (*(void (**)(__n128 *, __n128))v33.n128_u64[0])(&v33, v31);
        return v8;
      }
    }
    else
    {
      uint64_t v12 = (__n128 *)(v10 - 40);
      uint64_t v13 = (__n128 *)a1[1];
      do
      {
        E5RT::TensorDimensionImpl::TensorDimensionImpl(v13, v12);
        uint64_t v12 = (__n128 *)((char *)v12 + 40);
        uint64_t v13 = (__n128 *)((char *)v13 + 40);
      }
      while ((unint64_t)v12 < v10);
      uint64_t v14 = &v8[2].n128_i8[8];
      a1[1] = (unint64_t)v13;
      if ((__int8 *)v10 == &v8[2].n128_i8[8]) {
        goto LABEL_34;
      }
    }
    uint64_t v30 = 8 * ((uint64_t)(v10 - (void)v14) >> 3);
    do
    {
      E5RT::TensorDimensionImpl::operator=(v11, (__n128 *)(v6 + 40 * v7 - 40 + v30));
      uint64_t v11 = (__n128 *)((char *)v11 - 40);
      v30 -= 40;
    }
    while (v30);
    goto LABEL_34;
  }
  unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v5 - v6) >> 3) + 1;
  if (v15 > 0x666666666666666) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v6) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x333333333333333) {
    unint64_t v17 = 0x666666666666666;
  }
  else {
    unint64_t v17 = v15;
  }
  char v36 = a1 + 2;
  if (v17)
  {
    if (v17 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v18 = (char *)operator new(40 * v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  v33.n128_u64[0] = (unint64_t)v18;
  v33.n128_u64[1] = (unint64_t)&v18[40 * v7];
  unint64_t v34 = v33.n128_u64[1];
  uint64_t v35 = &v18[40 * v17];
  std::__split_buffer<E5RT::TensorDimensionImpl>::emplace_back<E5RT::TensorDimensionImpl>((uint64_t)&v33, a3);
  uint64_t v20 = 0;
  unint64_t v21 = v33.n128_u64[1];
  uint64_t v22 = (__n128 *)*a1;
  while ((__n128 *)((char *)v8 + v20) != v22)
  {
    v20 -= 40;
    __n128 v19 = E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)(v20 + v21), (__n128 *)((char *)v8 + v20));
  }
  unint64_t v23 = v21 + v20;
  v33.n128_u64[1] = v21 + v20;
  uint64_t v24 = (__n128 *)a1[1];
  unint64_t v25 = v34;
  if (v24 != v8)
  {
    uint64_t v26 = 0;
    do
    {
      __n128 v19 = E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)(v25 + v26), (__n128 *)((char *)v8 + v26));
      v26 += 40;
    }
    while ((__n128 *)((char *)v8 + v26) != v24);
    unint64_t v23 = v33.n128_u64[1];
    size_t v8 = (__n128 *)a1[1];
    v25 += v26;
  }
  unint64_t v27 = *a1;
  *a1 = v23;
  a1[1] = v25;
  int v28 = (char *)a1[2];
  a1[2] = (unint64_t)v35;
  unint64_t v34 = (unint64_t)v8;
  uint64_t v35 = v28;
  v33.n128_u64[0] = v27;
  v33.n128_u64[1] = v27;
  if (v8 != (__n128 *)v27)
  {
    do
    {
      uint64_t v29 = (void (**)(uint64_t, __n128))v8[-3].n128_u64[1];
      unint64_t v34 = (unint64_t)&v8[-3].n128_u64[1];
      (*v29)((uint64_t)&v8[-3].n128_i64[1], v19);
      size_t v8 = (__n128 *)v34;
    }
    while (v34 != v27);
    size_t v8 = (__n128 *)v33.n128_u64[0];
  }
  if (v8) {
    operator delete(v8);
  }
  return (__n128 *)v21;
}

void sub_19216DDE0(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_19216DDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void))
{
}

void sub_19216DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10)
  {
    sub_1923B639C((uint64_t)v9 + v10, v9);
    std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::__split_buffer<E5RT::TensorDimensionImpl>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 E5RT::TensorDimensionImpl::TensorDimensionImpl(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2[2].n128_u64[0];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  a1->n128_u64[0] = (unint64_t)&unk_1EE325C58;
  a1->n128_u64[1] = (unint64_t)a1;
  return result;
}

__n128 E5RT::TensorDimensionImpl::operator=(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2[2].n128_u64[0];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u64[0] = v2;
  return result;
}

void *E5RT::TensorDimensionImpl::TensorDimensionImpl(void *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  this[2] = a2;
  this[3] = a3;
  this[4] = a4;
  *this = &unk_1EE325C58;
  this[1] = this;
  return this;
}

void std::vector<E5RT::TensorDimensionImpl>::reserve(char **a1, unint64_t a2)
{
  unint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = a1[1];
    uint64_t v5 = 40 * a2;
    unint64_t v6 = (char *)operator new(40 * a2);
    uint64_t v7 = 0;
    size_t v8 = &v6[v4 - v2];
    *(void *)&long long v17 = v8;
    *((void *)&v17 + 1) = &v6[v5];
    while (&v4[v7] != v2)
    {
      v7 -= 40;
      E5RT::TensorDimensionImpl::TensorDimensionImpl((__n128 *)&v8[v7], (__n128 *)&v4[v7]);
    }
    unint64_t v9 = &v8[v7];
    uint64_t v11 = *a1;
    uint64_t v10 = a1[1];
    *a1 = v9;
    *(_OWORD *)(a1 + 1) = v17;
    if (v10 != v11)
    {
      uint64_t v12 = v10 - 40;
      uint64_t v13 = v10 - 40;
      uint64_t v14 = v10 - 40;
      do
      {
        unint64_t v15 = *(void (***)(char *))v14;
        v14 -= 40;
        (*v15)(v13);
        v12 -= 40;
        BOOL v16 = v13 == v11;
        uint64_t v13 = v14;
      }
      while (!v16);
    }
    if (v11) {
      operator delete(v11);
    }
  }
}

uint64_t E5RT::TensorDescriptorImpl::ValidateUnknownDimensions(uint64_t this)
{
  if (!*(unsigned char *)(this + 104))
  {
    uint64_t v1 = *(void *)(this + 24);
    uint64_t v2 = *(void *)(this + 32) - v1;
    if (v2 < 1) {
      goto LABEL_13;
    }
    BOOL v3 = 0;
    unint64_t v4 = (unint64_t)v2 >> 3;
    uint64_t v5 = v1 - 8;
    while (1)
    {
      while (v3)
      {
        if (*(void *)(*(void *)(this + 48) + 8 * v4 - 8) != 0x7FFFFFFFFFFFFFFFLL)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v11, "ValidateUnknownDimensions");
          std::string::basic_string[abi:ne180100]<0>(v9, "Dimension strides must be unknown if any of the inner dimension lengths are unknown.");
          E5RT::Status::Status(v10, 2, v9);
          E5RT::E5RTError::E5RTError(exception, v11, v10);
        }
        if (v4 <= 1) {
          return this;
        }
        BOOL v3 = 1;
        --v4;
      }
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      BOOL v3 = v6 == -1;
      if (v4 < 2) {
        break;
      }
      --v4;
    }
    if (v6 != -1)
    {
LABEL_13:
      size_t v8 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v11, "ValidateUnknownDimensions");
      std::string::basic_string[abi:ne180100]<0>(v9, "TensorDescriptor indicates unknown shape but all dim lengths are known");
      E5RT::Status::Status(v10, 2, v9);
      E5RT::E5RTError::E5RTError(v8, v11, v10);
    }
  }
  return this;
}

void sub_19216E1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::TensorDataType::TensorDataType(void *a1)
{
  *a1 = &unk_1EE324C08;
  a1[1] = 0;
  operator new();
}

{
  *a1 = &unk_1EE324C08;
  a1[1] = 0;
  operator new();
}

{
  *a1 = &unk_1EE324C08;
  a1[1] = 0;
  operator new();
}

void sub_19216E344(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  uint64_t v4 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1000C4000313F17);
  }
  _Unwind_Resume(a1);
}

void E5RT::TensorDataType::TensorDataType(E5RT::TensorDataType *this, const E5RT::TensorDataType *a2)
{
  *(void *)this = &unk_1EE324C08;
  *((void *)this + 1) = 0;
  operator new();
}

void sub_19216E428(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v2, 0x1000C4000313F17);
  uint64_t v4 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v4) {
    MEMORY[0x192FF16B0](v4, 0x1000C4000313F17);
  }
  _Unwind_Resume(a1);
}

_DWORD *E5RT::TensorDataType::Impl::Impl(_DWORD *result, int a2, unsigned int a3)
{
  *__n128 result = a2;
  result[1] = a3;
  if (a2 == 4)
  {
    if (a3 <= 9 && ((1 << a3) & 0x207) != 0)
    {
LABEL_7:
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v6, "Impl");
      std::string::basic_string[abi:ne180100]<0>(v4, "Invalid tensor data type.");
      E5RT::Status::Status(v5, 6, v4);
      E5RT::E5RTError::E5RTError(exception, v6, v5);
    }
  }
  else if ((a2 - 2) < 2)
  {
    goto LABEL_7;
  }
  return result;
}

void sub_19216E550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

char *std::vector<unsigned long>::insert(void **a1, unsigned char *a2, char *a3)
{
  BOOL v3 = a3;
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *(void *)a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      __n128 v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        __n128 v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        __n128 v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          __n128 v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    if (v9 <= v3) {
      v3 += 8 * (a1[1] > v3);
    }
    *(void *)unint64_t v9 = *(void *)v3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    __n128 v31 = &v30[8 * v8];
    int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    __n128 v31 = (char *)(8 * v8);
    int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v53 = (char *)operator new(8 * v52);
    __n128 v31 = &v53[8 * (v52 >> 2)];
    int v32 = &v53[8 * v52];
    if (v30)
    {
      int8x8_t v54 = &v53[8 * v52];
      operator delete(v30);
      int v32 = v54;
      unint64_t v34 = (char *)*a1;
      *(void *)__n128 v31 = *(void *)v3;
      uint64_t v35 = v31 + 8;
      char v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)__n128 v31 = *(void *)v3;
  uint64_t v35 = v31 + 8;
  char v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    BOOL v39 = v9;
    char v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_61;
    }
    BOOL v39 = v9;
    char v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_61;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    BOOL v39 = &v9[-v41];
    char v36 = &v31[-v41];
    int v42 = v31 - 16;
    char v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_61:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  float v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    float v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    int v32 = v51;
    unint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_19216E934(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<long>::insert(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      __n128 v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        __n128 v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        __n128 v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          __n128 v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    __n128 v31 = &v30[8 * v8];
    int v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    __n128 v31 = (char *)(8 * v8);
    int v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v53 = (char *)operator new(8 * v52);
    __n128 v31 = &v53[8 * (v52 >> 2)];
    int v32 = &v53[8 * v52];
    if (v30)
    {
      int8x8_t v54 = &v53[8 * v52];
      operator delete(v30);
      int v32 = v54;
      unint64_t v34 = (char *)*a1;
      *(void *)__n128 v31 = *a3;
      uint64_t v35 = v31 + 8;
      char v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)__n128 v31 = *a3;
  uint64_t v35 = v31 + 8;
  char v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    BOOL v39 = v9;
    char v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    BOOL v39 = v9;
    char v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    BOOL v39 = &v9[-v41];
    char v36 = &v31[-v41];
    int v42 = v31 - 16;
    char v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  float v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    float v49 = v9;
    size_t v50 = v47 - v9;
    long long v51 = v32;
    memmove(v35, v49, v50);
    int v32 = v51;
    unint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_19216ECA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t e5rt_io_port_retain_tensor_desc(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393968;
  v4[1] = a1;
  v4[2] = a2;
  unint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_19216EDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::cpu_context_transfer_algo_t::add_context_transfer_kernels(void *a1, Espresso::net **a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v263 = *MEMORY[0x1E4F143B8];
  unsigned int v248 = a4;
  uint64_t v6 = a1[7];
  std::vector<int>::vector(&v247, (uint64_t)(*((void *)*a2 + 5) - *((void *)*a2 + 4)) >> 4);
  uint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 4);
  if (*((void *)*a2 + 5) == v8)
  {
    char v15 = *(unsigned char *)(v6 + 120);
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      int64_t v11 = *(uint64_t (****)(void))(*(void *)(*(void *)(*(void *)(v8 + v9) + 64) + 8) + 8);
      int v12 = (**v11)(v11);
      uint64_t v13 = *(uint64_t (****)(void))(*((void *)*a2 + 2) + 8);
      BOOL v14 = v12 != (**v13)(v13);
      v247.__begin_[v10] = v14;
      char v15 = *(unsigned char *)(v6 + 120) | v14;
      *(unsigned char *)(v6 + 120) = v15;
      ++v10;
      uint64_t v7 = *a2;
      uint64_t v8 = *((void *)*a2 + 4);
      v9 += 16;
    }
    while (v10 < (*((void *)*a2 + 5) - v8) >> 4);
  }
  if (!v15) {
    goto LABEL_338;
  }
  Espresso::net::get_producers_of_blobs(v7, (uint64_t)v246);
  Espresso::net::_tag_inputs_and_outputs(*a2);
  memset(v244, 0, sizeof(v244));
  int v245 = 1065353216;
  unint64_t v16 = *a2;
  unint64_t v17 = (void *)*((void *)*a2 + 29);
  uint64_t v18 = (uint64_t)*a2 + 240;
  if (v17 != (void *)v18)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v244, (uint64_t)(v17 + 4), (uint64_t)(v17 + 4));
      __n128 v19 = (void *)v17[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          __n128 v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v17[2];
          BOOL v21 = *v20 == (void)v17;
          unint64_t v17 = v20;
        }
        while (!v21);
      }
      unint64_t v17 = v20;
    }
    while (v20 != (void *)v18);
    unint64_t v16 = *a2;
  }
  Espresso::net::get_consumers_of_blobs(v16, v244, (uint64_t)v243);
  uint64_t v22 = *((void *)*a2 + 2);
  int v23 = (std::__shared_weak_count *)*((void *)*a2 + 3);
  uint64_t v241 = v22;
  v242 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = (Espresso *)(***(uint64_t (****)(void))(v22 + 8))(*(void *)(v22 + 8));
  int v240 = (int)v24;
  unint64_t v26 = *a2;
  uint64_t v27 = (*((void *)*a2 + 5) - *((void *)*a2 + 4)) >> 4;
  std::string __p = 0;
  v238 = 0;
  unint64_t v239 = 0;
  uint64_t v28 = v27;
  uint64_t v208 = v27;
  if ((int)v27 <= 0)
  {
    long long v234 = 0u;
    long long v235 = 0u;
    int v236 = 1065353216;
    long long v231 = 0u;
    long long v232 = 0u;
    int v233 = 1065353216;
    goto LABEL_75;
  }
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  do
  {
    uint64_t v31 = 0xFFFFFFFFLL;
    while (v31 == 0xFFFFFFFFLL)
    {
      if (v247.__begin_[v30]) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0xFFFFFFFFLL;
      }
LABEL_26:
      if (v28 == ++v30)
      {
        if (v31 != 0xFFFFFFFFLL)
        {
          uint64_t v41 = ((v208 << 32) - 0x100000000) | v31;
          if ((unint64_t)v29 >= v239)
          {
            uint64_t v43 = ((char *)v29 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v43 + 1) >> 61) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v44 = (uint64_t)(v239 - (void)__p) >> 2;
            if (v44 <= v43 + 1) {
              unint64_t v44 = v43 + 1;
            }
            if (v239 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v44;
            }
            if (v45) {
              unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v45);
            }
            else {
              uint64_t v46 = 0;
            }
            float v47 = (uint64_t *)(v45 + 8 * v43);
            unint64_t v48 = v45 + 8 * v46;
            *float v47 = v41;
            int v42 = v47 + 1;
            size_t v50 = (char *)__p;
            float v49 = (char *)v238;
            if (v238 != __p)
            {
              do
              {
                uint64_t v51 = *((void *)v49 - 1);
                v49 -= 8;
                *--float v47 = v51;
              }
              while (v49 != v50);
              float v49 = (char *)__p;
            }
            std::string __p = v47;
            v238 = v42;
            unint64_t v239 = v48;
            if (v49) {
              operator delete(v49);
            }
          }
          else
          {
            uint64_t *v29 = v41;
            int v42 = v29 + 1;
          }
          v238 = v42;
        }
        goto LABEL_65;
      }
    }
    if ((v31 & 0x80000000) != 0 || v247.__begin_[v30]) {
      goto LABEL_26;
    }
    uint64_t v32 = ((v30 << 32) - 0x100000000) | v31;
    if ((unint64_t)v29 >= v239)
    {
      uint64_t v33 = ((char *)v29 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v33 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v34 = (uint64_t)(v239 - (void)__p) >> 2;
      if (v34 <= v33 + 1) {
        unint64_t v34 = v33 + 1;
      }
      if (v239 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35) {
        unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v35);
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = (uint64_t *)(v35 + 8 * v33);
      uint64_t *v37 = v32;
      unint64_t v29 = v37 + 1;
      BOOL v39 = (char *)__p;
      unint64_t v38 = (char *)v238;
      if (v238 != __p)
      {
        do
        {
          uint64_t v40 = *((void *)v38 - 1);
          v38 -= 8;
          *--uint64_t v37 = v40;
        }
        while (v38 != v39);
        unint64_t v38 = (char *)__p;
      }
      std::string __p = v37;
      v238 = v29;
      unint64_t v239 = v35 + 8 * v36;
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *v29++ = v32;
    }
    v238 = v29;
    ++v30;
  }
  while (v30 != v28);
LABEL_65:
  unint64_t v52 = 0;
  long long v234 = 0u;
  long long v235 = 0u;
  int v236 = 1065353216;
  long long v231 = 0u;
  long long v232 = 0u;
  int v233 = 1065353216;
  do
  {
    uint64_t v53 = (uint64_t)*a2 + 96;
    buf.__r_.__value_.__r.__words[0] = v52;
    int8x8_t v54 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v53, v52, &buf);
    uint64_t v55 = (uint64_t)*a2 + 56;
    buf.__r_.__value_.__r.__words[0] = v52;
    uint64_t v24 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v55, v52, &buf);
    if (!v247.__begin_[v52])
    {
      unint64_t v56 = v24;
      uint64_t v58 = v54[3];
      uint64_t v57 = v54[4];
      while (v58 != v57)
      {
        uint64_t v24 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v234, v58, v58);
        v58 += 24;
      }
      uint64_t v60 = *((void *)v56 + 3);
      uint64_t v59 = *((void *)v56 + 4);
      while (v60 != v59)
      {
        uint64_t v24 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v231, v60, v60);
        v60 += 24;
      }
    }
    ++v52;
  }
  while (v52 != v28);
  unint64_t v26 = *a2;
LABEL_75:
  uint64_t v61 = (unsigned __int8 *)*((void *)v26 + 29);
  uint64_t v62 = (unsigned __int8 *)v26 + 240;
  if (v61 != (unsigned __int8 *)((char *)v26 + 240))
  {
    do
    {
      uint64_t v24 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v243, v61 + 32);
      if (!v24) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v63 = (void *)*((void *)v24 + 5);
      uint64_t v64 = (void *)*((void *)v24 + 6);
      if (v63 != v64)
      {
        while (v247.__begin_[*v63])
        {
          if (++v63 == v64) {
            goto LABEL_82;
          }
        }
        uint64_t v24 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v234, (uint64_t)(v61 + 32), (uint64_t)(v61 + 32));
      }
LABEL_82:
      size_t v65 = (unsigned __int8 *)*((void *)v61 + 1);
      if (v65)
      {
        do
        {
          unint64_t v66 = v65;
          size_t v65 = *(unsigned __int8 **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          unint64_t v66 = (unsigned __int8 *)*((void *)v61 + 2);
          BOOL v21 = *(void *)v66 == (void)v61;
          uint64_t v61 = v66;
        }
        while (!v21);
      }
      uint64_t v61 = v66;
    }
    while (v66 != v62);
  }
  std::vector<int> v67 = Espresso::espresso_os_log_subsystem(v24, v25);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v203 = *((void *)&v235 + 1);
    str_concat<std::unordered_set<std::string>>(&buf, (uint64_t *)v235);
    v204 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &buf
         : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v255 = 134218242;
    *(void *)&v255[4] = v203;
    *(_WORD *)&v255[12] = 2080;
    *(void *)&v255[14] = v204;
    _os_log_debug_impl(&dword_1920CB000, v67, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] # top_blobs_of_default_ctx_layers: %zu %s\n", v255, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v207 = v28;

  char v70 = Espresso::espresso_os_log_subsystem(v68, v69);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v205 = *((void *)&v232 + 1);
    str_concat<std::unordered_set<std::string>>(&buf, (uint64_t *)v232);
    v206 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &buf
         : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v255 = 134218242;
    *(void *)&v255[4] = v205;
    *(_WORD *)&v255[12] = 2080;
    *(void *)&v255[14] = v206;
    _os_log_debug_impl(&dword_1920CB000, v70, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] # bottom_blobs_of_default_ctx_layers: %zu %s\n", v255, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }

  int64x2_t v229 = 0uLL;
  unint64_t v230 = 0;
  v228[0] = 0;
  v228[1] = 0;
  v226[1] = 0;
  v227 = (uint64_t *)v228;
  v225 = (uint64_t *)v226;
  v226[0] = 0;
  uint64_t v73 = __p;
  v209 = v238;
  if (__p != v238)
  {
    int v74 = 0;
    v216 = (int *)(a1 + 2);
    v215 = (unsigned int *)a1 + 5;
    int v214 = v208 - 1;
    while (1)
    {
      int v75 = *v73;
      int v76 = v73[1];
      v210 = v73;
      uint64_t v77 = Espresso::espresso_os_log_subsystem(v71, v72);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109632;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v74;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v75;
        HIWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        LODWORD(buf.__r_.__value_.__r.__words[2]) = v76;
        _os_log_debug_impl(&dword_1920CB000, v77, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Fallback segment %d: %d-%d\n", (uint8_t *)&buf, 0x14u);
      }

      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
      long long v260 = 0u;
      long long v261 = 0u;
      long long v262 = 0u;
      *(void *)v255 = 0;
      *(void *)&v255[8] = 0;
      int v78 = *v216;
      unsigned int v79 = *v215;
      *(_DWORD *)&v255[16] = v240;
      *(_DWORD *)&v255[20] = v78;
      int v212 = v240;
      *(void *)&long long v256 = __PAIR64__(v79, v248);
      unsigned int v218 = v248;
      Espresso::abstract_engine_factory::shared(v249);
      uint64_t v80 = *(void *)v249;
      std::string::basic_string[abi:ne180100]<0>(v223, "context_transfer");
      Espresso::abstract_engine_factory::make_kernel_priv(v80, (uint64_t)(a1 + 9), (uint64_t)v223, (uint64_t)v255, v216);
      if (!(void)lpsrc) {
        break;
      }
      if (!v81) {
        goto LABEL_99;
      }
      uint64_t v82 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
      if (!*((void *)&lpsrc + 1)) {
        goto LABEL_102;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
LABEL_100:
      if (*((void *)&lpsrc + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&lpsrc + 1));
      }
LABEL_102:
      if ((v223[23] & 0x80000000) != 0) {
        operator delete(*(void **)v223);
      }
      if (*(void *)&v249[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v249[8]);
      }
      uint64_t v84 = a1[9];
      uint64_t v83 = a1[10];
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int8x8_t v85 = (std::__shared_weak_count *)v81[40];
      v81[39] = v84;
      v81[40] = v83;
      if (v85) {
        nitro::nitro_function::nitro_function(v85);
      }
      uint64_t v87 = v241;
      uint8x8_t v86 = v242;
      if (v242) {
        atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v88 = (std::__shared_weak_count *)v81[42];
      v81[41] = v87;
      v81[42] = v86;
      if (v88) {
        nitro::nitro_function::nitro_function(v88);
      }
      uint64_t v89 = (char *)operator new(0xF8uLL);
      *((void *)v89 + 1) = 0;
      *((void *)v89 + 2) = 0;
      *(void *)uint64_t v89 = &unk_1EE389DF0;
      std::string::size_type size = (std::string::size_type)(v89 + 24);
      *((void *)v89 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v89 + 40) = 0u;
      *(_OWORD *)(v89 + 56) = 0u;
      *(_OWORD *)(v89 + 72) = 0u;
      *(_OWORD *)(v89 + 88) = 0u;
      *(_OWORD *)(v89 + 104) = 0u;
      *(_OWORD *)(v89 + 120) = 0u;
      *(_OWORD *)(v89 + 136) = 0u;
      *(_OWORD *)(v89 + 152) = 0u;
      *(_OWORD *)(v89 + 161) = 0u;
      *((_OWORD *)v89 + 13) = 0u;
      *((_OWORD *)v89 + 14) = 0u;
      *((void *)v89 + 30) = 0;
      std::string::size_type v91 = (std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2];
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v89 + 24);
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v89;
      if (v91)
      {
        nitro::nitro_function::nitro_function(v91);
        std::string::size_type size = buf.__r_.__value_.__l.__size_;
      }
      if (v82) {
        atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v92 = *(std::__shared_weak_count **)(size + 72);
      *(void *)(size + 64) = v81;
      *(void *)(size + 72) = v82;
      if (v92) {
        nitro::nitro_function::nitro_function(v92);
      }
      std::to_string((std::string *)v223, v74);
      int v211 = v76;
      uint64_t v93 = std::string::insert((std::string *)v223, 0, "_ctx_tx_to_fallback_");
      std::string::size_type v94 = v93->__r_.__value_.__r.__words[0];
      *(void *)&lpvImage_Buffer src = v93->__r_.__value_.__l.__size_;
      *(void *)((char *)&lpsrc + 7) = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
      char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v96 = buf.__r_.__value_.__l.__size_;
      if (*(char *)(buf.__r_.__value_.__l.__size_ + 39) < 0) {
        operator delete(*(void **)(buf.__r_.__value_.__l.__size_ + 16));
      }
      uint64_t v97 = lpsrc;
      *(void *)(v96 + 16) = v94;
      *(void *)(v96 + 24) = v97;
      *(void *)(v96 + 31) = *(void *)((char *)&lpsrc + 7);
      *(unsigned char *)(v96 + 39) = v95;
      if ((v223[23] & 0x80000000) != 0) {
        operator delete(*(void **)v223);
      }
      MEMORY[0x192FF0F50](buf.__r_.__value_.__l.__size_ + 40, "context_transfer");
      int v98 = *v216;
      std::string::size_type v99 = buf.__r_.__value_.__l.__size_;
      *(_DWORD *)(buf.__r_.__value_.__l.__size_ + 8) = *v216;
      unsigned int v100 = *v215;
      *(_DWORD *)(v99 + 12) = *v215;
      LODWORD(buf.__r_.__value_.__l.__data_) = v75 - 1;
      if (v82)
      {
        nitro::nitro_function::nitro_function(v82);
        int v98 = *v216;
        unsigned int v100 = *v215;
        int v101 = v240;
        unsigned int v102 = v248;
      }
      else
      {
        int v101 = v212;
        unsigned int v102 = v218;
      }
      *(_DWORD *)v255 = 0;
      *(_OWORD *)&v255[8] = 0u;
      long long v256 = 0u;
      long long v257 = 0u;
      long long v258 = 0u;
      *(_OWORD *)v223 = 0uLL;
      *(void *)&v223[16] = __PAIR64__(v101, v98);
      unsigned int v219 = v102;
      *(void *)&v223[24] = __PAIR64__(v102, v100);
      Espresso::abstract_engine_factory::shared(&__str);
      uint64_t v103 = __str.__r_.__value_.__r.__words[0];
      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "context_transfer");
      Espresso::abstract_engine_factory::make_kernel_priv(v103, (uint64_t)&v241, (uint64_t)&lpsrc, (uint64_t)v223, &v240);
      if (!*(void *)v249)
      {
        uint64_t v104 = 0;
LABEL_132:
        unint64_t v105 = 0;
LABEL_133:
        if (*(void *)&v249[8]) {
          nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v249[8]);
        }
        goto LABEL_135;
      }
      if (!v104) {
        goto LABEL_132;
      }
      unint64_t v105 = *(std::__shared_weak_count **)&v249[8];
      if (*(void *)&v249[8])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v249[8] + 8), 1uLL, memory_order_relaxed);
        goto LABEL_133;
      }
LABEL_135:
      if (SBYTE7(v253) < 0) {
        operator delete((void *)lpsrc);
      }
      if (__str.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      uint64_t v107 = v241;
      double v106 = v242;
      if (v242) {
        atomic_fetch_add_explicit(&v242->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v108 = (std::__shared_weak_count *)v104[40];
      v104[39] = v107;
      v104[40] = v106;
      if (v108) {
        nitro::nitro_function::nitro_function(v108);
      }
      uint64_t v110 = a1[9];
      uint64_t v109 = a1[10];
      if (v109) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v111 = (std::__shared_weak_count *)v104[42];
      v104[41] = v110;
      v104[42] = v109;
      if (v111) {
        nitro::nitro_function::nitro_function(v111);
      }
      v213 = v105;
      std::string v112 = (char *)operator new(0xF8uLL);
      *((void *)v112 + 1) = 0;
      *((void *)v112 + 2) = 0;
      *(void *)std::string v112 = &unk_1EE389DF0;
      unint64_t v113 = v112 + 24;
      *((void *)v112 + 3) = &unk_1EE36C758;
      *(_OWORD *)(v112 + 40) = 0u;
      *(_OWORD *)(v112 + 56) = 0u;
      *(_OWORD *)(v112 + 72) = 0u;
      *(_OWORD *)(v112 + 88) = 0u;
      *(_OWORD *)(v112 + 104) = 0u;
      *(_OWORD *)(v112 + 120) = 0u;
      *(_OWORD *)(v112 + 136) = 0u;
      *(_OWORD *)(v112 + 152) = 0u;
      *(_OWORD *)(v112 + 161) = 0u;
      *((_OWORD *)v112 + 13) = 0u;
      *((_OWORD *)v112 + 14) = 0u;
      *((void *)v112 + 30) = 0;
      uint64_t v114 = *(std::__shared_weak_count **)&v255[16];
      *(void *)&v255[8] = v112 + 24;
      *(void *)&v255[16] = v112;
      if (v114)
      {
        nitro::nitro_function::nitro_function(v114);
        unint64_t v113 = *(char **)&v255[8];
      }
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v115 = (std::__shared_weak_count *)*((void *)v113 + 9);
      *((void *)v113 + 8) = v104;
      *((void *)v113 + 9) = v105;
      if (v115) {
        nitro::nitro_function::nitro_function(v115);
      }
      std::to_string((std::string *)&lpsrc, v74);
      int v116 = v101;
      uint64_t v117 = std::string::insert((std::string *)&lpsrc, 0, "_ctx_tx_to_default_");
      std::string::size_type v118 = v117->__r_.__value_.__r.__words[0];
      *(void *)v249 = v117->__r_.__value_.__l.__size_;
      *(void *)&v249[7] = *(std::string::size_type *)((char *)&v117->__r_.__value_.__r.__words[1] + 7);
      char v119 = HIBYTE(v117->__r_.__value_.__r.__words[2]);
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      uint64_t v120 = *(void *)&v255[8];
      if (*(char *)(*(void *)&v255[8] + 39) < 0) {
        operator delete(*(void **)(*(void *)&v255[8] + 16));
      }
      uint64_t v121 = *(void *)v249;
      *(void *)(v120 + 16) = v118;
      *(void *)(v120 + 24) = v121;
      *(void *)(v120 + 31) = *(void *)&v249[7];
      *(unsigned char *)(v120 + 39) = v119;
      if (SBYTE7(v253) < 0) {
        operator delete((void *)lpsrc);
      }
      MEMORY[0x192FF0F50](*(void *)&v255[8] + 40, "context_transfer");
      uint64_t v122 = *(void *)&v255[8];
      *(_DWORD *)(*(void *)&v255[8] + 8) = v116;
      *(_DWORD *)(v122 + 12) = v219;
      *(_DWORD *)v255 = v211;
      if (v213) {
        nitro::nitro_function::nitro_function(v213);
      }
      memset(v223, 0, sizeof(v223));
      int v224 = 1065353216;
      lpvImage_Buffer src = 0u;
      long long v253 = 0u;
      int v254 = 1065353216;
      if (v75 <= v211)
      {
        unint64_t v123 = v75;
        do
        {
          uint64_t v124 = (uint64_t)*a2 + 96;
          *(void *)v249 = v123;
          v125 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v124, v123, v249);
          uint64_t v126 = (uint64_t)*a2 + 56;
          *(void *)v249 = v123;
          uint64_t v127 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v126, v123, v249);
          uint64_t v128 = v127[3];
          uint64_t v129 = v127[4];
          while (v128 != v129)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v234, v128))
            {
              if (a5)
              {
                if (*(char *)(v128 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v128, *(void *)(v128 + 8));
                }
                else
                {
                  long long v130 = *(_OWORD *)v128;
                  __str.__r_.__value_.__r.__words[2] = *(void *)(v128 + 16);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v130;
                }
              }
              else
              {
                if (*(char *)(v128 + 23) >= 0) {
                  size_t v131 = *(unsigned __int8 *)(v128 + 23);
                }
                else {
                  size_t v131 = *(void *)(v128 + 8);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v249, v131 + 18);
                if (v249[23] >= 0) {
                  uint64_t v132 = v249;
                }
                else {
                  uint64_t v132 = *(unsigned char **)v249;
                }
                if (v131)
                {
                  if (*(char *)(v128 + 23) >= 0) {
                    long long v133 = (const std::string::value_type *)v128;
                  }
                  else {
                    long long v133 = *(const std::string::value_type **)v128;
                  }
                  memmove(v132, v133, v131);
                }
                strcpy(&v132[v131], "_ctx_tx_fallback__");
                std::to_string(&v221, v74);
                if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v134 = &v221;
                }
                else {
                  int v134 = (std::string *)v221.__r_.__value_.__r.__words[0];
                }
                if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v135 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v135 = v221.__r_.__value_.__l.__size_;
                }
                char v136 = std::string::append((std::string *)v249, (const std::string::value_type *)v134, v135);
                long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v137;
                v136->__r_.__value_.__l.__size_ = 0;
                v136->__r_.__value_.__r.__words[2] = 0;
                v136->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v221.__r_.__value_.__l.__data_);
                }
                if ((v249[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v249);
                }
              }
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&lpsrc, v128))
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&lpsrc, v128, v128);
                v138 = (_OWORD *)*((void *)&v260 + 1);
                if (*((void *)&v260 + 1) >= (unint64_t)v261)
                {
                  char v140 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v260, v128);
                }
                else
                {
                  if (*(char *)(v128 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v260 + 1), *(const std::string::value_type **)v128, *(void *)(v128 + 8));
                  }
                  else
                  {
                    long long v139 = *(_OWORD *)v128;
                    *(void *)(*((void *)&v260 + 1) + 16) = *(void *)(v128 + 16);
                    _OWORD *v138 = v139;
                  }
                  char v140 = (std::string *)((char *)v138 + 24);
                }
                *((void *)&v260 + 1) = v140;
                std::string v141 = (_OWORD *)v262;
                if ((unint64_t)v262 >= *((void *)&v262 + 1))
                {
                  v143 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v261 + 1, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v262, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v142 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(void *)(v262 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
                    _OWORD *v141 = v142;
                  }
                  v143 = (std::string *)((char *)v141 + 24);
                }
                *(void *)&long long v262 = v143;
              }
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v226[0], (void *)v128))
              {
                *(void *)v249 = v128;
                char v144 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v225, (void *)v128, (uint64_t)&std::piecewise_construct, (long long **)v249);
                char v145 = std::string::operator=((std::string *)(v144 + 7), &__str);
                v147 = Espresso::espresso_os_log_subsystem((Espresso *)v145, v146);
                if (os_log_type_enabled(v147, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v148 = (const std::string::value_type *)v128;
                  if (*(char *)(v128 + 23) < 0) {
                    uint64_t v148 = *(const std::string::value_type **)v128;
                  }
                  p_str = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)v249 = 67109634;
                  *(_DWORD *)&v249[4] = v123;
                  *(_WORD *)&v249[8] = 2080;
                  *(void *)&v249[10] = v148;
                  *(_WORD *)&v249[18] = 2080;
                  *(void *)&v249[20] = p_str;
                  _os_log_debug_impl(&dword_1920CB000, v147, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] remap_fallback_bottom: ilayer=%d %s -> %s\n", v249, 0x1Cu);
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            v128 += 24;
          }
          uint64_t v150 = v125[3];
          uint64_t v151 = v125[4];
          while (v150 != v151)
          {
            if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v231, v150))
            {
              if (a5)
              {
                if (*(char *)(v150 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v150, *(void *)(v150 + 8));
                }
                else
                {
                  long long v152 = *(_OWORD *)v150;
                  __str.__r_.__value_.__r.__words[2] = *(void *)(v150 + 16);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v152;
                }
              }
              else
              {
                if (*(char *)(v150 + 23) >= 0) {
                  size_t v153 = *(unsigned __int8 *)(v150 + 23);
                }
                else {
                  size_t v153 = *(void *)(v150 + 8);
                }
                std::string::basic_string[abi:ne180100]((uint64_t)v249, v153 + 17);
                if (v249[23] >= 0) {
                  std::string v154 = v249;
                }
                else {
                  std::string v154 = *(unsigned char **)v249;
                }
                if (v153)
                {
                  if (*(char *)(v150 + 23) >= 0) {
                    uint64_t v155 = (const std::string::value_type *)v150;
                  }
                  else {
                    uint64_t v155 = *(const std::string::value_type **)v150;
                  }
                  memmove(v154, v155, v153);
                }
                strcpy(&v154[v153], "_ctx_tx_default__");
                std::to_string(&v221, v74);
                if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string v156 = &v221;
                }
                else {
                  std::string v156 = (std::string *)v221.__r_.__value_.__r.__words[0];
                }
                if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v157 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v157 = v221.__r_.__value_.__l.__size_;
                }
                std::string v158 = std::string::append((std::string *)v249, (const std::string::value_type *)v156, v157);
                long long v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v158->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v159;
                v158->__r_.__value_.__l.__size_ = 0;
                v158->__r_.__value_.__r.__words[2] = 0;
                v158->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v221.__r_.__value_.__l.__data_);
                }
                if ((v249[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v249);
                }
              }
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v223, v150))
              {
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v223, v150, v150);
                std::string v160 = (_OWORD *)*((void *)&v256 + 1);
                if (*((void *)&v256 + 1) >= (unint64_t)v257)
                {
                  long long v162 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v256, v150);
                }
                else
                {
                  if (*(char *)(v150 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(*((std::string **)&v256 + 1), *(const std::string::value_type **)v150, *(void *)(v150 + 8));
                  }
                  else
                  {
                    long long v161 = *(_OWORD *)v150;
                    *(void *)(*((void *)&v256 + 1) + 16) = *(void *)(v150 + 16);
                    _OWORD *v160 = v161;
                  }
                  long long v162 = (std::string *)((char *)v160 + 24);
                }
                *((void *)&v256 + 1) = v162;
                v163 = (_OWORD *)v258;
                if ((unint64_t)v258 >= *((void *)&v258 + 1))
                {
                  unint64_t v165 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v257 + 1, (uint64_t)&__str);
                }
                else
                {
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v258, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v164 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                    *(void *)(v258 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
                    _OWORD *v163 = v164;
                  }
                  unint64_t v165 = (std::string *)((char *)v163 + 24);
                }
                *(void *)&long long v258 = v165;
              }
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v228[0], (void *)v150))
              {
                *(void *)v249 = v150;
                v166 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v227, (void *)v150, (uint64_t)&std::piecewise_construct, (long long **)v249);
                char v167 = std::string::operator=((std::string *)(v166 + 7), &__str);
                v169 = Espresso::espresso_os_log_subsystem((Espresso *)v167, v168);
                if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
                {
                  std::string v170 = (const std::string::value_type *)v150;
                  if (*(char *)(v150 + 23) < 0) {
                    std::string v170 = *(const std::string::value_type **)v150;
                  }
                  uint64_t v171 = &__str;
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    uint64_t v171 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)v249 = 67109634;
                  *(_DWORD *)&v249[4] = v123;
                  *(_WORD *)&v249[8] = 2080;
                  *(void *)&v249[10] = v170;
                  *(_WORD *)&v249[18] = 2080;
                  *(void *)&v249[20] = v171;
                  _os_log_debug_impl(&dword_1920CB000, v169, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] remap_default_bottom: ilayer=%d %s -> %s\n", v249, 0x1Cu);
                }
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            v150 += 24;
          }
          ++v123;
        }
        while (v211 + 1 != v123);
      }
      if (LODWORD(buf.__r_.__value_.__l.__data_) != v214)
      {
        uint64_t v172 = v229.i64[1];
        if (v229.i64[1] >= v230)
        {
          v174 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v229, (uint64_t)&buf);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v229.i64[1], (uint64_t)&buf);
          v174 = (Espresso *)(v172 + 72);
        }
        v229.i64[1] = (uint64_t)v174;
        v175 = Espresso::espresso_os_log_subsystem(v174, v173);
        if (os_log_type_enabled(v175, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v180 = (void *)(buf.__r_.__value_.__l.__size_ + 16);
          if (*(char *)(buf.__r_.__value_.__l.__size_ + 39) < 0) {
            uint64_t v180 = (void *)*v180;
          }
          int data = (int)buf.__r_.__value_.__l.__data_;
          str_concat<std::vector<std::string>>(&__str, v260, *((uint64_t *)&v260 + 1));
          int v182 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          std::string::size_type v183 = __str.__r_.__value_.__r.__words[0];
          str_concat<std::vector<std::string>>(&v221, *((uint64_t *)&v261 + 1), v262);
          v184 = &__str;
          if (v182 < 0) {
            v184 = (std::string *)v183;
          }
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v185 = &v221;
          }
          else {
            v185 = (std::string *)v221.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v249 = 67109890;
          *(_DWORD *)&v249[4] = data;
          *(_WORD *)&v249[8] = 2080;
          *(void *)&v249[10] = v180;
          *(_WORD *)&v249[18] = 2080;
          *(void *)&v249[20] = v184;
          __int16 v250 = 2080;
          v251 = v185;
          _os_log_debug_impl(&dword_1920CB000, v175, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting context transfer to fallback after layer %d (%s):  %s -> %s", v249, 0x26u);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v221.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*(_DWORD *)v255 != v214)
      {
        uint64_t v176 = v229.i64[1];
        if (v229.i64[1] >= v230)
        {
          uint64_t v178 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v229, (uint64_t)v255);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v229.i64[1], (uint64_t)v255);
          uint64_t v178 = (Espresso *)(v176 + 72);
        }
        v229.i64[1] = (uint64_t)v178;
        unsigned __int8 v179 = Espresso::espresso_os_log_subsystem(v178, v177);
        if (os_log_type_enabled(v179, OS_LOG_TYPE_DEBUG))
        {
          v186 = (void *)(*(void *)&v255[8] + 16);
          if (*(char *)(*(void *)&v255[8] + 39) < 0) {
            v186 = (void *)*v186;
          }
          int v187 = *(_DWORD *)v255;
          str_concat<std::vector<std::string>>(&__str, v256, *((uint64_t *)&v256 + 1));
          int v188 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          std::string::size_type v189 = __str.__r_.__value_.__r.__words[0];
          str_concat<std::vector<std::string>>(&v221, *((uint64_t *)&v257 + 1), v258);
          v190 = &__str;
          if (v188 < 0) {
            v190 = (std::string *)v189;
          }
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v191 = &v221;
          }
          else {
            v191 = (std::string *)v221.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v249 = 67109890;
          *(_DWORD *)&v249[4] = v187;
          *(_WORD *)&v249[8] = 2080;
          *(void *)&v249[10] = v186;
          *(_WORD *)&v249[18] = 2080;
          *(void *)&v249[20] = v190;
          __int16 v250 = 2080;
          v251 = v191;
          _os_log_debug_impl(&dword_1920CB000, v179, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting context transfer to default after layer %d (%s): %s -> %s", v249, 0x26u);
          if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v221.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&lpsrc);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v223);
      *(void *)v223 = (char *)&v257 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
      *(void *)v223 = &v256;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v223);
      if (*(void *)&v255[16]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v255[16]);
      }
      *(void *)v255 = (char *)&v261 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v255);
      *(void *)v255 = &v260;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v255);
      unint64_t v71 = (Espresso *)buf.__r_.__value_.__r.__words[2];
      if (buf.__r_.__value_.__r.__words[2]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)buf.__r_.__value_.__r.__words[2]);
      }
      ++v74;
      uint64_t v73 = v210 + 2;
      if (v210 + 2 == (_DWORD *)v209) {
        goto LABEL_308;
      }
    }
    unint64_t v81 = 0;
LABEL_99:
    uint64_t v82 = 0;
    goto LABEL_100;
  }
LABEL_308:
  if ((int)v208 < 1) {
    goto LABEL_328;
  }
  unint64_t v192 = 0;
  do
  {
    uint64_t v193 = (uint64_t)*a2 + 56;
    buf.__r_.__value_.__r.__words[0] = v192;
    unint64_t v71 = (Espresso *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v193, v192, &buf);
    v194 = (std::string *)*((void *)v71 + 3);
    v195 = (std::string *)*((void *)v71 + 4);
    while (v194 != v195)
    {
      unint64_t v71 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v246, (uint64_t)v194);
      if (v71)
      {
        unint64_t v71 = (Espresso *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v246, (uint64_t)v194);
        if (!v71) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<int>::pointer begin = v247.__begin_;
        BOOL v197 = v247.__begin_[*((void *)v71 + 5)] != 0;
      }
      else
      {
        BOOL v197 = 0;
        std::vector<int>::pointer begin = v247.__begin_;
      }
      int v198 = begin[v192];
      if (v198 && !v197)
      {
        unint64_t v71 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v226[0], v194);
        if (!v71) {
          goto LABEL_326;
        }
        *(void *)v255 = v194;
        v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v225, v194, (uint64_t)&std::piecewise_construct, (long long **)v255);
        goto LABEL_325;
      }
      if (v198) {
        BOOL v197 = 0;
      }
      if (v197)
      {
        unint64_t v71 = (Espresso *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v228[0], v194);
        if (v71)
        {
          *(void *)v255 = v194;
          v199 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v227, v194, (uint64_t)&std::piecewise_construct, (long long **)v255);
LABEL_325:
          unint64_t v71 = (Espresso *)std::string::operator=(v194, (const std::string *)(v199 + 7));
        }
      }
LABEL_326:
      ++v194;
    }
    ++v192;
  }
  while (v192 != v207);
LABEL_328:
  v200 = Espresso::espresso_os_log_subsystem(v71, v72);
  if (os_log_type_enabled(v200, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = 954437177 * ((unint64_t)(v229.i64[1] - v229.i64[0]) >> 3);
    _os_log_debug_impl(&dword_1920CB000, v200, OS_LOG_TYPE_DEBUG, "[cpu_context_transfer_algo] Inserting %d ctx transfers in total", (uint8_t *)&buf, 8u);
  }

  Espresso::net::insert_layers((uint64_t)*a2, (uint64_t **)&v229);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v225, (uint64_t)v226[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v227, (uint64_t)v228[0]);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v231);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v234);
  if (__p)
  {
    v238 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (v242) {
    nitro::nitro_function::nitro_function(v242);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v243[2]);
  v201 = v243[0];
  v243[0] = 0;
  if (v201) {
    operator delete(v201);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v244);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v246[2]);
  v202 = v246[0];
  v246[0] = 0;
  if (v202) {
    operator delete(v202);
  }
LABEL_338:
  if (v247.__begin_)
  {
    v247.__end_ = v247.__begin_;
    operator delete(v247.__begin_);
  }
}

void sub_19217067C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (STACK[0x200]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x200]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)STACK[0x218]);
  uint64_t v69 = (void *)STACK[0x208];
  STACK[0x208] = 0;
  if (v69) {
    operator delete(v69);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x230]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)STACK[0x268]);
  char v70 = (void *)STACK[0x258];
  STACK[0x258] = 0;
  if (v70) {
    operator delete(v70);
  }
  unint64_t v71 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

void Espresso::load_blob_storage(void *a1, uint64_t a2, const void **a3, FILE *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__ptr, "storage");
  char v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a2 + 24))(a2, &__ptr);
  char v17 = v16;
  if ((SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v16) {
      goto LABEL_3;
    }
LABEL_16:
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  operator delete(__ptr.__r_.__value_.__l.__data_);
  if ((v17 & 1) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  memset(&v36, 0, sizeof(v36));
  std::string::basic_string[abi:ne180100]<0>(&__p, "storage");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)&__p, &__ptr);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__ptr, (uint64_t)&v36);
  if (v39 < 0) {
    operator delete((void *)__ptr.__r_.__value_.__r.__words[2]);
  }
  if (__ptr.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)__ptr.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a4) {
      goto LABEL_9;
    }
  }
  else if (a4)
  {
LABEL_9:
    *a1 = 0;
    a1[1] = 0;
    fseek(a4, 0, 0);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v19 = &v36;
    }
    else {
      __n128 v19 = (std::string *)v36.__r_.__value_.__r.__words[0];
    }
    if (Espresso::BinSerializer::BinSerializer_fseek(a4, (__sFILE *)v19, v18))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &__ptr);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if (fread(&__ptr, 0x28uLL, 1uLL, a4) != 1)
    {
      uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v31, &__p);
      __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v34[0] = (void *)MEMORY[0x192FF1CC0](a4);
    fclose(a4);
    std::allocate_shared[abi:ne180100]<Espresso::blob_storage_mmap,std::allocator<Espresso::blob_storage_mmap>,std::string const&,unsigned long &,void>(&__p, a5, (uint64_t *)v34);
    long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    goto LABEL_20;
  }
  if (!a6)
  {
    Espresso::load_blob_storage_mmap(a1, &v36, a3);
    if (!*a1)
    {
      if (!a8)
      {
        if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v32 = &v36;
        }
        else {
          uint64_t v32 = (std::string *)v36.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::io_error,char const*>("Missing weights path %s", (uint64_t)v32);
      }
      std::string::basic_string[abi:ne180100]<0>(&__ptr, "alt_storage");
      uint64_t v22 = (Espresso *)(*(uint64_t (**)(uint64_t, std::string *))(*(void *)a2 + 24))(a2, &__ptr);
      int v24 = (int)v22;
      if (SHIBYTE(__ptr.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__ptr.__r_.__value_.__l.__data_);
      }
      if (v24)
      {
        memset(&__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(v34, "alt_storage");
        Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v34, &__ptr);
        Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&__ptr, (uint64_t)&__p);
        Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)&__ptr.__r_.__value_.__l.__data_);
        if (v35 < 0) {
          operator delete(v34[0]);
        }
        Espresso::load_blob_storage_mmap(&__ptr, &__p, a3);
        long long v25 = *(_OWORD *)&__ptr.__r_.__value_.__l.__data_;
        *(_OWORD *)&__ptr.__r_.__value_.__l.__data_ = 0uLL;
        unint64_t v26 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v25;
        if (v26)
        {
          nitro::nitro_function::nitro_function(v26);
          if (__ptr.__r_.__value_.__l.__size_) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)__ptr.__r_.__value_.__l.__size_);
          }
          uint64_t v27 = *a1;
        }
        else
        {
          uint64_t v27 = v25;
        }
        if (!v27)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::io_error,char const*>("Missing alt-weights path %s", (uint64_t)p_p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v28 = Espresso::espresso_os_log_subsystem(v22, v23);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v29 = &v36;
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v29 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          LODWORD(__ptr.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__ptr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
          _os_log_debug_impl(&dword_1920CB000, v28, OS_LOG_TYPE_DEBUG, "Missing weights path %s. This is acceptable if the network doesn't have layers with weights falling out of ANE.\n", (uint8_t *)&__ptr, 0xCu);
        }
      }
    }
    goto LABEL_21;
  }
  BOOL v21 = (char *)operator new(0x78uLL);
  *(_OWORD *)(v21 + 8) = 0u;
  *(void *)BOOL v21 = &unk_1EE386190;
  *(_OWORD *)(v21 + 40) = 0u;
  *((void *)v21 + 3) = &unk_1EE34C218;
  *((void *)v21 + 4) = v21 + 40;
  v21[56] = 0;
  *((_OWORD *)v21 + 4) = 0u;
  *((_OWORD *)v21 + 5) = 0u;
  *((void *)v21 + 12) = a6;
  *((void *)v21 + 13) = a7;
  v21[112] = 0;
  Espresso::blob_storage_mmap::setup_header((uint64_t **)v21 + 3, 0);
  *(void *)&long long v20 = v21 + 24;
  *((void *)&v20 + 1) = v21;
LABEL_20:
  *(_OWORD *)a1 = v20;
LABEL_21:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_192170EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  char v35 = *(std::__shared_weak_count **)(v33 + 8);
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_blob_storage_mmap(void *a1, std::string *this, const void **a3)
{
  long long v21[2] = *MEMORY[0x1E4F143B8];
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    std::string v18 = *this;
LABEL_4:
    std::string __p = *this;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(&v18, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_4;
  }
  std::string::__init_copy_ctor_external(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
LABEL_5:
  std::string::size_type v6 = std::string::rfind(this, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v6 != -1)
  {
    std::string::basic_string(&v19, this, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v19;
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v7)
  {
    uint64_t v8 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if (v8->__r_.__value_.__s.__data_[0] != 47)
    {
      uint64_t v9 = &v19;
      std::string::basic_string[abi:ne180100]((uint64_t)&v19, v7 + 1);
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a3 + 23) >= 0) {
        unint64_t v10 = a3;
      }
      else {
        unint64_t v10 = *a3;
      }
      memmove(v9, v10, v7);
      *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v7) = 47;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v13 = std::string::append(&v19, (const std::string::value_type *)p_p, size);
      std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
      v21[0] = v13->__r_.__value_.__l.__size_;
      *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      v18.__r_.__value_.__r.__words[0] = v14;
      v18.__r_.__value_.__l.__size_ = v21[0];
      *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v21 + 7);
      *((unsigned char *)&v18.__r_.__value_.__s + 23) = v15;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = 0;
  a1[1] = 0;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v16 = &v18;
  }
  else {
    char v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if (!access((const char *)v16, 0))
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v17 = &v18;
    }
    else {
      char v17 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v17);
    Espresso::make_blob_storage_mmap((uint64_t)&v19, (uint64_t)&__p);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1921712A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_0::operator() const(MIL::IRFunction const&)::{lambda(MIL::IROperation const&)#1},std::allocator<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_0::operator() const(MIL::IRFunction const&)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  ++**(_DWORD **)(a1 + 16);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 128))(v3) & 1) == 0)
  {
    v92[0] = 0;
    v92[1] = 0;
    std::string::size_type v91 = v92;
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
    size_t v7 = (unsigned __int8 *)*v4;
    unint64_t v5 = (unsigned __int8 *)(v4 + 1);
    std::string::size_type v6 = v7;
    if (v7 != v5)
    {
      uint64_t v80 = v5;
      while (1)
      {
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        unint64_t v90 = 0;
        if (*((void *)v6 + 8) != *((void *)v6 + 7)) {
          break;
        }
LABEL_115:
        uint64_t v93 = &v88;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
        uint64_t v72 = (unsigned __int8 *)*((void *)v6 + 1);
        if (v72)
        {
          do
          {
            uint64_t v73 = v72;
            uint64_t v72 = *(unsigned __int8 **)v72;
          }
          while (v72);
        }
        else
        {
          do
          {
            uint64_t v73 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v74 = *(void *)v73 == (void)v6;
            std::string::size_type v6 = v73;
          }
          while (!v74);
        }
        std::string::size_type v6 = v73;
        if (v73 == v80) {
          goto LABEL_121;
        }
      }
      uint64_t v8 = 0;
      unsigned int v9 = 0;
      char v10 = 0;
      do
      {
        while (1)
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
          int v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(v11);
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v12, v6 + 32))
          {
            uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
            if (*(char *)(v76 + 23) >= 0) {
              uint64_t v77 = (void **)v76;
            }
            else {
              uint64_t v77 = *(void ***)v76;
            }
            uint64_t v93 = (char **)v77;
            if ((v6[55] & 0x80u) == 0) {
              std::string::size_type v78 = (std::string::size_type)(v6 + 32);
            }
            else {
              std::string::size_type v78 = *((void *)v6 + 4);
            }
            v84.__r_.__value_.__r.__words[0] = v78;
            Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Operator %s does not have parameter of name %s", &v93, &v84);
          }
          uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
          uint64_t v14 = ParameterValue;
          if (!ParameterValue) {
            break;
          }
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)ParameterValue + 40))(ParameterValue);
          if (v15)
          {
            if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 120))(v15)) {
              break;
            }
          }
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
          if (!(*(uint64_t (**)(uint64_t))(*(void *)v16 + 24))(v16)) {
            break;
          }
          MIL::IROperation::TryGetParameterValueSharedPtr();
          MIL::IRArgument::Make();
          if (v93) {
            operator new();
          }
          uint64_t v93 = 0;
          if (v87) {
            nitro::nitro_function::nitro_function(v87);
          }
          unint64_t v29 = v89;
          if ((unint64_t)v89 >= v90)
          {
            int64_t v31 = (v89 - v88) >> 4;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 60) {
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = v90 - (void)v88;
            if ((uint64_t)(v90 - (void)v88) >> 3 > v32) {
              unint64_t v32 = v33 >> 3;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            uint64_t v97 = &v90;
            char v35 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v34);
            std::string v36 = &v35[2 * v31];
            uint64_t v93 = (char **)v35;
            std::string::size_type v94 = v36;
            std::string::size_type v96 = &v35[2 * v37];
            *(_OWORD *)std::string v36 = 0uLL;
            char v95 = v36 + 2;
            std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v88, &v93);
            uint64_t v30 = (uint64_t *)v89;
            std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v93);
          }
          else
          {
            *(void *)uint64_t v89 = 0;
            *((void *)v29 + 1) = 0;
            uint64_t v30 = (uint64_t *)(v29 + 16);
          }
          uint64_t v89 = (char *)v30;
          char v10 = 1;
          uint64_t v8 = ++v9;
          if (v9 >= (unint64_t)((uint64_t)(*((void *)v6 + 8) - *((void *)v6 + 7)) >> 4)) {
            goto LABEL_42;
          }
        }
        uint64_t v17 = *((void *)v6 + 7);
        std::string v18 = v89;
        if ((unint64_t)v89 >= v90)
        {
          int64_t v21 = (v89 - v88) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v90 - (void)v88;
          if ((uint64_t)(v90 - (void)v88) >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          uint64_t v97 = &v90;
          long long v25 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v24);
          unint64_t v26 = &v25[2 * v21];
          uint64_t v93 = (char **)v25;
          std::string::size_type v94 = v26;
          std::string::size_type v96 = &v25[2 * v27];
          long long v28 = *(_OWORD *)(v17 + 16 * v8);
          *(_OWORD *)unint64_t v26 = v28;
          if (*((void *)&v28 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          char v95 = v26 + 2;
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(&v88, &v93);
          long long v20 = (uint64_t *)v89;
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v93);
        }
        else
        {
          long long v19 = *(_OWORD *)(v17 + 16 * v8);
          *(_OWORD *)uint64_t v89 = v19;
          if (*((void *)&v19 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          long long v20 = (uint64_t *)(v18 + 16);
        }
        uint64_t v89 = (char *)v20;
        uint64_t v8 = ++v9;
      }
      while (v9 < (unint64_t)((uint64_t)(*((void *)v6 + 8) - *((void *)v6 + 7)) >> 4));
      if ((v10 & 1) == 0) {
        goto LABEL_115;
      }
LABEL_42:
      uint64_t v38 = *(void *)(a1 + 8);
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
      uint64_t v40 = (char *)v39;
      if (*(char *)(v39 + 23) >= 0) {
        size_t v41 = *(unsigned __int8 *)(v39 + 23);
      }
      else {
        size_t v41 = *(void *)(v39 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v82, v41 + 1);
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v42 = (std::string::size_type)&v82;
      }
      else {
        std::string::size_type v42 = v82.__r_.__value_.__r.__words[0];
      }
      if (v41)
      {
        if (v40[23] >= 0) {
          uint64_t v43 = v40;
        }
        else {
          uint64_t v43 = *(char **)v40;
        }
        memmove((void *)v42, v43, v41);
      }
      *(_WORD *)(v42 + v41) = 45;
      std::to_string(&v81, **(_DWORD **)(a1 + 16));
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v44 = &v81;
      }
      else {
        unint64_t v44 = (std::string *)v81.__r_.__value_.__r.__words[0];
      }
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v81.__r_.__value_.__l.__size_;
      }
      uint64_t v46 = std::string::append(&v82, (const std::string::value_type *)v44, size);
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v83.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      unint64_t v48 = std::string::append(&v83, "-");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v84.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      int v50 = (char)v6[55];
      if (v50 >= 0) {
        uint64_t v51 = (const std::string::value_type *)(v6 + 32);
      }
      else {
        uint64_t v51 = (const std::string::value_type *)*((void *)v6 + 4);
      }
      if (v50 >= 0) {
        std::string::size_type v52 = v6[55];
      }
      else {
        std::string::size_type v52 = *((void *)v6 + 5);
      }
      uint64_t v53 = std::string::append(&v84, v51, v52);
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      std::string::size_type v86 = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      unint64_t v55 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
      std::string::size_type v56 = v55;
      unint64_t v57 = *(void *)(v38 + 8);
      if (v57)
      {
        uint8x8_t v58 = (uint8x8_t)vcnt_s8((int8x8_t)v57);
        v58.i16[0] = vaddlv_u8(v58);
        unint64_t v59 = v58.u32[0];
        if (v58.u32[0] > 1uLL)
        {
          std::string::size_type v42 = v55;
          if (v55 >= v57) {
            std::string::size_type v42 = v55 % v57;
          }
        }
        else
        {
          std::string::size_type v42 = (v57 - 1) & v55;
        }
        uint64_t v60 = *(void ***)(*(void *)v38 + 8 * v42);
        if (v60)
        {
          uint64_t v61 = (char *)*v60;
          if (*v60)
          {
            do
            {
              unint64_t v62 = *((void *)v61 + 1);
              if (v62 == v56)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v61 + 16, (unsigned __int8 *)__p))
                {
                  goto LABEL_103;
                }
              }
              else
              {
                if (v59 > 1)
                {
                  if (v62 >= v57) {
                    v62 %= v57;
                  }
                }
                else
                {
                  v62 &= v57 - 1;
                }
                if (v62 != v42) {
                  break;
                }
              }
              uint64_t v61 = *(char **)v61;
            }
            while (v61);
          }
        }
      }
      uint64_t v61 = (char *)operator new(0x40uLL);
      uint64_t v93 = (char **)v61;
      std::string::size_type v94 = (void **)(v38 + 16);
      *(void *)uint64_t v61 = 0;
      *((void *)v61 + 1) = v56;
      std::string::size_type v63 = v86;
      *((_OWORD *)v61 + 1) = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v86 = 0;
      *((void *)v61 + 4) = v63;
      *((void *)v61 + 5) = 0;
      *((void *)v61 + 6) = 0;
      *((void *)v61 + 7) = 0;
      LOBYTE(v95) = 1;
      float v64 = (float)(unint64_t)(*(void *)(v38 + 24) + 1);
      float v65 = *(float *)(v38 + 32);
      if (!v57 || (float)(v65 * (float)v57) < v64)
      {
        BOOL v66 = (v57 & (v57 - 1)) != 0;
        if (v57 < 3) {
          BOOL v66 = 1;
        }
        unint64_t v67 = v66 | (2 * v57);
        unint64_t v68 = vcvtps_u32_f32(v64 / v65);
        if (v67 <= v68) {
          size_t v69 = v68;
        }
        else {
          size_t v69 = v67;
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(v38, v69);
        unint64_t v57 = *(void *)(v38 + 8);
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v56 >= v57) {
            std::string::size_type v42 = v56 % v57;
          }
          else {
            std::string::size_type v42 = v56;
          }
        }
        else
        {
          std::string::size_type v42 = (v57 - 1) & v56;
        }
      }
      char v70 = *(void **)(*(void *)v38 + 8 * v42);
      if (v70)
      {
        *(void *)uint64_t v61 = *v70;
      }
      else
      {
        *(void *)uint64_t v61 = *(void *)(v38 + 16);
        *(void *)(v38 + 16) = v61;
        *(void *)(*(void *)v38 + 8 * v42) = v38 + 16;
        if (!*(void *)v61) {
          goto LABEL_102;
        }
        unint64_t v71 = *(void *)(*(void *)v61 + 8);
        if ((v57 & (v57 - 1)) != 0)
        {
          if (v71 >= v57) {
            v71 %= v57;
          }
        }
        else
        {
          v71 &= v57 - 1;
        }
        char v70 = (void *)(*(void *)v38 + 8 * v71);
      }
      *char v70 = v61;
LABEL_102:
      uint64_t v93 = 0;
      ++*(void *)(v38 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v93);
LABEL_103:
      if (v61 + 40 != (char *)&v88) {
        std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>((uint64_t *)v61 + 5, (uint64_t *)v88, (uint64_t *)v89, (v89 - v88) >> 4);
      }
      if (SHIBYTE(v86) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v83.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v81.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      goto LABEL_115;
    }
LABEL_121:
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v91, v92[0]);
  }
  return 1;
}

void sub_192171C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v47 - 152, *(char **)(v47 - 144));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = *((void *)a2 + 7);
    if (v4)
    {
      uint64_t v5 = *((void *)a2 + 8);
      std::string::size_type v6 = (void *)*((void *)a2 + 7);
      if (v5 != v4)
      {
        do
        {
          size_t v7 = *(std::__shared_weak_count **)(v5 - 8);
          if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
          v5 -= 16;
        }
        while (v5 != v4);
        std::string::size_type v6 = (void *)*((void *)a2 + 7);
      }
      *((void *)a2 + 8) = v4;
      operator delete(v6);
    }
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t std::__function::__func<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_1::operator() const(MIL::IRFunction &)::{lambda(MIL::IROperation &)#1},std::allocator<Espresso::MILTransforms::FoldTrivialConsts(MIL::IRProgram &)::$_1::operator() const(MIL::IRFunction &)::{lambda(MIL::IROperation &)#1}>,BOOL ()(MIL::IROperation &)>::operator()(uint64_t a1, uint64_t a2)
{
  ++**(_DWORD **)(a1 + 16);
  v64[0] = 0;
  v64[1] = 0;
  std::string::size_type v63 = v64;
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (uint64_t *)*v3;
  if ((void *)*v3 == v3 + 1) {
    goto LABEL_102;
  }
  do
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    size_t v7 = (char *)v6;
    if (*(char *)(v6 + 23) >= 0) {
      size_t v8 = *(unsigned __int8 *)(v6 + 23);
    }
    else {
      size_t v8 = *(void *)(v6 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v59, v8 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v9 = &v59;
    }
    else {
      unsigned int v9 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (v7[23] >= 0) {
        char v10 = v7;
      }
      else {
        char v10 = *(char **)v7;
      }
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 45;
    std::to_string(&v58, **(_DWORD **)(a1 + 16));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v58;
    }
    else {
      uint64_t v11 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v58.__r_.__value_.__l.__size_;
    }
    uint64_t v13 = std::string::append(&v59, (const std::string::value_type *)v11, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    uint64_t v15 = std::string::append(&v60, "-");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    int v17 = *((char *)v5 + 55);
    if (v17 >= 0) {
      std::string v18 = (const std::string::value_type *)(v5 + 4);
    }
    else {
      std::string v18 = (const std::string::value_type *)v5[4];
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *((unsigned __int8 *)v5 + 55);
    }
    else {
      std::string::size_type v19 = v5[5];
    }
    long long v20 = std::string::append(&v65, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v62 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    unint64_t v22 = v4;
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    uint64_t v23 = *(void **)(a1 + 8);
    unint64_t v24 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
    int8x8_t v25 = (int8x8_t)v23[1];
    if (!*(void *)&v25) {
      goto LABEL_49;
    }
    unint64_t v26 = v24;
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25);
    v27.i16[0] = vaddlv_u8(v27);
    unint64_t v28 = v27.u32[0];
    if (v27.u32[0] > 1uLL)
    {
      unint64_t v29 = v24;
      if (v24 >= *(void *)&v25) {
        unint64_t v29 = v24 % *(void *)&v25;
      }
    }
    else
    {
      unint64_t v29 = (*(void *)&v25 - 1) & v24;
    }
    uint64_t v30 = *(unsigned __int8 ***)(*v23 + 8 * v29);
    if (!v30 || (int64_t v31 = *v30) == 0)
    {
LABEL_49:
      v65.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
      uint64_t v33 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v63, v5 + 4, (long long **)&v65);
      uint64_t v4 = v22;
      if (v5 != v33) {
        std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(v33 + 7, (uint64_t *)v5[7], (uint64_t *)v5[8], (v5[8] - v5[7]) >> 4);
      }
      goto LABEL_51;
    }
    while (1)
    {
      unint64_t v32 = *((void *)v31 + 1);
      if (v32 == v26) {
        break;
      }
      if (v28 > 1)
      {
        if (v32 >= *(void *)&v25) {
          v32 %= *(void *)&v25;
        }
      }
      else
      {
        v32 &= *(void *)&v25 - 1;
      }
      if (v32 != v29) {
        goto LABEL_49;
      }
LABEL_48:
      int64_t v31 = *(unsigned __int8 **)v31;
      if (!v31) {
        goto LABEL_49;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v31 + 16, (unsigned __int8 *)__p)) {
      goto LABEL_48;
    }
    uint64_t v37 = *(void *)(a1 + 8);
    unint64_t v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
    unint64_t v39 = v38;
    unint64_t v40 = *(void *)(v37 + 8);
    if (v40)
    {
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
      v41.i16[0] = vaddlv_u8(v41);
      unint64_t v42 = v41.u32[0];
      if (v41.u32[0] > 1uLL)
      {
        int8x8_t v25 = (int8x8_t)v38;
        if (v38 >= v40) {
          int8x8_t v25 = (int8x8_t)(v38 % v40);
        }
      }
      else
      {
        int8x8_t v25 = (int8x8_t)((v40 - 1) & v38);
      }
      uint64_t v43 = *(void ***)(*(void *)v37 + 8 * *(void *)&v25);
      if (v43)
      {
        unint64_t v44 = (char *)*v43;
        if (*v43)
        {
          do
          {
            unint64_t v45 = *((void *)v44 + 1);
            if (v45 == v39)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v44 + 16, (unsigned __int8 *)__p))
              {
                uint64_t v4 = v22;
                goto LABEL_101;
              }
            }
            else
            {
              if (v42 > 1)
              {
                if (v45 >= v40) {
                  v45 %= v40;
                }
              }
              else
              {
                v45 &= v40 - 1;
              }
              if (v45 != *(void *)&v25) {
                break;
              }
            }
            unint64_t v44 = *(char **)v44;
          }
          while (v44);
        }
      }
    }
    unint64_t v44 = (char *)operator new(0x40uLL);
    uint64_t v4 = v22;
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
    v65.__r_.__value_.__l.__size_ = v37 + 16;
    v65.__r_.__value_.__s.__data_[16] = 0;
    *(void *)unint64_t v44 = 0;
    *((void *)v44 + 1) = v39;
    uint64_t v46 = (std::string *)(v44 + 16);
    if (SHIBYTE(v62) < 0)
    {
      std::string::__init_copy_ctor_external(v46, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *(_OWORD *)&v46->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      *((void *)v44 + 4) = v62;
    }
    *((void *)v44 + 5) = 0;
    *((void *)v44 + 6) = 0;
    *((void *)v44 + 7) = 0;
    v65.__r_.__value_.__s.__data_[16] = 1;
    float v47 = (float)(unint64_t)(*(void *)(v37 + 24) + 1);
    float v48 = *(float *)(v37 + 32);
    if (!v40 || (float)(v48 * (float)v40) < v47)
    {
      BOOL v49 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3) {
        BOOL v49 = 1;
      }
      unint64_t v50 = v49 | (2 * v40);
      unint64_t v51 = vcvtps_u32_f32(v47 / v48);
      if (v50 <= v51) {
        size_t v52 = v51;
      }
      else {
        size_t v52 = v50;
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(v37, v52);
      unint64_t v40 = *(void *)(v37 + 8);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v39 >= v40) {
          int8x8_t v25 = (int8x8_t)(v39 % v40);
        }
        else {
          int8x8_t v25 = (int8x8_t)v39;
        }
      }
      else
      {
        int8x8_t v25 = (int8x8_t)((v40 - 1) & v39);
      }
    }
    uint64_t v53 = *(void **)(*(void *)v37 + 8 * *(void *)&v25);
    if (v53)
    {
      *(void *)unint64_t v44 = *v53;
      goto LABEL_99;
    }
    *(void *)unint64_t v44 = *(void *)(v37 + 16);
    *(void *)(v37 + 16) = v44;
    *(void *)(*(void *)v37 + 8 * *(void *)&v25) = v37 + 16;
    if (*(void *)v44)
    {
      unint64_t v54 = *(void *)(*(void *)v44 + 8);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v54 >= v40) {
          v54 %= v40;
        }
      }
      else
      {
        v54 &= v40 - 1;
      }
      uint64_t v53 = (void *)(*(void *)v37 + 8 * v54);
LABEL_99:
      *uint64_t v53 = v44;
    }
    v65.__r_.__value_.__r.__words[0] = 0;
    ++*(void *)(v37 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v65);
LABEL_101:
    v65.__r_.__value_.__r.__words[0] = (std::string::size_type)(v5 + 4);
    unint64_t v55 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v63, v5 + 4, (long long **)&v65);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(v55 + 7);
    *(_OWORD *)(v55 + 7) = *(_OWORD *)(v44 + 40);
    v55[9] = *((void *)v44 + 7);
    *((void *)v44 + 5) = 0;
    *((void *)v44 + 6) = 0;
    *((void *)v44 + 7) = 0;
    --**(void **)(a1 + 24);
LABEL_51:
    if (SHIBYTE(v62) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v34 = (uint64_t *)v5[1];
    if (v34)
    {
      do
      {
        char v35 = v34;
        unint64_t v34 = (uint64_t *)*v34;
      }
      while (v34);
    }
    else
    {
      do
      {
        char v35 = (uint64_t *)v5[2];
        BOOL v36 = *v35 == (void)v5;
        uint64_t v5 = v35;
      }
      while (!v36);
    }
    uint64_t v5 = v35;
  }
  while (v35 != v4);
LABEL_102:
  (*(void (**)(uint64_t, char ***))(*(void *)a2 + 168))(a2, &v63);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&v63, v64[0]);
  return 1;
}

void sub_192172490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,char *a37)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100](v37 - 112);
  if (a35 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    size_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    size_t v8 = (std::string *)(v6 + 4);
    unsigned int v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_192172688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  size_t v8 = a1 + 2;
  unsigned int v9 = (void *)*a1;
  if (a4 > (a1[2] - *a1) >> 4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(a1);
    if (a4 >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRArgument>>::__vallocate[abi:ne180100](a1, v12);
    char v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    uint64_t v15 = a2;
    goto LABEL_11;
  }
  unint64_t v16 = (a1[1] - (uint64_t)v9) >> 4;
  if (v16 < a4)
  {
    int v17 = &a2[2 * v16];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, v17, v9);
    char v13 = (void *)a1[1];
    uint64_t v14 = (uint64_t)v8;
    uint64_t v15 = v17;
LABEL_11:
    a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(v14, v15, a3, v13);
    return;
  }
  std::string v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *,std::shared_ptr<Espresso::abstract_blob_container> *>(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != v18; i -= 2)
  {
    long long v20 = (std::__shared_weak_count *)*(i - 1);
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  a1[1] = (uint64_t)v18;
}

void std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<std::shared_ptr<MIL::IRArgument>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRValue const>>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::shared_ptr<Espresso::blob_storage_abstract>::operator=[abi:ne180100]<Espresso::blob_storage_abstract,std::default_delete<Espresso::blob_storage_abstract>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void *)(a2 + 8));
    if (*(char *)(a2 + 79) < 0)
    {
      operator delete(*(void **)(a2 + 56));
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        uint64_t v4 = (void *)a2;
LABEL_6:
        operator delete(v4);
        return;
      }
    }
    else if ((*(char *)(a2 + 55) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a2 + 32));
    uint64_t v4 = (void *)a2;
    goto LABEL_6;
  }
}

uint64_t e5rt_tensor_desc_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE399218;
  v3[1] = a1;
  uint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_192172B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::Translate(uint64_t a1, MIL::IRObject *a2)
{
  uint64_t v4 = (MIL::IROperation ****)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
  uint64_t v5 = **v4;
  for (uint64_t i = (*v4)[1]; v5 != i; v5 += 2)
  {
    size_t v7 = *v5;
    std::string::basic_string[abi:ne180100]<0>(&v95, "");
    Espresso::MILTranslator::LayerTranslator::GetUniqueLayerName((uint64_t)&__p, a1, v7, (const void **)&v95);
    if (v91 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v97) < 0) {
      operator delete(v95);
    }
    (*(void (**)(char **__return_ptr, MIL::IROperation *))(*(void *)v7 + 200))(&v95, v7);
    Espresso::MILTranslator::LayerTranslator::GetUniqueBlobNames((uint64_t)v89, a1, (uint64_t *)&v95);
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  }
  int8x8_t v85 = a2;
  size_t v8 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
  unsigned int v9 = **v8;
  std::string::size_type v86 = (*v8)[1];
  if (v9 != v86)
  {
    uint64_t v10 = (void *)(a1 + 264);
    do
    {
      uint64_t v11 = *v9;
      uint64_t v87 = *(void *)(*(void *)(*(void *)(a1 + 40) + 80) + 32);
      uint64_t v88 = *(void *)(*(void *)(*(void *)(a1 + 40) + 80) + 40);
      unint64_t v12 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)*v9 + 160))(*v9);
      uint64_t v14 = v12 + 1;
      char v13 = (void *)*v12;
      if ((void *)*v12 != v12 + 1)
      {
        do
        {
          uint64_t v15 = (MIL::IRArgument **)v13[7];
          unint64_t v16 = (MIL::IRArgument **)v13[8];
          while (v15 != v16)
          {
            if (((*(uint64_t (**)(void))(*(void *)*v15 + 24))() & 1) == 0)
            {
              uint64_t Name = MIL::IRArgument::GetName(*v15);
              if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((void *)(*(void *)(a1 + 40) + 240), Name)&& !(*(uint64_t (**)(void *, uint64_t, uint64_t))(*((void *)v11 + 8) + 48))((void *)v11 + 8, Name, 1))
              {
                uint64_t Location = MIL::IRObject::GetLocation(v11);
                uint64_t v76 = &v95;
                (*(void (**)(char **__return_ptr))(*(void *)Location + 24))(&v95);
                if (v97 < 0) {
                  uint64_t v76 = (char **)v95;
                }
                std::operator+<char>();
                uint64_t v77 = std::string::append(&v93, "' not found in any of the outputs of the preceeding layers.");
                long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                v94.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v78;
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unsigned int v79 = &v94;
                }
                else {
                  unsigned int v79 = (std::string *)v94.__r_.__value_.__r.__words[0];
                }
                Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v76, (uint64_t)v79);
              }
            }
            v15 += 2;
          }
          std::string v18 = (void *)v13[1];
          if (v18)
          {
            do
            {
              std::string::size_type v19 = v18;
              std::string v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              std::string::size_type v19 = (void *)v13[2];
              BOOL v30 = *v19 == (void)v13;
              char v13 = v19;
            }
            while (!v30);
          }
          char v13 = v19;
        }
        while (v19 != v14);
      }
      ++*(_DWORD *)(a1 + 80);
      unint64_t v20 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v11 + 72))(v11);
      long long v21 = std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::find<MIL::IROperator const*>((void *)(a1 + 88), v20);
      unint64_t v22 = getenv("ESPRESSO_ENABLE_VALUE_INFERENCE");
      if (v22) {
        BOOL v23 = atoi(v22) != 0;
      }
      else {
        BOOL v23 = 0;
      }
      uint64_t Attributes = MIL::IRObject::GetAttributes(v11);
      std::string::basic_string[abi:ne180100]<0>(&v95, "useValueInference");
      int8x8_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)Attributes, (uint64_t)&v95);
      unint64_t v26 = v25;
      if (SHIBYTE(v97) < 0)
      {
        operator delete(v95);
        if (!v26) {
          goto LABEL_34;
        }
      }
      else if (!v25)
      {
        goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(&v95, "useValueInference");
      uint8x8_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)Attributes, (uint64_t)&v95);
      if (!v27) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v28 = MEMORY[0x192FF09E0](v27[5]);
      uint64_t Attributes = v28;
      if (SHIBYTE(v97) < 0)
      {
        operator delete(v95);
        if (Attributes)
        {
LABEL_32:
          BOOL v29 = *(unsigned char *)Attributes != 0;
          goto LABEL_35;
        }
      }
      else if (v28)
      {
        goto LABEL_32;
      }
LABEL_34:
      BOOL v29 = 0;
LABEL_35:
      if (v21) {
        BOOL v30 = !v29;
      }
      else {
        BOOL v30 = 0;
      }
      if (v30)
      {
        uint64_t v31 = v21[6];
        if (!v31) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, MIL::IRObject *))(*(void *)v31 + 48))(v31, v11);
      }
      else
      {
        if (!v23)
        {
          uint64_t v80 = MIL::IRObject::GetLocation(v11);
          std::string v81 = &v95;
          (*(void (**)(char **__return_ptr))(*(void *)v80 + 24))(&v95);
          if (v97 < 0) {
            std::string v81 = (char **)v95;
          }
          (*(void (**)(MIL::IRObject *))(*(void *)v11 + 56))(v11);
          std::operator+<char>();
          std::string v82 = std::string::append(&v93, "'");
          long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
          v82->__r_.__value_.__l.__size_ = 0;
          v82->__r_.__value_.__r.__words[2] = 0;
          v82->__r_.__value_.__r.__words[0] = 0;
          if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v84 = &v94;
          }
          else {
            std::string v84 = (std::string *)v94.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v81, (uint64_t)v84);
        }
        Espresso::MILTranslator::LayerTranslator::TranslateForValueInference((Espresso::MILTranslator::LayerTranslator *)a1, v11);
      }
      unint64_t v32 = (v88 - v87) >> 4;
      uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 40) + 80) + 40)
          - *(void *)(*(void *)(*(void *)(a1 + 40) + 80) + 32);
      if (v32 < v33 >> 4)
      {
        uint64_t v34 = v33 >> 4;
        unint64_t v35 = *(void *)(a1 + 256);
        while (1)
        {
          if (v35)
          {
            uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.u32[0] > 1uLL)
            {
              uint64_t Attributes = v32;
              if (v32 >= v35) {
                uint64_t Attributes = v32 % v35;
              }
            }
            else
            {
              uint64_t Attributes = (v35 - 1) & v32;
            }
            uint64_t v37 = *(void ***)(*(void *)(a1 + 248) + 8 * Attributes);
            if (v37)
            {
              for (uint64_t j = *v37; j; uint64_t j = (void *)*j)
              {
                unint64_t v39 = j[1];
                if (v39 == v32)
                {
                  if (j[2] == v32) {
                    goto LABEL_117;
                  }
                }
                else
                {
                  if (v36.u32[0] > 1uLL)
                  {
                    if (v39 >= v35) {
                      v39 %= v35;
                    }
                  }
                  else
                  {
                    v39 &= v35 - 1;
                  }
                  if (v39 != Attributes) {
                    break;
                  }
                }
              }
            }
          }
          uint64_t j = operator new(0x20uLL);
          void *j = 0;
          j[1] = v32;
          j[2] = v32;
          j[3] = 0;
          float v40 = (float)(unint64_t)(*(void *)(a1 + 272) + 1);
          float v41 = *(float *)(a1 + 280);
          if (!v35 || (float)(v41 * (float)v35) < v40) {
            break;
          }
LABEL_107:
          uint64_t v58 = *(void *)(a1 + 248);
          std::string v59 = *(void **)(v58 + 8 * Attributes);
          if (v59)
          {
            void *j = *v59;
          }
          else
          {
            void *j = *v10;
            *uint64_t v10 = j;
            *(void *)(v58 + 8 * Attributes) = v10;
            if (!*j) {
              goto LABEL_116;
            }
            unint64_t v60 = *(void *)(*j + 8);
            if ((v35 & (v35 - 1)) != 0)
            {
              if (v60 >= v35) {
                v60 %= v35;
              }
            }
            else
            {
              v60 &= v35 - 1;
            }
            std::string v59 = (void *)(*(void *)(a1 + 248) + 8 * v60);
          }
          *std::string v59 = j;
LABEL_116:
          ++*(void *)(a1 + 272);
LABEL_117:
          j[3] = v11;
          if (++v32 == v34) {
            goto LABEL_128;
          }
        }
        BOOL v42 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3) {
          BOOL v42 = 1;
        }
        unint64_t v43 = v42 | (2 * v35);
        unint64_t v44 = vcvtps_u32_f32(v40 / v41);
        if (v43 <= v44) {
          int8x8_t prime = (int8x8_t)v44;
        }
        else {
          int8x8_t prime = (int8x8_t)v43;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
          unint64_t v35 = *(void *)(a1 + 256);
        }
        if (*(void *)&prime <= v35)
        {
          if (*(void *)&prime < v35)
          {
            unint64_t v52 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 272) / *(float *)(a1 + 280));
            if (v35 < 3 || (uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v35), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
            {
              unint64_t v52 = std::__next_prime(v52);
            }
            else
            {
              uint64_t v54 = 1 << -(char)__clz(v52 - 1);
              if (v52 >= 2) {
                unint64_t v52 = v54;
              }
            }
            if (*(void *)&prime <= v52) {
              int8x8_t prime = (int8x8_t)v52;
            }
            if (*(void *)&prime >= v35)
            {
              unint64_t v35 = *(void *)(a1 + 256);
            }
            else
            {
              if (prime) {
                goto LABEL_73;
              }
              uint64_t v61 = *(void **)(a1 + 248);
              *(void *)(a1 + 248) = 0;
              if (v61) {
                operator delete(v61);
              }
              unint64_t v35 = 0;
              *(void *)(a1 + 256) = 0;
            }
          }
        }
        else
        {
LABEL_73:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v46 = operator new(8 * *(void *)&prime);
          float v47 = *(void **)(a1 + 248);
          *(void *)(a1 + 248) = v46;
          if (v47) {
            operator delete(v47);
          }
          uint64_t v48 = 0;
          *(int8x8_t *)(a1 + 256) = prime;
          do
            *(void *)(*(void *)(a1 + 248) + 8 * v48++) = 0;
          while (*(void *)&prime != v48);
          BOOL v49 = (void *)*v10;
          if (*v10)
          {
            unint64_t v50 = v49[1];
            uint8x8_t v51 = (uint8x8_t)vcnt_s8(prime);
            v51.i16[0] = vaddlv_u8(v51);
            if (v51.u32[0] > 1uLL)
            {
              if (v50 >= *(void *)&prime) {
                v50 %= *(void *)&prime;
              }
            }
            else
            {
              v50 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 248) + 8 * v50) = v10;
            unint64_t v55 = (void *)*v49;
            if (*v49)
            {
              do
              {
                unint64_t v56 = v55[1];
                if (v51.u32[0] > 1uLL)
                {
                  if (v56 >= *(void *)&prime) {
                    v56 %= *(void *)&prime;
                  }
                }
                else
                {
                  v56 &= *(void *)&prime - 1;
                }
                if (v56 != v50)
                {
                  uint64_t v57 = *(void *)(a1 + 248);
                  if (!*(void *)(v57 + 8 * v56))
                  {
                    *(void *)(v57 + 8 * v56) = v49;
                    goto LABEL_98;
                  }
                  *BOOL v49 = *v55;
                  *unint64_t v55 = **(void **)(*(void *)(a1 + 248) + 8 * v56);
                  **(void **)(*(void *)(a1 + 248) + 8 * v56) = v55;
                  unint64_t v55 = v49;
                }
                unint64_t v56 = v50;
LABEL_98:
                BOOL v49 = v55;
                unint64_t v55 = (void *)*v55;
                unint64_t v50 = v56;
              }
              while (v55);
            }
          }
          unint64_t v35 = (unint64_t)prime;
        }
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v32 >= v35) {
            uint64_t Attributes = v32 % v35;
          }
          else {
            uint64_t Attributes = v32;
          }
        }
        else
        {
          uint64_t Attributes = (v35 - 1) & v32;
        }
        goto LABEL_107;
      }
LABEL_128:
      v9 += 2;
    }
    while (v9 != v86);
  }
  char v95 = 0;
  std::string::size_type v96 = 0;
  int64_t v97 = 0;
  std::string::size_type v62 = (void ***)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v85 + 56))(v85);
  std::string::size_type v63 = **v62;
  for (uint64_t k = (*v62)[1]; v63 != k; v63 += 2)
  {
    uint64_t v65 = *v63;
    uint64_t v66 = (*(uint64_t (**)(void))(*(void *)*v63 + 64))(*v63);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v66 + 104))(v66))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v65 + 200))(&v93, v65);
      if (*(char *)(v93.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, *(const std::string::value_type **)v93.__r_.__value_.__l.__data_, *(void *)(v93.__r_.__value_.__r.__words[0] + 8));
      }
      else
      {
        long long v67 = *(_OWORD *)v93.__r_.__value_.__l.__data_;
        v94.__r_.__value_.__r.__words[2] = *(void *)(v93.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v67;
      }
      std::string::size_type v92 = &v93;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      uint64_t v68 = *(void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)v85 + 88))(v85);
      uint64_t v69 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)v85 + 88))(v85);
      uint64_t v70 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v68, *(void *)(v69 + 8), (unsigned __int8 **)&v94);
      if (v70 != *(void *)((*(uint64_t (**)(MIL::IRObject *))(*(void *)v85 + 88))(v85) + 8))
      {
        unint64_t v71 = v96;
        if ((unint64_t)v96 >= v97)
        {
          uint64_t v73 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v95, (uint64_t)&v94);
        }
        else
        {
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v96, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v72 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
            v96->__r_.__value_.__r.__words[2] = v94.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
          }
          uint64_t v73 = v71 + 1;
        }
        std::string::size_type v96 = v73;
      }
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v74 = MIL::IRObject::GetLocation(v85);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a1, (uint64_t)v95, (uint64_t)v96, (uint64_t)v85 + 64, v74);
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
}

void sub_1921736BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *(void *)(v31 - 104) = v30;
  if (a30 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19217395CLL);
}

void sub_1921736D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,char a22)
{
  a21 = (void **)&a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  JUMPOUT(0x19217395CLL);
}

void sub_1921736F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    unint64_t v32 = __cxa_begin_catch(a1);
    uint64_t Location = MIL::IRObject::GetLocation(v30);
    (*(void (**)(uint64_t))(*(void *)Location + 24))(Location);
    int v34 = *(char *)(v31 - 89);
    uint64_t v35 = *(void *)(v31 - 112);
    uint8x8_t v36 = (char *)(*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
    std::string::basic_string[abi:ne180100]<0>(&a25, v36);
    if (v34 >= 0) {
      uint64_t v37 = v31 - 112;
    }
    else {
      uint64_t v37 = v35;
    }
    if (a30 >= 0) {
      unint64_t v38 = (uint64_t *)&a25;
    }
    else {
      unint64_t v38 = a25;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", v37, (uint64_t)v38);
  }
  JUMPOUT(0x1921739C4);
}

void sub_1921737C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  __cxa_end_catch();
  JUMPOUT(0x1921739C4);
}

void sub_192173800()
{
}

void sub_1921738D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 89) < 0) {
    operator delete(*(void **)(v30 - 112));
  }
  __cxa_end_catch();
  JUMPOUT(0x1921739C4);
}

void sub_192173914()
{
}

void sub_192173958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::string __p = (void *)(v33 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::__unordered_map_hasher<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::hash<MIL::IROperator const*>,std::equal_to<MIL::IROperator const*>,true>,std::__unordered_map_equal<MIL::IROperator const*,std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>,std::equal_to<MIL::IROperator const*>,std::hash<MIL::IROperator const*>,true>,std::allocator<std::__hash_value_type<MIL::IROperator const*,std::function<void ()(MIL::IROperation const&)>>>>::find<MIL::IROperator const*>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  size_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(void *a1, uint64_t a2)
{
  int8x8_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    char v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int8x8_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          char v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        char v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  int8x8_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    char v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        int8x8_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          __n128 result = 0;
          char v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        __n128 result = 0;
        char v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      unint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      unint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      int8x8_t v7 = (unsigned __int8 *)a3;
    }
    else {
      int8x8_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint8x8_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint8x8_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::__function::__func<std::__bind<void (Espresso::MILTranslator::LayerTranslator::*)(MIL::IROperation const&),Espresso::MILTranslator::LayerTranslator*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (Espresso::MILTranslator::LayerTranslator::*)(MIL::IROperation const&),Espresso::MILTranslator::LayerTranslator*,std::placeholders::__ph<1> const&>>,void ()(MIL::IROperation const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  int8x8_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

void Espresso::MILTranslator::LayerTranslator::GetUniqueLayerName(uint64_t a1, uint64_t a2, MIL::IROperation *a3, const void **a4)
{
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v9, a3);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a4, (uint64_t)__p);
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a2 + 168), (uint64_t)__p, a1);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_192173E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *Espresso::MILTranslator::NameGenerator::NameForPrefix@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
  for (unsigned int i = 0; ; ++i)
  {
    if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1, a3))
    {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(a3 + 8);
      }
      if (v7) {
        break;
      }
    }
    std::to_string(&__p, i);
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      std::string v9 = (const std::string::value_type *)a2;
    }
    else {
      std::string v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::string::insert(&__p, 0, v9, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v16[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v16[0];
    *(void *)(a3 + 15) = *(void *)((char *)v16 + 7);
    *(unsigned char *)(a3 + 23) = v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a1, a3, a3);
}

void sub_192173FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

const void **std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **result@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (void *)a3;
  int v4 = *((char *)result + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)result + 23);
  }
  else {
    size_t v5 = (size_t)result[1];
  }
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  unint64_t v8 = v7 + v5;
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v10 = result;
  if (v8 <= 0x16)
  {
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 23) = v8;
    if (!v5) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17) {
    uint64_t v11 = v8 | 7;
  }
  uint64_t v12 = v11 + 1;
  __n128 result = (const void **)operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  *uint64_t v3 = result;
  uint64_t v3 = result;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0) {
      char v13 = v10;
    }
    else {
      char v13 = *v10;
    }
    __n128 result = (const void **)memmove(v3, v13, v5);
  }
LABEL_18:
  uint64_t v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = *a2;
    }
    __n128 result = (const void **)memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return result;
}

std::string *Espresso::MILTranslator::LayerTranslator::GetLayerName(std::string *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t Attribute = MIL::IRObject::TryGetAttribute();
  uint64_t v5 = Attribute;
  if (v15 < 0)
  {
    operator delete(__p);
    if (v5) {
      return (std::string *)MIL::IRValue::GetScalar<std::string>();
    }
  }
  else if (Attribute)
  {
    return (std::string *)MIL::IRValue::GetScalar<std::string>();
  }
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  __n128 result = (std::string *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 176))(a2);
  size_t v7 = (MIL::IRNamedValueType **)result->__r_.__value_.__r.__words[0];
  std::string::size_type size = (MIL::IRNamedValueType **)result->__r_.__value_.__l.__size_;
  if ((MIL::IRNamedValueType **)result->__r_.__value_.__l.__data_ != size)
  {
    char v9 = 1;
    do
    {
      if ((v9 & 1) == 0) {
        std::string::append(this, "_");
      }
      uint64_t Name = MIL::IRNamedValueType::GetName(*v7);
      int v11 = *(char *)(Name + 23);
      if (v11 >= 0) {
        uint64_t v12 = (const std::string::value_type *)Name;
      }
      else {
        uint64_t v12 = *(const std::string::value_type **)Name;
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *(unsigned __int8 *)(Name + 23);
      }
      else {
        std::string::size_type v13 = *(void *)(Name + 8);
      }
      __n128 result = std::string::append(this, v12, v13);
      char v9 = 0;
      v7 += 2;
    }
    while (v7 != size);
  }
  return result;
}

void sub_192174240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::GetUniqueBlobNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v6 != v7)
  {
    unint64_t v8 = (void *)(a2 + 128);
    do
    {
      Espresso::MILTranslator::NameGenerator::NameForPrefix(v8, v6, (uint64_t)__p);
      unint64_t v10 = *(void *)(a1 + 8);
      unint64_t v9 = *(void *)(a1 + 16);
      if (v10 >= v9)
      {
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(void *)a1) >> 3);
        unint64_t v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(void *)a1) >> 3);
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x555555555555555) {
          unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v15 = v13;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = (std::string *)(v15 + 24 * v12);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v15;
        __v.__begin_ = v17;
        __v.__end_cap_.__value_ = (std::string *)(v15 + 24 * v16);
        long long v18 = *(_OWORD *)__p;
        v17->__r_.__value_.__r.__words[2] = v22;
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        __p[1] = 0;
        std::string::size_type v22 = 0;
        __p[0] = 0;
        __v.__end_ = v17 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
        uint64_t v19 = *(void *)(a1 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v20 = SHIBYTE(v22);
        *(void *)(a1 + 8) = v19;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)__p;
        *(void *)(v10 + 16) = v22;
        *(_OWORD *)unint64_t v10 = v11;
        *(void *)(a1 + 8) = v10 + 24;
      }
      v6 += 24;
    }
    while (v6 != v7);
  }
}

void sub_192174410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= __n) {
    return;
  }
  if (__n >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v5 = 24 * __n;
  uint64_t v6 = (char *)operator new(24 * __n);
  uint64_t v7 = (std::string *)&v6[v5];
  unint64_t v8 = (std::string *)&v6[24 * (end - begin)];
  if (end == begin)
  {
    this->__begin_ = v8;
    this->__end_ = v8;
    this->__end_cap_.__value_ = v7;
    if (!begin) {
      return;
    }
    goto LABEL_13;
  }
  unint64_t v9 = (std::string *)&v6[24 * (end - begin)];
  do
  {
    long long v10 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
    v9[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9[-1].__r_.__value_.__l.__data_ = v10;
    --v9;
    end[-1].__r_.__value_.__l.__size_ = 0;
    end[-1].__r_.__value_.__r.__words[2] = 0;
    end[-1].__r_.__value_.__r.__words[0] = 0;
    --end;
  }
  while (end != begin);
  std::vector<std::string>::pointer v11 = this->__begin_;
  std::vector<std::string>::pointer begin = this->__end_;
  this->__begin_ = v9;
  this->__end_ = v8;
  this->__end_cap_.__value_ = v7;
  if (begin != v11)
  {
    do
    {
      if (SHIBYTE(begin[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(begin[-1].__r_.__value_.__l.__data_);
      }
      --begin;
    }
    while (begin != v11);
    std::vector<std::string>::pointer begin = v11;
  }
  if (begin)
  {
LABEL_13:
    operator delete(begin);
  }
}

void Espresso::MILTranslator::LayerTranslator::TranslateMul(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
}

void Espresso::MILTranslator::LayerTranslator::TranslateAdd(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
}

void Espresso::MILTranslator::LayerTranslator::AddGather(uint64_t a1, const MIL::IROperation *a2, unsigned int a3)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&v98, a2);
  (*(void (**)(unsigned char *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(__p, a2);
  if (*(char *)(*(void *)__p + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v119, **(const std::string::value_type ***)__p, *(void *)(*(void *)__p + 8));
  }
  else
  {
    long long v6 = **(_OWORD **)__p;
    *(void *)&long long v120 = *(void *)(*(void *)__p + 16);
    long long v119 = v6;
  }
  char v95 = 0;
  std::string::size_type v96 = 0;
  int64_t v97 = 0;
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  v94.__r_.__value_.__s.__data_[8] = 0;
  char v95 = (std::string *)operator new(0x18uLL);
  std::string::size_type v96 = v95;
  int64_t v97 = v95 + 1;
  std::string::size_type v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v97, &v119, (long long *)((char *)&v120 + 8), v95);
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
  std::string::basic_string[abi:ne180100]<0>(&v119, "axis");
  if (MIL::IROperation::IsParameterSet())
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "axis");
    MIL::IROperation::GetParameterValue();
    int v7 = MIL::IRValue::GetScalar<int>();
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    int v7 = 0;
  }
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  std::string::basic_string[abi:ne180100]<0>(&v119, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v9 = MIL::IRValueType::AsTensorType(ParameterType);
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 96))(v9);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  std::string::basic_string[abi:ne180100]<0>(&v119, "x");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  unint64_t v14 = v11 - v12;
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  unsigned int v15 = ((v14 >> 3) & (v7 >> 31)) + v7;
  if (v14 != 16
    || a3
    || (v15 <= 1 ? (_ZF = ParameterValue == 0) : (_ZF = 1),
        _ZF || (*(unsigned int (**)(uint64_t))(*(void *)v9 + 88))(v9) == 11))
  {
    std::string::basic_string[abi:ne180100]<0>(&v94, "x");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)&v119, a1, (uint64_t)&v94, a2, 0);
    std::string::basic_string[abi:ne180100]<0>(&v93, "indices");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)((char *)&v120 + 8), a1, (uint64_t)&v93, a2, 0);
    memset(__p, 0, 24);
    v89[0] = __p;
    LOBYTE(v89[1]) = 0;
    *(void *)std::string __p = operator new(0x30uLL);
    *(void *)&__p[8] = *(void *)__p;
    *(void *)&__p[16] = *(void *)__p + 48;
    uint64_t v17 = 0;
    *(void *)&__p[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p[16], &v119, v122, *(std::string **)__p);
    do
    {
      if (*((char *)&v121 + v17 + 15) < 0) {
        operator delete(*(void **)((char *)&v120 + v17 + 8));
      }
      v17 -= 24;
    }
    while (v17 != -48);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    LODWORD(v93.__r_.__value_.__r.__words[1]) = 0;
    WORD2(v93.__r_.__value_.__r.__words[1]) = 257;
    v93.__r_.__value_.__r.__words[0] = __PAIR64__(v15, a3);
    uint64_t v18 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 64))(a2);
    uint64_t v19 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    std::string::basic_string((std::string *)&v119, v19, 0, 3uLL, (std::allocator<char> *)&v94);
    if (SBYTE7(v120) < 0)
    {
      if (*((void *)&v119 + 1) != 3
        || (*(_WORD *)v119 == 28521 ? (BOOL v21 = *(unsigned char *)(v119 + 2) == 115) : (BOOL v21 = 0), !v21))
      {
        operator delete((void *)v119);
        goto LABEL_156;
      }
    }
    else
    {
      if (SBYTE7(v120) != 3) {
        goto LABEL_156;
      }
      if ((unsigned __int16)v119 != 28521 || BYTE2(v119) != 115) {
        goto LABEL_156;
      }
    }
    uint64_t v22 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 64))(a2);
    uint64_t v23 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
    std::string::basic_string(&v94, v23, 0, 5uLL, (std::allocator<char> *)v89);
    int OpsetVersionInfo = Espresso::MILUtil::GetOpsetVersionInfo(&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if ((SBYTE7(v120) & 0x80000000) == 0)
    {
      if (OpsetVersionInfo < 17) {
        goto LABEL_156;
      }
LABEL_55:
      std::string::basic_string[abi:ne180100]<0>(&v119, "validate_indices");
      int IsParameterSet = MIL::IROperation::IsParameterSet();
      int v26 = IsParameterSet;
      if (SBYTE7(v120) < 0)
      {
        operator delete((void *)v119);
        if (!v26)
        {
LABEL_155:
          v93.__r_.__value_.__s.__data_[13] = 0;
          goto LABEL_156;
        }
      }
      else if (!IsParameterSet)
      {
        goto LABEL_155;
      }
      std::string::basic_string[abi:ne180100]<0>(&v119, "validate_indices");
      MIL::IROperation::GetParameterValue();
      v93.__r_.__value_.__s.__data_[12] = MIL::IRValue::GetScalar<BOOL>();
      if (SBYTE7(v120) < 0) {
        operator delete((void *)v119);
      }
      goto LABEL_155;
    }
    operator delete((void *)v119);
    if (OpsetVersionInfo > 16) {
      goto LABEL_55;
    }
LABEL_156:
    std::string::basic_string[abi:ne180100]<0>(&v119, "batch_dims");
    if (MIL::IROperation::IsParameterSet())
    {
      std::string::basic_string[abi:ne180100]<0>(&v94, "batch_dims");
      MIL::IROperation::GetParameterValue();
      int v74 = MIL::IRValue::GetScalar<int>();
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      int v74 = 0;
    }
    if (SBYTE7(v120) < 0) {
      operator delete((void *)v119);
    }
    LODWORD(v93.__r_.__value_.__r.__words[1]) = v74;
    uint64_t v75 = *(void *)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&v119, "gather_nd");
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v94, a2);
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::gather_nd_params_t>(&v84, v75, (uint64_t)&v119, (uint64_t)&v94, (uint64_t)&v93, (uint64_t)__p, (uint64_t *)&v95, Location);
    if (v85) {
      nitro::nitro_function::nitro_function(v85);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v120) < 0) {
      operator delete((void *)v119);
    }
    *(void *)&long long v119 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    goto LABEL_169;
  }
  std::string::basic_string[abi:ne180100]<0>(&v119, "indices");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v94, a1, (uint64_t)&v119, a2, 0);
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)__p, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)std::string __p = v94;
  }
  long long v119 = 0uLL;
  *(void *)&long long v120 = 0;
  v93.__r_.__value_.__s.__data_[8] = 0;
  *(void *)&long long v119 = operator new(0x18uLL);
  *((void *)&v119 + 1) = v119;
  *(void *)&long long v120 = v119 + 24;
  *((void *)&v119 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v120, (long long *)__p, (long long *)&__p[24], (std::string *)v119);
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a1, (uint64_t *)&v119, a2);
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v94.__r_.__value_.__l.__size_;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v119, size + 7);
  if ((SBYTE7(v120) & 0x80u) == 0) {
    uint64_t v28 = &v119;
  }
  else {
    uint64_t v28 = (long long *)v119;
  }
  if (size)
  {
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v29 = &v94;
    }
    else {
      BOOL v29 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    memmove(v28, v29, size);
  }
  strcpy((char *)v28 + size, "_expand");
  Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)(a1 + 128), (uint64_t)&v119, (uint64_t)&v93);
  if (SBYTE7(v120) < 0) {
    operator delete((void *)v119);
  }
  uint64_t v123 = 0;
  long long v121 = 0u;
  memset(v122, 0, sizeof(v122));
  long long v119 = 0u;
  long long v120 = 0u;
  *(void *)((char *)&v119 + 4) = 0xFFFFFFFF00000001;
  uint64_t v30 = *(void *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, "expand_dims");
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v117, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
  }
  else {
    std::string v117 = v94;
  }
  v89[0] = 0;
  v89[1] = 0;
  unint64_t v90 = 0;
  v88.__begin_ = (std::vector<int>::pointer)v89;
  LOBYTE(v88.__end_) = 0;
  v89[0] = operator new(0x18uLL);
  v89[1] = v89[0];
  unint64_t v90 = (char *)v89[0] + 24;
  v89[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v90, (long long *)&v117, (long long *)&v118, (std::string *)v89[0]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v115, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string v115 = v93;
  }
  memset(&v88, 0, sizeof(v88));
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  v101.__r_.__value_.__s.__data_[8] = 0;
  v88.__begin_ = (std::vector<int>::pointer)operator new(0x18uLL);
  v88.__end_ = v88.__begin_;
  v88.__end_cap_.__value_ = v88.__begin_ + 6;
  v88.__end_ = (std::vector<int>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v88.__end_cap_, (long long *)&v115, (long long *)&v116, (std::string *)v88.__begin_);
  uint64_t v31 = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::expand_dims_params_t>(&v91, v30, (uint64_t)__p, (uint64_t)&v93, (uint64_t)&v119, (uint64_t)v89, (uint64_t *)&v88, v31);
  if (v92) {
    nitro::nitro_function::nitro_function(v92);
  }
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  v88.__begin_ = (std::vector<int>::pointer)v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v117.__r_.__value_.__l.__data_);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "x");
  unint64_t v32 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v33 = MIL::IRValueType::AsTensorType(v32);
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 96))(v33);
  v89[0] = 0;
  v89[1] = 0;
  unint64_t v90 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v89, *(const void **)v34, *(void *)(v34 + 8), (uint64_t)(*(void *)(v34 + 8) - *(void *)v34) >> 3);
  unsigned int v82 = v15;
  uint64_t v83 = a1;
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v35 = 0;
  std::string::size_type v36 = 0;
  uint64_t v37 = 0;
  memset(&v117, 0, sizeof(v117));
  unint64_t v38 = (MIL::IRDimension **)v89[1];
  unint64_t v39 = (MIL::IRDimension **)v89[0];
  do
  {
    uint64_t v40 = MIL::IRDimension::AsConstant(*v39);
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 48))(v40);
    int v42 = v41;
    if ((unint64_t)v37 >= v36)
    {
      uint64_t v44 = (v37 - v35) >> 2;
      unint64_t v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      if ((uint64_t)(v36 - (void)v35) >> 1 > v45) {
        unint64_t v45 = (uint64_t)(v36 - (void)v35) >> 1;
      }
      if (v36 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46) {
        unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (char *)(v46 + 4 * v44);
      *(_DWORD *)uint64_t v48 = v42;
      std::string::size_type v43 = (std::string::size_type)(v48 + 4);
      while (v37 != v35)
      {
        int v49 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }
      std::string::size_type v36 = v46 + 4 * v47;
      v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
      v117.__r_.__value_.__l.__size_ = v43;
      v117.__r_.__value_.__r.__words[2] = v36;
      if (v35) {
        operator delete(v35);
      }
      uint64_t v35 = v48;
    }
    else
    {
      *(_DWORD *)uint64_t v37 = v41;
      std::string::size_type v43 = (std::string::size_type)(v37 + 4);
    }
    v117.__r_.__value_.__l.__size_ = v43;
    ++v39;
    uint64_t v37 = (char *)v43;
  }
  while (v39 != v38);
  unint64_t v50 = (void *)v117.__r_.__value_.__r.__words[0];
  int v51 = *(_DWORD *)v117.__r_.__value_.__l.__data_;
  int v52 = *(_DWORD *)(v117.__r_.__value_.__r.__words[0] + 4);
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v109 = _D0;
  uint64_t v114 = 0;
  *(void *)&__p[12] = 0;
  *(void *)&__p[20] = _D0;
  uint64_t v110 = 0;
  uint64_t v107 = 0;
  int v108 = -1;
  int v105 = 0;
  uint64_t v111 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v104 = 0x100000000;
  *(_DWORD *)std::string __p = v52;
  *(_DWORD *)&__p[4] = v51;
  if (v82 == 1)
  {
    *(_DWORD *)std::string __p = v51;
    *(_DWORD *)&__p[4] = v52;
  }
  *(_DWORD *)&__p[8] = 0;
  char v106 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v88, "x");
  uint64_t v57 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v58 = MIL::IRValueType::AsTensorType(v57);
  unsigned int v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 88))(v58) - 2;
  if (v59 >= 0x10 || ((0xF79Du >> v59) & 1) == 0) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Type unsupported by Espresso encountered");
  }
  int v60 = dword_192E06160[v59];
  if (SHIBYTE(v88.__end_cap_.__value_) < 0) {
    operator delete(v88.__begin_);
  }
  if (v82 == 1) {
    std::string::append(v95, "_pre_transpose");
  }
  uint64_t v61 = *(void *)(v83 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v88, "inner_product");
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v101, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string v101 = v93;
  }
  memset(&v115, 0, sizeof(v115));
  std::string::size_type v99 = &v115;
  char v100 = 0;
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v115.__r_.__value_.__l.__size_ = v115.__r_.__value_.__r.__words[0];
  v115.__r_.__value_.__r.__words[2] = v115.__r_.__value_.__r.__words[0] + 24;
  v115.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v115.__r_.__value_.__r.__words[2], (long long *)&v101, (long long *)&v102, (std::string *)v115.__r_.__value_.__l.__data_);
  uint64_t v62 = MIL::IRObject::GetLocation(a2);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>(&v86, v61, (uint64_t)&v88, (uint64_t)&v98, (uint64_t)__p, (uint64_t *)&v115, (uint64_t *)&v95, v60, v62);
  std::string::size_type v99 = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__end_cap_.__value_) < 0) {
    operator delete(v88.__begin_);
  }
  uint64_t v64 = v86;
  std::string::size_type v63 = v87;
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "x");
  Espresso::MILTranslator::LayerTranslator::SetKernelWeight(v83, v64, a2, (uint64_t)&v88, v82 == 0, 0, 0, 0);
  if (SHIBYTE(v88.__end_cap_.__value_) < 0) {
    operator delete(v88.__begin_);
  }
  if (v82 == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v88, "indices");
    uint64_t v65 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v66 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v65);
    uint64_t v67 = MIL::IRTensorValueType::Rank(v66);
    if (SHIBYTE(v88.__end_cap_.__value_) < 0) {
      operator delete(v88.__begin_);
    }
    if (v67 == -1)
    {
      uint64_t v77 = MIL::IRObject::GetLocation(a2);
      (*(void (**)(std::vector<int> *__return_ptr))(*(void *)v77 + 24))(&v88);
      int value_high = SHIBYTE(v88.__end_cap_.__value_);
      std::vector<int>::pointer begin = v88.__begin_;
      std::string::basic_string[abi:ne180100]<0>(&v115, "Indices rank must be known at compile time.");
      if (value_high >= 0) {
        uint64_t v80 = &v88;
      }
      else {
        uint64_t v80 = (std::vector<int> *)begin;
      }
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v81 = &v115;
      }
      else {
        std::string v81 = (std::string *)v115.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v80, (uint64_t)v81);
    }
    LODWORD(v115.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector(&v88, v67 + 1, (const std::vector<int>::value_type *)&v115);
    uint64_t v68 = v88.__begin_;
    *v88.__begin_ = v67;
    if (v67 >= 1)
    {
      for (uint64_t i = 0; i != v67; ++i)
        v68[i + 1] = i;
    }
    uint64_t v70 = v95;
    uint64_t v71 = (char *)v88.__end_ - (char *)v68;
    if (v88.__end_ == v68) {
      long long v72 = 0;
    }
    else {
      long long v72 = v68;
    }
    (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v115, a2);
    uint64_t v73 = v115.__r_.__value_.__r.__words[0];
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v101, a2);
    Espresso::MILTranslator::LayerTranslator::AddTranspose(v83, a2, (uint64_t)v70, v72, v71 >> 2, v73, (uint64_t)&v101);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
    if (v88.__begin_)
    {
      v88.__end_ = v88.__begin_;
      operator delete(v88.__begin_);
    }
  }
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  if (v87) {
    nitro::nitro_function::nitro_function(v87);
  }
  operator delete(v50);
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
LABEL_169:
  *(void *)&long long v119 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
}

void sub_192175514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v75) {
    nitro::nitro_function::nitro_function(v75);
  }
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a74)
  {
    a75 = (uint64_t)a74;
    operator delete(a74);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  *(void *)(v76 - 240) = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v76 - 240));
  if (a48 < 0) {
    operator delete(a43);
  }
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateGather(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
}

void Espresso::MILTranslator::LayerTranslator::TranslateGeLU(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v35, "mode");
  if (MIL::IROperation::IsParameterSet())
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mode");
    MIL::IROperation::GetParameterValue();
    MIL::IRValue::GetScalar<std::string>();
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "EXACT");
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v40 < 0)
  {
    switch(v38)
    {
      case 5:
        if (*(_DWORD *)v37 == 1128355909 && v37[4] == 84) {
          goto LABEL_52;
        }
        break;
      case 18:
        if (*(void *)v37 == 0x5050415F484E4154
          && *((void *)v37 + 1) == 0x4954414D49584F52
          && *((_WORD *)v37 + 8) == 20047)
        {
          goto LABEL_46;
        }
        break;
      case 21:
        int v4 = (unsigned char **)v37;
        goto LABEL_16;
      default:
        break;
    }
LABEL_58:
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(v35);
    int v22 = v36;
    uint64_t v23 = (void **)v35[0];
    std::operator+<char>();
    if (v22 >= 0) {
      uint64_t v24 = v35;
    }
    else {
      uint64_t v24 = v23;
    }
    if (v34 >= 0) {
      char v25 = __p;
    }
    else {
      char v25 = (void **)__p[0];
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)v24, (uint64_t)v25);
  }
  if (v40 == 5)
  {
    if (v37 != 1128355909 || BYTE4(v37) != 84) {
      goto LABEL_58;
    }
LABEL_52:
    int v10 = 19;
    goto LABEL_53;
  }
  if (v40 == 18)
  {
    if (v37 != (unsigned char *)0x5050415F484E4154 || v38 != 0x4954414D49584F52 || v39 != 20047) {
      goto LABEL_58;
    }
LABEL_46:
    int v10 = 21;
    goto LABEL_53;
  }
  if (v40 != 21) {
    goto LABEL_58;
  }
  int v4 = &v37;
LABEL_16:
  uint64_t v5 = (uint64_t)*v4;
  long long v6 = v4[1];
  uint64_t v7 = *(uint64_t *)((char *)v4 + 13);
  if (v5 != 0x5F44494F4D474953 || v6 != (unsigned char *)0x4D49584F52505041 || v7 != 0x4E4F4954414D4958) {
    goto LABEL_58;
  }
  int v10 = 22;
LABEL_53:
  int v26 = v10;
  __asm { FMOV            V0.2S, #1.0 }
  uint64_t v27 = _D0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  Espresso::MILTranslator::LayerTranslator::AddActivationLayer(&v31, (uint64_t)this, a2, (uint64_t)&v26);
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (v40 < 0) {
    operator delete(v37);
  }
}

void sub_192175C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::AddActivationLayer(void ****a1, uint64_t a2, MIL::IRObject *a3, uint64_t a4)
{
  *(void *)&long long v19 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, MIL::IRObject *))(*(void *)a3 + 200))(v15, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v18, a2, (uint64_t)&__p, a3, 0);
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  p_int data = 0;
  uint64_t v16 = (void ***)&v12;
  LOBYTE(v17) = 0;
  uint64_t v12 = (std::string *)operator new(0x18uLL);
  unint64_t v13 = v12;
  p_int data = (void **)&v12[1].__r_.__value_.__l.__data_;
  unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v18, &v19, v12);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs(a2, (uint64_t *)&v12, a3);
  uint64_t v8 = *(void *)(a2 + 40);
  std::string::basic_string[abi:ne180100]<0>(&v18, "activation");
  Espresso::MILTranslator::LayerTranslator::GetLayerName(&__p, a3);
  uint64_t Location = MIL::IRObject::GetLocation(a3);
  Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::activation_params>((uint64_t *)&v16, v8, (uint64_t)&v18, (uint64_t)&__p, a4, (uint64_t)&v12, v15, Location);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  int v10 = v17;
  *a1 = v16;
  a1[1] = (void ***)v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  uint64_t v12 = (std::string *)v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_192175EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (*(char *)(v22 - 57) < 0) {
    operator delete(*(void **)(v22 - 80));
  }
  *(void *)(v22 - 80) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 80));
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::activation_params>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::activation_params>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192176160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::activation_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unsigned int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  char v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  char v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1921763A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::expand_dims_params_t>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (*(void *)(a6 + 8) == *(void *)a6) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  unsigned int v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a2 + 200), *(unsigned __int8 **)a6);
  if (!v15) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v20 = *((_DWORD *)v15 + 10);
  std::vector<Espresso::compute_path>::vector(__p, 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3), &v20);
  uint64_t v17 = *a7;
  uint64_t v16 = a7[1];
  if (*a7 != v16)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 240, v17, v17);
      v17 += 24;
    }
    while (v17 != v16);
  }
  Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(a2, a7, (uint64_t *)__p);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a8 + 24))(&__str, a8);
  std::string::operator=((std::string *)(a2 + 56), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__str, *(void *)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3));
  memset(v21, 0, sizeof(v21));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v21, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add<Espresso::expand_dims_params_t>(a1, (uint64_t *)a2, a3, a4, a5, (uint64_t)__str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_, v21);
  p_str = (std::string *)v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  p_str = &__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_192176624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **a23)
{
  a23 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::expand_dims_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  uint64_t v14 = a2[12];
  LODWORD(v23[0]) = (***(uint64_t (****)(void))(a2[14] + 8))(*(void *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v23);
  unsigned int v15 = (std::__shared_weak_count *)a1[1];
  v24[0] = *a1;
  v24[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v23, 0, sizeof(v23));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v23, (uint64_t)v19, v20, 0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3));
  memset(v22, 0, sizeof(v22));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v22, v16, v17, 0xAAAAAAAAAAAAAAABLL * ((v17 - v16) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v24, a3, a4, (uint64_t)(a2 + 7), v23, v22);
  char v25 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  char v25 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  if (*a2) {
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v19, &v16);
  }
  v23[0] = (std::string *)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  v23[0] = (std::string *)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_192176868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  if (v16) {
    nitro::nitro_function::nitro_function(v16);
  }
  *(void *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(void *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateSliceByIndex(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
}

void Espresso::MILTranslator::LayerTranslator::TranslateMatMul(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
  *(void *)&long long v98 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v79, a2);
  std::string::basic_string[abi:ne180100]<0>(__str, "x");
  ParameterType = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v5 = MIL::IRValueType::AsTensorType(ParameterType);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "y");
  uint64_t v7 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v8 = MIL::IRValueType::AsTensorType(v7);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 88))(v8);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "y");
  int v10 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
  uint64_t v11 = MIL::IRValueType::AsTensorType(v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 96))(v11);
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v76, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v14 = v76;
  uint64_t v13 = v77;
  std::string::basic_string[abi:ne180100]<0>(__str, "y");
  uint64_t ParameterValue = MIL::IROperation::TryGetParameterValue();
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "transpose_x");
  MIL::IROperation::GetParameterValue();
  char v16 = MIL::IRValue::GetScalar<BOOL>();
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "transpose_y");
  MIL::IROperation::GetParameterValue();
  int v17 = MIL::IRValue::GetScalar<BOOL>();
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  int64_t v18 = v13 - v14;
  if (ParameterValue) {
    int v9 = v6;
  }
  if ((v16 & 1) == 0 && v18 == 16 && ParameterValue)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v97, (uint64_t)this, (uint64_t)&__p, a2, 0);
    memset(__str, 0, 24);
    LOBYTE(v74) = 0;
    *(void *)std::string __str = operator new(0x18uLL);
    *(void *)&__str[8] = *(void *)__str;
    *(void *)&__str[16] = *(void *)__str + 24;
    *(void *)&__str[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str[16], (long long *)&v97, &v98, *(std::string **)__str);
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)__str, a2);
    uint64_t v73 = (std::string *)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v76);
    unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
    uint64_t v21 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v76 + 1));
    unsigned int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
    if (v17)
    {
      uint64_t v23 = MIL::IRDimension::AsConstant(*((MIL::IRDimension **)v76 + 1));
      unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
      uint64_t v24 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)v76);
      unsigned int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
    }
    BOOL v88 = 0;
    int v90 = -1;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v91 = _D0;
    uint64_t v96 = 0;
    *(void *)&__str[20] = _D0;
    uint64_t v92 = 0;
    uint64_t v86 = 0;
    uint64_t v89 = 0;
    *(_DWORD *)&__str[16] = 0;
    int v87 = 0;
    uint64_t v93 = 0;
    uint64_t v95 = 0;
    uint64_t v94 = 0;
    *(_OWORD *)std::string __str = __PAIR64__(v20, v22);
    std::string::basic_string[abi:ne180100]<0>(&v97, "x");
    uint64_t v30 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v31 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v30);
    uint64_t v32 = MIL::IRTensorValueType::Rank(v31);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    BOOL v88 = (unint64_t)(v32 - 4) < 0xFFFFFFFFFFFFFFFDLL;
    uint64_t v33 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&v97, "inner_product");
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&__p, a2);
    std::string::basic_string[abi:ne180100]<0>(&v72, "x");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter(&v84, (uint64_t)this, (uint64_t)&v72, a2, 0);
    uint64_t v73 = 0;
    int v74 = 0;
    p_int data = 0;
    uint64_t v66 = &v73;
    char v67 = 0;
    uint64_t v73 = (std::string *)operator new(0x18uLL);
    int v74 = v73;
    p_int data = (void **)&v73[1].__r_.__value_.__l.__data_;
    int v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v84, (long long *)__str, v73);
    uint64_t Location = MIL::IRObject::GetLocation(a2);
    Espresso::MILTranslator::TypedEspressoBuilder::AddLayer<Espresso::inner_product_uniforms>((uint64_t *)&v65, v33, (uint64_t)&v97, (uint64_t)&__p, (uint64_t)__str, (uint64_t)&v73, v79, Location);
    uint64_t v66 = &v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    long long v35 = *(_OWORD *)&v65.__r_.__value_.__l.__data_;
    if (v65.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v65.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v97, "y");
    Espresso::MILTranslator::LayerTranslator::SetKernelWeight((uint64_t)this, v35, a2, (uint64_t)&v97, v17 ^ 1, 0, 0, v9 == 4);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v35 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v35 + 1));
    }
    if (v65.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v65.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v97, "x");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)__str, (uint64_t)this, (uint64_t)&v97, a2, 0);
    std::string::basic_string[abi:ne180100]<0>(&__p, "y");
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobFromParameter((std::string *)&__str[24], (uint64_t)this, (uint64_t)&__p, a2, 0);
    uint64_t v73 = 0;
    int v74 = 0;
    p_int data = 0;
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    v84.__r_.__value_.__s.__data_[8] = 0;
    uint64_t v73 = (std::string *)operator new(0x30uLL);
    int v74 = v73;
    p_int data = (void **)&v73[2].__r_.__value_.__l.__data_;
    uint64_t v36 = 0;
    int v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)__str, (long long *)((char *)&v89 + 4), v73);
    do
    {
      if (*((char *)&v89 + v36 + 3) < 0) {
        operator delete(*(void **)&__str[v36 + 24]);
      }
      v36 -= 24;
    }
    while (v36 != -48);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    Espresso::MILTranslator::LayerTranslator::EnsureInputBlobs((uint64_t)this, (uint64_t *)&v73, a2);
    std::string::basic_string[abi:ne180100]<0>(__str, "x");
    uint64_t v37 = (MIL::IRValueType *)MIL::IROperation::GetParameterType();
    uint64_t v38 = MIL::IRValueType::AsTensorType(v37);
    uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 96))(v38);
    memset(&v84, 0, sizeof(v84));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v84, *(const void **)v39, *(void *)(v39 + 8), (uint64_t)(*(void *)(v39 + 8) - *(void *)v39) >> 3);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    std::string::size_type v40 = v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0];
    if (v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0] == 8 || v18 == 8)
    {
      uint64_t v42 = v79[0];
      if (*(char *)(v79[0] + 23) >= 0) {
        size_t v43 = *(unsigned __int8 *)(v79[0] + 23);
      }
      else {
        size_t v43 = *(void *)(v79[0] + 8);
      }
      uint64_t v44 = __str;
      std::string::basic_string[abi:ne180100]((uint64_t)__str, v43 + 16);
      if (__str[23] < 0) {
        uint64_t v44 = *(unsigned char **)__str;
      }
      if (v43)
      {
        if (*(char *)(v42 + 23) >= 0) {
          unint64_t v45 = (const void *)v42;
        }
        else {
          unint64_t v45 = *(const void **)v42;
        }
        memmove(v44, v45, v43);
      }
      strcpy(&v44[v43], "__ranks_promoted");
      Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)this + 16, (uint64_t)__str, (uint64_t)&v72);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    else if (*(char *)(v79[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v79[0], *(void *)(v79[0] + 8));
    }
    else
    {
      long long v41 = *(_OWORD *)v79[0];
      v72.__r_.__value_.__r.__words[2] = *(void *)(v79[0] + 16);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v41;
    }
    v71[0] = 0;
    v71[1] = v16;
    _OWORD v71[2] = v17;
    uint64_t v46 = *((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&v66, "batch_matmul");
    Espresso::MILTranslator::LayerTranslator::GetLayerName(&v65, a2);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v83, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
    }
    else {
      std::string v83 = v72;
    }
    uint64_t v62 = 0;
    std::string::size_type v63 = 0;
    uint64_t v64 = 0;
    *(void *)std::string __str = &v62;
    __str[8] = 0;
    uint64_t v62 = (std::string *)operator new(0x18uLL);
    std::string::size_type v63 = v62;
    uint64_t v64 = v62 + 1;
    std::string::size_type v63 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, (long long *)&v83, (long long *)&v84, v62);
    uint64_t v47 = MIL::IRObject::GetLocation(a2);
    if (v74 == v73) {
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v48 = v47;
    int v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(v46 + 200), (unsigned __int8 *)v73);
    if (!v49) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v81 = *((_DWORD *)v49 + 10);
    std::vector<Espresso::compute_path>::vector(&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v62) >> 3), &v81);
    unint64_t v50 = v62;
    for (uint64_t i = v63; v50 != i; ++v50)
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v46 + 240, (uint64_t)v50, (uint64_t)v50);
    Espresso::MILTranslator::TypedEspressoBuilder::PropagateOutputTypes(v46, (uint64_t *)&v62, (uint64_t *)&__p);
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v48 + 24))(__str, v48);
    std::string::operator=((std::string *)(v46 + 56), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    memset(__str, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__str, (uint64_t)v73, (uint64_t)v74, 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v73) >> 3));
    memset(&v97, 0, sizeof(v97));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v97, (uint64_t)v62, (uint64_t)v63, 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (char *)v62) >> 3));
    Espresso::sequential_builder::add<Espresso::batch_matmul_params_t>(&v69, (uint64_t *)v46, (uint64_t)&v66, (uint64_t)&v65, (uint64_t)v71, *(uint64_t *)__str, *(uint64_t *)&__str[8], (uint64_t *)&v97);
    unsigned int v82 = &v97;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    unsigned int v82 = (std::string *)__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    if (*(char *)(v46 + 79) < 0)
    {
      **(unsigned char **)(v46 + 56) = 0;
      *(void *)(v46 + 64) = 0;
    }
    else
    {
      *(unsigned char *)(v46 + 56) = 0;
      *(unsigned char *)(v46 + 79) = 0;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    *(void *)std::string __str = &v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (v68 < 0) {
      operator delete(v66);
    }
    if (v40 == 8)
    {
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)__str, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)std::string __str = v72;
      }
      if (v18 == 8)
      {
        uint64_t v52 = v79[0];
        if (*(char *)(v79[0] + 23) >= 0) {
          size_t v53 = *(unsigned __int8 *)(v79[0] + 23);
        }
        else {
          size_t v53 = *(void *)(v79[0] + 8);
        }
        p_p = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v53 + 16);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v53)
        {
          if (*(char *)(v52 + 23) >= 0) {
            unint64_t v55 = (const void *)v52;
          }
          else {
            unint64_t v55 = *(const void **)v52;
          }
          memmove(p_p, v55, v53);
        }
        strcpy((char *)p_p + v53, "__x_rank_demoted");
        Espresso::MILTranslator::NameGenerator::NameForPrefix((void *)this + 16, (uint64_t)&__p, (uint64_t)&v97);
      }
      else if (*(char *)(v79[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)v79[0], *(void *)(v79[0] + 8));
      }
      else
      {
        long long v56 = *(_OWORD *)v79[0];
        v97.__r_.__value_.__r.__words[2] = *(void *)(v79[0] + 16);
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = v56;
      }
      std::string::operator=(&v72, &v97);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (v18 == 8 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v57 = operator new(4uLL);
      *uint64_t v57 = -2;
      v97.__r_.__value_.__l.__size_ = (std::string::size_type)(v57 + 1);
      v97.__r_.__value_.__r.__words[2] = (std::string::size_type)(v57 + 1);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
      std::string::basic_string[abi:ne180100]<0>(&v65, "__x_rank_demoted");
      Espresso::MILTranslator::LayerTranslator::GetUniqueLayerName((uint64_t)&v66, (uint64_t)this, a2, (const void **)&v65.__r_.__value_.__l.__data_);
      Espresso::MILTranslator::LayerTranslator::AddSqueeze(&v61, (uint64_t)this, a2, (uint64_t)__str, (int **)&v97, (uint64_t)&v72, (uint64_t)&v66);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v61.__r_.__value_.__l.__data_);
      }
      if (v68 < 0) {
        operator delete(v66);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      operator delete(v57);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    if (v18 == 8)
    {
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)__str, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)std::string __str = v72;
      }
      uint64_t v58 = operator new(4uLL);
      *uint64_t v58 = -1;
      v97.__r_.__value_.__l.__size_ = (std::string::size_type)(v58 + 1);
      v97.__r_.__value_.__r.__words[2] = (std::string::size_type)(v58 + 1);
      v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
      uint64_t v59 = v79[0];
      std::string::basic_string[abi:ne180100]<0>(&v65, "__y_rank_demoted");
      Espresso::MILTranslator::LayerTranslator::GetUniqueLayerName((uint64_t)&v66, (uint64_t)this, a2, (const void **)&v65.__r_.__value_.__l.__data_);
      Espresso::MILTranslator::LayerTranslator::AddSqueeze(&v60, (uint64_t)this, a2, (uint64_t)__str, (int **)&v97, v59, (uint64_t)&v66);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (v68 < 0) {
        operator delete(v66);
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      operator delete(v58);
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (v84.__r_.__value_.__r.__words[0])
    {
      v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    *(void *)std::string __str = &v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  }
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  *(void *)std::string __str = v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
}

void sub_1921776F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  a51 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  a37 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void Espresso::MILTranslator::LayerTranslator::TranslateMaximum(Espresso::MILTranslator::LayerTranslator *this, const MIL::IROperation *a2)
{
}

void anonymous namespace'::TensorShapeToInts(std::vector<int> *a1, uint64_t *a2)
{
  a1->__begin_ = 0;
  a1->__end_ = 0;
  a1->__end_cap_.__value_ = 0;
  std::vector<int>::reserve(a1, (a2[1] - *a2) >> 3);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v4 + 16))();
      if (v6) {
        int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      }
      else {
        int v7 = 1;
      }
      std::vector<int>::pointer end = a1->__end_;
      value = a1->__end_cap_.__value_;
      if (end >= value)
      {
        std::vector<int>::pointer begin = a1->__begin_;
        uint64_t v12 = end - a1->__begin_;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = (char *)value - (char *)begin;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          std::vector<int>::pointer begin = a1->__begin_;
          std::vector<int>::pointer end = a1->__end_;
        }
        else
        {
          uint64_t v16 = 0;
        }
        int v17 = (int *)(v15 + 4 * v12);
        *int v17 = v7;
        int v10 = v17 + 1;
        while (end != begin)
        {
          int v18 = *--end;
          *--int v17 = v18;
        }
        a1->__begin_ = v17;
        a1->__end_ = v10;
        a1->__end_cap_.__value_ = (int *)(v15 + 4 * v16);
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        int *end = v7;
        int v10 = end + 1;
      }
      a1->__end_ = v10;
      v4 += 8;
    }
    while (v4 != v5);
  }
}

void sub_192177CC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::BNNSEngine::context::network_transform_pre_allocation(Espresso::BNNSEngine::context *this, Espresso::net *a2)
{
  v308[1] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 568))
  {
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
    uint64_t v3 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
    __p[1] = 0;
    __p[0] = 0;
    *(void *)&long long v295 = 0;
    uint64_t v4 = *((void *)a2 + 4);
    if (*((void *)a2 + 5) != v4)
    {
      uint64_t v5 = v3;
      unint64_t v243 = 0;
      v244 = 0;
      v246 = 0;
      unint64_t v6 = 0;
      int v7 = (char *)a2 + 56;
      uint64_t v251 = (uint64_t)(v3 + 2);
      long long v253 = (char *)a2 + 96;
      v249 = (char *)a2 + 56;
      while (1)
      {
        uint64_t v8 = (uint64_t *)(v4 + 16 * v6);
        uint64_t v9 = *v8;
        int v10 = (std::__shared_weak_count *)v8[1];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(const void **)(v9 + 64);
        if (!v11) {
          goto LABEL_30;
        }
        if (!v12) {
          goto LABEL_30;
        }
        unint64_t v13 = *(std::__shared_weak_count **)(v9 + 72);
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = (int *)(*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12);
        int v250 = *v14;
        int v15 = v14[1];
        int v16 = v14[2];
        if (v13) {
          nitro::nitro_function::nitro_function(v13);
        }
        v304.__r_.__value_.__r.__words[0] = v6;
        int v17 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v7, v6, &v304)[3];
        v304.__r_.__value_.__r.__words[0] = v6;
        int v18 = (const std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v253, v6, &v304)[3];
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        unint64_t v19 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v251, v17, (uint64_t)&std::piecewise_construct, (long long **)&v304)+ 10);
        uint64_t v20 = v5[22];
        if (0xAAAAAAAAAAAAAAABLL * ((v5[23] - v20) >> 3) <= v19) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        unsigned int v22 = *(char **)(v20 + 24 * (int)v19);
        uint64_t v21 = *(char **)(v20 + 24 * (int)v19 + 8);
        if (v21 == v22 || v21 - v22 != 24) {
          goto LABEL_30;
        }
        while (1)
        {
          uint64_t v24 = *(void *)v22;
          if (*(void *)v22 == v6) {
            goto LABEL_28;
          }
          uint64_t v25 = *(void *)(*((void *)a2 + 4) + 16 * v24);
          int v26 = (void *)(v25 + 40);
          int v27 = *(char *)(v25 + 63);
          if (v27 < 0) {
            break;
          }
          if (v27 == 15) {
            goto LABEL_24;
          }
LABEL_28:
          v22 += 8;
          if (v22 == v21) {
            goto LABEL_29;
          }
        }
        if (*(void *)(v25 + 48) != 15) {
          goto LABEL_28;
        }
        int v26 = (void *)*v26;
LABEL_24:
        uint64_t v28 = (void *)*v26;
        uint64_t v29 = *(void *)((char *)v26 + 7);
        if (v28 != (void *)0x6974617669746361 || v29 != 0x646172675F6E6F69) {
          goto LABEL_28;
        }
        if ((v24 & 0x80000000) != 0) {
          goto LABEL_29;
        }
        v304.__r_.__value_.__r.__words[0] = *(void *)v22;
        uint64_t v31 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v253, v24, &v304)[3];
        v304.__r_.__value_.__r.__words[0] = v24;
        std::string __str = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v249, v24, &v304)[3];
        v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        unint64_t v32 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v251, v31, (uint64_t)&std::piecewise_construct, (long long **)&v304)+ 10);
        uint64_t v33 = v5[22];
        if (0xAAAAAAAAAAAAAAABLL * ((v5[23] - v33) >> 3) <= v32) {
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v34 = v33 + 24 * (int)v32;
        if (*(void *)(v34 + 8) - *(void *)v34 != 8) {
          goto LABEL_29;
        }
        unint64_t v286 = 0;
        unint64_t v286 = **(void **)v34;
        uint64_t v35 = *((void *)a2 + 4);
        uint64_t v36 = (uint64_t *)(v35 + 16 * v286);
        uint64_t v37 = (void *)(*v36 + 40);
        int v38 = *(char *)(*v36 + 63);
        if (v38 < 0)
        {
          if (*(void *)(*v36 + 48) == 22)
          {
            uint64_t v37 = (void *)*v37;
            goto LABEL_42;
          }
          goto LABEL_29;
        }
        if (v38 != 22) {
          goto LABEL_29;
        }
LABEL_42:
        uint64_t v39 = (void *)*v37;
        uint64_t v40 = v37[1];
        uint64_t v41 = *(void *)((char *)v37 + 14);
        if (v39 != (void *)0x6F635F6465737566 || v40 != 0x6F6974756C6F766ELL || v41 != 0x646172675F6E6F69)
        {
LABEL_29:
          int v7 = (char *)a2 + 56;
          goto LABEL_30;
        }
        uint64_t v282 = 0;
        uint64_t v282 = *(void *)(v5[19] + 8 * v19);
        uint64_t v44 = (uint64_t *)(v35 + 16 * v282);
        uint64_t v46 = *v44;
        unint64_t v45 = (std::__shared_weak_count *)v44[1];
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v47 = *(const void **)(v46 + 64);
        if (!v47)
        {
          int v7 = (char *)a2 + 56;
          goto LABEL_66;
        }
        uint64_t v241 = v45;
        if (!v239) {
          goto LABEL_65;
        }
        uint64_t v48 = *(std::__shared_weak_count **)(v46 + 72);
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v240 = v48;
        uint64_t v49 = *v36;
        unint64_t v50 = *(const void **)(*v36 + 64);
        if (!v50
        {
          if (v240) {
            nitro::nitro_function::nitro_function(v240);
          }
LABEL_65:
          int v7 = (char *)a2 + 56;
          unint64_t v45 = v241;
          goto LABEL_66;
        }
        v238 = v51;
        uint64_t v52 = *(std::__shared_weak_count **)(v49 + 72);
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v53 = (*(uint64_t (**)(void *))(*(void *)v239 + 384))(v239);
        unint64_t v45 = v241;
        if (*(_DWORD *)(v53 + 24))
        {
          int v54 = 0;
        }
        else
        {
          if (!*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v239 + 384))(v239) + 28)
            && *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v239 + 384))(v239) + 60) == -1)
          {
            uint64_t v77 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v239 + 384))(v239);
            v77[15] = v250;
            v77[16] = v15;
            v77[17] = v16;
            v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v282;
            uint64_t v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v253, (unint64_t *)&v282, (uint64_t)&std::piecewise_construct, (uint64_t **)&v304);
            std::string::operator=((std::string *)v78[3], v18);
            unsigned int v79 = (_DWORD *)(*(uint64_t (**)(void *))(*(void *)v238 + 320))(v238);
            v79[15] = v250;
            v79[16] = v15;
            v79[17] = v16;
            v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
            uint64_t v80 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v249, &v286, (uint64_t)&std::piecewise_construct, (uint64_t **)&v304);
            std::string::operator=((std::string *)v80[3], __str);
            v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286;
            int v81 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v249, &v286, (uint64_t)&std::piecewise_construct, (uint64_t **)&v304);
            std::string::operator=((std::string *)(v81[3] + 72), v18);
            int v54 = 1;
          }
          else
          {
            int v54 = 0;
          }
          unint64_t v45 = v241;
        }
        if (v52)
        {
          nitro::nitro_function::nitro_function(v52);
          unint64_t v45 = v241;
        }
        if (v240)
        {
          nitro::nitro_function::nitro_function(v240);
          unint64_t v45 = v241;
        }
        if (v54)
        {
          unint64_t v55 = v243;
          if ((unint64_t)v246 < v243)
          {
            int *v246 = v6;
            long long v56 = v246 + 1;
            uint64_t v57 = v244;
            goto LABEL_97;
          }
          uint64_t v58 = v246 - v244;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 62) {
            goto LABEL_426;
          }
          if ((uint64_t)(v243 - (void)v244) >> 1 > v59) {
            unint64_t v59 = (uint64_t)(v243 - (void)v244) >> 1;
          }
          if (v243 - (unint64_t)v244 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v59;
          }
          if (v60) {
            unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v60);
          }
          else {
            uint64_t v61 = 0;
          }
          uint64_t v62 = (int *)(v60 + 4 * v58);
          *uint64_t v62 = v6;
          long long v56 = v62 + 1;
          if (v246 == v244)
          {
            std::string::size_type v63 = v244;
          }
          else
          {
            std::string::size_type v63 = v244;
            uint64_t v64 = v246;
            do
            {
              int v65 = *--v64;
              *--uint64_t v62 = v65;
            }
            while (v64 != v244);
          }
          unint64_t v55 = v60 + 4 * v61;
          __p[0] = v62;
          __p[1] = v56;
          *(void *)&long long v295 = v55;
          if (v63)
          {
            operator delete(v63);
            unint64_t v55 = v295;
          }
          uint64_t v57 = v62;
          unint64_t v45 = v241;
LABEL_97:
          __p[1] = v56;
          if ((unint64_t)v56 < v55)
          {
            unint64_t v243 = v55;
            v244 = v57;
            *long long v56 = v24;
            uint64_t v66 = v56 + 1;
            int v7 = (char *)a2 + 56;
            goto LABEL_116;
          }
          uint64_t v67 = v56 - v57;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62) {
LABEL_426:
          }
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          uint64_t v69 = v57;
          unint64_t v70 = v55 - (void)v57;
          unint64_t v71 = (uint64_t)(v55 - (void)v57) >> 1;
          if (v71 > v68) {
            unint64_t v68 = v71;
          }
          if (v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v68;
          }
          if (v72) {
            unint64_t v72 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v72);
          }
          else {
            uint64_t v73 = 0;
          }
          int v74 = (_DWORD *)(v72 + 4 * v67);
          *int v74 = v24;
          uint64_t v75 = v74 + 1;
          if (v56 == v69)
          {
            int v7 = (char *)a2 + 56;
          }
          else
          {
            int v7 = (char *)a2 + 56;
            do
            {
              int v76 = *--v56;
              *--int v74 = v76;
            }
            while (v56 != v69);
          }
          __p[0] = v74;
          __p[1] = v75;
          unint64_t v243 = v72 + 4 * v73;
          *(void *)&long long v295 = v243;
          if (v69) {
            operator delete(v69);
          }
          v244 = v74;
          uint64_t v66 = (int *)v75;
          unint64_t v45 = v241;
LABEL_116:
          v246 = v66;
          __p[1] = v66;
        }
        else
        {
          int v7 = (char *)a2 + 56;
        }
LABEL_66:
        if (v45) {
          nitro::nitro_function::nitro_function(v45);
        }
LABEL_30:
        if (v10) {
          nitro::nitro_function::nitro_function(v10);
        }
        ++v6;
        uint64_t v4 = *((void *)a2 + 4);
        if (v6 >= (*((void *)a2 + 5) - v4) >> 4)
        {
          unsigned int v82 = (int *)__p[0];
          std::string v83 = v246;
          goto LABEL_119;
        }
      }
    }
    std::string v83 = 0;
    unsigned int v82 = 0;
LABEL_119:
    unint64_t v84 = 126 - 2 * __clz(v83 - v82);
    if (v83 == v82) {
      uint64_t v85 = 0;
    }
    else {
      uint64_t v85 = v84;
    }
    std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(v82, v83, v85, 1);
    uint64_t v86 = __p[0];
    int v87 = (int *)__p[1];
    if (__p[0] != __p[1])
    {
      BOOL v88 = (int *)__p[0];
      do
        Espresso::net::remove_layer(a2, *v88++);
      while (v88 != v87);
    }
    if (v86) {
      operator delete(v86);
    }
    uint64_t v89 = this;
    int v90 = (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
    BOOL v91 = v90 == 100;
    std::string::basic_string[abi:ne180100]<0>(__p, "bnns_fuse_conv_lrelu");
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 60), __p))BOOL v91 = 0; {
    if (SBYTE7(v295) < 0)
    }
    {
      operator delete(__p[0]);
      if (!v91) {
        goto LABEL_134;
      }
    }
    else if (!v91)
    {
LABEL_134:
      BOOL v92 = v90 == 100;
      std::string::basic_string[abi:ne180100]<0>(__p, "bnns_use_tf_layernorm_transposed");
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 60), __p))BOOL v92 = 0; {
      if (SBYTE7(v295) < 0)
      }
      {
        operator delete(__p[0]);
        if (!v92) {
          goto LABEL_346;
        }
      }
      else if (!v92)
      {
        goto LABEL_346;
      }
      v276[0] = MEMORY[0x1E4F143A8];
      v276[1] = 3221225472;
      v277 = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
      v278 = &__block_descriptor_48_e9_v16__0_v8l;
      v279 = this;
      v280 = a2;
      uint64_t v93 = v276;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v304, a2);
      int v302 = 0;
      *(_OWORD *)v300 = 0u;
      long long v301 = 0u;
      *(_OWORD *)v298 = 0u;
      long long v299 = 0u;
      long long v296 = 0u;
      long long v297 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v295 = 0u;
      v303 = a2;
      LODWORD(v286) = 0;
      int v252 = v90;
      if (*((void *)a2 + 5) != *((void *)a2 + 4))
      {
        int v254 = v93;
        unint64_t v94 = 0;
        do
        {
          DWORD2(v301) = v94;
          uint64_t v95 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], v94, &v286);
          if ((char *)v95[6] - (char *)v95[5] == 4)
          {
            HIDWORD(v301) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SDWORD2(v301), (_DWORD *)&v301 + 2)[5];
            uint64_t v96 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3);
            if ((char *)v96[6] - (char *)v96[5] == 4)
            {
              int v302 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3)[5];
              std::string v97 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v305.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3);
              if ((char *)v97[6] - (char *)v97[5] == 4)
              {
                long long v98 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v305.__r_.__value_.__r.__words[2], v302, &v302);
                if ((char *)v98[6] - (char *)v98[5] == 4)
                {
                  long long v99 = *(_OWORD *)(*((void *)a2 + 4) + 16 * v94);
                  uint64_t v100 = *(void *)(*((void *)a2 + 4) + 16 * v94 + 8);
                  if (v100) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
                  }
                  std::string v101 = (std::__shared_weak_count *)*((void *)&v297 + 1);
                  long long v297 = v99;
                  if (v101) {
                    nitro::nitro_function::nitro_function(v101);
                  }
                  uint64_t v102 = *((void *)a2 + 4);
                  long long v103 = *(_OWORD *)(v102 + 16 * SHIDWORD(v301));
                  uint64_t v104 = *(void *)(v102 + 16 * SHIDWORD(v301) + 8);
                  if (v104) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
                  }
                  int v105 = (std::__shared_weak_count *)v298[1];
                  *(_OWORD *)v298 = v103;
                  if (v105) {
                    nitro::nitro_function::nitro_function(v105);
                  }
                  uint64_t v106 = *((void *)a2 + 4);
                  long long v107 = *(_OWORD *)(v106 + 16 * v302);
                  uint64_t v108 = *(void *)(v106 + 16 * v302 + 8);
                  if (v108) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v108 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v109 = (std::__shared_weak_count *)*((void *)&v299 + 1);
                  long long v299 = v107;
                  if (v109) {
                    nitro::nitro_function::nitro_function(v109);
                  }
                  uint64_t v110 = v297;
                  uint64_t v111 = *(void **)(v297 + 64);
                  if (v111
                  {
                    uint64_t v112 = *(atomic_ullong **)(v110 + 72);
                    if (v112) {
                      atomic_fetch_add_explicit(v112 + 1, 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    uint64_t v112 = 0;
                  }
                  uint64_t v113 = (std::__shared_weak_count *)__p[1];
                  __p[0] = v111;
                  __p[1] = v112;
                  if (v113)
                  {
                    nitro::nitro_function::nitro_function(v113);
                    uint64_t v111 = __p[0];
                  }
                  if (v111)
                  {
                    uint64_t v114 = v298[0];
                    std::string v115 = (void *)*((void *)v298[0] + 8);
                    if (v115
                    {
                      uint64_t v116 = v114[9];
                      if (v116) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      uint64_t v116 = 0;
                    }
                    std::string v117 = (std::__shared_weak_count *)*((void *)&v295 + 1);
                    *(void *)&long long v295 = v115;
                    *((void *)&v295 + 1) = v116;
                    if (v117)
                    {
                      nitro::nitro_function::nitro_function(v117);
                      std::string v115 = (void *)v295;
                    }
                    if (v115)
                    {
                      uint64_t v118 = v299;
                      long long v119 = *(void **)(v299 + 64);
                      if (v119
                      {
                        uint64_t v120 = *(void *)(v118 + 72);
                        if (v120) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        uint64_t v120 = 0;
                      }
                      long long v121 = (std::__shared_weak_count *)*((void *)&v296 + 1);
                      *(void *)&long long v296 = v119;
                      *((void *)&v296 + 1) = v120;
                      if (v121)
                      {
                        nitro::nitro_function::nitro_function(v121);
                        long long v119 = (void *)v296;
                      }
                      if (v119) {
                        v277((uint64_t)v254, __p);
                      }
                    }
                  }
                }
              }
            }
          }
          LODWORD(v286) = ++v94;
        }
        while (v94 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
        uint64_t v122 = v300[0];
        uint64_t v123 = v300[1];
        if (v300[0] != v300[1])
        {
          int v124 = 0;
          do
          {
            Espresso::net::remove_layer(a2, v124 + *v122++);
            --v124;
          }
          while (v122 != v123);
          uint64_t v122 = v300[0];
        }
        uint64_t v93 = v254;
        if (v122)
        {
          v300[1] = v122;
          operator delete(v122);
        }
      }
      if (*((void *)&v299 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v299 + 1));
      }
      if (v298[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v298[1]);
      }
      if (*((void *)&v297 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v297 + 1));
      }
      if (*((void *)&v296 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v296 + 1));
      }
      if (*((void *)&v295 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v295 + 1));
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v306);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v305.__r_.__value_.__l.__data_);
      if (v304.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v304.__r_.__value_.__l.__size_);
      }

      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)__p, a2);
      LODWORD(v292) = 0;
      uint64_t v125 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v125)
      {
        unint64_t v126 = 0;
        std::vector<int> v247 = (char *)a2 + 96;
        do
        {
          uint64_t v127 = (uint64_t *)(v125 + 16 * v126);
          uint64_t v129 = *v127;
          uint64_t v128 = (std::__shared_weak_count *)v127[1];
          if (v128) {
            atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v130 = *(const void **)(v129 + 64);
          if (v130
          {
            size_t v131 = *(std::__shared_weak_count **)(v129 + 72);
            if (v131)
            {
              atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
              nitro::nitro_function::nitro_function(v131);
            }
            uint64_t v132 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v296 + 1, v126, &v292);
            if (v132[6] != v132[5])
            {
              v304.__r_.__value_.__r.__words[0] = v126;
              long long v133 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v126, &v304);
              if (v133[4] - v133[3] == 48)
              {
                v304.__r_.__value_.__r.__words[0] = v126;
                int v134 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v126, &v304)[3];
                if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 30), v134))
                {
                  std::string::size_type v135 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v296 + 1, v126, &v292);
                  if ((char *)v135[6] - (char *)v135[5] == 4)
                  {
                    unint64_t v255 = *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v296 + 1, v126, &v292)[5];
                    uint64_t v136 = *(void *)(*((void *)a2 + 4) + 16 * v255);
                    long long v137 = *(const void **)(v136 + 64);
                    if (v137)
                    {
                      if (v138)
                      {
                        long long v139 = *(std::__shared_weak_count **)(v136 + 72);
                        if (v139) {
                          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        int v245 = v139;
                        if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v138 + 320))(v138) + 16))
                        {
                          unint64_t v286 = v255;
                          char v140 = (long long *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v255, &v286)[3];
                          if (*((char *)v140 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v304, *(const std::string::value_type **)v140, *((void *)v140 + 1));
                          }
                          else
                          {
                            long long v141 = *v140;
                            v304.__r_.__value_.__r.__words[2] = *((void *)v140 + 2);
                            *(_OWORD *)&v304.__r_.__value_.__l.__data_ = v141;
                          }
                          if (*((char *)v134 + 23) < 0)
                          {
                            std::string::__init_copy_ctor_external(&v305, *(const std::string::value_type **)v134, *((void *)v134 + 1));
                          }
                          else
                          {
                            long long v142 = *v134;
                            v305.__r_.__value_.__r.__words[2] = *((void *)v134 + 2);
                            *(_OWORD *)&v305.__r_.__value_.__l.__data_ = v142;
                          }
                          uint64_t v282 = v255;
                          v143 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v255, &v282);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v143 + 1, &v304, &v306, 2uLL);
                          for (uint64_t i = 0; i != -6; i -= 3)
                          {
                            if (SHIBYTE(v305.__r_.__value_.__r.__words[i + 2]) < 0) {
                              operator delete(*(void **)((char *)&v304 + i * 8 + 24));
                            }
                          }
                          v304.__r_.__value_.__r.__words[0] = v126;
                          char v145 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v247, v126, &v304);
                          unint64_t v286 = v255;
                          v146 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v247, v255, &v286);
                          if (v146 != v145) {
                            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v146 + 3), (std::string *)v145[3], (std::string *)v145[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145[4] - v145[3]) >> 3));
                          }
                          v304.__r_.__value_.__r.__words[0] = v126;
                          v147 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v247, v126, &v304);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v147 + 1, 0, 0, 0);
                          v304.__r_.__value_.__r.__words[0] = v126;
                          uint64_t v148 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v126, &v304);
                          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v148 + 1, 0, 0, 0);
                        }
                        if (v245) {
                          nitro::nitro_function::nitro_function(v245);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v128) {
            nitro::nitro_function::nitro_function(v128);
          }
          LODWORD(v292) = ++v126;
          uint64_t v125 = *((void *)a2 + 4);
        }
        while (v126 < (*((void *)a2 + 5) - v125) >> 4);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v297);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*((void **)&v295 + 1));
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      v271[0] = MEMORY[0x1E4F143A8];
      v271[1] = 3221225472;
      v272 = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
      v273 = &__block_descriptor_48_e9_v16__0_v8l;
      v274 = this;
      v275 = a2;
      long long v256 = v271;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v286, a2);
      long long v299 = 0u;
      *(_OWORD *)v300 = 0u;
      long long v297 = 0u;
      *(_OWORD *)v298 = 0u;
      long long v295 = 0u;
      long long v296 = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)&long long v301 = 0;
      *((void *)&v301 + 1) = a2;
      LODWORD(v304.__r_.__value_.__l.__data_) = 0;
      uint64_t v149 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v149)
      {
        unint64_t v150 = 0;
        do
        {
          LODWORD(v301) = v150;
          long long v151 = *(_OWORD *)(v149 + 16 * v150);
          uint64_t v152 = *(void *)(v149 + 16 * v150 + 8);
          if (v152) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
          }
          size_t v153 = (std::__shared_weak_count *)*((void *)&v296 + 1);
          long long v296 = v151;
          if (v153) {
            nitro::nitro_function::nitro_function(v153);
          }
          std::string v154 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v288, v150, &v304);
          if ((char *)v154[6] - (char *)v154[5] == 4)
          {
            DWORD1(v301) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v288, v301, &v301)[5];
            uint64_t v155 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v290, SDWORD1(v301), (_DWORD *)&v301 + 1);
            if ((char *)v155[6] - (char *)v155[5] == 8)
            {
              uint64_t v156 = *((void *)a2 + 4);
              long long v157 = *(_OWORD *)(v156 + 16 * SDWORD1(v301));
              uint64_t v158 = *(void *)(v156 + 16 * SDWORD1(v301) + 8);
              if (v158) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v158 + 8), 1uLL, memory_order_relaxed);
              }
              long long v159 = (std::__shared_weak_count *)*((void *)&v297 + 1);
              long long v297 = v157;
              if (v159) {
                nitro::nitro_function::nitro_function(v159);
              }
              uint64_t v160 = v296;
              long long v161 = *(void **)(v296 + 64);
              if (v161
              {
                long long v162 = *(atomic_ullong **)(v160 + 72);
                if (v162) {
                  atomic_fetch_add_explicit(v162 + 1, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                long long v162 = 0;
              }
              v163 = (std::__shared_weak_count *)__p[1];
              __p[0] = v161;
              __p[1] = v162;
              if (v163) {
                nitro::nitro_function::nitro_function(v163);
              }
              uint64_t v164 = v297;
              unint64_t v165 = *(void **)(v297 + 64);
              if (v165
              {
                uint64_t v166 = *(void *)(v164 + 72);
                if (v166) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v166 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v166 = 0;
              }
              char v167 = (std::__shared_weak_count *)*((void *)&v295 + 1);
              *(void *)&long long v295 = v165;
              *((void *)&v295 + 1) = v166;
              if (v167)
              {
                nitro::nitro_function::nitro_function(v167);
                unint64_t v165 = (void *)v295;
              }
              if (__p[0] && v165) {
                v272((uint64_t)v256, __p);
              }
            }
          }
          LODWORD(v304.__r_.__value_.__l.__data_) = ++v150;
          uint64_t v149 = *((void *)a2 + 4);
        }
        while (v150 < (*((void *)a2 + 5) - v149) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      v168 = v298[0];
      v169 = v298[1];
      if (v298[0] != v298[1])
      {
        int v170 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v170 + *v168++);
          --v170;
        }
        while (v168 != v169);
      }
      uint64_t v171 = (void *)*((void *)&v299 + 1);
      uint64_t v172 = v300[0];
      if (*((void **)&v299 + 1) != v300[0])
      {
        int v173 = 0;
        do
        {
          int v174 = *(_DWORD *)v171;
          int v285 = v173 + *(_DWORD *)v171;
          LODWORD(v304.__r_.__value_.__l.__data_) = v174;
          v304.__r_.__value_.__l.__size_ = v171[1];
          std::string::size_type v175 = v171[2];
          v304.__r_.__value_.__r.__words[2] = v175;
          if (v175) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v175 + 8), 1uLL, memory_order_relaxed);
          }
          memset(&v305, 0, sizeof(v305));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v305, v171[3], v171[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171[4] - v171[3]) >> 3));
          long long v306 = 0uLL;
          uint64_t v307 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v306, v171[6], v171[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171[7] - v171[6]) >> 3));
          uint64_t v282 = 0;
          uint64_t v283 = 0;
          uint64_t v284 = 0;
          v292 = (std::string *)&v282;
          char v293 = 0;
          uint64_t v282 = (uint64_t)operator new(0x48uLL);
          uint64_t v283 = v282;
          uint64_t v284 = v282 + 72;
          uint64_t v283 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v284, (uint64_t)&v304, (uint64_t)v308, v282);
          Espresso::net::insert_layers((uint64_t)a2, &v285, &v282);
          v292 = (std::string *)&v282;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          v292 = (std::string *)&v306;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          v292 = &v305;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          if (v304.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v304.__r_.__value_.__r.__words[2]);
          }
          ++v173;
          v171 += 9;
        }
        while (v171 != v172);
      }
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
      if (v298[0])
      {
        v298[1] = v298[0];
        operator delete(v298[0]);
      }
      if (*((void *)&v297 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v297 + 1));
      }
      if (*((void *)&v296 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v296 + 1));
      }
      if (*((void *)&v295 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v295 + 1));
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v291);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v289);
      if (v287) {
        nitro::nitro_function::nitro_function(v287);
      }

      v266[0] = MEMORY[0x1E4F143A8];
      v266[1] = 3221225472;
      v267 = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_4;
      v268 = &__block_descriptor_48_e9_v16__0_v8l;
      v269 = this;
      v270 = a2;
      long long v257 = v266;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v286, a2);
      long long v299 = 0u;
      *(_OWORD *)v300 = 0u;
      long long v297 = 0u;
      *(_OWORD *)v298 = 0u;
      long long v295 = 0u;
      long long v296 = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(void *)&long long v301 = 0;
      *((void *)&v301 + 1) = a2;
      LODWORD(v304.__r_.__value_.__l.__data_) = 0;
      uint64_t v176 = *((void *)a2 + 4);
      if (*((void *)a2 + 5) != v176)
      {
        unint64_t v177 = 0;
        do
        {
          LODWORD(v301) = v177;
          long long v178 = *(_OWORD *)(v176 + 16 * v177);
          uint64_t v179 = *(void *)(v176 + 16 * v177 + 8);
          if (v179) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v180 = (std::__shared_weak_count *)*((void *)&v296 + 1);
          long long v296 = v178;
          if (v180) {
            nitro::nitro_function::nitro_function(v180);
          }
          v181 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v288, v177, &v304);
          if ((char *)v181[6] - (char *)v181[5] == 8)
          {
            DWORD1(v301) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v288, v301, &v301)[5];
            int v182 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v290, SDWORD1(v301), (_DWORD *)&v301 + 1);
            if ((char *)v182[6] - (char *)v182[5] == 4)
            {
              uint64_t v183 = *((void *)a2 + 4);
              long long v184 = *(_OWORD *)(v183 + 16 * SDWORD1(v301));
              uint64_t v185 = *(void *)(v183 + 16 * SDWORD1(v301) + 8);
              if (v185) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v185 + 8), 1uLL, memory_order_relaxed);
              }
              v186 = (std::__shared_weak_count *)*((void *)&v297 + 1);
              long long v297 = v184;
              if (v186) {
                nitro::nitro_function::nitro_function(v186);
              }
              uint64_t v187 = v296;
              int v188 = *(void **)(v296 + 64);
              if (v188
              {
                std::string::size_type v189 = *(atomic_ullong **)(v187 + 72);
                if (v189) {
                  atomic_fetch_add_explicit(v189 + 1, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                std::string::size_type v189 = 0;
              }
              v190 = (std::__shared_weak_count *)__p[1];
              __p[0] = v188;
              __p[1] = v189;
              if (v190) {
                nitro::nitro_function::nitro_function(v190);
              }
              uint64_t v191 = v297;
              unint64_t v192 = *(void **)(v297 + 64);
              if (v192
              {
                uint64_t v193 = *(void *)(v191 + 72);
                if (v193) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v193 + 8), 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v193 = 0;
              }
              v194 = (std::__shared_weak_count *)*((void *)&v295 + 1);
              *(void *)&long long v295 = v192;
              *((void *)&v295 + 1) = v193;
              if (v194)
              {
                nitro::nitro_function::nitro_function(v194);
                unint64_t v192 = (void *)v295;
              }
              if (__p[0] && v192) {
                v267((uint64_t)v257, __p);
              }
            }
          }
          LODWORD(v304.__r_.__value_.__l.__data_) = ++v177;
          uint64_t v176 = *((void *)a2 + 4);
        }
        while (v177 < (*((void *)a2 + 5) - v176) >> 4);
      }
      std::__sort<std::__less<int,int> &,int *>();
      v195 = v298[0];
      v196 = v298[1];
      if (v298[0] != v298[1])
      {
        int v197 = 0;
        do
        {
          Espresso::net::remove_layer(a2, v197 + *v195++);
          --v197;
        }
        while (v195 != v196);
      }
      int v198 = (void *)*((void *)&v299 + 1);
      v199 = v300[0];
      if (*((void **)&v299 + 1) != v300[0])
      {
        int v200 = 0;
        do
        {
          int v201 = *(_DWORD *)v198;
          int v285 = v200 + *(_DWORD *)v198;
          LODWORD(v304.__r_.__value_.__l.__data_) = v201;
          v304.__r_.__value_.__l.__size_ = v198[1];
          std::string::size_type v202 = v198[2];
          v304.__r_.__value_.__r.__words[2] = v202;
          if (v202) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v202 + 8), 1uLL, memory_order_relaxed);
          }
          memset(&v305, 0, sizeof(v305));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v305, v198[3], v198[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198[4] - v198[3]) >> 3));
          long long v306 = 0uLL;
          uint64_t v307 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v306, v198[6], v198[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v198[7] - v198[6]) >> 3));
          uint64_t v282 = 0;
          uint64_t v283 = 0;
          uint64_t v284 = 0;
          v292 = (std::string *)&v282;
          char v293 = 0;
          uint64_t v282 = (uint64_t)operator new(0x48uLL);
          uint64_t v283 = v282;
          uint64_t v284 = v282 + 72;
          uint64_t v283 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v284, (uint64_t)&v304, (uint64_t)v308, v282);
          Espresso::net::insert_layers((uint64_t)a2, &v285, &v282);
          v292 = (std::string *)&v282;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          v292 = (std::string *)&v306;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          v292 = &v305;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v292);
          if (v304.__r_.__value_.__r.__words[2]) {
            nitro::nitro_function::nitro_function((std::__shared_weak_count *)v304.__r_.__value_.__r.__words[2]);
          }
          ++v200;
          v198 += 9;
        }
        while (v198 != v199);
      }
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299 + 8;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v304);
      if (v298[0])
      {
        v298[1] = v298[0];
        operator delete(v298[0]);
      }
      uint64_t v89 = this;
      int v90 = v252;
      if (*((void *)&v297 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v297 + 1));
      }
      if (*((void *)&v296 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v296 + 1));
      }
      if (*((void *)&v295 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v295 + 1));
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v291);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v289);
      if (v287) {
        nitro::nitro_function::nitro_function(v287);
      }

LABEL_346:
      BOOL v203 = v90 == 100;
      std::string::basic_string[abi:ne180100]<0>(__p, "opt_squeeze_conv_expand_dims");
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 60), __p))BOOL v203 = 0; {
      if (SBYTE7(v295) < 0)
      }
      {
        operator delete(__p[0]);
        if (!v203) {
          goto LABEL_417;
        }
      }
      else if (!v203)
      {
        goto LABEL_417;
      }
      v261[0] = MEMORY[0x1E4F143A8];
      v261[1] = 3221225472;
      long long v262 = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_68;
      uint64_t v263 = &__block_descriptor_48_e9_v16__0_v8l;
      v264 = v89;
      v265 = a2;
      v204 = v261;
      Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v304, a2);
      int v302 = 0;
      *(_OWORD *)v300 = 0u;
      long long v301 = 0u;
      *(_OWORD *)v298 = 0u;
      long long v299 = 0u;
      long long v296 = 0u;
      long long v297 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v295 = 0u;
      v303 = a2;
      LODWORD(v286) = 0;
      if (*((void *)a2 + 5) != *((void *)a2 + 4))
      {
        long long v258 = v204;
        unint64_t v205 = 0;
        do
        {
          DWORD2(v301) = v205;
          v206 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], v205, &v286);
          if ((char *)v206[6] - (char *)v206[5] == 4)
          {
            HIDWORD(v301) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SDWORD2(v301), (_DWORD *)&v301 + 2)[5];
            uint64_t v207 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3);
            if ((char *)v207[6] - (char *)v207[5] == 4)
            {
              int v302 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v304.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3)[5];
              uint64_t v208 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v305.__r_.__value_.__r.__words[2], SHIDWORD(v301), (_DWORD *)&v301 + 3);
              if ((char *)v208[6] - (char *)v208[5] == 4)
              {
                v209 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v305.__r_.__value_.__r.__words[2], v302, &v302);
                if ((char *)v209[6] - (char *)v209[5] == 4)
                {
                  long long v210 = *(_OWORD *)(*((void *)a2 + 4) + 16 * v205);
                  uint64_t v211 = *(void *)(*((void *)a2 + 4) + 16 * v205 + 8);
                  if (v211) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v211 + 8), 1uLL, memory_order_relaxed);
                  }
                  int v212 = (std::__shared_weak_count *)*((void *)&v297 + 1);
                  long long v297 = v210;
                  if (v212) {
                    nitro::nitro_function::nitro_function(v212);
                  }
                  uint64_t v213 = *((void *)a2 + 4);
                  long long v214 = *(_OWORD *)(v213 + 16 * SHIDWORD(v301));
                  uint64_t v215 = *(void *)(v213 + 16 * SHIDWORD(v301) + 8);
                  if (v215) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v215 + 8), 1uLL, memory_order_relaxed);
                  }
                  v216 = (std::__shared_weak_count *)v298[1];
                  *(_OWORD *)v298 = v214;
                  if (v216) {
                    nitro::nitro_function::nitro_function(v216);
                  }
                  uint64_t v217 = *((void *)a2 + 4);
                  long long v218 = *(_OWORD *)(v217 + 16 * v302);
                  uint64_t v219 = *(void *)(v217 + 16 * v302 + 8);
                  if (v219) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v219 + 8), 1uLL, memory_order_relaxed);
                  }
                  v220 = (std::__shared_weak_count *)*((void *)&v299 + 1);
                  long long v299 = v218;
                  if (v220) {
                    nitro::nitro_function::nitro_function(v220);
                  }
                  uint64_t v221 = v297;
                  v222 = *(void **)(v297 + 64);
                  if (v222
                  {
                    v223 = *(atomic_ullong **)(v221 + 72);
                    if (v223) {
                      atomic_fetch_add_explicit(v223 + 1, 1uLL, memory_order_relaxed);
                    }
                  }
                  else
                  {
                    v223 = 0;
                  }
                  int v224 = (std::__shared_weak_count *)__p[1];
                  __p[0] = v222;
                  __p[1] = v223;
                  if (v224)
                  {
                    nitro::nitro_function::nitro_function(v224);
                    v222 = __p[0];
                  }
                  if (v222)
                  {
                    v225 = v298[0];
                    v226 = (void *)*((void *)v298[0] + 8);
                    if (v226
                    {
                      uint64_t v227 = v225[9];
                      if (v227) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v227 + 8), 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      uint64_t v227 = 0;
                    }
                    v228 = (std::__shared_weak_count *)*((void *)&v295 + 1);
                    *(void *)&long long v295 = v226;
                    *((void *)&v295 + 1) = v227;
                    if (v228)
                    {
                      nitro::nitro_function::nitro_function(v228);
                      v226 = (void *)v295;
                    }
                    if (v226)
                    {
                      uint64_t v229 = v299;
                      unint64_t v230 = *(void **)(v299 + 64);
                      if (v230
                      {
                        uint64_t v231 = *(void *)(v229 + 72);
                        if (v231) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v231 + 8), 1uLL, memory_order_relaxed);
                        }
                      }
                      else
                      {
                        uint64_t v231 = 0;
                      }
                      long long v232 = (std::__shared_weak_count *)*((void *)&v296 + 1);
                      *(void *)&long long v296 = v230;
                      *((void *)&v296 + 1) = v231;
                      if (v232)
                      {
                        nitro::nitro_function::nitro_function(v232);
                        unint64_t v230 = (void *)v296;
                      }
                      if (v230) {
                        v262((uint64_t)v258, __p);
                      }
                    }
                  }
                }
              }
            }
          }
          LODWORD(v286) = ++v205;
        }
        while (v205 < (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 4);
        int v233 = v300[0];
        long long v234 = v300[1];
        if (v300[0] != v300[1])
        {
          int v235 = 0;
          do
          {
            Espresso::net::remove_layer(a2, v235 + *v233++);
            --v235;
          }
          while (v233 != v234);
          int v233 = v300[0];
        }
        uint64_t v89 = this;
        v204 = v258;
        if (v233)
        {
          v300[1] = v233;
          operator delete(v233);
        }
      }
      if (*((void *)&v299 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v299 + 1));
      }
      if (v298[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v298[1]);
      }
      if (*((void *)&v297 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v297 + 1));
      }
      if (*((void *)&v296 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v296 + 1));
      }
      if (*((void *)&v295 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v295 + 1));
      }
      if (__p[1]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)__p[1]);
      }
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((void *)v306);
      std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v305.__r_.__value_.__l.__data_);
      if (v304.__r_.__value_.__l.__size_) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v304.__r_.__value_.__l.__size_);
      }

      v260[0] = MEMORY[0x1E4F143A8];
      v260[1] = 3221225472;
      v260[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2_69;
      v260[3] = &__block_descriptor_40_e9_v16__0_v8l;
      v260[4] = v89;
      Espresso::fuse_vertical<Espresso::generic_general_padding_kernel,Espresso::generic_convolution_kernel>(a2, v260);
LABEL_417:
      std::string::basic_string[abi:ne180100]<0>(__p, "useValueInference");
      uint64_t v236 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 60), __p);
      uint64_t v237 = v236;
      if (SBYTE7(v295) < 0)
      {
        operator delete(__p[0]);
        if (!v237)
        {
LABEL_422:
          *((unsigned char *)a2 + 568) = 1;
          return;
        }
      }
      else if (!v236)
      {
        goto LABEL_422;
      }
      v259[0] = MEMORY[0x1E4F143A8];
      v259[1] = 3221225472;
      v259[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3_71;
      v259[3] = &__block_descriptor_48_e9_v16__0_v8l;
      v259[4] = v89;
      v259[5] = a2;
      Espresso::single_match_replace<Espresso::generic_dev_op_kernel>(a2, v259);
      goto LABEL_422;
    }
    v281[0] = MEMORY[0x1E4F143A8];
    v281[1] = 3221225472;
    v281[2] = ___ZN8Espresso10BNNSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
    v281[3] = &__block_descriptor_40_e9_v16__0_v8l;
    v281[4] = this;
    Espresso::fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(a2, v281);
    goto LABEL_134;
  }
}

void sub_192179DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13)
{
  if (v14) {
    nitro::nitro_function::nitro_function(v14);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  int v16 = (void *)STACK[0x220];
  if (STACK[0x220])
  {
    STACK[0x228] = (unint64_t)v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void *Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a1 + 1120), (uint64_t)&v15);
  if (!v1) {
    goto LABEL_9;
  }
  int8x8_t v2 = v1;
  uint64_t v3 = (const void *)v1[3];
  uint64_t v4 = (std::__shared_weak_count *)v2[4];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
LABEL_9:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis missing: ");
    uint64_t v9 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso30pass_blob_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v5)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v14, "Analysis mismatch: ");
    uint64_t v12 = std::string::append(&v14, (const std::string::value_type *)((unint64_t)"N8Espresso30pass_blob_name_indexing_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v11, &v15);
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v6 = v5;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v4);
    nitro::nitro_function::nitro_function(v4);
  }
  return v6;
}

void sub_19217A294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v23) {
    __cxa_free_exception(v22);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = (Espresso *)operator new(0x30uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int8x8_t v2 = &unk_1EE387C40;
  uint64_t v3 = (void *)((char *)v2 + 24);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = &unk_1EE35B0C8;
  uint64_t v5 = Espresso::espresso_os_log_subsystem(v2, v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 136315138;
    unint64_t v8 = (unint64_t)"N8Espresso23pass_blob_name_indexingE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_1920CB000, v5, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, void *, uint64_t))(*v3 + 24))(buf, v3, a1);
  char v6 = 0;
  (*(void (**)(void *, char *))(*v3 + 16))(v3, &v6);
  if (v6)
  {
    if (buf[0]) {
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (unint64_t *)((char *)&v8 + 4));
    }
    else {
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso30pass_blob_name_indexing_resultE");
    }
  }
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
}

void sub_19217A4B8(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::net::set_analysis<Espresso::analysis_result>(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v9, "Null analysis");
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(*(void *)*a2 - 8);
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(a1 + 1120, (uint64_t)&v8, (uint64_t)&std::piecewise_construct, (uint64_t **)&v9);
  uint64_t v5 = (void *)*a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v6 = (std::__shared_weak_count *)v3[4];
  void v3[3] = v5;
  v3[4] = v4;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
}

void sub_19217A5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__emplace_unique_key_args<std::type_index,std::piecewise_construct_t const&,std::tuple<std::type_index&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *(void *)(*(void *)a2 + 8);
  unint64_t v8 = v7;
  if (v7 < 0)
  {
    std::string v9 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
    std::string v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (void *)*i)
      {
        unint64_t v17 = i[1];
        if (v17 == v8)
        {
          if (std::type_info::operator==[abi:ne180100](*(void *)(i[2] + 8), v7)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v18 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v18;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (v12 && (float)(v20 * (float)v12) >= v19)
  {
    unint64_t v8 = v4;
  }
  else
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_34;
    }
    if (prime < v12)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < v12) {
LABEL_34:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        v8 %= v12;
      }
    }
    else
    {
      v8 &= v12 - 1;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v8);
  if (v29)
  {
    void *i = *v29;
LABEL_57:
    void *v29 = i;
    goto LABEL_58;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v28 + 8 * v8) = a1 + 16;
  if (*i)
  {
    unint64_t v30 = *(void *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v30 >= v12) {
        v30 %= v12;
      }
    }
    else
    {
      v30 &= v12 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_57;
  }
LABEL_58:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_19217A904(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void Espresso::pass_blob_name_indexing::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (char *)operator new(0xE0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)unint64_t v4 = &unk_1EE388E68;
  uint64_t v106 = v4 + 24;
  *((_OWORD *)v4 + 2) = 0u;
  uint64_t v5 = (std::vector<std::string>::size_type *)(v4 + 32);
  *((void *)v4 + 3) = &unk_1EE365EE8;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 9) = 0;
  *((_OWORD *)v4 + 3) = 0u;
  *((_DWORD *)v4 + 18) = 1065353216;
  *((_OWORD *)v4 + 5) = 0u;
  uint64_t v110 = (std::vector<std::string> *)(v4 + 80);
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  long long v119 = (std::__shared_weak_count *)v4;
  unint64_t v120 = 0;
  long long v122 = 0u;
  long long v123 = 0u;
  int v124 = 1065353216;
  uint64_t v112 = a1;
  if (*((void *)a1 + 5) == *((void *)a1 + 4))
  {
    uint64_t v16 = 0;
  }
  else
  {
    char v6 = (char *)a1 + 56;
    uint64_t v7 = (char *)a1 + 96;
    do
    {
      v121[0] = (uint64_t *)&v120;
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v6, &v120, (uint64_t)&std::piecewise_construct, v121);
      v121[0] = (uint64_t *)&v120;
      std::string v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v7, &v120, (uint64_t)&std::piecewise_construct, v121);
      char v10 = 0;
      uint64_t v11 = 0;
      v121[0] = v8 + 3;
      v121[1] = v9 + 3;
      do
      {
        char v12 = v10;
        uint8x8_t v13 = v121[v11];
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        while (v14 != v15)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v122, v14, v14);
          v14 += 24;
        }
        char v10 = 1;
        uint64_t v11 = 1;
      }
      while ((v12 & 1) == 0);
      ++v120;
      a1 = v112;
    }
    while (v120 < (uint64_t)(*((void *)v112 + 5) - *((void *)v112 + 4)) >> 4);
    uint64_t v16 = *((void *)&v123 + 1);
  }
  unint64_t v17 = v119;
  v119[1].__shared_owners_ = v16;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v122);
  std::vector<Espresso::layer_shape>::resize(&v17[6].__shared_owners_, v17[1].__shared_owners_);
  std::vector<std::string>::resize(v110, *v5);
  p_uint64_t shared_weak_owners = &v119[1].__shared_weak_owners_;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__rehash<true>((uint64_t)&v17[1].__shared_weak_owners_, vcvtps_u32_f32((float)(unint64_t)v17[1].__shared_owners_ / *(float *)&v17[3].__vftable));
  p_unint64_t shared_owners = &v119[4].__shared_owners_;
  std::vector<std::vector<int>>::resize(&v119[4].__shared_owners_, (uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4);
  std::string v117 = &v119[5].__shared_owners_;
  std::vector<std::vector<int>>::resize(&v119[5].__shared_owners_, (uint64_t)(*((void *)a1 + 5) - *((void *)a1 + 4)) >> 4);
  unint64_t v120 = 0;
  if (*((void *)a1 + 5) != *((void *)a1 + 4))
  {
    uint64_t v108 = (char *)a1 + 96;
    uint64_t v109 = (char *)a1 + 56;
    float v19 = (char *)a1 + 184;
    uint64_t v118 = (char *)a1 + 192;
    float v20 = &std::piecewise_construct;
    do
    {
      *(void *)&long long v122 = &v120;
      BOOL v21 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v109, &v120, (uint64_t)v20, (uint64_t **)&v122);
      *(void *)&long long v122 = &v120;
      uint64_t v22 = (uint64_t)v20;
      unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v108, &v120, (uint64_t)v20, (uint64_t **)&v122);
      char v24 = 0;
      uint64_t v25 = 0;
      uint64_t v113 = v21;
      uint64_t v111 = v23;
      *(void *)&long long v122 = v21 + 3;
      *((void *)&v122 + 1) = v23 + 3;
      do
      {
        char v26 = v24;
        uint64_t v27 = (std::string **)*((void *)&v122 + v25);
        uint64_t v29 = *v27;
        uint64_t v28 = v27[1];
        while (v29 != v28)
        {
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(p_shared_weak_owners, (unsigned __int8 *)v29))
          {
            uint64_t shared_weak_owners = v119[2].__shared_weak_owners_;
            unint64_t shared_owners = v119[1].__shared_owners_;
            if ((int)shared_weak_owners >= shared_owners) {
              Espresso::throw_exception_selector<Espresso::invalid_state_error,int &,unsigned long &>(v119[2].__shared_weak_owners_, shared_owners);
            }
            unint64_t v32 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v19, v29);
            if (v118 != v32)
            {
              uint64_t v33 = v119[6].__shared_owners_ + ((uint64_t)(int)shared_weak_owners << 6);
              long long v34 = *(_OWORD *)(v32 + 56);
              long long v35 = *(_OWORD *)(v32 + 72);
              *(void *)(v33 + 32) = *((void *)v32 + 11);
              *(_OWORD *)uint64_t v33 = v34;
              *(_OWORD *)(v33 + 16) = v35;
              if ((char *)v33 != v32 + 56) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v33 + 40), *((char **)v32 + 12), *((void *)v32 + 13), (uint64_t)(*((void *)v32 + 13) - *((void *)v32 + 12)) >> 2);
              }
            }
            v121[0] = (uint64_t *)v29;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)p_shared_weak_owners, (unsigned __int8 *)v29, v22, (long long **)v121)+ 10) = shared_weak_owners;
            std::string::operator=(&v110->__begin_[(int)shared_weak_owners], v29);
          }
          ++v29;
        }
        char v24 = 1;
        uint64_t v25 = 1;
      }
      while ((v26 & 1) == 0);
      std::vector<int>::reserve((std::vector<int> *)(*p_shared_owners + 24 * v120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111[4] - v111[3]) >> 3));
      std::vector<int>::reserve((std::vector<int> *)(*v117 + 24 * v120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113[4] - v113[3]) >> 3));
      uint64_t v37 = (unsigned __int8 *)v113[3];
      uint64_t v36 = (unsigned __int8 *)v113[4];
      uint64_t v114 = v36;
      while (v37 != v36)
      {
        unint64_t v38 = v120;
        uint64_t v39 = *v117;
        uint64_t v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(p_shared_weak_owners, v37);
        uint64_t v41 = v40;
        if (!v40) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unint64_t v42 = v39 + 24 * v38;
        unint64_t v45 = *(char **)(v42 + 8);
        unint64_t v44 = v42 + 8;
        size_t v43 = v45;
        unint64_t v46 = *(void *)(v44 + 8);
        if ((unint64_t)v45 >= v46)
        {
          uint64_t v48 = (void **)(v39 + 24 * v38);
          uint64_t v49 = (char *)*v48;
          uint64_t v50 = (v43 - (unsigned char *)*v48) >> 2;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v52 = v46 - (void)v49;
          if (v52 >> 1 > v51) {
            unint64_t v51 = v52 >> 1;
          }
          BOOL v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v53) {
            unint64_t v54 = v51;
          }
          if (v54)
          {
            unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v54);
            size_t v43 = *(char **)v44;
            uint64_t v49 = (char *)*v48;
          }
          else
          {
            uint64_t v55 = 0;
          }
          long long v56 = (_DWORD *)(v54 + 4 * v50);
          *long long v56 = *((_DWORD *)v41 + 10);
          uint64_t v47 = v56 + 1;
          while (v43 != v49)
          {
            int v57 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *--long long v56 = v57;
          }
          *uint64_t v48 = v56;
          *(void *)unint64_t v44 = v47;
          *(void *)(v44 + 8) = v54 + 4 * v55;
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          *(_DWORD *)size_t v43 = *((_DWORD *)v40 + 10);
          uint64_t v47 = v43 + 4;
        }
        *(void *)unint64_t v44 = v47;
        v37 += 24;
        uint64_t v36 = v114;
      }
      unint64_t v59 = (unsigned __int8 *)v111[3];
      uint64_t v58 = (unsigned __int8 *)v111[4];
      std::string v115 = v58;
      while (v59 != v58)
      {
        unint64_t v60 = v120;
        uint64_t v61 = *p_shared_owners;
        uint64_t v62 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(p_shared_weak_owners, v59);
        std::string::size_type v63 = v62;
        if (!v62) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        unint64_t v64 = v61 + 24 * v60;
        uint64_t v67 = *(char **)(v64 + 8);
        unint64_t v66 = v64 + 8;
        int v65 = v67;
        unint64_t v68 = *(void *)(v66 + 8);
        if ((unint64_t)v67 >= v68)
        {
          unint64_t v70 = (void **)(v61 + 24 * v60);
          unint64_t v71 = (char *)*v70;
          uint64_t v72 = (v65 - (unsigned char *)*v70) >> 2;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 62) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v74 = v68 - (void)v71;
          if (v74 >> 1 > v73) {
            unint64_t v73 = v74 >> 1;
          }
          BOOL v53 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v53) {
            unint64_t v75 = v73;
          }
          if (v75)
          {
            unint64_t v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v75);
            int v65 = *(char **)v66;
            unint64_t v71 = (char *)*v70;
          }
          else
          {
            uint64_t v76 = 0;
          }
          uint64_t v77 = (_DWORD *)(v75 + 4 * v72);
          *uint64_t v77 = *((_DWORD *)v63 + 10);
          uint64_t v69 = v77 + 1;
          while (v65 != v71)
          {
            int v78 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *--uint64_t v77 = v78;
          }
          *unint64_t v70 = v77;
          *(void *)unint64_t v66 = v69;
          *(void *)(v66 + 8) = v75 + 4 * v76;
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          *(_DWORD *)int v65 = *((_DWORD *)v62 + 10);
          uint64_t v69 = v65 + 4;
        }
        *(void *)unint64_t v66 = v69;
        v59 += 24;
        uint64_t v58 = v115;
      }
      ++v120;
      a1 = v112;
      float v20 = (void *)v22;
    }
    while (v120 < (uint64_t)(*((void *)v112 + 5) - *((void *)v112 + 4)) >> 4);
  }
  std::vector<std::vector<unsigned long>>::resize(&v119[8].__shared_owners_, v119[1].__shared_owners_);
  std::vector<unsigned long>::resize(&v119[7].__shared_owners_, v119[1].__shared_owners_);
  unsigned int v79 = (uint64_t *)v119[7].__shared_owners_;
  uint64_t v80 = v119[7].__shared_weak_owners_;
  uint64_t v82 = *((void *)a1 + 4);
  uint64_t v81 = *((void *)a1 + 5);
  if (v80 - (uint64_t)v79 >= 1)
  {
    unint64_t v83 = ((unint64_t)(v80 - (void)v79) >> 3) + 1;
    do
    {
      *v79++ = (v81 - v82) >> 4;
      --v83;
    }
    while (v83 > 1);
  }
  if (v81 != v82)
  {
    unint64_t v84 = 0;
    do
    {
      uint64_t v85 = *v117 + 24 * v84;
      uint64_t v86 = *(int **)v85;
      int v87 = *(int **)(v85 + 8);
      while (v86 != v87)
      {
        uint64_t v88 = v119[8].__shared_owners_ + 24 * *v86;
        int v90 = (unint64_t **)(v88 + 8);
        uint64_t v89 = *(unint64_t **)(v88 + 8);
        unint64_t v91 = *(void *)(v88 + 16);
        if ((unint64_t)v89 >= v91)
        {
          uint64_t v93 = *(unint64_t **)v88;
          uint64_t v94 = ((uint64_t)v89 - *(void *)v88) >> 3;
          unint64_t v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 61) {
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v96 = v91 - (void)v93;
          if (v96 >> 2 > v95) {
            unint64_t v95 = v96 >> 2;
          }
          BOOL v53 = (unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v53) {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            unint64_t v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v97);
            uint64_t v89 = *v90;
            uint64_t v93 = *(unint64_t **)v88;
          }
          else
          {
            uint64_t v98 = 0;
          }
          long long v99 = (unint64_t *)(v97 + 8 * v94);
          *long long v99 = v84;
          BOOL v92 = v99 + 1;
          while (v89 != v93)
          {
            unint64_t v100 = *--v89;
            *--long long v99 = v100;
          }
          *(void *)uint64_t v88 = v99;
          *int v90 = v92;
          *(void *)(v88 + 16) = v97 + 8 * v98;
          if (v93) {
            operator delete(v93);
          }
        }
        else
        {
          *uint64_t v89 = v84;
          BOOL v92 = v89 + 1;
        }
        *int v90 = v92;
        ++v86;
      }
      uint64_t v101 = *p_shared_owners + 24 * v84;
      uint64_t v102 = *(int **)v101;
      long long v103 = *(int **)(v101 + 8);
      if (v102 != v103)
      {
        uint64_t v104 = v119[7].__shared_owners_;
        do
        {
          uint64_t v105 = *v102++;
          *(void *)(v104 + 8 * v105) = v84;
        }
        while (v102 != v103);
      }
      ++v84;
    }
    while (v84 < (uint64_t)(*((void *)v112 + 5) - *((void *)v112 + 4)) >> 4);
  }
  *(unsigned char *)a2 = 1;
  atomic_fetch_add_explicit(&v119->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)(a2 + 8) = v106;
  *(void *)(a2 + 16) = v119;
  nitro::nitro_function::nitro_function(v119);
}

void sub_19217B198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(__n);
    uint64_t v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = (int *)&v4[4 * v6];
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    char v10 = v5;
    if (end != this->__begin_)
    {
      char v10 = v5;
      do
      {
        int v11 = *--end;
        *--char v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v12 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(this->__end_, v12);
      std::vector<int>::pointer end = (std::string *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<std::string>::pointer begin = this->__begin_;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    unint64_t v8 = v7 + __n;
    if (v7 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int v11 = 0;
    }
    uint8x8_t v13 = (std::string *)&v11[24 * v7];
    uint64_t v14 = (std::string *)&v11[24 * v10];
    size_t v15 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = (std::string *)((char *)v13 + v15);
    if (end == begin)
    {
      this->__begin_ = v13;
      this->__end_ = v16;
      this->__end_cap_.__value_ = v14;
      if (!end) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      long long v17 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v13[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v13[-1].__r_.__value_.__l.__data_ = v17;
      --v13;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --end;
    }
    while (end != begin);
    std::vector<std::string>::pointer v18 = this->__begin_;
    std::vector<int>::pointer end = this->__end_;
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v14;
    if (end != v18)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v18);
      std::vector<int>::pointer end = v18;
    }
    if (end)
    {
LABEL_24:
      operator delete(end);
    }
  }
}

void std::vector<unsigned long>::resize(void *a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      a1[1] = *a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((uint64_t)a1, a2 - v2);
  }
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::string>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    unint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

void std::vector<std::vector<unsigned long>>::__append(uint64_t a1, unint64_t a2)
{
  BOOL v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      BOOL v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    std::vector<std::string>::size_type v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v11 = (char *)operator new(24 * v10);
    }
    else
    {
      int v11 = 0;
    }
    uint8x8_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      long long v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      *BOOL v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    float v19 = *(void **)a1;
    BOOL v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      float v20 = v5;
      do
      {
        uint64_t v22 = (void *)*(v20 - 3);
        v20 -= 3;
        BOOL v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        BOOL v5 = v20;
      }
      while (v20 != v19);
      BOOL v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

void std::vector<std::vector<unsigned long>>::resize(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        unint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<Espresso::layer_shape>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unint64_t v15 = v4 + (a2 << 6);
      while (v5 != v15)
      {
        uint64_t v16 = *(void **)(v5 - 24);
        if (v16)
        {
          *(void *)(v5 - 16) = v16;
          operator delete(v16);
        }
        v5 -= 64;
      }
      a1[1] = v15;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (a2 - v6 <= (v7 - v5) >> 6)
    {
      uint64_t v17 = v5 + 16;
      unint64_t v18 = (a2 << 6) - (v6 << 6);
      do
      {
        *(void *)(v17 + 40) = 0;
        *(_OWORD *)(v17 + 24) = 0uLL;
        *(_OWORD *)(v17 + 8) = 0uLL;
        *(_OWORD *)(v17 - 16) = xmmword_192DC3600;
        *(void *)uint64_t v17 = 0xFFFFFFFF00000001;
        v17 += 64;
        v18 -= 64;
      }
      while (v18);
      a1[1] = v5 + ((a2 - v6) << 6);
    }
    else
    {
      if (a2 >> 58) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = a1 + 2;
      uint64_t v8 = v7 - v4;
      uint64_t v9 = v8 >> 5;
      if (v8 >> 5 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
        unint64_t v10 = 0x3FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v10);
      float v19 = v11;
      float v20 = &v11[64 * v6];
      uint64_t v22 = &v11[64 * v12];
      uint8x8_t v13 = v20 + 16;
      unint64_t v14 = (a2 << 6) - (v6 << 6);
      do
      {
        *((void *)v13 + 5) = 0;
        *(_OWORD *)(v13 + 24) = 0uLL;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *((_OWORD *)v13 - 1) = xmmword_192DC3600;
        *(void *)uint8x8_t v13 = 0xFFFFFFFF00000001;
        v13 += 64;
        v14 -= 64;
      }
      while (v14);
      BOOL v21 = &v11[64 * a2];
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a1, &v19);
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v19);
    }
  }
}

void Espresso::pass_blob_name_indexing::get_analysis_usage(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
}

int *std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    unint64_t v10 = a2 - 1;
    int v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                int v40 = *v11;
                if (*v10 > *v11)
                {
                  *int v11 = *v10;
                  *unint64_t v10 = v40;
                }
                break;
              case 3uLL:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v41 = v11 + 2;
                unint64_t v42 = v11 + 3;
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v11, v11 + 1, v11 + 2, v11 + 3);
                int v43 = v11[3];
                if (*v10 > v43)
                {
                  int *v42 = *v10;
                  *unint64_t v10 = v43;
                  int v44 = *v42;
                  int v45 = *v41;
                  if (*v42 > *v41)
                  {
                    int *v41 = v44;
                    int *v42 = v45;
                    int v46 = v11[1];
                    if (v44 > v46)
                    {
                      v11[1] = v44;
                      v11[2] = v46;
                      int v47 = *v11;
                      if (v44 > *v11)
                      {
                        *int v11 = v44;
                        v11[1] = v47;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            uint64_t v48 = v11 + 1;
            BOOL v50 = v11 == a2 || v48 == a2;
            if (a4)
            {
              if (!v50)
              {
                uint64_t v51 = 4;
                uint64_t v52 = v11;
                do
                {
                  int v54 = *v52;
                  int v53 = v52[1];
                  uint64_t v52 = v48;
                  if (v53 > v54)
                  {
                    uint64_t v55 = v51;
                    do
                    {
                      *(int *)((char *)v11 + v55) = v54;
                      uint64_t v56 = v55 - 4;
                      if (v55 == 4)
                      {
                        int v57 = v11;
                        goto LABEL_81;
                      }
                      int v54 = *(int *)((char *)v11 + v55 - 8);
                      v55 -= 4;
                    }
                    while (v53 > v54);
                    int v57 = (int *)((char *)v11 + v56);
LABEL_81:
                    *int v57 = v53;
                  }
                  uint64_t v48 = v52 + 1;
                  v51 += 4;
                }
                while (v52 + 1 != a2);
              }
            }
            else if (!v50)
            {
              do
              {
                int v90 = *v9;
                int v89 = v9[1];
                uint64_t v9 = v48;
                if (v89 > v90)
                {
                  do
                  {
                    *uint64_t v48 = v90;
                    int v90 = *(v48 - 2);
                    --v48;
                  }
                  while (v89 > v90);
                  *uint64_t v48 = v89;
                }
                uint64_t v48 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v58 = (v13 - 2) >> 1;
              int64_t v59 = v58;
              do
              {
                int64_t v60 = v59;
                if (v58 >= v59)
                {
                  uint64_t v61 = (2 * v59) | 1;
                  uint64_t v62 = &v11[v61];
                  int v63 = *v62;
                  if (2 * v60 + 2 < (uint64_t)v13)
                  {
                    int v64 = v62[1];
                    BOOL v65 = v63 <= v64;
                    if (v63 >= v64) {
                      int v63 = v62[1];
                    }
                    if (!v65)
                    {
                      ++v62;
                      uint64_t v61 = 2 * v60 + 2;
                    }
                  }
                  unint64_t v66 = &v11[v60];
                  int v67 = *v66;
                  if (v63 <= *v66)
                  {
                    do
                    {
                      unint64_t v68 = v62;
                      int *v66 = v63;
                      if (v58 < v61) {
                        break;
                      }
                      uint64_t v69 = (2 * v61) | 1;
                      uint64_t v62 = &v11[v69];
                      uint64_t v61 = 2 * v61 + 2;
                      int v63 = *v62;
                      if (v61 < (uint64_t)v13)
                      {
                        __n128 result = v62 + 1;
                        int v70 = v62[1];
                        BOOL v71 = v63 <= v70;
                        if (v63 >= v70) {
                          int v63 = v62[1];
                        }
                        if (v71) {
                          uint64_t v61 = v69;
                        }
                        else {
                          ++v62;
                        }
                      }
                      else
                      {
                        uint64_t v61 = v69;
                      }
                      unint64_t v66 = v68;
                    }
                    while (v63 <= v67);
                    int *v68 = v67;
                  }
                }
                int64_t v59 = v60 - 1;
              }
              while (v60);
              uint64_t v72 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v73 = 0;
                int v74 = *v11;
                unint64_t v75 = v11;
                do
                {
                  uint64_t v76 = &v75[v73];
                  int v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  int v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v73 = 2 * v73 + 2;
                  if (v73 >= v72)
                  {
                    uint64_t v73 = v80;
                  }
                  else
                  {
                    int v81 = v77[1];
                    BOOL v82 = v78 <= v81;
                    if (v78 >= v81) {
                      int v78 = v77[1];
                    }
                    if (v82) {
                      uint64_t v73 = v80;
                    }
                    else {
                      ++v77;
                    }
                  }
                  *unint64_t v75 = v78;
                  unint64_t v75 = v77;
                }
                while (v73 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v83 = (char *)v77 - (char *)v11 + 4;
                  if (v83 >= 5)
                  {
                    unint64_t v84 = (((unint64_t)v83 >> 2) - 2) >> 1;
                    uint64_t v85 = &v11[v84];
                    int v86 = *v85;
                    int v87 = *v77;
                    if (*v85 > *v77)
                    {
                      do
                      {
                        uint64_t v88 = v85;
                        *uint64_t v77 = v86;
                        if (!v84) {
                          break;
                        }
                        unint64_t v84 = (v84 - 1) >> 1;
                        uint64_t v85 = &v11[v84];
                        int v86 = *v85;
                        uint64_t v77 = v88;
                      }
                      while (*v85 > v87);
                      *uint64_t v88 = v87;
                    }
                  }
                }
                BOOL v65 = v72-- <= 2;
              }
              while (!v65);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          unint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v15 - 1, v15, &v9[v14 + 1]);
            int v16 = *v9;
            *uint64_t v9 = *v15;
            *unint64_t v15 = v16;
          }
          else
          {
            __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          int v17 = *v9;
          unint64_t v18 = v9;
          if (a4) {
            break;
          }
          unint64_t v18 = v9;
          if (*(v9 - 1) > v17) {
            break;
          }
          if (v17 <= *v10)
          {
            unint64_t v32 = v9 + 1;
            do
            {
              int v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 <= *v11);
          }
          else
          {
            int v11 = v9;
            do
            {
              int v31 = v11[1];
              ++v11;
            }
            while (v17 <= v31);
          }
          uint64_t v33 = a2;
          if (v11 < a2)
          {
            uint64_t v33 = a2;
            do
              int v34 = *--v33;
            while (v17 > v34);
          }
          if (v11 < v33)
          {
            int v35 = *v11;
            int v36 = *v33;
            do
            {
              *int v11 = v36;
              int *v33 = v35;
              do
              {
                int v37 = v11[1];
                ++v11;
                int v35 = v37;
              }
              while (v17 <= v37);
              do
              {
                int v38 = *--v33;
                int v36 = v38;
              }
              while (v17 > v38);
            }
            while (v11 < v33);
          }
          uint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *uint64_t v9 = *v39;
          }
          a4 = 0;
          int *v39 = v17;
        }
        do
        {
          float v19 = v18;
          int v21 = v18[1];
          ++v18;
          int v20 = v21;
        }
        while (v21 > v17);
        uint64_t v22 = a2;
        if (v19 == v9)
        {
          uint64_t v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            int v24 = *--v22;
          }
          while (v24 <= v17);
        }
        else
        {
          do
            int v23 = *--v22;
          while (v23 <= v17);
        }
        if (v18 < v22)
        {
          int v25 = *v22;
          char v26 = v18;
          uint64_t v27 = v22;
          do
          {
            *char v26 = v25;
            int *v27 = v20;
            do
            {
              float v19 = v26;
              int v28 = v26[1];
              ++v26;
              int v20 = v28;
            }
            while (v28 > v17);
            do
            {
              int v29 = *--v27;
              int v25 = v29;
            }
            while (v29 <= v17);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          *uint64_t v9 = *v19;
        }
        *float v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_30:
        __n128 result = (int *)std::__introsort<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *,false>(v9, v19, a3, a4 & 1);
        a4 = 0;
        int v11 = v19 + 1;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *>(v9, v19);
      int v11 = v19 + 1;
      __n128 result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fuse_activation_and_grads(Espresso::net *)::$_0 &,int *>(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

void E5AOT::Opsets::E5ML_ios16::RegisterE5ML_ios16Opsets(E5AOT::Opsets::E5ML_ios16 *this, MIL::MILContext *a2)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register(this, a2);

  E5AOT::Opsets::E5ML_ios16::E5RT_ios16Opset::Register(this, v3);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this, MIL::MILContext *a2)
{
  char v5 = 15;
  strcpy((char *)__p, "E5Backend_ios16");
  uint64_t v2 = (*(uint64_t (**)(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *, void **))(*(void *)this + 16))(this, __p);
  uint64_t v3 = v2;
  if ((v5 & 0x80000000) == 0)
  {
    if (v2) {
      return;
    }
LABEL_5:
    char v5 = 15;
    strcpy((char *)__p, "E5Backend_ios16");
    operator new();
  }
  operator delete(__p[0]);
  if (!v3) {
    goto LABEL_5;
  }
}

void sub_19217C1C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IROpset *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v18 = a11;
  a11 = 0;
  if (v18) {
    E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::Register();
  }
  std::unique_ptr<E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset>::~unique_ptr[abi:ne180100](&a10);
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::E5Backend_ios16Opset(E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset *this, MIL::MILContext *a2)
{
  E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOps((uint64_t)&v2);
}

void sub_19217C338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void E5AOT::Opsets::E5ML_ios16::E5Backend_ios16Opset::GetOps(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  char v6 = 15;
  strcpy((char *)__p, "E5ML_ios16.call");
  E5AOT::Operators::E5ML_ios16::Call::Make((uint64_t)__p, &v7);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IROperator>>((void *)a1, "call", &v7);
  uint64_t v4 = v7;
  uint64_t v7 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  E5AOT::Operators::E5ML_ios16::Transfer::Make();
}

void sub_19217C4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v24 = *(void *)(v22 - 24);
  *(void *)(v22 - 24) = 0;
  if (v24) {
    E5AOT::Operators::E5ML_ios16::Call::Make();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::Transfer::Make()
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  operator new();
}

void sub_19217D0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v20 - 120));
  uint64_t v22 = *(void *)(v20 - 232);
  *(void *)(v20 - 232) = 0;
  if (!v22) {
    _Unwind_Resume(a1);
  }
  std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v20 - 232, v22);
  _Unwind_Resume(a1);
}

uint64_t E5AOT::Operators::E5ML_ios16::Call::Make@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  int v11 = 0;
  v12[0] = &unk_1EE379CA8;
  unint64_t v13 = v12;
  MIL::IROperator::Make();
  if (v11 != v10)
  {
    if (v11) {
      (*(void (**)(void *))(*v11 + 40))(v11);
    }
    uint64_t v3 = v13;
    if (v13 != v12) {
      goto LABEL_5;
    }
LABEL_9:
    (*(void (**)(void *))(v12[0] + 32))(v12);
    goto LABEL_10;
  }
  (*(void (**)(void *))(v10[0] + 32))(v10);
  uint64_t v3 = v13;
  if (v13 == v12) {
    goto LABEL_9;
  }
LABEL_5:
  if (v3) {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
LABEL_10:
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *a2;
  v8[0] = &unk_1EE379D00;
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 136))(v4, v8);
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void *))(*v9 + 40))(v9);
  }
  return result;
}

void sub_19217D85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  std::function<std::string ()(MIL::IROperation const&)>::~function(&a21);
  uint64_t v23 = *v21;
  *uint64_t v21 = 0;
  if (v23) {
    E5AOT::Operators::E5ML_ios16::Call::Make();
  }
  _Unwind_Resume(a1);
}

void E5AOT::Operators::E5ML_ios16::ANEInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = 0;
  v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19217E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v35 = a22;
  a22 = 0;
  if (v35)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a22, v35);
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v33 - 152));
      uint64_t v37 = *(void *)(v33 - 144);
      *(void *)(v33 - 144) = 0;
      if (!v37) {
        _Unwind_Resume(a1);
      }
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v33 - 144, v37);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v36 = *v32;
    uint64_t *v32 = 0;
    if (!v36) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  goto LABEL_4;
}

uint64_t std::__shared_ptr_pointer<std::vector<std::shared_ptr<MIL::IRParameter>> *>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void ***)(result + 24);
  if (v1)
  {
    uint64_t v2 = (char *)*v1;
    if (*v1)
    {
      uint64_t v3 = (char *)v1[1];
      uint64_t v4 = *v1;
      if (v3 != v2)
      {
        do
        {
          char v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = *v1;
      }
      v1[1] = v2;
      operator delete(v4);
    }
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void ***)(a2 + 16);
    if (v3)
    {
      do
      {
        while (1)
        {
          uint64_t v4 = (void **)*v3;
          char v5 = (std::__shared_weak_count *)v3[6];
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          if (*((char *)v3 + 39) < 0) {
            break;
          }
          operator delete(v3);
          uint64_t v3 = v4;
          if (!v4) {
            goto LABEL_10;
          }
        }
        operator delete(v3[2]);
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
LABEL_10:
    char v6 = *(void **)a2;
    *(void *)a2 = 0;
    if (v6) {
      operator delete(v6);
    }
    JUMPOUT(0x192FF16B0);
  }
}

uint64_t std::__shared_ptr_pointer<MIL::IRParameter  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void E5AOT::Operators::E5ML_ios16::BNNSInference::Make(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = 0;
  v5[3] = 0;
  MIL::IROperator::Make();
  if (v5)
  {
    uint64_t v2 = v7;
    if (v7 != v6) {
      goto LABEL_3;
    }
  }
  else
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
    uint64_t v2 = v7;
    if (v7 != v6)
    {
LABEL_3:
      if (v2) {
        (*(void (**)(void *))(*v2 + 40))(v2);
      }
LABEL_8:
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
  }
  (*(void (**)(void *))(v6[0] + 32))(v6);
  goto LABEL_8;
}

void sub_19217EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v37 = a24;
  a24 = 0;
  if (v37)
  {
    std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100]((uint64_t)&a24, v37);
    uint64_t v38 = *v34;
    uint64_t *v34 = 0;
    if (!v38)
    {
LABEL_4:
      std::unique_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>::~unique_ptr[abi:ne180100]((void ***)(v35 - 152));
      uint64_t v39 = *(void *)(v35 - 144);
      *(void *)(v35 - 144) = 0;
      if (!v39) {
        _Unwind_Resume(a1);
      }
      std::default_delete<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::operator()[abi:ne180100](v35 - 144, v39);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v38 = *v34;
    uint64_t *v34 = 0;
    if (!v38) {
      goto LABEL_4;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  goto LABEL_4;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_impl<char const(&)[5],std::unique_ptr<MIL::IRParameter>>(void *a1, char *a2, uint64_t *a3)
{
  char v6 = (char *)operator new(0x38uLL);
  *(void *)char v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>((void *)v6 + 2, a2, a3);
  int v8 = v6[39];
  if (v8 >= 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = (uint64_t *)*((void *)v6 + 2);
  }
  if (v8 >= 0) {
    unint64_t v10 = v6[39];
  }
  else {
    unint64_t v10 = *((void *)v6 + 3);
  }
  *((void *)v6 + 1) = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v15, v9, v10);
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(a1, (uint64_t)v6);
  if ((v12 & 1) == 0 && v6)
  {
    unint64_t v13 = (std::__shared_weak_count *)*((void *)v6 + 6);
    if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v6[39] < 0) {
      operator delete(*((void **)v6 + 2));
    }
    operator delete(v6);
  }
  return inserted;
}

void sub_19217F3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19217F3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRParameter>,0>(void *a1, char *__s, uint64_t *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v10 = v6 | 7;
    }
    uint64_t v11 = v10 + 1;
    int v8 = operator new(v10 + 1);
    a1[1] = v7;
    a1[2] = v11 | 0x8000000000000000;
    *a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v6;
    int v8 = a1;
    if (!v6)
    {
      *(unsigned char *)a1 = 0;
      uint64_t v9 = *a3;
      a1[3] = *a3;
      if (v9) {
        goto LABEL_5;
      }
      goto LABEL_10;
    }
  }
  memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  uint64_t v12 = *a3;
  a1[3] = *a3;
  if (v12) {
LABEL_5:
  }
    operator new();
LABEL_10:
  a1[4] = 0;
  *a3 = 0;
  return a1;
}

void sub_19217F518(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    size_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    size_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    *uint64_t v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_50;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v7 = a2 % v4;
    }
    else {
      unint64_t v7 = a2;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v7 = (v4 - 1) & a2;
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = *v8;
  if (*v8)
  {
    char v10 = *((unsigned char *)a3 + 23);
    if (v10 >= 0) {
      int8x8_t v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int8x8_t v11 = a3[1];
    }
    if (v10 >= 0) {
      unint64_t v12 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v12 = *a3;
    }
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v18 = v9[1];
        if (v18 == a2)
        {
          uint64_t v19 = *((unsigned __int8 *)v9 + 39);
          if ((v19 & 0x80u) == 0) {
            uint64_t v20 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          }
          else {
            uint64_t v20 = (unsigned __int8 *)v9[3];
          }
          if (v20 == v11)
          {
            uint64_t v21 = (const void **)(v9 + 2);
            if ((v19 & 0x80) != 0)
            {
              if (!memcmp(*v21, v12, v9[3])) {
                return v9;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 39)) {
                return v9;
              }
              for (uint64_t i = v12; *(unsigned __int8 *)v21 == *i; ++i)
              {
                uint64_t v21 = (const void **)((char *)v21 + 1);
                if (!--v19) {
                  return v9;
                }
              }
            }
          }
        }
        else if ((v18 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        unint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == a2)
      {
        uint64_t v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        }
        else {
          unint64_t v15 = (unsigned __int8 *)v9[3];
        }
        if (v15 == v11)
        {
          char v16 = (const void **)(v9 + 2);
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp(*v16, v12, v9[3])) {
              return v9;
            }
          }
          else
          {
            if (!*((unsigned char *)v9 + 39)) {
              return v9;
            }
            for (uint64_t j = v12; *(unsigned __int8 *)v16 == *j; ++j)
            {
              char v16 = (const void **)((char *)v16 + 1);
              if (!--v14) {
                return v9;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v7) {
          break;
        }
      }
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (v4 && (float)(v24 * (float)v4) >= v23) {
    return 0;
  }
  BOOL v25 = 1;
  if (v4 >= 3) {
    BOOL v25 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v26 = v25 | (2 * v4);
  unint64_t v27 = vcvtps_u32_f32(v23 / v24);
  if (v26 <= v27) {
    size_t prime = v27;
  }
  else {
    size_t prime = v26;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_74;
  }
  if (prime < v4)
  {
    size_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
    {
      size_t v32 = std::__next_prime(v29);
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v31 = 1 << -(char)__clz(v29 - 1);
      if (v29 >= 2) {
        size_t v29 = v31;
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_74:
    std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

void E5RT::Ops::AneInferenceOperation::AneInferenceOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v36 = a8;
  unint64_t v13 = (E5RT::ExecutionStreamOperationInternal *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a4, a5, a6);
  *(void *)unint64_t v13 = &unk_1EE326288;
  *((void *)v13 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(v13);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  kdebug_trace();
  uint64_t v14 = E5RT::ExecutionStreamOperationInternal::GetInputPorts(a1) + 16;
  while (1)
  {
    uint64_t v14 = *(void *)v14;
    if (!v14) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v14 + 40)))
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v34, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v35, 1, v34);
      E5RT::E5RTError::E5RTError(exception, __p, v35);
    }
  }
  uint64_t v16 = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(a1) + 16;
  while (1)
  {
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v16 + 40)))
    {
      int v17 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v34, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v35, 1, v34);
      E5RT::E5RTError::E5RTError(v17, __p, v35);
    }
  }
  uint64_t v18 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(a1) + 16;
  while (1)
  {
    uint64_t v18 = *(void *)v18;
    if (!v18) {
      break;
    }
    if (E5RT::IOPort::IsDynamic(*(E5RT::IOPortImpl ***)(v18 + 40)))
    {
      uint64_t v19 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__p, "AneInferenceOperation");
      std::string::basic_string[abi:ne180100]<0>(v34, "AneInferenceOperation cannot work with dynamic ports (yet).");
      E5RT::Status::Status(v35, 1, v34);
      E5RT::E5RTError::E5RTError(v19, __p, v35);
    }
  }
  if ((a7 & 1) == 0) {
    std::make_unique[abi:ne180100]<E5RT::Ops::Impl::AneInferenceOperationImplUsingDriverAPIs,E5RT::Ops::AneInferenceOperation &,std::shared_ptr<AneInferenceOpT const>,unsigned long long &>();
  }
  *(_OWORD *)std::string __p = 0u;
  long long v32 = 0u;
  int v33 = 1065353216;
  uint64_t v20 = *(uint64_t **)(a10 + 16);
  if (v20)
  {
    uint64_t v21 = *a3;
    do
    {
      uint64_t v22 = *(void *)(v21 + 56);
      uint64_t v23 = *(void *)(v21 + 64);
      if (v22 != v23)
      {
        char v24 = *((unsigned char *)v20 + 39);
        if (v24 >= 0) {
          uint64_t v25 = *((unsigned __int8 *)v20 + 39);
        }
        else {
          uint64_t v25 = v20[3];
        }
        if (v24 >= 0) {
          unint64_t v26 = (unsigned __int8 *)(v20 + 2);
        }
        else {
          unint64_t v26 = (unsigned __int8 *)v20[2];
        }
        while (1)
        {
          uint64_t v27 = *(unsigned __int8 *)(v22 + 23);
          if ((v27 & 0x80u) == 0) {
            uint64_t v28 = *(unsigned __int8 *)(v22 + 23);
          }
          else {
            uint64_t v28 = *(void *)(v22 + 8);
          }
          if (v28 == v25)
          {
            if ((v27 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v22, v26, *(void *)(v22 + 8))) {
                break;
              }
            }
            else
            {
              if (!*(unsigned char *)(v22 + 23)) {
                break;
              }
              uint64_t v29 = 0;
              while (*(unsigned __int8 *)(v22 + v29) == v26[v29])
              {
                if (v27 == ++v29) {
                  goto LABEL_35;
                }
              }
            }
          }
          v22 += 24;
          if (v22 == v23) {
            goto LABEL_16;
          }
        }
      }
LABEL_35:
      if (v22 != v23)
      {
        *(void *)&v34[0] = v20 + 2;
        uint8x8_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (uint64_t)(v20 + 2), (uint64_t)&std::piecewise_construct, (long long **)v34);
        std::string::operator=((std::string *)(v30 + 5), (const std::string *)(v20 + 5));
      }
LABEL_16:
      uint64_t v20 = (uint64_t *)*v20;
    }
    while (v20);
  }
  operator new();
}

{
  E5RT::Ops::AneInferenceOperation::AneInferenceOperation(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_19217FEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  kdebug_trace();
  uint64_t v29 = *((void *)v27 + 37);
  *((void *)v27 + 37) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v27);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v10 = E5RT::ExecutionStreamOperation::ExecutionStreamOperation((void *)a1);
  *char v10 = &unk_1EE325DB8;
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)(v10 + 2), a3);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1 + 56, a4);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(a1 + 96, a5);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    *(void *)(a1 + 208) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 192) = v11;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 280) = atomic_fetch_add(&E5RT::ExecutionStreamOperationInternal::m_traceIdentifier_counter, 1uLL);
  *(_WORD *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 290) = 0;
  *(unsigned char *)(a1 + 248) &= 0xE0u;
  *(void *)(a1 + 8) = a1;
  uint64_t v12 = kdebug_trace_string();
  uint64_t v13 = *(void *)(a1 + 272);
  *(void *)(a1 + 264) = v12;
  *(void *)(a1 + 272) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = (void *)(a1 + 32);
  while (1)
  {
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      break;
    }
    unint64_t v15 = (E5RT::IOPortImpl **)v14[5];
    if (!v15)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v26, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v25, 1, v24);
      E5RT::E5RTError::E5RTError(exception, v26, v25);
    }
    if (E5RT::IOPort::IsDynamic(v15))
    {
      *(unsigned char *)(a1 + 288) = 1;
      break;
    }
  }
  for (uint64_t i = *(void **)(a1 + 72); i; uint64_t i = (void *)*i)
  {
    int v17 = (E5RT::IOPortImpl **)i[5];
    if (!v17)
    {
      uint64_t v21 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v26, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v25, 1, v24);
      E5RT::E5RTError::E5RTError(v21, v26, v25);
    }
    if (E5RT::IOPort::IsDynamic(v17)) {
      *(unsigned char *)(a1 + 289) = 1;
    }
  }
  uint64_t v18 = (void *)(a1 + 112);
  while (1)
  {
    uint64_t v18 = (void *)*v18;
    if (!v18) {
      break;
    }
    uint64_t v19 = (E5RT::IOPortImpl **)v18[5];
    if (!v19)
    {
      uint64_t v23 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v26, "ExecutionStreamOperationInternal");
      std::operator+<char>();
      E5RT::Status::Status(v25, 1, v24);
      E5RT::E5RTError::E5RTError(v23, v26, v25);
    }
    if (E5RT::IOPort::IsDynamic(v19))
    {
      *(unsigned char *)(a1 + 290) = 1;
      return a1;
    }
  }
  return a1;
}

void sub_1921803A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v28 = (std::__shared_weak_count *)*((void *)v22 + 23);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  uint64_t v29 = (void *)*((void *)v22 + 19);
  while (v29)
  {
    int v43 = v29;
    uint64_t v29 = (void *)*v29;
    int v44 = (std::__shared_weak_count *)v43[3];
    if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
    operator delete(v43);
  }
  uint8x8_t v30 = *v26;
  *unint64_t v26 = 0;
  if (v30) {
    operator delete(v30);
  }
  uint64_t v31 = (void **)*((void *)v22 + 14);
  if (v31)
  {
    do
    {
      while (1)
      {
        long long v32 = (void **)*v31;
        int v33 = (std::__shared_weak_count *)v31[6];
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        if (*((char *)v31 + 39) < 0) {
          break;
        }
        operator delete(v31);
        uint64_t v31 = v32;
        if (!v32) {
          goto LABEL_15;
        }
      }
      operator delete(v31[2]);
      operator delete(v31);
      uint64_t v31 = v32;
    }
    while (v32);
  }
LABEL_15:
  int v34 = *v25;
  *uint64_t v25 = 0;
  if (v34) {
    operator delete(v34);
  }
  uint64_t v35 = (void **)*((void *)v22 + 9);
  if (v35)
  {
    do
    {
      while (1)
      {
        uint64_t v36 = (void **)*v35;
        uint64_t v37 = (std::__shared_weak_count *)v35[6];
        if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        if (*((char *)v35 + 39) < 0) {
          break;
        }
        operator delete(v35);
        uint64_t v35 = v36;
        if (!v36) {
          goto LABEL_25;
        }
      }
      operator delete(v35[2]);
      operator delete(v35);
      uint64_t v35 = v36;
    }
    while (v36);
  }
LABEL_25:
  uint64_t v38 = *v24;
  *char v24 = 0;
  if (v38) {
    operator delete(v38);
  }
  uint64_t v39 = (void **)*((void *)v22 + 4);
  if (v39)
  {
    do
    {
      while (1)
      {
        int v40 = (void **)*v39;
        uint64_t v41 = (std::__shared_weak_count *)v39[6];
        if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
        if (*((char *)v39 + 39) < 0) {
          break;
        }
        operator delete(v39);
        uint64_t v39 = v40;
        if (!v40) {
          goto LABEL_35;
        }
      }
      operator delete(v39[2]);
      operator delete(v39);
      uint64_t v39 = v40;
    }
    while (v40);
  }
LABEL_35:
  unint64_t v42 = *v23;
  *uint64_t v23 = 0;
  if (v42) {
    operator delete(v42);
  }
  E5RT::ExecutionStreamOperation::~ExecutionStreamOperation(v22);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPort::IsDynamic(E5RT::IOPortImpl **this)
{
  return E5RT::IOPortImpl::IsDynamic(this[1]);
}

uint64_t E5RT::IOPortImpl::IsDynamic(E5RT::IOPortImpl *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1921808F4(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192180908(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v25 = operator new(0x38uLL);
  v43[0] = v25;
  v43[1] = a1 + 16;
  char v44 = 0;
  *uint64_t v25 = 0;
  v25[1] = v10;
  unint64_t v26 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(void *)(a3 + 16);
  }
  uint64_t v27 = *(void *)(a3 + 32);
  v25[5] = *(void *)(a3 + 24);
  v25[6] = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  char v44 = 1;
  float v28 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v29 = *(float *)(a1 + 32);
  if (!v11 || (float)(v29 * (float)v11) < v28)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v28 / v29);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v36 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v36) {
      goto LABEL_70;
    }
    if (prime < *(void *)&v36)
    {
      unint64_t v37 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v36 < 3uLL || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
      {
        unint64_t v37 = std::__next_prime(v37);
      }
      else
      {
        uint64_t v39 = 1 << -(char)__clz(v37 - 1);
        if (v37 >= 2) {
          unint64_t v37 = v39;
        }
      }
      if (prime <= v37) {
        size_t prime = v37;
      }
      if (prime < *(void *)&v36) {
LABEL_70:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v40 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint8x8_t v30 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint8x8_t v30 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v31 = (void *)v43[0];
        if (v30) {
          goto LABEL_59;
        }
      }
    }
    else
    {
      unint64_t v3 = v40 & v10;
      uint8x8_t v30 = *(void **)(*(void *)a1 + 8 * (v40 & v10));
      uint64_t v31 = (void *)v43[0];
      if (v30) {
        goto LABEL_59;
      }
    }
LABEL_83:
    void *v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v43[0])
    {
      unint64_t v41 = *(void *)(*(void *)v43[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v41 >= v11) {
          v41 %= v11;
        }
      }
      else
      {
        v41 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v41) = v43[0];
    }
    goto LABEL_94;
  }
  uint8x8_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v31 = (void *)v43[0];
  if (!v30) {
    goto LABEL_83;
  }
LABEL_59:
  void *v31 = *v30;
  void *v30 = v43[0];
LABEL_94:
  uint64_t v14 = (uint64_t *)v43[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192180D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192180D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *E5RT::ExecutionStreamOperation::ExecutionStreamOperation(void *this)
{
  *this = &unk_1EE325CD8;
  return this;
}

{
  *this = &unk_1EE325CD8;
  return this;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::AneInferenceOperationImplUsingAnefAPIs(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v9 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(a1, a2, (uint64_t)&v9, a4, a5, a6);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  if (*((void *)&v9 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)a1 = &unk_1EE3269D8;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 850045863;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(void *)(a1 + 368) = 0;
  return a1;
}

void sub_192180EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    Espresso::create_context(a10);
  }
  _Unwind_Resume(exception_object);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(uint64_t *a1@<X1>, long long *a2@<X2>, __n128 *a3@<X8>)
{
  BOOL v6 = operator new(0x220uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *BOOL v6 = &unk_1EE38CD30;
  long long v11 = a2[2];
  *(_OWORD *)uint8x8_t v12 = a2[3];
  *(_OWORD *)&v12[12] = *(long long *)((char *)a2 + 60);
  long long v9 = *a2;
  long long v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a1);
  v6[54] = 0;
  v6[55] = 0;
  v6[51] = 0;
  v6[52] = 0;
  *((unsigned char *)v6 + 424) = 0;
  v6[60] = 0;
  v6[61] = 0;
  v6[57] = 0;
  v6[58] = 0;
  v6[56] = 0;
  v7[21] = v11;
  v7[22] = *(_OWORD *)v12;
  v7[19] = v9;
  v7[20] = v10;
  *(_OWORD *)((char *)v7 + 364) = *(_OWORD *)&v12[12];
  void v6[3] = &unk_1EE375480;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_192180FB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(void *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = (char *)operator new(0x1B8uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)BOOL v6 = &unk_1EE386C80;
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 51) = 0;
  *((void *)v6 + 52) = 0;
  *((void *)v6 + 3) = &unk_1EE3507D8;
  *((void *)v6 + 53) = 0;
  *((void *)v6 + 54) = 0;
  long long v7 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 376) = v7;
  long long v8 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 344) = v8;
  __n128 result = *(__n128 *)(a3 + 60);
  *(__n128 *)(v6 + 388) = result;
  *a1 = v10;
  a1[1] = v6;
  return result;
}

void sub_19218107C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::batchnorm_kernel::batchnorm_kernel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(a1, a2);
  *(_OWORD *)(v5 + 384) = 0u;
  char v6 = *(unsigned char *)(*a2 + 123);
  *(_OWORD *)(v5 + 536) = 0u;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_OWORD *)(v5 + 424) = 0u;
  *(_OWORD *)(v5 + 440) = 0u;
  *(unsigned char *)(v5 + 456) = 0;
  *(_OWORD *)(v5 + 464) = 0u;
  *(_OWORD *)(v5 + 480) = 0u;
  *(_OWORD *)(v5 + 496) = 0u;
  *(_OWORD *)(v5 + 512) = 0u;
  *(unsigned char *)(v5 + 528) = 0;
  *(_DWORD *)(v5 + 568) = 1065353216;
  *(_WORD *)(v5 + 576) = 0;
  *(unsigned char *)(v5 + 578) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v5 + 580) = _D1;
  *(unsigned char *)(v5 + 588) = 0;
  *(_OWORD *)(v5 + 592) = 0u;
  *(unsigned char *)(v5 + 608) = v6;
  *(void *)uint64_t v5 = &unk_1EE341440;
  *(void *)(v5 + 400) = &unk_1EE3415F8;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_OWORD *)(v5 + 304) = *(_OWORD *)a3;
  __n128 result = *(__n128 *)(a3 + 16);
  long long v13 = *(_OWORD *)(a3 + 32);
  long long v14 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v5 + 364) = *(_OWORD *)(a3 + 60);
  *(_OWORD *)(v5 + 336) = v13;
  *(_OWORD *)(v5 + 352) = v14;
  *(__n128 *)(v5 + 320) = result;
  return result;
}

double Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = Espresso::base_kernel::base_kernel(a1, a2);
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 280) = v2 + 288;
  *(void *)uint64_t v2 = &unk_1EE355A48;
  *(void *)(v2 + 304) = 0;
  *(void *)(v2 + 312) = 0x3727C5AC00000000;
  *(_DWORD *)(v2 + 320) = 1063675494;
  *(_WORD *)(v2 + 324) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(void *)(v2 + 360) = 1065353216;
  *(void *)(v2 + 368) = 0;
  *(_DWORD *)(v2 + 376) = 2;
  return result;
}

uint64_t ___ZN8Espresso8hardware17supports_platformENS_8platformE_block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F4E038] hasANE];
  Espresso::hardware::supports_platform(Espresso::platform)::has_ane = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0,std::allocator<anonymous namespace'::CollectOpnames(MIL::IRProgram const&)::$_0>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 160))(a2);
  uint64_t v5 = v4 + 1;
  char v6 = (void *)*v4;
  if ((void *)*v4 != v4 + 1)
  {
    do
    {
      uint8x8_t v12 = (MIL::IRArgument **)v6[7];
      long long v13 = (MIL::IRArgument **)v6[8];
      while (v12 != v13)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v12 + 16))())
        {
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t Name = MIL::IRArgument::GetName(*v12);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v14, Name, Name);
        }
        v12 += 2;
      }
      uint64_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (void *)v6[2];
          BOOL v18 = *v17 == (void)v6;
          char v6 = v17;
        }
        while (!v18);
      }
      char v6 = v17;
    }
    while (v17 != v5);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 200))(&__p, a2);
  long long v7 = (void **)__p;
  long long v8 = v21;
  if (__p != v21)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v9, (uint64_t)v7, (uint64_t)v7);
      v7 += 3;
    }
    while (v7 != v8);
    long long v7 = (void **)__p;
  }
  if (v7)
  {
    uint64_t v10 = v21;
    long long v11 = v7;
    if (v21 != v7)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v7);
      long long v11 = __p;
    }
    uint64_t v21 = v7;
    operator delete(v11);
  }
  return 1;
}

void sub_1921813E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void Espresso::single_match_replace<Espresso::generic_convolution_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v27, a1);
  long long v25 = 0u;
  memset(v26, 0, 28);
  long long v24 = 0u;
  v26[4] = a1;
  uint64_t v4 = *((void *)a1 + 4);
  if (*((void *)a1 + 5) != v4)
  {
    unint64_t v5 = 0;
    do
    {
      LODWORD(v26[3]) = v5;
      long long v6 = *(_OWORD *)(v4 + 16 * v5);
      uint64_t v7 = *(void *)(v4 + 16 * v5 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      long long v8 = (std::__shared_weak_count *)*((void *)&v25 + 1);
      long long v25 = v6;
      if (v8)
      {
        nitro::nitro_function::nitro_function(v8);
        uint64_t v9 = v25;
      }
      else
      {
        uint64_t v9 = v6;
      }
      uint64_t v10 = *(void **)(v9 + 64);
      if (v10
      {
        uint64_t v11 = *(void *)(v9 + 72);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint8x8_t v12 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      *(void *)&long long v24 = v10;
      *((void *)&v24 + 1) = v11;
      if (v12)
      {
        nitro::nitro_function::nitro_function(v12);
        uint64_t v10 = (void *)v24;
      }
      if (v10) {
        v3[2](v3, &v24);
      }
      ++v5;
      uint64_t v4 = *((void *)a1 + 4);
    }
    while (v5 < (*((void *)a1 + 5) - v4) >> 4);
    long long v13 = (uint64_t *)v26[1];
    if (v26[0] != v26[1])
    {
      int v14 = 0;
      char v15 = (uint64_t *)(v26[0] + 32);
      do
      {
        uint64_t v16 = v15 - 4;
        int v17 = *((_DWORD *)v15 - 8) + v14;
        *((_DWORD *)v15 - 8) = v17;
        BOOL v18 = (void **)*(v15 - 3);
        if (v18)
        {
          LODWORD(v33[0]) = v17;
          v33[1] = v18;
          uint64_t v19 = (std::__shared_weak_count *)*(v15 - 2);
          unint64_t v34 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          memset(v35, 0, sizeof(v35));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(v15 - 1), *v15, 0xAAAAAAAAAAAAAAABLL * ((*v15 - *(v15 - 1)) >> 3));
          memset(v36, 0, sizeof(v36));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v36, v15[2], v15[3], 0xAAAAAAAAAAAAAAABLL * ((v15[3] - v15[2]) >> 3));
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          uint64_t v31 = (void **)&v21;
          char v32 = 0;
          uint64_t v21 = (uint64_t *)operator new(0x48uLL);
          uint64_t v22 = v21;
          uint64_t v23 = v21 + 9;
          uint64_t v22 = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v23, (uint64_t)v33, (uint64_t)&v37, (uint64_t)v21);
          Espresso::net::insert_layers((uint64_t)a1, &v21);
          uint64_t v31 = (void **)&v21;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v36;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          uint64_t v31 = (void **)v35;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v31);
          if (v34) {
            nitro::nitro_function::nitro_function(v34);
          }
          int v20 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          int v20 = -1;
        }
        v14 += v20;
        v15 += 9;
      }
      while (v16 + 9 != v13);
    }
  }
  v33[0] = (void **)v26;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v33);
  if (*((void *)&v25 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v25 + 1));
  }
  if (*((void *)&v24 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v30);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v29);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
}

void sub_19218174C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN8Espresso17ANECompilerEngine7context33cross_correlation_use_anec_layoutEPNS_3netEPS1__block_invoke(uint64_t a1, int64x2_t *a2)
{
  *(void *)&long long v58 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a2->i64[0] + 8) != v2 && v2 != 0) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 40) + 56;
  *(void *)int v47 = a2[3].i32[2];
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, *(unint64_t *)v47, v47);
  if (v7[4] - v7[3] != 48) {
    return;
  }
  uint64_t v8 = *(void *)(a1 + 40) + 56;
  unint64_t v9 = a2[3].i32[2];
  *(void *)int v47 = v9;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v8, v9, v47)[3];
  if (*(char *)(v10 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v10 + 24), *(void *)(v10 + 32));
  }
  else {
    std::string v52 = *(std::string *)(v10 + 24);
  }
  uint64_t v11 = (uint64_t **)(*(void *)(a1 + 40) + 184);
  unint64_t v40 = &v52;
  uint8x8_t v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, &v52, (long long **)&v40);
  long long v13 = *(_OWORD *)(v12 + 72);
  *(_OWORD *)int v47 = *(_OWORD *)(v12 + 56);
  *(_OWORD *)&v47[16] = v13;
  int v14 = (const void *)*((void *)v12 + 12);
  uint64_t v48 = *((void *)v12 + 11);
  uint64_t v49 = 0;
  BOOL v50 = 0;
  uint64_t v51 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v49, v14, *((void *)v12 + 13), (uint64_t)(*((void *)v12 + 13) - (void)v14) >> 2);
  if (*(_DWORD *)&v47[16] * *(_DWORD *)&v47[12] != 1)
  {
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v52.__r_.__value_.__l.__size_;
    }
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 13);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v17 = &v52;
      }
      else {
        int v17 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      memmove(p_str, v17, size);
    }
    strcpy((char *)p_str + size, "__anec_layout");
    *(_DWORD *)&v47[8] *= *(_DWORD *)&v47[16] * *(_DWORD *)&v47[12];
    *(void *)&v47[12] = 0x100000001;
    int v43 = 0;
    __int16 v44 = 1;
    int v45 = 1;
    unint64_t v40 = *(std::string **)v47;
    int v41 = *(_DWORD *)&v47[8];
    long long v42 = xmmword_192DCA670;
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(v18 + 16);
    uint64_t v19 = *(std::__shared_weak_count **)(v18 + 24);
    uint64_t v38 = v20;
    uint64_t v39 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::abstract_engine_factory::shared(&v57);
    uint64_t v21 = v57.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
    LODWORD(p_lpsrc) = (***(uint64_t (****)(void))(v38 + 8))(*(void *)(v38 + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v21, (uint64_t)&v38, (uint64_t)&__p, (uint64_t)&v40, (int *)&p_lpsrc);
    if (lpsrc)
    {
      if (v22)
      {
        uint64_t v23 = v34;
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = 0;
LABEL_29:
    if (v34) {
      nitro::nitro_function::nitro_function(v34);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v57.__r_.__value_.__l.__size_) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v57.__r_.__value_.__l.__size_);
    }
    v36[0] = v22;
    v36[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "reshape");
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v57, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
    }
    else {
      std::string v57 = v52;
    }
    lpvImage_Buffer src = 0;
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    p_lpvImage_Buffer src = (std::string *)&lpsrc;
    LOBYTE(v31) = 0;
    lpvImage_Buffer src = operator new(0x18uLL);
    unint64_t v34 = (std::__shared_weak_count *)lpsrc;
    uint64_t v35 = (char *)lpsrc + 24;
    unint64_t v34 = (std::__shared_weak_count *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v35, (long long *)&v57, &v58, (std::string *)lpsrc);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v55, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v55 = __str;
    }
    p_lpvImage_Buffer src = 0;
    uint64_t v31 = 0;
    p_int data = 0;
    p_p_lpvImage_Buffer src = &p_lpsrc;
    char v54 = 0;
    p_lpvImage_Buffer src = (std::string *)operator new(0x18uLL);
    uint64_t v31 = p_lpsrc;
    p_int data = (void **)&p_lpsrc[1].__r_.__value_.__l.__data_;
    uint64_t v31 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (long long *)&v55, (long long *)&v56, p_lpsrc);
    Espresso::single_match_state<Espresso::generic_convolution_kernel>::add_kernel(a2, v36, &__p, &__str, (std::string **)&lpsrc, &p_lpsrc, 1);
    p_p_lpvImage_Buffer src = &p_lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p_lpsrc);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    p_lpvImage_Buffer src = (std::string *)&lpsrc;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_lpsrc);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    long long v24 = (uint64_t **)(*(void *)(a1 + 40) + 184);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    long long v25 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v24, &__str, (long long **)&__p);
    long long v26 = *(_OWORD *)&v47[16];
    *(_OWORD *)(v25 + 56) = *(_OWORD *)v47;
    *(_OWORD *)(v25 + 72) = v26;
    *((void *)v25 + 11) = v48;
    if (v25 + 56 != v47) {
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 96, (char *)v49, (uint64_t)v50, (v50 - (unsigned char *)v49) >> 2);
    }
    uint64_t v27 = *(void *)(a1 + 40) + 56;
    unint64_t v28 = a2[3].i32[2];
    __p.__r_.__value_.__r.__words[0] = v28;
    float v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v27, v28, &__p);
    std::string::operator=((std::string *)(v29[3] + 24), &__str);
    if (v23) {
      nitro::nitro_function::nitro_function(v23);
    }
    if (v39) {
      nitro::nitro_function::nitro_function(v39);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (v49)
  {
    BOOL v50 = v49;
    operator delete(v49);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
}

void sub_192181D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v44 - 73) < 0) {
    operator delete(*(void **)(v44 - 96));
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v43)
  {
    nitro::nitro_function::nitro_function(v43);
    nitro::nitro_function::nitro_function(v43);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (*(char *)(v44 - 153) < 0) {
    operator delete(*(void **)(v44 - 176));
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::MILCompilerForE5::~MILCompilerForE5(Espresso::AOT::MILCompilerForE5 *this)
{
  Espresso::AOT::MILCompilerForE5::~MILCompilerForE5(this);

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Espresso::AOT::AOTCompilerBackend *v12;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B190;
  uint64_t v2 = (void *)*((void *)this + 101);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v4) {
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 96);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)*((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::MILCompilerForE5 *)((char *)this + 608));
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::MILCompilerForE5 *)((char *)this + 264));
  *(void *)this = &unk_1EE36B370;
  unint64_t v9 = *((void *)this + 29);
  if (v9)
  {
    uint64_t v10 = *((void *)this + 30);
    uint64_t v11 = (void *)*((void *)this + 29);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
      uint64_t v11 = (void *)*((void *)this + 29);
    }
    *((void *)this + 30) = v9;
    operator delete(v11);
  }
  if (*((char *)this + 231) < 0)
  {
    operator delete(*((void **)this + 26));
    if ((*((char *)this + 207) & 0x80000000) == 0)
    {
LABEL_21:
      uint8x8_t v12 = this;
      goto LABEL_23;
    }
  }
  else if ((*((char *)this + 207) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*((void **)this + 23));
  uint8x8_t v12 = this;

LABEL_23:
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(v12);
}

void E5RT::OnDeviceAOTCompilerInterface::Compile()
{
  uint64_t v0 = 0x2B23829400000000;
  long long v1 = 0u;
  long long v2 = 0u;
  kdebug_trace();
  E5RT::OnDeviceAOTCompilerInterface::MakeAOTCompilerOptions();
}

void sub_1921822AC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 144);
  *(void *)(v1 - 144) = 0;
  if (v3) {
    Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform(v3);
  }
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1 - 136);
  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100]((Espresso::AOT::AOTCompilerOptions **)(v1 - 96));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_192182318(_Unwind_Exception *a1)
{
  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100]((Espresso::AOT::AOTCompilerOptions **)(v1 - 96));
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_192182334(_Unwind_Exception *a1)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)(v1 - 88));
  _Unwind_Resume(a1);
}

void E5RT::ScopedTrace::~ScopedTrace(E5RT::ScopedTrace *this)
{
  if (E5RT::g_trace_analysis_level >= *(_DWORD *)this) {
    kdebug_trace();
  }
}

void E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp(E5RT::ExecutionStreamOperation *this, const E5RT::PrecompiledComputeOpCreateOptions *a2)
{
}

void E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(E5RT::Ops::PreCompiledComputeOperation *this, const E5RT::PrecompiledComputeOpCreateOptions *a2)
{
  Programuint64_t Function = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(this);
  E5RT::ProgramFunctionPriv::GetE5Function(ProgramFunction, &v58);
  *(_OWORD *)std::string v55 = 0u;
  *(_OWORD *)uint64_t v56 = 0u;
  int v57 = 1065353216;
  *(_OWORD *)std::string v52 = 0u;
  *(_OWORD *)int v53 = 0u;
  int v54 = 1065353216;
  *(_OWORD *)uint64_t v49 = 0u;
  *(_OWORD *)std::string __p = 0u;
  int v51 = 1065353216;
  uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 40))(v58);
  uint64_t v4 = v3[1] - *v3;
  if (v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = v4 / 24;
    do
    {
      if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3))
      {
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v3 + 8, *v3 + v5);
      (*(void (**)(long long *__return_ptr))(*(void *)v8[5] + 16))(&v46);
      (*(void (**)(uint64_t))(*(void *)v8[5] + 56))(v8[5]);
      unint64_t v9 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v9, &v46);
      int v47 = v9 + 24;
      uint64_t v48 = (std::__shared_weak_count *)v9;
      uint64_t v10 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      if (*((void *)&v46 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      *(void *)&long long v46 = v8 + 2;
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, (uint64_t)(v8 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v46);
      uint64_t v13 = (uint64_t)v47;
      uint64_t v12 = (uint64_t)v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v14 = (std::__shared_weak_count *)v11[6];
      v11[5] = v13;
      v11[6] = v12;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        char v15 = v48;
        if (v48)
        {
LABEL_13:
          if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      else
      {
        char v15 = v48;
        if (v48) {
          goto LABEL_13;
        }
      }
      ++v6;
      v5 += 24;
    }
    while (v7 != v6);
  }
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 48))(v58);
  uint64_t v17 = v16[1] - *v16;
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = v17 / 24;
    do
    {
      if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16[1] - *v16) >> 3))
      {
        int v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v43, "iterator out of range");
        v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v43, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v16 + 8, *v16 + v18);
      (*(void (**)(long long *__return_ptr))(*(void *)v21[5] + 16))(&v46);
      (*(void (**)(uint64_t))(*(void *)v21[5] + 56))(v21[5]);
      uint64_t v22 = (char *)operator new(0x28uLL);
      std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v22, &v46);
      int v47 = v22 + 24;
      uint64_t v48 = (std::__shared_weak_count *)v22;
      uint64_t v23 = (std::__shared_weak_count *)*((void *)&v46 + 1);
      if (*((void *)&v46 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      *(void *)&long long v46 = v21 + 2;
      long long v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v52, (uint64_t)(v21 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v46);
      uint64_t v26 = (uint64_t)v47;
      uint64_t v25 = (uint64_t)v48;
      if (v48) {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = (std::__shared_weak_count *)v24[6];
      v24[5] = v26;
      v24[6] = v25;
      if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
        unint64_t v28 = v48;
        if (v48)
        {
LABEL_29:
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      else
      {
        unint64_t v28 = v48;
        if (v48) {
          goto LABEL_29;
        }
      }
      ++v19;
      v18 += 24;
    }
    while (v20 != v19);
  }
  float v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v58 + 56))(v58);
  uint64_t v30 = v29[1] - *v29;
  if (!v30) {
LABEL_49:
  }
    E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(this);
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = v30 / 24;
  while (1)
  {
    if (v32 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29[1] - *v29) >> 3))
    {
      uint64_t v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v44, "iterator out of range");
      v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v44, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
    }
    unint64_t v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v29 + 8, *v29 + v31);
    (*(void (**)(long long *__return_ptr))(*(void *)v34[5] + 16))(&v46);
    (*(void (**)(uint64_t))(*(void *)v34[5] + 56))(v34[5]);
    uint64_t v35 = (char *)operator new(0x28uLL);
    std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>((uint64_t)v35, &v46);
    int v47 = v35 + 24;
    uint64_t v48 = (std::__shared_weak_count *)v35;
    int8x8_t v36 = (std::__shared_weak_count *)*((void *)&v46 + 1);
    if (*((void *)&v46 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
    *(void *)&long long v46 = v34 + 2;
    uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v49, (uint64_t)(v34 + 2), (uint64_t)&std::piecewise_construct, (long long **)&v46);
    uint64_t v39 = (uint64_t)v47;
    uint64_t v38 = (uint64_t)v48;
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v40 = (std::__shared_weak_count *)v37[6];
    v37[5] = v39;
    v37[6] = v38;
    if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      int v41 = v48;
      if (v48)
      {
LABEL_45:
        if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    else
    {
      int v41 = v48;
      if (v48) {
        goto LABEL_45;
      }
    }
    ++v32;
    v31 += 24;
    if (v33 == v32) {
      goto LABEL_49;
    }
  }
}

void sub_192182E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a15);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v27 - 112);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    int v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      char v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            char v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          char v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  uint64_t v26 = operator new(0x38uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *uint64_t v26 = 0;
  v26[1] = v11;
  uint64_t v27 = (std::string *)(v26 + 2);
  unint64_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  void v26[5] = 0;
  v26[6] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      unint64_t v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  unint64_t v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  void *v33 = *v32;
  void *v32 = v45[0];
LABEL_92:
  char v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_192183320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_192183334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::OperandDescriptor const>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetOperandDesc@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 64);
  *a2 = *(void *)(this + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t std::__shared_ptr_emplace<E5RT::IOPortPriv>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<E5RT::OperandDescriptor const>,std::unordered_set<std::string> const&,std::allocator<E5RT::IOPortPriv>,0>(uint64_t a1, long long *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EE380930;
  long long v5 = *a2;
  *a2 = 0u;
  E5RT::IOPortPriv::IOPortPriv(a1 + 24, &v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (!*((void *)&v5 + 1)
    || atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_192183428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    Espresso::create_context(a10);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5OperandImpl::GetAliases(E5RT::E5OperandImpl *this)
{
  return (uint64_t)this + 72;
}

void E5RT::IOPortPriv::IOPortPriv()
{
}

void sub_192183534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x192FF16B0](v9, 0x10E0C407094469FLL);
  _Unwind_Resume(a1);
}

uint64_t E5RT::IOPortImpl::IOPortImpl(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = *a2;
  long long v5 = (void **)(a1 + 16);
  uint64_t v6 = a2[1];
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  std::unordered_set<std::string>::unordered_set(a1 + 56, a3);
  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 96) = 256;
  *(unsigned char *)(a1 + 98) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  if (!*a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "IOPortImpl");
    std::string::basic_string[abi:ne180100]<0>(v13, "Port descriptor cannot be NULL.");
    E5RT::Status::Status(v14, 1, v13);
    E5RT::E5RTError::E5RTError(exception, v15, v14);
  }
  uint64_t v7 = (E5RT::OperandDescriptor *)*v5;
  unint64_t v8 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(*v5);
  if (v8)
  {
    char HasKnownShape = E5RT::TensorDescriptor::HasKnownShape(v8);
  }
  else
  {
    unint64_t v10 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(v7);
    char HasKnownShape = E5RT::SurfaceDescriptor::GetSurfaceWidth(v10) != -1
                 && E5RT::SurfaceDescriptor::GetSurfaceHeight(v10) != -1;
  }
  *(unsigned char *)(a1 + 97) = HasKnownShape;
  E5RT::IOPortImpl::SetDynamic((unsigned char *)a1, HasKnownShape ^ 1);
  return a1;
}

void sub_1921836E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void *E5RT::OperandDescriptor::TryAsTensorDescriptor(void *this)
{
  if (this) {
  return this;
  }
}

unsigned char *E5RT::IOPortImpl::SetDynamic(unsigned char *this, char a2)
{
  if (this[48])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "SetDynamic");
    std::string::basic_string[abi:ne180100]<0>(v4, "Port's dynamic nature cannot be changed while operation is in use in an execution stream.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(exception, v6, v5);
  }
  if ((a2 & 1) == 0 && !this[97])
  {
    uint64_t v3 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "SetDynamic");
    std::string::basic_string[abi:ne180100]<0>(v4, "Port cannot be static while it's shape is unknown.");
    E5RT::Status::Status(v5, 2, v4);
    E5RT::E5RTError::E5RTError(v3, v6, v5);
  }
  this[96] = a2;
  return this;
}

void sub_192183918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if ((v23 & 1) == 0)
  {
LABEL_8:
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::TensorDescriptor::HasKnownShape(E5RT::TensorDescriptor *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 104);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceHeight(E5RT::SurfaceDescriptor *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t E5RT::SurfaceDescriptor::GetSurfaceWidth(E5RT::SurfaceDescriptor *this)
{
  return **((void **)this + 1);
}

void *E5RT::OperandDescriptor::SurfaceDescriptor(E5RT::OperandDescriptor *this)
{
  if (!this
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "SurfaceDescriptor");
    std::string::basic_string[abi:ne180100]<0>(v3, "Operand Descriptor is not a Surface descriptor.");
    E5RT::Status::Status(v4, 2, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_192183AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t E5RT::E5FunctionImpl::GetInputs(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 96;
}

uint64_t E5RT::E5FunctionImpl::GetInOuts(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 304;
}

uint64_t E5RT::E5FunctionImpl::GetOutputs(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 200;
}

void E5RT::Ops::PreCompiledComputeOperation::CreatePreCompiledComputeOp(E5RT::PrecompiledComputeOpCreateOptions *a1)
{
  Programuint64_t Function = E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(a1);
  E5RT::ProgramFunctionPriv::GetE5Function(ProgramFunction, &v9);
  E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(a1);
  char IntermediateBuffers = E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(a1);
  E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableGPUQuantOps(a1);
  E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalMPSGraphMaximumNumberOfEncodingThreads(a1);
  if (IntermediateBuffers)
  {
    E5RT::PrecompiledComputeOpCreateOptionsPriv::GetMachoToSharedResourceURI(v4, (uint64_t)__p);
    operator new();
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(__p, "CreatePreCompiledComputeOp");
  std::string::basic_string[abi:ne180100]<0>(v7, "External intermediate buffers mapping isn't supported yet.");
  E5RT::Status::Status(v8, 1, v7);
  E5RT::E5RTError::E5RTError(exception, __p, v8);
}

void sub_192183E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  *uint64_t v17 = 0;
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)va);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v18 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F08(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F1C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F30(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F44(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F58(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F6C(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F80(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183F94(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183FA8(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183FBC(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183FD0(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_192183FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  E5RT::Status::~Status((E5RT::Status *)(v31 - 120));
  if (*(char *)(v31 - 121) < 0) {
    operator delete(*(void **)(v31 - 144));
  }
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v31 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetProgramFunction(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return **((void **)this + 1);
}

uint64_t E5RT::ProgramFunctionPriv::GetE5Function@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptionsPriv::GetMachoToSharedResourceURI@<X0>(E5RT::PrecompiledComputeOpCreateOptionsPriv *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, *((void *)this + 1) + 168);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 208);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalMPSGraphMaximumNumberOfEncodingThreads(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(void *)(*((void *)this + 1) + 216);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetExperimentalEnableGPUQuantOps(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 209);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::TryGetOverrideComputeGPUDevice(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(void *)(*((void *)this + 1) + 72);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetAllocateIntermediateBuffers(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 64);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetLazyPrepareOpForEncode(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 65);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetMutableMILWeightPaths(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((void *)this + 1) + 128;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetIOSurfaceMemoryPoolId(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *(void *)(*((void *)this + 1) + 80);
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetDynamicCallables(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((void *)this + 1) + 88;
}

uint64_t E5RT::PrecompiledComputeOpCreateOptions::GetOperationName(E5RT::PrecompiledComputeOpCreateOptions *this)
{
  return *((void *)this + 1) + 16;
}

void E5RT::Ops::PreCompiledComputeOperation::PreCompiledComputeOperation(E5RT::ExecutionStreamOperationInternal *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  long long v9 = (E5RT::ExecutionStreamOperationInternal *)E5RT::ExecutionStreamOperationInternal::ExecutionStreamOperationInternal((uint64_t)a1, a2, a3, a4, a5);
  *(void *)long long v9 = &unk_1EE3268B0;
  *((void *)v9 + 37) = 0;
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(v9);
  E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(a1);
  uint64_t v17 = 0x2B23820000000000;
  long long v18 = 0u;
  long long v19 = 0u;
  kdebug_trace();
  char v16 = 4;
  strcpy((char *)__p, "e5rt");
  unint64_t v10 = E5RT::GetE5RTLog((uint64_t)__p);
  os_signpost_id_t v11 = os_signpost_id_generate(v10);

  if (v16 < 0) {
    operator delete(__p[0]);
  }
  char v16 = 4;
  strcpy((char *)__p, "e5rt");
  unint64_t v12 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v16 < 0)
  {
    operator delete(__p[0]);
    if (v11 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else if (v11 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_9;
  }
  if (os_signpost_enabled(v12))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "PreCompiledOpCreate", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
  }
LABEL_9:

  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3321888768;
  void v14[2] = sub_1923492D4;
  v14[3] = &__block_descriptor_64_ea8_48c46_ZTSNSt3__110shared_ptrIKN4E5RT10E5FunctionEEE_e5_v8__0l;
  v14[4] = v11;
  v14[5] = a2;
  uint64_t v13 = a6[1];
  void v14[6] = *a6;
  v14[7] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  MEMORY[0x192FF2250](v14);
  operator new();
}

void sub_192184478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v30 + 48);
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a27);
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(v28);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v27);
  _Unwind_Resume(a1);
}

void sub_19218450C(_Unwind_Exception *a1)
{
  std::experimental::fundamentals_v2::propagate_const<std::unique_ptr<E5RT::Ops::PreCompiledComputeOperation::Impl>>::~propagate_const(v2);
  E5RT::ExecutionStreamOperationInternal::~ExecutionStreamOperationInternal(v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetNameTraceIdentifier(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((void *)this + 33);
}

uint64_t E5RT::Ops::PreCompiledComputeOperation::PrepareOpForEncode(E5RT::Ops::PreCompiledComputeOperation::Impl **this)
{
  E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier((E5RT::ExecutionStreamOperationInternal *)this);
  uint64_t v10 = 0x2B23820400000000;
  long long v11 = 0u;
  long long v12 = 0u;
  kdebug_trace();
  char v9 = 4;
  strcpy((char *)__p, "e5rt");
  uint64_t v2 = E5RT::GetE5RTLog((uint64_t)__p);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);

  if (v9 < 0) {
    operator delete(__p[0]);
  }
  char v9 = 4;
  strcpy((char *)__p, "e5rt");
  unint64_t v4 = E5RT::GetE5RTLog((uint64_t)__p);
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_9;
    }
  }
  else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
  {
    goto LABEL_9;
  }
  if (os_signpost_enabled(v4))
  {
    LOWORD(__p[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_1920CB000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "PreCompiledOpPrepareOpForEncode", (const char *)&unk_192F346DB, (uint8_t *)__p, 2u);
  }
LABEL_9:

  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  unsigned char v7[2] = sub_1923495B0;
  void v7[3] = &__block_descriptor_40_e5_v8__0l;
  v7[4] = v3;
  long long v5 = (void (**)(void))MEMORY[0x192FF2250](v7);
  E5RT::Ops::PreCompiledComputeOperation::Impl::PrepareOpForEncode(this[37]);
  E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
  v5[2](v5);

  return kdebug_trace();
}

void sub_192184708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a21);
  _Unwind_Resume(a1);
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((void *)this + 35);
}

uint64_t E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode(uint64_t this)
{
  if (!*(_DWORD *)(this + 232))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "PrepareOpForEncode");
    std::string::basic_string[abi:ne180100]<0>(v2, "op supported buffer type is empty.");
    E5RT::Status::Status(v3, 1, v2);
    E5RT::E5RTError::E5RTError(exception, v4, v3);
  }
  *(unsigned char *)(this + 248) = *(unsigned char *)(this + 248) & 0xF8 | 1;
  return this;
}

void sub_192184828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5RT::Ops::PreCompiledComputeOperation::Impl::PrepareOpForEncode(E5RT::Ops::PreCompiledComputeOperation::Impl *this)
{
  if (E5RT::ExecutionStreamOperationInternal::GetOpState(*(E5RT::ExecutionStreamOperationInternal **)this)) {
    return;
  }
  uint64_t v2 = (void **)(*(uint64_t (**)(void))(**((void **)this + 9) + 32))(*((void *)this + 9));
  os_signpost_id_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)**v2 + 16))(**v2);
  if (*v3 == v3[1] || !*(unsigned char *)((*(uint64_t (**)(void))(**(void **)*v3 + 56))() + 8))
  {
    E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOps((uint64_t)this);
    if (*((void *)this + 7) - *((void *)this + 6) < 0x11uLL) {
      goto LABEL_5;
    }
LABEL_8:
    v39[0] = 0;
    v39[1] = v39;
    __p[0] = (void *)0x3812000000;
    __p[1] = sub_19234B5B4;
    uint64_t v41 = sub_19234B5C4;
    uint64_t v42 = 0;
    operator new();
  }
  E5RT::Ops::PreCompiledComputeOperation::Impl::BindEventsForOpsParallel(this);
  if (*((void *)this + 7) - *((void *)this + 6) >= 0x11uLL) {
    goto LABEL_8;
  }
LABEL_5:
  uint64_t v4 = MEMORY[0x192FF2020]();
  uint64_t v5 = *((void *)this + 6);
  if (*((void *)this + 7) == v5) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v6 = (void *)v4;
  (*(void (**)(void))(**(void **)v5 + 40))();
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 13) = **((void **)this + 6);
  uint64_t v8 = *(void *)(v7 - 16);
  *((void *)this + 14) = v8;
  E5RT::ExecutionStreamOperationInternal::GetCompletionAsyncEvent(v8, v39);
  long long v9 = *(_OWORD *)v39;
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)v39[1];
  if (v39[1] && !atomic_fetch_add((atomic_ullong *volatile)v39[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  LOBYTE(v36.__ptr_) = 0;
  *(_OWORD *)unint64_t v39 = 0u;
  *(_OWORD *)std::string __p = 0u;
  LODWORD(v41) = 1065353216;
  block.__ptr_ = &v36;
  int8x8_t v38 = v39;
  long long v12 = (void *)(*(uint64_t (**)(void))(**((void **)this + 9) + 40))(*((void *)this + 9));
  uint64_t v13 = v12[1] - *v12;
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    uint64_t v16 = v13 / 24;
    do
    {
      if (v15 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[1] - *v12) >> 3))
      {
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "iterator out of range");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v12 + 8, *v12 + v14);
      (*(void (**)(void **__return_ptr))(*(void *)v17[5] + 16))(&v34);
      sub_1923463A4((uint64_t)&block, (uint64_t)(v17 + 2), &v34);
      long long v18 = v35;
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      ++v15;
      v14 += 24;
    }
    while (v16 != v15);
  }
  long long v19 = (void *)(*(uint64_t (**)(void))(**((void **)this + 9) + 56))(*((void *)this + 9));
  uint64_t v20 = v19[1] - *v19;
  if (v20)
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    uint64_t v23 = v20 / 24;
    do
    {
      if (v22 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19[1] - *v19) >> 3))
      {
        uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v31, "iterator out of range");
        v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v31, (struct type_info *)off_1E5745160, MEMORY[0x1E4FBA1D0]);
      }
      uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::E5Operand const>>>>::find<std::string>(v19 + 8, *v19 + v21);
      (*(void (**)(void **__return_ptr))(*(void *)v24[5] + 16))(&v32);
      sub_1923463A4((uint64_t)&block, (uint64_t)(v24 + 2), &v32);
      uint64_t v25 = v33;
      if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
      ++v22;
      v21 += 24;
    }
    while (v23 != v22);
  }
  if (LOBYTE(v36.__ptr_)) {
    E5RT::Ops::PreCompiledComputeOperation::Impl::ReshapeOperationInternal((uint64_t)this, (uint64_t)v39);
  }
  uint64_t v26 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      while (1)
      {
        uint64_t v27 = (void **)*v26;
        unint64_t v28 = (std::__shared_weak_count *)v26[6];
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        if (*((char *)v26 + 39) < 0) {
          break;
        }
        operator delete(v26);
        uint64_t v26 = v27;
        if (!v27) {
          goto LABEL_39;
        }
      }
      operator delete(v26[2]);
      operator delete(v26);
      uint64_t v26 = v27;
    }
    while (v27);
  }
LABEL_39:
  long long v29 = v39[0];
  v39[0] = 0;
  if (v29) {
    operator delete(v29);
  }
}

void sub_192185004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192185018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19218502C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192185040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_192185054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __cxa_free_exception(v21);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_192185088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19218509C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921850B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1921850CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921850E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921850F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unordered_map<std::string,std::shared_ptr<E5RT::MemoryObject>>::~unordered_map[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_192185110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::exception_ptr::~exception_ptr(&a14);
  _Block_object_dispose(&a21, 8);
  std::unique_ptr<std::pair<std::mutex,std::exception_ptr>>::~unique_ptr[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5FunctionImpl::GetBlocks(E5RT::E5FunctionImpl *this)
{
  return (uint64_t)this + 72;
}

uint64_t E5RT::E5BlockImpl::GetOperations(E5RT::E5BlockImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOpState(E5RT::ExecutionStreamOperationInternal *this)
{
  return *((unsigned char *)this + 248) & 7;
}

uint64_t E5RT::E5OperationImpl<AneInferenceOpT>::GetCompletionEvent(uint64_t a1)
{
  return a1 + 400;
}

uint64_t E5RT::Ops::Impl::AneInferenceOperationImpl::AneInferenceOperationImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &unk_1EE326960;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a4;
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 56, a5);
  std::unordered_map<std::string,std::string>::unordered_map(a1 + 96, a6);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  return a1;
}

void sub_1921851EC(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_192185210(_Unwind_Exception *a1)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_192185348(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_19218535C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v39, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v10, a3, (uint64_t)v39);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_65:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    unint64_t v36 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v27 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        if (v27) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v27 = *(void **)(*(void *)a1 + 8 * v10);
        if (v27) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v3 = v36 & v10;
      uint64_t v27 = *(void **)(*(void *)a1 + 8 * (v36 & v10));
      if (v27) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v39[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39[0])
    {
      unint64_t v37 = *(void *)(*(void *)v39[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v37 >= v11) {
          v37 %= v11;
        }
      }
      else
      {
        v37 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v39[0];
    }
    goto LABEL_89;
  }
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v27) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v39[0] = *v27;
  void *v27 = v39[0];
LABEL_89:
  uint64_t v14 = (uint64_t *)v39[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_192185778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 16), *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  unint64_t v10 = (std::string *)(v9 + 40);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 24);
    *((void *)v9 + 7) = *(void *)(a3 + 40);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_192185844(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t E5RT::Ops::AneInferenceOperation::PrepareOpForEncode(E5RT::Ops::AneInferenceOperation *this)
{
  (*(void (**)(void))(**((void **)this + 37) + 16))(*((void *)this + 37));

  return E5RT::ExecutionStreamOperationInternal::PrepareOpForEncode((uint64_t)this);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      int8x8_t v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

Espresso::AOT::AOTCompilerOptions **std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100](Espresso::AOT::AOTCompilerOptions **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
    MEMORY[0x192FF16B0]();
  }
  return a1;
}

uint64_t Espresso::AOT::Classic::ClassicAOTCompilerBackend::DumpE5ForPlatform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void Espresso::AOT::E5AOTCompilerBackend::~E5AOTCompilerBackend(Espresso::AOT::E5AOTCompilerBackend *this)
{
  *(void *)this = &unk_1EE36B3D8;
  uint64_t v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);
  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);

  JUMPOUT(0x192FF16B0);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B3D8;
  uint64_t v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

{
  Espresso::AOT::AOTCompilerOptions *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE36B3D8;
  uint64_t v2 = (Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 184);
  Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5((Espresso::AOT::E5AOTCompilerBackend *)((char *)this + 320));
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(v2);

  Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(this);
}

void Espresso::AOT::CompilerOptionsForE5::~CompilerOptionsForE5(void **this)
{
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
    if ((*((char *)this + 303) & 0x80000000) == 0) {
      goto LABEL_3;
    }
    goto LABEL_6;
  }
  operator delete(this[38]);
  if (*((char *)this + 303) < 0)
  {
LABEL_6:
    operator delete(this[35]);
    uint64_t v2 = (void **)this[32];
    if (!v2) {
      goto LABEL_7;
    }
    while (1)
    {
LABEL_26:
      unint64_t v10 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_30:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_30;
      }
      operator delete(v2);
      uint64_t v2 = v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
  }
LABEL_3:
  uint64_t v2 = (void **)this[32];
  if (v2) {
    goto LABEL_26;
  }
LABEL_7:
  unint64_t v3 = this[30];
  this[30] = 0;
  if (v3) {
    operator delete(v3);
  }
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
    uint64_t v4 = this[23];
    if (!v4) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(this[27]);
  uint64_t v4 = this[23];
  if (v4)
  {
LABEL_11:
    this[24] = v4;
    operator delete(v4);
  }
LABEL_12:
  int8x8_t v5 = this[20];
  if (v5)
  {
    this[21] = v5;
    operator delete(v5);
  }
  BOOL v6 = this[17];
  if (v6)
  {
    this[18] = v6;
    operator delete(v6);
  }
  if (*((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_18:
      uint64_t v7 = this[8];
      if (v7) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(this[11]);
  uint64_t v7 = this[8];
  if (v7)
  {
    do
    {
LABEL_19:
      unint64_t v8 = (void *)*v7;
      E5RT::AsyncEventImpl::~AsyncEventImpl((E5RT::AsyncEventImpl *)(v7 + 2));
      operator delete(v7);
      uint64_t v7 = v8;
    }
    while (v8);
  }
LABEL_20:
  unint64_t v9 = this[6];
  this[6] = 0;
  if (v9) {
    operator delete(v9);
  }
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_37:
    operator delete(*this);
    return;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_37;
  }
}

void Espresso::AOT::AOTCompilerBackend::~AOTCompilerBackend(Espresso::AOT::AOTCompilerBackend *this)
{
  *(void *)this = &unk_1EE36B2C0;
  uint64_t v2 = (void **)*((void *)this + 20);
  if (v2)
  {
    do
    {
      uint64_t v4 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  unint64_t v3 = (void *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3) {
    operator delete(v3);
  }
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerBackend *)((char *)this + 8));
}

void *Espresso::AOT::E5AOTCompilerBackendFactory::E5AOTCompilerBackendFactory(Espresso::AOT::E5AOTCompilerBackendFactory *this)
{
  uint64_t result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *uint64_t result = &unk_1EE36B640;
  return result;
}

{
  void *result;

  uint64_t result = Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(this);
  *uint64_t result = &unk_1EE36B640;
  return result;
}

void *Espresso::AOT::AOTCompilerBackendFactory::AOTCompilerBackendFactory(void *this)
{
  *this = &unk_1EE36B5C8;
  return this;
}

uint64_t espresso_plan_get_phase(void *a1)
{
  if (!a1) {
    return 2;
  }
  {
    return *(unsigned int *)(a1[133] + 160);
  }
  return 2;
}

void Espresso::generic_general_concat_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, long long **a2@<X1>, int **a3@<X8>)
{
  *((void *)&v57 + 1) = *MEMORY[0x1E4F143B8];
  BOOL v6 = *a2;
  uint64_t v7 = *((void *)*a2 + 4);
  long long v8 = (*a2)[1];
  v52[0] = **a2;
  v52[1] = v8;
  uint64_t v53 = v7;
  std::string __p = 0;
  std::string v55 = 0;
  uint64_t v56 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v6 + 5), *((void *)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v9 = (char *)operator new(0x40uLL);
  *a3 = (int *)v9;
  a3[1] = (int *)v9;
  a3[2] = (int *)(v9 + 64);
  a3[1] = (int *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), v52, &v57, (uint64_t)v9);
  if (__p)
  {
    std::string v55 = __p;
    operator delete(__p);
  }
  uint64_t v10 = *(unsigned int *)(a1 + 280);
  unint64_t v11 = *a3;
  int v12 = (*a3)[5];
  int v13 = v12;
  if ((v10 & 0x80000000) != 0)
  {
    int v14 = (*a3)[5];
    if (v12 == -1)
    {
      if (v11[4] == 1) {
        int v14 = 4;
      }
      else {
        int v14 = 5;
      }
    }
    uint64_t v10 = (v14 + v10);
  }
  if (*(unsigned char *)(a1 + 284))
  {
    if (v12 == -1)
    {
      if (v11[4] == 1) {
        int v15 = 4;
      }
      else {
        int v15 = 5;
      }
    }
    else
    {
      int v15 = (*a3)[5];
      if (v12 <= 0) {
        goto LABEL_17;
      }
    }
    uint64_t v10 = (v15 + ~v10);
  }
LABEL_17:
  if (v12 == -1)
  {
    if (v11[4] == 1) {
      int v13 = 4;
    }
    else {
      int v13 = 5;
    }
  }
  if ((int)v10 > v13) {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_concat_kernel: axis out of bounds");
  }
  if (*(unsigned char *)(a1 + 285))
  {
    uint64_t v16 = *a2;
    uint64_t v17 = (char *)a2[1] - (char *)*a2;
    if ((unint64_t)v17 >= 0x41)
    {
      unint64_t v18 = v17 >> 6;
      if (v18 <= 2) {
        unint64_t v18 = 2;
      }
      uint64_t v19 = (uint64_t)(v16 + 4);
      unint64_t v20 = v18 - 1;
      do
      {
        if (!Espresso::layer_shape::operator==((uint64_t)v16, v19)) {
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("generic_general_concat_kernel: interleave true but all shapes not equal");
        }
        v19 += 64;
        --v20;
      }
      while (v20);
    }
  }
  switch((int)v10)
  {
    case 0:
      uint64_t v21 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v21 >= 0x41)
      {
        unint64_t v22 = v21 >> 6;
        int v23 = *v11;
        if (v22 <= 2) {
          unint64_t v22 = 2;
        }
        unint64_t v24 = v22 - 1;
        float v25 = (int *)(*a2 + 4);
        do
        {
          int v26 = *v25;
          v25 += 16;
          v23 += v26;
          *unint64_t v11 = v23;
          --v24;
        }
        while (v24);
      }
      break;
    case 1:
      uint64_t v45 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v45 >= 0x41)
      {
        unint64_t v46 = v45 >> 6;
        int v47 = v11[1];
        if (v46 <= 2) {
          unint64_t v46 = 2;
        }
        unint64_t v48 = v46 - 1;
        uint64_t v49 = (int *)*a2 + 17;
        do
        {
          int v50 = *v49;
          v49 += 16;
          v47 += v50;
          v11[1] = v47;
          --v48;
        }
        while (v48);
      }
      break;
    case 2:
      uint64_t v33 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v33 >= 0x41)
      {
        unint64_t v34 = v33 >> 6;
        int v35 = v11[2];
        if (v34 <= 2) {
          unint64_t v34 = 2;
        }
        unint64_t v36 = v34 - 1;
        unint64_t v37 = (int *)*a2 + 18;
        do
        {
          int v38 = *v37;
          v37 += 16;
          v35 += v38;
          v11[2] = v35;
          --v36;
        }
        while (v36);
      }
      break;
    case 3:
      uint64_t v39 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v39 >= 0x41)
      {
        unint64_t v40 = v39 >> 6;
        int v41 = v11[3];
        if (v40 <= 2) {
          unint64_t v40 = 2;
        }
        unint64_t v42 = v40 - 1;
        unint64_t v43 = (int *)*a2 + 19;
        do
        {
          int v44 = *v43;
          v43 += 16;
          v41 += v44;
          void v11[3] = v41;
          --v42;
        }
        while (v42);
      }
      break;
    case 4:
      uint64_t v27 = (char *)a2[1] - (char *)*a2;
      if ((unint64_t)v27 >= 0x41)
      {
        unint64_t v28 = v27 >> 6;
        int v29 = v11[4];
        if (v28 <= 2) {
          unint64_t v28 = 2;
        }
        unint64_t v30 = v28 - 1;
        uint64_t v31 = (int *)(*a2 + 5);
        do
        {
          int v32 = *v31;
          v31 += 16;
          v29 += v32;
          void v11[4] = v29;
          --v30;
        }
        while (v30);
      }
      break;
    default:
      Espresso::throw_exception_selector<Espresso::not_implemented_error,int &>("axis %d not implemented", v10);
  }
  if (v12 != -1)
  {
    if (v10 != v12) {
      return;
    }
    goto LABEL_61;
  }
  if (v11[4] == 1) {
    int v51 = 4;
  }
  else {
    int v51 = 5;
  }
  if (v10 == v51) {
LABEL_61:
  }
    v11[5] = v10 + 1;
}

void sub_1921861E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = v17;
  *(void *)(v18 + 8) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error>(const char *a1)
{
}

void E5RT::E5Compiler::MakeCompiler(E5RT::E5Compiler *this, const E5RT::E5CompilerConfigOptions *a2)
{
}

void sub_192186308(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v3, 0x1032C40D076463ALL);
  std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](v2, 0);
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<E5RT::E5CompilerImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 72));
    if (*(char *)(v2 + 63) < 0)
    {
      operator delete(*(void **)(v2 + 40));
      uint64_t v3 = *(void *)(v2 + 32);
      *(void *)(v2 + 32) = 0;
      if (!v3)
      {
LABEL_5:
        uint64_t v4 = *(void *)(v2 + 24);
        *(void *)(v2 + 24) = 0;
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        }
        E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v2);
        JUMPOUT(0x192FF16B0);
      }
    }
    else
    {
      uint64_t v3 = *(void *)(v2 + 32);
      *(void *)(v2 + 32) = 0;
      if (!v3) {
        goto LABEL_5;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    goto LABEL_5;
  }
  return result;
}

void E5RT::E5CompilerImpl::E5CompilerImpl(E5RT::E5CompilerImpl *this, const E5RT::E5CompilerConfigOptions *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  E5RT::OnDeviceAOTCompilerInterface::OnDeviceAOTCompilerInterface(this);
  operator new();
}

void sub_1921866F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  std::mutex::~mutex(v24);
  if (*(char *)(v22 + 63) < 0)
  {
    operator delete(*v26);
    uint64_t v28 = *v23;
    *int v23 = 0;
    if (!v28)
    {
LABEL_5:
      uint64_t v29 = *(void *)(v22 + 24);
      *(void *)(v22 + 24) = 0;
      if (!v29) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v28 = *v23;
    *int v23 = 0;
    if (!v28) {
      goto LABEL_5;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  uint64_t v29 = *(void *)(v22 + 24);
  *(void *)(v22 + 24) = 0;
  if (!v29)
  {
LABEL_6:
    E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v22);
    _Unwind_Resume(a1);
  }
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  E5RT::OnDeviceAOTCompilerInterface::~OnDeviceAOTCompilerInterface((void **)v22);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerOptions::Create(E5RT::E5CompilerOptions *this)
{
}

void sub_19218690C(_Unwind_Exception *a1)
{
  MEMORY[0x192FF16B0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t std::hash<E5RT::E5CompilerOptions>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3) {
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v3 + 16))(v3, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  }
  if (!v4 || (int8x8_t v5 = (int8x16_t **)v4(3)) == 0) {
LABEL_102:
  }
    std::__throw_bad_any_cast[abi:ne180100]();
  int8x8_t v84 = 0;
  BOOL v6 = *v5;
  uint64_t v7 = (char *)v5[1] - (char *)*v5;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    if (v8 >= 4)
    {
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = v6 + 1;
      int8x16_t v12 = 0uLL;
      unint64_t v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      int8x16_t v14 = 0uLL;
      do
      {
        int8x16_t v12 = veorq_s8(v12, v11[-1]);
        int8x16_t v14 = veorq_s8(v14, *v11);
        v11 += 2;
        v13 -= 4;
      }
      while (v13);
      int8x16_t v15 = veorq_s8(v14, v12);
      int8x8_t v10 = veor_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      if (v8 == v9) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v9 = 0;
      int8x8_t v10 = 0;
    }
    unint64_t v16 = v8 - v9;
    uint64_t v17 = &v6->i64[v9];
    do
    {
      uint64_t v18 = *v17++;
      *(void *)&v10 ^= v18;
      --v16;
    }
    while (v16);
LABEL_15:
    int8x8_t v84 = v10;
  }
  uint64_t v19 = *(void **)(a2 + 8);
  if (v19) {
  unint64_t v20 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v19 + 16))(v19, "milEntryPoints<std::vector<std::string>>", 40);
  }
  if (!v20) {
    goto LABEL_102;
  }
  uint64_t v21 = (uint64_t *)v20(3);
  uint64_t v22 = v21;
  if (!v21) {
    goto LABEL_102;
  }
  uint64_t v23 = *v21;
  if (v21[1] == *v21)
  {
    unint64_t v25 = 0;
  }
  else
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v26 = 0;
    do
    {
      uint64_t v27 = v23 + v24;
      int v28 = *(char *)(v27 + 23);
      if (v28 >= 0) {
        uint64_t v29 = (uint64_t *)v27;
      }
      else {
        uint64_t v29 = *(uint64_t **)v27;
      }
      if (v28 >= 0) {
        unint64_t v30 = *(unsigned __int8 *)(v27 + 23);
      }
      else {
        unint64_t v30 = *(void *)(v27 + 8);
      }
      v25 ^= std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v85, v29, v30);
      ++v26;
      uint64_t v23 = *v22;
      v24 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v22[1] - *v22) >> 3));
  }
  E5Common::HashCombine(&v84, (unint64_t *)v25);
  uint64_t v31 = *(void **)(a2 + 8);
  if (v31) {
  int v32 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v31 + 16))(v31, "enableProfiling<BOOL>", 21);
  }
  if (!v32) {
    goto LABEL_102;
  }
  uint64_t v33 = (unsigned __int8 *)v32(3);
  if (!v33) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v33);
  unint64_t v34 = *(void **)(a2 + 8);
  if (v34) {
  int v35 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v34 + 16))(v34, "forceRecompilation<BOOL>", 24);
  }
  if (!v35) {
    goto LABEL_102;
  }
  unint64_t v36 = (unsigned __int8 *)v35(3);
  if (!v36) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v36);
  unint64_t v37 = *(void **)(a2 + 8);
  if (v37) {
  int v38 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v37 + 16))(v37, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!v38) {
    goto LABEL_102;
  }
  uint64_t v39 = (uint64_t *)v38(3);
  if (!v39) {
    goto LABEL_102;
  }
  uint64_t v40 = *v39;
  uint64_t v41 = v39[1];
  if (*v39 != v41)
  {
    do
    {
      int v42 = *(char *)(v40 + 23);
      if (v42 >= 0) {
        unint64_t v43 = (uint64_t *)v40;
      }
      else {
        unint64_t v43 = *(uint64_t **)v40;
      }
      if (v42 >= 0) {
        unint64_t v44 = *(unsigned __int8 *)(v40 + 23);
      }
      else {
        unint64_t v44 = *(void *)(v40 + 8);
      }
      uint64_t v45 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v86, v43, v44);
      E5Common::HashCombine(&v84, v45);
      v40 += 24;
    }
    while (v40 != v41);
  }
  unint64_t v46 = *(void **)(a2 + 8);
  if (v46) {
  int v47 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v46 + 16))(v46, "enableReshapeWithMinimalAllocations<BOOL>", 41);
  }
  if (!v47) {
    goto LABEL_102;
  }
  unint64_t v48 = (unsigned __int8 *)v47(3);
  if (!v48) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v48);
  uint64_t v49 = *(void **)(a2 + 8);
  if (v49) {
  int v50 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v49 + 16))(v49, "forceClassicAotOldHw<BOOL>", 26);
  }
  if (!v50) {
    goto LABEL_102;
  }
  int v51 = (unsigned __int8 *)v50(3);
  if (!v51) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v51);
  std::string v52 = *(void **)(a2 + 8);
  if (v52) {
  uint64_t v53 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v52 + 16))(v52, "customAneCompilerOptions<std::string>", 37);
  }
  if (!v53) {
    goto LABEL_102;
  }
  uint64_t v54 = v53(3);
  if (!v54) {
    goto LABEL_102;
  }
  int v55 = *(char *)(v54 + 23);
  if (v55 >= 0) {
    uint64_t v56 = (uint64_t *)v54;
  }
  else {
    uint64_t v56 = *(uint64_t **)v54;
  }
  if (v55 >= 0) {
    unint64_t v57 = *(unsigned __int8 *)(v54 + 23);
  }
  else {
    unint64_t v57 = *(void *)(v54 + 8);
  }
  uint64_t v58 = (unint64_t *)std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v87, v56, v57);
  E5Common::HashCombine(&v84, v58);
  int64_t v59 = *(void **)(a2 + 8);
  if (v59) {
  int64_t v60 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v59 + 16))(v59, "experimentalDisableDataDependentShape<BOOL>", 43);
  }
  if (!v60) {
    goto LABEL_102;
  }
  uint64_t v61 = (unsigned __int8 *)v60(3);
  if (!v61) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v61);
  uint64_t v62 = *(void **)(a2 + 8);
  if (v62) {
  int v63 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v62 + 16))(v62, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50);
  }
  if (!v63) {
    goto LABEL_102;
  }
  int v64 = (unsigned __int8 *)v63(3);
  if (!v64) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v64);
  BOOL v65 = *(void **)(a2 + 8);
  if (v65) {
  unint64_t v66 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v65 + 16))(v65, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43);
  }
  if (!v66) {
    goto LABEL_102;
  }
  int v67 = (unsigned __int8 *)v66(3);
  if (!v67) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v67);
  unint64_t v68 = *(void **)(a2 + 8);
  if (v68) {
  uint64_t v69 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v68 + 16))(v68, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52);
  }
  if (!v69) {
    goto LABEL_102;
  }
  int v70 = (unsigned __int8 *)v69(3);
  if (!v70) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v70);
  BOOL v71 = *(void **)(a2 + 8);
  if (v71) {
  uint64_t v72 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v71 + 16))(v71, "experimentalMoveReadStateOps<BOOL>", 34);
  }
  if (!v72) {
    goto LABEL_102;
  }
  uint64_t v73 = (unsigned __int8 *)v72(3);
  if (!v73) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v73);
  int v74 = *(void **)(a2 + 8);
  if (v74) {
  unint64_t v75 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v74 + 16))(v74, "experimentalShrinkQuantGroup<BOOL>", 34);
  }
  if (!v75) {
    goto LABEL_102;
  }
  uint64_t v76 = (unsigned __int8 *)v75(3);
  if (!v76) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v76);
  uint64_t v77 = *(void **)(a2 + 8);
  if (v77) {
  int v78 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v77 + 16))(v77, "experimentalDisableCompileTimeMPSGraphTypeInference<BOOL>", 57);
  }
  if (!v78) {
    goto LABEL_102;
  }
  int v79 = (unsigned __int8 *)v78(3);
  if (!v79) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v79);
  uint64_t v80 = *(void **)(a2 + 8);
  if (v80) {
  int v81 = *(uint64_t (**)(uint64_t))(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v80 + 16))(v80, "enableMPSGraphPackage<BOOL>", 27);
  }
  if (!v81) {
    goto LABEL_102;
  }
  BOOL v82 = (unsigned __int8 *)v81(3);
  if (!v82) {
    goto LABEL_102;
  }
  E5Common::HashCombine(&v84, (unint64_t *)*v82);
  return (uint64_t)v84;
}

uint64_t **E5RT::ConfigOptionsImpl::GetConfigOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::find<std::string_view>((void *)(a1 + 8), (uint64_t)v14);
  if (!v3)
  {
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v14);
    int8x8_t v5 = std::string::insert(&__dst, 0, "Unknown config name ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " given.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "GetConfigOption");
    E5RT::Status::Status(&__dst, 1, &v12);
    E5RT::E5RTError::E5RTError(exception, &v11, &__dst);
  }
  return v3 + 4;
}

void sub_192187744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0) {
        operator delete(a23);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::find<std::string_view>(void *a1, uint64_t a2)
{
  unint64_t v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v18, *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v9 = *(uint64_t ****)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  int8x8_t v10 = *v9;
  if (*v9)
  {
    uint64_t v13 = a2;
    long long v12 = *(uint64_t **)a2;
    size_t v11 = *(void *)(v13 + 8);
    if (v7.u32[0] < 2uLL)
    {
      uint64_t v14 = *(void *)&v5 - 1;
      while (1)
      {
        unint64_t v16 = v10[1];
        if ((uint64_t *)v6 == v16)
        {
          if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11)) {
            return v10;
          }
        }
        else if (((unint64_t)v16 & v14) != v8)
        {
          return 0;
        }
        int8x8_t v10 = (uint64_t **)*v10;
        if (!v10) {
          return v10;
        }
      }
    }
    do
    {
      unint64_t v15 = (unint64_t)v10[1];
      if (v6 == v15)
      {
        if (v10[3] == (uint64_t *)v11 && !memcmp(v10[2], v12, v11)) {
          return v10;
        }
      }
      else
      {
        if (v15 >= *(void *)&v5) {
          v15 %= *(void *)&v5;
        }
        if (v15 != v8) {
          return 0;
        }
      }
      int8x8_t v10 = (uint64_t **)*v10;
    }
    while (v10);
  }
  return v10;
}

void *E5Common::HashCombine(void *this, unint64_t *a2)
{
  *this ^= (unint64_t)&a2[8 * *this + 331804471] + (*this >> 2) + 1;
  return this;
}

void E5RT::ConfigOptionsImpl::~ConfigOptionsImpl(E5RT::ConfigOptionsImpl *this)
{
  *(void *)this = &unk_1EE325950;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v4 = (void *)*v2;
      int8x8_t v5 = (void (*)(void, void *, void, void, void))v2[4];
      if (v5) {
        v5(0, v2 + 4, 0, 0, 0);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  void *v4;
  void (*v5)(void, void *, void, void, void);
  uint64_t vars8;

  *(void *)this = &unk_1EE325950;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v4 = (void *)*v2;
      int8x8_t v5 = (void (*)(void, void *, void, void, void))v2[4];
      if (v5) {
        v5(0, v2 + 4, 0, 0, 0);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }

  JUMPOUT(0x192FF16B0);
}

{
  void *v2;
  void *v3;
  void *v4;
  void (*v5)(void, void *, void, void, void);

  *(void *)this = &unk_1EE325950;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    do
    {
      unint64_t v4 = (void *)*v2;
      int8x8_t v5 = (void (*)(void, void *, void, void, void))v2[4];
      if (v5) {
        v5(0, v2 + 4, 0, 0, 0);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    operator delete(v3);
  }
}

void *E5RT::ConfigOptionsImpl::SetConfigOption(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(uint64_t))
{
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!*a4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v23, "SetConfigOption");
    std::string::basic_string[abi:ne180100]<0>(&v22, "Passed empty value.");
    E5RT::Status::Status(&__dst, 1, &v22);
    E5RT::E5RTError::E5RTError(exception, &v23, &__dst);
  }
  uint8x8_t v7 = (uint64_t (**)(uint64_t, void, void, void, void))v6;
  uint64_t v8 = ((uint64_t (*)(uint64_t, void (**)(uint64_t), void, void, void))*a4)(4, a4, 0, 0, 0);
  if (*v7)
  {
    uint64_t v9 = (*v7)(4, v7, 0, 0, 0);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v11 = *(void *)(v9 + 8);
    BOOL v12 = __OFSUB__(v10, v11);
    if (v10 == v11) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v11 = *(void *)(MEMORY[0x1E4FBA3D8] + 8);
    BOOL v12 = __OFSUB__(v10, v11);
    if (v10 == v11) {
      goto LABEL_9;
    }
  }
  if ((v11 & v10) < 0 == v12
    || strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v11 & 0x7FFFFFFFFFFFFFFFLL)))
  {
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)v25);
    unint64_t v16 = std::string::insert(&__dst, 0, "Invalid config value type provided for setting config ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    char v18 = std::string::append(&v22, ".");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v24 = v18->__r_.__value_.__r.__words[2];
    long long v23 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    unint64_t v20 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v22, "SetConfigOption");
    E5RT::Status::Status(&__dst, 1, &v23);
    E5RT::E5RTError::E5RTError(v20, &v22, &__dst);
  }
LABEL_9:
  *(void *)&long long v23 = v25;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(a1 + 8, (uint64_t)v25, (uint64_t)&std::piecewise_construct, (_OWORD **)&v23);
  return std::any::operator=[abi:ne180100](v13 + 4, a4);
}

void sub_192187C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a10);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0)
      {
        operator delete(a23);
        _Unwind_Resume(a1);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v28);
  goto LABEL_6;
}

void sub_192187D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    __cxa_free_exception(v22);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void *std::any::operator=[abi:ne180100](void *a1, void (**a2)(uint64_t))
{
  unsigned char v4[8] = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2) {
    (*a2)(1);
  }
  if (v4 != a1 && *a1 != (unsigned __int128)0) {
    ((void (*)(uint64_t, void *, void *, void, void))*a1)(2, a1, v4, 0, 0);
  }
  if (v4[0]) {
    ((void (*)(void, void *, void, void, void))v4[0])(0, v4, 0, 0, 0);
  }
  return a1;
}

void sub_192187EE8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x1E4FBA378];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      return result;
    case 2:
      uint64_t result = 0;
      *(unsigned char *)(a3 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
      *(void *)a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v8 = *(void *)(a4 + 8);
        uint64_t v9 = *(void *)(MEMORY[0x1E4FBA378] + 8);
        if (v8 != v9)
        {
          if ((v9 & v8) < 0 == __OFSUB__(v8, v9)) {
            return 0;
          }
          if (strcmp((const char *)(v8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v9 & 0x7FFFFFFFFFFFFFFFLL))) {
            return 0;
          }
        }
      }
      else if (a5 != &std::__any_imp::__unique_typeinfo<BOOL>::__id)
      {
        return 0;
      }
      return a2 + 8;
    case 4:
      return result;
    default:
      uint64_t result = 0;
      *(void *)a2 = 0;
      return result;
  }
}

void *std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      a3[2] = 0;
      a3[3] = 0;
      a3[1] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 1, a2[1], a2[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - a2[1]) >> 3));
      uint64_t result = 0;
      *a3 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      return result;
    case 2:
      uint64_t result = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a3[3] = a2[3];
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
      *a3 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v12 = *(void *)(a4 + 8);
        if (v12 != 0x8000000192DAB7A0)
        {
          if (((v12 & 0x8000000192DAB7A0 & 0x8000000000000000) != 0) == __OFSUB__(v12, 0x8000000192DAB7A0)) {
            return 0;
          }
          if (strcmp((const char *)(v12 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAB7A0 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &std::__any_imp::__unique_typeinfo<std::vector<std::string>>::__id)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      uint64_t v9 = a2[1];
      if (v9)
      {
        uint64_t v10 = a2[2];
        uint64_t v11 = (void *)a2[1];
        if (v10 != v9)
        {
          do
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)(v10 - 24));
            }
            v10 -= 24;
          }
          while (v10 != v9);
          uint64_t v11 = (void *)a2[1];
        }
        a2[2] = v9;
        operator delete(v11);
      }
      uint64_t result = 0;
      *a2 = 0;
      return result;
  }
}

void *std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = 0;
      uint64_t v12 = (unsigned char *)a2[1];
      uint64_t v11 = (unsigned char *)a2[2];
      int64_t v13 = v11 - v12;
      if (v11 != v12)
      {
        if (v13 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = (char *)operator new(v11 - v12);
        a3[1] = v14;
        a3[2] = v14;
        unint64_t v15 = &v14[8 * (v13 >> 3)];
        a3[3] = v15;
        memcpy(v14, v12, v13);
        a3[2] = v15;
      }
      uint64_t result = 0;
      *a3 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
      return result;
    case 2:
      uint64_t result = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a3[3] = a2[3];
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
      *a3 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        unint64_t v10 = *(void *)(a4 + 8);
        if ((char *)v10 != "NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE")
        {
          if (((v10 & (unint64_t)"NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE" & 0x8000000000000000) != 0) == __OFSUB__(v10, "NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE")) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN4E5RT17ComputeDeviceTypeENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &std::__any_imp::__unique_typeinfo<std::vector<E5RT::ComputeDeviceType>>::__id)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      uint64_t v9 = (void *)a2[1];
      if (v9)
      {
        a2[2] = v9;
        operator delete(v9);
      }
      uint64_t result = 0;
      *a2 = 0;
      return result;
  }
}

void sub_1921883C4(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      unint64_t v10 = (std::string *)(a3 + 8);
      if (*(char *)(a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
        uint64_t result = 0;
        *(void *)a3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
      }
      else
      {
        long long v11 = *(_OWORD *)(a2 + 8);
        *(void *)(a3 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
        uint64_t result = 0;
        *(void *)a3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
      }
      return result;
    case 2:
      long long v12 = *(_OWORD *)(a2 + 8);
      *(void *)(a3 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a3 + 8) = v12;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)a3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
      if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      uint64_t v9 = *(void **)(a2 + 8);
      goto LABEL_8;
    case 3:
      if (a4)
      {
        uint64_t v13 = *(void *)(a4 + 8);
        if (v13 != 0x8000000192DAB800)
        {
          if (((v13 & 0x8000000192DAB800 & 0x8000000000000000) != 0) == __OFSUB__(v13, 0x8000000192DAB800)) {
            return 0;
          }
          if (strcmp((const char *)(v13 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000192DAB800 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &std::__any_imp::__unique_typeinfo<std::string>::__id)
      {
        return 0;
      }
      return (void *)(a2 + 8);
    case 4:
      return result;
    default:
      if (*(char *)(a2 + 31) < 0)
      {
        uint64_t v9 = *(void **)(a2 + 8);
LABEL_8:
        operator delete(v9);
      }
LABEL_9:
      uint64_t result = 0;
      *(void *)a2 = 0;
      return result;
  }
}

void E5RT::E5CompilerOptions::E5CompilerOptions(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  E5RT::ConfigOptions::ConfigOptions(this);
}

void sub_192188B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v18 = v17;
  MEMORY[0x192FF16B0](v18, 0x10A1C40EA59D502);
  std::unordered_map<std::string_view,std::any>::~unordered_map[abi:ne180100]((uint64_t)&a16);
  E5RT::ConfigOptions::~ConfigOptions(v16);
  _Unwind_Resume(a1);
}

void sub_192188C5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x192188C24);
}

void sub_192188C74(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x192188C34);
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::any>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::any>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::any>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v34, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    long long v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        uint64_t v16 = a2;
        unint64_t v15 = *(uint64_t **)a2;
        size_t v14 = *(void *)(v16 + 8);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = *((void *)v13 + 1);
            if (v18 == v9)
            {
              if (*((void *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14)) {
                return v13;
              }
            }
            else if ((v18 & (v10 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v13 = *(void **)v13;
            if (!v13) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v13 + 1);
          if (v17 == v9)
          {
            if (*((void *)v13 + 3) == v14 && !memcmp(*((const void **)v13 + 2), v15, v14)) {
              return v13;
            }
          }
          else
          {
            if (v17 >= v10) {
              v17 %= v10;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v13 = *(void **)v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  long long v19 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x40uLL);
  v34[0] = v13;
  v34[1] = a1 + 16;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = **a4;
  *((void *)v13 + 4) = 0;
  *((void *)v13 + 5) = 0;
  char v35 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    long long v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *(void *)uint64_t v13 = *v23;
LABEL_63:
      *long long v23 = v13;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_39;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_39:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v4 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        long long v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        unint64_t v4 = v9;
        uint64_t v22 = *(void *)a1;
        long long v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      unint64_t v4 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      long long v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *(void *)uint64_t v13 = *v19;
  *long long v19 = v13;
  *(void *)(v22 + 8 * v4) = v19;
  if (*(void *)v13)
  {
    unint64_t v32 = *(void *)(*(void *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    long long v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_192188FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string_view,std::any>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::any::operator=[abi:ne180100]<BOOL,BOOL,void>(uint64_t a1, char *a2)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  char v3 = *a2;
  LOBYTE(v8) = *a2;
  uint8x8_t v7 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
  if (&v7 == (uint64_t (**)(unsigned int, uint64_t, uint64_t, uint64_t, void *))a1)
  {
    uint64_t v5 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
LABEL_8:
    v5(0, (uint64_t)&v7, 0, 0, 0);
    return a1;
  }
  unint64_t v4 = *(uint64_t (**)(unsigned int, uint64_t, uint64_t, uint64_t, void *))a1;
  if (!*(void *)a1)
  {
    *(unsigned char *)(a1 + 8) = v3;
    *(void *)a1 = std::__any_imp::_SmallHandler<BOOL>::__handle[abi:ne180100];
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v4(2u, a1, (uint64_t)v9, 0, 0);
  v7(2u, (uint64_t)&v7, a1, 0, 0);
  ((void (*)(uint64_t, void *, uint64_t (**)(unsigned int, uint64_t, uint64_t, uint64_t, void *), void, void))v9[0])(2, v9, &v7, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v5 = v7;
  if (v7) {
    goto LABEL_8;
  }
  return a1;
}

void sub_192189154(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::any::operator=[abi:ne180100]<std::vector<std::string>,std::vector<std::string>,void>(void *a1, uint64_t *a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v9[1] = *a2;
  void v9[2] = v4;
  uint64_t v5 = a2[2];
  void v9[3] = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v9[0] = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
  if (v9 == a1)
  {
    uint8x8_t v7 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  uint64_t v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
    *a1 = std::__any_imp::_SmallHandler<std::vector<std::string>>::__handle[abi:ne180100];
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  uint8x8_t v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_1921892CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::any::operator=[abi:ne180100]<std::string,std::string,void>(uint64_t a1, long long *a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v6 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  if (&v6 == (void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *))a1)
  {
    uint64_t v4 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
LABEL_8:
    v4(0, (uint64_t)&v6, 0, 0, 0);
    return a1;
  }
  uint64_t v3 = *(void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *))a1;
  if (!*(void *)a1)
  {
    *(_OWORD *)(a1 + 8) = v7;
    *(void *)(a1 + 24) = v8;
    *(void *)a1 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
    return a1;
  }
  v9[0] = 0;
  v9[1] = 0;
  v3(2u, a1, (uint64_t)v9, 0, 0);
  v6(2u, (uint64_t)&v6, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *(**)(unsigned int, uint64_t, uint64_t, uint64_t, void *), void, void))v9[0])(2, v9, &v6, 0, 0);
  if (v9[0]) {
    ((void (*)(void, void *, void, void, void))v9[0])(0, v9, 0, 0, 0);
  }
  uint64_t v4 = v6;
  if (v6) {
    goto LABEL_8;
  }
  return a1;
}

void sub_192189450(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::ConfigOptionsImpl::ConfigOptionsImpl(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = &unk_1EE325950;
  *(void *)(result + 8) = v2;
  *(void *)(result + 16) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 24) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 32) = v6;
  *(_DWORD *)(result + 40) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 16);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 24;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void E5RT::ConfigOptions::ConfigOptions(E5RT::ConfigOptions *this)
{
  *(void *)this = &unk_1EE324828;
  *((void *)this + 1) = 0;
  operator new();
}

{
  *(void *)this = &unk_1EE324828;
  *((void *)this + 1) = 0;
  operator new();
}

void sub_192189668(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v3) {
    sub_192344238(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::any::operator=[abi:ne180100]<std::vector<E5RT::ComputeDeviceType>,std::vector<E5RT::ComputeDeviceType>,void>(void *a1, uint64_t *a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v9[1] = *a2;
  void v9[2] = v4;
  uint64_t v5 = a2[2];
  void v9[3] = v5;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v9[0] = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
  if (v9 == a1)
  {
    unint64_t v7 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
LABEL_8:
    v7(0, v9, 0, 0, 0);
    return a1;
  }
  uint64_t v6 = (void (*)(uint64_t, void *, void *, void, void))*a1;
  if (!*a1)
  {
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
    *a1 = std::__any_imp::_SmallHandler<std::vector<E5RT::ComputeDeviceType>>::__handle[abi:ne180100];
    return a1;
  }
  v10[0] = 0;
  v10[1] = 0;
  v6(2, a1, v10, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v9[0])(2, v9, a1, 0, 0);
  ((void (*)(uint64_t, void *, void *, void, void))v10[0])(2, v10, v9, 0, 0);
  if (v10[0]) {
    ((void (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  unint64_t v7 = (void *(*)(unsigned int, void *, void *, uint64_t, void *))v9[0];
  if (v9[0]) {
    goto LABEL_8;
  }
  return a1;
}

void sub_1921897E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerConfigOptions::GetBundleCacheAPFSPurgeable(E5RT::E5CompilerConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  uint64_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "bundleCacheAPFSPurgeable<BOOL>", 30);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

void ___ZN8Espresso20espresso_plan_tracerC2Ev_block_invoke()
{
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  id v8 = [v0 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v1 = [v8 objectForKeyedSubscript:@"com.apple.espresso.trace"];
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record = [v1 BOOLValue];
  uint64_t v2 = [v8 objectForKeyedSubscript:@"com.apple.espresso.trace.path"];
  uint64_t v3 = (void *)Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path;
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path = v2;

  if (!Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path)
  {
    id v4 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
    uint64_t v5 = [v4 currentDirectoryPath];
    uint64_t v6 = (void *)Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path;
    Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path = v5;
  }
  unint64_t v7 = [MEMORY[0x1E4F28F80] processInfo];
  Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::pid = [v7 processIdentifier];
}

void sub_1921899D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  long long v12 = v11;

  _Unwind_Resume(a1);
}

E5RT::OnDeviceAOTCompilerInterface *E5RT::OnDeviceAOTCompilerInterface::OnDeviceAOTCompilerInterface(E5RT::OnDeviceAOTCompilerInterface *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  E5RT::GetCurrentPlatformName(this, &v3);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(std::string *)this = v3;
  return this;
}

void sub_192189A74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::ANERuntimeEngine::batch::~batch(Espresso::ANERuntimeEngine::batch *this)
{
  *(void *)this = &unk_1EE33AF58;
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 264));
  std::mutex::~mutex((std::mutex *)((char *)this + 200));
  std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(*((void **)this + 23));
  uint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_1EE350548;
  std::string v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }

  Espresso::abstract_batch::~abstract_batch(this);
}

{
  uint64_t vars8;

  Espresso::ANERuntimeEngine::batch::~batch(this);

  JUMPOUT(0x192FF16B0);
}

void std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,Espresso::ANERuntimeEngine::async_error>>>::destroy(a1[1]);

    operator delete(a1);
  }
}

void anonymous namespace'::create_mmap_blob<float,1>(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a4);
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 80))(*a3, v8);
  if (!v9) {
    Espresso::throw_exception_selector<Espresso::io_error>("MMapped data not available.");
  }
  uint64_t v10 = v9;
  Espresso::layer_nd_shape::shape_vector(&v16, a5);
  std::vector<int>::pointer begin = v16.__begin_;
  long long v12 = (char *)operator new(0x58uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)long long v12 = &unk_1EE389920;
  *((void *)v12 + 3) = &unk_1EE36BEB0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *((_DWORD *)v12 + 8) = *begin;
  *((void *)v12 + 5) = v10;
  v12[48] = 0;
  *a1 = v12 + 24;
  a1[1] = v12;
  v16.__end_ = begin;
  operator delete(begin);
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 8);
  *((void *)v12 + 7) = v14;
  *((void *)v12 + 8) = v13;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_192189CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::SetKernelWeight(Espresso::base_kernel &,MIL::IROperation const&,std::string const&,BOOL,BOOL,BOOL,BOOL)::$_0::operator()(uint64_t a1, void *a2)
{
  if (!*a2)
  {
    uint64_t Location = MIL::IRObject::GetLocation(*(MIL::IRObject **)a1);
    p_p = &__p;
    (*(void (**)(void **__return_ptr))(*(void *)Location + 24))(&__p);
    if (v69 < 0) {
      p_p = __p;
    }
    std::operator+<char>();
    uint64_t v62 = std::string::append(&v72, " not present.");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    int64_t v74 = v62->__r_.__value_.__r.__words[2];
    long long v73 = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (v74 >= 0) {
      int v64 = &v73;
    }
    else {
      int v64 = (long long *)v73;
    }
    Espresso::throw_exception_selector<Espresso::network_translation_error,char const*,char const*>("MIL->EIR translation error %s: %s", (uint64_t)p_p, (uint64_t)v64);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = (MIL::IRValueType *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))(*a2);
  uint64_t v6 = MIL::IRValueType::AsTensorType(v5);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  switch(v7)
  {
    case 4:
      uint64_t v54 = *(void **)(a1 + 32);
      long long v70 = *(_OWORD *)a2;
      *a2 = 0;
      a2[1] = 0;
      if (**(unsigned char **)(a1 + 40)) {
        int v55 = "w_f16_t";
      }
      else {
        int v55 = "W_f16";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v55);
      Espresso::MILTranslator::LayerTranslator::SetKernelParameter<MIL::Fp16>(v4, v54, &v70, (uint64_t)&__p);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
      unint64_t shared_owners = (std::__shared_weak_count *)*((void *)&v70 + 1);
      if (*((void *)&v70 + 1)) {
        goto LABEL_62;
      }
      break;
    case 11:
      uint64_t v30 = MIL::IRValue::AsTensor((MIL::IRValue *)*a2);
      unint64_t v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 96))(v30);
      if (v31)
      {
        Espresso::MILTranslator::CreateBlobFileMetadata((uint64_t)&__p, v31);
        uint64_t v32 = *(void *)(a1 + 32);
        if (**(unsigned char **)(a1 + 40)) {
          uint64_t v33 = "w_f32_t";
        }
        else {
          uint64_t v33 = "W";
        }
        std::string::basic_string[abi:ne180100]<0>(v66, v33);
        Espresso::base_kernel::set_blob_file_metadata(v32, (uint64_t)v66, (uint64_t)&__p);
      }
      MIL::IRValue::AsTensor((MIL::IRValue *)*a2);
      Data = (int *)MIL::IRTensorValue::GetDataView<int>();
      std::string __p = 0;
      unint64_t v68 = 0;
      uint64_t v69 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<int const*,int const*>((char *)&__p, Data, &Data[v35], (4 * v35) >> 2);
      int64_t v36 = (unsigned char *)v68 - (unsigned char *)__p;
      if (v68 == __p) {
        unint64_t v37 = 0;
      }
      else {
        unint64_t v37 = (int *)__p;
      }
      if (**(unsigned char **)(a1 + 16))
      {
        uint64_t v38 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 24))(v38);
        int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 16))(v39);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v72, v40, 1, 1, 1);
        uint64_t v41 = 0;
        std::string::size_type v42 = v72.__r_.__value_.__r.__words[0];
        uint64_t v43 = *(void *)(v72.__r_.__value_.__r.__words[0] + 24);
        uint64_t v44 = *(int *)(v72.__r_.__value_.__r.__words[0] + 8);
        uint64_t v45 = v44;
        do
        {
          v45 *= *(int *)(v72.__r_.__value_.__r.__words[0] + 12 + v41);
          v41 += 4;
        }
        while (v41 != 12);
        if (v45)
        {
          unint64_t v46 = *(_WORD **)(v72.__r_.__value_.__r.__words[0] + 24);
          do
          {
            int v47 = *v37++;
            _S0 = v47;
            __asm { FCVT            H0, S0 }
            *v46++ = _S0;
            --v45;
          }
          while (v45);
        }
        uint64_t v49 = 0;
        std::string::size_type v50 = v42 + 12;
        do
        {
          v44 *= *(int *)(v50 + v49);
          v49 += 4;
        }
        while (v49 != 12);
        uint64_t v51 = *(void *)(a1 + 32);
        if (**(unsigned char **)(a1 + 40)) {
          std::string v52 = "w_f16_t";
        }
        else {
          std::string v52 = "W_f16";
        }
        std::string::basic_string[abi:ne180100]<0>(&v73, v52);
        if (v44) {
          uint64_t v53 = v43;
        }
        else {
          uint64_t v53 = 0;
        }
        Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<unsigned short>(v51, v53, v44, (uint64_t)&v73);
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)v73);
        }
        if (v72.__r_.__value_.__l.__size_) {
          nitro::nitro_function::nitro_function((std::__shared_weak_count *)v72.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        uint64_t v58 = *(void *)(a1 + 32);
        if (**(unsigned char **)(a1 + 40)) {
          int64_t v59 = "w_f32_t";
        }
        else {
          int64_t v59 = "W";
        }
        std::string::basic_string[abi:ne180100]<0>(&v73, v59);
        Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<float>(v58, (uint64_t)v37, v36 >> 2, (uint64_t)&v73, 0, 0);
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)v73);
        }
      }
      if (__p)
      {
        unint64_t v68 = __p;
        operator delete(__p);
      }
      break;
    case 5:
      if (**(unsigned char **)(a1 + 16))
      {
        uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a2 + 32))();
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&v73, v10, 1, 1, 1);
        MIL::IRValue::AsTensor((MIL::IRValue *)*a2);
        uint8x8_t v11 = (int *)MIL::IRTensorValue::GetDataView<float>();
        uint64_t v12 = 0;
        uint64_t v13 = v73;
        uint64_t v14 = *(void *)(v73 + 24);
        uint64_t v15 = *(int *)(v73 + 8);
        uint64_t v16 = v15;
        do
        {
          v16 *= *(int *)(v73 + 12 + v12);
          v12 += 4;
        }
        while (v12 != 12);
        if (v16)
        {
          unint64_t v17 = *(_WORD **)(v73 + 24);
          do
          {
            int v18 = *v11++;
            _S0 = v18;
            __asm { FCVT            H0, S0 }
            *v17++ = _S0;
            --v16;
          }
          while (v16);
        }
        uint64_t v24 = 0;
        uint64_t v25 = v13 + 12;
        do
        {
          v15 *= *(int *)(v25 + v24);
          v24 += 4;
        }
        while (v24 != 12);
        uint64_t v26 = *(void *)(a1 + 32);
        if (**(unsigned char **)(a1 + 40)) {
          uint64_t v27 = "w_f16_t";
        }
        else {
          uint64_t v27 = "W_f16";
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v27);
        if (v15) {
          uint64_t v28 = v14;
        }
        else {
          uint64_t v28 = 0;
        }
        Espresso::MILTranslator::LayerTranslator::SetInMemoryKernelParameter<unsigned short>(v26, v28, v15, (uint64_t)&__p);
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
        unint64_t shared_owners = (std::__shared_weak_count *)*((void *)&v73 + 1);
        if (!*((void *)&v73 + 1)) {
          return;
        }
LABEL_62:
        nitro::nitro_function::nitro_function(shared_owners);
        return;
      }
      uint64_t v56 = *(void **)(a1 + 32);
      std::__shared_count v71 = *(std::__shared_count *)a2;
      *a2 = 0;
      a2[1] = 0;
      if (**(unsigned char **)(a1 + 40)) {
        unint64_t v57 = "w_f32_t";
      }
      else {
        unint64_t v57 = "W";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v57);
      Espresso::MILTranslator::LayerTranslator::SetKernelParameter<float>(v4, v56, &v71, (uint64_t)&__p);
      if (SHIBYTE(v69) < 0) {
        operator delete(__p);
      }
      unint64_t shared_owners = (std::__shared_weak_count *)v71.__shared_owners_;
      if (v71.__shared_owners_) {
        goto LABEL_62;
      }
      break;
    default:
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported dtype for weights");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
}

void sub_19218A33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (*(char *)(v29 - 41) < 0) {
    operator delete(*(void **)(v29 - 64));
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::MILTranslator::LayerTranslator::SetKernelParameter<MIL::Fp16>(uint64_t a1, void *a2, long long *a3, uint64_t a4)
{
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v4 + 1);
  if (!*(unsigned char *)(a1 + 304))
  {
    long long v65 = v4;
    uint64_t v9 = (MIL::IRValue *)v4;
    if (!(*(uint64_t (**)(void))(*(void *)v4 + 40))(v4))
    {
      if (*(char *)(a4 + 23) >= 0) {
        int v64 = (const std::string::value_type *)a4;
      }
      else {
        int v64 = *(const std::string::value_type **)a4;
      }
      Espresso::throw_exception_selector<Espresso::network_translation_error,char const*>("cannot set kernel parameter '%s' with non-tensor", (uint64_t)v64);
    }
    uint64_t v66 = 0;
    int v67 = 0;
    uint64_t v10 = MIL::IRValue::AsTensor(v9);
    uint8x8_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 96))(v10);
    if (*(unsigned char *)(a2[1] + 123)) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
      Espresso::throw_exception_selector<Espresso::network_translation_error>("Tensor is backed by a file for in-memory model");
    }
    if (v11)
    {
      Espresso::MILTranslator::CreateBlobFileMetadata((uint64_t)&v69, v11);
      if (*(char *)(a4 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
      }
      else {
        std::string v68 = *(std::string *)a4;
      }
      Espresso::base_kernel::set_blob_file_metadata((uint64_t)a2, (uint64_t)&v68, (uint64_t)&v69);
    }
    if (*(unsigned char *)(a2[1] + 123))
    {
      MIL::IRValue::AsTensor(v9);
      uint64_t v13 = *(void *)(a1 + 288);
      uint64_t v14 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
      uint64_t v16 = 2 * v15;
      if (2 * v15) {
        uint64_t v17 = v14;
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = *(void ***)(v13 + 8);
      float v20 = (uint64_t *)v18[1];
      unint64_t v19 = (unint64_t)v18[2];
      if ((unint64_t)v20 >= v19)
      {
        uint64_t v22 = ((char *)v20 - (unsigned char *)*v18) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v19 - (void)*v18;
        uint64_t v24 = v23 >> 2;
        if (v23 >> 2 <= (unint64_t)(v22 + 1)) {
          uint64_t v24 = v22 + 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25) {
          unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = (uint64_t *)(v25 + 8 * v22);
        unint64_t v28 = v25 + 8 * v26;
        uint64_t *v27 = v17;
        float v21 = v27 + 1;
        uint64_t v30 = (char *)*v18;
        uint64_t v29 = (char *)v18[1];
        if (v29 != *v18)
        {
          do
          {
            uint64_t v31 = *((void *)v29 - 1);
            v29 -= 8;
            *--uint64_t v27 = v31;
          }
          while (v29 != v30);
          uint64_t v29 = (char *)*v18;
        }
        *int v18 = v27;
        v18[1] = v21;
        v18[2] = (void *)v28;
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *float v20 = v17;
        float v21 = v20 + 1;
      }
      v18[1] = v21;
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v5);
      }
      uint64_t v32 = *(void **)(v13 + 8);
      uint64_t v33 = (_OWORD *)v32[7];
      unint64_t v34 = v32[8];
      if ((unint64_t)v33 >= v34)
      {
        uint64_t v37 = v32[6];
        uint64_t v38 = ((uint64_t)v33 - v37) >> 4;
        if ((unint64_t)(v38 + 1) >> 60) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v34 - v37;
        uint64_t v40 = v39 >> 3;
        if (v39 >> 3 <= (unint64_t)(v38 + 1)) {
          uint64_t v40 = v38 + 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        long long v73 = v32 + 8;
        std::string::size_type v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v41);
        uint64_t v43 = &v42[16 * v38];
        uint64_t v69 = v42;
        long long v70 = v43;
        std::string v72 = &v42[16 * v44];
        *(_OWORD *)uint64_t v43 = v65;
        std::__shared_count v71 = v43 + 16;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v32 + 6, &v69);
        uint64_t v35 = (_OWORD *)v32[7];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v69);
        int64_t v36 = *(void **)(v13 + 8);
      }
      else
      {
        _OWORD *v33 = v65;
        uint64_t v35 = v33 + 1;
        v32[7] = v35;
        int64_t v36 = v32;
      }
      v32[7] = v35;
      uint64_t v45 = (uint64_t *)v36[4];
      unint64_t v46 = v36[5];
      if ((unint64_t)v45 >= v46)
      {
        unint64_t v48 = (uint64_t *)v36[3];
        uint64_t v49 = v45 - v48;
        if ((unint64_t)(v49 + 1) >> 61) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v50 = v46 - (void)v48;
        unint64_t v51 = (uint64_t)(v46 - (void)v48) >> 2;
        if (v51 <= v49 + 1) {
          unint64_t v51 = v49 + 1;
        }
        BOOL v52 = v50 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v52) {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v53);
          unint64_t v48 = (uint64_t *)v36[3];
          uint64_t v45 = (uint64_t *)v36[4];
        }
        else
        {
          uint64_t v54 = 0;
        }
        int v55 = (uint64_t *)(v53 + 8 * v49);
        unint64_t v56 = v53 + 8 * v54;
        *int v55 = v16;
        int v47 = v55 + 1;
        while (v45 != v48)
        {
          uint64_t v57 = *--v45;
          *--int v55 = v57;
        }
        void v36[3] = v55;
        v36[4] = v47;
        unint64_t v36[5] = v56;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        uint64_t *v45 = v16;
        int v47 = v45 + 1;
      }
      v36[4] = v47;
      uint64_t v59 = *(void *)(a1 + 288);
      uint64_t v58 = *(std::__shared_weak_count **)(a1 + 296);
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v60 = v67;
      uint64_t v66 = v59;
      int v67 = v58;
      if (v60) {
        nitro::nitro_function::nitro_function(v60);
      }
    }
    uint64_t v61 = MIL::IRTensorValue::GetDataView<MIL::Fp16>();
    if (2 * v62) {
      uint64_t v63 = v61;
    }
    else {
      uint64_t v63 = 0;
    }
    uint64_t v69 = 0;
    long long v70 = 0;
    (*(void (**)(void *, char **, uint64_t, uint64_t, uint64_t, uint64_t *))(*a2 + 160))(a2, &v69, a4, v63, 2 * v62, &v66);
    if (v70) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v70);
    }
    if (v67) {
      nitro::nitro_function::nitro_function(v67);
    }
  }
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_19218AA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (v38)
  {
    nitro::nitro_function::nitro_function(v38);
    nitro::nitro_function::nitro_function(v38);
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (v37) {
    nitro::nitro_function::nitro_function(v37);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_2::operator()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned int (**)(void))(*(void *)*a1 + 24))(*a1))
  {
    unint64_t v8 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 80))(*a1, a2);
    uint64_t v9 = (std::string::size_type *)a1[2];
    uint64_t v10 = *(std::__shared_weak_count **)(a4 + 8);
    v14[0] = *(uint64_t **)a4;
    v14[1] = (uint64_t *)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)a1[1] += Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()(v9, a3, v8, v14, 0);
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    uint8x8_t v11 = (void *)a1[3];
    BOOL v12 = *(std::__shared_weak_count **)(a4 + 8);
    v13[0] = *(void *)a4;
    v13[1] = (uint64_t)v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(v11, v13, a2, a3);
    if (v12)
    {
      nitro::nitro_function::nitro_function(v12);
    }
  }
}

void sub_19218AC68(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_0::operator()(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 80))(*a1, a3);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)a1[1] + 64))(*(void *)a1[1], v7);
  if (result)
  {
    uint64_t v9 = *a2;
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v11 = *(std::string *)a4;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a1[1] + 72))(&v10);
    Espresso::base_kernel::set_blob_file_metadata(v9, (uint64_t)&v11, (uint64_t)&v10);
  }
  return result;
}

void sub_19218ADB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::SerDes::serdes_object_json_objc::get_ulonglong(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = Espresso::SerDes::fast_dict_lookup(*(void **)(a1 + 24), a2);
  std::string v3 = v2;
  if (!v2)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "\" not found");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v10);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5745170, MEMORY[0x1E4FBA1E8]);
  }
  uint64_t v4 = [v2 unsignedLongLongValue];

  return v4;
}

void sub_19218AED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void Espresso::base_kernel::set_blob_file_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 16);
  }
  if (v3) {
    operator new();
  }
  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Provided blob storage metadata has empty file.");
}

void sub_19218B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t Espresso::blob_file_metadata::blob_file_metadata(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<Espresso::blob_file_metadata>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<Espresso::blob_file_metadata>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t Espresso::load_network_layers_post_dispatch(std::shared_ptr<Espresso::net> const&,std::shared_ptr<Espresso::SerDes::generic_serdes_object> const&,std::shared_ptr<Espresso::cpu_context_transfer_algo_t> const&,std::shared_ptr<Espresso::net_info_ir_t> const&,BOOL,Espresso::network_shape const&,Espresso::compute_path,BOOL,std::shared_ptr<Espresso::blob_storage_abstract> const&)::$_1::operator()(std::string::size_type *a1, uint64_t a2, unint64_t a3, uint64_t **a4, int a5)
{
  uint64_t v9 = (*(uint64_t (**)(std::string::size_type, unint64_t))(*(void *)*a1 + 24))(*a1, a3);
  if (!(*(uint64_t (**)(std::string::size_type, unint64_t))(*(void *)*a1 + 80))(*a1, a3))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v17 = std::string::append(&v24, " idx=");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v23, a3);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v19 = &v23;
    }
    else {
      unint64_t v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    float v21 = std::string::append(&v25, (const std::string::value_type *)v19, size);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::size_type v11 = *a1;
  std::string::size_type v10 = a1[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  v26.__r_.__value_.__r.__words[0] = v11;
  v26.__r_.__value_.__l.__size_ = v10;
  uint64_t v12 = **a4;
  if (*(unsigned char *)(a1[2] + 53)) {
    BOOL v13 = a5 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    uint64_t v14 = (void (**)(void))(v12 + 160);
  }
  else {
    uint64_t v14 = (void (**)(void))(v12 + 168);
  }
  (*v14)();
  if (v26.__r_.__value_.__l.__size_) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v26.__r_.__value_.__l.__size_);
  }
  return v9;
}

void sub_19218B704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

uint64_t Espresso::blob_storage_mmap::has_blob_file_metadata(Espresso::blob_storage_mmap *this)
{
  return 1;
}

double Espresso::blob_storage_mmap::get_blob_file_metadata@<D0>(Espresso::blob_storage_mmap *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)this + 71) < 0) {
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 6), *((void *)this + 7));
  }
  else {
    std::string v6 = *(std::string *)((unsigned char *)this + 2);
  }
  *(_DWORD *)a3 = 1;
  double result = *(double *)&v6.__r_.__value_.__l.__data_;
  *(std::string *)(a3 + 8) = v6;
  *(void *)(a3 + 32) = a2;
  return result;
}

void Espresso::generic_load_constant_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5, uint64_t *a6)
{
  if (!a6)
  {
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v7 = *a6;
  if (!*a6)
  {
LABEL_6:
    long long v8 = 0;
    goto LABEL_7;
  }
  long long v8 = (std::__shared_weak_count *)a6[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t v10 = *(void *)(a3 + 8);
    if (v10 != 13)
    {
      if (v10 == 18)
      {
        a3 = *(void *)a3;
        goto LABEL_15;
      }
      a3 = *(void *)a3;
      if (v10 != 16) {
        goto LABEL_80;
      }
LABEL_42:
      if (*(void *)a3 == 0x746E6174736E6F63 && *(void *)(a3 + 8) == 0x38755F626F6C625FLL)
      {
        v27[0] = v7;
        v27[1] = (uint64_t)v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&v31, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v27, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
        if (v8) {
          nitro::nitro_function::nitro_function(v8);
        }
        operator new();
      }
      if (*(void *)a3 != 0x746E6174736E6F63 || *(void *)(a3 + 8) != 0x38735F626F6C625FLL)
      {
LABEL_80:
        uint64_t v31 = a3;
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long long &>("generic_load_constant_kernel: %s not supported as constant blob", &v31);
      }
      v26[0] = v7;
      v26[1] = (uint64_t)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned char,4>(&v31, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v26, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      float v20 = operator new(0x118uLL);
      v20[1] = 0;
      v20[2] = 0;
      *float v20 = &unk_1EE38C588;
      Espresso::blob_cpu::blob_cpu((uint64_t)(v20 + 3), (void *)(a1 + 8), &v31);
      float v21 = *(std::__shared_weak_count **)(a1 + 352);
      *(void *)(a1 + 344) = v20 + 3;
      *(void *)(a1 + 352) = v20;
      if (!v21)
      {
LABEL_64:
        long long v22 = v32;
        if (!v32) {
          goto LABEL_72;
        }
        goto LABEL_71;
      }
LABEL_63:
      nitro::nitro_function::nitro_function(v21);
      goto LABEL_64;
    }
    a3 = *(void *)a3;
LABEL_31:
    if (*(void *)a3 != 0x746E6174736E6F63 || *(void *)(a3 + 5) != 0x626F6C625F746E61) {
      goto LABEL_80;
    }
    v30[0] = v7;
    v30[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(&v31, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v30, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
    if (v8) {
      nitro::nitro_function::nitro_function(v8);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(&v29, (void *)(a1 + 8), &v31);
    float v21 = *(std::__shared_weak_count **)(a1 + 352);
    *(_OWORD *)(a1 + 344) = v29;
    if (!v21) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  int v9 = *(unsigned __int8 *)(a3 + 23);
  if (v9 == 13) {
    goto LABEL_31;
  }
  if (v9 == 16) {
    goto LABEL_42;
  }
  if (v9 != 18) {
    goto LABEL_80;
  }
LABEL_15:
  if (*(void *)a3 != 0x746E6174736E6F63
    || *(void *)(a3 + 8) != 0x70665F626F6C625FLL
    || *(_WORD *)(a3 + 16) != 13873)
  {
    goto LABEL_80;
  }
  v28[0] = v7;
  v28[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,4>(&v31, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v28, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 312), *(_DWORD *)(a1 + 320) * *(_DWORD *)(a1 + 316), (a4 & 0x3F) == 0);
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  BOOL v13 = (char *)operator new(0x118uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)BOOL v13 = &unk_1EE38C588;
  Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v13 + 24), (void *)(a1 + 8));
  *((void *)v13 + 3) = &unk_1EE3718A0;
  *((void *)v13 + 34) = 0;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *(_OWORD *)(v13 + 216) = 0u;
  *(_OWORD *)(v13 + 232) = 0u;
  *(_OWORD *)(v13 + 248) = 0u;
  *((_DWORD *)v13 + 66) = 0;
  uint64_t v14 = v31;
  uint64_t v15 = v32;
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)v13 + 26);
    *((void *)v13 + 25) = v14;
    *((void *)v13 + 26) = v15;
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
  }
  else
  {
    *((void *)v13 + 25) = v31;
    *((void *)v13 + 26) = 0;
  }
  *((_DWORD *)v13 + 66) = 1;
  std::string v23 = *(std::__shared_weak_count **)(a1 + 352);
  *(void *)(a1 + 344) = v13 + 24;
  *(void *)(a1 + 352) = v13;
  if (v23) {
    nitro::nitro_function::nitro_function(v23);
  }
  if (v15)
  {
    long long v22 = v15;
LABEL_71:
    nitro::nitro_function::nitro_function(v22);
  }
LABEL_72:
  uint64_t v24 = *(void *)(a1 + 344);
  if (v24)
  {
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(a1 + 304);
    *(_DWORD *)(v24 + 24) = *(_DWORD *)(a1 + 320);
    int v25 = *(_DWORD *)(a1 + 324);
    if ((v25 & 0x80000000) == 0) {
      *(_DWORD *)(v24 + 28) = v25;
    }
  }
  *(unsigned char *)(a1 + 360) = 1;
  if (v8)
  {
    nitro::nitro_function::nitro_function(v8);
  }
}

void sub_19218BD54(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  long long v5 = *(std::__shared_weak_count **)(v3 - 56);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob_cpu,std::allocator<Espresso::blob_cpu>,std::shared_ptr<Espresso::abstract_context> &,std::shared_ptr<Espresso::blob<float,4>> &,void>(void *a1, void *a2, uint64_t *a3)
{
  std::string v6 = (char *)operator new(0x118uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)std::string v6 = &unk_1EE38C588;
  Espresso::abstract_blob_container::abstract_blob_container((uint64_t)(v6 + 24), a2);
  *((void *)v6 + 3) = &unk_1EE3718A0;
  *((void *)v6 + 34) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *((_DWORD *)v6 + 66) = 0;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    int v9 = (std::__shared_weak_count *)*((void *)v6 + 24);
    *((void *)v6 + 23) = v7;
    *((void *)v6 + 24) = v8;
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
  }
  else
  {
    *((void *)v6 + 23) = v7;
    *((void *)v6 + 24) = 0;
  }
  *((_DWORD *)v6 + 66) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
}

void Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,4>(void *a1, uint64_t a2, std::__shared_weak_count *a3, const void *a4, unint64_t a5, uint64_t *a6, int a7, int a8, int a9, int a10, char a11)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *a6;
  uint64_t v17 = (std::__shared_weak_count *)a6[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = 0;
  a1[1] = 0;
  if (*(unsigned char *)(a2 + 73))
  {
    if (!v18 || (a11 & 1) != 0)
    {
      if (!v18) {
        goto LABEL_9;
      }
    }
    else if (!*(unsigned char *)(a2 + 123))
    {
      goto LABEL_9;
    }
    long long v22 = operator new(0x60uLL);
    v22[1] = 0;
    void v22[2] = 0;
    *long long v22 = &unk_1EE3899C8;
    void v22[3] = &unk_1EE36BF10;
    *((_OWORD *)v22 + 4) = 0u;
    *((_OWORD *)v22 + 5) = 0u;
    *((_DWORD *)v22 + 8) = a7;
    *((_DWORD *)v22 + 9) = a8;
    *((_DWORD *)v22 + 10) = a9;
    *((_DWORD *)v22 + 11) = a10;
    v22[6] = a4;
    *((unsigned char *)v22 + 56) = 0;
    *a1 = v22 + 3;
    a1[1] = v22;
    if (!v17)
    {
      v22[8] = v18;
      v22[9] = 0;
      if (!a3) {
        return;
      }
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    v22[8] = v18;
    v22[9] = v17;
    goto LABEL_17;
  }
LABEL_9:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v37, a7, a8, a9, a10);
  uint64_t v19 = 0;
  long long v20 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
  uint64_t v21 = *(int *)(v20 + 8);
  do
  {
    v21 *= *(int *)(v20 + 12 + v19);
    v19 += 4;
  }
  while (v19 != 12);
  if (a5 != 4 * v21)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v34, a5);
    uint64_t v24 = std::string::insert(&v34, 0, "Unexpected size s=");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string v26 = std::string::append(&v35, "/blob=");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = *(int *)(v20 + 8);
    do
      v28 *= *(int *)(v20 + 12 + *((void *)&v20 + 1));
    while (*((void *)&v20 + 1) != 8);
    std::to_string(&v33, 4 * v28);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v29 = &v33;
    }
    else {
      long long v29 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    uint64_t v31 = std::string::append(&v36, (const std::string::value_type *)v29, size);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v37);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  memcpy(*(void **)(v20 + 24), a4, a5);
  if (v17) {
LABEL_17:
  }
    nitro::nitro_function::nitro_function(v17);
  if (!a3) {
    return;
  }
LABEL_19:

  nitro::nitro_function::nitro_function(a3);
}

void sub_19218C194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v38 & 1) == 0)
    {
LABEL_14:
      if (a10)
      {
        nitro::nitro_function::nitro_function(a10);
        if (!v36)
        {
LABEL_16:
          if (!v35) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      else if (!v36)
      {
        goto LABEL_16;
      }
      nitro::nitro_function::nitro_function(v36);
      if (!v35) {
LABEL_18:
      }
        _Unwind_Resume(a1);
LABEL_17:
      nitro::nitro_function::nitro_function(v35);
      goto LABEL_18;
    }
  }
  else if (!v38)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v37);
  goto LABEL_14;
}

uint64_t Espresso::blob_storage_mmap::mapped_blob(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  uint64_t v2 = (void *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (void *)((char *)this + 16);
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      std::string v6 = v2;
    }
    else {
      std::string v6 = v2 + 1;
    }
    if (v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = (void *)*v6;
  }
  while (*v6);
  if (v3 != (void *)((char *)this + 16) && v3[4] <= a2) {
    return *((void *)this + 9) + v3[6];
  }
  else {
    return 0;
  }
}

uint64_t Espresso::blob_storage_mmap::get_blob_size(Espresso::blob_storage_mmap *this, unint64_t a2)
{
  unint64_t v4 = (void *)*((void *)this + 2);
  uint64_t v2 = (char *)this + 16;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  BOOL v5 = v2;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = v3 + 1;
    }
    if (v7) {
      BOOL v5 = (char *)v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((void *)v5 + 4) <= a2) {
    return *((void *)v5 + 7);
  }
  else {
    return 0;
  }
}

void Espresso::MILTranslator::CreateBlobFileMetadata(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a2, (uint64_t)&__p))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  MIL::IRValue::GetScalar<std::string>();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "path");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a2, (uint64_t)v13))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  MIL::IRValue::GetScalar<std::string>();
  }
  Espresso::get_real_file_path(&__p, (const char *)v15);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v19 < 0)
  {
    if (*((void *)&v18 + 1) != 8)
    {
      if (*((void *)&v18 + 1) != 14
        || (*(void *)v18 == 0x4C4259434147454CLL ? (BOOL v5 = *(void *)(v18 + 6) == 0x454C4946424F4C42) : (BOOL v5 = 0), !v5))
      {
LABEL_42:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported file type");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_24;
    }
    uint64_t v8 = (long long *)v18;
  }
  else
  {
    if (v19 != 8)
    {
      if (v19 != 14) {
        goto LABEL_42;
      }
      if ((void)v18 != 0x4C4259434147454CLL || *(void *)((char *)&v18 + 6) != 0x454C4946424F4C42) {
        goto LABEL_42;
      }
LABEL_24:
      std::string::basic_string[abi:ne180100]<0>(v15, "identifier");
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a2, (uint64_t)v15))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
      uint64_t v6 = MIL::IRValue::GetScalar<unsigned long long>();
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      int v7 = 1;
      goto LABEL_35;
    }
    uint64_t v8 = &v18;
  }
  if (*(void *)v8 != 0x454C4946424F4C42) {
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "offset");
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a2, (uint64_t)v15))std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found"); {
  uint64_t v6 = MIL::IRValue::GetScalar<unsigned long long>();
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  int v7 = 2;
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_DWORD *)a1 = v7;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    std::string::size_type v10 = v12.__r_.__value_.__r.__words[2];
    memset(&v12, 0, sizeof(v12));
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v6;
    if (v9 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_DWORD *)a1 = v7;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    memset(&v12, 0, sizeof(v12));
    *(void *)(a1 + 24) = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a1 + 32) = v6;
  }
  if (v19 < 0) {
    operator delete((void *)v18);
  }
}

void sub_19218C628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v30 - 33) < 0) {
    operator delete(*(void **)(v30 - 56));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::make_blob_storage_mmap(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  Espresso::get_real_file_path(&v7, (const char *)a2);
  std::ifstream::basic_ifstream((uint64_t *)__p);
  std::istream::read();
  int v3 = *(_DWORD *)((char *)&v10[2] + *((void *)__p[0] - 3));
  int data = (int)v12.__r_.__value_.__l.__data_;
  __p[0] = *(void **)MEMORY[0x1E4FBA3F8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FF1040](v10);
  std::istream::~istream();
  MEMORY[0x192FF15B0](&v11);
  if ((v3 & 5) != 0 || data != 1162759500)
  {
    memset(&v7, 0, sizeof(v7));
    std::ifstream::basic_ifstream((uint64_t *)__p);
    std::istream::seekg();
    std::istream::read();
    if (HIDWORD(v8) == 2) {
      operator new();
    }
    operator new();
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  operator new();
}

void sub_19218CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,encrypted_file *a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_19218CEB8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x192FF15B0](v1);
  _Unwind_Resume(a1);
}

void Espresso::get_real_file_path(std::string *a1, const char *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2[23] >= 0) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = *(const char **)a2;
  }
  BOOL v5 = realpath_DARWIN_EXTSN(v4, 0);
  if (v5)
  {
    std::string v7 = v5;
    std::string::basic_string[abi:ne180100]<0>(a1, v5);
    free(v7);
  }
  else
  {
    uint64_t v8 = Espresso::espresso_os_log_subsystem(0, v6);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if (a2[23] >= 0) {
        int v9 = a2;
      }
      else {
        int v9 = *(const char **)a2;
      }
      int v10 = 136315138;
      uint64_t v11 = v9;
      _os_log_impl(&dword_1920CB000, v8, OS_LOG_TYPE_INFO, "Unable to get canonicalized absolute file path. Using given path instead '%s'", (uint8_t *)&v10, 0xCu);
    }

    if (a2[23] < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    }
  }
}

uint64_t Espresso::blob_storage_mmap::blob_storage_mmap(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1EE34C218;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  BOOL v5 = (const char **)(a1 + 48);
  long long v6 = *a2;
  *(void *)(a1 + 64) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a1 + 88) = 0;
  int v7 = *(char *)(a1 + 71);
  uint64_t v8 = (const char *)(a1 + 48);
  if (v7 < 0) {
    uint64_t v8 = *v5;
  }
  int v9 = open(v8, 0);
  int v10 = __error();
  if (v9 == -1)
  {
    int v14 = *v10;
    uint64_t v15 = (const char *)v5;
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v15 = *v5;
    }
    char v16 = strerror(v14);
    Espresso::throw_exception_selector<Espresso::io_error,char const*,char *>(v15, v16);
  }
  v25.st_std::string::size_type size = 0;
  fstat(v9, &v25);
  st_std::string::size_type size = v25.st_size;
  *(void *)(a1 + 80) = v25.st_size;
  if (!st_size)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v24);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v12 = mmap(0, st_size, 1, 2, v9, 0);
  *(void *)(a1 + 72) = v12;
  if (!v12)
  {
    long long v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v18, &v24);
    __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v12 == (void *)-1)
  {
    char v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    long long v20 = __error();
    std::to_string(&v23, *v20);
    uint64_t v21 = std::string::insert(&v23, 0, "mmap error: ");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v19, &v24);
    __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::blob_storage_mmap::setup_header((uint64_t **)a1, a3);
  close(v9);
  return a1;
}

void sub_19218D2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v21 + 71) < 0) {
        operator delete(*v23);
      }
      std::unique_ptr<encrypted_file>::reset[abi:ne180100](v22);
      std::__tree<int>::destroy(*v26);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

uint64_t **Espresso::blob_storage_mmap::setup_header(uint64_t **this, uint64_t a2)
{
  uint64_t v2 = (char *)this[9] + a2;
  if (*((_DWORD *)v2 + 1)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Provided weight file is not of blob_v1 format.");
  }
  uint64_t v3 = (uint64_t)this;
  if (*(void *)v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 + 16 * *(void *)v2 + 8;
    long long v6 = (unint64_t *)(v2 + 8);
    do
    {
      unint64_t v7 = *v6;
      *((_DWORD *)std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6)+ 10) = v7;
      uint64_t v8 = (uint64_t *)v6[1];
      std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6)[7] = v8;
      this = std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)(v3 + 8), *v6, (uint64_t **)v6);
      this[6] = (uint64_t *)v5;
      v5 += v6[1];
      ++v4;
      v6 += 2;
    }
    while (*(void *)v2 > v4);
  }
  if (*(void *)(v3 + 24))
  {
    int v9 = (void *)(v3 + 16);
    int v10 = *(void **)(v3 + 16);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        int v10 = (void *)v10[1];
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (void *)v9[2];
        BOOL v12 = *v11 == (void)v9;
        int v9 = v11;
      }
      while (v12);
    }
    if (v11[7] + v11[6] > *(void *)(v3 + 80))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unexpected end of weight file");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_19218D4F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x40uLL);
    v7[4] = *a3;
    void v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    unsigned char v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t anonymous namespace'::GetMMappedDataSpan(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!v3) {
    Espresso::throw_exception_selector<Espresso::network_translation_error>("BlobStorage not present while creating file value.");
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 40))(&__s1);
  if ((v19 & 0x80u) == 0) {
    size_t v5 = v19;
  }
  else {
    size_t v5 = __n;
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6)
  {
    if ((v19 & 0x80) != 0) {
      operator delete(__s1);
    }
LABEL_28:
    Espresso::throw_exception_selector<Espresso::network_translation_error>("Value is memory-mapped with different file than cached blobstorage.");
  }
  if (v7 >= 0) {
    unint64_t v8 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    unint64_t v8 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v19 & 0x80) != 0)
  {
    uint64_t v13 = __s1;
    int v14 = memcmp(__s1, v8, __n);
    operator delete(v13);
    if (v14) {
      goto LABEL_28;
    }
  }
  else if (v19)
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = *((unsigned __int8 *)&__s1 + v9);
      int v11 = v8[v9];
    }
    while (v10 == v11 && v19 - 1 != v9++);
    if (v10 != v11) {
      goto LABEL_28;
    }
  }
  uint64_t v15 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, *(void *)(a2 + 32));
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a1 + 80))(*a1, *(void *)(a2 + 32));
  if (!v15) {
    return 0;
  }
  return result;
}

void Espresso::blob_storage_mmap_v2::get_file_path(MIL::Blob::StorageReader **this@<X0>, std::string *a2@<X8>)
{
  uint64_t Filename = MIL::Blob::StorageReader::GetFilename(this[1]);
  if (*(char *)(Filename + 23) < 0)
  {
    size_t v5 = *(const std::string::value_type **)Filename;
    std::string::size_type v6 = *(void *)(Filename + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)Filename;
    a2->__r_.__value_.__r.__words[2] = *(void *)(Filename + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t Espresso::blob_storage_mmap_v2::get_blob_size(MIL::Blob::StorageReader **this)
{
  MIL::Blob::StorageReader::GetRawDataView(this[1]);
  return v1;
}

uint64_t Espresso::blob_storage_mmap_v2::mapped_blob(MIL::Blob::StorageReader **this)
{
  return MIL::Blob::StorageReader::GetRawDataView(this[1]);
}

BOOL Espresso::blob_storage_memory::has_blob_file_metadata(Espresso::blob_storage_memory *this, unint64_t a2)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v2 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v2 = a2;
  }
  uint64_t v3 = *(void *)(*((void *)this + 1) + 96);
  return v2 < (*(void *)(*((void *)this + 1) + 104) - v3) >> 3 && *(void *)(v3 + 8 * v2) != 0;
}

uint64_t Espresso::blob_storage_memory::get_blob_size(Espresso::blob_storage_memory *this, unint64_t a2)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v2 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v2 = a2;
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v2 >= (uint64_t)(v3[1] - *v3) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v3[3] + 8 * v2);
  }
}

uint64_t Espresso::blob_storage_memory::mapped_blob(Espresso::blob_storage_memory *this, unint64_t a2)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v2 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v2 = a2;
  }
  uint64_t v3 = **((void **)this + 1);
  if (v2 >= (*(void *)(*((void *)this + 1) + 8) - v3) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 8 * v2);
  }
}

uint64_t Espresso::blob_storage_memory::get_blob_file_metadata@<X0>(Espresso::blob_storage_memory *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (Espresso::blob_storage_write_version == 1) {
    unint64_t v3 = (a2 - 1) >> 1;
  }
  else {
    unint64_t v3 = a2;
  }
  uint64_t v4 = *(void *)(*((void *)this + 1) + 96);
  if (v3 >= (*(void *)(*((void *)this + 1) + 104) - v4) >> 3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Out of bound access to blob_file_metadatas.");
  }
  uint64_t v5 = *(void *)(v4 + 8 * v3);
  if (!v5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("blob_file_metadata not available for given handle.");
  }

  return Espresso::blob_file_metadata::blob_file_metadata(a3, v5);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_storage_abstract>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_storage_abstract>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_storage_abstract>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob_storage_abstract>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    BOOL v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  char v16 = operator new(0x38uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *char v16 = 0;
  v16[1] = v8;
  uint64_t v17 = (std::string *)(v16 + 2);
  long long v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    v16[4] = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  v16[5] = 0;
  v16[6] = 0;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string v26 = operator new(8 * *(void *)&prime);
          long long v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          long long v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            std::string v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  std::string v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                long long v29 = v35;
                std::string v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  std::string v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    void *v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    std::string v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_19218DD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t espresso_network_select_configuration(void *a1, int a2, char *a3)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (!a1
  {
    return 4294967290;
  }
  if (*(_DWORD *)(a1[133] + 160)) {
    return 4294967291;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v151);
  unint64_t v8 = v151;
  if (!v151)
  {
    uint64_t v6 = 4294967290;
    goto LABEL_202;
  }
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  unint64_t v150 = 0;
  char v145 = 0;
  v146 = 0;
  unint64_t v147 = 0;
  long long v142 = 0;
  v143 = 0;
  unint64_t v144 = 0;
  long long v139 = 0;
  char v140 = 0;
  unint64_t v141 = 0;
  uint64_t v136 = 0;
  long long v137 = 0;
  unint64_t v138 = 0;
  long long v133 = 0;
  int v134 = 0;
  unint64_t v135 = 0;
  long long v130 = 0;
  size_t v131 = 0;
  unint64_t v132 = 0;
  memset(v127, 0, sizeof(v127));
  v129[0] = 0;
  v129[1] = 0;
  uint64_t v128 = v129;
  if (a3)
  {
    unint64_t v9 = a3;
    std::string::basic_string[abi:ne180100]<0>(__p, a3);
    uint8x8_t v10 = v8 + 98;
    unint64_t v11 = (void *)v8[98];
    if (!v11) {
      goto LABEL_16;
    }
    BOOL v12 = v8 + 98;
    do
    {
      BOOL v13 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11 + 4, __p);
      unint64_t v14 = v11 + 1;
      if (!v13)
      {
        unint64_t v14 = v11;
        BOOL v12 = v11;
      }
      unint64_t v11 = (void *)*v14;
    }
    while (*v14);
    if (v12 == v10 || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v12 + 4)) {
LABEL_16:
    }
      BOOL v12 = v8 + 98;
    if ((v122[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    if (v10 == v12)
    {
      uint64_t v118 = 0;
      uint64_t v6 = 4294967290;
      goto LABEL_188;
    }
    a3 = v9;
    if (v127 != v12 + 7)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v127, (std::string *)v12[7], (std::string *)v12[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[8] - v12[7]) >> 3));
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)&v128, (long long *)v12[10], (long long *)(v12 + 11));
    }
  }
  long long v124 = 0u;
  long long v125 = 0u;
  int v126 = 1065353216;
  uint64_t v15 = (void *)v8[103];
  if (v15 != v8 + 104)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v124, (uint64_t)(v15 + 4), (uint64_t)(v15 + 4));
      char v16 = (void *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          char v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }
        while (!v18);
      }
      uint64_t v15 = v17;
    }
    while (v17 != v8 + 104);
  }
  long long v19 = (uint64_t *)v128;
  if (v128 != v129)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v124, (uint64_t)(v19 + 4), (uint64_t)(v19 + 4));
      float v20 = (char *)v19[1];
      if (v20)
      {
        do
        {
          float v21 = (char **)v20;
          float v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          float v21 = (char **)v19[2];
          BOOL v18 = *v21 == (char *)v19;
          long long v19 = (uint64_t *)v21;
        }
        while (!v18);
      }
      long long v19 = (uint64_t *)v21;
    }
    while (v21 != v129);
  }
  int v120 = a2;
  std::string __s = a3;
  BOOL v22 = (uint64_t *)v125;
  if (!(void)v125)
  {
    uint64_t v107 = (uint64_t)v148;
    uint64_t v108 = (uint64_t)v145;
    uint64_t v109 = v142;
    uint64_t v110 = v139;
    uint64_t v111 = v136;
    uint64_t v106 = v133;
    unint64_t v36 = v134;
    goto LABEL_175;
  }
  char v23 = 0;
  do
  {
    unint64_t v24 = v22 + 2;
    *(_OWORD *)&v122[8] = 0u;
    memset(v123, 0, sizeof(v123));
    *(_OWORD *)std::string __p = xmmword_192DC3600;
    *(void *)long long v122 = 0xFFFFFFFF00000001;
    int v25 = (char **)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)&v128, v22 + 2);
    std::string v26 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v8 + 103), v22 + 2);
    if (v129 != v25)
    {
      long long v28 = *(_OWORD *)(v25 + 9);
      *(_OWORD *)std::string __p = *(_OWORD *)(v25 + 7);
      *(_OWORD *)long long v122 = v28;
      *(void *)&v122[16] = v25[11];
      if (__p != (void **)(v25 + 7)) {
        std::string v26 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v123, v25[12], (uint64_t)v25[13], (v25[13] - v25[12]) >> 2);
      }
      long long v29 = Espresso::espresso_os_log_subsystem((Espresso *)v26, v27);
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_INFO)) {
        goto LABEL_53;
      }
      unint64_t v30 = v22 + 2;
      if (*((char *)v22 + 39) < 0) {
        unint64_t v30 = (void *)*v24;
      }
      *(_DWORD *)std::string buf = 136316674;
      std::string v154 = v30;
      __int16 v155 = 1024;
      int v156 = (int)__p[0];
      __int16 v157 = 1024;
      int v158 = HIDWORD(__p[0]);
      __int16 v159 = 1024;
      int v160 = (int)__p[1];
      __int16 v161 = 1024;
      int v162 = HIDWORD(__p[1]);
      __int16 v163 = 1024;
      int v164 = *(_DWORD *)v122;
      __int16 v165 = 1024;
      int v166 = *(_DWORD *)&v122[4];
      uint8x8_t v31 = v29;
      unint64_t v32 = "[configuration] %s %d %d %d %d %d, rank=%d\n";
      goto LABEL_52;
    }
    if (v8 + 104 == (void *)v26) {
      goto LABEL_54;
    }
    long long v33 = *(_OWORD *)(v26 + 72);
    *(_OWORD *)std::string __p = *(_OWORD *)(v26 + 56);
    *(_OWORD *)long long v122 = v33;
    *(void *)&v122[16] = *((void *)v26 + 11);
    if (__p != (void **)(v26 + 56)) {
      std::string v26 = std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v123, *((char **)v26 + 12), *((void *)v26 + 13), (uint64_t)(*((void *)v26 + 13) - *((void *)v26 + 12)) >> 2);
    }
    long long v29 = Espresso::espresso_os_log_subsystem((Espresso *)v26, v27);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v34 = v22 + 2;
      if (*((char *)v22 + 39) < 0) {
        uint64_t v34 = (void *)*v24;
      }
      *(_DWORD *)std::string buf = 136316674;
      std::string v154 = v34;
      __int16 v155 = 1024;
      int v156 = (int)__p[0];
      __int16 v157 = 1024;
      int v158 = HIDWORD(__p[0]);
      __int16 v159 = 1024;
      int v160 = (int)__p[1];
      __int16 v161 = 1024;
      int v162 = HIDWORD(__p[1]);
      __int16 v163 = 1024;
      int v164 = *(_DWORD *)v122;
      __int16 v165 = 1024;
      int v166 = *(_DWORD *)&v122[4];
      uint8x8_t v31 = v29;
      unint64_t v32 = "[configuration (default)] %s %d %d %d %d %d, rank=%d\n";
LABEL_52:
      _os_log_impl(&dword_1920CB000, v31, OS_LOG_TYPE_INFO, v32, buf, 0x30u);
    }
LABEL_53:

LABEL_54:
    if (*((char *)v22 + 39) < 0) {
      unint64_t v24 = (void *)*v24;
    }
    std::string v35 = (char *)v134;
    if ((unint64_t)v134 >= v135)
    {
      std::string v37 = (char *)v133;
      uint64_t v38 = ((char *)v134 - (unsigned char *)v133) >> 3;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v135 - (void)v133;
      if ((uint64_t)(v135 - (void)v133) >> 2 > v39) {
        unint64_t v39 = v40 >> 2;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41) {
        unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v41);
      }
      else {
        uint64_t v42 = 0;
      }
      uint64_t v43 = (void *)(v41 + 8 * v38);
      void *v43 = v24;
      unint64_t v36 = v43 + 1;
      if (v35 != v37)
      {
        do
        {
          uint64_t v44 = *((void *)v35 - 1);
          v35 -= 8;
          *--uint64_t v43 = v44;
        }
        while (v35 != v37);
        std::string v35 = (char *)v133;
      }
      long long v133 = v43;
      unint64_t v135 = v41 + 8 * v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *int v134 = v24;
      unint64_t v36 = v35 + 8;
    }
    int v134 = v36;
    uint64_t v45 = v149;
    if ((unint64_t)v149 >= v150)
    {
      int v47 = v148;
      uint64_t v48 = (v149 - v148) >> 2;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 62) {
        goto LABEL_204;
      }
      uint64_t v50 = v150 - (void)v148;
      if ((uint64_t)(v150 - (void)v148) >> 1 > v49) {
        unint64_t v49 = v50 >> 1;
      }
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v49;
      }
      if (v51) {
        unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
      }
      else {
        uint64_t v52 = 0;
      }
      unint64_t v53 = (char *)(v51 + 4 * v48);
      *(_DWORD *)unint64_t v53 = __p[0];
      unint64_t v46 = v53 + 4;
      while (v45 != v47)
      {
        int v54 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v53 - 1) = v54;
        v53 -= 4;
      }
      uint64_t v148 = v53;
      unint64_t v150 = v51 + 4 * v52;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v149 = __p[0];
      unint64_t v46 = v45 + 4;
    }
    uint64_t v149 = v46;
    int v55 = v146;
    if ((unint64_t)v146 >= v147)
    {
      uint64_t v57 = v145;
      uint64_t v58 = (v146 - v145) >> 2;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 62) {
        goto LABEL_204;
      }
      uint64_t v60 = v147 - (void)v145;
      if ((uint64_t)(v147 - (void)v145) >> 1 > v59) {
        unint64_t v59 = v60 >> 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v59;
      }
      if (v61) {
        unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v61);
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v63 = (char *)(v61 + 4 * v58);
      *(_DWORD *)uint64_t v63 = HIDWORD(__p[0]);
      unint64_t v56 = v63 + 4;
      while (v55 != v57)
      {
        int v64 = *((_DWORD *)v55 - 1);
        v55 -= 4;
        *((_DWORD *)v63 - 1) = v64;
        v63 -= 4;
      }
      char v145 = v63;
      unint64_t v147 = v61 + 4 * v62;
      if (v57) {
        operator delete(v57);
      }
    }
    else
    {
      *(_DWORD *)v146 = HIDWORD(__p[0]);
      unint64_t v56 = v55 + 4;
    }
    v146 = v56;
    long long v65 = v143;
    if ((unint64_t)v143 >= v144)
    {
      int v67 = (char *)v142;
      uint64_t v68 = (v143 - (unsigned char *)v142) >> 2;
      unint64_t v69 = v68 + 1;
      if ((unint64_t)(v68 + 1) >> 62) {
        goto LABEL_204;
      }
      uint64_t v70 = v144 - (void)v142;
      if ((uint64_t)(v144 - (void)v142) >> 1 > v69) {
        unint64_t v69 = v70 >> 1;
      }
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71) {
        unint64_t v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v71);
      }
      else {
        uint64_t v72 = 0;
      }
      long long v73 = (char *)(v71 + 4 * v68);
      *(_DWORD *)long long v73 = __p[1];
      uint64_t v66 = v73 + 4;
      while (v65 != v67)
      {
        int v74 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      long long v142 = v73;
      unint64_t v144 = v71 + 4 * v72;
      if (v67) {
        operator delete(v67);
      }
    }
    else
    {
      *(_DWORD *)v143 = __p[1];
      uint64_t v66 = v65 + 4;
    }
    v143 = v66;
    unint64_t v75 = v140;
    if ((unint64_t)v140 >= v141)
    {
      uint64_t v77 = (char *)v139;
      uint64_t v78 = (v140 - (unsigned char *)v139) >> 2;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62) {
        goto LABEL_204;
      }
      uint64_t v80 = v141 - (void)v139;
      if ((uint64_t)(v141 - (void)v139) >> 1 > v79) {
        unint64_t v79 = v80 >> 1;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81) {
        unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v81);
      }
      else {
        uint64_t v82 = 0;
      }
      uint64_t v83 = (char *)(v81 + 4 * v78);
      *(_DWORD *)uint64_t v83 = HIDWORD(__p[1]);
      uint64_t v76 = v83 + 4;
      while (v75 != v77)
      {
        int v84 = *((_DWORD *)v75 - 1);
        v75 -= 4;
        *((_DWORD *)v83 - 1) = v84;
        v83 -= 4;
      }
      long long v139 = v83;
      unint64_t v141 = v81 + 4 * v82;
      if (v77) {
        operator delete(v77);
      }
    }
    else
    {
      *(_DWORD *)char v140 = HIDWORD(__p[1]);
      uint64_t v76 = v75 + 4;
    }
    char v140 = v76;
    char v85 = v137;
    if ((unint64_t)v137 >= v138)
    {
      char v87 = (char *)v136;
      uint64_t v88 = (v137 - (unsigned char *)v136) >> 2;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62) {
        goto LABEL_204;
      }
      uint64_t v90 = v138 - (void)v136;
      if ((uint64_t)(v138 - (void)v136) >> 1 > v89) {
        unint64_t v89 = v90 >> 1;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      if (v91) {
        unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v91);
      }
      else {
        uint64_t v92 = 0;
      }
      uint64_t v93 = (char *)(v91 + 4 * v88);
      *(_DWORD *)uint64_t v93 = *(_DWORD *)v122;
      char v86 = v93 + 4;
      while (v85 != v87)
      {
        int v94 = *((_DWORD *)v85 - 1);
        v85 -= 4;
        *((_DWORD *)v93 - 1) = v94;
        v93 -= 4;
      }
      uint64_t v136 = v93;
      unint64_t v138 = v91 + 4 * v92;
      if (v87) {
        operator delete(v87);
      }
    }
    else
    {
      *(_DWORD *)long long v137 = *(_DWORD *)v122;
      char v86 = v85 + 4;
    }
    long long v137 = v86;
    unint64_t v95 = v131;
    if ((unint64_t)v131 >= v132)
    {
      unint64_t v97 = v130;
      uint64_t v98 = v131 - v130;
      unint64_t v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 62) {
LABEL_204:
      }
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      uint64_t v100 = v132 - (void)v130;
      if ((uint64_t)(v132 - (void)v130) >> 1 > v99) {
        unint64_t v99 = v100 >> 1;
      }
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v99;
      }
      if (v101) {
        unint64_t v101 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v101);
      }
      else {
        uint64_t v102 = 0;
      }
      long long v103 = (_DWORD *)(v101 + 4 * v98);
      _DWORD *v103 = *(_DWORD *)&v122[4];
      uint64_t v96 = v103 + 1;
      while (v95 != v97)
      {
        int v104 = *--v95;
        *--long long v103 = v104;
      }
      long long v130 = v103;
      unint64_t v132 = v101 + 4 * v102;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *size_t v131 = *(_DWORD *)&v122[4];
      uint64_t v96 = v95 + 1;
    }
    size_t v131 = v96;
    BOOL v105 = *(_DWORD *)&v122[4] != -1;
    if (v123[0])
    {
      v123[1] = v123[0];
      operator delete(v123[0]);
    }
    v23 |= v105;
    BOOL v22 = (uint64_t *)*v22;
  }
  while (v22);
  uint64_t v106 = v133;
  uint64_t v107 = (uint64_t)v148;
  uint64_t v108 = (uint64_t)v145;
  uint64_t v109 = v142;
  uint64_t v110 = v139;
  uint64_t v111 = v136;
  if (v23)
  {
    uint64_t v6 = espresso_network_change_input_blob_shapes_seq_rank(a1, v120, (unint64_t)((char *)v36 - (unsigned char *)v133) >> 3, (uint64_t)v133, (uint64_t)v148, (uint64_t)v145, (uint64_t)v142, (uint64_t)v139, (uint64_t)v136, (uint64_t)v130);
    goto LABEL_176;
  }
LABEL_175:
  uint64_t v112 = (void *)MEMORY[0x192FF2020]();
  uint64_t v6 = espresso_network_change_input_blob_shapes_seq_rank(a1, v120, (unint64_t)((char *)v36 - v106) >> 3, (uint64_t)v106, v107, v108, (uint64_t)v109, (uint64_t)v110, (uint64_t)v111, 0);
LABEL_176:
  uint64_t v113 = v151;
  unsigned int v114 = (***(uint64_t (****)(void))(v151[2] + 8))(*(void *)(v151[2] + 8));
  std::string v115 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v113 + 66, v114);
  if (!v115)
  {
    uint64_t v116 = 0;
LABEL_183:
    MEMORY[0x192FF0F50](v113 + 152, __s);
    goto LABEL_184;
  }
  uint64_t v117 = v115[3];
  uint64_t v116 = (std::__shared_weak_count *)v115[4];
  if (v116) {
    atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v117) {
    goto LABEL_183;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  (*(void (**)(uint64_t, void **))(*(void *)v117 + 56))(v117, __p);
  if ((v122[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
LABEL_184:
  if (v116) {
    nitro::nitro_function::nitro_function(v116);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v124);
  uint64_t v118 = v130;
LABEL_188:
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v128, v129[0]);
  __p[0] = v127;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v118) {
    operator delete(v118);
  }
  if (v133) {
    operator delete(v133);
  }
  if (v136) {
    operator delete(v136);
  }
  if (v139) {
    operator delete(v139);
  }
  if (v142) {
    operator delete(v142);
  }
  if (v145) {
    operator delete(v145);
  }
  if (v148) {
    operator delete(v148);
  }
LABEL_202:
  if (v152) {
    nitro::nitro_function::nitro_function(v152);
  }
  return v6;
}

void sub_19218E96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (v58) {
    nitro::nitro_function::nitro_function(v58);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a34);
  Espresso::net_configuration::~net_configuration(&a39);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  unint64_t v61 = *(void **)(v59 - 240);
  if (v61)
  {
    *(void *)(v59 - 232) = v61;
    operator delete(v61);
  }
  uint64_t v62 = *(void **)(v59 - 216);
  if (v62)
  {
    *(void *)(v59 - 208) = v62;
    operator delete(v62);
  }
  uint64_t v63 = *(std::__shared_weak_count **)(v59 - 184);
  if (v63) {
    nitro::nitro_function::nitro_function(v63);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_get_additional_configuration_names(uint64_t a1, int a2, uint64_t *a3)
{
  Espresso::get_internal_network(a1, a2, (uint64_t)&v14);
  uint64_t v4 = v14;
  if (v14)
  {
    std::vector<std::string>::__clear[abi:ne180100](a3);
    uint64_t v5 = *(void **)(v4 + 776);
    uint64_t v6 = (void *)(v4 + 784);
    if (v5 != (void *)(v4 + 784))
    {
      unint64_t v7 = (std::string *)a3[1];
      do
      {
        unint64_t v8 = (long long *)(v5 + 4);
        if ((unint64_t)v7 >= a3[2])
        {
          unint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)v8);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v8);
          ++v7;
        }
        a3[1] = (uint64_t)v7;
        unint64_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            uint8x8_t v10 = v9;
            unint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint8x8_t v10 = (void *)v5[2];
            BOOL v11 = *v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v11);
        }
        uint64_t v5 = v10;
      }
      while (v10 != v6);
    }
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 4294967290;
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  return v12;
}

void sub_19218EB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_add_network(unsigned char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    BOOL v11 = Espresso::espresso_os_log_subsystem(v9, v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      int v33 = a3;
      _os_log_impl(&dword_1920CB000, v11, OS_LOG_TYPE_INFO, "espresso_plan_add_network plan=%zu path=%s cp=%d", buf, 0x1Cu);
    }

    int is_enabled = kdebug_is_enabled();
    char v13 = is_enabled ^ 1;
    if (!a2) {
      char v13 = 1;
    }
    if (v13) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = (const char *)kdebug_trace_string();
    }
    kdebug_trace();
    uint64_t v16 = (*(uint64_t (**)(unsigned char *, char *, uint64_t))(*(void *)a1 + 16))(a1, a2, a3);
    BOOL v18 = (void *)v16;
    if (a4)
    {
      *(void *)a4 = a1;
      *(_DWORD *)(a4 + 8) = v16;
      if (os_variant_has_internal_content()) {
        espresso_network_set_tracing_name(*(const void **)a4, *(void *)(a4 + 8), a2);
      }
    }
    BOOL v19 = (a1[16] & 4) != 0 || (int)v18 < 0;
    int v20 = !v19;
    if (v19) {
      int v21 = 0;
    }
    else {
      int v21 = is_enabled;
    }
    if (v21 == 1)
    {
      uint64_t v22 = *((void *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      unint64_t v30 = v8;
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(buf, *(void **)(v22 + 24), *(void **)(v22 + 32), (uint64_t)(*(void *)(v22 + 32) - *(void *)(v22 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4)) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(*(void *)(*(void *)buf + 16 * v18) + 1344) = v14;
      uint8x8_t v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      uint64_t v23 = *((void *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(buf, *(void **)(v23 + 24), *(void **)(v23 + 32), (uint64_t)(*(void *)(v23 + 32) - *(void *)(v23 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4)) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      uint8x8_t v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      uint64_t v24 = *((void *)a1 + 133);
      memset(buf, 0, sizeof(buf));
      std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(buf, *(void **)(v24 + 24), *(void **)(v24 + 32), (uint64_t)(*(void *)(v24 + 32) - *(void *)(v24 + 24)) >> 4);
      if (v18 >= (unint64_t)((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4)) {
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      }
      int v25 = *(unsigned __int8 *)(*(void *)(*(void *)buf + 16 * v18) + 1352);
      uint8x8_t v31 = buf;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if (v25)
      {
        unint64_t v8 = v30;
        Espresso::write_net_hashes_to_trace((Espresso *)a2, v14);
      }
      else
      {
        unint64_t v8 = v30;
      }
    }
    if (((v20 ^ 1 | ((a1[16] & 0x10) >> 4)) & 1) == 0) {
      Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics((Espresso::EspressoReporterUtilities *)a1, v18, (Espresso *)a2, a2, v17);
    }
    std::string v26 = (Espresso *)kdebug_trace();
    long long v28 = Espresso::espresso_os_log_subsystem(v26, v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 134218498;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      int v33 = a3;
      _os_log_impl(&dword_1920CB000, v28, OS_LOG_TYPE_INFO, "espresso_plan_add_network plan=%zu path=%s cp=%d Completed", buf, 0x1Cu);
    }

    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  return v15;
}

void sub_19218EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 *p_buf, __int16 buf)
{
  p_std::string buf = &buf;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_buf);
  if (a2 == 1)
  {
    uint64_t v15 = (std::exception *)__cxa_begin_catch(a1);
    if (v12)
    {
      *(_DWORD *)(v12 + 8) = -1;
      *(void *)uint64_t v12 = 0;
    }
    uint64_t v16 = (Espresso *)kdebug_trace();
    BOOL v18 = Espresso::espresso_os_log_subsystem(v16, v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      std::string buf = 0;
      _os_log_impl(&dword_1920CB000, v18, OS_LOG_TYPE_INFO, "espresso_plan_add_network completed with exception", (uint8_t *)&buf, 2u);
    }

    handle_ex_plan(v11, v15);
    __cxa_end_catch();
    JUMPOUT(0x19218EF00);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19218F0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t espresso_network_set_tracing_name(const void *a1, int a2, char *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4294967290;
  }
  uint64_t result = 4294967290;
  if (a3 && v6)
  {
    Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v13);
    uint64_t v8 = v13;
    if (v13)
    {
      unint64_t v9 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(buf, a3);
      BOOL v11 = (void **)(v8 + 1416);
      if (*(char *)(v8 + 1439) < 0) {
        operator delete(*v11);
      }
      *(_OWORD *)BOOL v11 = *(_OWORD *)buf;
      *(void *)(v8 + 1432) = v16;
      uint64_t v12 = Espresso::espresso_os_log_subsystem(v9, v10);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = a3;
        _os_log_impl(&dword_1920CB000, v12, OS_LOG_TYPE_INFO, "[espresso_plan_set_tracing_name] tracing name: %s", buf, 0xCu);
      }
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    return 0;
  }
  return result;
}

void sub_19218F24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a2 == 1)
  {
    uint64_t v13 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v10, v13);
    __cxa_end_catch();
    JUMPOUT(0x19218F21CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_blob_is_dynamic(uint64_t a1, int a2, char *a3, _DWORD *a4)
{
  if (!a4) {
    return 4294967290;
  }
  *a4 = 0;
  if (!a1) {
    return 4294967290;
  }
  if ((*(unsigned char *)(a1 + 16) & 4) != 0)
  {
    uint64_t result = 0;
    *a4 = 1;
  }
  else
  {
    Espresso::get_internal_network(a1, a2, (uint64_t)&v7);
    if (v7)
    {
      *a4 = Espresso::net::is_blob_dynamic(v7, a3);
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      return 0;
    }
    else
    {
      if (v8) {
        nitro::nitro_function::nitro_function(v8);
      }
      return 4294967291;
    }
  }
  return result;
}

void sub_19218F34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::get_internal_network@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (result
    && (uint64_t v3 = *(void *)(result + 1064)) != 0
    && (uint64_t v5 = v3 + 24, v4 = *(void *)(v3 + 24), a2 < (unint64_t)((*(void *)(v5 + 8) - v4) >> 4)))
  {
    long long v6 = *(_OWORD *)(v4 + 16 * a2);
    *(_OWORD *)a3 = v6;
    if (*((void *)&v6 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

BOOL Espresso::net::is_blob_dynamic(Espresso::net *this, char *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)this + 140, (uint64_t)__p);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  long long v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5
  {
    if (v6) {
      nitro::nitro_function::nitro_function(v6);
    }
    return 0;
  }
  uint64_t v8 = v7;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v6);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    BOOL v9 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v8 + 1, (uint64_t)__p) != 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v9 = v8[4] != 0;
  }
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v9;
}

void sub_19218F4E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::EspressoReporterUtilities::send_network_info_to_coreanalytics(Espresso::EspressoReporterUtilities *this, void *a2, Espresso *a3, char *a4, const char *a5)
{
  int v7 = (int)a2;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  unint64_t v41 = &v42;
  uint64_t v9 = *((void *)this + 133);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  std::string __p = 0;
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>(&__p, *(void **)(v9 + 24), *(void **)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 4);
  if (v7 >= (unint64_t)((v34 - (uint64_t)__p) >> 4)) {
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  }
  long long v27 = a4;
  long long v28 = this;
  uint8x8_t v10 = a3;
  BOOL v11 = (uint64_t *)((char *)__p + 16 * v7);
  uint64_t v13 = *v11;
  char v12 = (std::__shared_weak_count *)v11[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = v12;
  *(void *)&long long v44 = &__p;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  uint64_t v14 = *(char **)(v13 + 32);
  uint64_t v15 = *(char **)(v13 + 40);
  for (unint64_t i = v15 - v14; v14 != v15; v14 += 16)
  {
    uint64_t v16 = *(void *)v14;
    if (*(void *)v14)
    {
      int v19 = *(_DWORD *)(v16 + 8);
      BOOL v18 = (int *)(v16 + 8);
      int v17 = v19;
      unsigned int v20 = (0x2Fu >> (v19 - 22)) & 1;
      if ((v19 - 10006) > 5 || v20 == 0)
      {
        if (is_gpu(v18))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "GPU");
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v41, &__p, (uint64_t)&__p);
        }
        else
        {
          if (is_cpu(v18)) {
            std::string::basic_string[abi:ne180100]<0>(&__p, "CPU");
          }
          else {
            Espresso::platform_to_string(v17, &__p);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v41, &__p, (uint64_t)&__p);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ANE");
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v41, &__p, (uint64_t)&__p);
      }
      if (SHIBYTE(v35) < 0) {
        operator delete(__p);
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  if (v43)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(&v44, v41, &v42, &__p, "_");
    std::stringbuf::str();
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    uint64_t v40 = v45;
    long long v39 = v44;
    if (SHIBYTE(v45) < 0)
    {
      uint64_t v23 = (long long *)v39;
      uint64_t v22 = --*((void *)&v39 + 1);
    }
    else
    {
      uint64_t v22 = HIBYTE(v45) - 1;
      HIBYTE(v40) = v22 & 0x7F;
      uint64_t v23 = &v39;
    }
    *((unsigned char *)v23 + v22) = 0;
    std::string __p = (void *)*MEMORY[0x1E4FBA418];
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v34 = MEMORY[0x1E4FBA470] + 16;
    if (v37 < 0) {
      operator delete(v36);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FF15B0](&v38);
  }
  unsigned int v24 = *((_DWORD *)v28 + 4);
  Espresso::fetch_hash_for_analytics(v10, (uint64_t)&__p);
  if (Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken != -1) {
    dispatch_once(&Espresso::EspressoReporterSingleton<Espresso::EventReporterImplementation>::getInstance(void)::onceToken, &__block_literal_global_16719);
  }
  int v31 = i >> 4;
  char v32 = 1;
  v30[0] = 0;
  v30[4] = 0;
  int v25 = std::string::basic_string[abi:ne180100]<0>(&v44, v27);
  Espresso::EventReporterImplementation::logMetric((uint64_t)v25, (uint64_t)&v39, (uint64_t)&v31, (uint64_t)v30, (uint64_t)&__p, (v24 >> 4) & 1, (uint64_t)&v44);
  if (SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  std::__tree<std::string>::destroy((uint64_t)&v41, v42);
}

void sub_19218F914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&__p);
  if (*(char *)(v21 - 137) < 0) {
    operator delete(*(void **)(v21 - 160));
  }
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  std::__tree<std::string>::destroy(v21 - 136, *(char **)(v21 - 128));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    long long v6 = operator new(0x38uLL);
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::ostream_iterator<std::string,char,std::char_traits<char>>>(void *result, void *a2, void *a3, void *a4, const char *a5)
{
  int v7 = a2;
  uint64_t v8 = result;
  if (a2 != a3)
  {
    do
    {
      int v10 = *((char *)v7 + 55);
      if (v10 >= 0) {
        uint64_t v11 = (uint64_t)(v7 + 4);
      }
      else {
        uint64_t v11 = v7[4];
      }
      if (v10 >= 0) {
        uint64_t v12 = *((unsigned __int8 *)v7 + 55);
      }
      else {
        uint64_t v12 = v7[5];
      }
      uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, v11, v12);
      if (a5)
      {
        size_t v13 = strlen(a5);
        uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a4, (uint64_t)a5, v13);
      }
      uint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          int v7 = v15;
        }
        while (!v16);
      }
      int v7 = v15;
    }
    while (v15 != a3);
    int v7 = a3;
  }
  *uint64_t v8 = v7;
  v8[1] = a4;
  _OWORD v8[2] = a5;
  return result;
}

void Espresso::EventReporterImplementation::logMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 3221225472;
  uint64_t v28[2] = ___ZN8Espresso27EventReporterImplementation9logMetricERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8optionalIiEESD_S9_NS_21_EspressoCompilerTypeES9__block_invoke;
  v28[3] = &__block_descriptor_76_e30___NSObject_OS_xpc_object__8__0l;
  v28[4] = a2;
  v28[5] = a3;
  v28[6] = a4;
  v28[7] = a5;
  v28[8] = a7;
  int v29 = a6;
  uint64_t v7 = MEMORY[0x192FF2250](v28);
  uint64_t v8 = (void *)v7;
  if (Espresso::EventReporterImplementation::reporter_tests_enable)
  {
    id v9 = (id)(*(uint64_t (**)(uint64_t))(v7 + 16))(v7);
    int v10 = (char **)Espresso::EventReporterImplementation::shared_event_pond_ptr;
    if (!Espresso::EventReporterImplementation::shared_event_pond_ptr) {
      operator new();
    }
    uint64_t v12 = (void *)*((void *)Espresso::EventReporterImplementation::shared_event_pond_ptr + 1);
    unint64_t v11 = *((void *)Espresso::EventReporterImplementation::shared_event_pond_ptr + 2);
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v14 = ((uint64_t)v12 - *(void *)Espresso::EventReporterImplementation::shared_event_pond_ptr) >> 3;
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v11 - *(void *)Espresso::EventReporterImplementation::shared_event_pond_ptr;
      uint64_t v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v16 = v14 + 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v16;
      }
      if (v17)
      {
        if (v17 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v18 = (char *)operator new(8 * v17);
      }
      else
      {
        BOOL v18 = 0;
      }
      int v19 = &v18[8 * v14];
      unsigned int v20 = &v18[8 * v17];
      *(void *)int v19 = v9;
      size_t v13 = v19 + 8;
      uint64_t v22 = *v10;
      uint64_t v21 = v10[1];
      if (v21 == *v10)
      {
        int64x2_t v24 = vdupq_n_s64((unint64_t)v21);
      }
      else
      {
        do
        {
          uint64_t v23 = *((void *)v21 - 1);
          v21 -= 8;
          *(void *)uint64_t v21 = 0;
          *((void *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        int64x2_t v24 = *(int64x2_t *)v10;
      }
      *int v10 = v19;
      v10[1] = v13;
      v10[2] = v20;
      std::string v26 = (char *)v24.i64[1];
      int v25 = (char *)v24.i64[0];
      while (v26 != v25)
      {
        long long v27 = (void *)*((void *)v26 - 1);
        v26 -= 8;
      }
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *uint64_t v12 = v9;
      size_t v13 = (char *)(v12 + 1);
    }
    v10[1] = v13;
  }
  else
  {
    analytics_send_event_lazy();
  }
}

void sub_19218FD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::write_net_hashes_to_trace(Espresso *this, const char *a2)
{
  int is_enabled = kdebug_is_enabled();
  if (this && is_enabled)
  {
    Espresso::sha_hash_filepath((void **)&v17, (const char *)this);
    std::string::size_type v5 = v19;
    unsigned __int8 v6 = v19;
    if ((v19 & 0x80u) != 0) {
      std::string::size_type v5 = v18;
    }
    if (v5)
    {
      std::to_string(&v13, (unint64_t)a2);
      uint64_t v7 = std::string::append(&v13, ":");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if ((v19 & 0x80u) == 0) {
        id v9 = (const std::string::value_type *)&v17;
      }
      else {
        id v9 = v17;
      }
      if ((v19 & 0x80u) == 0) {
        std::string::size_type v10 = v19;
      }
      else {
        std::string::size_type v10 = v18;
      }
      unint64_t v11 = std::string::append(&v14, v9, v10);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      kdebug_trace_string();
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      unsigned __int8 v6 = v19;
    }
    if ((v6 & 0x80) != 0) {
      operator delete(v17);
    }
  }
}

void sub_19218FE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

void Espresso::fetch_hash_for_analytics(Espresso *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    Espresso::sha_hash_filepath((void **)a2, (const char *)this);
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(void *)(a2 + 8)) {
        return;
      }
      operator delete(*(void **)a2);
    }
    else if (*(unsigned char *)(a2 + 23))
    {
      return;
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
}

uint64_t Espresso::sha_hash_filepath(void **this, const char *a2)
{
  unint64_t v11 = a2;
  std::string::basic_string[abi:ne180100]<0>(this, "");
  uint64_t result = open(a2, 0);
  int v5 = result;
  if ((result & 0x80000000) == 0)
  {
    if ((fstat(result, &v10) & 0x80000000) == 0)
    {
      st_std::string::size_type size = v10.st_size;
      uint64_t v7 = mmap(0, v10.st_size, 1, 2, v5, 0);
      long long v8 = v7;
      if (v7)
      {
        if (v7 == (void *)-1) {
          Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("mmap of %s failed", &v11);
        }
        Espresso::sha_hash(&v9, v7, st_size, 0);
        if (*((char *)this + 23) < 0) {
          operator delete(*this);
        }
        *(std::string *)this = v9;
        munmap(v8, st_size);
      }
    }
    return close(v5);
  }
  return result;
}

void sub_192190040(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoLight::espresso_plan::add_network(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  unsigned __int8 v6 = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 240))(a1, a2, a3, &v5);
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  return v3;
}

void sub_1921900CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoLight::espresso_plan::add_network(std::string::size_type a1, std::string::value_type *a2, int a3, uint64_t *a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  std::string __s = a2;
  uint64_t v7 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  long long v8 = [v7 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  std::string v9 = [v8 objectForKeyedSubscript:@"espresso.force_dtype"];
  stat v10 = v9;
  if (v9)
  {
    unint64_t v11 = (Espresso *)[v9 intValue];
    a3 = (int)v11;
    std::string v13 = Espresso::espresso_os_log_subsystem(v11, v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a3;
      _os_log_error_impl(&dword_1920CB000, v13, OS_LOG_TYPE_ERROR, "Forcing compute path %d", (uint8_t *)&buf, 8u);
    }
  }
  if (Espresso::hardware::is_virtual_machine(void)::onceToken != -1) {
    dispatch_once(&Espresso::hardware::is_virtual_machine(void)::onceToken, &__block_literal_global_37_7277);
  }
  if (Espresso::hardware::is_virtual_machine(void)::result && a3 != 65568)
  {
    std::string::size_type v16 = Espresso::espresso_os_log_subsystem(v14, v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      buf.__r_.__value_.__r.__words[0] = 0x1002004000100;
      _os_log_impl(&dword_1920CB000, v16, OS_LOG_TYPE_INFO, "VM detected: Forcing compute path %d", (uint8_t *)&buf, 8u);
    }

    a3 = 65568;
  }
  unint64_t v17 = __s;
  uint64_t v18 = *a4;
  if (!__s)
  {
    if (!v18)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Null path");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_16;
  }
  if (v18)
  {
LABEL_16:
    unint64_t v17 = "";
    std::string __s = "";
    LODWORD(v18) = 1;
  }
  unsigned int v65 = 0;
  if (a3 == 0x80000)
  {
    unsigned int v19 = 4;
  }
  else
  {
    unsigned int v19 = 0;
    if (a3 == 65568) {
      goto LABEL_23;
    }
    if (a3 != 65552)
    {
      unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v70, a3);
      uint64_t v57 = std::string::insert(&v70, 0, "Compute path ");
      long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v58;
      v57->__r_.__value_.__l.__size_ = 0;
      v57->__r_.__value_.__r.__words[2] = 0;
      v57->__r_.__value_.__r.__words[0] = 0;
      uint64_t v59 = std::string::append(&v75, " not supported.");
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v56, &buf);
      __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v19 = 1;
  }
  unsigned int v65 = v19;
LABEL_23:
  v64[0] = 0;
  v64[1] = 0;
  BOOL v63 = (*(unsigned char *)(a1 + 16) & 8) != 0;
  buf.__r_.__value_.__r.__words[0] = a1;
  buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v65;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  uint64_t v72 = v64;
  p_s = &__s;
  int v74 = &v63;
  if (v18)
  {
    Espresso::reload_network_on_context(a4, *(void *)(a1 + 1064), v19, (uint64_t)&v75);
    unsigned int v20 = (std::__shared_weak_count *)v64[1];
    *(_OWORD *)int v64 = *(_OWORD *)&v75.__r_.__value_.__l.__data_;
    if (v20) {
      nitro::nitro_function::nitro_function(v20);
    }
  }
  else
  {
    uint64_t v21 = std::string::basic_string[abi:ne180100]<0>(&v75, v17);
    Espresso::load_network((uint64_t)v21, *(void **)(a1 + 1064), v65, v63, (uint64_t *)&v70);
    uint64_t v22 = (std::__shared_weak_count *)v64[1];
    *(_OWORD *)int v64 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
    if (v22) {
      nitro::nitro_function::nitro_function(v22);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
  }
  if (!v64[0])
  {
    uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v69, "Cannot load network '");
    unint64_t v49 = std::string::append(&v69, __s);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "'");
    if ((v68 & 0x80u) == 0) {
      unint64_t v51 = __p;
    }
    else {
      unint64_t v51 = (void **)__p[0];
    }
    if ((v68 & 0x80u) == 0) {
      std::string::size_type v52 = v68;
    }
    else {
      std::string::size_type v52 = (std::string::size_type)__p[1];
    }
    unint64_t v53 = std::string::append(&v70, (const std::string::value_type *)v51, v52);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v48, &v75);
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
    Espresso::net::wipe_layers_blobs(v64[0]);
  }
  uint64_t v23 = *(void **)(a1 + 1064);
  int64x2_t v24 = (Espresso::net **)v23[4];
  unint64_t v25 = v23[5];
  if ((unint64_t)v24 >= v25)
  {
    uint64_t v28 = v23[3];
    uint64_t v29 = ((uint64_t)v24 - v28) >> 4;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v25 - v28;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    uint64_t v77 = v23 + 5;
    int v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v32);
    uint64_t v34 = &v33[16 * v29];
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    uint64_t v76 = &v33[16 * v35];
    unint64_t v36 = v64[1];
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v64;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v36 + 1, 1uLL, memory_order_relaxed);
    }
    v75.__r_.__value_.__r.__words[2] = (std::string::size_type)(v34 + 16);
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__swap_out_circular_buffer(v23 + 3, &v75);
    long long v27 = (Espresso::net **)v23[4];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v75);
  }
  else
  {
    *int64x2_t v24 = v64[0];
    std::string v26 = v64[1];
    v24[1] = v64[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v26 + 1, 1uLL, memory_order_relaxed);
    }
    long long v27 = v24 + 2;
    v23[4] = v24 + 2;
  }
  v23[4] = v27;
  char v37 = v64[0];
  *((void *)v64[0] + 155) = a1;
  uint64_t v38 = *(void **)(a1 + 1064);
  *((_DWORD *)v37 + 312) = ((v38[4] - v38[3]) >> 4) - 1;
  long long v39 = (unsigned char *)v38[48];
  if (!v39)
  {
    uint64_t v40 = operator new(0x40uLL);
    v40[1] = 0;
    _OWORD v40[2] = 0;
    void *v40 = &unk_1EE386E08;
    *(void *)&long long v41 = Espresso::espresso_plan_tracer::espresso_plan_tracer((Espresso::espresso_plan_tracer *)(v40 + 3));
    *((void *)&v41 + 1) = v40;
    uint64_t v42 = *(void *)(a1 + 1064);
    uint64_t v43 = *(std::__shared_weak_count **)(v42 + 392);
    *(_OWORD *)(v42 + 384) = v41;
    if (v43) {
      nitro::nitro_function::nitro_function(v43);
    }
    long long v39 = *(unsigned char **)(*(void *)(a1 + 1064) + 384);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, __s);
  if (*v39) {
    operator new();
  }
  if (v62 < 0) {
    operator delete(v61[0]);
  }
  uint64_t v44 = *(void *)(a1 + 1064);
  uint64_t v46 = *(void *)(v44 + 24);
  uint64_t v45 = *(void *)(v44 + 32);
  if (v64[1]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)v64[1]);
  }

  return ((unint64_t)(v45 - v46) >> 4) - 1;
}

void sub_192190958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (*(char *)(v47 - 137) < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (a44 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_10:

      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v45);
  goto LABEL_10;
}

void sub_192190A44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  MEMORY[0x192FF16B0](v41, 0x10A0C401AD03C3FLL);
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }

  JUMPOUT(0x1921914E4);
}

void sub_192190A4C()
{
}

void sub_192190A54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v34);
  JUMPOUT(0x1921914CCLL);
}

void sub_192190A6C()
{
  std::__shared_weak_count::~__shared_weak_count(v0);
  JUMPOUT(0x1921914ACLL);
}

void sub_192190A80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,unsigned __int8 a23,long long a24,uint64_t a25,int a26,unsigned int a27,char *__s,uint64_t a29,uint64_t a30,uint64_t a31,long long a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  switch(a2)
  {
    case 5:
      uint64_t v43 = (Espresso *)__cxa_begin_catch(a1);
      uint64_t v45 = Espresso::espresso_os_log_subsystem(v43, v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v40 - 112) = 0;
        _os_log_debug_impl(&dword_1920CB000, v45, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mps_buffers", (uint8_t *)(v40 - 112), 2u);
      }

      EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()((uint64_t *)(v40 - 160));
      __cxa_end_catch();
LABEL_97:
      JUMPOUT(0x192190324);
    case 4:
      int v46 = (Espresso *)__cxa_begin_catch(a1);
      uint64_t v48 = Espresso::espresso_os_log_subsystem(v46, v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v40 - 112) = 0;
        _os_log_debug_impl(&dword_1920CB000, v48, OS_LOG_TYPE_DEBUG, "dispatch_error_use_cpu_script", (uint8_t *)(v40 - 112), 2u);
      }

      if (*(void *)(*(void *)(v37 + 1064) + 32) != *(void *)(*(void *)(v37 + 1064) + 24)) {
        goto LABEL_43;
      }
      context = (uint64_t **)espresso_create_context(0, -1);
      Espresso::get_internal_context(context, &a35);
      uint64_t v56 = a35;
      if (!a35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
      }
      uint64_t v57 = *(uint64_t **)(v37 + 1064);
      uint64_t v59 = *v57;
      long long v58 = (std::__shared_weak_count *)v57[1];
      a12 = v59;
      a13 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v56 + 112))(v56, &a12);
      if (a13) {
        nitro::nitro_function::nitro_function(a13);
      }
      unint64_t v61 = *(uint64_t **)(v37 + 1064);
      uint64_t v62 = a36;
      a35 = 0;
      a36 = 0;
      BOOL v63 = (std::__shared_weak_count *)v61[1];
      *unint64_t v61 = v56;
      v61[1] = v62;
      if (v63) {
        nitro::nitro_function::nitro_function(v63);
      }
      *(void *)(*(void *)(v37 + 1064) + 16) = context;
      if (a27)
      {
        int v64 = Espresso::espresso_os_log_subsystem((Espresso *)v63, v60);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)(v40 - 112) = 0;
          _os_log_debug_impl(&dword_1920CB000, v64, OS_LOG_TYPE_DEBUG, "Espresso CPU context forcing FP32 compute path.", (uint8_t *)(v40 - 112), 2u);
        }
      }
      if (*v38)
      {
        Espresso::reload_network_on_context(v38, *(void *)(v37 + 1064), 0, v40 - 112);
        unsigned int v65 = (std::__shared_weak_count *)*((void *)&a24 + 1);
        a24 = *(_OWORD *)(v40 - 112);
        if (!v65) {
          goto LABEL_43;
        }
        break;
      }
      uint64_t v80 = std::string::basic_string[abi:ne180100]<0>((void *)(v40 - 112), __s);
      Espresso::load_network((uint64_t)v80, *(void **)(v37 + 1064), 0, a23, (uint64_t *)&a32);
      unint64_t v81 = (std::__shared_weak_count *)*((void *)&a24 + 1);
      a24 = a32;
      if (v81) {
        nitro::nitro_function::nitro_function(v81);
      }
      if ((*(char *)(v40 - 89) & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_85:
      operator delete(*(void **)(v40 - 112));
      goto LABEL_43;
    case 3:
      unint64_t v49 = (Espresso *)__cxa_begin_catch(a1);
      unint64_t v51 = Espresso::espresso_os_log_subsystem(v49, v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v40 - 112) = 0;
        _os_log_debug_impl(&dword_1920CB000, v51, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mpsgraph_compiler", (uint8_t *)(v40 - 112), 2u);
      }

      if (*(void *)(*(void *)(v37 + 1064) + 32) != *(void *)(*(void *)(v37 + 1064) + 24)) {
        goto LABEL_43;
      }
      uint64_t v72 = (uint64_t **)espresso_create_context(0xC358u, -1);
      a27 = 0;
      Espresso::get_internal_context(v72, &a35);
      uint64_t v73 = a35;
      if (!a35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
      }
      int v74 = *(uint64_t **)(v37 + 1064);
      uint64_t v76 = *v74;
      std::string v75 = (std::__shared_weak_count *)v74[1];
      a14 = v76;
      a15 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 112))(v73, &a14);
      if (a15) {
        nitro::nitro_function::nitro_function(a15);
      }
      uint64_t v77 = *(uint64_t **)(v37 + 1064);
      uint64_t v78 = a36;
      a35 = 0;
      a36 = 0;
      unint64_t v79 = (std::__shared_weak_count *)v77[1];
      *uint64_t v77 = v73;
      v77[1] = v78;
      if (v79) {
        nitro::nitro_function::nitro_function(v79);
      }
      *(void *)(*(void *)(v37 + 1064) + 16) = v72;
      if (!*v38)
      {
        uint64_t v98 = std::string::basic_string[abi:ne180100]<0>((void *)(v40 - 112), __s);
        Espresso::load_network((uint64_t)v98, *(void **)(v37 + 1064), 0, a23, (uint64_t *)&a32);
        unint64_t v99 = (std::__shared_weak_count *)*((void *)&a24 + 1);
        a24 = a32;
        if (v99) {
          nitro::nitro_function::nitro_function(v99);
        }
        if ((*(char *)(v40 - 89) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_85;
      }
      Espresso::reload_network_on_context(v38, *(void *)(v37 + 1064), 0, v40 - 112);
      unsigned int v65 = (std::__shared_weak_count *)*((void *)&a24 + 1);
      a24 = *(_OWORD *)(v40 - 112);
      if (!v65) {
        goto LABEL_43;
      }
      break;
    case 2:
      std::string::size_type v52 = (Espresso *)__cxa_begin_catch(a1);
      long long v54 = Espresso::espresso_os_log_subsystem(v52, v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v40 - 112) = 0;
        _os_log_debug_impl(&dword_1920CB000, v54, OS_LOG_TYPE_DEBUG, "dispatch_error_use_mpsgraph", (uint8_t *)(v40 - 112), 2u);
      }

      if (*(void *)(*(void *)(v37 + 1064) + 32) != *(void *)(*(void *)(v37 + 1064) + 24)) {
        goto LABEL_43;
      }
      uint64_t v82 = (uint64_t **)espresso_create_context(0xC355u, -3);
      a27 = 0;
      Espresso::get_internal_context(v82, &a35);
      uint64_t v83 = a35;
      if (!a35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
      }
      int v84 = *(uint64_t **)(v37 + 1064);
      uint64_t v86 = *v84;
      char v85 = (std::__shared_weak_count *)v84[1];
      a16 = v86;
      a17 = v85;
      if (v85) {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v83 + 112))(v83, &a16);
      if (a17) {
        nitro::nitro_function::nitro_function(a17);
      }
      char v87 = *(uint64_t **)(v37 + 1064);
      uint64_t v88 = a36;
      a35 = 0;
      a36 = 0;
      unint64_t v89 = (std::__shared_weak_count *)v87[1];
      uint64_t *v87 = v83;
      v87[1] = v88;
      if (v89) {
        nitro::nitro_function::nitro_function(v89);
      }
      *(void *)(*(void *)(v37 + 1064) + 16) = v82;
      if (!*v38)
      {
        uint64_t v100 = std::string::basic_string[abi:ne180100]<0>((void *)(v40 - 112), __s);
        Espresso::load_network((uint64_t)v100, *(void **)(v37 + 1064), 0, a23, (uint64_t *)&a32);
        unint64_t v101 = (std::__shared_weak_count *)*((void *)&a24 + 1);
        a24 = a32;
        if (v101) {
          nitro::nitro_function::nitro_function(v101);
        }
        if ((*(char *)(v40 - 89) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_85;
      }
      Espresso::reload_network_on_context(v38, *(void *)(v37 + 1064), 0, v40 - 112);
      unsigned int v65 = (std::__shared_weak_count *)*((void *)&a24 + 1);
      a24 = *(_OWORD *)(v40 - 112);
      if (!v65) {
        goto LABEL_43;
      }
      break;
    case 1:
      uint64_t v66 = (Espresso *)__cxa_begin_catch(a1);
      unsigned __int8 v68 = Espresso::espresso_os_log_subsystem(v66, v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)(v40 - 112) = 0;
        _os_log_debug_impl(&dword_1920CB000, v68, OS_LOG_TYPE_DEBUG, "dispatch_error_fallback_at_c_level", (uint8_t *)(v40 - 112), 2u);
      }

      if (*(void *)(*(void *)(v37 + 1064) + 32) != *(void *)(*(void *)(v37 + 1064) + 24))
      {
        unint64_t v71 = Espresso::espresso_os_log_subsystem(v69, v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          int v104 = __s;
          uint64_t v105 = (uint64_t)(*(void *)(*(void *)(v37 + 1064) + 32) - *(void *)(*(void *)(v37 + 1064) + 24)) >> 4;
          *(_DWORD *)(v40 - 112) = 136315394;
          *(void *)(v39 + 140) = v104;
          *(_WORD *)(v40 - 100) = 2048;
          *(void *)(v39 + 150) = v105;
          _os_log_error_impl(&dword_1920CB000, v71, OS_LOG_TYPE_ERROR, "Dispatch failed for network %s, and the plan already contained %zu networks", (uint8_t *)(v40 - 112), 0x16u);
        }

        goto LABEL_43;
      }
      a27 = 1;
      uint64_t v90 = (uint64_t **)espresso_create_context(5u, -3);
      Espresso::get_internal_context(v90, &a35);
      uint64_t v91 = a35;
      if (!a35) {
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("The context is invalid.");
      }
      uint64_t v92 = *(uint64_t **)(v37 + 1064);
      uint64_t v94 = *v92;
      uint64_t v93 = (std::__shared_weak_count *)v92[1];
      a18 = v94;
      a19 = v93;
      if (v93) {
        atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v91 + 112))(v91, &a18);
      if (a19) {
        nitro::nitro_function::nitro_function(a19);
      }
      unint64_t v95 = *(uint64_t **)(v37 + 1064);
      uint64_t v96 = a36;
      a35 = 0;
      a36 = 0;
      unint64_t v97 = (std::__shared_weak_count *)v95[1];
      *unint64_t v95 = v91;
      v95[1] = v96;
      if (v97) {
        nitro::nitro_function::nitro_function(v97);
      }
      *(void *)(*(void *)(v37 + 1064) + 16) = v90;
      if (!*v38)
      {
        uint64_t v102 = std::string::basic_string[abi:ne180100]<0>((void *)(v40 - 112), __s);
        Espresso::load_network((uint64_t)v102, *(void **)(v37 + 1064), a27, a23, (uint64_t *)&a32);
        long long v103 = (std::__shared_weak_count *)*((void *)&a24 + 1);
        a24 = a32;
        if (v103) {
          nitro::nitro_function::nitro_function(v103);
        }
        if ((*(char *)(v40 - 89) & 0x80000000) == 0) {
          goto LABEL_43;
        }
        goto LABEL_85;
      }
      Espresso::reload_network_on_context(v38, *(void *)(v37 + 1064), a27, v40 - 112);
      unsigned int v65 = (std::__shared_weak_count *)*((void *)&a24 + 1);
      a24 = *(_OWORD *)(v40 - 112);
      if (!v65)
      {
LABEL_43:
        __cxa_end_catch();
        goto LABEL_97;
      }
      break;
    default:
      if (*((void *)&a24 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&a24 + 1));
      }

      JUMPOUT(0x1921914E4);
  }
  nitro::nitro_function::nitro_function(v65);
  goto LABEL_43;
}

void sub_192190AAC()
{
}

void sub_192191244(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (*(char *)(v36 - 89) < 0) {
    operator delete(*(void **)(v36 - 112));
  }
  if (a2 == 5)
  {
    __cxa_begin_catch(a1);
    espresso_context_destroy(v35);
    EspressoLight::espresso_plan::add_network(char const*,espresso_storage_type_t,std::shared_ptr<Espresso::net>)::$_0::operator()((uint64_t *)(v36 - 160));
    __cxa_end_catch();
    if (!a34) {
      JUMPOUT(0x192190D08);
    }
    JUMPOUT(0x192190FF0);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  __cxa_end_catch();
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }

  JUMPOUT(0x1921914E4);
}

void sub_192191328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  __cxa_end_catch();
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }

  JUMPOUT(0x1921914E4);
}

void sub_192191358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  __cxa_end_catch();
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }

  JUMPOUT(0x1921914E4);
}

void sub_192191374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  __cxa_end_catch();
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }

  JUMPOUT(0x1921914E4);
}

void sub_19219137C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a15) {
    nitro::nitro_function::nitro_function(a15);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  JUMPOUT(0x1921913A0);
}

void sub_1921913B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  JUMPOUT(0x1921913E0);
}

void sub_1921913BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a13) {
    nitro::nitro_function::nitro_function(a13);
  }
  if (a34) {
    nitro::nitro_function::nitro_function(a34);
  }
  JUMPOUT(0x1921913E0);
}

void sub_1921913F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  __cxa_end_catch();
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }

  JUMPOUT(0x1921914E4);
}

void sub_192191400(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_192191410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,Espresso::tracer *a33)
{
}

void sub_192191420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (SHIBYTE(a28) < 0) {
    operator delete(a26);
  }
  if (SHIBYTE(a31) < 0) {
    operator delete(a29);
  }
  MEMORY[0x192FF16B0](v38, 0x10A0C401AD03C3FLL);
  if (SHIBYTE(a11) < 0) {
    operator delete(a9);
  }
  JUMPOUT(0x1921914CCLL);
}

void sub_1921914BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Espresso::espresso_plan_tracer *Espresso::espresso_plan_tracer::espresso_plan_tracer(Espresso::espresso_plan_tracer *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = "";
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::onceToken != -1) {
    dispatch_once(&Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::onceToken, &__block_literal_global_13839);
  }
  int v2 = Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record;
  *(unsigned char *)this = Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::should_record;
  if (v2)
  {
    id v3 = [NSString stringWithFormat:@"%@/pid_%d_plan_%d", Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::base_path, Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::pid, Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::trace_id];
    *((void *)this + 1) = [v3 UTF8String];

    ++Espresso::espresso_plan_tracer::espresso_plan_tracer(void)::trace_id;
    unsigned __int8 v6 = Espresso::espresso_os_log_subsystem(v4, v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *((void *)this + 1);
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v10 = v8;
      _os_log_debug_impl(&dword_1920CB000, v6, OS_LOG_TYPE_DEBUG, "Plan tracer added to dump at: %s", buf, 0xCu);
    }
  }
  return this;
}

void sub_192191650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank(const void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18 = (void *)MEMORY[0x192FF2020]();
  if (a1)
  {
    context = v18;
    {
      int v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      if (a3)
      {
        if (a3 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unsigned int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a3);
        int v33 = v19;
        uint64_t v35 = &v19[8 * v20];
        bzero(v19, 8 * a3);
        uint64_t v34 = &v19[8 * a3];
      }
      else
      {
        unsigned int v19 = 0;
      }
      std::vector<int>::vector(&v32, a3);
      std::vector<int>::vector(&v31, a3);
      std::vector<int>::vector(&v30, a3);
      std::vector<int>::vector(&v29, a3);
      std::vector<int>::vector(&v28, a3);
      if (a10) {
        std::vector<int>::size_type v22 = a3;
      }
      else {
        std::vector<int>::size_type v22 = 0;
      }
      std::vector<int>::vector(&v27, v22);
      if (a3 >= 1)
      {
        uint64_t v23 = 0;
        do
        {
          *(void *)&v19[8 * v23] = *(void *)(a4 + 8 * v23);
          v32.__begin_[v23] = *(_DWORD *)(a5 + 4 * v23);
          v31.__begin_[v23] = *(_DWORD *)(a6 + 4 * v23);
          v30.__begin_[v23] = *(_DWORD *)(a7 + 4 * v23);
          v29.__begin_[v23] = *(_DWORD *)(a8 + 4 * v23);
          if (a9) {
            int v24 = *(_DWORD *)(a9 + 4 * v23);
          }
          else {
            int v24 = 1;
          }
          v28.__begin_[v23] = v24;
          if (a10) {
            v27.__begin_[v23] = *(_DWORD *)(a10 + 4 * v23);
          }
          ++v23;
        }
        while (a3 != v23);
      }
      EspressoLight::espresso_plan::change_input_shapes((uint64_t)a1, a2, (uint64_t *)&v33, &v32, &v31, &v30, &v29, &v28, (uint64_t *)&v27);
      if (v27.__begin_)
      {
        v27.__end_ = v27.__begin_;
        operator delete(v27.__begin_);
      }
      if (v28.__begin_)
      {
        v28.__end_ = v28.__begin_;
        operator delete(v28.__begin_);
      }
      if (v29.__begin_)
      {
        v29.__end_ = v29.__begin_;
        operator delete(v29.__begin_);
      }
      if (v30.__begin_)
      {
        v30.__end_ = v30.__begin_;
        operator delete(v30.__begin_);
      }
      if (v31.__begin_)
      {
        v31.__end_ = v31.__begin_;
        operator delete(v31.__begin_);
      }
      if (v32.__begin_)
      {
        v32.__end_ = v32.__begin_;
        operator delete(v32.__begin_);
      }
      if (v19) {
        operator delete(v19);
      }
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 4294967290;
    }
    uint64_t v18 = context;
  }
  else
  {
    uint64_t v21 = 4294967290;
  }
  return v21;
}

void sub_192191910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  if (a25) {
    operator delete(a25);
  }
  std::vector<int> v31 = *(void **)(v28 - 136);
  if (v31)
  {
    *(void *)(v28 - 128) = v31;
    operator delete(v31);
  }
  if (v27) {
    operator delete(v27);
  }
  if (a2 == 1)
  {
    std::vector<int> v32 = (std::exception *)__cxa_begin_catch(exception_object);
    handle_ex_plan(v26, v32);
    __cxa_end_catch();
    JUMPOUT(0x1921918D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_192191A08()
{
  uint64_t v1 = *(void *)(v0 - 112);
  if (v1)
  {
    *(void *)(v0 - 104) = v1;
    JUMPOUT(0x1921919C4);
  }
  JUMPOUT(0x1921919CCLL);
}

void E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9301B30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9301B30))
  {
    xmmword_1E9301B50 = 0uLL;
    unk_1E9301B60 = 0;
    __cxa_guard_release(&qword_1E9301B30);
  }
  if (qword_1E9301B28 != -1) {
    dispatch_once(&qword_1E9301B28, &unk_1EE3936F0);
  }
  if (byte_1E9301B67 >= 0) {
    unsigned __int8 v6 = &xmmword_1E9301B50;
  }
  else {
    unsigned __int8 v6 = (long long *)xmmword_1E9301B50;
  }
  if (byte_1E9301B67 >= 0) {
    size_t v7 = byte_1E9301B67;
  }
  else {
    size_t v7 = *((void *)&xmmword_1E9301B50 + 1);
  }
  std::string __dst = 0;
  uint64_t v35 = 0;
  int v33 = 0;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v7);
    int v33 = v8;
    std::string __dst = v8;
    uint64_t v35 = &v8[v7];
    if (v7 < 0x20)
    {
      std::string v9 = v6;
    }
    else
    {
      std::string v9 = v6;
      if ((unint64_t)(v8 - (char *)v6) >= 0x20)
      {
        std::string v9 = (long long *)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFE0));
        uint64_t v10 = &v8[v7 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v11 = v8 + 16;
        long long v12 = v6 + 1;
        unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v14 = *v12;
          *(v11 - 1) = *(v12 - 1);
          *uint64_t v11 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 32;
        }
        while (v13);
        v8 += v7 & 0xFFFFFFFFFFFFFFE0;
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_21;
        }
      }
    }
    uint64_t v10 = v8;
    do
    {
      char v15 = *(unsigned char *)v9;
      std::string v9 = (long long *)((char *)v9 + 1);
      *v10++ = v15;
    }
    while (v9 != (long long *)((char *)v6 + v7));
LABEL_21:
    std::string __dst = v10;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v46, a1);
  unint64_t v16 = v47;
  if ((v47 & 0x80u) == 0) {
    unint64_t v17 = (char *)v46;
  }
  else {
    unint64_t v17 = (char *)v46[0];
  }
  if ((v47 & 0x80u) != 0) {
    unint64_t v16 = (unint64_t)v46[1];
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char *>,std::__wrap_iter<char *>,std::back_insert_iterator<std::vector<unsigned char>>,0>(v17, &v17[v16], (unint64_t *)&v33);
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  E5RT::GetPathsToMILWeights<MIL::IRProgram>((uint64_t)v41);
  if (v42)
  {
    uint64_t v18 = 0;
    unsigned int v19 = v42;
    do
    {
      ++v18;
      unsigned int v19 = (void *)*v19;
    }
    while (v19);
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((void **)&v43, (uint64_t)v44, v42, 0, v18);
  uint64_t v20 = v43;
  for (unint64_t i = v44; v20 != i; ++v20)
  {
    __vImage_Buffer src = 0;
    memset(&__p, 0, sizeof(__p));
    int v22 = SHIBYTE(v20->__r_.__value_.__r.__words[2]);
    BOOL v23 = v22 < 0;
    if (v22 >= 0) {
      int v24 = v20;
    }
    else {
      int v24 = (std::string *)v20->__r_.__value_.__r.__words[0];
    }
    std::string::size_type size = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    if (v23) {
      std::string::size_type size = v20->__r_.__value_.__l.__size_;
    }
    std::string::append[abi:ne180100]<char const*,0>(&__p, v24, (std::string *)((char *)v24 + size));
    E5RT::FileUpdateIdentifier::FileUpdateIdentifier((E5RT::FileUpdateIdentifier *)&v37, (const std::__fs::filesystem::path *)&__p);
    uint64_t v26 = std::hash<E5RT::FileUpdateIdentifier>::operator()((uint64_t)&v39, &v37);
    E5RT::FileUpdateIdentifier::~FileUpdateIdentifier((void **)&v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __vImage_Buffer src = v26;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v33, (char *)__dst, (char *)&__src, (char *)v41, 8);
  }
  std::vector<int> v27 = (void **)v42;
  if (v42)
  {
    do
    {
      std::vector<int> v32 = (void **)*v27;
      if (*((char *)v27 + 39) < 0) {
        operator delete(v27[2]);
      }
      operator delete(v27);
      std::vector<int> v27 = v32;
    }
    while (v32);
  }
  uint64_t v28 = v41[0];
  v41[0] = 0;
  if (v28) {
    operator delete(v28);
  }
  p_int data = (void **)&v43->__r_.__value_.__l.__data_;
  if (v43)
  {
    std::vector<int> v30 = (void **)&v44->__r_.__value_.__l.__data_;
    std::vector<int> v31 = v43;
    if (v44 != v43)
    {
      do
      {
        if (*((char *)v30 - 1) < 0) {
          operator delete(*(v30 - 3));
        }
        v30 -= 3;
      }
      while (v30 != p_data);
      std::vector<int> v31 = v43;
    }
    uint64_t v44 = (std::string *)p_data;
    operator delete(v31);
  }
  if ((char)v47 < 0)
  {
    operator delete(v46[0]);
    if (!a2) {
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (a2)
  {
LABEL_59:
    uint64_t v37 = std::hash<E5RT::E5CompilerOptions>::operator()((uint64_t)&v37, a2);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v33, (char *)__dst, (char *)&v37, v38, 8);
  }
LABEL_60:
  E5Common::StringUtils::ComputeHashString((uint64_t)&v33, a3);
  if (v33)
  {
    std::string __dst = v33;
    operator delete(v33);
  }
}

void sub_192191DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100]((uint64_t)&a27);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v27 - 112));
  if (*(char *)(v27 - 65) < 0) {
    operator delete(*(void **)(v27 - 88));
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void E5RT::E5BundleCacheKeyUtils::ToE5BundleCacheKey(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9301B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9301B20))
  {
    xmmword_1E9301B38 = 0uLL;
    unk_1E9301B48 = 0;
    __cxa_guard_release(&qword_1E9301B20);
  }
  if (qword_1E9301B18 != -1) {
    dispatch_once(&qword_1E9301B18, &unk_1EE3936D0);
  }
  if (byte_1E9301B4F >= 0) {
    unsigned __int8 v6 = &xmmword_1E9301B38;
  }
  else {
    unsigned __int8 v6 = (long long *)xmmword_1E9301B38;
  }
  if (byte_1E9301B4F >= 0) {
    size_t v7 = byte_1E9301B4F;
  }
  else {
    size_t v7 = *((void *)&xmmword_1E9301B38 + 1);
  }
  std::string __dst = 0;
  uint64_t v27 = 0;
  unint64_t v25 = 0;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = operator new(v7);
    unint64_t v25 = v8;
    uint64_t v27 = (char *)v8 + v7;
    if (v7 < 0x20)
    {
      std::string v9 = v6;
      uint64_t v10 = v8;
    }
    else
    {
      std::string v9 = v6;
      uint64_t v10 = v8;
      if ((unint64_t)((char *)v8 - (char *)v6) >= 0x20)
      {
        std::string v9 = (long long *)((char *)v6 + (v7 & 0xFFFFFFFFFFFFFFE0));
        uint64_t v10 = (char *)v8 + (v7 & 0xFFFFFFFFFFFFFFE0);
        uint64_t v11 = v8 + 1;
        long long v12 = v6 + 1;
        unint64_t v13 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v14 = *v12;
          *(v11 - 1) = *(v12 - 1);
          *uint64_t v11 = v14;
          v11 += 2;
          v12 += 2;
          v13 -= 32;
        }
        while (v13);
        if (v7 == (v7 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_20;
        }
      }
    }
    do
    {
      char v15 = *(unsigned char *)v9;
      std::string v9 = (long long *)((char *)v9 + 1);
      *v10++ = v15;
    }
    while (v9 != (long long *)((char *)v6 + v7));
LABEL_20:
    std::string __dst = v10;
  }
  E5RT::E5BundleCacheKeyUtils::GetAllAssociatedFiles(a1, (void **)&v33);
  unint64_t v16 = v33;
  unint64_t v17 = v34;
  if (v33 != v34)
  {
    do
    {
      __vImage_Buffer src = 0;
      memset(&__p, 0, sizeof(__p));
      int v18 = SHIBYTE(v16->__r_.__value_.__r.__words[2]);
      BOOL v19 = v18 < 0;
      if (v18 >= 0) {
        uint64_t v20 = v16;
      }
      else {
        uint64_t v20 = (std::string *)v16->__r_.__value_.__r.__words[0];
      }
      std::string::size_type size = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      if (v19) {
        std::string::size_type size = v16->__r_.__value_.__l.__size_;
      }
      std::string::append[abi:ne180100]<char const*,0>(&__p, v20, (std::string *)((char *)v20 + size));
      E5RT::FileUpdateIdentifier::FileUpdateIdentifier((E5RT::FileUpdateIdentifier *)&v29, (const std::__fs::filesystem::path *)&__p);
      uint64_t v22 = std::hash<E5RT::FileUpdateIdentifier>::operator()((uint64_t)&v31, &v29);
      E5RT::FileUpdateIdentifier::~FileUpdateIdentifier((void **)&v29);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __vImage_Buffer src = v22;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v25, (char *)__dst, (char *)&__src, (char *)&v33, 8);
      ++v16;
    }
    while (v16 != v17);
    unint64_t v16 = v33;
  }
  if (v16)
  {
    BOOL v23 = v34;
    int v24 = v16;
    if (v34 != v16)
    {
      do
      {
        if (SHIBYTE(v23[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23[-1].__r_.__value_.__l.__data_);
        }
        --v23;
      }
      while (v23 != v16);
      int v24 = v33;
    }
    uint64_t v34 = v16;
    operator delete(v24);
  }
  if (a2)
  {
    uint64_t v29 = std::hash<E5RT::E5CompilerOptions>::operator()((uint64_t)&v29, a2);
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v25, (char *)__dst, (char *)&v29, v30, 8);
  }
  E5Common::StringUtils::ComputeHashString((uint64_t)&v25, a3);
  if (v25)
  {
    std::string __dst = v25;
    operator delete(v25);
  }
}

void sub_192192100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = __dst - v11;
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      size_t v15 = (size_t)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
    }
    size_t v25 = v15 + v13;
    size_t v26 = v15;
    memcpy((void *)(v15 + v13), __src, a5);
    size_t v27 = v26;
    size_t v28 = v25;
    if (v11 != v5)
    {
      uint64_t v29 = v5;
      size_t v28 = v25;
      if (v13 < 0x20) {
        goto LABEL_47;
      }
      uint64_t v29 = v5;
      size_t v28 = v25;
      if ((unint64_t)&v11[-v27] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v29 = &v5[-(v13 & 0xFFFFFFFFFFFFFFE0)];
      size_t v28 = v25 - (v13 & 0xFFFFFFFFFFFFFFE0);
      std::vector<int> v30 = v5 - 16;
      char v31 = (char *)(v27 + v5 - 16 - v11);
      unint64_t v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v33 = *(_OWORD *)v30;
        *((_OWORD *)v31 - 1) = *((_OWORD *)v30 - 1);
        *(_OWORD *)char v31 = v33;
        v31 -= 32;
        v30 -= 32;
        v32 -= 32;
      }
      while (v32);
      if (v13 != (v13 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_47:
        do
        {
          char v34 = *--v29;
          *(unsigned char *)--size_t v28 = v34;
        }
        while (v29 != v11);
      }
      uint64_t v10 = *(char **)(a1 + 8);
    }
    uint64_t v35 = (char *)(v25 + a5);
    size_t v36 = v27 + v16;
    if (v10 != v5) {
      memmove(v35, v5, v10 - v5);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v35[v10 - v5];
    *(void *)(a1 + 16) = v36;
    if (v37) {
      operator delete(v37);
    }
    return (char *)v25;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
    uint64_t v21 = &__dst[a5];
    uint64_t v22 = &v10[-a5];
    BOOL v23 = v20;
    if ((unint64_t)v10 < a5) {
      goto LABEL_39;
    }
    goto LABEL_18;
  }
  int v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    uint64_t v21 = &v5[a5];
    uint64_t v22 = &v20[-a5];
    BOOL v23 = &v10[v19];
    if (&v20[-a5] >= v10) {
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      BOOL v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        uint64_t v38 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        BOOL v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        char v39 = v20 + 16;
        uint64_t v40 = (long long *)(v22 + 16);
        unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v42 = *v40;
          *(v39 - 1) = *(v40 - 1);
          _OWORD *v39 = v42;
          v39 += 2;
          v40 += 2;
          v41 -= 32;
        }
        while (v41);
        uint64_t v22 = v38;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      BOOL v23 = v20;
    }
    do
    {
      char v43 = *v22++;
      *v23++ = v43;
    }
    while (v22 != v10);
LABEL_39:
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(v21, v5, v20 - v21);
    }
    if (v18 != __src) {
      memmove(v5, __src, v18 - __src);
    }
  }
  return v5;
}

uint64_t E5Common::StringUtils::ComputeHashString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  CC_SHA256(*(const void **)a1, *(_DWORD *)(a1 + 8) - *(void *)a1, md);
  return E5Common::StringUtils::ConvertToHexString((E5Common::StringUtils *)md, (const unsigned __int8 *)0x20, a2);
}

uint64_t E5Common::StringUtils::ConvertToHexString@<X0>(E5Common::StringUtils *this@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  if (a2)
  {
    uint64_t v5 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      uint64_t v6 = v17;
      *(_DWORD *)((char *)v18 + *(void *)(v17 - 24)) = *(_DWORD *)((unsigned char *)v18 + *(void *)(v17 - 24)) & 0xFFFFFFB5 | 8;
      *(void *)((char *)&v18[2] + *(void *)(v6 - 24)) = 2;
      size_t v7 = (char *)&v18[-1] + *(void *)(v6 - 24);
      if (*((_DWORD *)v7 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)&v18[-1] + *(void *)(v6 - 24)));
        uint64_t v8 = std::locale::use_facet(v15, v5);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 32);
        std::locale::~locale(v15);
      }
      *((_DWORD *)v7 + 36) = 48;
      std::ostream::operator<<();
      this = (E5Common::StringUtils *)((char *)this + 1);
      --a2;
    }
    while (a2);
  }
  std::stringbuf::str();
  unsigned __int8 v9 = HIBYTE(v16);
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, (const std::string::value_type *)v15[0].__locale_, (std::string::size_type)v15[1].__locale_);
    unsigned __int8 v9 = HIBYTE(v16);
    if (SHIBYTE(v16) < 0)
    {
      locale = (unsigned __int8 *)v15[0].__locale_;
      unint64_t v10 = (unint64_t)v15[1].__locale_;
      if (!v15[1].__locale_) {
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v10 = HIBYTE(v16);
      locale = (unsigned __int8 *)v15;
      if (!HIBYTE(v16)) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)&v15[0].__locale_;
    *(void *)(a3 + 16) = v16;
    unint64_t v10 = v9;
    locale = (unsigned __int8 *)v15;
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v12 = (unsigned char *)a3;
  }
  else {
    uint64_t v12 = *(unsigned char **)a3;
  }
  do
  {
    *v12++ = __toupper(*locale++);
    --v10;
  }
  while (v10);
  unsigned __int8 v9 = HIBYTE(v16);
LABEL_16:
  if ((v9 & 0x80) != 0) {
    operator delete(v15[0].__locale_);
  }
  uint64_t v17 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v18[-1] + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v18[0] = MEMORY[0x1E4FBA470] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v20);
}

void sub_19219275C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if ((a15 & 0x80000000) == 0)
  {
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1921927EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

E5RT::FileUpdateIdentifier *E5RT::FileUpdateIdentifier::FileUpdateIdentifier(E5RT::FileUpdateIdentifier *this, const std::__fs::filesystem::path *a2)
{
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  uint64_t v4 = (std::string *)((char *)this + 16);
  *((void *)this + 4) = 0;
  std::__fs::filesystem::__status(a2, 0);
  if (LOBYTE(v18[0]) == 255 || LOBYTE(v18[0]) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "FileUpdateIdentifier");
    if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
    }
    else {
      std::string pn = a2->__pn_;
    }
    unint64_t v14 = std::string::insert(&pn, 0, "Input file path does not exist: ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v14->__r_.__value_.__r.__words[2];
    long long v20 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    E5RT::Status::Status(&v17, 1, &v20);
    E5RT::E5RTError::E5RTError(exception, v18, &v17);
  }
  memset(v18, 0, sizeof(v18));
  long long v20 = xmmword_192DBDF0C;
  std::string::size_type v21 = 0;
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = a2->__pn_;
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string pn = &pn;
  }
  else {
    p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  int v7 = getattrlist((const char *)p_pn, &v20, v18, 0x20uLL, 0x20u);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pn.__r_.__value_.__l.__data_);
  }
  if (v7 < 0)
  {
    unint64_t v10 = __error();
    std::to_string(&v17, *v10);
    uint64_t v11 = std::string::insert(&v17, 0, "getattrlist failed with error = ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    pn.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    unint64_t v13 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "FileUpdateIdentifier");
    E5RT::Status::Status(&v16, 2, &pn);
    E5RT::E5RTError::E5RTError(v13, &v17, &v16);
  }
  *((void *)this + 6) = *((void *)&v18[1] + 1);
  *((_DWORD *)this + 10) = DWORD1(v18[1]);
  *(_OWORD *)this = *(_OWORD *)((char *)v18 + 4);
  std::string::operator=(v4, &a2->__pn_);
  return this;
}

void sub_192192A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  E5RT::Status::~Status((E5RT::Status *)&a9);
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      if (a28 < 0) {
        operator delete(a23);
      }
      if (*(char *)(v29 + 39) < 0) {
        operator delete(*v28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

uint64_t std::hash<E5RT::FileUpdateIdentifier>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a2[2], a2[3]);
  }
  else {
    std::string __p = *(std::string *)(a2 + 2);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v10, (uint64_t *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v3 ^ (2 * v4) ^ (4 * v7) ^ (8 * *((unsigned int *)a2 + 10)) ^ (16 * a2[6]);
}

void E5RT::FileUpdateIdentifier::~FileUpdateIdentifier(void **this)
{
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void E5RT::E5BundleCacheKeyUtils::GetAllAssociatedFiles(std::string *a1@<X0>, void **a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__dst, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = *a1;
  }
  std::vector<std::string>::vector[abi:ne180100](a2, (uint64_t)&__dst, 1uLL);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  memset(&__dst, 0, sizeof(__dst));
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v5, (std::string *)((char *)v5 + size));
  char IsFileMIL = E5RT::IsFileMIL(&__dst, v6);
  char v8 = IsFileMIL;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v8) {
      return;
    }
  }
  else if (IsFileMIL)
  {
    return;
  }
  memset(&__dst, 0, sizeof(__dst));
  std::string::size_type v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v9 & 0x80u) == 0) {
    char v10 = a1;
  }
  else {
    char v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v9 & 0x80u) != 0) {
    std::string::size_type v9 = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v10, (std::string *)((char *)v10 + v9));
  char IsFileMILHash = E5RT::IsFileMILHash(&__dst, v11);
  char v13 = IsFileMILHash;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v13) {
      return;
    }
  }
  else if (IsFileMILHash)
  {
    return;
  }
  memset(&__dst, 0, sizeof(__dst));
  std::string::size_type v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v14 & 0x80u) == 0) {
    long long v15 = a1;
  }
  else {
    long long v15 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v14 & 0x80u) != 0) {
    std::string::size_type v14 = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&__dst, v15, (std::string *)((char *)v15 + v14));
  int IsFileEIR = E5RT::IsFileEIR(&__dst, v16);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (!IsFileEIR)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&__dst, "GetAllAssociatedFiles");
    std::string::basic_string[abi:ne180100]<0>(&__replacement, "Unknown input file type.");
    E5RT::Status::Status(v58, 1, &__replacement);
    E5RT::E5RTError::E5RTError(exception, &__dst, v58);
  }
  memset(&v56, 0, sizeof(v56));
  std::string::size_type v18 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v18 & 0x80u) == 0) {
    char v19 = a1;
  }
  else {
    char v19 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  if ((v18 & 0x80u) != 0) {
    std::string::size_type v18 = a1->__r_.__value_.__l.__size_;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v56.__pn_, v19, (std::string *)((char *)v19 + v18));
  memset(&__replacement, 0, sizeof(__replacement));
  std::string::append[abi:ne180100]<char const*,0>(&__replacement.__pn_, (std::string *)".shape", (std::string *)"");
  long long v20 = std::__fs::filesystem::path::replace_extension(&v56, &__replacement);
  if (SHIBYTE(v20->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__dst, v20->__pn_.__r_.__value_.__l.__data_, v20->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v21 = *(_OWORD *)&v20->__pn_.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v20->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v21;
  }
  uint64_t v22 = a2[1];
  if (v22 >= a2[2])
  {
    unint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string>(a2, (uint64_t)&__dst);
    int v25 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    a2[1] = v24;
    if (v25 < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v23 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    void v22[2] = *((void *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v22 = v23;
    memset(&__dst, 0, sizeof(__dst));
    a2[1] = v22 + 3;
  }
  if (SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
  }
  size_t v26 = (void *)MEMORY[0x1E4F1C9B8];
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v27 = (uint64_t *)a1;
  }
  else {
    size_t v27 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  size_t v28 = [NSString stringWithUTF8String:v27];
  uint64_t v29 = [v26 dataWithContentsOfFile:v28];

  if (v29)
  {
    id v61 = 0;
    std::vector<int> v30 = [MEMORY[0x1E4F28D90] JSONObjectWithData:v29 options:0 error:&v61];
    id v31 = v61;
    if (v31
      || !v30
      || ([v30 objectForKeyedSubscript:@"storage"],
          unint64_t v32 = objc_claimAutoreleasedReturnValue(),
          BOOL v33 = v32 == 0,
          v32,
          v33))
    {
      sub_1922F3A2C(&__p, a1);
      goto LABEL_84;
    }
    id v34 = [v30 objectForKeyedSubscript:@"storage"];
    uint64_t v35 = (const char *)[v34 UTF8String];
    size_t v36 = strlen(v35);
    if (v36 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v37 = v36;
    if (v36 >= 0x17)
    {
      uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v39 = v36 | 7;
      }
      uint64_t v40 = v39 + 1;
      p_replacement = operator new(v39 + 1);
      __replacement.__pn_.__r_.__value_.__l.__size_ = v37;
      __replacement.__pn_.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
      __replacement.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)p_replacement;
    }
    else
    {
      *((unsigned char *)&__replacement.__pn_.__r_.__value_.__s + 23) = v36;
      p_replacement = &__replacement;
      if (!v36)
      {
LABEL_61:
        p_replacement[v37] = 0;
        memset(&v57, 0, sizeof(v57));
        std::string::size_type v41 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v41 & 0x80u) == 0) {
          long long v42 = a1;
        }
        else {
          long long v42 = (std::string *)a1->__r_.__value_.__r.__words[0];
        }
        if ((v41 & 0x80u) != 0) {
          std::string::size_type v41 = a1->__r_.__value_.__l.__size_;
        }
        std::string::append[abi:ne180100]<char const*,0>(&v57.__pn_, v42, (std::string *)((char *)v42 + v41));
        std::__fs::filesystem::path::__string_view v43 = std::__fs::filesystem::path::__parent_path(&v57);
        if (v43.__size_ > 0x7FFFFFFFFFFFFFF7) {
          std::string::__throw_length_error[abi:ne180100]();
        }
        if (v43.__size_ >= 0x17)
        {
          std::basic_string_view<_CharT, _Traits>::size_type v45 = (v43.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43.__size_ | 7) != 0x17) {
            std::basic_string_view<_CharT, _Traits>::size_type v45 = v43.__size_ | 7;
          }
          std::basic_string_view<_CharT, _Traits>::size_type v46 = v45 + 1;
          p_dst = operator new(v45 + 1);
          __dst.__r_.__value_.__l.__size_ = v43.__size_;
          __dst.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          id v31 = 0;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v43.__size_;
          p_dst = &__dst;
          id v31 = 0;
          if (!v43.__size_)
          {
LABEL_74:
            p_dst[v43.__size_] = 0;
            std::string::size_type v59 = __dst.__r_.__value_.__r.__words[2];
            std::string::size_type v47 = HIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]);
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v48 = &__replacement;
            }
            else {
              uint64_t v48 = (std::__fs::filesystem::path *)__replacement.__pn_.__r_.__value_.__r.__words[0];
            }
            *(_OWORD *)long long v58 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            memset(&__dst, 0, sizeof(__dst));
            if ((__replacement.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v47 = __replacement.__pn_.__r_.__value_.__l.__size_;
            }
            std::string::append[abi:ne180100]<char const*,0>(&__dst, &v48->__pn_, (std::string *)((char *)&v48->__pn_ + v47));
            std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__dst, (uint64_t)v58, &__p);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v59) & 0x80000000) == 0)
              {
LABEL_81:
                if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_82;
                }
                goto LABEL_98;
              }
            }
            else if ((SHIBYTE(v59) & 0x80000000) == 0)
            {
              goto LABEL_81;
            }
            operator delete(v58[0]);
            if ((SHIBYTE(v57.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_82:
              if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_83:

LABEL_84:
                goto LABEL_85;
              }
LABEL_99:
              operator delete(__replacement.__pn_.__r_.__value_.__l.__data_);
              goto LABEL_83;
            }
LABEL_98:
            operator delete(v57.__pn_.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__replacement.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_83;
            }
            goto LABEL_99;
          }
        }
        memmove(p_dst, v43.__data_, v43.__size_);
        goto LABEL_74;
      }
    }
    memmove(p_replacement, v35, v37);
    goto LABEL_61;
  }
  sub_1922F3A2C(&__p, a1);
LABEL_85:

  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    std::string pn = __p.__pn_;
  }
  unint64_t v49 = a2[1];
  if (v49 < a2[2])
  {
    long long v50 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
    uint64_t v49[2] = *((void *)&pn.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v49 = v50;
    memset(&pn, 0, sizeof(pn));
    a2[1] = v49 + 3;
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_90;
    }
LABEL_94:
    if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_91;
    }
    return;
  }
  unint64_t v51 = std::vector<std::string>::__push_back_slow_path<std::string>(a2, (uint64_t)&pn);
  int v52 = SHIBYTE(pn.__r_.__value_.__r.__words[2]);
  a2[1] = v51;
  if (v52 < 0)
  {
    operator delete(pn.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_94;
    }
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_94;
  }
LABEL_90:
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__pn_.__r_.__value_.__r.__words[2]) < 0) {
LABEL_91:
  }
    operator delete(v56.__pn_.__r_.__value_.__l.__data_);
}

void sub_192193394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](v47);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](v47);
  _Unwind_Resume(a1);
}

void sub_1921935BC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1921935DCLL);
}

uint64_t E5RT::IsFileMIL(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = *this;
  }
  char v5 = 4;
  strcpy((char *)__p, ".mil");
  uint64_t v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v2;
    }
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_192193698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t E5RT::IsFileMILHash(std::string *this, const std::__fs::filesystem::path *a2)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v6, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string v6 = *this;
  }
  char v5 = 8;
  strcpy((char *)__p, ".milhash");
  uint64_t v2 = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)&v6, (unsigned __int8 *)__p);
  if (v5 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return v2;
    }
  }
  else if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    return v2;
  }
  operator delete(v6.__r_.__value_.__l.__data_);
  return v2;
}

void sub_192193790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void E5RT::Ops::Impl::AneInferenceOperationImplUsingAnefAPIs::PrepareOpForEncode(E5RT::ExecutionStreamOperationInternal **this)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (!E5RT::ExecutionStreamOperationInternal::GetOpState(this[1]))
  {
    unint64_t v99 = (E5RT::Ops::Impl::AneInferenceOperationImpl *)this;
    E5RT::ExecutionStreamOperationInternal::GetTraceIdentifier(this[1]);
    uint64_t v120 = 0x2B23800400000000;
    long long v121 = 0u;
    long long v122 = 0u;
    kdebug_trace();
    BYTE7(v117) = 4;
    strcpy((char *)&__p, "e5rt");
    uint64_t v2 = E5RT::GetE5RTLog((uint64_t)&__p);
    os_signpost_id_t v3 = os_signpost_id_generate(v2);

    if (SBYTE7(v117) < 0) {
      operator delete((void *)__p);
    }
    BYTE7(v117) = 4;
    strcpy((char *)&__p, "e5rt");
    uint64_t v4 = E5RT::GetE5RTLog((uint64_t)&__p);
    if (SBYTE7(v117) < 0)
    {
      operator delete((void *)__p);
      if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_10;
      }
    }
    else if (v3 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      goto LABEL_10;
    }
    if (os_signpost_enabled(v4))
    {
      LOWORD(__p) = 0;
      _os_signpost_emit_with_name_impl(&dword_1920CB000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "AneOpPrepareForEncode", (const char *)&unk_192F346DB, (uint8_t *)&__p, 2u);
    }
LABEL_10:

    v119[0] = MEMORY[0x1E4F143A8];
    v119[1] = 3221225472;
    v119[2] = sub_1922F7F44;
    v119[3] = &__block_descriptor_48_e5_v8__0l;
    v119[4] = v99;
    v119[5] = v3;
    uint64_t v93 = (void (**)(void))MEMORY[0x192FF2250](v119);
    uint64_t v5 = [MEMORY[0x1E4F4E030] sharedConnection];
    std::string v6 = (void *)*((void *)v99 + 20);
    *((void *)v99 + 20) = v5;

    uint64_t v7 = *((void *)v99 + 2);
    uint64_t SharedResourceManager = E5RT::SharedResourceManager::GetSharedResourceManager(v8);
    char v10 = (void *)((char *)v99 + 96);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v99 + 12, v7))
    {
      E5RT::Ops::Impl::AneInferenceOperationImpl::LoadAneModel(v99);
      uint64_t v18 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)v99 + 4));
      char v19 = (void *)*((void *)v99 + 21);
      *((void *)v99 + 21) = v18;

      long long v20 = v99;
      if (!*((void *)v99 + 10))
      {
LABEL_50:
        BOOL v33 = [*((id *)v20 + 21) modelAttributes];
        unint64_t v95 = [v33 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];

        if (!v95)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Cannot extract model description from ANE model. Possible ANE model load failure.");
          E5RT::Status::Status(&v113, 1, &__dst);
          E5RT::E5RTError::E5RTError(exception, &__p, &v113);
        }
        uint64_t v94 = [v95 objectForKeyedSubscript:*MEMORY[0x1E4F4E180]];
        id v34 = [v94 objectAtIndexedSubscript:0];
        uint64_t v35 = [v34 objectForKeyedSubscript:*MEMORY[0x1E4F4E168]];
        uint64_t v36 = [v35 unsignedIntValue];

        if ((unint64_t)[v94 count] >= 2)
        {
          std::string::size_type v37 = [v95 objectForKeyedSubscript:*MEMORY[0x1E4F4E170]];
          uint64_t v38 = v7 + 24;
          if (*(char *)(v7 + 47) < 0) {
            uint64_t v38 = *(void *)(v7 + 24);
          }
          uint64_t v39 = [NSString stringWithUTF8String:v38];
          uint64_t v40 = [v37 objectForKeyedSubscript:v39];

          if (!v40)
          {
            unint64_t v89 = __cxa_allocate_exception(0x18uLL);
            std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
            std::operator+<char>();
            uint64_t v90 = std::string::append(&v113, " not found in multi-procedure mach-o.");
            long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            int64_t v115 = v90->__r_.__value_.__r.__words[2];
            long long __dst = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            E5RT::Status::Status(&__s1, 1, &__dst);
            E5RT::E5RTError::E5RTError(v89, &__p, &__s1);
          }
          uint64_t v36 = [v40 unsignedIntValue];
        }
        uint64_t v41 = [NSNumber numberWithUnsignedInt:v36];
        long long v42 = (void *)*((void *)v99 + 23);
        *((void *)v99 + 23) = v41;

        uint64_t v92 = [v94 objectAtIndexedSubscript:v36];
        id v112 = [v92 objectForKeyedSubscript:*MEMORY[0x1E4F4E128]];
        unint64_t v97 = [v92 objectForKeyedSubscript:*MEMORY[0x1E4F4E150]];
        id v111 = [v95 objectForKeyedSubscript:*MEMORY[0x1E4F4E130]];
        uint64_t v100 = [v95 objectForKeyedSubscript:*MEMORY[0x1E4F4E158]];
        uint64_t InputPorts = E5RT::ExecutionStreamOperationInternal::GetInputPorts(*((E5RT::ExecutionStreamOperationInternal **)v99
                                                                           + 1));
        uint64_t OutputPorts = E5RT::ExecutionStreamOperationInternal::GetOutputPorts(*((E5RT::ExecutionStreamOperationInternal **)v99
                                                                             + 1));
        uint64_t v44 = E5RT::ExecutionStreamOperationInternal::GetInOutPorts(*((E5RT::ExecutionStreamOperationInternal **)v99 + 1));
        if ([v112 count] != *(void *)(v44 + 24) + *(void *)(InputPorts + 24))
        {
          uint64_t v86 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid number of inputs in mach-o.");
          E5RT::Status::Status(&v113, 2, &__dst);
          E5RT::E5RTError::E5RTError(v86, &__p, &v113);
        }
        if ([v97 count] != *(void *)(OutputPorts + 24))
        {
          char v87 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__p, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&__dst, "Invalid number of outputs in mach-o.");
          E5RT::Status::Status(&v113, 2, &__dst);
          E5RT::E5RTError::E5RTError(v87, &__p, &v113);
        }
        uint64_t v45 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(InputPorts + 24)];
        std::basic_string_view<_CharT, _Traits>::size_type v46 = (void *)*((void *)v99 + 43);
        *((void *)v99 + 43) = v45;

        uint64_t v47 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(InputPorts + 24)];
        uint64_t v48 = (void *)*((void *)v99 + 42);
        *((void *)v99 + 42) = v47;

        uint64_t v49 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(OutputPorts + 24)];
        long long v50 = (void *)*((void *)v99 + 45);
        *((void *)v99 + 45) = v49;

        uint64_t v51 = [MEMORY[0x1E4F1CA48] arrayWithCapacity:*(void *)(OutputPorts + 24)];
        int v52 = (void *)*((void *)v99 + 44);
        *((void *)v99 + 44) = v51;

        uint64_t v110 = 0;
        *(void *)&long long __p = &v112;
        *((void *)&__p + 1) = &v111;
        *(void *)&long long v117 = v99;
        *((void *)&v117 + 1) = &v110;
        sub_1922F8110((uint64_t)&__p, *(uint64_t **)(InputPorts + 16));
        sub_1922F8110((uint64_t)&__p, *(uint64_t **)(v44 + 16));
        if (v110 != *(void *)(v44 + 24) + *(void *)(InputPorts + 24))
        {
          uint64_t v88 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
          std::string::basic_string[abi:ne180100]<0>(&v113, "Unable to find ANE input index mappings for all op inputs.");
          E5RT::Status::Status(&__s1, 2, &v113);
          E5RT::E5RTError::E5RTError(v88, &__dst, &__s1);
        }
        unint64_t v53 = *(uint64_t **)(OutputPorts + 16);
        if (!v53)
        {
          if (!*(void *)(OutputPorts + 24)) {
            goto LABEL_123;
          }
          goto LABEL_127;
        }
        uint64_t v54 = 0;
LABEL_61:
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        obuint64_t j = v97;
        uint64_t v55 = [obj countByEnumeratingWithState:&v106 objects:v123 count:16];
        if (!v55) {
          goto LABEL_121;
        }
        std::__fs::filesystem::path v56 = (unsigned __int8 **)(v53 + 2);
        uint64_t v102 = *(void *)v107;
LABEL_63:
        uint64_t v101 = v55;
        uint64_t v57 = 0;
        while (1)
        {
          if (*(void *)v107 != v102) {
            objc_enumerationMutation(obj);
          }
          uint64_t v58 = [*(id *)(*((void *)&v106 + 1) + 8 * v57) integerValue];
          id v59 = [v100 objectAtIndexedSubscript:v58];
          long long v60 = (const char *)[v59 UTF8String];
          size_t v61 = strlen(v60);
          if (v61 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          size_t v62 = v61;
          if (v61 >= 0x17) {
            break;
          }
          HIBYTE(v115) = v61;
          p_dst = &__dst;
          if (v61) {
            goto LABEL_73;
          }
LABEL_74:
          *((unsigned char *)p_dst + v62) = 0;

          *((unsigned char *)&v113.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v113, "@output");
          E5Common::StringUtils::GetSubstringBeforeSuffix((uint64_t)&__dst, (uint64_t)&v113, &__s1);
          uint64_t v66 = (const void *)v53[5];
          if (v66) {
          else
          }
            int v67 = 0;
          uint64_t v68 = HIBYTE(v115);
          if (v115 >= 0) {
            uint64_t v69 = HIBYTE(v115);
          }
          else {
            uint64_t v69 = *((void *)&__dst + 1);
          }
          int v70 = *((char *)v53 + 39);
          if (v70 >= 0) {
            uint64_t v71 = *((unsigned __int8 *)v53 + 39);
          }
          else {
            uint64_t v71 = v53[3];
          }
          if (v69 == v71)
          {
            if (v70 >= 0) {
              uint64_t v72 = (unsigned __int8 *)(v53 + 2);
            }
            else {
              uint64_t v72 = *v56;
            }
            if (v115 < 0)
            {
              if (!memcmp((const void *)__dst, v72, *((size_t *)&__dst + 1))) {
                goto LABEL_110;
              }
            }
            else
            {
              if (!HIBYTE(v115)) {
                goto LABEL_110;
              }
              uint64_t v73 = (unsigned __int8 *)&__dst;
              while (*v73 == *v72)
              {
                ++v73;
                ++v72;
                if (!--v68) {
                  goto LABEL_110;
                }
              }
            }
          }
          uint64_t v74 = v105;
          if ((v105 & 0x80u) == 0) {
            size_t v75 = v105;
          }
          else {
            size_t v75 = v104;
          }
          if (v75 == v71)
          {
            if (v70 >= 0) {
              uint64_t v76 = (unsigned __int8 *)(v53 + 2);
            }
            else {
              uint64_t v76 = *v56;
            }
            if ((v105 & 0x80) != 0)
            {
              if (!memcmp(__s1, v76, v104)) {
                goto LABEL_110;
              }
            }
            else
            {
              if (!v105) {
                goto LABEL_110;
              }
              p_s1 = &__s1;
              while (*(unsigned __int8 *)p_s1 == *v76)
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                ++v76;
                if (!--v74) {
                  goto LABEL_110;
                }
              }
            }
          }
          Aliases = (void *)E5RT::IOPortPriv::GetAliases(v67);
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(Aliases, (uint64_t)&__dst)|| (unint64_t v79 = (void *)E5RT::IOPortPriv::GetAliases(v67), std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v79, (uint64_t)&__s1)))
          {
LABEL_110:
            uint64_t v80 = [NSNumber numberWithUnsignedInteger:v58];
            [*((id *)v99 + 45) setObject:v80 atIndexedSubscript:v54];

            int v81 = 0;
            ++v54;
            if (((char)v105 & 0x80000000) == 0) {
              goto LABEL_111;
            }
            goto LABEL_116;
          }
          int v81 = 1;
          if (((char)v105 & 0x80000000) == 0)
          {
LABEL_111:
            if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_112;
            }
            goto LABEL_117;
          }
LABEL_116:
          operator delete(__s1);
          if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_112:
            if (SHIBYTE(v115) < 0) {
              goto LABEL_118;
            }
            goto LABEL_113;
          }
LABEL_117:
          operator delete(v113.__r_.__value_.__l.__data_);
          if (SHIBYTE(v115) < 0)
          {
LABEL_118:
            operator delete((void *)__dst);
            if (!v81) {
              goto LABEL_121;
            }
            goto LABEL_119;
          }
LABEL_113:
          if (!v81) {
            goto LABEL_121;
          }
LABEL_119:
          if (++v57 == v101)
          {
            uint64_t v55 = [obj countByEnumeratingWithState:&v106 objects:v123 count:16];
            if (!v55)
            {
LABEL_121:

              unint64_t v53 = (uint64_t *)*v53;
              if (!v53)
              {
                if (v54 == *(void *)(OutputPorts + 24))
                {
LABEL_123:
                  uint64_t v82 = [MEMORY[0x1E4F1CA60] dictionary];
                  uint64_t v83 = (void *)*((void *)v99 + 46);
                  *((void *)v99 + 46) = v82;

                  *(void *)&long long v121 = [*((id *)v99 + 21) programHandle];
                  v93[2](v93);

                  if (E5RT::g_trace_analysis_level >= v120) {
                    kdebug_trace();
                  }
                  return;
                }
LABEL_127:
                int v84 = __cxa_allocate_exception(0x18uLL);
                std::string::basic_string[abi:ne180100]<0>(&__dst, "PrepareOpForEncode");
                std::string::basic_string[abi:ne180100]<0>(&v113, "Unable to find ANE output index mappings for all op outputs.");
                E5RT::Status::Status(&__s1, 2, &v113);
                E5RT::E5RTError::E5RTError(v84, &__dst, &__s1);
              }
              goto LABEL_61;
            }
            goto LABEL_63;
          }
        }
        uint64_t v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17) {
          uint64_t v64 = v61 | 7;
        }
        uint64_t v65 = v64 + 1;
        p_dst = (long long *)operator new(v64 + 1);
        *((void *)&__dst + 1) = v62;
        int64_t v115 = v65 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
LABEL_73:
        memmove(p_dst, v60, v62);
        goto LABEL_74;
      }
      long long __p = 0u;
      long long v117 = 0u;
      int v118 = 1065353216;
      *(void *)&long long __dst = v7 + 24;
      long long v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&__p, v7 + 24, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
      if (v21 + 5 != (uint64_t *)((char *)v99 + 56))
      {
        *((_DWORD *)v21 + 18) = *((_DWORD *)v99 + 22);
        std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>(v21 + 5, *((uint64_t **)v99 + 9), 0);
      }
      uint64_t v22 = E5Common::GetANEFAdaptedModel(*((void **)v99 + 21), (uint64_t)&__p);
      long long v23 = (void *)*((void *)v99 + 21);
      *((void *)v99 + 21) = v22;

      std::unordered_map<std::string,std::unordered_map<std::string,std::string>>::~unordered_map[abi:ne180100]((uint64_t)&__p);
LABEL_49:
      long long v20 = v99;
      goto LABEL_50;
    }
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v7);
    if (!v11) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v12 = *((unsigned __int8 *)v11 + 63);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *((unsigned __int8 *)v11 + 63);
    }
    else {
      uint64_t v13 = v11[6];
    }
    uint64_t v14 = *(unsigned __int8 *)(v7 + 23);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v7 + 8);
    }
    if (v13 != v14) {
      goto LABEL_31;
    }
    uint64_t v16 = (const void **)(v11 + 5);
    if (v15 >= 0) {
      std::string v17 = (unsigned __int8 *)v7;
    }
    else {
      std::string v17 = *(unsigned __int8 **)v7;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*v16, v17, v11[6]))
      {
LABEL_31:
        BYTE7(v117) = 0;
        LOBYTE(__p) = 0;
        E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (long long *)v7, 0, (uint64_t *)&__p, 0, (uint64_t *)&__dst);
        long long v24 = __dst;
        long long __dst = 0uLL;
        int v25 = (std::__shared_weak_count *)*((void *)v99 + 18);
        *(_OWORD *)((char *)v99 + 136) = v24;
        if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
        size_t v26 = (std::__shared_weak_count *)*((void *)&__dst + 1);
        if (*((void *)&__dst + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
        if (SBYTE7(v117) < 0) {
          operator delete((void *)__p);
        }
      }
    }
    else if (*((unsigned char *)v11 + 63))
    {
      while (*(unsigned __int8 *)v16 == *v17)
      {
        uint64_t v16 = (const void **)((char *)v16 + 1);
        ++v17;
        if (!--v12) {
          goto LABEL_39;
        }
      }
      goto LABEL_31;
    }
LABEL_39:
    size_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v10, v7);
    if (!v27) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    BYTE7(v117) = 0;
    LOBYTE(__p) = 0;
    E5RT::SharedResourceManager::GetOrCreateResource(SharedResourceManager, (long long *)(v27 + 5), 0, (uint64_t *)&__p, 0, (uint64_t *)&__dst);
    long long v28 = __dst;
    long long __dst = 0uLL;
    uint64_t v29 = (std::__shared_weak_count *)*((void *)v99 + 5);
    *((_OWORD *)v99 + 2) = v28;
    if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    std::vector<int> v30 = (std::__shared_weak_count *)*((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
    if (SBYTE7(v117) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v31 = E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(*((const void **)v99 + 4));
    unint64_t v32 = (void *)*((void *)v99 + 21);
    *((void *)v99 + 21) = v31;

    goto LABEL_49;
  }
}

void sub_192194760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void (**a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  E5RT::ScopedTrace::~ScopedTrace((E5RT::ScopedTrace *)&a62);
  _Unwind_Resume(a1);
}

void sub_192194B10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,void *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a42 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a48 & 0x80000000) == 0)
    {
LABEL_5:

      JUMPOUT(0x192194AD4);
    }
LABEL_4:
    operator delete(a43);
    goto LABEL_5;
  }
  operator delete(a37);
  if ((a48 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_4;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetOutputPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 56;
}

uint64_t E5RT::IOPortPriv::GetAliases(E5RT::ExecutionStreamOperationInternal **this)
{
  return E5RT::ExecutionStreamOperationInternal::GetOutputPorts(this[1]);
}

uint64_t E5Common::StringUtils::GetSubstringBeforeSuffix@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = E5Common::StringUtils::StringEndsWithSuffix((uint64_t *)a1, (unsigned __int8 *)a2);
  if (!result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  size_t v7 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if ((v7 & 0x80u) == 0)
  {
    std::string::size_type v9 = (const void *)a1;
  }
  else
  {
    size_t v7 = *(void *)(a1 + 8);
    std::string::size_type v9 = *(const void **)a1;
  }
  if (v7 >= v7 - v8) {
    size_t v10 = v7 - v8;
  }
  else {
    size_t v10 = v7;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v10 >= 0x17)
  {
    uint64_t v11 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v11 = v10 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((unsigned char *)a3 + 23) = v10;
    if (!v10) {
      goto LABEL_19;
    }
  }
  uint64_t result = (uint64_t)memmove(a3, v9, v10);
LABEL_19:
  *((unsigned char *)a3 + v10) = 0;
  return result;
}

uint64_t E5Common::StringUtils::StringEndsWithSuffix(uint64_t *a1, unsigned __int8 *a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  unint64_t v3 = a1[1];
  if ((v2 & 0x80u) == 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  size_t v5 = a2[23];
  if ((v5 & 0x80u) != 0) {
    size_t v5 = *((void *)a2 + 1);
  }
  size_t v6 = v4 - v5;
  if (v4 >= v5)
  {
    std::string::size_type v9 = a1;
    if ((v2 & 0x80) != 0)
    {
      if (v3 >= v6)
      {
        std::string::size_type v9 = (uint64_t *)*a1;
        if (v3 - v6 >= v5) {
          size_t v11 = v5;
        }
        else {
          size_t v11 = v3 - v6;
        }
        if (v11 < 0x7FFFFFFFFFFFFFF8)
        {
LABEL_14:
          if (v11 >= 0x17)
          {
            uint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v11 | 7) != 0x17) {
              uint64_t v13 = v11 | 7;
            }
            uint64_t v14 = v13 + 1;
            p_dst = (const void **)operator new(v13 + 1);
            __uint64_t n = v11;
            int64_t v31 = v14 | 0x8000000000000000;
            long long __dst = p_dst;
          }
          else
          {
            HIBYTE(v31) = v11;
            p_dst = (const void **)&__dst;
            if (!v11)
            {
LABEL_21:
              BOOL v7 = 0;
              *((unsigned char *)p_dst + v11) = 0;
              if (v31 >= 0) {
                size_t v15 = HIBYTE(v31);
              }
              else {
                size_t v15 = __n;
              }
              uint64_t v16 = a2[23];
              int v17 = (char)v16;
              if ((v16 & 0x80u) != 0) {
                uint64_t v16 = *((void *)a2 + 1);
              }
              if (v15 == v16)
              {
                if (v17 >= 0) {
                  uint64_t v18 = a2;
                }
                else {
                  uint64_t v18 = *(unsigned __int8 **)a2;
                }
                if (v31 < 0)
                {
                  size_t v27 = __dst;
                  BOOL v7 = memcmp(__dst, v18, __n) == 0;
                  goto LABEL_47;
                }
                if (!HIBYTE(v31)) {
                  return 1;
                }
                uint64_t v19 = HIBYTE(v31) - 1;
                long long v20 = (const void **)&__dst;
                do
                {
                  int v22 = *(unsigned __int8 *)v20;
                  long long v20 = (const void **)((char *)v20 + 1);
                  int v21 = v22;
                  int v24 = *v18++;
                  int v23 = v24;
                  BOOL v26 = v19-- != 0;
                  BOOL v7 = v21 == v23;
                }
                while (v21 == v23 && v26);
              }
              if ((v31 & 0x8000000000000000) == 0) {
                return v7;
              }
              size_t v27 = __dst;
LABEL_47:
              operator delete(v27);
              return v7;
            }
          }
          memmove(p_dst, (char *)v9 + v6, v11);
          goto LABEL_21;
        }
LABEL_45:
        std::string::__throw_length_error[abi:ne180100]();
      }
    }
    else if (v6 <= v2)
    {
      size_t v10 = v2 - v6;
      if (v10 >= v5) {
        size_t v11 = v5;
      }
      else {
        size_t v11 = v10;
      }
      if (v11 < 0x7FFFFFFFFFFFFFF8) {
        goto LABEL_14;
      }
      goto LABEL_45;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  return 0;
}

uint64_t E5RT::ExecutionStreamOperationInternal::GetInOutPorts(E5RT::ExecutionStreamOperationInternal *this)
{
  return (uint64_t)this + 96;
}

void Espresso::map_const_get<std::unordered_map<std::string,std::string>>(std::string *a1, void *a2, uint64_t a3, uint64_t a4)
{
  size_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a2, a3);
  if (v6)
  {
    if ((*((char *)v6 + 63) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 5);
      a1->__r_.__value_.__r.__words[2] = v6[7];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
      return;
    }
    uint64_t v8 = (const std::string::value_type *)v6[5];
    std::string::size_type v9 = v6[6];
  }
  else
  {
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a4 + 16);
      return;
    }
    uint64_t v8 = *(const std::string::value_type **)a4;
    std::string::size_type v9 = *(void *)(a4 + 8);
  }

  std::string::__init_copy_ctor_external(a1, v8, v9);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(void *a1, uint64_t a2)
{
  size_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        size_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v8 == v21)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v8 == v17)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  unsigned char *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  size_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        size_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

id E5RT::SharedResource::GetResourceHandle<_ANEModel * {__strong}>(const void *a1)
{
  if (!v1) {
    __cxa_bad_cast();
  }
  size_t v2 = (void *)v1[4];

  return v2;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<char *>,std::__wrap_iter<char *>,std::back_insert_iterator<std::vector<unsigned char>>,0>(char *a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    unint64_t v6 = (unsigned char *)a3[1];
    while (1)
    {
      char v8 = *v4;
      unint64_t v9 = a3[2];
      if ((unint64_t)v6 >= v9) {
        break;
      }
      *unint64_t v6 = v8;
      uint64_t v7 = (uint64_t)(v6 + 1);
LABEL_4:
      a3[1] = v7;
      ++v4;
      unint64_t v6 = (unsigned char *)v7;
      if (v4 == a2) {
        return a2;
      }
    }
    unint64_t v10 = *a3;
    unint64_t v11 = (unint64_t)&v6[-*a3];
    unint64_t v12 = v11 + 1;
    if ((uint64_t)(v11 + 1) < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = v9 - v10;
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14)
    {
      uint64_t v15 = operator new(v14);
      uint64_t v16 = (char *)v15 + v11;
      *((unsigned char *)v15 + v11) = v8;
      uint64_t v7 = (uint64_t)v15 + v11 + 1;
      if (v6 == (unsigned char *)v10)
      {
LABEL_24:
        *a3 = (unint64_t)v16;
        a3[1] = v7;
        a3[2] = (unint64_t)v15 + v14;
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = &v6[-*a3];
      *(unsigned char *)unint64_t v11 = v8;
      uint64_t v7 = v11 + 1;
      if (v6 == (unsigned char *)v10) {
        goto LABEL_24;
      }
    }
    if (v11 < 8
      || (char *)v15 + v11 + v10 - (void)v6 > (char *)v15 + v11 - 1
      || v10 > (unint64_t)(v6 - 1)
      || v10 - (unint64_t)v15 < 0x20)
    {
      unint64_t v17 = v6;
      goto LABEL_21;
    }
    if (v11 >= 0x20)
    {
      unint64_t v20 = v11 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v21 = (char *)v15 + v11 - 16;
      uint64_t v22 = (long long *)(v6 - 16);
      unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v20) {
        goto LABEL_23;
      }
      if ((v11 & 0x18) == 0)
      {
        v16 -= v20;
        unint64_t v17 = &v6[-v20];
LABEL_21:
        uint64_t v18 = v16 - 1;
        do
        {
          char v19 = *--v17;
          *v18-- = v19;
        }
        while (v17 != (unsigned char *)v10);
LABEL_23:
        unint64_t v6 = (unsigned char *)*a3;
        uint64_t v16 = (char *)v15;
        goto LABEL_24;
      }
    }
    else
    {
      unint64_t v20 = 0;
    }
    unint64_t v17 = &v6[-(v11 & 0xFFFFFFFFFFFFFFF8)];
    v16 -= v11 & 0xFFFFFFFFFFFFFFF8;
    char v25 = &v6[-v20 - v10 - 8 + (void)v15];
    BOOL v26 = (uint64_t *)&v6[-v20 - 8];
    unint64_t v27 = v20 - (v11 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v28 = *v26--;
      *v25-- = v28;
      v27 += 8;
    }
    while (v27);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  return v4;
}

uint64_t E5RT::GetPathsToMILWeights<MIL::IRProgram>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  v2[0] = &unk_1EE39B1A8;
  v2[1] = a1;
  unint64_t v3 = v2;
  MIL::Util::Walk();
  uint64_t result = (uint64_t)v3;
  if (v3 == v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void sub_192195500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<BOOL ()(MIL::IROperation const&)>::~function((uint64_t *)va);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(void **a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  unint64_t v11 = a1[2];
  unint64_t v12 = (long long *)a1[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)v12) >> 3)) >= a5)
  {
    unint64_t v19 = a5 + 1;
    unint64_t v20 = a3;
    do
    {
      unint64_t v20 = (void *)*v20;
      --v19;
    }
    while (v19 > 1);
    int64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - v7) >> 3);
    if (v21 >= a5)
    {
      unint64_t v27 = (char *)a1[1];
      goto LABEL_48;
    }
    if ((uint64_t)v12 - v7 < 1)
    {
      unint64_t v20 = a3;
      if (a3 != a4)
      {
LABEL_19:
        uint64_t v23 = 0;
        long long v24 = v20;
        do
        {
          BOOL v26 = (std::string *)((char *)v12 + v23);
          if (*((char *)v24 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)v24[2], v24[3]);
          }
          else
          {
            long long v25 = *((_OWORD *)v24 + 1);
            v26->__r_.__value_.__r.__words[2] = v24[4];
            *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v25;
          }
          long long v24 = (void *)*v24;
          v23 += 24;
        }
        while (v24 != a4);
        unint64_t v27 = (char *)v12 + v23;
        a1[1] = (char *)v12 + v23;
        if (v21 < 1) {
          return v7;
        }
LABEL_48:
        uint64_t v41 = v7 + 24 * a5;
        long long v42 = (long long *)&v27[-24 * a5];
        std::__fs::filesystem::path::__string_view v43 = v27;
        if (v42 < v12)
        {
          std::__fs::filesystem::path::__string_view v43 = v27;
          do
          {
            long long v44 = *v42;
            *((void *)v43 + 2) = *((void *)v42 + 2);
            *(_OWORD *)std::__fs::filesystem::path::__string_view v43 = v44;
            v43 += 24;
            *((void *)v42 + 1) = 0;
            *((void *)v42 + 2) = 0;
            *(void *)long long v42 = 0;
            long long v42 = (long long *)((char *)v42 + 24);
          }
          while (v42 < v12);
        }
        a1[1] = v43;
        if (v27 != (char *)v41)
        {
          uint64_t v45 = v27 - 24;
          uint64_t v46 = 8 * ((uint64_t)&v27[-v41] >> 3);
          do
          {
            if (v45[23] < 0) {
              operator delete(*(void **)v45);
            }
            uint64_t v47 = (long long *)(v7 + v46 - 24);
            long long v48 = *v47;
            *((void *)v45 + 2) = *(void *)(v7 + v46 - 8);
            *(_OWORD *)uint64_t v45 = v48;
            v45 -= 24;
            *(unsigned char *)(v7 + v46 - 1) = 0;
            *(unsigned char *)uint64_t v47 = 0;
            v46 -= 24;
          }
          while (v46);
        }
        if (v20 != v9)
        {
          uint64_t v49 = (std::string *)v7;
          do
          {
            std::string::operator=(v49, (const std::string *)(v9 + 2));
            unint64_t v9 = (void *)*v9;
            ++v49;
          }
          while (v9 != v20);
        }
        return v7;
      }
    }
    else
    {
      unint64_t v22 = v21 + 1;
      unint64_t v20 = a3;
      do
      {
        unint64_t v20 = (void *)*v20;
        --v22;
      }
      while (v22 > 1);
      if (v20 != a4) {
        goto LABEL_19;
      }
    }
    unint64_t v27 = (char *)a1[1];
    a1[1] = v12;
    if (v21 >= 1) {
      goto LABEL_48;
    }
    return v7;
  }
  unint64_t v13 = a5 - 0x5555555555555555 * (((char *)v12 - v5) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v5) >> 3);
  uint64_t v15 = 2 * v14;
  if (2 * v14 <= v13) {
    uint64_t v15 = v13;
  }
  if (v14 >= 0x555555555555555) {
    unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16)
  {
    if (v16 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = (char *)operator new(24 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  uint64_t v28 = (std::string *)&v17[24 * v6];
  uint64_t v51 = v28;
  int v52 = &v17[24 * v16];
  uint64_t v29 = a5;
  std::vector<int> v30 = &v28[v29];
  do
  {
    if (*((char *)v9 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(v28, (const std::string::value_type *)v9[2], v9[3]);
    }
    else
    {
      long long v31 = *((_OWORD *)v9 + 1);
      v28->__r_.__value_.__r.__words[2] = v9[4];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v31;
    }
    ++v28;
    unint64_t v9 = (void *)*v9;
    --v29;
  }
  while (v29 * 24);
  unint64_t v32 = v51;
  BOOL v33 = *a1;
  id v34 = v51;
  if (*a1 != (void *)v7)
  {
    uint64_t v35 = v51;
    uint64_t v36 = v7;
    do
    {
      id v34 = v35 - 1;
      long long v37 = *(_OWORD *)(v36 - 24);
      v35[-1].__r_.__value_.__r.__words[2] = *(void *)(v36 - 8);
      *(_OWORD *)&v35[-1].__r_.__value_.__l.__data_ = v37;
      *(void *)(v36 - 16) = 0;
      *(void *)(v36 - 8) = 0;
      *(void *)(v36 - 24) = 0;
      --v35;
      v36 -= 24;
    }
    while ((void *)v36 != v33);
  }
  uint64_t v38 = a1[1];
  if (v38 != (void *)v7)
  {
    do
    {
      long long v39 = *(_OWORD *)v7;
      v30->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v39;
      ++v30;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      v7 += 24;
    }
    while ((void *)v7 != v38);
    uint64_t v7 = (uint64_t)a1[1];
  }
  uint64_t v40 = *a1;
  *a1 = v34;
  a1[1] = v30;
  a1[2] = v52;
  while ((void *)v7 != v40)
  {
    if (*(char *)(v7 - 1) < 0) {
      operator delete(*(void **)(v7 - 24));
    }
    v7 -= 24;
  }
  if (v40) {
    operator delete(v40);
  }
  return (uint64_t)v32;
}

void sub_19219595C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void Espresso::fuse_nonlinearities(Espresso *this, Espresso::net *a2)
{
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v59, this);
  std::__fs::filesystem::path v56 = 0;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  int v55 = 0;
  uint64_t v3 = *((void *)this + 4);
  if (*((void *)this + 5) == v3) {
    goto LABEL_81;
  }
  long long __p = 0;
  unint64_t v48 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = v62;
  uint64_t v46 = (char *)this + 96;
  do
  {
    char v8 = (uint64_t *)(v3 + 16 * v6);
    uint64_t v10 = *v8;
    unint64_t v9 = (std::__shared_weak_count *)v8[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v11 = *(const void **)(v10 + 64);
    if (v11)
    {
      if (v12)
      {
        unint64_t v13 = *(std::__shared_weak_count **)(v10 + 72);
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v14 = *(_DWORD *)(*(uint64_t (**)(void *))(*(void *)v12 + 384))(v12);
        if (Espresso::is_kernel_generating_output(*(Espresso **)(v10 + 64), v15)) {
          goto LABEL_39;
        }
        unint64_t v16 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, v5, &v55);
        if ((char *)v16[6] - (char *)v16[5] != 4) {
          goto LABEL_39;
        }
        int v54 = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v7, v5, &v55)[5];
        int v17 = v54;
        uint64_t v18 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v61, v54, &v54);
        if ((char *)v18[6] - (char *)v18[5] != 4)
        {
          uint64_t v28 = v4;
          goto LABEL_38;
        }
        unint64_t v19 = (uint64_t *)(*((void *)this + 4) + 16 * v17);
        uint64_t v21 = *v19;
        unint64_t v20 = (std::__shared_weak_count *)v19[1];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v22 = *(const void **)(v21 + 64);
        if (!v22)
        {
          uint64_t v28 = v4;
          if (!v20) {
            goto LABEL_38;
          }
          goto LABEL_37;
        }
        uint64_t v49 = v21;
        long long v50 = v7;
        uint64_t v51 = v20;
        if (v23)
        {
          uint64_t v24 = v49;
          long long v25 = *(std::__shared_weak_count **)(v49 + 72);
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v26 = v23;
          if (!*(_DWORD *)((*(uint64_t (**)(void))(*(void *)v23 + 384))() + 24)
            && !*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v26 + 384))(v26) + 28)
            && *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v26 + 384))(v26) + 60) == -1)
          {
            if (v14 == 1)
            {
              unint64_t v27 = (_DWORD *)((*(uint64_t (**)(void *))(*(void *)v26 + 384))(v26) + 28);
LABEL_50:
              _DWORD *v27 = 1;
              if (!v25)
              {
LABEL_52:
                unint64_t v32 = *(char **)(v24 + 64);
                uint64_t v33 = *(void *)(v10 + 64);
                id v34 = operator new(8uLL);
                void *v34 = v33;
                v53[1] = (uint64_t)(v34 + 1);
                v53[2] = (uint64_t)(v34 + 1);
                v53[0] = (uint64_t)v34;
                Espresso::merge_kernel_attributes(v32, v53);
                operator delete(v34);
                uint64_t v7 = v50;
                if ((unint64_t)v4 >= v48)
                {
                  uint64_t v35 = v4 - __p;
                  unint64_t v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 62) {
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  }
                  if ((uint64_t)(v48 - (void)__p) >> 1 > v36) {
                    unint64_t v36 = (uint64_t)(v48 - (void)__p) >> 1;
                  }
                  if (v48 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v37 = v36;
                  }
                  if (v37) {
                    unint64_t v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  long long v39 = (int *)(v37 + 4 * v35);
                  int *v39 = v5;
                  uint64_t v28 = v39 + 1;
                  while (v4 != __p)
                  {
                    int v40 = *--v4;
                    *--long long v39 = v40;
                  }
                  std::__fs::filesystem::path v56 = v39;
                  uint64_t v57 = v28;
                  unint64_t v48 = v37 + 4 * v38;
                  unint64_t v58 = v48;
                  if (__p) {
                    operator delete(__p);
                  }
                  long long __p = v39;
                }
                else
                {
                  int *v4 = v5;
                  uint64_t v28 = v4 + 1;
                }
                uint64_t v57 = v28;
                int v5 = v55;
                v53[0] = v55;
                uint64_t v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v46, v55, v53);
                uint64_t v52 = v54;
                long long v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)v46, v54, &v52);
                if (v42 != v41) {
                  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v42 + 3), (std::string *)v41[3], (std::string *)v41[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41[4] - v41[3]) >> 3));
                }
                goto LABEL_36;
              }
LABEL_51:
              nitro::nitro_function::nitro_function(v25);
              goto LABEL_52;
            }
            if (!v14)
            {
              unint64_t v27 = (_DWORD *)((*(uint64_t (**)(void *))(*(void *)v26 + 384))(v26) + 24);
              goto LABEL_50;
            }
          }
LABEL_33:
          if (v25) {
            nitro::nitro_function::nitro_function(v25);
          }
          uint64_t v28 = v4;
          uint64_t v7 = v50;
LABEL_36:
          unint64_t v20 = v51;
          if (v51) {
LABEL_37:
          }
            nitro::nitro_function::nitro_function(v20);
LABEL_38:
          uint64_t v4 = v28;
LABEL_39:
          if (v13) {
            nitro::nitro_function::nitro_function(v13);
          }
          goto LABEL_41;
        }
        if (!v29)
        {
          uint64_t v28 = v4;
          goto LABEL_36;
        }
        std::vector<int> v30 = v29;
        long long v25 = *(std::__shared_weak_count **)(v49 + 72);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (*(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v29 + 384))(v29) + 12)
          || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v30 + 384))(v30) + 16)
          || *(_DWORD *)((*(uint64_t (**)(void *))(*(void *)v30 + 384))(v30) + 52) != -1)
        {
          goto LABEL_33;
        }
        if (v14 == 1)
        {
          long long v31 = (_DWORD *)((*(uint64_t (**)(void *))(*(void *)v30 + 384))(v30) + 16);
        }
        else
        {
          if (v14) {
            goto LABEL_33;
          }
          long long v31 = (_DWORD *)((*(uint64_t (**)(void *))(*(void *)v30 + 384))(v30) + 12);
        }
        _DWORD *v31 = 1;
        uint64_t v24 = v49;
        if (!v25) {
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
LABEL_41:
    if (v9) {
      nitro::nitro_function::nitro_function(v9);
    }
    int v55 = ++v5;
    uint64_t v6 = v5;
    uint64_t v3 = *((void *)this + 4);
  }
  while (v5 < (unint64_t)((*((void *)this + 5) - v3) >> 4));
  std::__fs::filesystem::path::__string_view v43 = v56;
  if (v56 != v4)
  {
    int v44 = 0;
    uint64_t v45 = v56;
    do
    {
      Espresso::net::remove_layer(this, v44 + *v45++);
      --v44;
    }
    while (v45 != v4);
    uint64_t v4 = v43;
  }
  if (v4)
  {
    uint64_t v57 = v4;
    operator delete(v4);
  }
LABEL_81:
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v62[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v61[1]);
  if (v60) {
    nitro::nitro_function::nitro_function(v60);
  }
}

void sub_1921960BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  if (a14)
  {
    nitro::nitro_function::nitro_function(a14);
    if (!v25)
    {
LABEL_3:
      if (!v24) {
        goto LABEL_8;
      }
      goto LABEL_4;
    }
  }
  else if (!v25)
  {
    goto LABEL_3;
  }
  nitro::nitro_function::nitro_function(v25);
  if (!v24)
  {
LABEL_8:
    if (__p) {
      operator delete(__p);
    }
    Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a24);
    _Unwind_Resume(a1);
  }
LABEL_4:
  nitro::nitro_function::nitro_function(v24);
  goto LABEL_8;
}

void ___ZN8Espresso17ANECompilerEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(*a2 + 8) != v2) {
    return;
  }
  uint64_t v4 = (void *)a2[2];
  if (v4[1] != v2) {
    return;
  }
  {
    int v5 = (std::__shared_weak_count *)a2[1];
    if (!v5) {
      return;
    }
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_14;
  }
  int v5 = (std::__shared_weak_count *)a2[3];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*v4 + 384))(v4);
  if (*(_DWORD *)v6 == 6 && fabsf(*(float *)(v6 + 4) + -1.0) < 0.000001 && fabsf(*(float *)(v6 + 8)) < 0.000001) {
    Espresso::fuse_vertical_state<Espresso::base_kernel,Espresso::generic_activation_kernel>::remove_second_layer((uint64_t)a2);
  }
  if (v5)
  {
LABEL_14:
    nitro::nitro_function::nitro_function(v5);
  }
}

void sub_1921962C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::activation_params,Espresso::abstract_kernel_with_named_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::get_params(uint64_t a1)
{
  return a1 + 304;
}

BOOL Espresso::is_kernel_generating_output(Espresso *this, const Espresso::base_kernel *a2)
{
  uint64_t v2 = (void *)((char *)this + 240);
  std::string::basic_string[abi:ne180100]<0>(__p, "is_output");
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  uint64_t v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return *((_DWORD *)v4 + 10) != 0;
    }
  }
  else if (v3)
  {
    return *((_DWORD *)v4 + 10) != 0;
  }
  return 0;
}

void sub_192196364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_insert_casts::run_on_network(Espresso::pass_insert_casts *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (const void *)*((void *)this + 1);
  if (!v4
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("pass_implicit_casting: options are not set");
  }
  uint64_t v95 = a3;
  char v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v106 = v7[2];
  Espresso::net::_tag_inputs_and_outputs((Espresso::net *)a2);
  Espresso::net::get_producers_of_blobs((Espresso::net *)a2, (uint64_t)v110);
  long long v103 = v8;
  v115[0] = 0;
  unint64_t v9 = a2[4];
  if (a2[5] != v9)
  {
    unint64_t v10 = 0;
    size_t v104 = a2 + 44;
    uint64_t v98 = a2 + 7;
    unint64_t v99 = a2 + 12;
    unint64_t v97 = "Couldn't find top names for layer %zu";
    do
    {
      unint64_t v11 = &v9[2 * v10];
      if (!*v11) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
      }
      if (*(_DWORD *)(*v11 + 8) == v106)
      {
        if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v99, v10))goto LABEL_161; {
        if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v98, v10))
        }
        {
          unint64_t v97 = "Couldn't find bottom names for layer %zu";
LABEL_161:
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>(v97, v10);
        }
        *(void *)&long long v107 = v115;
        unint64_t v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v98, (unint64_t *)v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&v107);
        uint64_t v13 = v12[3];
        if (v12[4] == v13)
        {
          int v16 = -1;
        }
        else
        {
          uint64_t v14 = 0;
          unint64_t v15 = 0;
          int v16 = -1;
          do
          {
            int v17 = (void *)(v13 + v14);
            int v18 = *(_DWORD *)(*v11 + 12);
            LODWORD(v122) = *(_DWORD *)(*v11 + 8);
            LODWORD(v113[0]) = v18;
            if (std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v110, (uint64_t)v17))
            {
              uint64_t v19 = a2[4][2
                        * std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v110, (uint64_t)v17)[5]];
              int v20 = *(_DWORD *)(v19 + 8);
              LODWORD(v19) = *(_DWORD *)(v19 + 12);
              LODWORD(v122) = v20;
              LODWORD(v113[0]) = v19;
            }
            Espresso::net::resolve_blob_numerical_properties((uint64_t)a2, v17, (int *)&v122, v113, (uint64_t)&v107);
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[45], v17))
            {
              (*(void (**)(long long *__return_ptr))(**(void **)(*v11 + 64) + 24))(&v126);
              if ((void)v126)
              {
                if (*(unsigned char *)(v126 + 8)) {
                  DWORD2(v107) = *(_DWORD *)(v126 + 12);
                }
                if (*(unsigned char *)(v126 + 16))
                {
                  long long v107 = *(_OWORD *)(v126 + 24);
                  if (&v107 != (long long *)(v126 + 24)) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(char **)(v126 + 40), *(void *)(v126 + 48), (uint64_t)(*(void *)(v126 + 48) - *(void *)(v126 + 40)) >> 2);
                  }
                }
              }
              *(void *)&long long v119 = v17;
              uint64_t v21 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, v17, (uint64_t)&std::piecewise_construct, (long long **)&v119);
              *(_OWORD *)(v21 + 56) = v107;
              if (v21 + 56 != (char *)&v107) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v21 + 72, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2);
              }
              if (*((void *)&v126 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v126 + 1));
              }
            }
            if (v16 < 0) {
              int v16 = (int)v113[0];
            }
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            ++v15;
            uint64_t v13 = v12[3];
            v14 += 24;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v12[4] - v13) >> 3) > v15);
        }
        *(void *)&long long v107 = v115;
        unint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v99, (unint64_t *)v115, (uint64_t)&std::piecewise_construct, (uint64_t **)&v107);
        uint64_t v23 = v22[3];
        uint64_t v24 = v22[4];
        if (v24 != v23)
        {
          uint64_t v25 = 0;
          unint64_t v26 = 0;
          do
          {
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[45], (void *)(v23 + v25)))
            {
              Espresso::net::resolve_blob_numerical_properties((uint64_t)a2, (void *)(v23 + v25), (int *)(*v11 + 8), (_DWORD *)(*v11 + 12), (uint64_t)&v107);
              (*(void (**)(long long *__return_ptr))(**(void **)(*v11 + 64) + 24))(&v126);
              if ((void)v126)
              {
                if (*(unsigned char *)(v126 + 8)) {
                  DWORD2(v107) = *(_DWORD *)(v126 + 12);
                }
                if (*(unsigned char *)(v126 + 16))
                {
                  long long v107 = *(_OWORD *)(v126 + 24);
                  if (&v107 != (long long *)(v126 + 24)) {
                    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, *(char **)(v126 + 40), *(void *)(v126 + 48), (uint64_t)(*(void *)(v126 + 48) - *(void *)(v126 + 40)) >> 2);
                  }
                }
              }
              else if (v16 >= 1)
              {
                DWORD2(v107) = v16;
              }
              *(void *)&long long v119 = v23 + v25;
              unint64_t v27 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v104, (void *)(v23 + v25), (uint64_t)&std::piecewise_construct, (long long **)&v119);
              *(_OWORD *)(v27 + 56) = v107;
              if (v27 + 56 != (char *)&v107) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v27 + 72, *(char **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 2);
              }
              if (*((void *)&v126 + 1)) {
                nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v126 + 1));
              }
              if (*(void *)__p)
              {
                *(void *)&__p[8] = *(void *)__p;
                operator delete(*(void **)__p);
              }
              uint64_t v23 = v22[3];
              uint64_t v24 = v22[4];
            }
            ++v26;
            v25 += 24;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) > v26);
        }
      }
      unint64_t v10 = (unint64_t)++v115[0];
      unint64_t v9 = a2[4];
    }
    while (v115[0] < (long long *)(((char *)a2[5] - (char *)v9) >> 4));
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v111[0]);
  uint64_t v28 = v110[0];
  v110[0] = 0;
  if (v28) {
    operator delete(v28);
  }
  uint64_t v29 = v103;
  std::vector<int> v30 = std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(a2 + 50, v106, &v106);
  long long v122 = 0;
  long long v123 = 0;
  uint64_t v124 = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  int v128 = 1065353216;
  long long v119 = 0u;
  long long v120 = 0u;
  int v121 = 1065353216;
  v115[1] = &v119;
  uint64_t v116 = a2;
  long long v117 = &v126;
  int v118 = &v122;
  uint64_t v101 = v30 + 5;
  unint64_t v114 = 0;
  v115[0] = (long long *)(v30 + 5);
  unint64_t v32 = a2[4];
  long long v31 = a2[5];
  if (v31 != v32)
  {
    unint64_t v33 = 0;
    do
    {
      id v34 = &v32[2 * v33];
      if (!*v34) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
      }
      if (*(_DWORD *)(*v34 + 8) == v106)
      {
        memset(v111, 0, sizeof(v111));
        *(_OWORD *)uint64_t v110 = 0u;
        if (*((unsigned char *)a2[2] + 127)) {
          Espresso::base_kernel::get_runtime_type_config(*(void **)(*v34 + 64), v112, (uint64_t *)v113, &v107);
        }
        else {
          (*(void (**)(long long *__return_ptr))(**(void **)(*v34 + 64) + 312))(&v107);
        }
        std::vector<Espresso::blob_numerical_properties>::__vdeallocate((uint64_t *)v110);
        *(_OWORD *)uint64_t v110 = v107;
        v111[0] = *(void **)__p;
        *(void *)long long __p = 0;
        long long v107 = 0uLL;
        std::vector<Espresso::blob_numerical_properties>::__vdeallocate((uint64_t *)&v111[1]);
        *(_OWORD *)&v111[1] = *(_OWORD *)&__p[8];
        v111[3] = v109;
        *(void *)&__p[16] = 0;
        long long v109 = 0;
        *(void *)&__p[8] = 0;
        long long v125 = (void **)&__p[8];
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v125);
        long long v125 = (void **)&v107;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v125);
        *(void *)&long long v107 = &v114;
        uint64_t v35 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a2 + 7), &v114, (uint64_t)&std::piecewise_construct, (uint64_t **)&v107);
        *(void *)&long long v107 = &v114;
        unint64_t v36 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(a2 + 12), &v114, (uint64_t)&std::piecewise_construct, (uint64_t **)&v107);
        unsigned __int8 v105 = v35 + 3;
        unint64_t v37 = v36 + 3;
        uint64_t v38 = *v34;
        long long v39 = *(const void **)(*v34 + 64);
        if (v39)
        {
          if (v40)
          {
            uint64_t v41 = v40;
            long long v42 = *(std::__shared_weak_count **)(v38 + 72);
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v96 = v42;
            std::__fs::filesystem::path::__string_view v43 = (int *)(*(uint64_t (**)(void *))(*(void *)v40 + 320))(v40);
            uint64_t v44 = v35[3];
            if (v35[4] != v44)
            {
              uint64_t v45 = 0;
              unint64_t v46 = 0;
              int v47 = *v43;
              unsigned int v48 = (*v43 > 0xD) | (0xFFCu >> *v43);
              do
              {
                *(void *)&long long v107 = v44 + v45;
                unsigned int v49 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v101, (void *)(v44 + v45), (uint64_t)&std::piecewise_construct, (long long **)&v107)+ 16);
                uint64_t v50 = (*(uint64_t (**)(void *))(*(void *)v41 + 320))(v41);
                if ((((v49 > 0xE) | (0x3003u >> v49)) & v48 & 1) == 0 || !*(_DWORD *)(v50 + 4))
                {
                  uint64_t v51 = *v105;
                  *(void *)&long long v107 = *v37 + v45;
                  uint64_t v52 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v119, (unsigned __int8 *)v107, (long long **)&v107);
                  LODWORD(v107) = v49;
                  unint64_t v53 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v52 + 40), v49, &v107);
                  std::string::operator=(v53 + 1, (const std::string *)(v51 + v45));
                  uint64_t v54 = *v37;
                  *(void *)&long long v107 = *v105 + v45;
                  int v55 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v119, (unsigned __int8 *)v107, (long long **)&v107);
                  LODWORD(v107) = v47;
                  std::__fs::filesystem::path v56 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v55 + 40), v47, &v107);
                  std::string::operator=(v56 + 1, (const std::string *)(v54 + v45));
                }
                ++v46;
                uint64_t v44 = v35[3];
                v45 += 24;
              }
              while (v46 < 0xAAAAAAAAAAAAAAABLL * ((v35[4] - v44) >> 3));
            }
            uint64_t v29 = v103;
            if (v96) {
              nitro::nitro_function::nitro_function(v96);
            }
          }
        }
        *(void *)&long long v107 = &v111[1];
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
        *(void *)&long long v107 = v110;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
        v110[0] = v112;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
        v110[0] = v113;
        std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
        unint64_t v33 = v114;
        unint64_t v32 = a2[4];
        long long v31 = a2[5];
      }
      unint64_t v114 = ++v33;
    }
    while (v33 < ((char *)v31 - (char *)v32) >> 4);
  }
  Espresso::net::insert_layers((uint64_t)a2, &v122);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::~__hash_table((uint64_t)&v119);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v126);
  v110[0] = &v122;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
  long long v107 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  Espresso::net::get_consumers_of_blobs(a2, &v107, (uint64_t)v110);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v107);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v122, (uint64_t)a2);
  *((void *)&v119 + 1) = 0;
  *(void *)&long long v120 = 0;
  *(void *)&long long v119 = (char *)&v119 + 8;
  long long v107 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_DWORD *)&__p[16] = 1065353216;
  v112[0] = 0;
  uint64_t v57 = a2[4];
  unint64_t v58 = a2[5];
  if (v58 == v57)
  {
    uint64_t v57 = a2[5];
    goto LABEL_144;
  }
  unint64_t v59 = 0;
  uint64_t v102 = (char *)(a2 + 12);
  do
  {
    long long v60 = &v57[2 * v59];
    uint64_t v61 = *v60;
    if (!*v60) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Network has nullptr layer");
    }
    size_t v62 = (void *)(v61 + 40);
    int v63 = *(char *)(v61 + 63);
    if (v63 < 0)
    {
      if (*(void *)(v61 + 48) != 4) {
        goto LABEL_132;
      }
      size_t v62 = (void *)*v62;
    }
    else if (v63 != 4)
    {
      goto LABEL_132;
    }
    if (*(_DWORD *)v62 == 1953718627 && *(_DWORD *)(v61 + 8) == v106)
    {
      *(void *)&long long v126 = v112;
      uint64_t v64 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v102, (unint64_t *)v112, (uint64_t)&std::piecewise_construct, (uint64_t **)&v126);
      if (v64[4] != v64[3])
      {
        uint64_t v65 = *(void *)(*v60 + 64);
        std::string::basic_string[abi:ne180100]<0>(&v126, "is_output");
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v65 + 240), (unsigned __int8 *)&v126))
        {
          uint64_t v66 = *(void *)(*v60 + 64);
          std::string::basic_string[abi:ne180100]<0>(v115, "is_output");
          v113[0] = (long long *)v115;
          BOOL v67 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v66 + 240, (unsigned __int8 *)v115, (uint64_t)&std::piecewise_construct, v113)+ 10) != 0;
          if (SHIBYTE(v116) < 0) {
            operator delete(v115[0]);
          }
        }
        else
        {
          BOOL v67 = 0;
        }
        if (SBYTE7(v127) < 0)
        {
          operator delete((void *)v126);
          if (v67) {
            goto LABEL_132;
          }
        }
        else if (v67)
        {
          goto LABEL_132;
        }
        *(void *)&long long v126 = v112;
        uint64_t v68 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v102, (unint64_t *)v112, (uint64_t)&std::piecewise_construct, (uint64_t **)&v126);
        uint64_t v69 = (unsigned __int8 *)v68[3];
        int v70 = (unsigned __int8 *)v68[4];
        if (v69 == v70)
        {
          char v100 = 0;
          goto LABEL_116;
        }
        char v100 = 0;
        char v71 = 0;
        uint64_t v72 = v122;
        while (1)
        {
          Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v126, (uint64_t)v69);
          if (v72
            && (v115[0] = (long long *)((char *)&v126 + 8),
                (unint64_t)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v72 + 1), (uint64_t)&v126 + 8, (uint64_t)&std::piecewise_construct, v115)[5] > 1)|| (uint64_t v73 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v110, v69)) != 0&& *((void *)v73 + 6) != *((void *)v73 + 5))
          {
            char v71 = 1;
          }
          else
          {
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[33], (void *)&v126 + 1)|| (v115[0] = (long long *)((char *)&v126 + 8), !std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 32, (void *)&v126 + 1, v115)[56]))
            {
              char v74 = 0;
              goto LABEL_107;
            }
            char v100 = 1;
          }
          char v74 = 1;
LABEL_107:
          if (SHIBYTE(v127) < 0) {
            operator delete(*((void **)&v126 + 1));
          }
          v69 += 24;
          if (v69 == v70) {
            char v75 = 1;
          }
          else {
            char v75 = v74;
          }
          if (v75)
          {
            if (v71) {
              break;
            }
LABEL_116:
            if (v100) {
              break;
            }
            uint64_t v76 = *(void *)(*v60 + 64);
            std::string::basic_string[abi:ne180100]<0>(&v126, "basic_block_head");
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v76 + 240), (unsigned __int8 *)&v126))
            {
              uint64_t v77 = *(void *)(*v60 + 64);
              std::string::basic_string[abi:ne180100]<0>(v115, "basic_block_head");
              v113[0] = (long long *)v115;
              BOOL v78 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v77 + 240, (unsigned __int8 *)v115, (uint64_t)&std::piecewise_construct, v113)+ 10) != 0;
              if (SHIBYTE(v116) < 0) {
                operator delete(v115[0]);
              }
            }
            else
            {
              BOOL v78 = 0;
            }
            if (SBYTE7(v127) < 0)
            {
              operator delete((void *)v126);
              if (!v78)
              {
LABEL_131:
                std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v119, v112[0], v112[0]);
                break;
              }
            }
            else if (!v78)
            {
              goto LABEL_131;
            }
            if (v112[0] + 1 >= (unint64_t)(((char *)a2[5] - (char *)a2[4]) >> 4)) {
              break;
            }
            uint64_t v79 = *(void *)(*v60 + 64);
            std::string::basic_string[abi:ne180100]<0>(&v126, "basic_block_head");
            v115[0] = &v126;
            LODWORD(v79) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v79 + 240, (unsigned __int8 *)&v126, (uint64_t)&std::piecewise_construct, v115)+ 10);
            uint64_t v80 = *(void *)(a2[4][2 * v112[0] + 2] + 64);
            std::string::basic_string[abi:ne180100]<0>(v115, "basic_block_head");
            v113[0] = (long long *)v115;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v80 + 240, (unsigned __int8 *)v115, (uint64_t)&std::piecewise_construct, v113)+ 10) = v79;
            if (SHIBYTE(v116) < 0) {
              operator delete(v115[0]);
            }
            if (SBYTE7(v127) < 0) {
              operator delete((void *)v126);
            }
            uint64_t v81 = a2[4][2 * v112[0] + 2];
            *(void *)&long long v126 = *v60 + 16;
            uint64_t v82 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v107, v126, (uint64_t)&std::piecewise_construct, (long long **)&v126);
            std::string::operator=((std::string *)(v82 + 5), (const std::string *)(v81 + 16));
            goto LABEL_131;
          }
        }
      }
    }
LABEL_132:
    unint64_t v59 = v112[0] + 1;
    v112[0] = v59;
    uint64_t v57 = a2[4];
    unint64_t v58 = a2[5];
  }
  while (v59 < ((char *)v58 - (char *)v57) >> 4);
  uint64_t v83 = (_OWORD *)v119;
  if ((long long *)v119 == (long long *)((char *)&v119 + 8))
  {
    uint64_t v29 = v103;
  }
  else
  {
    int v84 = 0;
    uint64_t v29 = v103;
    do
    {
      Espresso::net::remove_layer((Espresso::net *)a2, *((_DWORD *)v83 + 8) - v84);
      char v85 = (void *)*((void *)v83 + 1);
      if (v85)
      {
        do
        {
          uint64_t v86 = v85;
          char v85 = (void *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          uint64_t v86 = (_OWORD *)*((void *)v83 + 2);
          BOOL v87 = *(void *)v86 == (void)v83;
          uint64_t v83 = v86;
        }
        while (!v87);
      }
      ++v84;
      uint64_t v83 = v86;
    }
    while (v86 != (long long *)((char *)&v119 + 8));
    uint64_t v57 = a2[4];
    unint64_t v58 = a2[5];
  }
LABEL_144:
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v107);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v119, *((void **)&v119 + 1));
  if (v123) {
    nitro::nitro_function::nitro_function(v123);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((void *)v111[0]);
  uint64_t v88 = v110[0];
  v110[0] = 0;
  if (v88) {
    operator delete(v88);
  }
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)a2);
  Espresso::correct_jump_labels_after_ordering_change((Espresso *)a2, v89);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(v110, (uint64_t)a2);
  uint64_t v90 = (float *)v110[0];
  if (!v110[0])
  {
    long long v91 = operator new(0x48uLL);
    v91[1] = 0;
    v91[2] = 0;
    *long long v91 = &unk_1EE388458;
    uint64_t v90 = (float *)(v91 + 3);
    v91[8] = 0;
    v91[3] = &unk_1EE35E0A0;
    *((_OWORD *)v91 + 2) = 0u;
    *((_OWORD *)v91 + 3) = 0u;
    *((_DWORD *)v91 + 16) = 1065353216;
    uint64_t v92 = (std::__shared_weak_count *)v110[1];
    v110[0] = v91 + 3;
    v110[1] = v91;
    if (v92) {
      nitro::nitro_function::nitro_function(v92);
    }
  }
  std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>(v90 + 2, v106, v106);
  uint64_t v94 = v110[0];
  uint64_t v93 = (std::__shared_weak_count *)v110[1];
  if (v110[1])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v110[1] + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
    nitro::nitro_function::nitro_function(v93);
    *(unsigned char *)uint64_t v95 = 1;
    *(void *)(v95 + 8) = v94;
    *(void *)(v95 + 16) = v93;
    nitro::nitro_function::nitro_function(v93);
    if (v29) {
      goto LABEL_153;
    }
  }
  else
  {
    *(unsigned char *)uint64_t v95 = 1;
    *(void *)(v95 + 8) = v94;
    *(void *)(v95 + 16) = 0;
    if (v29) {
LABEL_153:
    }
      nitro::nitro_function::nitro_function(v29);
  }
}

void sub_192197400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (a43 < 0) {
    operator delete(a38);
  }
  if (*(char *)(v56 - 121) < 0) {
    operator delete(a56);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a19);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v56 - 224, a47);
  if (a53) {
    nitro::nitro_function::nitro_function(a53);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::~__hash_table((uint64_t)&a25);
  if (a16) {
    nitro::nitro_function::nitro_function(a16);
  }
  _Unwind_Resume(a1);
}

void std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void anonymous namespace'::update_runtime_types_and_insert_casts(Espresso::net &,Espresso::platform const&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  uint64_t v5 = *a3;
  if (a3[1] == *a3) {
    return;
  }
  uint64_t v6 = a4;
  char v7 = a3;
  unint64_t v9 = 0;
  int v108 = a2 - 1;
  do
  {
    uint64_t v10 = v5 + 24 * v9;
    int v133 = *(_DWORD *)(*v6 + 40 * v9 + 8);
    Espresso::ssa_blob_name::ssa_blob_name((uint64_t)v130, v10);
    unint64_t v11 = *(uint64_t ***)a1;
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(*(void *)a1 + 8), v131)|| (v126 = v131, unint64_t v12 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, v131, (uint64_t)&std::piecewise_construct, (long long **)&v126), *((_DWORD *)v12 + 16) == v133))
    {
      uint64_t v13 = *(void *)(a1 + 8);
      long long v126 = (void **)v10;
      uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)v10, (long long **)&v126);
      unint64_t v15 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v14 + 40), v133, &v133);
      std::string::operator=(v15 + 1, (const std::string *)v10);
      uint64_t v16 = *v6;
      int v17 = *(uint64_t ***)a1;
      long long v126 = (void **)v10;
      int v18 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (void *)v10, (uint64_t)&std::piecewise_construct, (long long **)&v126);
      uint64_t v19 = (char *)(v16 + 40 * v9);
      *(_OWORD *)(v18 + 56) = *(_OWORD *)v19;
      if (v18 + 56 != v19) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18 + 72, *(char **)(v16 + 40 * v9 + 16), *(void *)(v16 + 40 * v9 + 24), (uint64_t)(*(void *)(v16 + 40 * v9 + 24) - *(void *)(v16 + 40 * v9 + 16)) >> 2);
      }
      goto LABEL_126;
    }
    int v20 = *(uint64_t ***)a1;
    long long v126 = v131;
    int v129 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, v131, (uint64_t)&std::piecewise_construct, (long long **)&v126)+ 16);
    uint64_t v21 = *(void **)(a1 + 8);
    unint64_t v22 = std::__string_hash<char>::operator()[abi:ne180100](v10);
    int8x8_t v23 = (int8x8_t)v21[1];
    if (!*(void *)&v23) {
      goto LABEL_23;
    }
    unint64_t v24 = v22;
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23);
    v25.i16[0] = vaddlv_u8(v25);
    unint64_t v26 = v25.u32[0];
    if (v25.u32[0] > 1uLL)
    {
      unint64_t v27 = v22;
      if (v22 >= *(void *)&v23) {
        unint64_t v27 = v22 % *(void *)&v23;
      }
    }
    else
    {
      unint64_t v27 = (*(void *)&v23 - 1) & v22;
    }
    uint64_t v28 = *(unsigned __int8 ***)(*v21 + 8 * v27);
    if (!v28) {
      goto LABEL_23;
    }
    uint64_t v29 = *v28;
    if (!*v28) {
      goto LABEL_23;
    }
    while (1)
    {
      unint64_t v30 = *((void *)v29 + 1);
      if (v24 == v30) {
        break;
      }
      if (v26 > 1)
      {
        if (v30 >= *(void *)&v23) {
          v30 %= *(void *)&v23;
        }
      }
      else
      {
        v30 &= *(void *)&v23 - 1;
      }
      if (v30 != v27) {
        goto LABEL_23;
      }
LABEL_22:
      uint64_t v29 = *(unsigned __int8 **)v29;
      if (!v29) {
        goto LABEL_23;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100](v29 + 16, (unsigned __int8 *)v10)) {
      goto LABEL_22;
    }
    uint64_t v100 = *(void *)(a1 + 8);
    long long v126 = (void **)v10;
    uint64_t v101 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v100, (unsigned __int8 *)v10, (long long **)&v126);
    unint64_t v102 = *((void *)v101 + 6);
    if (v102)
    {
      uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
      v103.i16[0] = vaddlv_u8(v103);
      if (v103.u32[0] > 1uLL)
      {
        unint64_t v104 = v133;
        if (v102 <= v133) {
          unint64_t v104 = v133 % v102;
        }
      }
      else
      {
        unint64_t v104 = (v102 - 1) & v133;
      }
      unsigned __int8 v105 = *(uint64_t ***)(*((void *)v101 + 5) + 8 * v104);
      if (v105)
      {
        for (uint64_t i = *v105; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v107 = i[1];
          if (v107 == v133)
          {
            if (*((_DWORD *)i + 4) == v133) {
              goto LABEL_125;
            }
          }
          else
          {
            if (v103.u32[0] > 1uLL)
            {
              if (v107 >= v102) {
                v107 %= v102;
              }
            }
            else
            {
              v107 &= v102 - 1;
            }
            if (v107 != v104) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    uint64_t v31 = *(void *)(*(void *)(a1 + 16) + 32) + 16 * a2;
    LODWORD(v126) = 0;
    long long v127 = 0u;
    memset(v128, 0, sizeof(v128));
    if (a5)
    {
      if (*(char *)(v10 + 23) >= 0) {
        size_t v32 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        size_t v32 = *(void *)(v10 + 8);
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v121, v32 + 18);
      if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v33 = &v121;
      }
      else {
        unint64_t v33 = (std::string *)v121.__r_.__value_.__r.__words[0];
      }
      if (v32)
      {
        if (*(char *)(v10 + 23) >= 0) {
          id v34 = (const std::string::value_type *)v10;
        }
        else {
          id v34 = *(const std::string::value_type **)v10;
        }
        memmove(v33, v34, v32);
      }
      strcpy((char *)v33 + v32, "__@generated_as__@");
      std::to_string(&v124, *(_DWORD *)(*a4 + 40 * v9 + 8));
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v124;
      }
      else {
        uint64_t v35 = (std::string *)v124.__r_.__value_.__r.__words[0];
      }
      if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v124.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v124.__r_.__value_.__l.__size_;
      }
      unint64_t v37 = std::string::append(&v121, (const std::string::value_type *)v35, size);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v121.__r_.__value_.__l.__data_);
      }
      uint64_t v39 = *(void *)v31;
      uint64_t v40 = *(void *)(*(void *)v31 + 64);
      uint64_t v42 = *(void *)(v40 + 8);
      uint64_t v41 = *(std::__shared_weak_count **)(v40 + 16);
      uint64_t v119 = v42;
      long long v120 = v41;
      if (v41)
      {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v39 = *(void *)v31;
      }
      int v43 = *(_DWORD *)(v39 + 8);
      int v44 = *(_DWORD *)(v39 + 12);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v118, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else {
        std::string v118 = __str;
      }
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v56 = *(_OWORD *)v10;
        v117.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
        *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v56;
      }
      LODWORD(v126) = v121.__r_.__value_.__l.__data_;
      long long v57 = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
      unint64_t v58 = (std::__shared_weak_count *)*((void *)&v127 + 1);
      long long v127 = v57;
      if (v58) {
        nitro::nitro_function::nitro_function(v58);
      }
      std::vector<std::string>::__vdeallocate(v128);
      v128[0] = v122;
      memset(&v122, 0, sizeof(v122));
      std::vector<std::string>::__vdeallocate(&v128[1]);
      v128[1] = v123;
      memset(&v123, 0, sizeof(v123));
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
      if (v121.__r_.__value_.__r.__words[2]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2]);
      }
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v117.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (v120) {
        nitro::nitro_function::nitro_function(v120);
      }
      LODWORD(v126) = a2;
      uint64_t v59 = *(void *)(a1 + 8);
      v121.__r_.__value_.__r.__words[0] = v10;
      long long v60 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, (unsigned __int8 *)v10, (long long **)&v121);
      uint64_t v61 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v60 + 40), v133, &v133);
      std::string::operator=(v61 + 1, &__str);
      uint64_t v62 = *(void *)(a1 + 8);
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      int v63 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v62, (unsigned __int8 *)&__str, (long long **)&v121);
      uint64_t v64 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v63 + 40), v129, &v129);
      std::string::operator=(v64 + 1, (const std::string *)v10);
      uint64_t v65 = *a4;
      uint64_t v66 = *(uint64_t ***)a1;
      v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      BOOL v67 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v66, &__str, (uint64_t)&std::piecewise_construct, (long long **)&v121);
      uint64_t v68 = (char *)(v65 + 40 * v9);
      *(_OWORD *)(v67 + 56) = *(_OWORD *)v68;
      if (v67 + 56 != v68) {
        goto LABEL_117;
      }
      goto LABEL_118;
    }
    if (*(char *)(v10 + 23) >= 0) {
      size_t v45 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      size_t v45 = *(void *)(v10 + 8);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v121, v45 + 15);
    if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v46 = &v121;
    }
    else {
      unint64_t v46 = (std::string *)v121.__r_.__value_.__r.__words[0];
    }
    if (v45)
    {
      if (*(char *)(v10 + 23) >= 0) {
        int v47 = (const std::string::value_type *)v10;
      }
      else {
        int v47 = *(const std::string::value_type **)v10;
      }
      memmove(v46, v47, v45);
    }
    strcpy((char *)v46 + v45, "__@casted_to__@");
    int v48 = v133;
    std::to_string(&v124, v133);
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v49 = &v124;
    }
    else {
      unsigned int v49 = (std::string *)v124.__r_.__value_.__r.__words[0];
    }
    if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v124.__r_.__value_.__l.__size_;
    }
    uint64_t v51 = std::string::append(&v121, (const std::string::value_type *)v49, v50);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v124.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v121.__r_.__value_.__l.__data_);
    }
    uint64_t v53 = *(void *)(*(void *)v31 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v121, "basic_block_head");
    if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v53 + 240), (unsigned __int8 *)&v121))
    {
      uint64_t v54 = *(void *)(*(void *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v124, "basic_block_head");
      int v134 = &v124;
      BOOL v55 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v54 + 240, (unsigned __int8 *)&v124, (uint64_t)&std::piecewise_construct, (long long **)&v134)+ 10) != 0;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      BOOL v55 = 0;
    }
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v121.__r_.__value_.__l.__data_);
      if (!v55) {
        goto LABEL_97;
      }
LABEL_92:
      uint64_t v69 = *(void *)(*(void *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v121, "basic_block_head");
      v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
      int v70 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v69 + 240, (unsigned __int8 *)&v121, (uint64_t)&std::piecewise_construct, (long long **)&v124)+ 10);
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v121.__r_.__value_.__l.__data_);
      }
      uint64_t v71 = *(void *)(*(void *)v31 + 64);
      std::string::basic_string[abi:ne180100]<0>(&v121, "basic_block_head");
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((void *)(v71 + 240), (unsigned __int8 *)&v121);
      uint64_t v72 = a4;
      if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v121.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v55) {
        goto LABEL_92;
      }
LABEL_97:
      int v70 = 0;
      uint64_t v72 = a4;
    }
    uint64_t v73 = *(void *)v31;
    uint64_t v74 = *(void *)(*(void *)v31 + 64);
    uint64_t v76 = *(void *)(v74 + 8);
    char v75 = *(std::__shared_weak_count **)(v74 + 16);
    uint64_t v115 = v76;
    uint64_t v116 = v75;
    if (v75)
    {
      atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v73 = *(void *)v31;
    }
    int v77 = *(_DWORD *)(v73 + 8);
    int v78 = *(_DWORD *)(v73 + 12);
    if (*(char *)(v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v79 = *(_OWORD *)v10;
      v114.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v79;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v113, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string v113 = __str;
    }
    LODWORD(v126) = v121.__r_.__value_.__l.__data_;
    long long v80 = *(_OWORD *)&v121.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v121.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v81 = (std::__shared_weak_count *)*((void *)&v127 + 1);
    long long v127 = v80;
    if (v81) {
      nitro::nitro_function::nitro_function(v81);
    }
    std::vector<std::string>::__vdeallocate(v128);
    v128[0] = v122;
    memset(&v122, 0, sizeof(v122));
    std::vector<std::string>::__vdeallocate(&v128[1]);
    v128[1] = v123;
    memset(&v123, 0, sizeof(v123));
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    v124.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v124);
    if (v121.__r_.__value_.__r.__words[2]) {
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v121.__r_.__value_.__r.__words[2]);
    }
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v113.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v114.__r_.__value_.__l.__data_);
    }
    if (v116) {
      nitro::nitro_function::nitro_function(v116);
    }
    LODWORD(v126) = v108;
    std::vector<int>::pointer begin = v128[1].__begin_;
    uint64_t v83 = *(void *)(a1 + 8);
    v121.__r_.__value_.__r.__words[0] = v10;
    int v84 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v83, (unsigned __int8 *)v10, (long long **)&v121);
    char v85 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v84 + 40), v133, &v133);
    std::string::operator=(v85 + 1, begin);
    uint64_t v86 = v127;
    uint64_t v87 = *(void *)(a1 + 24);
    v121.__r_.__value_.__r.__words[0] = *(void *)v31 + 16;
    uint64_t v88 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v87, (uint64_t)v121.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v121);
    std::string::operator=((std::string *)(v88 + 5), (const std::string *)(v86 + 16));
    uint64_t v89 = *(void *)(a1 + 8);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v90 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v89, (unsigned __int8 *)&__str, (long long **)&v121);
    long long v91 = (std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v90 + 40), v129, &v129);
    std::string::operator=(v91 + 1, (const std::string *)v10);
    uint64_t v65 = *v72;
    uint64_t v92 = *(uint64_t ***)a1;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    BOOL v67 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v92, &__str, (uint64_t)&std::piecewise_construct, (long long **)&v121);
    uint64_t v93 = (char *)(v65 + 40 * v9);
    *(_OWORD *)(v67 + 56) = *(_OWORD *)v93;
    if (v67 + 56 != v93) {
LABEL_117:
    }
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v67 + 72, *(char **)(v65 + 40 * v9 + 16), *(void *)(v65 + 40 * v9 + 24), (uint64_t)(*(void *)(v65 + 40 * v9 + 24) - *(void *)(v65 + 40 * v9 + 16)) >> 2);
LABEL_118:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v94 = *(void *)(a1 + 32);
    unint64_t v95 = *(void *)(v94 + 8);
    if (v95 >= *(void *)(v94 + 16))
    {
      uint64_t v96 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(*(int64x2_t **)(a1 + 32), (uint64_t)&v126);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(*(void *)(v94 + 8), (uint64_t)&v126);
      uint64_t v96 = v95 + 72;
      *(void *)(v94 + 8) = v95 + 72;
    }
    *(void *)(v94 + 8) = v96;
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    v121.__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v121);
    if (*((void *)&v127 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v127 + 1));
    }
LABEL_125:
    uint64_t v97 = *(void *)(a1 + 8);
    long long v126 = (void **)v10;
    uint64_t v98 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v97, (unsigned __int8 *)v10, (long long **)&v126);
    uint64_t v6 = a4;
    unint64_t v99 = (const std::string *)std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v98 + 40), v133, &v133);
    std::string::operator=((std::string *)v10, v99 + 1);
    char v7 = a3;
LABEL_126:
    if (v132 < 0) {
      operator delete(v131[0]);
    }
    ++v9;
    uint64_t v5 = *v7;
  }
  while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v7[1] - *v7) >> 3));
}

void sub_192198318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a33) {
    nitro::nitro_function::nitro_function(a33);
  }
  if (*(char *)(v33 - 233) < 0) {
    operator delete(*(void **)(v33 - 256));
  }
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)(v33 - 232));
  if (*(char *)(v33 - 121) < 0) {
    operator delete(*(void **)(v33 - 144));
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x50uLL);
  v41[0] = v16;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  int v17 = (std::string *)(v16 + 16);
  int v18 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v18, *((void *)v18 + 1));
  }
  else
  {
    long long v19 = *v18;
    *((void *)v16 + 4) = *((void *)v18 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
  }
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *((_DWORD *)v16 + 18) = 1065353216;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v26 = operator new(8 * *(void *)&prime);
          unint64_t v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v15;
          if (*v15)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v15;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  void *v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                uint64_t v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        uint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v37 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    std::string *v37 = i;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v38 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v37 = (unsigned __int8 **)(*(void *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_1921988CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint8x8_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint8x8_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint8x8_t v10 = operator new(0x30uLL);
  *uint8x8_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  void v10[5] = 0;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint8x8_t v10 = *v19;
LABEL_38:
    *long long v19 = v10;
    goto LABEL_39;
  }
  *uint8x8_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_192198AE8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::ssa_blob_name::ssa_blob_name(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (void **)(a1 + 8);
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0) {
    unint64_t v6 = (unsigned char *)a2;
  }
  else {
    unint64_t v6 = *(unsigned char **)a2;
  }
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    unint64_t v7 = &v6[v5];
    uint8x8_t v8 = v6;
    unint64_t v9 = v7;
    do
    {
      if (*v8 == 95)
      {
        uint64_t v10 = 1u;
        while (v10 != 14)
        {
          if (&v8[v10] == v7) {
            goto LABEL_17;
          }
          int v11 = v8[v10];
          int v12 = aSsaVersion[v10++];
          if (v11 != v12) {
            goto LABEL_9;
          }
        }
        unint64_t v9 = v8;
      }
LABEL_9:
      ++v8;
    }
    while (v8 != v7);
LABEL_17:
    if (v9 != v7)
    {
      std::string::size_type v13 = v9 - v6;
      if (v9 - v6 != -1)
      {
        std::string::basic_string[abi:ne180100]<0>(&__str, "_@ssa_version_");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        if (*(char *)(a2 + 23) >= 0) {
          std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v15 = *(void *)(a2 + 8);
        }
        std::string::basic_string(&__str, (const std::string *)a2, size + v13, v15, (std::allocator<char> *)&v20);
        unint64_t v16 = std::stoul(&__str, 0, 10);
        *(void *)(a1 + 32) = v16;
        std::to_string(&v20, v16);
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v17 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v17 = v20.__r_.__value_.__l.__size_;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v18 = __str.__r_.__value_.__l.__size_;
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
        if (v17 == v18)
        {
          *(unsigned char *)a1 = 1;
          std::string::basic_string(&v20, (const std::string *)a2, 0, v13, (std::allocator<char> *)&v22);
          if (*(char *)(a1 + 31) < 0) {
            operator delete(*v4);
          }
          *(std::string *)uint64_t v4 = v20;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return a1;
}

void sub_192198CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::logic_error __p, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p.__vftable);
  }
  if (a2 == 1)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(exception_object);
    std::logic_error::logic_error(&__p, exception_ptr);
    __p.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_begin_catch(exception_object);
    MEMORY[0x192FF0EB0](&__p);
    __cxa_end_catch();
    JUMPOUT(0x192198CD0);
  }
  if (*(char *)(v17 + 31) < 0) {
    operator delete(*v18);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::blob_numerical_properties>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<Espresso::blob_numerical_properties>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void anonymous namespace'::collect_requested_types(_anonymous_namespace_ *this, const Espresso::net *a2, unint64_t a3, int a4)
{
  char v4 = a4;
  int v44 = 0;
  size_t v45 = 0;
  uint64_t v46 = 0;
  if (a4)
  {
    uint8x8_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 12, a3);
    if (&v44 == v8 + 3) {
      goto LABEL_6;
    }
  }
  else
  {
    uint8x8_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((void *)a2 + 7, a3);
    if (&v44 == v8 + 3) {
      goto LABEL_6;
    }
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v44, (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
LABEL_6:
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unint64_t v9 = v44;
  uint64_t v10 = v45;
  if (v44 != v45)
  {
    unint64_t v38 = (char **)((char *)a2 + 408);
    do
    {
      uint64_t v11 = *((void *)a2 + 4) + 16 * a3;
      HIDWORD(v40) = 1;
      char v42 = 0;
      uint64_t v43 = 0;
      long long __p = 0;
      *(void *)&long long v40 = 0x13F800000;
      DWORD2(v40) = *(_DWORD *)(*(void *)v11 + 12);
      if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((void **)a2 + 45), v9))goto LABEL_12; {
      int v12 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2 + 352, v9);
      }
      long long v40 = *(_OWORD *)(v12 + 7);
      if (&v40 != (long long *)(v12 + 7)) {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v12[9], v12[10], (uint64_t)(v12[10] - v12[9]) >> 2);
      }
      if ((DWORD2(v40) & 0x80000000) != 0)
      {
        DWORD2(v40) = *(_DWORD *)(*(void *)v11 + 12);
        if (v4) {
          goto LABEL_13;
        }
      }
      else
      {
LABEL_12:
        if (v4) {
          goto LABEL_13;
        }
      }
      uint64_t v15 = *(void *)v11;
      unint64_t v16 = (void *)(*(void *)v11 + 40);
      if (*(char *)(*(void *)v11 + 63) < 0)
      {
        uint64_t v18 = *(void *)(v15 + 48);
        if (v18 == 4)
        {
          unint64_t v16 = (void *)*v16;
LABEL_51:
          if (*(_DWORD *)v16 == 1953718627) {
            goto LABEL_52;
          }
          goto LABEL_13;
        }
        if (v18 != 11) {
          goto LABEL_13;
        }
        unint64_t v16 = (void *)*v16;
      }
      else
      {
        int v17 = *(unsigned __int8 *)(*(void *)v11 + 63);
        if (v17 == 4) {
          goto LABEL_51;
        }
        if (v17 != 11) {
          goto LABEL_13;
        }
      }
      long long v19 = (void *)*v16;
      uint64_t v20 = *(void *)((char *)v16 + 3);
      if (v19 == (void *)0x747269765F696870 && v20 == 0x6C6175747269765FLL)
      {
LABEL_52:
        uint8x8_t v31 = *v38;
        if (*v38)
        {
          int v32 = *(_DWORD *)(v15 + 8);
          uint8x8_t v33 = (char **)((char *)a2 + 408);
          do
          {
            int v34 = *((_DWORD *)v31 + 8);
            BOOL v35 = v34 < v32;
            if (v34 >= v32) {
              unint64_t v36 = (char **)v31;
            }
            else {
              unint64_t v36 = (char **)(v31 + 8);
            }
            if (!v35) {
              uint8x8_t v33 = (char **)v31;
            }
            uint8x8_t v31 = *v36;
          }
          while (*v36);
          if (v33 != v38 && v32 >= *((_DWORD *)v33 + 8))
          {
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v33[6], v9))
            {
              unint64_t v37 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)(v33 + 5), v9);
              long long v40 = *(_OWORD *)(v37 + 7);
              if (&v40 != (long long *)(v37 + 7)) {
                std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)&__p, (char *)v37[9], v37[10], (uint64_t)(v37[10] - v37[9]) >> 2);
              }
            }
          }
        }
      }
LABEL_13:
      unsigned int v39 = DWORD2(v40);
      uint64_t v13 = *(void *)(*(void *)(*(void *)v11 + 64) + 8);
      if (((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(void *)v13 + 104))(v13, &v39, *(void *)v11 + 12) & 1) == 0)
      {
        int v14 = v39;
        if (v39 <= 0xE)
        {
          if (((1 << v39) & 0x7E00) != 0)
          {
            int v14 = *(_DWORD *)(*(void *)v11 + 12);
          }
          else if (((1 << v39) & 0x1F) == 0)
          {
            int v14 = 3;
          }
          DWORD2(v40) = v14;
        }
      }
      unint64_t v23 = *((void *)this + 1);
      unint64_t v22 = *((void *)this + 2);
      if (v23 >= v22)
      {
        unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *(void *)this) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0x666666666666666) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *(void *)this) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x333333333333333) {
          unint64_t v28 = 0x666666666666666;
        }
        else {
          unint64_t v28 = v26;
        }
        std::string::size_type v50 = (char *)this + 16;
        if (v28) {
          unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(v28);
        }
        else {
          uint64_t v29 = 0;
        }
        unint64_t v30 = v28 + 40 * v25;
        v47[0] = (void **)v28;
        v47[1] = (void **)v30;
        unint64_t v48 = v30;
        unint64_t v49 = v28 + 40 * v29;
        *(_OWORD *)unint64_t v30 = v40;
        *(void *)(v30 + 24) = 0;
        *(void *)(v30 + 32) = 0;
        *(void *)(v30 + 16) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v30 + 16), __p, (uint64_t)v42, (v42 - (unsigned char *)__p) >> 2);
        v48 += 40;
        std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer((uint64_t *)this, v47);
        unint64_t v24 = *((void *)this + 1);
        std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer((uint64_t)v47);
      }
      else
      {
        *(_OWORD *)unint64_t v23 = v40;
        *(void *)(v23 + 24) = 0;
        *(void *)(v23 + 32) = 0;
        *(void *)(v23 + 16) = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v23 + 16), __p, (uint64_t)v42, (v42 - (unsigned char *)__p) >> 2);
        unint64_t v24 = v23 + 40;
        *((void *)this + 1) = v24;
      }
      *((void *)this + 1) = v24;
      if (__p)
      {
        char v42 = __p;
        operator delete(__p);
      }
      v9 += 3;
    }
    while (v9 != v10);
  }
  v47[0] = (void **)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v47);
}

void sub_192199250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Espresso::blob_numerical_properties>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v6 = *result;
  *uint64_t result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Espresso::blob_numerical_properties>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,std::string>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void Espresso::base_kernel::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  int v8 = (***(uint64_t (****)(void))(a1[1] + 8))(*(void *)(a1[1] + 8));
  BOOL v9 = v8 != 101;
  if (v8 == 100) {
    BOOL v9 = 0;
  }
  if (v8) {
    BOOL v10 = v9;
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v29, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  unint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)&v26, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  uint64_t v11 = v29;
  uint64_t v12 = v30;
  if (v29 != v30)
  {
    uint64_t v13 = v29;
    do
    {
      *(void *)uint64_t v13 = 1065353216;
      *(_DWORD *)(v13 + 8) = v10;
      v13 += 40;
    }
    while (v13 != v12);
  }
  int v14 = v26;
  uint64_t v15 = v27;
  if (v26 != v27)
  {
    unint64_t v16 = v26;
    do
    {
      *unint64_t v16 = (void *)1065353216;
      *((_DWORD *)v16 + 2) = v10;
      v16 += 5;
    }
    while (v16 != v15);
  }
  if (v11 == v12)
  {
    uint64_t v21 = v11;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      (*(void (**)(void ****__return_ptr, void *, void, unint64_t))(*a1 + 24))(&v32, a1, 0, v18);
      long long v19 = (void **)v32;
      if (v32)
      {
        if (*((unsigned char *)v32 + 8)) {
          *(_DWORD *)(v29 + v17 + 8) = *((_DWORD *)v32 + 3);
        }
        if (*((unsigned char *)v19 + 16))
        {
          uint64_t v20 = v29 + v17;
          *(_OWORD *)uint64_t v20 = *(_OWORD *)(v19 + 3);
          if ((void **)v20 != v19 + 3) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v20 + 16), (char *)v19[5], (uint64_t)v19[6], ((unsigned char *)v19[6] - (unsigned char *)v19[5]) >> 2);
          }
        }
      }
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      ++v18;
      uint64_t v21 = v29;
      uint64_t v11 = v30;
      v17 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v30 - v29) >> 3) > v18);
    int v14 = v26;
    uint64_t v15 = v27;
  }
  if (v15 != v14)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      (*(void (**)(void ****__return_ptr, void *, uint64_t, unint64_t))(*a1 + 24))(&v32, a1, 1, v23);
      unint64_t v24 = (void **)v32;
      if (v32)
      {
        if (*((unsigned char *)v32 + 8)) {
          LODWORD(v26[v22 + 1]) = *((_DWORD *)v32 + 3);
        }
        if (*((unsigned char *)v24 + 16))
        {
          unint64_t v25 = &v26[v22];
          *(_OWORD *)unint64_t v25 = *(_OWORD *)(v24 + 3);
          if (v25 != v24 + 3) {
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v25 + 16, (char *)v24[5], (uint64_t)v24[6], ((unsigned char *)v24[6] - (unsigned char *)v24[5]) >> 2);
          }
        }
      }
      if (v33) {
        nitro::nitro_function::nitro_function(v33);
      }
      ++v23;
      v22 += 5;
    }
    while (0xCCCCCCCCCCCCCCCDLL * (v27 - v26) > v23);
    uint64_t v21 = v29;
    uint64_t v11 = v30;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a4, v21, v11, 0xCCCCCCCCCCCCCCCDLL * ((v11 - v21) >> 3));
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a4 + 3), (uint64_t)v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * (v27 - v26));
  int v32 = &v26;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
  unint64_t v26 = (void **)&v29;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100](&v26);
}

void sub_192199740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  *(void *)(v2 - 56) = va;
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  va_copy((va_list)v4, va1);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    uint64_t v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(a4);
    uint64_t v8 = v7;
    *uint64_t v6 = v7;
    v6[1] = v7;
    _OWORD v6[2] = &v7[5 * v9];
    uint64_t v13 = v7;
    uint64_t v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    char v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
        void v7[3] = 0;
        v7[4] = 0;
        unsigned char v7[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v7 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
        uint64_t v7 = v13 + 5;
        v13 += 5;
        a2 += 40;
      }
      while (a2 != a3);
      uint64_t v8 = v7;
    }
    char v11 = 1;
    uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1921998A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unordered_set<std::string>>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::blob_numerical_properties>,Espresso::blob_numerical_properties*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(void *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 40;
    }
  }
  return a1;
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::cast_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (const void *)v3[3];
  uint64_t v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void *std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x30uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  void v10[5] = 0;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  long long v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *uint64_t v10 = *v19;
LABEL_38:
    *long long v19 = v10;
    goto LABEL_39;
  }
  *uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    long long v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_192199C54(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::string>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x38E38E38E38E38ELL) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = a1 + 1;
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v7 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v22 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v19 = v7;
  v20.i64[0] = v7 + 72 * v2;
  unint64_t v21 = v7 + 72 * v8;
  std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v20.i64[0], a2);
  uint64_t v9 = v20.i64[0];
  uint64_t v10 = v20.i64[0] + 72;
  v20.i64[1] = v20.i64[0] + 72;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      *(_DWORD *)(v14 - 72) = *(_DWORD *)(v11 + v13 - 72);
      *(_OWORD *)(v14 - 64) = *(_OWORD *)(v11 + v13 - 64);
      *(void *)(v15 - 64) = 0;
      *(void *)(v15 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(_OWORD *)(v14 - 48) = *(_OWORD *)(v11 + v13 - 48);
      *(void *)(v14 - 32) = *(void *)(v11 + v13 - 32);
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 40) = 0;
      *(void *)(v15 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v11 + v13 - 24);
      *(void *)(v14 - 8) = *(void *)(v11 + v13 - 8);
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      v13 -= 72;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    int64x2_t v16 = *a1;
    uint64_t v10 = v20.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v20 = v16;
  unint64_t v17 = a1[1].u64[0];
  a1[1].i64[0] = v21;
  unint64_t v21 = v17;
  unint64_t v19 = v16.i64[0];
  std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer((uint64_t)&v19);
  return v10;
}

void sub_192199E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

void std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((void *)(a1 + 48), *(void *)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void sub_192199F10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4) {
    nitro::nitro_function::nitro_function(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::net::new_layer_info>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<Espresso::net::new_layer_info>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_8:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_8;
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void anonymous namespace'::create_casted_value(uint64_t a1, uint64_t a2, int a3, int a4, long long *a5, const std::string *a6, int a7, int a8)
{
  int v37 = a3;
  v35[1] = 0;
  int v36 = a4;
  v35[0] = a7;
  Espresso::abstract_engine_factory::shared(&v31);
  uint64_t v13 = v31;
  std::string::basic_string[abi:ne180100]<0>(__p, "cast");
  Espresso::abstract_engine_factory::make_kernel_priv(v13, a2, (uint64_t)__p, (uint64_t)v35, &v37);
  if (!lpsrc)
  {
    uint64_t v14 = 0;
    goto LABEL_6;
  }
  if (!v14)
  {
LABEL_6:
    uint64_t v15 = 0;
    goto LABEL_7;
  }
  uint64_t v15 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v34) {
    nitro::nitro_function::nitro_function(v34);
  }
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
  if (a8)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "basic_block_head");
    lpvImage_Buffer src = __p;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v14 + 240, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&lpsrc)+ 10) = a8;
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  int64x2_t v16 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v17 = (char *)operator new(0xF8uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)unint64_t v17 = &unk_1EE389DF0;
  *((void *)v17 + 3) = &unk_1EE36C758;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_OWORD *)(v17 + 120) = 0u;
  *(_OWORD *)(v17 + 136) = 0u;
  *(_OWORD *)(v17 + 152) = 0u;
  *(_OWORD *)(v17 + 161) = 0u;
  *((_OWORD *)v17 + 13) = 0u;
  *((_OWORD *)v17 + 14) = 0u;
  *((void *)v17 + 30) = 0;
  *(void *)(a1 + 8) = v17 + 24;
  *(void *)(a1 + 16) = v17;
  MEMORY[0x192FF0F50](v17 + 64, "cast");
  uint64_t v18 = *(void *)(a1 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v18 + 72);
  *(void *)(v18 + 64) = v14;
  *(void *)(v18 + 72) = v15;
  if (v19) {
    nitro::nitro_function::nitro_function(v19);
  }
  std::string::operator=((std::string *)(*v16 + 16), a6);
  uint64_t v20 = *v16;
  int v21 = v36;
  *(_DWORD *)(v20 + 8) = v37;
  *(_DWORD *)(v20 + 12) = v21;
  std::string::operator=((std::string *)(v20 + 200), (const std::string *)(v20 + 16));
  uint64_t v22 = (char **)(a1 + 24);
  unint64_t v23 = *(std::string **)(a1 + 32);
  if ((unint64_t)v23 >= *(void *)(a1 + 40))
  {
    unint64_t v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v22, (uint64_t)a5);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v22, a5);
    unint64_t v24 = v23 + 1;
  }
  *(void *)(a1 + 32) = v24;
  unint64_t v25 = (char **)(a1 + 48);
  unint64_t v26 = (long long *)(*(void *)(a1 + 8) + 16);
  unint64_t v27 = *(std::string **)(a1 + 56);
  if ((unint64_t)v27 >= *(void *)(a1 + 64))
  {
    uint64_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v25, (uint64_t)v26);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v25, v26);
    uint64_t v28 = v27 + 1;
  }
  *(void *)(a1 + 56) = v28;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
}

void sub_19219A314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v17) {
    nitro::nitro_function::nitro_function(v17);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::update_layer_labels(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a3[3]) {
    BOOL v3 = a1 == a2;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    unint64_t v6 = a1;
    do
    {
      uint64_t v8 = *v6;
      unint64_t v7 = (std::__shared_weak_count *)v6[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(const void **)(v8 + 64);
      if (v9)
      {
        if (v10)
        {
          unint64_t v11 = *(std::__shared_weak_count **)(v8 + 72);
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v12 = (std::string *)(v10 + 8);
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)(v10 + 8)))
          {
            uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)v12);
            if (!v13) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            std::string::operator=(v12, (const std::string *)(v13 + 5));
          }
          if (v11) {
            nitro::nitro_function::nitro_function(v11);
          }
        }
        uint64_t v14 = *(const void **)(v8 + 64);
        if (v14)
        {
          if (v15)
          {
            int64x2_t v16 = *(std::__shared_weak_count **)(v8 + 72);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v17 = (std::string *)(v15 + 328);
            if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)(v15 + 328)))
            {
              uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(a3, (uint64_t)v17);
              if (!v18) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              std::string::operator=(v17, (const std::string *)(v18 + 5));
            }
            if (v16) {
              nitro::nitro_function::nitro_function(v16);
            }
          }
        }
      }
      if (v7) {
        nitro::nitro_function::nitro_function(v7);
      }
      v6 += 2;
    }
    while (v6 != a2);
  }
}

void sub_19219A558(_Unwind_Exception *exception_object)
{
  if (v2) {
    nitro::nitro_function::nitro_function(v2);
  }
  if (v1) {
    nitro::nitro_function::nitro_function(v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)a1, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<Espresso::blob_numerical_properties>::__init_with_size[abi:ne180100]<Espresso::blob_numerical_properties*,Espresso::blob_numerical_properties*>((uint64_t)(a1 + 3), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  return a1;
}

void sub_19219A608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<Espresso::blob_numerical_properties>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x40uLL);
    unsigned char v9[8] = *a3;
    *((void *)v9 + 7) = 0;
    *((void *)v9 + 6) = 0;
    *((void *)v9 + 5) = v9 + 12;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__hash_table<Espresso::platform,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,std::allocator<Espresso::platform>>::__emplace_unique_key_args<Espresso::platform,Espresso::platform const&>(float *a1, unsigned int a2, int a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint8x8_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  uint64_t v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    uint64_t v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *uint64_t v22 = *v28;
          void *v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          uint64_t v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        uint64_t v22 = v28;
        uint64_t v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  char v30 = *(void **)a1;
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v12 = *v31;
LABEL_72:
    void *v31 = v12;
    goto LABEL_73;
  }
  *uint64_t v12 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v12;
  v30[v6] = a1 + 4;
  if (*v12)
  {
    unint64_t v32 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_19219AAAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::get_runtime_type_config(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v4 + 116) && !*(unsigned char *)(v4 + 122)) {
    goto LABEL_19;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a2;
  if (*a2 == v6)
  {
LABEL_7:
    if (v7 != v6) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Input blobs have different types");
    }
  }
  else
  {
    uint64_t v7 = v5 - 40;
    while (v7 + 80 != v6)
    {
      int v8 = *(_DWORD *)(v7 + 48);
      int v9 = *(_DWORD *)(v7 + 88);
      v7 += 40;
      if (v8 != v9) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = *a3;
  if (*a3 == v11)
  {
LABEL_12:
    if (v12 != v11) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Output blobs have different types");
    }
  }
  else
  {
    uint64_t v12 = v10 - 40;
    while (v12 + 80 != v11)
    {
      int v13 = *(_DWORD *)(v12 + 48);
      int v14 = *(_DWORD *)(v12 + 88);
      v12 += 40;
      if (v13 != v14) {
        goto LABEL_12;
      }
    }
  }
  int v15 = *(_DWORD *)(v5 + 8);
  if (!*(_DWORD *)(a1 + 336))
  {
    int v16 = *(_DWORD *)(v10 + 8);
    if (v15 != v16) {
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int const&,int const&>(v15, v16);
    }
  }
  if (v15 == 1)
  {
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  }
  else
  {
LABEL_19:
    Espresso::base_kernel::get_runtime_type_config((void *)a1, a2, a3, a4);
  }
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x28uLL);
    void v9[4] = a3;
    return std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void Espresso::expand_dims_kernel_cpu::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (a2[1] - *a2 == 40 && *(_DWORD *)(*a2 + 8) <= 4u) {
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  }
  else {
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  }
}

void Espresso::squeeze_kernel_cpu::get_runtime_type_config(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (a2[1] - *a2 == 40 && *(_DWORD *)(*a2 + 8) <= 4u) {
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  }
  else {
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  }
}

void Espresso::copy_kernel_cpu::__compute(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v3 - *a1 != a2[1] - *a2) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Copy: mismatching blob count");
  }
  if (v3 != v2)
  {
    unint64_t v6 = 0;
    do
    {
      long long v7 = *(_OWORD *)(v2 + 16 * v6);
      long long v10 = v7;
      if (*((void *)&v7 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v8 = *(_OWORD *)(*a2 + 16 * v6);
      long long v9 = v8;
      if (*((void *)&v8 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      Espresso::copy_kernel_cpu::__compute_blob((uint64_t *)&v10, (uint64_t *)&v9);
      if (*((void *)&v9 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v9 + 1));
      }
      if (*((void *)&v10 + 1)) {
        nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v10 + 1));
      }
      ++v6;
      uint64_t v2 = *a1;
    }
    while (v6 < (a1[1] - *a1) >> 4);
  }
}

void sub_19219ADA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    nitro::nitro_function::nitro_function(a10);
  }
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::get_shape_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v49, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v47, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v45, *a3);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v43, *a3);
  Espresso::abstract_blob_container::shape((char *)&v36, **a4);
  if (v49)
  {
    Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(a1, (uint64_t)&v49, (Espresso::layer_shape *)&v36);
    goto LABEL_3;
  }
  uint64_t v7 = v47;
  if (v47)
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)**a3 + 32))(**a3);
    int v9 = *(_DWORD *)(a1 + 284);
    if (v8 == 2)
    {
      if (!v9)
      {
        switch(*(_DWORD *)(a1 + 280))
        {
          case 0xFFFFFFFF:
            goto LABEL_41;
          case 0:
            goto LABEL_55;
          case 1:
            goto LABEL_53;
          case 2:
            goto LABEL_54;
          case 3:
            goto LABEL_52;
          case 4:
            goto LABEL_56;
          default:
            goto LABEL_3;
        }
        goto LABEL_3;
      }
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v51, (const Espresso::layer_shape *)&v36, 0);
      uint64_t v10 = *(int *)(a1 + 280);
      if (v10 == -1)
      {
        if (v52)
        {
          for (unint64_t i = 0; i < v52; ++i)
            *(unsigned char *)(*(void *)(v7 + 24) + i) = *((_DWORD *)v51 + i);
        }
        goto LABEL_3;
      }
LABEL_29:
      int v15 = *((_DWORD *)v51 + v10);
LABEL_30:
      **(unsigned char **)(v7 + 24) = v15;
      goto LABEL_3;
    }
    if (v9)
    {
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v51, (const Espresso::layer_shape *)&v36, 0);
      uint64_t v10 = *(int *)(a1 + 280);
      if (v10 == -1)
      {
        if (v52)
        {
          for (unint64_t j = 0; j < v52; ++j)
            *(unsigned char *)(*(void *)(v7 + 24) + j) = *((_DWORD *)v51 + j);
        }
        goto LABEL_3;
      }
      goto LABEL_29;
    }
    switch(*(_DWORD *)(a1 + 280))
    {
      case 0xFFFFFFFF:
LABEL_41:
        **(unsigned char **)(v7 + 24) = v36;
        *(unsigned char *)(*(void *)(v7 + 24) + 1) = v37;
        *(unsigned char *)(*(void *)(v7 + 24) + 2) = v38;
        *(unsigned char *)(*(void *)(v7 + 24) + 3) = v39;
        *(unsigned char *)(*(void *)(v7 + 24) + 4) = v40;
        break;
      case 0:
LABEL_55:
        LOBYTE(v15) = v36;
        goto LABEL_30;
      case 1:
LABEL_53:
        LOBYTE(v15) = v37;
        goto LABEL_30;
      case 2:
LABEL_54:
        LOBYTE(v15) = v38;
        goto LABEL_30;
      case 3:
LABEL_52:
        LOBYTE(v15) = v39;
        goto LABEL_30;
      case 4:
LABEL_56:
        LOBYTE(v15) = v40;
        goto LABEL_30;
      default:
        break;
    }
  }
  else
  {
    uint64_t v12 = v45;
    if (v45)
    {
      if (*(_DWORD *)(a1 + 284))
      {
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v51, (const Espresso::layer_shape *)&v36, 0);
        uint64_t v13 = *(int *)(a1 + 280);
        if (v13 == -1)
        {
          if (v52)
          {
            unint64_t v34 = 0;
            uint64_t v35 = *(void *)(v12 + 24);
            do
            {
              *(_DWORD *)(v35 + 4 * v34) = *((_DWORD *)v51 + v34);
              ++v34;
            }
            while (v34 < v52);
          }
        }
        else
        {
          int v14 = *((_DWORD *)v51 + v13);
LABEL_26:
          **(_DWORD **)(v12 + 24) = v14;
        }
      }
      else
      {
        switch(*(_DWORD *)(a1 + 280))
        {
          case 0xFFFFFFFF:
            unint64_t v32 = *(_DWORD **)(v45 + 24);
            _DWORD *v32 = v36;
            v32[1] = v37;
            void v32[2] = v38;
            v32[3] = v39;
            v32[4] = v40;
            break;
          case 0:
            int v14 = v36;
            goto LABEL_26;
          case 1:
            int v14 = v37;
            goto LABEL_26;
          case 2:
            int v14 = v38;
            goto LABEL_26;
          case 3:
            int v14 = v39;
            goto LABEL_26;
          case 4:
            int v14 = v40;
            goto LABEL_26;
          default:
            break;
        }
      }
    }
    else
    {
      uint64_t v16 = v43;
      if (!v43) {
        Espresso::throw_exception_selector<Espresso::not_implemented_error>("get_shape_kernel_cpu: only implemented for float, float16, int8, uint8 and int32 input blobs");
      }
      uint64_t v17 = 0;
      int v18 = *(_DWORD *)(v43 + 8);
      do
      {
        v18 *= *(_DWORD *)(v43 + 12 + v17);
        v17 += 4;
      }
      while (v17 != 12);
      unint64_t v19 = (char *)operator new(0x60uLL);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *(void *)unint64_t v19 = &unk_1EE3899C8;
      *((void *)v19 + 3) = &unk_1EE36BF10;
      *((_OWORD *)v19 + 4) = 0u;
      *((_OWORD *)v19 + 5) = 0u;
      *((_DWORD *)v19 + 8) = v18;
      *(void *)(v19 + 36) = 0x100000001;
      *((_DWORD *)v19 + 11) = 1;
      uint64_t v20 = (Espresso *)(4 * v18);
      uint64_t v21 = Espresso::kern_alloc_uninitialized(v20);
      bzero(v21, (size_t)v20);
      *((void *)v19 + 6) = v21;
      v19[56] = 1;
      v51[0] = v19 + 24;
      v51[1] = v19;
      Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(a1, (uint64_t)v51, (Espresso::layer_shape *)&v36);
      uint64_t v22 = 0;
      unint64_t v23 = (int *)*((void *)v19 + 6);
      uint8x8_t v24 = *(_WORD **)(v16 + 24);
      uint64_t v25 = *(int *)(v16 + 8);
      do
      {
        v25 *= *(int *)(v16 + 12 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      for (; v25; --v25)
      {
        int v26 = *v23++;
        _S0 = v26;
        __asm { FCVT            H0, S0 }
        *v24++ = _S0;
      }
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v19);
    }
  }
LABEL_3:
  if (__p)
  {
    char v42 = __p;
    operator delete(__p);
  }
  if (v44) {
    nitro::nitro_function::nitro_function(v44);
  }
  if (v46) {
    nitro::nitro_function::nitro_function(v46);
  }
  if (v48) {
    nitro::nitro_function::nitro_function(v48);
  }
  if (v50) {
    nitro::nitro_function::nitro_function(v50);
  }
}

void sub_19219B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  nitro::nitro_function::nitro_function(v23);
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  int v26 = *(std::__shared_weak_count **)(v24 - 96);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  _Unwind_Resume(a1);
}

void Espresso::copy_kernel_cpu::__compute_blob(uint64_t *a1, uint64_t *a2)
{
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v31, a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v29, a1);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v27, a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v25, a1);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v23, a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v21, a1);
  Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v19, a2);
  Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(&v17, a1);
  if (v29 && v31)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void **)(v29 + 24);
    unint64_t v6 = *(const void **)(v31 + 24);
    uint64_t v7 = *(int *)(v29 + 8);
    do
    {
      v7 *= *(int *)(v29 + 12 + v4);
      v4 += 4;
    }
    while (v4 != 12);
LABEL_5:
    size_t v8 = 4 * v7;
LABEL_15:
    memcpy(v5, v6, v8);
    goto LABEL_16;
  }
  if (v27 && v25)
  {
    uint64_t v9 = 0;
    uint64_t v5 = *(void **)(v25 + 24);
    unint64_t v6 = *(const void **)(v27 + 24);
    uint64_t v10 = *(int *)(v25 + 8);
    do
    {
      v10 *= *(int *)(v25 + 12 + v9);
      v9 += 4;
    }
    while (v9 != 12);
    size_t v8 = 2 * v10;
    goto LABEL_15;
  }
  if (v23 && v21)
  {
    uint64_t v11 = 0;
    uint64_t v5 = *(void **)(v21 + 24);
    unint64_t v6 = *(const void **)(v23 + 24);
    size_t v8 = *(int *)(v21 + 8);
    do
    {
      v8 *= *(int *)(v21 + 12 + v11);
      v11 += 4;
    }
    while (v11 != 12);
    goto LABEL_15;
  }
  if (v19 && v17)
  {
    uint64_t v12 = 0;
    uint64_t v5 = *(void **)(v17 + 24);
    unint64_t v6 = *(const void **)(v19 + 24);
    uint64_t v7 = *(int *)(v17 + 8);
    do
    {
      v7 *= *(int *)(v17 + 12 + v12);
      v12 += 4;
    }
    while (v12 != 12);
    goto LABEL_5;
  }
  Espresso::abstract_blob_container::shape(v14, *a1);
  uint64_t v13 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)v14);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  if (v13 >= 1) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Copy: Unexpected null blobs");
  }
LABEL_16:
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  if (v22) {
    nitro::nitro_function::nitro_function(v22);
  }
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  if (v30) {
    nitro::nitro_function::nitro_function(v30);
  }
  if (v32) {
    nitro::nitro_function::nitro_function(v32);
  }
}

void sub_19219B54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a20) {
    nitro::nitro_function::nitro_function(a20);
  }
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 88);
  if (v24) {
    nitro::nitro_function::nitro_function(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v22 - 72);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }
  int v26 = *(std::__shared_weak_count **)(v22 - 56);
  if (v26) {
    nitro::nitro_function::nitro_function(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v22 - 40);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v22 - 24);
  if (v28) {
    nitro::nitro_function::nitro_function(v28);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_non_quantized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v11 = *(void *)(a1 + 560);
  if (!v11)
  {
    uint64_t v12 = *(uint64_t **)a4;
    unint64_t v15 = *(void *)(a4 + 8) - *(void *)a4;
    if (*(void *)(a1 + 688)) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == 16;
    }
    if (v16)
    {
      if (!*(void *)(a1 + 704) && !*(void *)(a1 + 512) && !*(void *)(a1 + 528)) {
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Weights not set");
      }
    }
    else if (v15 > 0x10)
    {
      goto LABEL_9;
    }
    uint64_t v17 = *(void *)(a1 + 512);
    if (v17)
    {
      int v14 = *(void **)(v17 + 16);
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
      int v14 = 0;
    }
    goto LABEL_21;
  }
  uint64_t v12 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
  {
    int v13 = 0;
    int v14 = *(void **)(v11 + 16);
    goto LABEL_21;
  }
LABEL_9:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v320, v12 + 2);
  if ((void)v320) {
    int v14 = *(void **)(v320 + 24);
  }
  else {
    int v14 = 0;
  }
  if (*((void *)&v320 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v320 + 1));
  }
  int v13 = 0;
LABEL_21:
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v317 = 0;
    v318 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v317, *(uint64_t **)a3);
  }
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    BOOL v19 = 0;
    uint64_t v18 = 0;
    uint64_t v315 = 0;
    v316 = 0;
    uint64_t v20 = v317;
    BOOL v21 = v317 != 0;
    if (v14) {
      goto LABEL_33;
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v315, *(uint64_t **)a4);
    uint64_t v18 = v315;
    BOOL v19 = v315 != 0;
    uint64_t v20 = v317;
    BOOL v21 = v317 != 0;
    if (v315)
    {
      if (v317)
      {
        uint64_t v22 = *(void *)(a1 + 8);
        if (*(_DWORD *)(v22 + 116) || *(unsigned char *)(v22 + 122)) {
          *(_DWORD *)(a1 + 420) = 1;
        }
      }
    }
    if (v14) {
      goto LABEL_33;
    }
  }
  int v26 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) - *(void *)a4 < 0x11uLL)
  {
    uint64_t v27 = *(void *)(a1 + 688);
    if (v27)
    {
      uint64_t v23 = *(void **)(v27 + 16);
      if (*(_DWORD *)(a1 + 420))
      {
        int v29 = *(_DWORD *)(v27 + 8);
        int v28 = *(_DWORD *)(v27 + 12);
        if ((unint64_t)(2 * v29 * (uint64_t)v28) >= 0x600001)
        {
          BOOL v30 = 1;
LABEL_185:
          if (!v19) {
            goto LABEL_34;
          }
          uint64_t v172 = 0;
          uint64_t v173 = *(int *)(v18 + 8);
          uint64_t v174 = v18 + 12;
          do
          {
            v173 *= *(int *)(v174 + v172);
            v172 += 4;
          }
          while (v172 != 12);
          if ((unint64_t)(2 * v173) >= 0xC01 || !v30) {
            goto LABEL_34;
          }
        }
      }
      else
      {
        int v171 = *(_DWORD *)(*(void *)(a1 + 8) + 68);
        BOOL v30 = v171 != 0;
        int v29 = *(_DWORD *)(v27 + 8);
        int v28 = *(_DWORD *)(v27 + 12);
        if ((unint64_t)(2 * v29 * (uint64_t)v28) >= 0x600001) {
          goto LABEL_185;
        }
        if (!v171) {
          goto LABEL_34;
        }
      }
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&v320, v28, v29, 1, 1);
      uint64_t v176 = v320;
      unint64_t v177 = *(std::__shared_weak_count **)(a1 + 712);
      *(_OWORD *)(a1 + 704) = v320;
      if (v177)
      {
        nitro::nitro_function::nitro_function(v177);
        uint64_t v178 = *(void *)(a1 + 704);
      }
      else
      {
        uint64_t v178 = v176;
      }
      uint64_t v228 = *(unsigned int *)(v178 + 12);
      if ((int)v228 >= 1)
      {
        uint64_t v229 = 0;
        uint64_t v230 = 0;
        uint64_t v231 = 0;
        uint64_t v232 = *(unsigned int *)(v178 + 8);
        do
        {
          if ((int)v232 >= 1)
          {
            int v233 = (_WORD *)(*(void *)(v178 + 16) + v230);
            long long v234 = (_WORD *)(*(void *)(*(void *)(a1 + 688) + 16) + v229);
            uint64_t v235 = v232;
            do
            {
              *v233++ = *v234;
              v234 += v228;
              --v235;
            }
            while (v235);
          }
          ++v231;
          v230 += 2 * (int)v232;
          v229 += 2;
        }
        while (v231 != v228);
      }
      uint64_t v23 = *(void **)(v178 + 16);
      uint64_t v236 = *(std::__shared_weak_count **)(a1 + 696);
      *(_OWORD *)(a1 + 688) = 0u;
      if (v236) {
        nitro::nitro_function::nitro_function(v236);
      }
      goto LABEL_278;
    }
    uint64_t v113 = *(void *)(a1 + 704);
    if (v113 || (uint64_t v113 = *(void *)(a1 + 528)) != 0)
    {
      uint64_t v23 = *(void **)(v113 + 16);
LABEL_278:
      int v13 = 1;
      goto LABEL_34;
    }
LABEL_33:
    uint64_t v23 = 0;
    goto LABEL_34;
  }
  if (*(void *)(a4 + 8) - (void)v26 <= 0x10uLL)
  {
    uint64_t v23 = 0;
    long long v320 = 0uLL;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v320, v26 + 2);
    if ((void)v320) {
      uint64_t v23 = *(void **)(v320 + 24);
    }
    else {
      uint64_t v23 = 0;
    }
  }
  if (*((void *)&v320 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v320 + 1));
  }
LABEL_34:
  uint64_t v24 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) - *(void *)a4 < 0x21uLL)
  {
    if (!*(_DWORD *)(a1 + 312)) {
      goto LABEL_62;
    }
    uint64_t v25 = *(void *)(a1 + 544);
    if (!v25) {
      goto LABEL_60;
    }
    v309 = *(void **)(v25 + 16);
  }
  else
  {
    if (*(void *)(a4 + 8) - (void)v24 <= 0x20uLL)
    {
      v309 = 0;
      long long v320 = 0uLL;
    }
    else
    {
      Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v320, v24 + 4);
      if ((void)v320) {
        v309 = *(void **)(v320 + 24);
      }
      else {
        v309 = 0;
      }
    }
    if (*((void *)&v320 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v320 + 1));
    }
  }
  if (v309)
  {
LABEL_63:
    v310 = 0;
    goto LABEL_64;
  }
  uint64_t v31 = *(uint64_t **)a4;
  if (*(void *)(a4 + 8) - *(void *)a4 < 0x21uLL)
  {
    if (*(_DWORD *)(a1 + 312))
    {
LABEL_60:
      uint64_t v32 = *(void *)(a1 + 720);
      if (v32)
      {
        v309 = 0;
        v310 = *(void **)(v32 + 16);
        goto LABEL_64;
      }
    }
LABEL_62:
    v309 = 0;
    goto LABEL_63;
  }
  if (*(void *)(a4 + 8) - (void)v31 <= 0x20uLL)
  {
    v310 = 0;
    long long v320 = 0uLL;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(&v320, v31 + 4);
    if ((void)v320) {
      v310 = *(void **)(v320 + 24);
    }
    else {
      v310 = 0;
    }
  }
  if (*((void *)&v320 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v320 + 1));
  }
  v309 = 0;
LABEL_64:
  uint8x8_t v33 = *(void **)(a1 + 912);
  if (v33)
  {
    unint64_t v34 = *(void **)(a1 + 920);
    if (v14 != v34 && v23 != v34)
    {
      BNNSFilterDestroy(v33);
      *(void *)(a1 + 912) = 0;
    }
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    std::string::size_type v313 = 0;
    v314 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v313, *(uint64_t **)a3);
  }
  size_t v35 = a6;
  if (*(void *)(a4 + 8) == *(void *)a4)
  {
    uint64_t v311 = 0;
    v312 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,false>(&v311, *(uint64_t **)a4);
  }
  if (v14)
  {
    std::string::size_type v36 = v313;
    if (v313 && v311)
    {
      if (v13)
      {
        if (v310)
        {
          bnns = *(void **)(a1 + 912);
          if (!bnns)
          {
            *(void *)(a1 + 920) = v14;
            size_t v38 = *(unsigned int *)(a1 + 308);
            size_t v39 = *(unsigned int *)(a1 + 304);
            long long v40 = *(_OWORD *)(a1 + 400);
            long long v325 = *(_OWORD *)(a1 + 384);
            long long v326 = v40;
            long long v327 = *(_OWORD *)(a1 + 416);
            int v328 = *(_DWORD *)(a1 + 432);
            long long v41 = *(_OWORD *)(a1 + 336);
            long long v321 = *(_OWORD *)(a1 + 320);
            long long v322 = v41;
            long long v42 = *(_OWORD *)(a1 + 368);
            long long v323 = *(_OWORD *)(a1 + 352);
            long long v324 = v42;
            long long v320 = *(_OWORD *)(a1 + 304);
            bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v38, v39, (uint64_t)&v320, v14, v310, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat32, *(void *)(a1 + 976));
            *(void *)(a1 + 912) = bnns;
            std::string::size_type v36 = v313;
          }
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v36 + 8);
            size_t v43 = a5;
            uint64_t v44 = 0;
            std::string::size_type size = v319.__r_.__value_.__l.__size_;
            std::string::size_type v45 = v319.__r_.__value_.__r.__words[0];
            uint64_t v47 = *(int *)(v36 + 8);
            do
            {
              v47 *= *(int *)(v36 + 12 + v44);
              v44 += 4;
            }
            while (v44 != 12);
            memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v36 + 24), 4 * v47);
            bnns = *(void **)(a1 + 912);
          }
          else
          {
            std::string::size_type v45 = 0;
            std::string::size_type size = 0;
            size_t v43 = a5;
          }
          int v179 = BNNSFilterApplyBatch(bnns, v43, *(const void **)(v311 + 24), a7, *(void **)(v36 + 24), v35);
          if (v179)
          {
            std::to_string(&v319, v179);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v291 = &v319;
            }
            else {
              v291 = (std::string *)v319.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v291);
          }
          std::string::size_type v180 = v313;
          if (*(_DWORD *)(a1 + 348))
          {
            uint64_t v181 = 0;
            vDSP_Length v182 = *(int *)(v313 + 8);
            do
            {
              v182 *= *(int *)(v313 + 12 + v181);
              v181 += 4;
            }
            while (v181 != 12);
            vDSP_vadd(*(const float **)(v45 + 24), 1, *(const float **)(v313 + 24), 1, *(float **)(v313 + 24), 1, v182);
          }
          uint64_t v183 = v314;
          v319.__r_.__value_.__r.__words[0] = v180;
          v319.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
          if (v314) {
            atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_202:
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v319, (__int16 *)v310, v43, v35);
          goto LABEL_345;
        }
        std::string v114 = *(void **)(a1 + 912);
        if (!v114)
        {
          *(void *)(a1 + 920) = v14;
          size_t v115 = *(unsigned int *)(a1 + 308);
          size_t v116 = *(unsigned int *)(a1 + 304);
          long long v117 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v117;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v118 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v118;
          long long v119 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v119;
          long long v320 = *(_OWORD *)(a1 + 304);
          std::string v114 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v115, v116, (uint64_t)&v320, v14, v309, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v114;
          std::string::size_type v36 = v313;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v36 + 8);
          size_t v120 = a5;
          uint64_t v121 = 0;
          std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
          std::string::size_type v122 = v319.__r_.__value_.__r.__words[0];
          uint64_t v124 = *(int *)(v36 + 8);
          do
          {
            v124 *= *(int *)(v36 + 12 + v121);
            v121 += 4;
          }
          while (v121 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v36 + 24), 4 * v124);
          std::string v114 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v123 = 0;
          std::string::size_type v122 = 0;
          size_t v120 = a5;
        }
        int v237 = BNNSFilterApplyBatch(v114, v120, *(const void **)(v311 + 24), a7, *(void **)(v36 + 24), a6);
        if (v237)
        {
          std::to_string(&v319, v237);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v297 = &v319;
          }
          else {
            long long v297 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v297);
        }
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v238 = 0;
          unint64_t v239 = *(const float **)(v122 + 24);
          int v240 = *(const float **)(v313 + 24);
          vDSP_Length v241 = *(int *)(v313 + 8);
          do
          {
            v241 *= *(int *)(v313 + 12 + v238);
            v238 += 4;
          }
          while (v238 != 12);
LABEL_322:
          vDSP_vadd(v239, 1, v240, 1, *(float **)(v313 + 24), 1, v241);
        }
      }
      else
      {
        if (v310)
        {
          int v77 = *(void **)(a1 + 912);
          if (!v77)
          {
            *(void *)(a1 + 920) = v14;
            size_t v78 = *(unsigned int *)(a1 + 308);
            size_t v79 = *(unsigned int *)(a1 + 304);
            long long v80 = *(_OWORD *)(a1 + 400);
            long long v325 = *(_OWORD *)(a1 + 384);
            long long v326 = v80;
            long long v327 = *(_OWORD *)(a1 + 416);
            int v328 = *(_DWORD *)(a1 + 432);
            long long v81 = *(_OWORD *)(a1 + 336);
            long long v321 = *(_OWORD *)(a1 + 320);
            long long v322 = v81;
            long long v82 = *(_OWORD *)(a1 + 368);
            long long v323 = *(_OWORD *)(a1 + 352);
            long long v324 = v82;
            long long v320 = *(_OWORD *)(a1 + 304);
            int v77 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v78, v79, (uint64_t)&v320, v14, v310, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat32, *(void *)(a1 + 976));
            *(void *)(a1 + 912) = v77;
            std::string::size_type v36 = v313;
          }
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v36 + 8);
            size_t v43 = a5;
            uint64_t v83 = 0;
            std::string::size_type size = v319.__r_.__value_.__l.__size_;
            std::string::size_type v84 = v319.__r_.__value_.__r.__words[0];
            uint64_t v85 = *(int *)(v36 + 8);
            do
            {
              v85 *= *(int *)(v36 + 12 + v83);
              v83 += 4;
            }
            while (v83 != 12);
            memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v36 + 24), 4 * v85);
            int v77 = *(void **)(a1 + 912);
          }
          else
          {
            std::string::size_type v84 = 0;
            std::string::size_type size = 0;
            size_t v43 = a5;
          }
          int v184 = BNNSFilterApplyBatch(v77, v43, *(const void **)(v311 + 24), a7, *(void **)(v36 + 24), v35);
          if (v184)
          {
            std::to_string(&v319, v184);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v292 = &v319;
            }
            else {
              v292 = (std::string *)v319.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v292);
          }
          std::string::size_type v185 = v313;
          if (*(_DWORD *)(a1 + 348))
          {
            uint64_t v186 = 0;
            vDSP_Length v187 = *(int *)(v313 + 8);
            do
            {
              v187 *= *(int *)(v313 + 12 + v186);
              v186 += 4;
            }
            while (v186 != 12);
            vDSP_vadd(*(const float **)(v84 + 24), 1, *(const float **)(v313 + 24), 1, *(float **)(v313 + 24), 1, v187);
          }
          uint64_t v183 = v314;
          v319.__r_.__value_.__r.__words[0] = v185;
          v319.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
          if (v314) {
            atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_202;
        }
        long long v125 = *(void **)(a1 + 912);
        if (!v125)
        {
          *(void *)(a1 + 920) = v14;
          size_t v126 = *(unsigned int *)(a1 + 308);
          size_t v127 = *(unsigned int *)(a1 + 304);
          long long v128 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v128;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v129 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v129;
          long long v130 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v130;
          long long v320 = *(_OWORD *)(a1 + 304);
          long long v125 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v126, v127, (uint64_t)&v320, v14, v309, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v125;
          std::string::size_type v36 = v313;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v36 + 8);
          size_t v131 = a5;
          uint64_t v132 = 0;
          std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
          std::string::size_type v133 = v319.__r_.__value_.__r.__words[0];
          uint64_t v134 = *(int *)(v36 + 8);
          do
          {
            v134 *= *(int *)(v36 + 12 + v132);
            v132 += 4;
          }
          while (v132 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v36 + 24), 4 * v134);
          long long v125 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v123 = 0;
          std::string::size_type v133 = 0;
          size_t v131 = a5;
        }
        int v242 = BNNSFilterApplyBatch(v125, v131, *(const void **)(v311 + 24), a7, *(void **)(v36 + 24), a6);
        if (v242)
        {
          std::to_string(&v319, v242);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v298 = &v319;
          }
          else {
            v298 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v298);
        }
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v243 = 0;
          unint64_t v239 = *(const float **)(v133 + 24);
          int v240 = *(const float **)(v313 + 24);
          vDSP_Length v241 = *(int *)(v313 + 8);
          do
          {
            v241 *= *(int *)(v313 + 12 + v243);
            v243 += 4;
          }
          while (v243 != 12);
          goto LABEL_322;
        }
      }
LABEL_323:
      long long v262 = v314;
      if (v314)
      {
        atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_371:
        nitro::nitro_function::nitro_function(v262);
        goto LABEL_372;
      }
      goto LABEL_372;
    }
    if (v21 && v19)
    {
      if (v13)
      {
        if (v310)
        {
          unint64_t v48 = *(void **)(a1 + 912);
          if (!v48)
          {
            *(void *)(a1 + 920) = v14;
            size_t v49 = *(unsigned int *)(a1 + 308);
            size_t v50 = *(unsigned int *)(a1 + 304);
            long long v51 = *(_OWORD *)(a1 + 400);
            long long v325 = *(_OWORD *)(a1 + 384);
            long long v326 = v51;
            long long v327 = *(_OWORD *)(a1 + 416);
            int v328 = *(_DWORD *)(a1 + 432);
            long long v52 = *(_OWORD *)(a1 + 336);
            long long v321 = *(_OWORD *)(a1 + 320);
            long long v322 = v52;
            long long v53 = *(_OWORD *)(a1 + 368);
            long long v323 = *(_OWORD *)(a1 + 352);
            long long v324 = v53;
            long long v320 = *(_OWORD *)(a1 + 304);
            unint64_t v48 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v49, v50, (uint64_t)&v320, v14, v310, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat16, *(void *)(a1 + 976));
            *(void *)(a1 + 912) = v48;
            uint64_t v20 = v317;
          }
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
            size_t v54 = a5;
            uint64_t v55 = 0;
            std::string::size_type size = v319.__r_.__value_.__l.__size_;
            std::string::size_type v56 = v319.__r_.__value_.__r.__words[0];
            uint64_t v57 = *(int *)(v20 + 8);
            do
            {
              v57 *= *(int *)(v20 + 12 + v55);
              v55 += 4;
            }
            while (v55 != 12);
            memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v57);
            unint64_t v48 = *(void **)(a1 + 912);
          }
          else
          {
            std::string::size_type v56 = 0;
            std::string::size_type size = 0;
            size_t v54 = a5;
          }
          int v263 = BNNSFilterApplyBatch(v48, v54, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), v35);
          if (v263)
          {
            std::to_string(&v319, v263);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v303 = &v319;
            }
            else {
              v303 = (std::string *)v319.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v303);
          }
          uint64_t v264 = v317;
          if (*(_DWORD *)(a1 + 348))
          {
            uint64_t v265 = 0;
            v266 = *(short float **)(v56 + 24);
            v267 = *(short float **)(v317 + 24);
            uint64_t v268 = *(int *)(v317 + 8);
            do
            {
              v268 *= *(int *)(v317 + 12 + v265);
              v265 += 4;
            }
            while (v265 != 12);
            for (; v268; --v268)
            {
              short float v269 = *v266++;
              short float *v267 = v269 + *v267;
              ++v267;
            }
          }
          uint64_t v183 = v318;
          if (v318) {
            atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_344:
          Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v264, (short float *)v310, v54, v35);
          goto LABEL_345;
        }
        v209 = *(void **)(a1 + 912);
        if (!v209)
        {
          *(void *)(a1 + 920) = v14;
          size_t v210 = *(unsigned int *)(a1 + 308);
          size_t v211 = *(unsigned int *)(a1 + 304);
          long long v212 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v212;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v213 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v213;
          long long v214 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v214;
          long long v320 = *(_OWORD *)(a1 + 304);
          v209 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v210, v211, (uint64_t)&v320, v14, v309, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat16, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v209;
          uint64_t v20 = v317;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
          size_t v215 = a5;
          uint64_t v216 = 0;
          std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
          std::string::size_type v217 = v319.__r_.__value_.__r.__words[0];
          uint64_t v218 = *(int *)(v20 + 8);
          do
          {
            v218 *= *(int *)(v20 + 12 + v216);
            v216 += 4;
          }
          while (v216 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v218);
          v209 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v217 = 0;
          std::string::size_type v123 = 0;
          size_t v215 = a5;
        }
        int v277 = BNNSFilterApplyBatch(v209, v215, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), a6);
        if (v277)
        {
          std::to_string(&v319, v277);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v305 = &v319;
          }
          else {
            std::string v305 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v305);
        }
        uint64_t v278 = v317;
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v279 = 0;
          v280 = *(short float **)(v217 + 24);
          v281 = *(short float **)(v317 + 24);
          uint64_t v282 = *(int *)(v317 + 8);
          do
          {
            v282 *= *(int *)(v317 + 12 + v279);
            v279 += 4;
          }
          while (v279 != 12);
          for (; v282; --v282)
          {
            short float v283 = *v280++;
            short float *v281 = v283 + *v281;
            ++v281;
          }
        }
        uint64_t v251 = v318;
        if (v318) {
          atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        if (v310)
        {
          unint64_t v104 = *(void **)(a1 + 912);
          if (!v104)
          {
            *(void *)(a1 + 920) = v14;
            size_t v105 = *(unsigned int *)(a1 + 308);
            size_t v106 = *(unsigned int *)(a1 + 304);
            long long v107 = *(_OWORD *)(a1 + 400);
            long long v325 = *(_OWORD *)(a1 + 384);
            long long v326 = v107;
            long long v327 = *(_OWORD *)(a1 + 416);
            int v328 = *(_DWORD *)(a1 + 432);
            long long v108 = *(_OWORD *)(a1 + 336);
            long long v321 = *(_OWORD *)(a1 + 320);
            long long v322 = v108;
            long long v109 = *(_OWORD *)(a1 + 368);
            long long v323 = *(_OWORD *)(a1 + 352);
            long long v324 = v109;
            long long v320 = *(_OWORD *)(a1 + 304);
            unint64_t v104 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v105, v106, (uint64_t)&v320, v14, v310, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65552, BNNSDataTypeFloat16, *(void *)(a1 + 976));
            *(void *)(a1 + 912) = v104;
            uint64_t v20 = v317;
          }
          if (*(_DWORD *)(a1 + 348))
          {
            std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
            size_t v54 = a5;
            uint64_t v110 = 0;
            std::string::size_type size = v319.__r_.__value_.__l.__size_;
            std::string::size_type v111 = v319.__r_.__value_.__r.__words[0];
            uint64_t v112 = *(int *)(v20 + 8);
            do
            {
              v112 *= *(int *)(v20 + 12 + v110);
              v110 += 4;
            }
            while (v110 != 12);
            memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v112);
            unint64_t v104 = *(void **)(a1 + 912);
          }
          else
          {
            std::string::size_type v111 = 0;
            std::string::size_type size = 0;
            size_t v54 = a5;
          }
          int v270 = BNNSFilterApplyBatch(v104, v54, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), v35);
          if (v270)
          {
            std::to_string(&v319, v270);
            if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v304 = &v319;
            }
            else {
              std::string v304 = (std::string *)v319.__r_.__value_.__r.__words[0];
            }
            Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v304);
          }
          uint64_t v264 = v317;
          if (*(_DWORD *)(a1 + 348))
          {
            uint64_t v271 = 0;
            v272 = *(short float **)(v111 + 24);
            v273 = *(short float **)(v317 + 24);
            uint64_t v274 = *(int *)(v317 + 8);
            do
            {
              v274 *= *(int *)(v317 + 12 + v271);
              v271 += 4;
            }
            while (v271 != 12);
            for (; v274; --v274)
            {
              short float v275 = *v272++;
              short float *v273 = v275 + *v273;
              ++v273;
            }
          }
          uint64_t v183 = v318;
          if (v318) {
            atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_344;
        }
        uint64_t v219 = *(void **)(a1 + 912);
        if (!v219)
        {
          *(void *)(a1 + 920) = v14;
          size_t v220 = *(unsigned int *)(a1 + 308);
          size_t v221 = *(unsigned int *)(a1 + 304);
          long long v222 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v222;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v223 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v223;
          long long v224 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v224;
          long long v320 = *(_OWORD *)(a1 + 304);
          uint64_t v219 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v220, v221, (uint64_t)&v320, v14, v309, BNNSDataTypeFloat16, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat16, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v219;
          uint64_t v20 = v317;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
          size_t v215 = a5;
          uint64_t v225 = 0;
          std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
          std::string::size_type v226 = v319.__r_.__value_.__r.__words[0];
          uint64_t v227 = *(int *)(v20 + 8);
          do
          {
            v227 *= *(int *)(v20 + 12 + v225);
            v225 += 4;
          }
          while (v225 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v227);
          uint64_t v219 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v226 = 0;
          std::string::size_type v123 = 0;
          size_t v215 = a5;
        }
        int v284 = BNNSFilterApplyBatch(v219, v215, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), a6);
        if (v284)
        {
          std::to_string(&v319, v284);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v306 = &v319;
          }
          else {
            long long v306 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v306);
        }
        uint64_t v278 = v317;
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v285 = 0;
          unint64_t v286 = *(short float **)(v226 + 24);
          v287 = *(short float **)(v317 + 24);
          uint64_t v288 = *(int *)(v317 + 8);
          do
          {
            v288 *= *(int *)(v317 + 12 + v285);
            v285 += 4;
          }
          while (v285 != 12);
          for (; v288; --v288)
          {
            short float v289 = *v286++;
            short float *v287 = v289 + *v287;
            ++v287;
          }
        }
        uint64_t v251 = v318;
        if (v318) {
          atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v278, (float *)v309, v215, a6);
LABEL_369:
      if (v251)
      {
        long long v262 = v251;
        goto LABEL_371;
      }
LABEL_372:
      if (!v123) {
        goto LABEL_375;
      }
      v276 = (std::__shared_weak_count *)v123;
      goto LABEL_374;
    }
  }
  if (!v23) {
    goto LABEL_386;
  }
  if (v21 && v19)
  {
    if (v13)
    {
      if (v310)
      {
        unint64_t v58 = *(void **)(a1 + 912);
        if (!v58)
        {
          *(void *)(a1 + 920) = v23;
          size_t v59 = *(unsigned int *)(a1 + 308);
          size_t v60 = *(unsigned int *)(a1 + 304);
          long long v61 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v61;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v62 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v62;
          long long v63 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v63;
          long long v320 = *(_OWORD *)(a1 + 304);
          unint64_t v58 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v59, v60, (uint64_t)&v320, v23, v310, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat16, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v58;
          uint64_t v20 = v317;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
          uint64_t v64 = 0;
          std::string::size_type size = v319.__r_.__value_.__l.__size_;
          std::string::size_type v65 = v319.__r_.__value_.__r.__words[0];
          uint64_t v66 = *(int *)(v20 + 8);
          do
          {
            v66 *= *(int *)(v20 + 12 + v64);
            v64 += 4;
          }
          while (v64 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v66);
          unint64_t v58 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v65 = 0;
          std::string::size_type size = 0;
        }
        int v188 = BNNSFilterApplyBatch(v58, a5, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), v35);
        if (v188)
        {
          std::to_string(&v319, v188);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v293 = &v319;
          }
          else {
            char v293 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v293);
        }
        uint64_t v189 = v317;
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v190 = 0;
          uint64_t v191 = *(short float **)(v65 + 24);
          unint64_t v192 = *(short float **)(v317 + 24);
          uint64_t v193 = *(int *)(v317 + 8);
          do
          {
            v193 *= *(int *)(v317 + 12 + v190);
            v190 += 4;
          }
          while (v190 != 12);
          for (; v193; --v193)
          {
            short float v194 = *v191++;
            *unint64_t v192 = v194 + *v192;
            ++v192;
          }
        }
        uint64_t v183 = v318;
        if (v318) {
          atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_224:
        Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(a1, v189, (short float *)v310, a5, v35);
        goto LABEL_345;
      }
      unint64_t v135 = *(void **)(a1 + 912);
      if (!v135)
      {
        *(void *)(a1 + 920) = v23;
        size_t v136 = *(unsigned int *)(a1 + 308);
        size_t v137 = *(unsigned int *)(a1 + 304);
        long long v138 = *(_OWORD *)(a1 + 400);
        long long v325 = *(_OWORD *)(a1 + 384);
        long long v326 = v138;
        long long v327 = *(_OWORD *)(a1 + 416);
        int v328 = *(_DWORD *)(a1 + 432);
        long long v139 = *(_OWORD *)(a1 + 336);
        long long v321 = *(_OWORD *)(a1 + 320);
        long long v322 = v139;
        long long v140 = *(_OWORD *)(a1 + 368);
        long long v323 = *(_OWORD *)(a1 + 352);
        long long v324 = v140;
        long long v320 = *(_OWORD *)(a1 + 304);
        unint64_t v135 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v136, v137, (uint64_t)&v320, v23, v309, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat16, *(void *)(a1 + 976));
        *(void *)(a1 + 912) = v135;
        uint64_t v20 = v317;
      }
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
        uint64_t v141 = 0;
        std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
        std::string::size_type v142 = v319.__r_.__value_.__r.__words[0];
        uint64_t v143 = *(int *)(v20 + 8);
        do
        {
          v143 *= *(int *)(v20 + 12 + v141);
          v141 += 4;
        }
        while (v141 != 12);
        memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v143);
        unint64_t v135 = *(void **)(a1 + 912);
      }
      else
      {
        std::string::size_type v142 = 0;
        std::string::size_type v123 = 0;
      }
      int v244 = BNNSFilterApplyBatch(v135, a5, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), a6);
      if (v244)
      {
        std::to_string(&v319, v244);
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v299 = &v319;
        }
        else {
          long long v299 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v299);
      }
      uint64_t v245 = v317;
      if (*(_DWORD *)(a1 + 348))
      {
        uint64_t v246 = 0;
        std::vector<int> v247 = *(short float **)(v142 + 24);
        unsigned int v248 = *(short float **)(v317 + 24);
        uint64_t v249 = *(int *)(v317 + 8);
        do
        {
          v249 *= *(int *)(v317 + 12 + v246);
          v246 += 4;
        }
        while (v246 != 12);
        for (; v249; --v249)
        {
          short float v250 = *v247++;
          *unsigned int v248 = v250 + *v248;
          ++v248;
        }
      }
      uint64_t v251 = v318;
      if (v318) {
        atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      if (v310)
      {
        uint64_t v86 = *(void **)(a1 + 912);
        if (!v86)
        {
          *(void *)(a1 + 920) = v23;
          size_t v87 = *(unsigned int *)(a1 + 308);
          size_t v88 = *(unsigned int *)(a1 + 304);
          long long v89 = *(_OWORD *)(a1 + 400);
          long long v325 = *(_OWORD *)(a1 + 384);
          long long v326 = v89;
          long long v327 = *(_OWORD *)(a1 + 416);
          int v328 = *(_DWORD *)(a1 + 432);
          long long v90 = *(_OWORD *)(a1 + 336);
          long long v321 = *(_OWORD *)(a1 + 320);
          long long v322 = v90;
          long long v91 = *(_OWORD *)(a1 + 368);
          long long v323 = *(_OWORD *)(a1 + 352);
          long long v324 = v91;
          long long v320 = *(_OWORD *)(a1 + 304);
          uint64_t v86 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v87, v88, (uint64_t)&v320, v23, v310, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat16, *(void *)(a1 + 976));
          *(void *)(a1 + 912) = v86;
          uint64_t v20 = v317;
        }
        if (*(_DWORD *)(a1 + 348))
        {
          std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
          uint64_t v92 = 0;
          std::string::size_type size = v319.__r_.__value_.__l.__size_;
          std::string::size_type v93 = v319.__r_.__value_.__r.__words[0];
          uint64_t v94 = *(int *)(v20 + 8);
          do
          {
            v94 *= *(int *)(v20 + 12 + v92);
            v92 += 4;
          }
          while (v92 != 12);
          memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v94);
          uint64_t v86 = *(void **)(a1 + 912);
        }
        else
        {
          std::string::size_type v93 = 0;
          std::string::size_type size = 0;
        }
        int v195 = BNNSFilterApplyBatch(v86, a5, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), v35);
        if (v195)
        {
          std::to_string(&v319, v195);
          if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v294 = &v319;
          }
          else {
            v294 = (std::string *)v319.__r_.__value_.__r.__words[0];
          }
          Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v294);
        }
        uint64_t v189 = v317;
        if (*(_DWORD *)(a1 + 348))
        {
          uint64_t v196 = 0;
          int v197 = *(short float **)(v93 + 24);
          int v198 = *(short float **)(v317 + 24);
          uint64_t v199 = *(int *)(v317 + 8);
          do
          {
            v199 *= *(int *)(v317 + 12 + v196);
            v196 += 4;
          }
          while (v196 != 12);
          for (; v199; --v199)
          {
            short float v200 = *v197++;
            *int v198 = v200 + *v198;
            ++v198;
          }
        }
        uint64_t v183 = v318;
        if (v318) {
          atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_224;
      }
      unint64_t v144 = *(void **)(a1 + 912);
      if (!v144)
      {
        *(void *)(a1 + 920) = v23;
        size_t v145 = *(unsigned int *)(a1 + 308);
        size_t v146 = *(unsigned int *)(a1 + 304);
        long long v147 = *(_OWORD *)(a1 + 400);
        long long v325 = *(_OWORD *)(a1 + 384);
        long long v326 = v147;
        long long v327 = *(_OWORD *)(a1 + 416);
        int v328 = *(_DWORD *)(a1 + 432);
        long long v148 = *(_OWORD *)(a1 + 336);
        long long v321 = *(_OWORD *)(a1 + 320);
        long long v322 = v148;
        long long v149 = *(_OWORD *)(a1 + 368);
        long long v323 = *(_OWORD *)(a1 + 352);
        long long v324 = v149;
        long long v320 = *(_OWORD *)(a1 + 304);
        unint64_t v144 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v145, v146, (uint64_t)&v320, v23, v309, BNNSDataTypeFloat16, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat16, *(void *)(a1 + 976));
        *(void *)(a1 + 912) = v144;
        uint64_t v20 = v317;
      }
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(&v319, v20 + 8);
        uint64_t v150 = 0;
        std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
        std::string::size_type v151 = v319.__r_.__value_.__r.__words[0];
        uint64_t v152 = *(int *)(v20 + 8);
        do
        {
          v152 *= *(int *)(v20 + 12 + v150);
          v150 += 4;
        }
        while (v150 != 12);
        memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v20 + 24), 2 * v152);
        unint64_t v144 = *(void **)(a1 + 912);
      }
      else
      {
        std::string::size_type v151 = 0;
        std::string::size_type v123 = 0;
      }
      int v252 = BNNSFilterApplyBatch(v144, a5, *(const void **)(v315 + 24), a7, *(void **)(v20 + 24), a6);
      if (v252)
      {
        std::to_string(&v319, v252);
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v300 = &v319;
        }
        else {
          v300 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v300);
      }
      uint64_t v245 = v317;
      if (*(_DWORD *)(a1 + 348))
      {
        uint64_t v253 = 0;
        int v254 = *(short float **)(v151 + 24);
        unint64_t v255 = *(short float **)(v317 + 24);
        uint64_t v256 = *(int *)(v317 + 8);
        do
        {
          v256 *= *(int *)(v317 + 12 + v253);
          v253 += 4;
        }
        while (v253 != 12);
        for (; v256; --v256)
        {
          short float v257 = *v254++;
          *unint64_t v255 = v257 + *v255;
          ++v255;
        }
      }
      uint64_t v251 = v318;
      if (v318) {
        atomic_fetch_add_explicit(&v318->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(a1, v245, (float *)v309, a5, a6);
    goto LABEL_369;
  }
  std::string::size_type v67 = v313;
  if (!v313 || !v311) {
LABEL_386:
  }
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Bias and weight type combination not implemented for bottom and top types");
  if (v13)
  {
    if (!v310)
    {
      size_t v153 = *(void **)(a1 + 912);
      if (!v153)
      {
        *(void *)(a1 + 920) = v23;
        size_t v154 = *(unsigned int *)(a1 + 308);
        size_t v155 = *(unsigned int *)(a1 + 304);
        long long v156 = *(_OWORD *)(a1 + 400);
        long long v325 = *(_OWORD *)(a1 + 384);
        long long v326 = v156;
        long long v327 = *(_OWORD *)(a1 + 416);
        int v328 = *(_DWORD *)(a1 + 432);
        long long v157 = *(_OWORD *)(a1 + 336);
        long long v321 = *(_OWORD *)(a1 + 320);
        long long v322 = v157;
        long long v158 = *(_OWORD *)(a1 + 368);
        long long v323 = *(_OWORD *)(a1 + 352);
        long long v324 = v158;
        long long v320 = *(_OWORD *)(a1 + 304);
        size_t v153 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v154, v155, (uint64_t)&v320, v23, v309, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat32, *(void *)(a1 + 976));
        *(void *)(a1 + 912) = v153;
        std::string::size_type v67 = v313;
      }
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v67 + 8);
        uint64_t v159 = 0;
        std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
        std::string::size_type v160 = v319.__r_.__value_.__r.__words[0];
        uint64_t v161 = *(int *)(v67 + 8);
        do
        {
          v161 *= *(int *)(v67 + 12 + v159);
          v159 += 4;
        }
        while (v159 != 12);
        memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v67 + 24), 4 * v161);
        size_t v153 = *(void **)(a1 + 912);
      }
      else
      {
        std::string::size_type v123 = 0;
        std::string::size_type v160 = 0;
      }
      int v258 = BNNSFilterApplyBatch(v153, a5, *(const void **)(v311 + 24), a7, *(void **)(v67 + 24), a6);
      if (v258)
      {
        std::to_string(&v319, v258);
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v301 = &v319;
        }
        else {
          long long v301 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v301);
      }
      if (*(_DWORD *)(a1 + 348))
      {
        uint64_t v259 = 0;
        unint64_t v239 = *(const float **)(v160 + 24);
        int v240 = *(const float **)(v313 + 24);
        vDSP_Length v241 = *(int *)(v313 + 8);
        do
        {
          v241 *= *(int *)(v313 + 12 + v259);
          v259 += 4;
        }
        while (v259 != 12);
        goto LABEL_322;
      }
      goto LABEL_323;
    }
    uint64_t v68 = *(void **)(a1 + 912);
    if (!v68)
    {
      *(void *)(a1 + 920) = v23;
      size_t v69 = *(unsigned int *)(a1 + 308);
      size_t v70 = *(unsigned int *)(a1 + 304);
      long long v71 = *(_OWORD *)(a1 + 400);
      long long v325 = *(_OWORD *)(a1 + 384);
      long long v326 = v71;
      long long v327 = *(_OWORD *)(a1 + 416);
      int v328 = *(_DWORD *)(a1 + 432);
      long long v72 = *(_OWORD *)(a1 + 336);
      long long v321 = *(_OWORD *)(a1 + 320);
      long long v322 = v72;
      long long v73 = *(_OWORD *)(a1 + 368);
      long long v323 = *(_OWORD *)(a1 + 352);
      long long v324 = v73;
      long long v320 = *(_OWORD *)(a1 + 304);
      uint64_t v68 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v69, v70, (uint64_t)&v320, v23, v310, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat32, *(void *)(a1 + 976));
      *(void *)(a1 + 912) = v68;
      std::string::size_type v67 = v313;
    }
    if (*(_DWORD *)(a1 + 348))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v67 + 8);
      uint64_t v74 = 0;
      std::string::size_type size = v319.__r_.__value_.__l.__size_;
      std::string::size_type v75 = v319.__r_.__value_.__r.__words[0];
      uint64_t v76 = *(int *)(v67 + 8);
      do
      {
        v76 *= *(int *)(v67 + 12 + v74);
        v74 += 4;
      }
      while (v74 != 12);
      memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v67 + 24), 4 * v76);
      uint64_t v68 = *(void **)(a1 + 912);
    }
    else
    {
      std::string::size_type v75 = 0;
      std::string::size_type size = 0;
    }
    int v201 = BNNSFilterApplyBatch(v68, a5, *(const void **)(v311 + 24), a7, *(void **)(v67 + 24), v35);
    if (v201)
    {
      std::to_string(&v319, v201);
      if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v295 = &v319;
      }
      else {
        long long v295 = (std::string *)v319.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v295);
    }
    std::string::size_type v202 = v313;
    if (*(_DWORD *)(a1 + 348))
    {
      uint64_t v203 = 0;
      vDSP_Length v204 = *(int *)(v313 + 8);
      do
      {
        v204 *= *(int *)(v313 + 12 + v203);
        v203 += 4;
      }
      while (v203 != 12);
      vDSP_vadd(*(const float **)(v75 + 24), 1, *(const float **)(v313 + 24), 1, *(float **)(v313 + 24), 1, v204);
    }
    uint64_t v183 = v314;
    v319.__r_.__value_.__r.__words[0] = v202;
    v319.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
    if (v314) {
      atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    if (!v310)
    {
      int v162 = *(void **)(a1 + 912);
      if (!v162)
      {
        *(void *)(a1 + 920) = v23;
        size_t v163 = *(unsigned int *)(a1 + 308);
        size_t v164 = *(unsigned int *)(a1 + 304);
        long long v165 = *(_OWORD *)(a1 + 400);
        long long v325 = *(_OWORD *)(a1 + 384);
        long long v326 = v165;
        long long v327 = *(_OWORD *)(a1 + 416);
        int v328 = *(_DWORD *)(a1 + 432);
        long long v166 = *(_OWORD *)(a1 + 336);
        long long v321 = *(_OWORD *)(a1 + 320);
        long long v322 = v166;
        long long v167 = *(_OWORD *)(a1 + 368);
        long long v323 = *(_OWORD *)(a1 + 352);
        long long v324 = v167;
        long long v320 = *(_OWORD *)(a1 + 304);
        int v162 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v163, v164, (uint64_t)&v320, v23, v309, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat32, *(void *)(a1 + 976));
        *(void *)(a1 + 912) = v162;
        std::string::size_type v67 = v313;
      }
      if (*(_DWORD *)(a1 + 348))
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v67 + 8);
        uint64_t v168 = 0;
        std::string::size_type v123 = v319.__r_.__value_.__l.__size_;
        std::string::size_type v169 = v319.__r_.__value_.__r.__words[0];
        uint64_t v170 = *(int *)(v67 + 8);
        do
        {
          v170 *= *(int *)(v67 + 12 + v168);
          v168 += 4;
        }
        while (v168 != 12);
        memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v67 + 24), 4 * v170);
        int v162 = *(void **)(a1 + 912);
      }
      else
      {
        std::string::size_type v123 = 0;
        std::string::size_type v169 = 0;
      }
      int v260 = BNNSFilterApplyBatch(v162, a5, *(const void **)(v311 + 24), a7, *(void **)(v67 + 24), a6);
      if (v260)
      {
        std::to_string(&v319, v260);
        if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v302 = &v319;
        }
        else {
          int v302 = (std::string *)v319.__r_.__value_.__r.__words[0];
        }
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v302);
      }
      if (*(_DWORD *)(a1 + 348))
      {
        uint64_t v261 = 0;
        unint64_t v239 = *(const float **)(v169 + 24);
        int v240 = *(const float **)(v313 + 24);
        vDSP_Length v241 = *(int *)(v313 + 8);
        do
        {
          v241 *= *(int *)(v313 + 12 + v261);
          v261 += 4;
        }
        while (v261 != 12);
        goto LABEL_322;
      }
      goto LABEL_323;
    }
    unint64_t v95 = *(void **)(a1 + 912);
    if (!v95)
    {
      *(void *)(a1 + 920) = v23;
      size_t v96 = *(unsigned int *)(a1 + 308);
      size_t v97 = *(unsigned int *)(a1 + 304);
      long long v98 = *(_OWORD *)(a1 + 400);
      long long v325 = *(_OWORD *)(a1 + 384);
      long long v326 = v98;
      long long v327 = *(_OWORD *)(a1 + 416);
      int v328 = *(_DWORD *)(a1 + 432);
      long long v99 = *(_OWORD *)(a1 + 336);
      long long v321 = *(_OWORD *)(a1 + 320);
      long long v322 = v99;
      long long v100 = *(_OWORD *)(a1 + 368);
      long long v323 = *(_OWORD *)(a1 + 352);
      long long v324 = v100;
      long long v320 = *(_OWORD *)(a1 + 304);
      unint64_t v95 = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,true>(v96, v97, (uint64_t)&v320, v23, v310, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65552, BNNSDataTypeFloat32, *(void *)(a1 + 976));
      *(void *)(a1 + 912) = v95;
      std::string::size_type v67 = v313;
    }
    if (*(_DWORD *)(a1 + 348))
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v319, v67 + 8);
      uint64_t v101 = 0;
      std::string::size_type size = v319.__r_.__value_.__l.__size_;
      std::string::size_type v102 = v319.__r_.__value_.__r.__words[0];
      uint64_t v103 = *(int *)(v67 + 8);
      do
      {
        v103 *= *(int *)(v67 + 12 + v101);
        v101 += 4;
      }
      while (v101 != 12);
      memcpy(*(void **)(v319.__r_.__value_.__r.__words[0] + 24), *(const void **)(v67 + 24), 4 * v103);
      unint64_t v95 = *(void **)(a1 + 912);
    }
    else
    {
      std::string::size_type v102 = 0;
      std::string::size_type size = 0;
    }
    int v205 = BNNSFilterApplyBatch(v95, a5, *(const void **)(v311 + 24), a7, *(void **)(v67 + 24), v35);
    if (v205)
    {
      std::to_string(&v319, v205);
      if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v296 = &v319;
      }
      else {
        long long v296 = (std::string *)v319.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int &>("BNNS Error %s", (uint64_t)v296);
    }
    std::string::size_type v206 = v313;
    if (*(_DWORD *)(a1 + 348))
    {
      uint64_t v207 = 0;
      vDSP_Length v208 = *(int *)(v313 + 8);
      do
      {
        v208 *= *(int *)(v313 + 12 + v207);
        v207 += 4;
      }
      while (v207 != 12);
      vDSP_vadd(*(const float **)(v102 + 24), 1, *(const float **)(v313 + 24), 1, *(float **)(v313 + 24), 1, v208);
    }
    uint64_t v183 = v314;
    v319.__r_.__value_.__r.__words[0] = v206;
    v319.__r_.__value_.__l.__size_ = (std::string::size_type)v314;
    if (v314) {
      atomic_fetch_add_explicit(&v314->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(a1, (uint64_t *)&v319, (__int16 *)v310, a5, v35);
LABEL_345:
  if (v183) {
    nitro::nitro_function::nitro_function(v183);
  }
  if (size)
  {
    v276 = (std::__shared_weak_count *)size;
LABEL_374:
    nitro::nitro_function::nitro_function(v276);
  }
LABEL_375:
  if (v312) {
    nitro::nitro_function::nitro_function(v312);
  }
  if (v314) {
    nitro::nitro_function::nitro_function(v314);
  }
  if (v316) {
    nitro::nitro_function::nitro_function(v316);
  }
  v290 = v318;
  if (v318)
  {
    nitro::nitro_function::nitro_function(v290);
  }
}

void sub_19219D608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v29) {
    nitro::nitro_function::nitro_function(v29);
  }
  if (a17) {
    nitro::nitro_function::nitro_function(a17);
  }
  if (a19) {
    nitro::nitro_function::nitro_function(a19);
  }
  if (a21) {
    nitro::nitro_function::nitro_function(a21);
  }
  if (a23) {
    nitro::nitro_function::nitro_function(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,false>(void *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2 && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), result == 1))
  {
    uint64_t v5 = *(void *)(*a2 + 184);
    *a1 = *(void *)(*a2 + 176);
    a1[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t Espresso::inline_get_cpu_blob<Espresso::blob<int,4>,false>(void *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2 && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result), result == 3))
  {
    uint64_t v5 = *(void *)(*a2 + 216);
    *a1 = *(void *)(*a2 + 208);
    a1[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t Espresso::get_shape_kernel_cpu::__compute<Espresso::blob<float,4>,float>(uint64_t result, uint64_t a2, Espresso::layer_shape *a3)
{
  uint64_t v4 = result;
  if (*(_DWORD *)(result + 284))
  {
    uint64_t result = Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v12, a3, 0);
    uint64_t v5 = *(int *)(v4 + 280);
    if (v5 == -1)
    {
      uint64_t v8 = v13;
      if (v13)
      {
        uint64_t v9 = *(float **)(*(void *)a2 + 24);
        uint64_t v10 = v12;
        do
        {
          int v11 = *v10++;
          *v9++ = (float)v11;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      int v6 = v12[v5];
LABEL_4:
      **(float **)(*(void *)a2 + 24) = (float)v6;
    }
  }
  else
  {
    switch(*(_DWORD *)(result + 280))
    {
      case 0xFFFFFFFF:
        uint64_t v7 = *(float32x4_t **)(*(void *)a2 + 24);
        *uint64_t v7 = vcvtq_f32_s32(*(int32x4_t *)a3);
        v7[1].f32[0] = (float)*((int *)a3 + 4);
        break;
      case 0:
        int v6 = *(_DWORD *)a3;
        goto LABEL_4;
      case 1:
        int v6 = *((_DWORD *)a3 + 1);
        goto LABEL_4;
      case 2:
        int v6 = *((_DWORD *)a3 + 2);
        goto LABEL_4;
      case 3:
        int v6 = *((_DWORD *)a3 + 3);
        goto LABEL_4;
      case 4:
        int v6 = *((_DWORD *)a3 + 4);
        goto LABEL_4;
      default:
        return result;
    }
  }
  return result;
}

void Espresso::AOT::ValidationResult::~ValidationResult(Espresso::AOT::ValidationResult *this)
{
  Espresso::AOT::ValidationResult::~ValidationResult(this);

  JUMPOUT(0x192FF16B0);
}

{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void *v8;

  *(void *)this = &unk_1EE36B1D0;
  uint64_t v2 = (void **)*((void *)this + 9);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 5);
    int v6 = (void *)*((void *)this + 4);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0) {
          operator delete(*(void **)(v5 - 24));
        }
        v5 -= 32;
      }
      while (v5 != v4);
      int v6 = (void *)*((void *)this + 4);
    }
    *((void *)this + 5) = v4;
    operator delete(v6);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

uint64_t Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5 = a3;
  Espresso::context_metal::context_metal(a1, a2, v5);
  *(void *)a1 = &unk_1EE3774A0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 44) = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v15);
  int v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v15;
  if (v6) {
    nitro::nitro_function::nitro_function(v6);
  }
  [*(id *)(a1 + 160) setKernelPrefix:@"TARR_"];
  if ((**(unsigned int (***)(void))*a2)() != 50002)
  {
    int v12 = 50002;
    Espresso::abstract_engine_factory::shared(&v15);
    Espresso::abstract_engine_factory::engine_for_platform(v15, &v12, &v13);
    if (*((void *)&v15 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v15 + 1));
    }
    uint64_t v7 = operator new(0x110uLL);
    v7[1] = 0;
    unsigned char v7[2] = 0;
    *uint64_t v7 = &unk_1EE384718;
    uint64_t v8 = Espresso::MPSEngine::context::context<objc_object  {objcproto9MTLDevice}* {__strong}>(v7 + 3, &v13, v5);
    void v7[3] = &unk_1EE33D800;
    *((_WORD *)v7 + 132) = 1;
    *((unsigned char *)v7 + 68) = 1;
    *((unsigned char *)v7 + 80) = 1;
    *(void *)&long long v9 = v8;
    *((void *)&v9 + 1) = v7;
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 232);
    *(_OWORD *)(a1 + 224) = v9;
    if (v10) {
      nitro::nitro_function::nitro_function(v10);
    }
    if (v14) {
      nitro::nitro_function::nitro_function(v14);
    }
    *(unsigned char *)(*(void *)(a1 + 224) + 240) = 0;
  }

  return a1;
}

void sub_19219DC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17 = v16;
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 232);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  Espresso::context_metal::~context_metal((id *)v15);

  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::context::context<int>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = Espresso::context_metal::context_metal(a1, a2, a3);
  *(void *)uint64_t v6 = &unk_1EE3774A0;
  *(void *)(v6 + 224) = 0;
  uint64_t v7 = v6 + 224;
  *(void *)(v6 + 232) = 0;
  *(unsigned char *)(v6 + 44) = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v17);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v17;
  if (v8) {
    nitro::nitro_function::nitro_function(v8);
  }
  [*(id *)(a1 + 160) setKernelPrefix:@"TARR_"];
  if ((**(unsigned int (***)(void))*a2)() != 50002)
  {
    int v14 = 50002;
    Espresso::abstract_engine_factory::shared(&v17);
    Espresso::abstract_engine_factory::engine_for_platform(v17, &v14, &v15);
    if (*((void *)&v17 + 1)) {
      nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v17 + 1));
    }
    long long v9 = operator new(0x110uLL);
    v9[1] = 0;
    void v9[2] = 0;
    *long long v9 = &unk_1EE384718;
    uint64_t v10 = Espresso::MPSEngine::context::context<int>(v9 + 3, &v15, a3);
    void v9[3] = &unk_1EE33D800;
    *((_WORD *)v9 + 132) = 1;
    *((unsigned char *)v9 + 68) = 1;
    *((unsigned char *)v9 + 80) = 1;
    *(void *)&long long v11 = v10;
    *((void *)&v11 + 1) = v9;
    int v12 = *(std::__shared_weak_count **)(a1 + 232);
    *(_OWORD *)(a1 + 224) = v11;
    if (v12) {
      nitro::nitro_function::nitro_function(v12);
    }
    if (v16) {
      nitro::nitro_function::nitro_function(v16);
    }
    *(unsigned char *)(*(void *)v7 + 240) = 0;
  }
  return a1;
}

void sub_19219DE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  if (a12) {
    nitro::nitro_function::nitro_function(a12);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v14 + 232);
  if (v18) {
    nitro::nitro_function::nitro_function(v18);
  }
  Espresso::context_metal::~context_metal((id *)v14);
  _Unwind_Resume(a1);
}

double _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x178uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1EE382ED0;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  Espresso::wisdom_trainer2::wisdom_trainer2((uint64_t)(v2 + 24), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v2[176] = 0;
  *(void *)(v2 + 180) = 0;
  *((_WORD *)v2 + 94) = 256;
  *((void *)v2 + 26) = 0;
  *((void *)v2 + 25) = 0;
  *((void *)v2 + 24) = v2 + 200;
  *((void *)v2 + 28) = 0;
  *((void *)v2 + 29) = 0;
  *((void *)v2 + 32) = 0;
  *((void *)v2 + 33) = 0;
  *((void *)v2 + 30) = 0;
  *((void *)v2 + 31) = v2 + 256;
  double result = 0.0;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((void *)v2 + 46) = 0;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_19219DFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::wisdom_trainer2::wisdom_trainer2(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = 1006834287;
  *(_DWORD *)(a1 + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 32), "");
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 0;
  std::string::operator=((std::string *)(a1 + 56), a2);
  *(void *)a1 = 0x200000002;
  *(_DWORD *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 144) = 0;
  uint64_t v4 = getenv("ESPRESSO_TUNELOG");
  if (v4) {
    *(void *)(a1 + 136) = fopen(v4, "w");
  }
  return a1;
}

void sub_19219E100(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 120) = v6;
    operator delete(v6);
  }
  std::__tree<std::__value_type<std::string,std::vector<int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<int>>>>::destroy(*(void **)(v1 + 96));
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::context_metal(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = Espresso::abstract_context::abstract_context(a1, a2);
  *(void *)uint64_t v5 = &unk_1EE32B9E0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 160) = 0;
  *(_DWORD *)(v5 + 168) = 1082130432;
  *(unsigned char *)(v5 + 172) = 0;
  *(void *)(v5 + 176) = 1;
  *(unsigned char *)(v5 + 184) = 0;
  *(_DWORD *)(v5 + 188) = 1;
  *(void *)(v5 + 200) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 192) = 0;
  *(_DWORD *)(v5 + 216) = 0;
  *(_DWORD *)(v5 + 152) = a3;
  *(_DWORD *)(v5 + 156) = 8;
  id v6 = MTLCreateSystemDefaultDevice();
  uint64_t v7 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v6;

  Espresso::context_metal::setup(a1, 0);
  return a1;
}

void sub_19219E1EC(_Unwind_Exception *a1)
{
  Espresso::abstract_context::~abstract_context(v1);
  _Unwind_Resume(a1);
}

void Espresso::context_metal::setup(uint64_t a1, void *a2)
{
  id v11 = a2;
  if (!*(void *)(a1 + 144)) {
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  }
  pthread_mutex_lock(&Espresso::g_mutex);
  id v3 = [*(id *)(a1 + 144) name];
  uint64_t v4 = [v3 UTF8String];

  if (v4)
  {
    id v5 = [*(id *)(a1 + 144) name];
    strncpy(Espresso::context_metal::last_device_name, (const char *)[v5 UTF8String], 0xFFuLL);

    byte_1EB4A33BF = 0;
  }
  pthread_mutex_unlock(&Espresso::g_mutex);
  if (v11) {
    id v6 = v11;
  }
  else {
    id v6 = (id)[*(id *)(a1 + 144) newCommandQueueWithMaxCommandBufferCount:*(int *)(a1 + 156)];
  }
  uint64_t v7 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v6;

  if (!*(void *)(a1 + 192))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: can't create metal command queue");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(unsigned char *)(a1 + 184) = [*(id *)(a1 + 144) supportsFeatureSet:4] ^ 1;
  uint64_t v8 = [[EspressoMetalKernelsCache alloc] initWithDevice:*(void *)(a1 + 144)];
  long long v9 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = v8;
}

void sub_19219E390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void sub_19219E4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Espresso::context_metal::context_metal(uint64_t a1, uint64_t *a2, void *a3)
{
  id v6 = a3;
  Espresso::abstract_context::abstract_context(a1, a2);
  *(void *)a1 = &unk_1EE32B9E0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x800000000;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1082130432;
  *(unsigned char *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = 1;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  objc_storeStrong((id *)(a1 + 144), a3);
  *(_DWORD *)(a1 + 152) = -1;
  if (!*(void *)(a1 + 144)) {
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  }
  Espresso::context_metal::setup(a1, 0);

  return a1;
}

{
  id v5;
  uint64_t v6;
  void *v7;

  id v5 = a3;
  Espresso::abstract_context::abstract_context(a1, a2);
  *(void *)a1 = &unk_1EE32B9E0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0x800000000;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 1082130432;
  *(unsigned char *)(a1 + 172) = 0;
  *(void *)(a1 + 176) = 1;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 188) = 1;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  id v6 = [v5 device];
  uint64_t v7 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = v6;

  *(_DWORD *)(a1 + 152) = -1;
  if (!*(void *)(a1 + 144)) {
    Espresso::throw_exception_selector<Espresso::device_not_found_error>("Can't find metal device");
  }
  Espresso::context_metal::setup(a1, v5);

  return a1;
}

void sub_19219E5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Espresso::abstract_engine_factory::abstract_engine_factory(Espresso::abstract_engine_factory *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 4) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = (char *)this + 32;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = (char *)this + 80;
  operator new();
}

void sub_19219F038(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v3);
  nitro::nitro_function::nitro_function(v3);
  std::recursive_mutex::unlock(v2);
  std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100](v1, 0);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*v7);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v6);
  std::__tree<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::shared_ptr<Espresso::abstract_engine>>>>::destroy(*v5);
  std::__tree<int>::destroy(*v4);
  _Unwind_Resume(a1);
}

void sub_19219F12C()
{
}

void Espresso::abstract_engine_factory::register_engine(uint64_t a1, uint64_t (****a2)(void))
{
  int v4 = (***a2)();
  int v5 = v4;
  uint64_t v7 = (uint64_t **)(a1 + 32);
  id v6 = *(char **)(a1 + 32);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v6;
        int v9 = *((_DWORD *)v6 + 8);
        if (v4 >= v9) {
          break;
        }
        id v6 = *(char **)v8;
        uint64_t v7 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= v4) {
        break;
      }
      id v6 = (char *)*((void *)v8 + 1);
      if (!v6)
      {
        uint64_t v7 = (uint64_t **)(v8 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v8 = (char *)(a1 + 32);
LABEL_9:
    uint64_t v10 = v8;
    uint64_t v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = v5;
    *((void *)v8 + 5) = 0;
    *((void *)v8 + 6) = 0;
    *(void *)uint64_t v8 = 0;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = v10;
    *uint64_t v7 = (uint64_t *)v8;
    uint64_t v11 = **(void **)(a1 + 24);
    int v12 = (uint64_t *)v8;
    if (v11)
    {
      *(void *)(a1 + 24) = v11;
      int v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v12);
    ++*(void *)(a1 + 40);
  }
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v8 + 6);
  *((void *)v8 + 5) = v14;
  *((void *)v8 + 6) = v13;
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  BOOL v16 = (char *)(**a2)[2]();
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  uint64_t v18 = (uint64_t **)(a1 + 56);
  long long v17 = *(uint64_t **)(a1 + 56);
  if (v17)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v18 = (uint64_t **)v17;
        BOOL v19 = v17 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v17 + 4)) {
          break;
        }
        long long v17 = *v18;
        uint64_t v20 = v18;
        if (!*v18) {
          goto LABEL_24;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, __p)) {
        break;
      }
      uint64_t v20 = v18 + 1;
      long long v17 = v18[1];
      if (!v17) {
        goto LABEL_24;
      }
    }
    BOOL v21 = v18;
  }
  else
  {
    uint64_t v20 = (uint64_t **)(a1 + 56);
LABEL_24:
    BOOL v21 = operator new(0x48uLL);
    *((_OWORD *)v21 + 2) = *(_OWORD *)__p;
    uint64_t v22 = v29;
    __p[1] = 0;
    uint64_t v29 = 0;
    __p[0] = 0;
    *((void *)v21 + 7) = 0;
    *((void *)v21 + 8) = 0;
    *((void *)v21 + 6) = v22;
    *(void *)BOOL v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v18;
    *uint64_t v20 = (uint64_t *)v21;
    uint64_t v23 = **(void **)(a1 + 48);
    uint64_t v24 = (uint64_t *)v21;
    if (v23)
    {
      *(void *)(a1 + 48) = v23;
      uint64_t v24 = *v20;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v24);
    ++*(void *)(a1 + 64);
  }
  int v26 = *a2;
  uint64_t v25 = a2[1];
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v25 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)v21 + 8);
  *((void *)v21 + 7) = v26;
  *((void *)v21 + 8) = v25;
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  ((void (*)(uint64_t (***)(void), uint64_t))(**a2)[8])(*a2, a1);
  if ((***a2)() != 10007
    && (***a2)() != 10006
    && (***a2)() != 10008
    && (***a2)() != 10009
    && (***a2)() != 10011)
  {
    Espresso::abstract_engine_factory::register_kernel_class(a1, "brick", (void (***)(void))*a2, &__block_literal_global_44_7312);
  }
}

void sub_19219F504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSGraphCompilerEngine::engine::platform(Espresso::MPSGraphCompilerEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::MPSGraphEngine::engine::platform(Espresso::MPSGraphEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::ANECompilerEngine::engine::platform(Espresso::ANECompilerEngine::engine *this)
{
  return 10008;
}

uint64_t Espresso::DummyMPSGraphEngine::engine::platform(Espresso::DummyMPSGraphEngine::engine *this)
{
  return 50006;
}

uint64_t Espresso::MetalLowmemEngine::engine::platform(Espresso::MetalLowmemEngine::engine *this)
{
  return 20000;
}

uint64_t Espresso::MPSBuffersEngine::engine::platform(Espresso::MPSBuffersEngine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::DummyMPSBuffersEngine::engine::platform(Espresso::DummyMPSBuffersEngine::engine *this)
{
  return 50003;
}

uint64_t Espresso::V9Engine::engine::platform(Espresso::V9Engine::engine *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t Espresso::HXSimEngine::engine::platform(Espresso::HXSimEngine::engine *this)
{
  return 6;
}

uint64_t Espresso::CVAEngine::engine::platform(Espresso::CVAEngine::engine *this)
{
  return 7;
}

uint64_t Espresso::HXEngine::engine::platform(Espresso::HXEngine::engine *this)
{
  return 5;
}

void Espresso::ANERuntimeEngine::engine::register_kernels(Espresso::ANERuntimeEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_26028);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_18);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_21_26031);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_24_26033);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_27_26035);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_30_26037);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_33);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_36_26040);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(void))this, &__block_literal_global_39);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_42);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_45);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_48);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_51);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_54);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_57);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_60_26049);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_63_26051);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_66_26053);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_69);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(void))this, &__block_literal_global_72);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(void))this, &__block_literal_global_75);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(void))this, &__block_literal_global_78);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_81);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(void))this, &__block_literal_global_84);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(void))this, &__block_literal_global_87_26061);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_90_26063);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_93_26065);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_96_26067);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_99_26069);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(void))this, &__block_literal_global_102_26071);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(void))this, &__block_literal_global_105_26073);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(void))this, &__block_literal_global_108_26075);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(void))this, &__block_literal_global_111_26077);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(void))this, &__block_literal_global_114_26079);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_117_26081);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_120_26083);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_123);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(void))this, &__block_literal_global_126);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_129);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_132);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_135);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_140_26090);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_143_26092);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_146_26094);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_149_26096);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_152_26098);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_155_26100);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_158_26102);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_161_26104);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(void))this, &__block_literal_global_164_26106);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_167_26108);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_170_26110);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_173_26112);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_176_26114);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(void))this, &__block_literal_global_179_26116);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_182_26118);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(void))this, &__block_literal_global_185_26120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_188_26122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_191_26124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(void))this, &__block_literal_global_194_26126);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(void))this, &__block_literal_global_197_26128);
}

const char *Espresso::MPSEngine::engine::name(Espresso::MPSEngine::engine *this)
{
  return "MPS";
}

std::recursive_mutex *std::unique_ptr<std::recursive_mutex>::reset[abi:ne180100](std::recursive_mutex **a1, std::recursive_mutex *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::recursive_mutex::~recursive_mutex(result);
    JUMPOUT(0x192FF16B0);
  }
  return result;
}

void Espresso::MPSEngine::engine::register_kernels(Espresso::MPSEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_28793);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_43_28795);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_46_28797);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_49_28799);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_52_28801);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_55_28803);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_58_28805);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_61_28807);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(void))this, &__block_literal_global_64_28809);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_67_28811);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_70_28813);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_73_28815);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_76_28817);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_79_28819);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_82_28821);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_85_28823);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_88_28825);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_91_28827);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_94_28829);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_97_28831);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_100_28833);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_103_28835);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_106_28837);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_109_28839);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(void))this, &__block_literal_global_112_28841);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(void))this, &__block_literal_global_115_28843);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(void))this, &__block_literal_global_118_28845);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(void))this, &__block_literal_global_121_28847);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(void))this, &__block_literal_global_124_28849);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(void))this, &__block_literal_global_127_28851);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_130_28853);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_133_28855);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_136_28857);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_139_28859);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(void))this, &__block_literal_global_142_28861);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(void))this, &__block_literal_global_144_28862);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(void))this, &__block_literal_global_146_28863);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(void))this, &__block_literal_global_149_28865);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(void))this, &__block_literal_global_152_28867);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(void))this, &__block_literal_global_155_28869);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation_grad", (void (***)(void))this, &__block_literal_global_158_28871);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(void))this, &__block_literal_global_161_28873);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(void))this, &__block_literal_global_164_28875);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(void))this, &__block_literal_global_167_28877);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(void))this, &__block_literal_global_170_28879);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(void))this, &__block_literal_global_173_28881);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_loss_grad", (void (***)(void))this, &__block_literal_global_176_28883);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(void))this, &__block_literal_global_179_28885);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(void))this, &__block_literal_global_182_28887);
}

const char *Espresso::CVAEngine::engine::name(Espresso::CVAEngine::engine *this)
{
  return "CVA";
}

void Espresso::CVAEngine::engine::register_kernels(Espresso::CVAEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_4828);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_7_4830);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_10_4832);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_13_4834);
}

const char *Espresso::V9Engine::engine::name(Espresso::V9Engine::engine *this)
{
  return "V9";
}

void Espresso::V9Engine::engine::register_kernels(Espresso::V9Engine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_47_19452);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_50_19454);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_53_19456);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_56_19458);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_59_19460);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_62_19462);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_65_19464);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_68_19466);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(void))this, &__block_literal_global_71_19468);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_74_19470);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_77_19472);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_80_19474);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_83_19476);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_86_19478);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_89_19480);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_92_19482);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_95_19484);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "noise", (void (***)(void))this, &__block_literal_global_98_19486);
}

const char *Espresso::IREngine::engine::name(Espresso::IREngine::engine *this)
{
  return "IREngine";
}

const char *Espresso::HXEngine::engine::name(Espresso::HXEngine::engine *this)
{
  return "HX";
}

void Espresso::HXEngine::engine::register_kernels(Espresso::HXEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_25092);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_21);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_24);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_27_25096);
}

void Espresso::abstract_engine_factory::set_compatible_fallback_platform(uint64_t **a1, int a2, int a3)
{
  id v6 = (std::recursive_mutex *)a1[12];
  std::recursive_mutex::lock(v6);
  uint64_t v8 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        int v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 7);
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= a2)
      {
        uint64_t v13 = v9;
        goto LABEL_13;
      }
      uint64_t v7 = v9[1];
    }
    while (v7);
    uint64_t v8 = v9 + 1;
  }
  else
  {
    int v9 = a1 + 1;
  }
LABEL_10:
  uint64_t v13 = operator new(0x28uLL);
  v13[7] = a2;
  char v13[8] = 0;
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = v9;
  *uint64_t v8 = (uint64_t *)v13;
  uint64_t v11 = (uint64_t *)**a1;
  int v12 = (uint64_t *)v13;
  if (v11)
  {
    *a1 = v11;
    int v12 = *v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_13:
  char v13[8] = a3;

  std::recursive_mutex::unlock(v6);
}

void sub_1921A06F0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const char *Espresso::MPSGraphCompilerEngine::engine::name(Espresso::MPSGraphCompilerEngine::engine *this)
{
  return "MPSGRAPH_COMPILER";
}

void Espresso::MPSGraphCompilerEngine::engine::register_kernels(Espresso::MPSGraphCompilerEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_13908);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_4_13910);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_7_13912);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_10_13914);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_13_13916);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_16_13918);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_19_13920);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_22_13922);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_25_13924);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_28_13926);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_31_13928);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_34_13930);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_37_13932);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_40_13934);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_43_13936);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_46_13938);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_49_13940);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_52_13942);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_55_13944);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_58_13946);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_61_13948);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_64_13950);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_67_13952);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_70_13954);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_73_13956);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(void))this, &__block_literal_global_76_13958);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_79_13960);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(void))this, &__block_literal_global_82_13962);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_85_13964);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_88_13966);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_91_13968);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_94_13970);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_97_13972);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(void))this, &__block_literal_global_100_13974);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(void))this, &__block_literal_global_103_13976);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_106_13978);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_109_13980);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_112_13982);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_115_13984);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_118_13986);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_121_13988);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_124_13990);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_127_13992);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_130_13994);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_133_13996);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_136_13998);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_139_14000);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_142_14002);
}

const char *Espresso::DummyMPSBuffersEngine::engine::name(Espresso::DummyMPSBuffersEngine::engine *this)
{
  return "DummyMPSBuffersEngine";
}

void Espresso::DummyMPSBuffersEngine::engine::register_kernels(Espresso::DummyMPSBuffersEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_89);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_91);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_93);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_95);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_98);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_100);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_102);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_104);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_106);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_108);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(void))this, &__block_literal_global_111);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_114);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_116);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_119);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(void))this, &__block_literal_global_122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(void))this, &__block_literal_global_125);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(void))this, &__block_literal_global_128);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_131);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_133);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_136);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(void))this, &__block_literal_global_139);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(void))this, &__block_literal_global_142);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_144);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_147);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_149);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_152);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_155);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_158);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_161);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_163);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_166);
}

const char *Espresso::DummyMPSGraphEngine::engine::name(Espresso::DummyMPSGraphEngine::engine *this)
{
  return "DummyMPSGraphEngine";
}

void Espresso::DummyMPSGraphEngine::engine::register_kernels(Espresso::DummyMPSGraphEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_168);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_170);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_172);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_174);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_179);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_181);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_183);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_186);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_188);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_190);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_193);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_195);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_197);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_200);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_202);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_204);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_206);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_208);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_210);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_212);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_214);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_216);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_218);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_220);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(void))this, &__block_literal_global_223);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_225);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(void))this, &__block_literal_global_228);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_230);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_233);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_235);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_237);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_240);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(void))this, &__block_literal_global_243);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(void))this, &__block_literal_global_246);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_248);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_250);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_252);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_254);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_256);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_258);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_260);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_263);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_266);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_268);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_271);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_273);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_275);
}

const char *Espresso::MetalLowmemEngine::engine::name(Espresso::MetalLowmemEngine::engine *this)
{
  return "METAL_LOWMEM";
}

void Espresso::MetalLowmemEngine::engine::register_kernels(Espresso::MetalLowmemEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_28389);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_29_28391);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_32_28393);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_35_28395);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_38_28397);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_41_28399);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_44_28401);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_47_28403);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_50_28405);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_53_28407);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_augment", (void (***)(void))this, &__block_literal_global_56_28409);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dropout_augment_join", (void (***)(void))this, &__block_literal_global_59_28411);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn", (void (***)(void))this, &__block_literal_global_62_28413);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_65_28415);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_68_28417);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_71_28419);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_74_28421);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_77_28423);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_80_28425);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "meta_convolution", (void (***)(void))this, &__block_literal_global_83_28427);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "wg_tx_out", (void (***)(void))this, &__block_literal_global_86_28429);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "wg_tx_in", (void (***)(void))this, &__block_literal_global_89_28431);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_92_28433);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(void))this, &__block_literal_global_95_28435);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(void))this, &__block_literal_global_98_28437);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(void))this, &__block_literal_global_101_28439);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(void))this, &__block_literal_global_104_28441);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(void))this, &__block_literal_global_107_28443);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(void))this, &__block_literal_global_110_28445);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(void))this, &__block_literal_global_113_28447);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(void))this, &__block_literal_global_116_28449);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat_grad", (void (***)(void))this, &__block_literal_global_119_28451);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bias_grad", (void (***)(void))this, &__block_literal_global_121_28452);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm_grad", (void (***)(void))this, &__block_literal_global_124_28454);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(void))this, &__block_literal_global_127_28456);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(void))this, &__block_literal_global_130_28458);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise_grad", (void (***)(void))this, &__block_literal_global_133_28460);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "axpby", (void (***)(void))this, &__block_literal_global_136_28462);
}

const char *Espresso::ANECompilerEngine::engine::name(Espresso::ANECompilerEngine::engine *this)
{
  return "ANE_COMPILER";
}

void Espresso::ANECompilerEngine::engine::register_kernels(Espresso::ANECompilerEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_203_11570);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_206_11572);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_208_11573);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_211);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_213);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_215_11575);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_218_11576);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_220_11577);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(void))this, &__block_literal_global_223_11579);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_226);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_229);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_232);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_234);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_236_11582);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_239_11584);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_242_11586);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_245_11588);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_248_11589);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_op", (void (***)(void))this, &__block_literal_global_250_11590);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tunneled_ane_unit", (void (***)(void))this, &__block_literal_global_253);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "plane_rw", (void (***)(void))this, &__block_literal_global_256_11593);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "degamma", (void (***)(void))this, &__block_literal_global_259);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_261);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_264);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(void))this, &__block_literal_global_267);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_270);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_272_11598);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_275_11600);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(void))this, &__block_literal_global_278_11602);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(void))this, &__block_literal_global_281_11604);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(void))this, &__block_literal_global_284_11606);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resize_nearest_neighbor", (void (***)(void))this, &__block_literal_global_287_11608);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "resample", (void (***)(void))this, &__block_literal_global_290_11610);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_293_11612);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_296_11614);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_299_11616);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_302_11618);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_304);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "broadcast", (void (***)(void))this, &__block_literal_global_306);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_308_11619);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_310);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_313);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_315);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_318);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_321);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_324);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_327);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_330);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_332_11625);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_335_11627);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_338_11629);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconv3d", (void (***)(void))this, &__block_literal_global_341_11631);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_344_11632);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_347_11634);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_350_11636);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_353_11638);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(void))this, &__block_literal_global_356_11640);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_359_11642);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(void))this, &__block_literal_global_362_11644);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sequence_repeat", (void (***)(void))this, &__block_literal_global_365_11646);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_batch", (void (***)(void))this, &__block_literal_global_368_11648);
}

const char *Espresso::MPSBuffersEngine::engine::name(Espresso::MPSBuffersEngine::engine *this)
{
  return "MPS_BUFFERS";
}

void Espresso::MPSBuffersEngine::engine::register_kernels(Espresso::MPSBuffersEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_9662);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_34_9663);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_37_9665);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_40_9667);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_43_9669);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_46_9671);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_49_9673);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_52_9675);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_55_9677);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_58_9679);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(void))this, &__block_literal_global_61_9681);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_64_9683);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_66);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_68_9684);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_70_9685);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(void))this, &__block_literal_global_73_9687);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(void))this, &__block_literal_global_76_9689);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(void))this, &__block_literal_global_79_9691);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_82_9693);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_85_9695);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_88_9697);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_91_9699);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(void))this, &__block_literal_global_94_9701);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_97_9703);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(void))this, &__block_literal_global_100_9705);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_103_9707);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_106_9709);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_109_9711);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_112_9713);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_115_9715);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_118_9717);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_121_9719);
}

const char *Espresso::ANERuntimeEngine::engine::name(Espresso::ANERuntimeEngine::engine *this)
{
  return "ANE_RUNTIME";
}

const char *Espresso::ANERuntimeEngine::direct_engine::name(Espresso::ANERuntimeEngine::direct_engine *this)
{
  return "ANE_RUNTIME_DIRECT";
}

const char *Espresso::DummyBNNSEngine::engine::name(Espresso::DummyBNNSEngine::engine *this)
{
  return "DummyBNNS";
}

const char *Espresso::QuantSimEngine::engine::name(Espresso::QuantSimEngine::engine *this)
{
  return "QUANT_SIM";
}

void Espresso::QuantSimEngine::engine::register_kernels(Espresso::QuantSimEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_12120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_4_12122);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_7_12124);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_10_12126);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_13_12128);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_16_12130);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_19_12132);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_22_12134);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_25_12136);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_28_12138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_31_12140);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_34_12142);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_37_12144);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_40_12146);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_43_12148);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_46_12150);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_49_12152);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_52_12154);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_55_12156);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_58_12158);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_61_12160);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "quantized_gather", (void (***)(void))this, &__block_literal_global_64_12162);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "spatial_transformer", (void (***)(void))this, &__block_literal_global_67_12164);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_branch", (void (***)(void))this, &__block_literal_global_70_12166);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_jump", (void (***)(void))this, &__block_literal_global_73_12168);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_call", (void (***)(void))this, &__block_literal_global_76_12170);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_return", (void (***)(void))this, &__block_literal_global_79_12172);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "get_shape", (void (***)(void))this, &__block_literal_global_82_12174);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_85_12176);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather", (void (***)(void))this, &__block_literal_global_88_12178);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_90);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "alloc", (void (***)(void))this, &__block_literal_global_93_12180);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(void))this, &__block_literal_global_96);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_dequantize", (void (***)(void))this, &__block_literal_global_99);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_global", (void (***)(void))this, &__block_literal_global_102_12184);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "store_global", (void (***)(void))this, &__block_literal_global_105);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_if", (void (***)(void))this, &__block_literal_global_108_12187);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_loop", (void (***)(void))this, &__block_literal_global_111_12189);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_for", (void (***)(void))this, &__block_literal_global_114_12191);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_end", (void (***)(void))this, &__block_literal_global_117_12193);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cf_else", (void (***)(void))this, &__block_literal_global_120);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_122_12195);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter", (void (***)(void))this, &__block_literal_global_125_12197);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(void))this, &__block_literal_global_128_12199);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "range", (void (***)(void))this, &__block_literal_global_131_12201);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_134_12203);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "matrix_band_part", (void (***)(void))this, &__block_literal_global_137_12205);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_140_12207);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_143_12209);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_146_12211);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_149_12213);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "array_gather", (void (***)(void))this, &__block_literal_global_152_12215);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "multinomial", (void (***)(void))this, &__block_literal_global_155_12217);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "instancenorm_1d", (void (***)(void))this, &__block_literal_global_158_12219);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "phi_virtual", (void (***)(void))this, &__block_literal_global_161_12221);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gumbel_max", (void (***)(void))this, &__block_literal_global_164_12223);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "builtin", (void (***)(void))this, &__block_literal_global_167_12225);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(void))this, &__block_literal_global_170_12227);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_173_12229);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_176_12231);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_179_12233);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_182_12235);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_185_12237);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sliding_windows", (void (***)(void))this, &__block_literal_global_188_12239);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reverse_seq", (void (***)(void))this, &__block_literal_global_191_12241);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cross_entropy", (void (***)(void))this, &__block_literal_global_194_12243);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sgd", (void (***)(void))this, &__block_literal_global_197_12245);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "adam", (void (***)(void))this, &__block_literal_global_200_12247);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "non_maximum_suppression", (void (***)(void))this, &__block_literal_global_203_12249);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_206_12251);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(void))this, &__block_literal_global_209_12253);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonzero", (void (***)(void))this, &__block_literal_global_212_12255);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "precompiled_segment", (void (***)(void))this, &__block_literal_global_215_12257);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(void))this, &__block_literal_global_218_12259);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cumsum", (void (***)(void))this, &__block_literal_global_221_12261);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_224_12263);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "sparse_inner_product", (void (***)(void))this, &__block_literal_global_227_12265);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(void))this, &__block_literal_global_230_12267);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(void))this, &__block_literal_global_233_12269);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "bahdanau_attention", (void (***)(void))this, &__block_literal_global_236_12271);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "self_attention", (void (***)(void))this, &__block_literal_global_239_12273);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_242_12275);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_245_12277);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "argsort", (void (***)(void))this, &__block_literal_global_248_12279);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice_update", (void (***)(void))this, &__block_literal_global_251_12281);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_quantize", (void (***)(void))this, &__block_literal_global_254_12283);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "static_dequantize", (void (***)(void))this, &__block_literal_global_257_12285);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(void))this, &__block_literal_global_260_12287);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(void))this, &__block_literal_global_263_12289);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "furthest_point_sampling", (void (***)(void))this, &__block_literal_global_266_12291);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_269_12293);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_272_12295);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "loopkit", (void (***)(void))this, &__block_literal_global_275_12297);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_278_12299);
}

const char *Espresso::MPSGraphEngine::engine::name(Espresso::MPSGraphEngine::engine *this)
{
  return "MPSGRAPH";
}

void Espresso::MPSGraphEngine::engine::register_kernels(Espresso::MPSGraphEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_4602);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_29_4604);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_32_4606);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_35_4608);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_38_4610);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "cast", (void (***)(void))this, &__block_literal_global_41_4612);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_44_4614);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_47_4616);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "conv3d", (void (***)(void))this, &__block_literal_global_50_4618);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "copy", (void (***)(void))this, &__block_literal_global_53_4620);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_56_4622);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop_and_resize", (void (***)(void))this, &__block_literal_global_59_4624);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_62_4626);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dev_op", (void (***)(void))this, &__block_literal_global_65_4628);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "einsum", (void (***)(void))this, &__block_literal_global_68_4630);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_71_4632);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "expand_dims", (void (***)(void))this, &__block_literal_global_74_4634);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fill", (void (***)(void))this, &__block_literal_global_77_4636);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_80_4638);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "gather_nd", (void (***)(void))this, &__block_literal_global_83_4640);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_86_4642);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_89_4644);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_slice", (void (***)(void))this, &__block_literal_global_92);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_95_4647);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "l2_normalize", (void (***)(void))this, &__block_literal_global_98_4649);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_random", (void (***)(void))this, &__block_literal_global_101);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_104_4652);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "one_hot", (void (***)(void))this, &__block_literal_global_107);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_110);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool3d", (void (***)(void))this, &__block_literal_global_113);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_116_4657);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_119_4659);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape_like", (void (***)(void))this, &__block_literal_global_122_4661);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "rnn_arch", (void (***)(void))this, &__block_literal_global_125_4663);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "scatter_nd", (void (***)(void))this, &__block_literal_global_128_4665);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_131_4667);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_134_4669);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_137);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_140);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_143);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_146);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "squeeze", (void (***)(void))this, &__block_literal_global_149_4675);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "stack_nd", (void (***)(void))this, &__block_literal_global_152_4677);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tensor_zero_pad", (void (***)(void))this, &__block_literal_global_155_4679);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "tile", (void (***)(void))this, &__block_literal_global_158_4681);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "topk", (void (***)(void))this, &__block_literal_global_161_4683);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_164_4685);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_167_4687);
}

const char *Espresso::DummyMPSEngine::engine::name(Espresso::DummyMPSEngine::engine *this)
{
  return "DummyMPSEngine";
}

void Espresso::DummyMPSEngine::engine::register_kernels(Espresso::DummyMPSEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_280);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_5);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "lrn", (void (***)(void))this, &__block_literal_global_8);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_11);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_14);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_17);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "activation", (void (***)(void))this, &__block_literal_global_20);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity", (void (***)(void))this, &__block_literal_global_23);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "load_constant", (void (***)(void))this, &__block_literal_global_26);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_29);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_32);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_35);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "crop", (void (***)(void))this, &__block_literal_global_38);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split", (void (***)(void))this, &__block_literal_global_41);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_44);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "flatten", (void (***)(void))this, &__block_literal_global_47);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_50);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_53);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_concat", (void (***)(void))this, &__block_literal_global_56);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "space_to_depth", (void (***)(void))this, &__block_literal_global_59);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "slice", (void (***)(void))this, &__block_literal_global_62);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_65);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transplant", (void (***)(void))this, &__block_literal_global_68);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "grid_sampling", (void (***)(void))this, &__block_literal_global_71);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "local_correlation", (void (***)(void))this, &__block_literal_global_74);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax_nd", (void (***)(void))this, &__block_literal_global_77);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_80);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reshape", (void (***)(void))this, &__block_literal_global_83);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "split_nd", (void (***)(void))this, &__block_literal_global_86);
}

const char *Espresso::HXSimEngine::engine::name(Espresso::HXSimEngine::engine *this)
{
  return "HX_SIM";
}

void Espresso::HXSimEngine::engine::register_kernels(Espresso::HXSimEngine::engine *this, Espresso::abstract_engine_factory *a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_5301);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_5_5303);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "concat", (void (***)(void))this, &__block_literal_global_8_5305);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "context_transfer", (void (***)(void))this, &__block_literal_global_11_5307);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "general_padding", (void (***)(void))this, &__block_literal_global_14_5309);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_17_5311);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batchnorm", (void (***)(void))this, &__block_literal_global_20_5313);

  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "upsample", (void (***)(void))this, &__block_literal_global_23_5315);
}

const char *Espresso::engine_cpu::name(Espresso::engine_cpu *this)
{
  return "CPU";
}

const char *Espresso::BNNSEngine::engine::name(Espresso::BNNSEngine::engine *this)
{
  return "BNNS";
}

void Espresso::BNNSEngine::engine::register_kernels(Espresso::BNNSEngine::engine *this, uint64_t **a2)
{
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "batch_matmul", (void (***)(void))this, &__block_literal_global_32105);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "elementwise", (void (***)(void))this, &__block_literal_global_4_32107);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution", (void (***)(void))this, &__block_literal_global_7_32109);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "deconvolution", (void (***)(void))this, &__block_literal_global_10_32111);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool", (void (***)(void))this, &__block_literal_global_13_32113);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "softmax", (void (***)(void))this, &__block_literal_global_16_32115);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product", (void (***)(void))this, &__block_literal_global_19_32117);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "transpose", (void (***)(void))this, &__block_literal_global_22_32119);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "dynamic_quantize", (void (***)(void))this, &__block_literal_global_25_32121);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "reduce", (void (***)(void))this, &__block_literal_global_28_32123);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_grad", (void (***)(void))this, &__block_literal_global_31_32125);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "convolution_weights_grad", (void (***)(void))this, &__block_literal_global_34_32127);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "pool_grad", (void (***)(void))this, &__block_literal_global_37_32129);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "nonlinearity_grad", (void (***)(void))this, &__block_literal_global_40_32131);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_grad", (void (***)(void))this, &__block_literal_global_43_32133);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "inner_product_weights_grad", (void (***)(void))this, &__block_literal_global_46_32135);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_convolution_grad", (void (***)(void))this, &__block_literal_global_49_32136);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "fused_inner_product_grad", (void (***)(void))this, &__block_literal_global_52_32138);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_quantize", (void (***)(void))this, &__block_literal_global_55_32140);
  Espresso::abstract_engine_factory::register_kernel_class((uint64_t)a2, "linear_dequantize", (void (***)(void))this, &__block_literal_global_58_32142);

  Espresso::abstract_engine_factory::set_compatible_fallback_platform(a2, 100, 0);
}

void Espresso::AOT::E5AOTCompilerBackend::Run(Espresso::AOT::E5AOTCompilerBackend *this)
{
}

void sub_1921A3C74(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AbstractMILCompiler::Run(std::string::size_type *this)
{
  Espresso::AOT::CreateMILAOTContext((Espresso::AOT *)this, v16);
  v16[1] = v16[0];
  if (v16[0]) {
    operator new();
  }
  long long v17 = 0;
  int v5 = (std::vector<std::string> *)(this + 23);
  std::string::size_type v6 = this[32];
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 32))(v16);
    uint64_t v2 = v16[0];
    id v3 = (Espresso::AOT *)(*(uint64_t (**)(uint64_t))(*(void *)v16[0] + 40))(v16[0]);
    Espresso::AOT::RegisterE5AOTOpsets(v3, v4);
  }
  else
  {
    MIL::ParserOptions::Make(v16, 0);
    uint64_t v7 = v16[0];
    if (*((char *)this + 207) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)this[23], this[24]);
    }
    else
    {
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__begin_;
      v15.__r_.__value_.__r.__words[2] = this[25];
    }
    (*(void (**)(uint64_t, std::string *, uint64_t))(*(void *)v7 + 32))(v7, &v15, 1);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16[0] + 64))(v16[0], 1);
    v13[1] = 0;
    uint64_t v13[2] = 0;
    MIL::Text::ParseProgramFromFile();
    uint64_t v2 = v14;
    uint64_t v14 = 0;
    uint64_t v8 = v16[0];
    v16[0] = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  v13[0] = v2;
  (*(void (**)(uint64_t *__return_ptr, std::string::size_type *, void *))(*this + 40))(v16, this, v13);
  uint64_t v9 = v16[0];
  v16[0] = 0;
  uint64_t v10 = v13[0];
  v13[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  std::string::size_type v11 = this[29];
  if (this[30] - v11 == 24)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::size_type v11 = *(void *)v11;
      if (*(void *)(this[29] + 8) != 1) {
        goto LABEL_21;
      }
    }
    else if (*(unsigned char *)(v11 + 23) != 1)
    {
      goto LABEL_21;
    }
    if (*(unsigned char *)v11 == 42) {
      Espresso::AOT::AbstractMILCompiler::Options::PopulateAllEntryPoints(v5, v9);
    }
  }
LABEL_21:
  (*(void (**)(std::string::size_type *, uint64_t, char *))(*this + 32))(this, v9, (char *)this + 232);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  int v12 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1921A4074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  uint64_t v21 = a19;
  a19 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void Espresso::AOT::CreateMILAOTContext(Espresso::AOT *this@<X0>, uint64_t *a2@<X8>)
{
  MIL::Opsets::Common::CreateMILContext(a2, this);
  MEMORY[0x192FEE3F0](*a2);
  bnns::RegisterOpsets((bnns *)*a2, v3);
  E5AOT::Opsets::E5ML_ios16::RegisterE5ML_ios16Opsets((E5AOT::Opsets::E5ML_ios16 *)*a2, v4);
}

void sub_1921A419C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    Espresso::AOT::CreateMILAOTContext(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<Espresso::AOT::MILCompilerForE5,Espresso::AOT::AOTCompilerOptions &,std::unordered_map<std::string,std::string> const&>()
{
}

void sub_1921A429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100]((uint64_t)&a9);
  Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions((Espresso::AOT::AOTCompilerOptions *)&a14);
  MEMORY[0x192FF16B0](v14, 0x10F3C40D0C0D976);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::AOTCompilerBackend::GetBuildInfo(Espresso::AOT::AOTCompilerBackend *this)
{
  return (uint64_t)this + 144;
}

void Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t ComputeUnits = Espresso::AOT::CompilerOptionsForE5::GetComputeUnits((Espresso::AOT::CompilerOptionsForE5 *)(a1 + 264));
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::size_type v6 = *(const void **)ComputeUnits;
  uint64_t v5 = *(void *)(ComputeUnits + 8);
  int64_t v7 = v5 - *(void *)ComputeUnits;
  if (v5 == *(void *)ComputeUnits)
  {
    LODWORD(v42) = 0;
    std::string __p = (void *)0x100000002;
    std::vector<E5RT::BufferType>::__assign_with_size[abi:ne180100]<E5RT::BufferType*,E5RT::BufferType*>((void *)a2, (char *)&__p, (char *)((unint64_t)&__p | 0xC), 3uLL);
  }
  else
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = (char *)operator new(v5 - *(void *)ComputeUnits);
    *(void *)a2 = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a2 + 16) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a2 + 8) = v9;
  }
  BOOL v10 = Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation((Espresso::AOT::AOTCompilerBackend *)a1);
  if (v10 && E5RT::IsAVirtualMachine((E5RT *)v10))
  {
    std::string __p = operator new(0x28uLL);
    long long v42 = xmmword_192DBBFE0;
    strcpy((char *)__p, "espresso.e5compiler.enable-vm-hw");
    char v11 = Espresso::AOT::Utils::IsDefaultsWritePresent((uint64_t *)&__p);
    char v12 = v11;
    if (SHIBYTE(v42) < 0)
    {
      operator delete(__p);
      if (v12) {
        return;
      }
    }
    else if (v11)
    {
      return;
    }
    std::string __p = 0;
    long long v42 = 0uLL;
    uint64_t v13 = *(const char **)a2;
    uint64_t v14 = *(const char **)(a2 + 8);
    int64_t v15 = (int64_t)&v14[-*(void *)a2];
    if (v14 == *(const char **)a2)
    {
      BOOL v16 = 0;
      long long v17 = 0;
    }
    else
    {
      if (v15 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      BOOL v16 = (char *)operator new((size_t)&v14[-*(void *)a2]);
      long long v17 = (unsigned int *)&v16[4 * (v15 >> 2)];
      std::string __p = v16;
      *((void *)&v42 + 1) = v17;
      memcpy(v16, v13, v15);
      *(void *)&long long v42 = v17;
    }
    uint64_t v18 = (unsigned int *)operator new(0xCuLL);
    uint64_t v20 = v18;
    _OWORD v18[2] = 2;
    *(void *)uint64_t v18 = 0x100000000;
    if (v14 == v13) {
      goto LABEL_54;
    }
    uint64_t v21 = v18 + 2;
    uint64_t v22 = v18 + 1;
    uint64_t v23 = (char *)v13;
    while (1)
    {
      int v24 = *(_DWORD *)v23;
      uint64_t v25 = v18;
      if (*v18 != *(_DWORD *)v23)
      {
        uint64_t v25 = v18 + 1;
        if (*v22 != v24)
        {
          if (*v21 == v24) {
            uint64_t v25 = v18 + 2;
          }
          else {
            uint64_t v25 = v18 + 3;
          }
        }
      }
      if ((char *)v25 - (char *)v18 == 12) {
        break;
      }
      v23 += 4;
      if (v23 == v14) {
        goto LABEL_38;
      }
    }
    if (v23 != v14)
    {
      for (unint64_t i = v23 + 4; i != v14; i += 4)
      {
        int v27 = *(_DWORD *)i;
        int v28 = v18;
        if (*v18 != *(_DWORD *)i)
        {
          int v28 = v18 + 1;
          if (*v22 != v27)
          {
            if (*v21 == v27) {
              int v28 = v18 + 2;
            }
            else {
              int v28 = v18 + 3;
            }
          }
        }
        if ((char *)v28 - (char *)v18 != 12)
        {
          *(_DWORD *)uint64_t v23 = v27;
          v23 += 4;
        }
      }
      if (v23 != v14)
      {
        BOOL v19 = v14;
        uint64_t v14 = v23;
        *(void *)(a2 + 8) = v23;
      }
    }
LABEL_38:
    if (v13 == v14)
    {
LABEL_54:
      Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v36, v18, v18 + 3);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v34 = &v36;
      }
      else {
        unint64_t v34 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("On-device compilation within a VM only supports [%s]", &v35);
    }
    if ((char *)v17 - v16 != v14 - v13)
    {
      uint64_t v29 = Espresso::espresso_os_log_subsystem(0, v19);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v36, (unsigned int *)v16, v17);
        int v30 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
        std::string::size_type v31 = v36.__r_.__value_.__r.__words[0];
        Espresso::AOT::MILCompilerForE5::GetComputeUnitsForPlatform(E5Common::PlatformIdentifier)const::$_0::operator()(&v35, *(unsigned int **)a2, *(unsigned int **)(a2 + 8));
        uint64_t v32 = &v36;
        if (v30 < 0) {
          uint64_t v32 = (std::string *)v31;
        }
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint8x8_t v33 = &v35;
        }
        else {
          uint8x8_t v33 = (std::string *)v35.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136315394;
        size_t v38 = v32;
        __int16 v39 = 2080;
        long long v40 = v33;
        _os_log_debug_impl(&dword_1920CB000, v29, OS_LOG_TYPE_DEBUG, "VM detected: Adjusted requested context from [%s] to [%s]", buf, 0x16u);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
      }
    }
    operator delete(v20);
    if (v16) {
      operator delete(v16);
    }
  }
}

void sub_1921A46D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v31 < 0) {
    operator delete(v30);
  }
  operator delete(v29);
  if (v28) {
    operator delete(v28);
  }
  uint8x8_t v33 = *(void **)v27;
  if (*(void *)v27)
  {
    *(void *)(v27 + 8) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::IsAVirtualMachine(E5RT *this)
{
  if (qword_1E9301C68 != -1) {
    dispatch_once(&qword_1E9301C68, &unk_1EE398F88);
  }
  return byte_1E9301C50;
}

BOOL Espresso::AOT::AOTCompilerBackend::IsOnDeviceCompilation(Espresso::AOT::AOTCompilerBackend *this)
{
  char v9 = 2;
  strcpy(__p, "e5");
  Espresso::AOT::AOTCompilerOptions::GetOptions((uint64_t)this + 8, (uint64_t)__p, (uint64_t)v10);
  if (v9 < 0) {
    operator delete(*(void **)__p);
  }
  char v9 = 21;
  strcpy(__p, "on-device-compilation");
  char v12 = __p;
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (long long **)&v12);
  if (*((_DWORD *)v1 + 16)) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  int v2 = *((unsigned __int8 *)v1 + 40);
  if (v9 < 0)
  {
    operator delete(*(void **)__p);
    uint64_t v3 = (void **)v11;
    if (!v11) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v3 = (void **)v11;
    if (!v11) {
      goto LABEL_14;
    }
  }
  do
  {
    int v4 = (void **)*v3;
    uint64_t v5 = *((unsigned int *)v3 + 16);
    if (v5 != -1) {
      ((void (*)(char *, void **))off_1EE39B858[v5])(__p, v3 + 5);
    }
    *((_DWORD *)v3 + 16) = -1;
    if (*((char *)v3 + 39) < 0) {
      operator delete(v3[2]);
    }
    operator delete(v3);
    uint64_t v3 = v4;
  }
  while (v4);
LABEL_14:
  std::string::size_type v6 = v10[0];
  v10[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  return v2 != 0;
}

void sub_1921A492C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double Espresso::AOT::AOTCompilerOptions::GetOptions@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::find<std::string>((void *)(a1 + 88), a2);
  if (v4)
  {
    std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>::unordered_map(a3, (uint64_t)(v4 + 5));
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  return result;
}

uint64_t Espresso::AOT::CompilerOptionsForE5::GetComputeUnits(Espresso::AOT::CompilerOptionsForE5 *this)
{
  return (uint64_t)this + 136;
}

void E5RT::OnDeviceAOTCompilerInterface::MakeAOTCompilerOptions()
{
}

void sub_1921A5C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (*(char *)(v59 - 81) < 0) {
    operator delete(*(void **)(v59 - 104));
  }
  std::unique_ptr<Espresso::AOT::AOTCompilerOptions>::~unique_ptr[abi:ne180100](v58);
  _Unwind_Resume(a1);
}

uint64_t *Espresso::AOT::AOTCompilerOptions::SetOption(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  char v11 = a2;
  std::string::size_type v6 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 88, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v11);
  char v11 = a3;
  double result = std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v6 + 5), (uint64_t)a3, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v8 = *((unsigned int *)result + 16);
  uint64_t v9 = *(unsigned int *)(a4 + 24);
  if (v8 == -1)
  {
    if (v9 == -1) {
      return result;
    }
  }
  else if (v9 == -1)
  {
    BOOL v10 = result;
    double result = (uint64_t *)((uint64_t (*)(long long **, uint64_t *))off_1EE39B7B8[v8])(&v11, result + 5);
    *((_DWORD *)v10 + 16) = -1;
    return result;
  }
  char v11 = (long long *)(result + 5);
  return (uint64_t *)((uint64_t (*)(long long **))off_1EE39B7D8[v9])(&v11);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  std::string::size_type v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          std::string::size_type v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                int v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    int v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (unint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v28 = (char *)operator new(0x48uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)int v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = (std::string *)(v28 + 16);
  int v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  v28[40] = 0;
  *((_DWORD *)v28 + 16) = 0;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        std::string v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        std::string v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      std::string v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  std::string v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  int64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1921A6554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1921A6568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<BOOL,int,float,std::string>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  std::string::size_type v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v47, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          std::string::size_type v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v23 = v15[1];
            if (v23 == v11)
            {
              uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v25 = v15[3];
              }
              if (v25 == v17)
              {
                int v26 = (const void **)(v15 + 2);
                if ((v24 & 0x80) != 0)
                {
                  if (!memcmp(*v26, v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  for (unint64_t i = v6; *(unsigned __int8 *)v26 == *i; ++i)
                  {
                    int v26 = (const void **)((char *)v26 + 1);
                    if (!--v24) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v23 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            int64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              uint64_t v21 = (const void **)(v15 + 2);
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*v21, v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                for (unint64_t j = v6; *(unsigned __int8 *)v21 == *j; ++j)
                {
                  uint64_t v21 = (const void **)((char *)v21 + 1);
                  if (!--v19) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          int64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  int v28 = (char *)operator new(0x50uLL);
  v47[0] = v28;
  v47[1] = a1 + 16;
  char v48 = 0;
  *(void *)int v28 = 0;
  *((void *)v28 + 1) = v11;
  uint64_t v29 = (std::string *)(v28 + 16);
  int v30 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((void *)v30 + 1));
  }
  else
  {
    long long v31 = *v30;
    *((void *)v28 + 4) = *((void *)v30 + 2);
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
  }
  *(_OWORD *)(v28 + 56) = 0u;
  *(_OWORD *)(v28 + 40) = 0u;
  *((_DWORD *)v28 + 18) = 1065353216;
  char v48 = 1;
  float v32 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v33 = *(float *)(a1 + 32);
  if (!v12 || (float)(v33 * (float)v12) < v32)
  {
    BOOL v36 = 1;
    if (v12 >= 3) {
      BOOL v36 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v37 = v36 | (2 * v12);
    unint64_t v38 = vcvtps_u32_f32(v32 / v33);
    if (v37 <= v38) {
      size_t prime = v38;
    }
    else {
      size_t prime = v37;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v40 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v40) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v40)
    {
      unint64_t v41 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v40 < 3uLL || (uint8x8_t v42 = (uint8x8_t)vcnt_s8(v40), v42.i16[0] = vaddlv_u8(v42), v42.u32[0] > 1uLL))
      {
        unint64_t v41 = std::__next_prime(v41);
      }
      else
      {
        uint64_t v43 = 1 << -(char)__clz(v41 - 1);
        if (v41 >= 2) {
          unint64_t v41 = v43;
        }
      }
      if (prime <= v41) {
        size_t prime = v41;
      }
      if (prime < *(void *)&v40) {
LABEL_68:
      }
        std::__hash_table<std::shared_ptr<E5RT::AsyncEvent const>,std::hash<std::shared_ptr<E5RT::AsyncEvent const>>,std::equal_to<std::shared_ptr<E5RT::AsyncEvent const>>,std::allocator<std::shared_ptr<E5RT::AsyncEvent const>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v44 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        std::string v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v34 = *(void **)(*(void *)a1 + 8 * v11);
        std::string v35 = (void *)v47[0];
        if (v34) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v44 & v11;
      unint64_t v34 = *(void **)(*(void *)a1 + 8 * (v44 & v11));
      std::string v35 = (void *)v47[0];
      if (v34) {
        goto LABEL_57;
      }
    }
LABEL_81:
    void *v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v47[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v47[0])
    {
      unint64_t v45 = *(void *)(*(void *)v47[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v45 >= v12) {
          v45 %= v12;
        }
      }
      else
      {
        v45 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v45) = v47[0];
    }
    goto LABEL_92;
  }
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v4);
  std::string v35 = (void *)v47[0];
  if (!v34) {
    goto LABEL_81;
  }
LABEL_57:
  void *v35 = *v34;
  void *v34 = v47[0];
LABEL_92:
  int64_t v15 = (uint64_t *)v47[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1921A69E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921A69F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::AOT::AOTCompilerOptions::~AOTCompilerOptions(Espresso::AOT::AOTCompilerOptions *this)
{
  int v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4) {
    operator delete(v4);
  }
  if (*((char *)this + 79) < 0)
  {
    operator delete(*((void **)this + 7));
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*((char *)this + 23) & 0x80000000) == 0) {
        return;
      }
LABEL_11:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0) {
    goto LABEL_11;
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::variant<BOOL,int,float,std::string>>>,0>(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 40);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_1EE39B7B8[v4])(&v6, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJbifSD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_1EE39B7B8[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJbifNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJbifSD_EEEOSS_EEEDcSK_DpT0_(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_1EE39B7B8[v5])(&v8, v4);
LABEL_7:
    v4[1].n128_u32[2] = -1;
    __n128 result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    __n128 *v4 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  __n128 result = *a3;
  *(void *)(a2 + 16) = a3[1].n128_u64[0];
  *(__n128 *)a2 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

uint64_t E5Common::StringUtils::Join(uint64_t a1, uint64_t *a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v5 != v4)
  {
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(void *)v5;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      uint64_t v8 = *(void *)(v5 + 8);
    }
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v7, v8);
      v5 += 24;
      if (v5 == v4) {
        break;
      }
      int v9 = *(char *)(a1 + 23);
      if (v9 >= 0) {
        uint64_t v10 = a1;
      }
      else {
        uint64_t v10 = *(void *)a1;
      }
      if (v9 >= 0) {
        uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        uint64_t v11 = *(void *)(a1 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v10, v11);
      int v12 = *(char *)(v5 + 23);
      if (v12 >= 0) {
        uint64_t v7 = v5;
      }
      else {
        uint64_t v7 = *(void *)v5;
      }
      if (v12 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v5 + 8);
      }
    }
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v14[1] = MEMORY[0x1E4FBA470] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FF15B0](&v16);
}

void sub_1921A6EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921A6EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1921A6ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5CompilerOptions::GetComputeDeviceTypesAllowed(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "computeDeviceTypesAllowed<std::vector<enum ComputeDeviceType>>", 62);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalDisableCompileTimeMPSGraphTypeInference(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalDisableCompileTimeMPSGraphTypeInference<BOOL>", 57);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatternsForStates(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalMatchE5MinimalCpuPatternsForStates<BOOL>", 52);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalEnableDefaultFunctionForRangeDim(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalEnableDefaultFunctionForRangeDim<BOOL>", 50);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMatchE5MinimalCpuPatterns(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalMatchE5MinimalCpuPatterns<BOOL>", 43);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalDisableDataDependentShape(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalDisableDataDependentShape<BOOL>", 43);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetEnableReshapeWithMinimalAllocations(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "enableReshapeWithMinimalAllocations<BOOL>", 41);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalShrinkQuantGroup(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalShrinkQuantGroup<BOOL>", 34);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetExperimentalMoveReadStateOps(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "experimentalMoveReadStateOps<BOOL>", 34);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetCustomAneCompilerOptions(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "customAneCompilerOptions<std::string>", 37);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::GetPreferredCpuBackends(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "preferredCpuBackends<std::vector<std::string>>", 46);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

uint64_t E5RT::E5CompilerOptions::GetForceClassicAotOldHw(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "forceClassicAotOldHw<BOOL>", 26);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetEnableProfiling(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "enableProfiling<BOOL>", 21);
  }
  if (!*v2
    || (uint64_t v3 = (unsigned __int8 *)((uint64_t (*)(uint64_t, void *, void, void, void *))*v2)(3, v2, 0, MEMORY[0x1E4FBA378], &std::__any_imp::__unique_typeinfo<BOOL>::__id)) == 0)
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *v3;
}

uint64_t E5RT::E5CompilerOptions::GetMilEntryPoints(E5RT::E5CompilerOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  int v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "milEntryPoints<std::vector<std::string>>", 40);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

double Espresso::AOT::AOTCompilerOptions::AOTCompilerOptions(Espresso::AOT::AOTCompilerOptions *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((void *)this + 16) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((unsigned char *)this + 24) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 30) = 1065353216;
  *((void *)this + 16) = 0;
  return result;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetOutput(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = a1 + 56;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetInput(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = a1 + 32;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetBuildForProfiling(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  return this;
}

uint64_t Espresso::AOT::AOTCompilerOptions::SetMILProgram(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

__n128 Espresso::AOT::AOTCompilerOptions::SetBackend(uint64_t a1, __n128 *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t Espresso::AOT::MILCompilerForE5::Canonicalize(uint64_t a1, uint64_t *a2)
{
  Espresso::MILTransforms::ConstCastFusion(*a2);
  MEMORY[0x192FEFD50](&v3, v4);
  MIL::Transform::ProgramTransformer::EliminateDeadNodes((MIL::Transform::ProgramTransformer *)&v3);
  MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)&v3);
  MIL::Transform::ProgramTransformer::~ProgramTransformer((MIL::Transform::ProgramTransformer *)&v3);
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1921A7B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

E5RT::E5BundleCacheManager *E5RT::E5BundleCacheManager::E5BundleCacheManager(E5RT::E5BundleCacheManager *this, const E5RT::E5CompilerConfigOptions *a2)
{
  v76[1] = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE325C78;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v3 = (std::__fs::filesystem::path *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v4 = (void **)((char *)this + 32);
  *(_OWORD *)((char *)this + 40) = 0u;
  *((unsigned char *)this + 56) = 0;
  BundleCacheuint64_t Location = E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(a2);
  E5Common::DispatchOnceWithExceptionThrow(&qword_1E9301BE8, (uint64_t)&unk_1EE396840);
  if (byte_1E9301BE0)
  {
    BOOL v6 = 1;
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(BundleCacheLocation + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(BundleCacheLocation + 8);
    }
    BOOL v6 = v7 != 0;
  }
  uint64_t v59 = [MEMORY[0x1E4F28CB8] defaultManager];
  unint64_t v58 = v4;
  if (v6)
  {
    E5Common::DispatchOnceWithExceptionThrow(&qword_1E9301BE8, (uint64_t)&unk_1EE396840);
    if (byte_1E9301BE0)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "e5rt");
      size_t v49 = E5RT::GetE5RTLog((uint64_t)__dst);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
      if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
        LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1920CB000, v49, OS_LOG_TYPE_INFO, "Process holds E5 bundle sharing entitlement.\n", (uint8_t *)__dst, 2u);
      }

      size_t v50 = (void *)MEMORY[0x1E4F1CB10];
      long long v51 = sub_19235FC70();
      long long v52 = [v50 fileURLWithPath:v51];
      v76[0] = v52;
      uint64_t v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:1];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, "e5rt");
      std::string::size_type v56 = E5RT::GetE5RTLog((uint64_t)__dst);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        LOWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1920CB000, v56, OS_LOG_TYPE_INFO, "Customized E5 bundle location \n", (uint8_t *)__dst, 2u);
      }

      uint64_t v57 = (void *)MEMORY[0x1E4F1CB10];
      long long v51 = sub_19235FCB8((uint64_t *)BundleCacheLocation);
      long long v52 = [v57 fileURLWithPath:v51];
      std::string::size_type v75 = v52;
      uint64_t v53 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v75 count:1];
    }
    uint64_t v8 = (void *)v53;
  }
  else
  {
    uint64_t v8 = [v59 URLsForDirectory:13 inDomains:1];
  }
  if (![v8 count])
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(__dst, "E5BundleCacheManager");
    std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to locate Caches directory. Cannot initialize E5BundleCacheManager.");
    E5RT::Status::Status(&pn, 11, &__p);
    E5RT::E5RTError::E5RTError(exception, __dst, &pn);
  }
  int v9 = [v8 objectAtIndexedSubscript:0];
  if (!v6)
  {
    uint64_t v10 = [MEMORY[0x1E4F28B50] mainBundle];
    uint64_t v11 = v10;
    if (!v10)
    {
      uint64_t v55 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(__dst, "E5BundleCacheManager");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unable to query the NSBundle mainBundle.");
      E5RT::Status::Status(&pn, 11, &__p);
      E5RT::E5RTError::E5RTError(v55, __dst, &pn);
    }
    int v12 = [v10 bundleIdentifier];
    if (v12
      || ([MEMORY[0x1E4F28F80] processInfo],
          uint64_t v27 = objc_claimAutoreleasedReturnValue(),
          (int v28 = v27) != 0)
      && ([v27 processName], int v12 = objc_claimAutoreleasedReturnValue(), v28, v12))
    {
      uint64_t v13 = [v9 URLByAppendingPathComponent:v12];

      int v9 = (void *)v13;
    }
  }
  id v14 = [v9 URLByAppendingPathComponent:@"com.apple.e5rt.e5bundlecache"];
  char v15 = (std::string *)[v14 fileSystemRepresentation];
  if (*((char *)this + 31) < 0)
  {
    **((unsigned char **)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 31) = 0;
  }
  uint64_t v16 = (std::string *)((char *)v15 - 1);
  do
  {
    int v17 = v16->__r_.__value_.__s.__data_[1];
    uint64_t v16 = (std::string *)((char *)v16 + 1);
  }
  while (v17);
  std::string::append[abi:ne180100]<char const*,0>(&v3->__pn_, v15, v16);
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(&pn, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    std::string pn = v3->__pn_;
  }
  char v68 = 9;
  strcpy((char *)v67, "/var/root");
  std::string::size_type v18 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  std::string::size_type size = pn.__r_.__value_.__l.__size_;
  uint64_t v19 = (std::string *)pn.__r_.__value_.__r.__words[0];
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string pn = &pn;
  }
  else {
    p_std::string pn = (std::string *)pn.__r_.__value_.__r.__words[0];
  }
  if ((pn.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v22 = HIBYTE(pn.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v22 = pn.__r_.__value_.__l.__size_;
  }
  if (v22 >= 9)
  {
    uint64_t v23 = (std::string *)((char *)p_pn + v22);
    uint64_t v24 = p_pn;
    while (1)
    {
      uint64_t v25 = (std::string *)memchr(v24, 47, v22 - 8);
      if (!v25) {
        goto LABEL_62;
      }
      if (v25->__r_.__value_.__l.__data_ == v67[0]
        && v25->__r_.__value_.__s.__data_[8] == (unint64_t)LOBYTE(v67[1]))
      {
        break;
      }
      uint64_t v24 = (std::string *)((char *)&v25->__r_.__value_.__l.__data_ + 1);
      int64_t v22 = (char *)v23 - (char *)v24;
      if ((char *)v23 - (char *)v24 < 9) {
        goto LABEL_62;
      }
    }
    if (v25 != v23 && v25 == p_pn)
    {
      if ((v18 & 0x80) != 0)
      {
        if (size >= 9)
        {
LABEL_46:
          std::string::size_type v29 = size - 9;
          if (size - 9 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          if (v29 >= 0x17)
          {
            uint64_t v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17) {
              uint64_t v31 = v29 | 7;
            }
            uint64_t v32 = v31 + 1;
            int v30 = (std::string *)operator new(v31 + 1);
            __dst[0].__r_.__value_.__l.__size_ = v29;
            __dst[0].__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          }
          else
          {
            *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = size - 9;
            int v30 = __dst;
            if (size == 9) {
              goto LABEL_54;
            }
          }
          memmove(v30, (char *)&v19->__r_.__value_.__r.__words[1] + 1, v29);
LABEL_54:
          v30->__r_.__value_.__s.__data_[v29] = 0;
          std::operator+<char>();
          if (*((char *)this + 31) < 0) {
            operator delete(v3->__pn_.__r_.__value_.__l.__data_);
          }
          v3->__pn_ = __p;
          *((unsigned char *)this + 56) = 1;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&__p, "e5rt");
          float v33 = E5RT::GetE5RTLog((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1920CB000, v33, OS_LOG_TYPE_INFO, "E5BundleCacheManager: is root user\n", (uint8_t *)&__p, 2u);
          }

          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_62;
        }
      }
      else if (v18 > 8)
      {
        uint64_t v19 = &pn;
        std::string::size_type size = v18;
        goto LABEL_46;
      }
      std::string::__throw_out_of_range[abi:ne180100]();
    }
  }
LABEL_62:
  if (!getenv("ESPRESSO_USE_UNIQUE_BUNDLE_PATH")) {
    goto LABEL_88;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 12;
  strcpy((char *)__dst, "/dev/urandom");
  std::random_device::random_device(&v66, __dst);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  }
  uint32_t v34 = arc4random();
  uint64_t v35 = 1;
  uint32_t v36 = v34;
  do
  {
    uint32_t v36 = v35 + 1812433253 * (v36 ^ (v36 >> 30));
    *((_DWORD *)&__dst[0].__r_.__value_.__l.__data_ + v35++) = v36;
  }
  while (v35 != 624);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
  *(_DWORD *)((char *)&__p.__r_.__value_.__r + *(void *)(__p.__r_.__value_.__r.__words[2] - 24) + 24) = *(_DWORD *)((char *)&__p.__r_.__value_.__r + *(void *)(__p.__r_.__value_.__r.__words[2] - 24) + 24) & 0xFFFFFFB5 | 8;
  LODWORD(__dst[0].__r_.__value_.__l.__data_) = v64 ^ ((HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) & 0x7FFFFFFE | v34 & 0x80000000) >> 1) ^ ((int)(HIDWORD(__dst[0].__r_.__value_.__r.__words[0]) << 31) >> 31) & 0x9908B0DF;
  uint64_t v65 = 1;
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((char)v62 < 0)
  {
    if (!v61 || *(unsigned char *)v60 != 47)
    {
LABEL_75:
      if (std::__fs::filesystem::path::__filename(v3).__size_) {
        std::string::push_back(&v3->__pn_, 47);
      }
      goto LABEL_78;
    }
  }
  else if (!v62 || v60 != 47)
  {
    goto LABEL_75;
  }
  if (*((char *)this + 31) < 0)
  {
    **((unsigned char **)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
    *((unsigned char *)this + 31) = 0;
  }
LABEL_78:
  if ((v62 & 0x80u) == 0) {
    unint64_t v37 = (std::string *)&v60;
  }
  else {
    unint64_t v37 = (std::string *)v60;
  }
  uint64_t v38 = v62;
  if ((v62 & 0x80u) != 0) {
    uint64_t v38 = v61;
  }
  std::string::append[abi:ne180100]<char const*,0>(&v3->__pn_, v37, (std::string *)((char *)v37 + v38));
  if ((char)v62 < 0) {
    operator delete(v60);
  }
  __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA408];
  std::string::size_type v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  __p.__r_.__value_.__r.__words[2] = v39;
  uint64_t v71 = MEMORY[0x1E4FBA470] + 16;
  if (v73 < 0) {
    operator delete(v72);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FF15B0](&v74);
  std::random_device::~random_device(&v66);
LABEL_88:
  E5RT::GetPlatformBuildVersion(__dst);
  if (*((char *)this + 55) < 0) {
    operator delete(*v58);
  }
  *(std::string *)unint64_t v58 = __dst[0];
  std::__fs::filesystem::__status(v3, 0);
  if (__dst[0].__r_.__value_.__s.__data_[0] == 255 || !__dst[0].__r_.__value_.__s.__data_[0])
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v40 = *((unsigned __int8 *)this + 55);
    if ((v40 & 0x80u) == 0) {
      unint64_t v41 = (std::string *)v58;
    }
    else {
      unint64_t v41 = (std::string *)*((void *)this + 4);
    }
    if ((v40 & 0x80u) != 0) {
      uint64_t v40 = *((void *)this + 5);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__p, v41, (std::string *)((char *)v41 + v40));
    std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)v3, (std::__fs::filesystem::path *)__dst);
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)__dst, 0);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_99;
      }
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 4;
      strcpy((char *)__dst, "e5rt");
      uint8x8_t v42 = E5RT::GetE5RTLog((uint64_t)__dst);
      uint64_t v43 = v42;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
          goto LABEL_123;
        }
      }
      else if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
      {
        goto LABEL_123;
      }
      if (*((char *)this + 31) < 0) {
        std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((void *)this + 2));
      }
      else {
        __dst[0] = v3->__pn_;
      }
      unint64_t v45 = __dst;
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v45 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      uint64_t v46 = "Created E5BundleCache at %s\n";
      goto LABEL_121;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_99;
  }
  *((unsigned char *)&__dst[0].__r_.__value_.__s + 23) = 4;
  strcpy((char *)__dst, "e5rt");
  unint64_t v44 = E5RT::GetE5RTLog((uint64_t)__dst);
  uint64_t v43 = v44;
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_INFO)) {
      goto LABEL_123;
    }
  }
  else if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
  {
    goto LABEL_123;
  }
  if (*((char *)this + 31) < 0) {
    std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else {
    __dst[0] = v3->__pn_;
  }
  uint64_t v47 = __dst;
  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v47 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
  uint64_t v46 = "E5BundleCache exists at %s\n";
LABEL_121:
  _os_log_impl(&dword_1920CB000, v43, OS_LOG_TYPE_INFO, v46, (uint8_t *)&__p, 0xCu);
  if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst[0].__r_.__value_.__l.__data_);
  }
LABEL_123:

  if (*((unsigned char *)this + 56))
  {
    if (*((char *)this + 31) < 0) {
      std::string::__init_copy_ctor_external(__dst, *((const std::string::value_type **)this + 1), *((void *)this + 2));
    }
    else {
      __dst[0] = v3->__pn_;
    }
    E5RT::E5BundleCacheManager::MarkAsMobileOwned((uint64_t)this, (std::string::size_type)__dst);
    if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst[0].__r_.__value_.__l.__data_);
    }
  }
  E5RT::E5BundleCacheManager::PurgeBundlesFromPastBuildVersions(this);
  if (v68 < 0)
  {
    operator delete(v67[0]);
    if ((SHIBYTE(pn.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_131;
    }
LABEL_133:
    operator delete(pn.__r_.__value_.__l.__data_);
    goto LABEL_131;
  }
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_133;
  }
LABEL_131:

  return this;
}

void sub_1921A8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void *a11)
{
  if (*(char *)(v11 + 55) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v11 + 31) < 0)
  {
    operator delete(*v12);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t E5RT::E5Compiler::GetCompiler(E5RT::E5Compiler *this)
{
  E5Common::DispatchOnceWithExceptionThrow(&qword_1E9301B68, (uint64_t)&unk_1EE394620);
  uint64_t result = qword_1E9301B70;
  if (!qword_1E9301B70)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "GetCompiler");
    std::string::basic_string[abi:ne180100]<0>(v3, "Unable to obtain the shared E5Compiler. An exception was encountered while creating the object.");
    E5RT::Status::Status(v4, 11, v3);
    E5RT::E5RTError::E5RTError(exception, v5, v4);
  }
  return result;
}

void sub_1921A8C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  E5RT::Status::~Status((E5RT::Status *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void E5Common::DispatchOnceWithExceptionThrow(dispatch_once_t *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = (const std::exception_ptr *)&v8;
  uint64_t v10 = 0x3002000000;
  uint64_t v11 = sub_19241D7E0;
  int v12 = sub_19241D7EC;
  v13.__ptr_ = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19241D7F4;
  block[3] = &unk_1E5746380;
  block[4] = a2;
  void block[5] = &v8;
  if (*a1 == -1)
  {
    v6.__ptr_ = 0;
    ptr = v9[5].__ptr_;
    std::exception_ptr::~exception_ptr(&v6);
    if (!ptr)
    {
LABEL_3:
      _Block_object_dispose(&v8, 8);
      std::exception_ptr::~exception_ptr(&v13);
      return;
    }
  }
  else
  {
    dispatch_once(a1, block);
    v6.__ptr_ = 0;
    uint64_t v3 = v9[5].__ptr_;
    std::exception_ptr::~exception_ptr(&v6);
    if (!v3) {
      goto LABEL_3;
    }
  }
  std::exception_ptr::exception_ptr(&v5, v9 + 5);
  v4.__ptr_ = &v5;
  std::rethrow_exception(v4);
  __break(1u);
}

void sub_1921A8DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  _Block_object_dispose(&a17, 8);
  std::exception_ptr::~exception_ptr(v17);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::context::create_compiler_for_network(uint64_t a1, void *a2)
{
  unsigned int v41 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v3 = (char *)operator new(0x270uLL);
  std::exception_ptr v4 = v3;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1EE384088;
  uint64_t v38 = a2;
  uint64_t v6 = *a2;
  std::exception_ptr v5 = (std::__shared_weak_count *)a2[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  v3[48] = 0;
  *((void *)v3 + 7) = 0;
  *((void *)v3 + 11) = 0;
  *((void *)v3 + 10) = v3 + 88;
  *((void *)v3 + 8) = 0;
  *((void *)v3 + 9) = 0;
  *((void *)v3 + 12) = 0;
  *((void *)v3 + 13) = 0;
  *((void *)v3 + 14) = 0;
  *((void *)v3 + 15) = 0;
  std::string::size_type v39 = v3 + 24;
  *((void *)v3 + 3) = &unk_1EE33B0D0;
  *((void *)v3 + 16) = 0;
  uint64_t v7 = v3 + 128;
  *((void *)v3 + 19) = 0;
  *((void *)v3 + 17) = 0;
  *((void *)v3 + 20) = 0;
  *((_OWORD *)v3 + 11) = 0u;
  v3[168] = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  v3[224] = 0;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *((_DWORD *)v3 + 70) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>((void *)v3 + 36, "default");
  *((_WORD *)v4 + 156) = 0;
  v4[320] = 0;
  *((void *)v4 + 41) = 0;
  v4[336] = 0;
  *((void *)v4 + 49) = 0;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *((_DWORD *)v4 + 100) = 1065353216;
  *((_OWORD *)v4 + 29) = 0u;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *((void *)v4 + 57) = v4 + 464;
  *(_OWORD *)(v4 + 488) = 0u;
  *((void *)v4 + 60) = v4 + 488;
  *((_OWORD *)v4 + 32) = 0u;
  *((void *)v4 + 63) = v4 + 512;
  *(_OWORD *)(v4 + 536) = 0u;
  *((void *)v4 + 66) = v4 + 536;
  *((_OWORD *)v4 + 35) = 0u;
  *((void *)v4 + 69) = v4 + 560;
  *(_OWORD *)(v4 + 584) = 0u;
  *((void *)v4 + 72) = v4 + 584;
  *((_OWORD *)v4 + 38) = 0u;
  *((void *)v4 + 75) = v4 + 608;
  uint64_t v8 = *(void **)(v6 + 16);
  if (v8
  {
    uint64_t v9 = *(void *)(v6 + 24);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v4 + 17);
  *((void *)v4 + 16) = v8;
  *((void *)v4 + 17) = v9;
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v4 + 5);
  *((void *)v4 + 4) = v6;
  *((void *)v4 + 5) = v5;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  v4[224] = *(unsigned char *)(*((void *)v4 + 16) + 123);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::ANECompilerEngine::ane_name_translator::fill_name_table((uint64_t **)v4 + 57, (const Espresso::net *)v6);
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  if (!*(void *)v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v12 = [MEMORY[0x1E4F28B50] mainBundle];
  std::exception_ptr v13 = [v12 bundleIdentifier];

  id v14 = [MEMORY[0x1E4F28B50] mainBundle];
  char v15 = [v14 bundlePath];
  uint64_t v16 = [v15 stringByDeletingLastPathComponent];

  uint64_t v40 = [v16 componentsSeparatedByString:@"/"];
  if (!v13)
  {
    std::exception_ptr v13 = [v40 lastObject];
  }
  int v17 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  std::string::size_type v18 = [v17 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v19 = [v18 objectForKeyedSubscript:@"espresso.anecompiler_nocache"];
  if ([v19 BOOLValue])
  {
  }
  else
  {
    int v20 = *(unsigned __int8 *)(*(void *)v7 + 138);

    if (!v20) {
      goto LABEL_25;
    }
  }
  uint64_t v21 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v22 = [v21 UUIDString];

  std::exception_ptr v13 = (void *)v22;
LABEL_25:
  if (!v13)
  {
    unint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Null bundleID");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v23 = [v18 objectForKeyedSubscript:@"espresso.ane.verbose"];
  if (v23)
  {
    uint64_t v24 = [v18 objectForKeyedSubscript:@"espresso.ane.verbose"];
    int v25 = [v24 BOOLValue];

    if (v25) {
      v4[320] = 1;
    }
  }
  objc_storeStrong((id *)v4 + 22, v13);
  if (v4[224]) {
    operator new();
  }
  int v26 = (const char *)(v6 + 592);
  if (*(char *)(v6 + 615) < 0) {
    int v26 = *(const char **)v26;
  }
  uint64_t v27 = model_path_to_model_url(v26);
  int v28 = (void *)*((void *)v4 + 23);
  *((void *)v4 + 23) = v27;

  for (unint64_t i = *(void **)(v6 + 152); i; unint64_t i = (void *)*i)
  {
    int v30 = (const void *)i[5];
    if (v30)
    {
      if (v31)
      {
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape((uint64_t)v31, (const Espresso::net *)v6, v5);
        if (v5) {
          nitro::nitro_function::nitro_function(v5);
        }
      }
    }
  }

  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  uint64_t v32 = *v38 + 528;
  uint8x8_t v42 = &v41;
  float v33 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v32, &v41, (uint64_t)&std::piecewise_construct, &v42);
  *(void *)&long long v34 = v39;
  *((void *)&v34 + 1) = v4;
  uint64_t v35 = (std::__shared_weak_count *)v33[4];
  *(_OWORD *)(v33 + 3) = v34;
  if (v35) {
    nitro::nitro_function::nitro_function(v35);
  }
}

void sub_1921A9494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(void **)(v20 + 608));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>>>::destroy(*(void **)(v20 + 584));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v20 + 552, *(char **)(v20 + 560));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v20 + 528, *(char **)(v20 + 536));
  std::__tree<std::string>::destroy(v20 + 504, *(char **)(v20 + 512));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v20 + 480, *(void *)(v20 + 488));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a11, *(void *)(v20 + 464));
  uint64_t v24 = *(void **)(v20 + 432);
  if (v24)
  {
    *(void *)(v20 + 440) = v24;
    operator delete(v24);
  }
  int v25 = *(std::__shared_weak_count **)(v20 + 424);
  if (v25) {
    nitro::nitro_function::nitro_function(v25);
  }

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20 + 368);
  if (*(char *)(v20 + 311) < 0) {
    operator delete(*a10);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::~__hash_table(a12);

  uint64_t v26 = *(void *)(v20 + 152);
  *(void *)(v20 + 152) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v20 + 136);
  if (v27) {
    nitro::nitro_function::nitro_function(v27);
  }
  *a19 = &unk_1EE35F3A0;
  int v28 = *a13;
  if (*a13)
  {
    *(void *)(v20 + 112) = v28;
    operator delete(v28);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a14, *(void **)(v20 + 88));
  *(void *)(v22 - 88) = a15;
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
  *(void *)(v20 + 24) = &unk_1EE32A8C8;
  std::string::size_type v29 = *(std::__shared_weak_count **)(v20 + 40);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  if (v21) {
    nitro::nitro_function::nitro_function(v21);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v20);
  operator delete(v30);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::blob_container::update_ane_mapped_shape(uint64_t a1, const Espresso::net *a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Espresso::abstract_blob_container::shape(v7, a1);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v10, a2, (const Espresso::layer_shape *)v7, *(_DWORD *)(a1 + 204));
  long long v6 = v10[1];
  *(_OWORD *)(a1 + 160) = v10[0];
  *(_OWORD *)(a1 + 176) = v6;
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  if (a3) {
    nitro::nitro_function::nitro_function(a3);
  }
}

void sub_1921A9814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(exception_object);
}

void *___ZN8Espresso27EventReporterImplementation9logMetricERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS1_8optionalIiEESD_S9_NS_21_EspressoCompilerTypeES9__block_invoke(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  uint64_t v3 = v2;
  std::exception_ptr v4 = *(const char **)(a1 + 32);
  if (v4[23] < 0) {
    std::exception_ptr v4 = *(const char **)v4;
  }
  if (v4) {
    std::exception_ptr v5 = v4;
  }
  else {
    std::exception_ptr v5 = "";
  }
  xpc_dictionary_set_string(v2, "computeUnit", v5);
  long long v6 = *(int **)(a1 + 40);
  if (*((unsigned char *)v6 + 4)) {
    xpc_dictionary_set_uint64(v3, "numLayers", *v6);
  }
  uint64_t v7 = *(int **)(a1 + 48);
  if (*((unsigned char *)v7 + 4)) {
    xpc_dictionary_set_uint64(v3, "numSegments", *v7);
  }
  uint64_t v8 = *(const char **)(a1 + 56);
  if (v8[23] < 0) {
    uint64_t v8 = *(const char **)v8;
  }
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = "";
  }
  xpc_dictionary_set_string(v3, "modelHash", v9);
  uint64_t v10 = *(const char **)(a1 + 64);
  if (v10[23] < 0) {
    uint64_t v10 = *(const char **)v10;
  }
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = "";
  }
  xpc_dictionary_set_string(v3, "filePath", v11);
  xpc_dictionary_set_uint64(v3, "compilerType", *(int *)(a1 + 72));
  BOOL isRunningManualTests = Espresso::EspressoReporterUtilities::isRunningManualTests(v12);
  xpc_dictionary_set_BOOL(v3, "manualTestData", isRunningManualTests);
  id v14 = [MEMORY[0x1E4F28F80] processInfo];
  char v15 = [v14 environment];

  uint64_t v16 = [v15 objectForKeyedSubscript:@"XCTestBundlePath"];

  if (v16)
  {
    id v17 = [v15 objectForKey:@"XCTestBundlePath"];
    xpc_dictionary_set_string(v3, "testBundlePath", (const char *)[v17 UTF8String]);
  }
  std::string::size_type v18 = [MEMORY[0x1E4F28B50] mainBundle];
  uint64_t v19 = [v18 bundleIdentifier];

  if (v19) {
    xpc_dictionary_set_string(v3, "bundleIdentifier", (const char *)[v19 UTF8String]);
  }

  return v3;
}

void sub_1921A9A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Espresso::EspressoReporterUtilities::isRunningManualTests(Espresso::EspressoReporterUtilities *this)
{
  uint64_t v1 = [MEMORY[0x1E4F28F80] processInfo];
  xpc_object_t v2 = [v1 environment];

  uint64_t v3 = [v2 objectForKeyedSubscript:@"XCTestConfigurationFilePath"];
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_1921A9B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  void v11[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v8 && (float)(v14 * (float)v8) >= v13)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_31;
    }
    if (prime < v8)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v8) {
LABEL_31:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v7);
  if (v23)
  {
    *uint64_t v11 = *v23;
LABEL_54:
    *int v23 = v11;
    goto LABEL_55;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v22 + 8 * v7) = a1 + 16;
  if (*v11)
  {
    unint64_t v24 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v24 >= v8) {
        v24 %= v8;
      }
    }
    else
    {
      v24 &= v8 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_54;
  }
LABEL_55:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1921A9DDC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

id get_precompiled_path_if_precompiled(uint64_t a1, NSString *a2)
{
  uint64_t v3 = a2;
  Espresso::ANECompilerEngine::current_ane_arch((Espresso::ANECompilerEngine *)v3);
  unint64_t v4 = (NSString *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::precompilation_settings_t::shared(void)::onceToken, &__block_literal_global_22303);
  }
  Espresso::ANECompilerEngine::precompilation_settings_t::get_ane_arch((Espresso::ANECompilerEngine::precompilation_settings_t *)Espresso::ANECompilerEngine::precompilation_settings_t::global, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_8:
    unint64_t v7 = [NSString stringWithUTF8String:p_p];
    goto LABEL_12;
  }
  if (Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::onceToken != -1) {
    dispatch_once(&Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::onceToken, &__block_literal_global_97_11754);
  }
  unint64_t v8 = Espresso::ANECompilerEngine::current_ane_arch(v5);
  unint64_t v7 = [v8 stringByAppendingString:Espresso::ANECompilerEngine::current_ane_arch_with_subtype_variant(void)::aneSubtypeStrVariant];

LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (![(NSString *)v3 hasSuffix:@".espresso.net"])
  {
    uint64_t v9 = [(NSString *)v3 stringByAppendingPathComponent:@"model.espresso.net"];

    uint64_t v3 = (NSString *)v9;
  }
  uint64_t v10 = objc_msgSend(NSString, "stringWithFormat:", @".S%d.espresso.net", a1);
  uint64_t v11 = [(NSString *)v3 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v10];

  uint64_t v12 = get_precompiled_binary_path(v11, v7);
  float v13 = (void *)v12;
  if (!a1 && !v12)
  {
    float v13 = get_precompiled_binary_path(v3, v7);
  }
  if (!v13)
  {
    uint64_t v14 = get_precompiled_binary_path(v11, v4);
    float v13 = (void *)v14;
    if (!a1 && !v14)
    {
      float v13 = get_precompiled_binary_path(v3, v4);
    }
  }

  return v13;
}

void sub_1921AA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id get_precompiled_binary_path(NSString *a1, NSString *a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a2;
  std::exception_ptr v5 = [MEMORY[0x1E4F28CB8] defaultManager];
  long long v6 = [NSString stringWithFormat:@".%@.espresso.hwx", v4];
  unint64_t v7 = [(NSString *)v3 stringByReplacingOccurrencesOfString:@".espresso.net" withString:v6];

  if ([v7 hasSuffix:@".espresso.hwx"]
    && ([v5 fileExistsAtPath:v7] & 1) != 0)
  {
    goto LABEL_9;
  }
  unint64_t v8 = [(NSString *)v3 stringByReplacingOccurrencesOfString:@".espresso.net" withString:@".espresso.hwx"];

  if (![v8 hasSuffix:@".espresso.hwx"]
    || ([v5 fileExistsAtPath:v8] & 1) == 0)
  {
    if (![(NSString *)v3 hasSuffix:@".espresso.net"])
    {
      uint64_t v10 = [NSString stringWithFormat:@"model.%@.espresso.hwx", v4];
      unint64_t v7 = [(NSString *)v3 stringByAppendingPathComponent:v10];

      if ([v7 hasSuffix:@".espresso.hwx"]
        && ([v5 fileExistsAtPath:v7] & 1) != 0)
      {
LABEL_9:
        int v9 = 1;
        goto LABEL_14;
      }
      unint64_t v8 = [(NSString *)v3 stringByAppendingPathComponent:@"model.espresso.hwx"];

      if ([v8 hasSuffix:@".espresso.hwx"])
      {
        int v9 = [v5 fileExistsAtPath:v8];
        goto LABEL_13;
      }
    }
    int v9 = 0;
    goto LABEL_13;
  }
  int v9 = 1;
LABEL_13:
  unint64_t v7 = v8;
LABEL_14:
  if (get_precompiled_binary_path(NSString *,NSString *)::onceToken != -1) {
    dispatch_once(&get_precompiled_binary_path(NSString *,NSString *)::onceToken, &__block_literal_global_25806);
  }
  if (get_precompiled_binary_path(NSString *,NSString *)::is_internal_build) {
    int v11 = v9;
  }
  else {
    int v11 = 0;
  }
  if (v11 == 1) {
    int v9 = getenv("ESPRESSO_PRIVATE_IGNORE_ANE_PRECOMPILED") == 0;
  }
  uint64_t v12 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  float v13 = [v12 persistentDomainForName:*MEMORY[0x1E4F283E0]];

  uint64_t v14 = [v13 objectForKeyedSubscript:@"espresso.ane.ignore_ane_precompiled"];
  int v15 = [v14 BOOLValue];

  if (v9 & ~v15) {
    id v16 = v7;
  }
  else {
    id v16 = 0;
  }

  return v16;
}

void sub_1921AA350(_Unwind_Exception *a1)
{
  long long v6 = v4;

  _Unwind_Resume(a1);
}

void Espresso::gen_precompilation_info_fstream(uint64_t **a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  Espresso::ANECompilerEngine::current_ane_arch((Espresso::ANECompilerEngine *)a1);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0) {
    unint64_t v4 = a2;
  }
  else {
    unint64_t v4 = (uint64_t *)*a2;
  }
  std::exception_ptr v5 = [NSString stringWithUTF8String:v4];
  long long v6 = [v5 stringByReplacingOccurrencesOfString:@".espresso.net" withString:&stru_1EE39BDB0];

  unint64_t v7 = [NSString stringWithFormat:@"%@.%@.espresso.precompilation_info", v6, v11];
  unint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
  if (([v8 fileExistsAtPath:v7] & 1) == 0)
  {
    uint64_t v9 = [NSString stringWithFormat:@"%@.espresso.precompilation_info", v6];

    unint64_t v7 = (void *)v9;
  }
  if ([v8 fileExistsAtPath:v7])
  {
    [v7 UTF8String];
    uint64_t v10 = operator new(0x258uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)uint64_t v10 = &unk_1EE38D468;
    *a1 = std::ifstream::basic_ifstream((uint64_t *)v10 + 3);
    a1[1] = (uint64_t *)v10;
    if (!*((void *)v10 + 20))
    {
      *a1 = 0;
      a1[1] = 0;
      nitro::nitro_function::nitro_function((std::__shared_weak_count *)v10);
    }
  }
}

void sub_1921AA554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  unint64_t v17 = v15;
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);

  uint8x8_t v20 = *(std::__shared_weak_count **)(v12 + 8);
  if (v20) {
    nitro::nitro_function::nitro_function(v20);
  }
  _Unwind_Resume(a1);
}

unint64_t E5RT::GetPlatformBuildVersion@<X0>(void *a1@<X8>)
{
  if (qword_1E9301C58 != -1) {
    dispatch_once(&qword_1E9301C58, &unk_1EE398F68);
  }
  uint64_t v3 = (const char *)[(id)qword_1E9301C60 UTF8String];
  unint64_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v6 = result | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result)
    {
      *(unsigned char *)a1 = 0;
      return result;
    }
  }
  unint64_t result = (unint64_t)memmove(a1, v3, v5);
  *((unsigned char *)a1 + v5) = 0;
  return result;
}

uint64_t E5RT::E5CompilerConfigOptions::GetBundleCacheLocation(E5RT::E5CompilerConfigOptions *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
  xpc_object_t v2 = (void *)(*(uint64_t (**)(void *, const char *, uint64_t))(*(void *)v1 + 16))(v1, "bundleCacheLocation<std::string>", 32);
  }
  if (!*v2
  {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return result;
}

void E5RT::E5BundleCacheManager::PurgeBundlesFromPastBuildVersions(E5RT::E5BundleCacheManager *this)
{
  MEMORY[0x192FF13C0](&v21, (char *)this + 8, 0, 0);
  xpc_object_t v2 = v21;
  uint64_t v3 = v22;
  if (!v22)
  {
    v20.__imp_.__ptr_ = v21;
    v20.__imp_.__cntrl_ = 0;
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  unint64_t v4 = v22;
  v20.__imp_.__ptr_ = v2;
  v20.__imp_.__cntrl_ = v3;
  if (!v22)
  {
LABEL_6:
    std::string::size_type v18 = 0;
    unint64_t v19 = 0;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  std::string::size_type v18 = 0;
  unint64_t v19 = 0;
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  while (v20.__imp_.__ptr_ != v18)
  {
    size_t v5 = (std::__fs::filesystem::directory_entry *)std::__fs::filesystem::directory_iterator::__dereference(&v20);
    std::__fs::filesystem::path::__string_view v6 = std::__fs::filesystem::path::__filename(&v5->__p_);
    if (v6.__size_ >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v6.__size_ >= 0x17)
    {
      std::basic_string_view<_CharT, _Traits>::size_type v8 = (v6.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6.__size_ | 7) != 0x17) {
        std::basic_string_view<_CharT, _Traits>::size_type v8 = v6.__size_ | 7;
      }
      std::basic_string_view<_CharT, _Traits>::size_type v9 = v8 + 1;
      p_dst = (std::string *)operator new(v8 + 1);
      __dst.__r_.__value_.__l.__size_ = v6.__size_;
      __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_17:
      memmove(p_dst, v6.__data_, v6.__size_);
      goto LABEL_18;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v6.__size_;
    p_dst = &__dst;
    if (v6.__size_) {
      goto LABEL_17;
    }
LABEL_18:
    p_dst->__r_.__value_.__s.__data_[v6.__size_] = 0;
    __p.__pn_ = __dst;
    memset(&__dst, 0, sizeof(__dst));
    uint64_t v10 = *((unsigned __int8 *)this + 55);
    if ((v10 & 0x80u) == 0) {
      id v11 = (std::string *)((char *)this + 32);
    }
    else {
      id v11 = (std::string *)*((void *)this + 4);
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)this + 5);
    }
    std::string::append[abi:ne180100]<char const*,0>(&__dst, v11, (std::string *)((char *)v11 + v10));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v12.__data_ = (const std::string_view::value_type *)&__dst;
    }
    else {
      v12.__data_ = (const std::string_view::value_type *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v12.__size_ = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      v12.__size_ = __dst.__r_.__value_.__l.__size_;
    }
    int v13 = std::__fs::filesystem::path::__compare(&__p, v12);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_34:
        operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        if (!v13) {
          goto LABEL_8;
        }
LABEL_35:
        E5RT::E5BundleCacheManager::PurgeAllBundlesWithinDirPath(this, &v5->__p_);
        goto LABEL_8;
      }
    }
    else if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_34;
    }
    if (v13) {
      goto LABEL_35;
    }
LABEL_8:
    std::__fs::filesystem::directory_iterator::__increment(&v20, 0);
  }
  uint64_t v14 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  cntrl = v20.__imp_.__cntrl_;
  if (v20.__imp_.__cntrl_ && !atomic_fetch_add(&v20.__imp_.__cntrl_->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
    std::__shared_weak_count::__release_weak(cntrl);
  }
  id v16 = v22;
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_1921AAA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void Espresso::AOT::Validators::BnnsValidator::Validate(E5Common::E5PlatformManager *a1, uint64_t a2, uint64_t *a3)
{
  if (*((unsigned char *)a1 + 24))
  {
    *((unsigned char *)&v16.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&v16, "local");
  }
  else
  {
    uint64_t v6 = E5Common::E5PlatformManager::Instance(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v6 + 24))(v6, (unsigned char *)a1 + 8);
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v7;
      v16.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    }
  }
  *(_OWORD *)std::__fs::filesystem::path __p = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  int v15 = 1065353216;
  Espresso::AOT::Utils::MakeValidationInput(0, a2, a3, (uint64_t *)&v16, (uint64_t)__p);
  std::basic_string_view<_CharT, _Traits>::size_type v9 = (void **)v14[0];
  if (!v14[0])
  {
LABEL_7:
    uint64_t v10 = __p[0];
    __p[0] = 0;
    if (v10) {
      operator delete(v10);
    }
    id v11 = (void *)BNNSGraphE5Validate();
    Espresso::AOT::Utils::ParseValidationOutput(0, v11);
  }
  while (1)
  {
    std::__fs::filesystem::path::__string_view v12 = (void **)*v9;
    if (*((char *)v9 + 63) < 0)
    {
      operator delete(v9[5]);
      if (*((char *)v9 + 39) < 0) {
LABEL_15:
      }
        operator delete(v9[2]);
    }
    else if (*((char *)v9 + 39) < 0)
    {
      goto LABEL_15;
    }
    operator delete(v9);
    std::basic_string_view<_CharT, _Traits>::size_type v9 = v12;
    if (!v12) {
      goto LABEL_7;
    }
  }
}

void sub_1921AAC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id Espresso::AOT::Utils::MakeValidationInput(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  unint64_t v26 = a1;
  if (a1 >= 3) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation api version %lu", &v26);
  }
  uint64_t v25 = a2;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  for (unint64_t i = *(uint64_t **)(a5 + 16); i; unint64_t i = (uint64_t *)*i)
  {
    uint64_t v10 = i + 5;
    if (*((char *)i + 63) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    id v11 = [NSString stringWithUTF8String:v10];
    std::__fs::filesystem::path::__string_view v12 = i + 2;
    if (*((char *)i + 39) < 0) {
      std::__fs::filesystem::path::__string_view v12 = (void *)*v12;
    }
    int v13 = [NSString stringWithUTF8String:v12];
    [v8 setObject:v11 forKeyedSubscript:v13];
  }
  uint64_t v14 = [NSString stringWithUTF8String:&Espresso::AOT::Utils::kMILProgram];
  v27[0] = v14;
  int v15 = [MEMORY[0x1E4F1C9B8] dataWithBytes:&v25 length:8];
  v28[0] = v15;
  std::string v16 = [NSString stringWithUTF8String:"function"];
  v27[1] = v16;
  if (*((char *)a3 + 23) >= 0) {
    unint64_t v17 = a3;
  }
  else {
    unint64_t v17 = (uint64_t *)*a3;
  }
  std::string::size_type v18 = [NSString stringWithUTF8String:v17];
  v28[1] = v18;
  unint64_t v19 = [NSString stringWithUTF8String:"architecture"];
  uint64_t v27[2] = v19;
  if (*((char *)a4 + 23) >= 0) {
    std::__fs::filesystem::directory_iterator v20 = a4;
  }
  else {
    std::__fs::filesystem::directory_iterator v20 = (uint64_t *)*a4;
  }
  uint64_t v21 = [NSString stringWithUTF8String:v20];
  uint64_t v28[2] = v21;
  uint64_t v22 = [NSString stringWithUTF8String:"parameters"];
  v27[3] = v22;
  v28[3] = v8;
  int v23 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v28 forKeys:v27 count:4];

  return v23;
}

void sub_1921AAF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id Espresso::ANERuntimeEngine::compiler::key_for_segment(Espresso::ANERuntimeEngine::compiler *this, uint64_t a2, const Espresso::net_compiler_segment_based::segment_t *a3)
{
  v112[1] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (void *)*((void *)this + 21);
  unsigned int v71 = a2;
  size_t v5 = [NSNumber numberWithInt:a2];
  uint64_t v6 = [v4 objectForKeyedSubscript:v5];

  if (v6)
  {
    id v7 = v6;
  }
  else
  {
    uint64_t v97 = 0;
    long long v98 = 0;
    id v8 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v8 || (v98 = std::__shared_weak_count::lock(v8)) == 0 || (uint64_t v9 = *((void *)this + 1), (v97 = v9) == 0))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Inconsistent state");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v72 = objc_opt_new();
    std::string::size_type v67 = objc_opt_new();
    char v68 = objc_opt_new();
    uint64_t v74 = objc_opt_new();
    std::unordered_set<std::string>::unordered_set((uint64_t)v108, (uint64_t)a3 + 16);
    id v70 = v67;
    uint64_t v110 = v70;
    std::unordered_set<std::string>::unordered_set((uint64_t)v111, (uint64_t)a3 + 56);
    id v10 = v68;
    char v11 = 0;
    uint64_t v12 = 0;
    id v69 = v10;
    v112[0] = v10;
    int v13 = (void *)(v9 + 136);
    do
    {
      char v75 = v11;
      uint64_t v14 = v108[6 * v12 + 2];
      if (v14)
      {
        uint64_t v76 = (void **)&v111[6 * v12 - 1];
        do
        {
          if (*((char *)v14 + 39) < 0) {
            std::string::__init_copy_ctor_external(&v93, *((const std::string::value_type **)v14 + 2), *((void *)v14 + 3));
          }
          else {
            std::string v93 = *(std::string *)(v14 + 1);
          }
          if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v13, (unsigned __int8 *)&v93))
          {
            *(void *)std::string buf = &v93;
            std::string v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v13, (unsigned __int8 *)&v93, (long long **)buf);
            unint64_t v17 = (const void *)*((void *)v16 + 5);
            if (v17)
            {
              if (v18)
              {
                unint64_t v19 = v18;
                std::__fs::filesystem::directory_iterator v20 = (std::__shared_weak_count *)*((void *)v16 + 6);
                if (v20) {
                  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                size_t v106 = @"shape";
                size_t v79 = v20;
                int v77 = [NSNumber numberWithInt:v18[44]];
                v105[0] = v77;
                uint64_t v21 = [NSNumber numberWithInt:v19[43]];
                v105[1] = v21;
                uint64_t v22 = [NSNumber numberWithInt:v19[42]];
                v105[2] = v22;
                int v23 = [NSNumber numberWithInt:v19[41]];
                v105[3] = v23;
                unint64_t v24 = [NSNumber numberWithInt:v19[40]];
                v105[4] = v24;
                uint64_t v25 = [MEMORY[0x1E4F1C978] arrayWithObjects:v105 count:5];
                long long v107 = v25;
                unint64_t v26 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v107 forKeys:&v106 count:1];
                uint64_t v27 = *v76;
                if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v28 = &v93;
                }
                else {
                  int v28 = (std::string *)v93.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v29 = [NSString stringWithUTF8String:v28];
                [v27 setObject:v26 forKeyedSubscript:v29];

                if (v79) {
                  nitro::nitro_function::nitro_function(v79);
                }
              }
            }
          }
          else
          {
            int v30 = Espresso::espresso_os_log_subsystem(0, v15);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v31 = &v93;
              }
              else {
                uint64_t v31 = (std::string *)v93.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v31;
              _os_log_error_impl(&dword_1920CB000, v30, OS_LOG_TYPE_ERROR, "[key_for_segment] blob not found: %s", buf, 0xCu);
            }
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          uint64_t v14 = *(long long **)v14;
        }
        while (v14);
      }
      char v11 = 1;
      uint64_t v12 = 1;
    }
    while ((v75 & 1) == 0);
    for (uint64_t i = 0; i != -12; i -= 6)
    {

      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v111[i]);
    }
    uint64_t v33 = v97;
    uint64_t v34 = *(void *)(v97 + 640);
    if (*(void *)(v97 + 648) != v34)
    {
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      do
      {
        unint64_t v37 = (long long *)(v34 + v35);
        if (*((char *)v37 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)v37, *((void *)v37 + 1));
        }
        else
        {
          long long v38 = *v37;
          v96.__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
          *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v38;
        }
        v108[0] = (long long *)&v96;
        std::string::size_type v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33 + 136, (unsigned __int8 *)&v96, v108);
        uint64_t v41 = *((void *)v39 + 5);
        uint64_t v40 = (std::__shared_weak_count *)*((void *)v39 + 6);
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v80 = v40;
        v103[0] = @"shape";
        uint8x8_t v42 = NSNumber;
        Espresso::abstract_blob_container::shape((char *)v108, v41);
        size_t v78 = [v42 numberWithInt:v109];
        v102[0] = v78;
        uint64_t v43 = NSNumber;
        Espresso::abstract_blob_container::shape((char *)&v93, v41);
        unint64_t v44 = [v43 numberWithInt:HIDWORD(v93.__r_.__value_.__r.__words[1])];
        v102[1] = v44;
        unint64_t v45 = NSNumber;
        Espresso::abstract_blob_container::shape(buf, v41);
        uint64_t v46 = [v45 numberWithInt:*(unsigned int *)&buf[8]];
        v102[2] = v46;
        uint64_t v47 = NSNumber;
        Espresso::abstract_blob_container::shape(v89, v41);
        char v48 = [v47 numberWithInt:v90];
        v102[3] = v48;
        size_t v49 = NSNumber;
        Espresso::abstract_blob_container::shape(v86, v41);
        size_t v50 = [v49 numberWithInt:*(unsigned int *)v86];
        v102[4] = v50;
        long long v51 = [MEMORY[0x1E4F1C978] arrayWithObjects:v102 count:5];
        v104[0] = v51;
        v103[1] = @"rank";
        long long v52 = NSNumber;
        Espresso::abstract_blob_container::shape(v81, v41);
        if (v82 == 1) {
          unsigned int v53 = 4;
        }
        else {
          unsigned int v53 = 5;
        }
        if (v83 == -1) {
          uint64_t v54 = v53;
        }
        else {
          uint64_t v54 = v83;
        }
        uint64_t v55 = [v52 numberWithInt:v54];
        v104[1] = v55;
        std::string::size_type v56 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v104 forKeys:v103 count:2];
        if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v96;
        }
        else {
          uint64_t v57 = (std::string *)v96.__r_.__value_.__r.__words[0];
        }
        unint64_t v58 = [NSString stringWithUTF8String:v57];
        [v74 setObject:v56 forKeyedSubscript:v58];

        if (__p)
        {
          uint64_t v85 = __p;
          operator delete(__p);
        }

        if (v87)
        {
          size_t v88 = v87;
          operator delete(v87);
        }

        if (v91)
        {
          uint64_t v92 = v91;
          operator delete(v91);
        }

        if (v100)
        {
          uint64_t v101 = v100;
          operator delete(v100);
        }

        if (v94)
        {
          unint64_t v95 = v94;
          operator delete(v94);
        }

        if (v110)
        {
          v111[0] = v110;
          operator delete(v110);
        }
        if (v80) {
          nitro::nitro_function::nitro_function(v80);
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v96.__r_.__value_.__l.__data_);
        }
        ++v36;
        uint64_t v33 = v97;
        uint64_t v34 = *(void *)(v97 + 640);
        v35 += 24;
      }
      while (v36 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v97 + 648) - v34) >> 3));
    }
    if ((Espresso::use_multiple_procedure_for_segments(&v97) & 1) == 0)
    {
      uint64_t v59 = [NSNumber numberWithInt:v71];
      [v72 setObject:v59 forKeyedSubscript:@"isegment"];
    }
    [v72 setObject:v70 forKeyedSubscript:@"inputs"];
    [v72 setObject:v69 forKeyedSubscript:@"outputs"];
    if ((Espresso::ANECompilerEngine::is_mix(0, v60) & 1) == 0 && *((unsigned char *)this + 24) && !*(void *)(v33 + 792)) {
      [v72 setObject:v74 forKeyedSubscript:@"net_inputs"];
    }
    uint64_t v61 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v72 options:0 error:0];
    unsigned __int8 v62 = (void *)[[NSString alloc] initWithData:v61 encoding:4];
    long long v63 = (void *)*((void *)this + 21);
    int v64 = [NSNumber numberWithInt:v71];
    [v63 setObject:v62 forKeyedSubscript:v64];

    id v7 = v62;
    if (v98) {
      nitro::nitro_function::nitro_function(v98);
    }
  }

  return v7;
}

void sub_1921AB888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  if (a62) {
    nitro::nitro_function::nitro_function(a62);
  }
  _Unwind_Resume(a1);
}

void Espresso::AOT::Utils::ParseValidationOutput(unint64_t a1, void *a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  unint64_t v97 = a1;
  id v91 = a2;
  if (a1 >= 3) {
    Espresso::throw_exception_selector<Espresso::not_implemented_error,unsigned long long &>("Backend validation api version %lu", &v97);
  }
  uint64_t v3 = [NSString stringWithUTF8String:"resultsVersion"];
  unint64_t v4 = [v91 objectForKeyedSubscript:v3];

  if (!v4)
  {
    *((unsigned char *)&v96.__r_.__value_.__s + 23) = 8;
    strcpy((char *)&v96, "Missing ");
    size_t v78 = std::string::append(&v96, "resultsVersion");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v78->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
  }
  if ([v4 unsignedLongLongValue] != a1)
  {
    std::to_string(&__dst, a1);
    long long v80 = std::string::insert(&__dst, 0, "Unexpected result version. Expecting ");
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    int v82 = std::string::append(&__p, ", got ");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v100, [v4 unsignedLongLongValue]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v84 = &v100;
    }
    else {
      std::string::size_type v84 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v100.__r_.__value_.__l.__size_;
    }
    uint64_t v86 = std::string::append(&v96, (const std::string::value_type *)v84, size);
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v86->__r_.__value_.__l + 2);
    *(_OWORD *)std::string buf = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
  }
  memset(&v96, 0, sizeof(v96));
  memset(&__p, 0, sizeof(__p));
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  uint64_t v90 = [NSString stringWithUTF8String:"support"];
  uint64_t v89 = [NSString stringWithUTF8String:"errorMsg"];
  id v8 = [NSNumber numberWithInt:0xFFFFFFFFLL];
  uint64_t v9 = [v91 objectForKeyedSubscript:v8];

  if (v9
    || ([v91 objectForKeyedSubscript:@"-1"],
        (uint64_t v9 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    memset(buf, 0, sizeof(buf));
    char v11 = [v9 objectForKeyedSubscript:v89];
    uint64_t v12 = v11;
    if (v11)
    {
      MEMORY[0x192FF0F50](buf, [v11 UTF8String]);
      std::operator+<char>();
      int v13 = std::string::append(&__dst, ")");
      std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
      v100.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
      uint8_t v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      *(void *)std::string buf = v14;
      *(void *)&buf[8] = v100.__r_.__value_.__r.__words[0];
      *(void *)&buf[15] = *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7);
      buf[23] = v15;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }

    unint64_t v17 = Espresso::espresso_os_log_subsystem(0, v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
      Espresso::AOT::Utils::ParseValidationOutput((uint64_t *)buf, v17);
    }

    operator new();
  }
  uint64_t v93 = 0;
  if (*(void *)(*(void *)v7 + 8) == **(void **)v7) {
LABEL_68:
  }
    operator new();
  *(void *)&long long v10 = 134218498;
  long long v88 = v10;
  while (1)
  {
    buf[23] = 5;
    strcpy((char *)buf, "milId");
    uint64_t Attribute = (MIL::IRValue *)MIL::IRObject::GetAttribute();
    MIL::IRValue::AsTensor(Attribute);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    unint64_t v19 = MIL::IRValue::GetScalar<unsigned long long>();
    std::__fs::filesystem::directory_iterator v20 = [NSNumber numberWithUnsignedLongLong:v19];
    uint64_t v21 = [v91 objectForKeyedSubscript:v20];

    if (!v21)
    {
      uint64_t v22 = [NSNumber numberWithUnsignedLongLong:v19];
      int v23 = [v22 stringValue];
      uint64_t v21 = [v91 objectForKeyedSubscript:v23];

      if (!v21)
      {
        std::to_string(&__dst, v19);
        uint64_t v76 = std::string::insert(&__dst, 0, "Missing op validation result for op ");
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        *(void *)&uint8_t buf[16] = *((void *)&v76->__r_.__value_.__l + 2);
        *(_OWORD *)std::string buf = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
      }
    }
    unint64_t v24 = objc_msgSend(v21, "objectForKeyedSubscript:", v90, v88);
    uint64_t v25 = v24;
    if (!v24)
    {
      std::to_string(&v92, v19);
      int v64 = std::string::insert(&v92, 0, "Validation result for op id ");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      std::random_device v66 = std::string::append(&v100, " missing ");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      char v68 = std::string::append(&__dst, "support");
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&v68->__r_.__value_.__l + 2);
      *(_OWORD *)std::string buf = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_71;
        }
LABEL_93:
        operator delete(v100.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_73;
        }
      }
      else
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_93;
        }
LABEL_71:
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
LABEL_73:
        }
      }
      operator delete(v92.__r_.__value_.__l.__data_);
      goto LABEL_73;
    }
    if ([v24 unsignedCharValue])
    {
      std::string::size_type v26 = v96.__r_.__value_.__l.__size_;
      if (v96.__r_.__value_.__l.__size_ < v96.__r_.__value_.__r.__words[2])
      {
        *(void *)v96.__r_.__value_.__l.__size_ = v93;
        std::string::size_type v27 = v26 + 8;
LABEL_59:
        v96.__r_.__value_.__l.__size_ = v27;
        goto LABEL_60;
      }
      unint64_t v36 = (void *)v96.__r_.__value_.__r.__words[0];
      std::string::size_type v37 = v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0];
      uint64_t v38 = (uint64_t)(v96.__r_.__value_.__l.__size_ - v96.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v40 = v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0];
      if ((uint64_t)(v96.__r_.__value_.__r.__words[2] - v96.__r_.__value_.__r.__words[0]) >> 2 > v39) {
        unint64_t v39 = v40 >> 2;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        if (v41 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint8x8_t v42 = (char *)operator new(8 * v41);
        uint64_t v43 = &v42[8 * v38];
        *(void *)uint64_t v43 = v93;
        std::string::size_type v27 = (std::string::size_type)(v43 + 8);
        if ((void *)v26 == v36) {
          goto LABEL_57;
        }
LABEL_51:
        unint64_t v48 = v26 - 8 - (void)v36;
        if (v48 < 0x58) {
          goto LABEL_100;
        }
        if (v26 - (unint64_t)&v42[v37] < 0x20) {
          goto LABEL_100;
        }
        uint64_t v49 = (v48 >> 3) + 1;
        uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        std::string::size_type v51 = v26 - v50;
        v43 -= v50;
        long long v52 = &v42[8 * v38 - 16];
        unsigned int v53 = (long long *)(v26 - 16);
        uint64_t v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v55 = *v53;
          *((_OWORD *)v52 - 1) = *(v53 - 1);
          *(_OWORD *)long long v52 = v55;
          v52 -= 32;
          v53 -= 2;
          v54 -= 4;
        }
        while (v54);
        std::string::size_type v26 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_100:
          do
          {
            uint64_t v56 = *(void *)(v26 - 8);
            v26 -= 8;
            *((void *)v43 - 1) = v56;
            v43 -= 8;
          }
          while ((void *)v26 != v36);
        }
      }
      else
      {
        uint8x8_t v42 = 0;
        uint64_t v43 = (char *)(8 * v38);
        *(void *)(8 * v38) = v93;
        std::string::size_type v27 = 8 * v38 + 8;
        if ((void *)v26 != v36) {
          goto LABEL_51;
        }
      }
LABEL_57:
      v96.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      v96.__r_.__value_.__l.__size_ = v27;
      v96.__r_.__value_.__r.__words[2] = (std::string::size_type)&v42[8 * v41];
      if (v36) {
        operator delete(v36);
      }
      goto LABEL_59;
    }
    std::string::size_type v29 = [v21 objectForKeyedSubscript:v89];
    if (!v29)
    {
      std::to_string(&v92, v19);
      id v70 = std::string::insert(&v92, 0, "Validation result for op id ");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      long long v72 = std::string::append(&v100, " missing ");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      uint64_t v74 = std::string::append(&__dst, "errorMsg");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      *(void *)&uint8_t buf[16] = *((void *)&v74->__r_.__value_.__l + 2);
      *(_OWORD *)std::string buf = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_77;
        }
LABEL_96:
        operator delete(v100.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_79;
        }
      }
      else
      {
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_96;
        }
LABEL_77:
        if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
LABEL_79:
        }
      }
      operator delete(v92.__r_.__value_.__l.__data_);
      goto LABEL_79;
    }
    int v30 = Espresso::espresso_os_log_subsystem(0, v28);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = v93;
      uint64_t v58 = *(void *)(**(void **)v7 + 16 * v93);
      uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 56))(v58);
      int v60 = *(char *)(v59 + 23);
      uint64_t v61 = *(void *)v59;
      uint64_t v62 = [v29 UTF8String];
      *(_DWORD *)std::string buf = v88;
      if (v60 >= 0) {
        uint64_t v63 = v59;
      }
      else {
        uint64_t v63 = v61;
      }
      *(void *)&uint8_t buf[4] = v57;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v63;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v99 = v62;
      _os_log_debug_impl(&dword_1920CB000, v30, OS_LOG_TYPE_DEBUG, "Unsupported op %zu (%s): %s", buf, 0x20u);
    }

    id v31 = v29;
    uint64_t v32 = (const char *)[v31 UTF8String];
    size_t v33 = strlen(v32);
    if (v33 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v34 = v33;
    if (v33 >= 0x17) {
      break;
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v33;
    p_dst = &__dst;
    if (v33) {
      goto LABEL_43;
    }
LABEL_44:
    p_dst[v34] = 0;
    Espresso::AOT::ValidationMessage::ValidationMessage(buf, &v93, (long long *)&__dst);
    std::string::size_type v46 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::vector<Espresso::AOT::ValidationMessage>::__push_back_slow_path<Espresso::AOT::ValidationMessage>(&__p.__r_.__value_.__l.__data_, (uint64_t)buf);
      if (SHIBYTE(v99) < 0)
      {
        operator delete(*(void **)&buf[8]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_49;
        }
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_49;
      }
LABEL_46:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_49;
    }
    *(void *)__p.__r_.__value_.__l.__size_ = *(void *)buf;
    long long v47 = *(_OWORD *)&buf[8];
    *(void *)(v46 + 24) = v99;
    *(_OWORD *)(v46 + 8) = v47;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v99 = 0;
    *(void *)&buf[8] = 0;
    __p.__r_.__value_.__l.__size_ = v46 + 32;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_46;
    }
LABEL_49:

LABEL_60:
    if (++v93 >= (unint64_t)((uint64_t)(*(void *)(*(void *)v7 + 8) - **(void **)v7) >> 4)) {
      goto LABEL_68;
    }
  }
  uint64_t v44 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v44 = v33 | 7;
  }
  uint64_t v45 = v44 + 1;
  p_dst = operator new(v44 + 1);
  __dst.__r_.__value_.__l.__size_ = v34;
  __dst.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
  memmove(p_dst, v32, v34);
  goto LABEL_44;
}

void sub_1921AC794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (*(char *)(v43 - 137) < 0)
  {
    operator delete(*(void **)(v43 - 160));
    if (*(char *)(v43 - 105) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v43 - 128));
      if (a43 < 0)
      {
LABEL_8:
        operator delete(__p);
        if (a36 < 0)
        {
LABEL_11:
          operator delete(a31);
          if ((a29 & 0x80000000) == 0)
          {
LABEL_15:

            _Unwind_Resume(a1);
          }
LABEL_14:
          operator delete(a24);
          goto LABEL_15;
        }
LABEL_13:
        if ((a29 & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
LABEL_10:
      if (a36 < 0) {
        goto LABEL_11;
      }
      goto LABEL_13;
    }
  }
  else if (*(char *)(v43 - 105) < 0)
  {
    goto LABEL_5;
  }
  if (a43 < 0) {
    goto LABEL_8;
  }
  goto LABEL_10;
}

void Espresso::AOT::Validators::E5MinimalCpuValidator::Validate(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t Function = MIL::IRProgram::GetFunction();
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)Function + 40))(Function);
  E5Common::MinimalCpu::MatchAllPatterns(v2, v4, (uint64_t)&v44);
  unint64_t v41 = 0;
  uint8x8_t v42 = 0;
  uint64_t v43 = 0;
  size_t v5 = v44;
  int64_t v40 = v45;
  if (v44 == v45)
  {
LABEL_52:
    std::string __p = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    operator new();
  }
  while (1)
  {
    uint64_t v7 = (unsigned char *)v5[1];
    uint64_t v6 = (unsigned char *)v5[2];
    int64_t v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) >= 0x10)
    {
      std::string __p = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      if (v6 == v7)
      {
        long long v10 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        if (v8 < 0) {
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = operator new(v6 - v7);
        long long v10 = (char *)&v9[v8 >> 3];
        memcpy(v9, v7, v8);
      }
      std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
      uint64_t v11 = v10 - (char *)v9;
      if ((unint64_t)(v10 - (char *)v9) >= 0x10)
      {
        unint64_t v32 = v11 >> 3;
        BOOL v33 = (unint64_t)(v11 >> 3) > 2;
        uint64_t v34 = 2;
        if (v33) {
          uint64_t v34 = v32;
        }
        uint64_t v35 = v9[1];
        if (v35 != *v9 + 1)
        {
          operator delete(v9);
          goto LABEL_4;
        }
        uint64_t v36 = 2;
        do
        {
          if (v34 == v36) {
            goto LABEL_12;
          }
          unint64_t v37 = v36;
          uint64_t v38 = v35 + 1;
          uint64_t v39 = v9[v36++];
          uint64_t v35 = v39;
        }
        while (v39 == v38);
        operator delete(v9);
        if (v37 < v32) {
          goto LABEL_4;
        }
      }
      else if (v9)
      {
LABEL_12:
        operator delete(v9);
      }
    }
    uint64_t v12 = (void *)v5[1];
    int v13 = (void *)v5[2];
    if (v12 != v13)
    {
      std::string::size_type v14 = v42;
      while (v14 < v43)
      {
        *(void *)std::string::size_type v14 = *v12;
        uint64_t v15 = (uint64_t)(v14 + 8);
LABEL_16:
        uint8x8_t v42 = (char *)v15;
        ++v12;
        std::string::size_type v14 = (char *)v15;
        if (v12 == v13) {
          goto LABEL_4;
        }
      }
      std::string v16 = v41;
      uint64_t v17 = (v14 - v41) >> 3;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v43 - v41;
      if ((v43 - v41) >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        if (v20 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v21 = operator new(8 * v20);
        uint64_t v22 = &v21[8 * v17];
        *(void *)uint64_t v22 = *v12;
        uint64_t v15 = (uint64_t)(v22 + 8);
        if (v14 == v41) {
          goto LABEL_32;
        }
LABEL_29:
        unint64_t v23 = v14 - 8 - v41;
        if (v23 < 0x168)
        {
          unint64_t v24 = v14;
          goto LABEL_31;
        }
        if (&v21[v14 - v41 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v21[v14 - v41 - 8])
        {
          unint64_t v24 = v14;
          goto LABEL_31;
        }
        if (&v14[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v14 - 8)
        {
          unint64_t v24 = v14;
          goto LABEL_31;
        }
        if ((unint64_t)(v41 - v21) < 0x20)
        {
          unint64_t v24 = v14;
          goto LABEL_31;
        }
        uint64_t v26 = (v23 >> 3) + 1;
        uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v24 = &v14[-v27];
        v22 -= v27;
        int v28 = &v21[8 * v17 - 16];
        std::string::size_type v29 = v14 - 16;
        uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          _OWORD *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_31:
            uint64_t v25 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v22 - 1) = v25;
            v22 -= 8;
          }
          while (v24 != v41);
        }
      }
      else
      {
        uint64_t v21 = 0;
        uint64_t v22 = (char *)(8 * v17);
        *(void *)(8 * v17) = *v12;
        uint64_t v15 = 8 * v17 + 8;
        if (v14 != v41) {
          goto LABEL_29;
        }
      }
LABEL_32:
      unint64_t v41 = v22;
      uint64_t v43 = &v21[8 * v20];
      if (v16) {
        operator delete(v16);
      }
      goto LABEL_16;
    }
LABEL_4:
    v5 += 4;
    if (v5 == v40) {
      goto LABEL_52;
    }
  }
}

void sub_1921AD068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  MEMORY[0x192FF16B0](v18, 0x10B1C40E94733EDLL);
  std::vector<Espresso::AOT::ValidationMessage>::~vector[abi:ne180100](&a17);
  if (__p) {
    operator delete(__p);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t Espresso::AOT::ValidationResult::ValidationResult(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1EE36B1D0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if (v7 < 0) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (char *)operator new(v5 - *(void *)a2);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>((void *)(a1 + 32), *a3, a3[1], (a3[1] - *a3) >> 5);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  return a1;
}

void sub_1921AD1C4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<Espresso::AOT::ValidationMessage>::__init_with_size[abi:ne180100]<Espresso::AOT::ValidationMessage*,Espresso::AOT::ValidationMessage*>(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v8 = (char *)operator new(32 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        *(void *)&v8[v9] = *(void *)(a2 + v9);
        uint64_t v11 = (std::string *)&v8[v9 + 8];
        uint64_t v12 = (const std::string::value_type **)(a2 + v9 + 8);
        if (*(char *)(a2 + v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *v12, *(void *)(v10 + 16));
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)v12;
          *(void *)&v8[v9 + 24] = *(void *)(a2 + v9 + 24);
        }
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1921AD2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *Espresso::AOT::ValidationResult::SetFeature(uint64_t a1, long long *a2, char a3)
{
  uint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 56, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v5);
  result[40] = a3;
  return result;
}

char *std::__hash_table<std::__hash_value_type<std::string,BOOL>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,BOOL>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,BOOL>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      std::string::size_type v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v9)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v14 + 16, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4) {
              break;
            }
          }
          std::string::size_type v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  std::string::size_type v14 = (char *)operator new(0x30uLL);
  *(void *)std::string::size_type v14 = 0;
  *((void *)v14 + 1) = v9;
  std::string v16 = (std::string *)(v14 + 16);
  uint64_t v17 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v18 = *v17;
    *((void *)v14 + 4) = *((void *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  char v14[40] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t prime = v23;
    }
    else {
      size_t prime = v22;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v25) {
      goto LABEL_33;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_33:
      }
        std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v29 = *(void *)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v4);
  if (v30)
  {
    *(void *)std::string::size_type v14 = *v30;
LABEL_57:
    void *v30 = v14;
    goto LABEL_58;
  }
  *(void *)std::string::size_type v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v29 + 8 * v4) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v31 = *(void *)(*(void *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v31 >= v10) {
        v31 %= v10;
      }
    }
    else
    {
      v31 &= v10 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_57;
  }
LABEL_58:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1921AD660(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t e5rt_io_port_bind_buffer_object(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE393AE8;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921AD76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t espresso_plan_build(uint64_t *a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FF2020]();
  uint64_t v3 = espresso_plan_build_with_options(a1, 0, 0);
  return v3;
}

uint64_t espresso_plan_build_with_options(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)MEMORY[0x192FF2020]();
  if (!a1 {
    || (uint64_t v7 = *a1,
  }
  {
LABEL_15:
    uint64_t v13 = 4294967290;
    goto LABEL_16;
  }
  if (a3)
  {
    if (a2)
    {
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(a2 + 8 * v8);
        if (*(_DWORD *)v9 != 1) {
          break;
        }
        std::string::basic_string[abi:ne180100](&__str, *(void **)(v9 + 16), *(void *)(v9 + 8));
        uint64_t v10 = a1[133];
        uint64_t v11 = *(void *)(v10 + 24);
        uint64_t v12 = *(void *)(v10 + 32);
        while (v11 != v12)
        {
          std::string::operator=((std::string *)(*(void *)v11 + 448), &__str);
          v11 += 16;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (++v8 == a3)
        {
          uint64_t v7 = *a1;
          goto LABEL_14;
        }
      }
    }
    goto LABEL_15;
  }
LABEL_14:
  (*(void (**)(uint64_t *))(v7 + 40))(a1);
  uint64_t v13 = 0;
LABEL_16:
  return v13;
}

void EspressoLight::espresso_plan::prepare(EspressoLight::espresso_plan *this)
{
  uint64_t v2 = *((void *)this + 133);
  int v3 = *(_DWORD *)(v2 + 160);
  if (v3) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v3);
  }
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 == v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Empty espresso_plan.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(void *)(v2 + 112))
  {
    BOOL v6 = 1;
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = *(void *)(v2 + 136);
    do
    {
      uint64_t v9 = *(void **)(*(void *)v5 + 232);
      uint64_t v10 = *(void *)v5 + 240;
      if (v9 != (void *)v10)
      {
        do
        {
          uint64_t v11 = (char *)(v9 + 4);
          if (*((char *)v9 + 55) < 0) {
            uint64_t v11 = *(char **)v11;
          }
          EspressoLight::espresso_plan::declare_input(this, v7, v11);
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              uint64_t v13 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v13 = (void *)v9[2];
              BOOL v14 = *v13 == (void)v9;
              uint64_t v9 = v13;
            }
            while (!v14);
          }
          uint64_t v9 = v13;
        }
        while (v13 != (void *)v10);
      }
      ++v7;
      v5 += 16;
    }
    while (v5 != v4);
    BOOL v6 = v8 != 0;
    uint64_t v2 = *((void *)this + 133);
  }
  if (!*(void *)(v2 + 136))
  {
    uint64_t v15 = *(void *)(v2 + 24);
    uint64_t v16 = *(void *)(v2 + 32);
    if (v15 != v16)
    {
      int v17 = 0;
      do
      {
        long long v18 = *(void **)(*(void *)v15 + 256);
        uint64_t v19 = *(void *)v15 + 264;
        if (v18 != (void *)v19)
        {
          do
          {
            float v20 = (char *)(v18 + 4);
            if (*((char *)v18 + 55) < 0) {
              float v20 = *(char **)v20;
            }
            EspressoLight::espresso_plan::declare_output(this, v17, v20);
            BOOL v21 = (void *)v18[1];
            if (v21)
            {
              do
              {
                unint64_t v22 = v21;
                BOOL v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                unint64_t v22 = (void *)v18[2];
                BOOL v14 = *v22 == (void)v18;
                long long v18 = v22;
              }
              while (!v14);
            }
            long long v18 = v22;
          }
          while (v22 != (void *)v19);
        }
        ++v17;
        v15 += 16;
      }
      while (v15 != v16);
      uint64_t v2 = *((void *)this + 133);
    }
  }
  if (v6)
  {
    unint64_t v23 = *(uint64_t **)(v2 + 24);
    unint64_t v24 = *(uint64_t **)(v2 + 32);
    if (v23 != v24)
    {
      while (1)
      {
        uint64_t v26 = *v23;
        int8x8_t v25 = (std::__shared_weak_count *)v23[1];
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!Espresso::net::fast_reshape_enabled((Espresso::net *)v26)) {
          goto LABEL_55;
        }
        uint8x8_t v27 = *(void **)(v26 + 280);
        if (v27 != (void *)(v26 + 288)) {
          break;
        }
LABEL_45:
        unint64_t v31 = *(void **)(v26 + 304);
        if (v31 != (void *)(v26 + 312))
        {
          unint64_t v32 = *(void **)(v26 + 264);
          while (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v32, v31 + 4))
          {
            BOOL v33 = (void *)v31[1];
            if (v33)
            {
              do
              {
                uint64_t v34 = v33;
                BOOL v33 = (void *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                uint64_t v34 = (void *)v31[2];
                BOOL v14 = *v34 == (void)v31;
                unint64_t v31 = v34;
              }
              while (!v14);
            }
            unint64_t v31 = v34;
            if (v34 == (void *)(v26 + 312)) {
              goto LABEL_56;
            }
          }
LABEL_55:
          *(unsigned char *)(v26 + 180) = 0;
          Espresso::shape_network_recursive((Espresso *)v26, (Espresso::net *)(v26 + 184), 0, 0);
        }
LABEL_56:
        if (v25) {
          nitro::nitro_function::nitro_function(v25);
        }
        v23 += 2;
        if (v23 == v24)
        {
          uint64_t v2 = *((void *)this + 133);
          goto LABEL_60;
        }
      }
      uint64_t v28 = *(void **)(v26 + 240);
      while (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v28, v27 + 4))
      {
        uint64_t v29 = (void *)v27[1];
        if (v29)
        {
          do
          {
            uint64_t v30 = v29;
            uint64_t v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            uint64_t v30 = (void *)v27[2];
            BOOL v14 = *v30 == (void)v27;
            uint8x8_t v27 = v30;
          }
          while (!v14);
        }
        uint8x8_t v27 = v30;
        if (v30 == (void *)(v26 + 288)) {
          goto LABEL_45;
        }
      }
      goto LABEL_55;
    }
  }
LABEL_60:
  uint64_t v35 = *(void **)(v2 + 96);
  uint64_t v36 = (void *)(v2 + 104);
  if (v35 != (void *)(v2 + 104))
  {
    do
    {
      LODWORD(v84) = *((_DWORD *)v35 + 8);
      unint64_t v37 = (uint64_t *)(*(void *)(*((void *)this + 133) + 24) + 16 * (int)v84);
      uint64_t v38 = *v37;
      uint64_t v39 = (std::__shared_weak_count *)v37[1];
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v40 = (unsigned __int8 *)v35[5];
      if (v40 != (unsigned __int8 *)(v35 + 6))
      {
        uint64_t v41 = v38 + 136;
        do
        {
          __p[0] = v40 + 32;
          uint8x8_t v42 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v41, v40 + 32, (long long **)__p);
          Espresso::abstract_blob_container::shape((char *)v79, *((void *)v42 + 5));
          uint64_t v43 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 48), (int)v84, &v84);
          __p[0] = v40 + 32;
          uint64_t v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v43 + 5, (void *)v40 + 4, (long long **)__p);
          long long v45 = v80;
          *(_OWORD *)(v44 + 56) = *(_OWORD *)v79;
          *(_OWORD *)(v44 + 72) = v45;
          *((void *)v44 + 11) = v81;
          std::string::size_type v46 = (void *)*((void *)v44 + 12);
          if (v46)
          {
            *((void *)v44 + 13) = v46;
            operator delete(v46);
            *((void *)v44 + 12) = 0;
            *((void *)v44 + 13) = 0;
            *((void *)v44 + 14) = 0;
          }
          *((_OWORD *)v44 + 6) = v82;
          *((void *)v44 + 14) = v83;
          uint64_t v47 = (unsigned __int8 *)*((void *)v40 + 1);
          if (v47)
          {
            do
            {
              uint64_t v48 = v47;
              uint64_t v47 = *(unsigned __int8 **)v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              uint64_t v48 = (unsigned __int8 *)*((void *)v40 + 2);
              BOOL v14 = *(void *)v48 == (void)v40;
              int64_t v40 = v48;
            }
            while (!v14);
          }
          int64_t v40 = v48;
        }
        while (v48 != (unsigned __int8 *)(v35 + 6));
      }
      if (v39) {
        nitro::nitro_function::nitro_function(v39);
      }
      uint64_t v49 = (void *)v35[1];
      if (v49)
      {
        do
        {
          uint64_t v50 = v49;
          uint64_t v49 = (void *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          uint64_t v50 = (void *)v35[2];
          BOOL v14 = *v50 == (void)v35;
          uint64_t v35 = v50;
        }
        while (!v14);
      }
      uint64_t v35 = v50;
    }
    while (v50 != v36);
    uint64_t v2 = *((void *)this + 133);
  }
  std::string::size_type v51 = *(void **)(v2 + 120);
  long long v52 = (void *)(v2 + 128);
  if (v51 != (void *)(v2 + 128))
  {
    do
    {
      LODWORD(v84) = *((_DWORD *)v51 + 8);
      unsigned int v53 = (uint64_t *)(*(void *)(*((void *)this + 133) + 24) + 16 * (int)v84);
      uint64_t v54 = *v53;
      long long v55 = (std::__shared_weak_count *)v53[1];
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = (unsigned __int8 *)v51[5];
      if (v56 != (unsigned __int8 *)(v51 + 6))
      {
        uint64_t v57 = v54 + 136;
        do
        {
          __p[0] = v56 + 32;
          uint64_t v58 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v57, v56 + 32, (long long **)__p);
          Espresso::abstract_blob_container::shape((char *)v79, *((void *)v58 + 5));
          uint64_t v59 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 72), (int)v84, &v84);
          __p[0] = v56 + 32;
          int v60 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59 + 5, (void *)v56 + 4, (long long **)__p);
          long long v61 = v80;
          *(_OWORD *)(v60 + 56) = *(_OWORD *)v79;
          *(_OWORD *)(v60 + 72) = v61;
          *((void *)v60 + 11) = v81;
          uint64_t v62 = (void *)*((void *)v60 + 12);
          if (v62)
          {
            *((void *)v60 + 13) = v62;
            operator delete(v62);
            *((void *)v60 + 12) = 0;
            *((void *)v60 + 13) = 0;
            *((void *)v60 + 14) = 0;
          }
          *((_OWORD *)v60 + 6) = v82;
          *((void *)v60 + 14) = v83;
          uint64_t v63 = (unsigned __int8 *)*((void *)v56 + 1);
          if (v63)
          {
            do
            {
              int v64 = v63;
              uint64_t v63 = *(unsigned __int8 **)v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              int v64 = (unsigned __int8 *)*((void *)v56 + 2);
              BOOL v14 = *(void *)v64 == (void)v56;
              uint64_t v56 = v64;
            }
            while (!v14);
          }
          uint64_t v56 = v64;
        }
        while (v64 != (unsigned __int8 *)(v51 + 6));
      }
      if (v55) {
        nitro::nitro_function::nitro_function(v55);
      }
      long long v65 = (void *)v51[1];
      if (v65)
      {
        do
        {
          std::random_device v66 = v65;
          long long v65 = (void *)*v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          std::random_device v66 = (void *)v51[2];
          BOOL v14 = *v66 == (void)v51;
          std::string::size_type v51 = v66;
        }
        while (!v14);
      }
      std::string::size_type v51 = v66;
    }
    while (v66 != v52);
  }
  EspressoLight::espresso_plan::create_binding_task(this);
  uint64_t v67 = *((void *)this + 133);
  char v68 = *(uint64_t **)(v67 + 24);
  long long v69 = *(uint64_t **)(v67 + 32);
  while (v68 != v69)
  {
    uint64_t v70 = *v68;
    std::string::basic_string[abi:ne180100]<0>(v79, "multi_head_prune");
    if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v70 + 480), v79))
    {
      BOOL v75 = 0;
      goto LABEL_115;
    }
    uint64_t v71 = *v68;
    std::string::basic_string[abi:ne180100]<0>(__p, "multi_head_prune");
    std::string::size_type v84 = __p;
    long long v72 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v71 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v84);
    long long v73 = (unsigned __int8 *)v72 + 56;
    int v74 = *((char *)v72 + 79);
    if (v74 < 0)
    {
      if (*((void *)v72 + 8) == 1)
      {
        long long v73 = *(unsigned __int8 **)v73;
LABEL_111:
        BOOL v75 = *v73 == 49;
        goto LABEL_113;
      }
    }
    else if (v74 == 1)
    {
      goto LABEL_111;
    }
    BOOL v75 = 0;
LABEL_113:
    if (v78 < 0) {
      operator delete(__p[0]);
    }
LABEL_115:
    if (SBYTE7(v80) < 0)
    {
      operator delete(v79[0]);
      if (!v75) {
        goto LABEL_118;
      }
LABEL_117:
      Espresso::run_pass_on_network<Espresso::pass_multi_head_prune_undeclared>(*v68);
      goto LABEL_118;
    }
    if (v75) {
      goto LABEL_117;
    }
LABEL_118:
    v68 += 2;
  }
  EspressoLight::espresso_plan::prepare_compiler_if_needed(this);
  *(_DWORD *)(*((void *)this + 133) + 160) = 1;
}

void sub_1921AE044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::declare_output(EspressoLight::espresso_plan *this, int a2, char *__s)
{
  int v22 = a2;
  uint64_t v4 = *((void *)this + 133);
  int v5 = *(_DWORD *)(v4 + 160);
  if (v5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  }
  uint64_t v8 = v4 + 24;
  uint64_t v7 = *(void *)(v4 + 24);
  if (a2 >= (unint64_t)((*(void *)(v8 + 8) - v7) >> 4))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = (uint64_t *)(v7 + 16 * a2);
  uint64_t v11 = *v9;
  uint64_t v10 = (std::__shared_weak_count *)v9[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11)
  {
    BOOL v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Null network found.");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v11 + 136), (unsigned __int8 *)__p))
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v16 = std::string::append(&v18, "' not found.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v15, &v19);
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 304), __p, (long long **)&v19)[56] = 1;
  uint64_t v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 120), a2, &v22);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 5, __p, (long long **)&v19)[56] = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921AE2B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      if (a28 < 0) {
        operator delete(a23);
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

uint64_t espresso_network_declare_input(EspressoLight::espresso_plan *a1, int a2, char *a3)
{
  BOOL v6 = (void *)MEMORY[0x192FF2020]();
  if (a1
  {
    EspressoLight::espresso_plan::declare_input(a1, a2, a3);
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 4294967290;
  }
  return v7;
}

void EspressoLight::espresso_plan::declare_input(EspressoLight::espresso_plan *this, int a2, char *__s)
{
  int v22 = a2;
  uint64_t v4 = *((void *)this + 133);
  int v5 = *(_DWORD *)(v4 + 160);
  if (v5) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error,espresso_plan_phase_t &>(v5);
  }
  uint64_t v8 = v4 + 24;
  uint64_t v7 = *(void *)(v4 + 24);
  if (a2 >= (unint64_t)((*(void *)(v8 + 8) - v7) >> 4))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid network_index.");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = (uint64_t *)(v7 + 16 * a2);
  uint64_t v11 = *v9;
  uint64_t v10 = (std::__shared_weak_count *)v9[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11)
  {
    BOOL v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Null network found.");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(v11 + 136), (unsigned __int8 *)__p))
  {
    uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v16 = std::string::append(&v18, "' not found.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v15, &v19);
    __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v11 + 280), __p, (long long **)&v19)[56] = 1;
  uint64_t v12 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*((void *)this + 133) + 96), a2, &v22);
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 5, __p, (long long **)&v19)[56] = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v10) {
    nitro::nitro_function::nitro_function(v10);
  }
}

void sub_1921AE644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      if (a28 < 0) {
        operator delete(a23);
      }
      if (v28) {
        nitro::nitro_function::nitro_function(v28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void EspressoLight::espresso_plan::prepare_compiler_if_needed(EspressoLight::espresso_plan *this)
{
  void (***v2)(uint64_t *__return_ptr, void);
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  Espresso *v13;
  uint64_t *v14;
  uint64_t v15;
  const void *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unsigned char *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  BOOL v27;
  uint64_t i;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  int v37;
  int v38;
  void *v39;
  int v40;
  void *v41;
  int v42;
  void *v43;
  int v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  void *v49;
  int v50;
  void *v51;
  int v52;
  void *v53;
  int v54;
  void *v55;
  int v56;
  void *v57;
  int v58;
  void *v59;
  int v60;
  void *v61;
  int v62;
  void *v63;
  int v64;
  _OWORD *v65;
  void *v66;
  long long v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count **v70;
  uint64_t v71;
  Espresso *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  EspressoLight::espresso_plan *v79;
  int v80;
  EspressoLight::espresso_plan *v81;
  unsigned int (***v82)(void);
  void *v83;
  int v84;
  uint64_t v85;
  uint64_t (***v86)(void);
  int v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  void (***v91)(uint64_t *__return_ptr, void);
  char v92;
  void (***v93)(uint64_t *__return_ptr, void);
  uint64_t v94;
  unsigned int (***v95)(void);
  void *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  int v101;
  char v102;
  uint64_t v103;
  char v104;
  unsigned char *v105;
  uint64_t j;
  std::__shared_weak_count *v107;
  void *v108;
  void *v109;
  Espresso *v110;
  void *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  BOOL v116;
  void *v117;
  void *v118;
  uint64_t v119;
  uint64_t k;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  void *v128;
  int v129;
  int v130;
  void *v131;
  unsigned int v132;
  void *v133;
  unsigned int v134;
  void *v135;
  unsigned int v136;
  void *v137;
  int v138;
  void *v139;
  unsigned int v140;
  void *v141;
  unsigned int v142;
  void *v143;
  int v144;
  void *v145;
  unsigned int v146;
  void *v147;
  unsigned int v148;
  void *v149;
  unsigned int v150;
  void *v151;
  unsigned int v152;
  void *v153;
  unsigned int v154;
  void *v155;
  unsigned int v156;
  _OWORD *v157;
  void *v158;
  long long v159;
  std::__shared_weak_count *v160;
  Espresso *v161;
  std::__shared_weak_count *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;
  unsigned int v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  unsigned char *v172;
  EspressoLight::espresso_plan *v173;
  EspressoLight::espresso_plan *v174;
  unsigned int (***v175)(void);
  void *v176;
  std::__shared_weak_count *v177;
  void *v178;
  void *v179;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unsigned int (***v184)(void);
  void (***v185)(uint64_t *__return_ptr, void);
  Espresso *v186;
  unsigned int (***v187)(void);
  void *v188;
  NSObject *v189;
  dispatch_queue_t v190;
  uint64_t v191;
  void *v192;
  void *v193;
  void *v194;
  id v195;
  id v196;
  void (****v197)(uint64_t *__return_ptr, void);
  void *v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  std::__shared_weak_count *v202;
  unsigned int v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  uint64_t *v207;
  std::__shared_weak_count *v208;
  int v209;
  unsigned int v210;
  void *v211;
  void *v212;
  id obj;
  id obja;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  id v220;
  void *v221;
  void *v222;
  void v223[5];
  void v224[5];
  uint64_t v225;
  std::__shared_weak_count *v226;
  uint64_t v227[2];
  long long v228;
  long long v229;
  long long v230;
  long long v231;
  id v232;
  void *__p[2];
  void (*v234)(uint64_t, uint64_t);
  void *v235;
  Espresso *v236;
  std::__shared_weak_count *v237;
  void *v238[2];
  char v239;
  unsigned char v240[32];
  char *v241;
  long long v242;
  uint64_t v243;
  uint64_t v244[3];
  long long v245;
  long long v246;
  long long v247;
  long long v248;
  void **v249;
  char *v250[2];
  id v251;
  Espresso *v252[2];
  void **v253;
  unsigned char v254[128];
  long long v255;
  long long v256;
  char *v257;
  long long v258;
  uint64_t v259;
  uint64_t v260;

  int v260 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)*((void *)this + 133);
  uint64_t v2 = (void (***)(uint64_t *__return_ptr, void))*v1;
  if (*(unsigned char *)(*v1 + 124))
  {
    int v3 = v1[3];
    if (v1[4] != v3)
    {
      uint64_t v4 = 0;
      int v198 = (void *)*((void *)this + 133);
      int v5 = v198;
      while (1)
      {
        int v205 = v4;
        uint64_t v199 = v3;
        uint64_t v207 = (uint64_t *)(v3 + 16 * v4);
        BOOL v6 = *(void *)(*v207 + 16);
        if (!*(unsigned char *)(v6 + 124) || (uint64_t v7 = *(void *)(*v207 + 1256)) == 0 || !*(unsigned char *)(v7 + 124))
        {
          uint64_t v203 = (***(uint64_t (****)(void))(v6 + 8))(*(void *)(v6 + 8));
          long long v17 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*v207 + 528), v203);
          if (!v17) {
            goto LABEL_28;
          }
          std::string v19 = (unsigned char *)v17[3];
          std::string v18 = (std::__shared_weak_count *)v17[4];
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::size_type v202 = v18;
          if (v19)
          {
            char v19[24] = *((unsigned char *)this + 1096);
            if (((*(uint64_t (**)(unsigned char *))(*(void *)v19 + 64))(v19) & 1) == 0)
            {
              if (!v20) {
                goto LABEL_29;
              }
              char v21 = v20;
              if (v202) {
                atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (!*(void *)(*v207 + 792) && (*(unsigned int (**)(void *))(*(void *)v20 + 128))(v20)) {
                (*(void (**)(void *))(*(void *)v21 + 136))(v21);
              }
              if (v202)
              {
                nitro::nitro_function::nitro_function(v202);
                goto LABEL_29;
              }
LABEL_28:
              std::string::size_type v202 = 0;
              goto LABEL_29;
            }
LABEL_136:
            unint64_t v97 = v205;
            uint64_t v9 = v202;
            if (!v202) {
              goto LABEL_308;
            }
LABEL_306:
            nitro::nitro_function::nitro_function(v9);
            goto LABEL_307;
          }
LABEL_29:
          int v22 = *v207;
          unint64_t v23 = (void *)(*v207 + 728);
          if (*(char *)(*v207 + 751) < 0)
          {
            if (*(void *)(v22 + 736) && !*(void *)(v22 + 792))
            {
              unint64_t v23 = (void *)*v23;
              goto LABEL_36;
            }
          }
          else if (*(unsigned char *)(*v207 + 751) && !*(void *)(v22 + 792))
          {
LABEL_36:
            unint64_t v24 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v23);
            uint64_t v232 = 0;
            short float v194 = (void *)v24;
            int8x8_t v25 = objc_msgSend(MEMORY[0x1E4F28D90], "JSONObjectWithData:options:error:");
            uint64_t v196 = v232;
            if (v25)
            {
              uint64_t v219 = v25;
              uint64_t v26 = [v25 objectForKeyedSubscript:@"net_inputs"];
              uint8x8_t v27 = v26 == 0;

              if (!v27)
              {
                *((void *)&v245 + 1) = 0;
                *(void *)&uint64_t v246 = 0;
                *(void *)&uint64_t v245 = (char *)&v245 + 8;
                uint64_t v228 = 0u;
                uint64_t v229 = 0u;
                uint64_t v230 = 0u;
                uint64_t v231 = 0u;
                obunint64_t j = [v25 objectForKeyedSubscript:@"net_inputs"];
                std::string::size_type v217 = [obj countByEnumeratingWithState:&v228 objects:v254 count:16];
                if (v217)
                {
                  size_t v215 = *(void *)v229;
                  do
                  {
                    for (uint64_t i = 0; i != v217; ++i)
                    {
                      if (*(void *)v229 != v215) {
                        objc_enumerationMutation(obj);
                      }
                      uint64_t v29 = *(void **)(*((void *)&v228 + 1) + 8 * i);
                      int v30 = [v219 objectForKeyedSubscript:@"net_inputs"];
                      unint64_t v31 = [v30 objectForKeyedSubscript:v29];
                      size_t v221 = [v31 objectForKeyedSubscript:@"shape"];

                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0) {
                        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to retrieve shape in key.");
                      }
                      unint64_t v32 = [v219 objectForKeyedSubscript:@"net_inputs"];
                      BOOL v33 = [v32 objectForKeyedSubscript:v29];
                      uint64_t v34 = [v33 objectForKey:@"rank"];
                      uint64_t v35 = [v34 integerValue];

                      memset(v240, 0, 24);
                      switch(v35)
                      {
                        case 1:
                          uint64_t v36 = [v221 objectAtIndex:4];
                          unint64_t v37 = [v36 integerValue];

                          *(_DWORD *)int v240 = v37;
                          uint64_t v38 = 1;
                          *(_OWORD *)&v240[4] = 0uLL;
                          goto LABEL_50;
                        case 2:
                          long long v61 = [v221 objectAtIndex:3];
                          uint64_t v62 = [v61 integerValue];
                          uint64_t v63 = [v221 objectAtIndex:4];
                          int v64 = [v63 integerValue];

                          *(_DWORD *)int v240 = v62;
                          *(_DWORD *)&v240[4] = v64;
                          *(void *)&v240[8] = 0;
                          uint64_t v38 = 2;
                          *(_DWORD *)&v240[16] = 0;
                          goto LABEL_50;
                        case 3:
                          uint64_t v47 = [v221 objectAtIndex:2];
                          uint64_t v48 = [v47 integerValue];
                          uint64_t v49 = [v221 objectAtIndex:3];
                          uint64_t v50 = [v49 integerValue];
                          std::string::size_type v51 = [v221 objectAtIndex:4];
                          long long v52 = [v51 integerValue];

                          *(_DWORD *)int v240 = v48;
                          *(_DWORD *)&v240[4] = v50;
                          *(_DWORD *)&v240[8] = v52;
                          uint64_t v38 = 3;
                          *(void *)&v240[12] = 0;
                          goto LABEL_50;
                        case 4:
                          unsigned int v53 = [v221 objectAtIndex:1];
                          uint64_t v54 = [v53 integerValue];
                          long long v55 = [v221 objectAtIndex:2];
                          uint64_t v56 = [v55 integerValue];
                          uint64_t v57 = [v221 objectAtIndex:3];
                          uint64_t v58 = [v57 integerValue];
                          uint64_t v59 = [v221 objectAtIndex:4];
                          int v60 = [v59 integerValue];

                          *(_DWORD *)int v240 = v54;
                          *(_DWORD *)&v240[4] = v56;
                          *(_DWORD *)&v240[8] = v58;
                          *(_DWORD *)&v240[12] = v60;
                          uint64_t v38 = 4;
                          *(_DWORD *)&v240[16] = 0;
                          goto LABEL_50;
                        case 5:
                          size_t v211 = [v221 objectAtIndex:0];
                          v209 = [v211 integerValue];
                          uint64_t v39 = [v221 objectAtIndex:1];
                          int64_t v40 = [v39 integerValue];
                          uint64_t v41 = [v221 objectAtIndex:2];
                          uint8x8_t v42 = [v41 integerValue];
                          uint64_t v43 = [v221 objectAtIndex:3];
                          uint64_t v44 = [v43 integerValue];
                          long long v45 = [v221 objectAtIndex:4];
                          std::string::size_type v46 = [v45 integerValue];

                          *(_DWORD *)int v240 = v209;
                          *(_DWORD *)&v240[4] = v40;
                          *(_DWORD *)&v240[8] = v42;
                          *(_DWORD *)&v240[12] = v44;
                          uint64_t v38 = 5;
                          *(_DWORD *)&v240[16] = v46;
LABEL_50:
                          *(_DWORD *)&v240[20] = v38;
                          break;
                        default:
                          break;
                      }
                      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v240, 0, (uint64_t)&v255);
                      std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v29 UTF8String]);
                      uint64_t v249 = __p;
                      long long v65 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v245, __p, (_OWORD **)&v249);
                      std::random_device v66 = (void *)*((void *)v65 + 12);
                      uint64_t v67 = v256;
                      *(_OWORD *)((char *)v65 + 56) = v255;
                      *(_OWORD *)((char *)v65 + 72) = v67;
                      *((void *)v65 + 11) = v257;
                      if (v66)
                      {
                        *((void *)v65 + 13) = v66;
                        operator delete(v66);
                        *((void *)v65 + 12) = 0;
                        *((void *)v65 + 13) = 0;
                        *((void *)v65 + 14) = 0;
                      }
                      v65[6] = v258;
                      *((void *)v65 + 14) = v259;
                      uint64_t v259 = 0;
                      int v258 = 0uLL;
                      if (SHIBYTE(v234) < 0)
                      {
                        operator delete(__p[0]);
                        if ((void)v258)
                        {
                          *((void *)&v258 + 1) = v258;
                          operator delete((void *)v258);
                        }
                      }
                    }
                    std::string::size_type v217 = [obj countByEnumeratingWithState:&v228 objects:v254 count:16];
                  }
                  while (v217);
                }

                char v68 = v199 + 16 * v205;
                uint64_t v71 = *(void *)(v68 + 8);
                uint64_t v70 = (std::__shared_weak_count **)(v68 + 8);
                long long v69 = (std::__shared_weak_count *)v71;
                v227[0] = *v207;
                v227[1] = v71;
                if (v71) {
                  atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::compute_network_shape_starting_from_data_shapes(v227, (uint64_t)&v245, (uint64_t)&v255);
                if (v69) {
                  nitro::nitro_function::nitro_function(v69);
                }
                long long v72 = (Espresso *)*v207;
                long long v73 = *v70;
                if (*v70) {
                  atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                Espresso::shape_network_recursive(v72, (Espresso::net *)&v255, 0, 0);
                if (v73) {
                  nitro::nitro_function::nitro_function(v73);
                }
                std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v256 + 8, v257);
                std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v255, *((char **)&v255 + 1));
                std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v245, *((char **)&v245 + 1));
                int8x8_t v25 = v219;
              }
            }

            int v22 = *v207;
          }
          int v74 = *v198;
          uint64_t v225 = v22;
          BOOL v75 = *(std::__shared_weak_count **)(v199 + 16 * v205 + 8);
          std::string::size_type v226 = v75;
          if (v75) {
            atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v74 + 88))(v74, &v225, v23);
          if (v226) {
            nitro::nitro_function::nitro_function(v226);
          }
          uint64_t v76 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)(*v207 + 528), v203);
          if (v76)
          {
            long long v77 = (std::__shared_weak_count *)v76[3];
            char v78 = (std::__shared_weak_count *)v76[4];
            long long v79 = this;
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v77)
            {
              LOBYTE(v77[1].__vftable) = *((unsigned char *)this + 1096);
              long long v80 = 1;
            }
            else
            {
              long long v80 = 0;
            }
          }
          else
          {
            long long v80 = 0;
            long long v77 = 0;
            char v78 = 0;
            long long v79 = this;
          }
          if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
          {
            dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_265);
            long long v79 = this;
          }
          uint64_t v81 = v79;
          EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret, v207, (uint64_t)v79);
          long long v82 = *(unsigned int (****)(void))(**((void **)v81 + 133) + 8);
          if ((**v82)(v82) >> 1 == 5003)
          {
            if (!v77
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("compiler must exist for network executing on ANE");
            }
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v84 = *(_DWORD *)(*((void *)this + 133) + 164);
            if (v84 > 16382)
            {
              if (v84 == 0x3FFF)
              {
                uint64_t v85 = 2;
              }
              else
              {
                if (v84 != 24574) {
                  goto LABEL_93;
                }
                uint64_t v85 = 3;
              }
LABEL_98:
              (*(void (**)(void *, uint64_t))(*(void *)v83 + 104))(v83, v85);
            }
            else
            {
              if (v84)
              {
                if (v84 == 1)
                {
                  uint64_t v85 = 0;
                }
                else
                {
                  if (v84 == 0x2000)
                  {
                    uint64_t v85 = 1;
                    goto LABEL_98;
                  }
LABEL_93:
                  uint64_t v85 = 4;
                }
                goto LABEL_98;
              }
              (*(void (**)(void *))(*(void *)v83 + 112))(v83);
            }
            uint64_t v81 = this;
            if (v78)
            {
              nitro::nitro_function::nitro_function(v78);
              uint64_t v81 = this;
            }
          }
          uint64_t v86 = *(uint64_t (****)(void))(**((void **)v81 + 133) + 8);
          long long v87 = (**v86)(v86);
          if (v87 == 50005)
          {
            long long v88 = *v207 + 448;
            uint64_t v89 = *(char *)(*v207 + 471);
            if (v89 < 0) {
              uint64_t v90 = *(void *)(*v207 + 456) == 0;
            }
            else {
              uint64_t v90 = v89 == 0;
            }
            if (v90) {
              std::string v92 = 0;
            }
            else {
              std::string v92 = v80;
            }
            if ((v92 & 1) == 0)
            {
              uint64_t v93 = (void (***)(uint64_t *__return_ptr, void))*v198;
              v224[0] = MEMORY[0x1E4F143A8];
              v224[1] = 3221225472;
              v224[2] = ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke;
              v224[3] = &__block_descriptor_40_e10_v16__0r_v8l;
              v224[4] = v207;
              Espresso::abstract_context::compute_batch_sync(v93, v224);
              goto LABEL_118;
            }
          }
          else
          {
            if (v87 == 10008)
            {
              if (*(char *)(*v207 + 471) < 0)
              {
                if (!*(void *)(*v207 + 456)) {
                  goto LABEL_118;
                }
              }
              else if (!*(unsigned char *)(*v207 + 471))
              {
LABEL_118:
                uint64_t v94 = *v207;
                if (*(char *)(*v207 + 1239) < 0)
                {
                  if (!*(void *)(v94 + 1224)) {
                    goto LABEL_125;
                  }
                }
                else if (!*(unsigned char *)(*v207 + 1239))
                {
LABEL_125:
                  unint64_t v95 = *(unsigned int (****)(void))(**((void **)this + 133) + 8);
                  if ((**v95)(v95) >> 1 == 5003)
                  {
                    if (v77)
                    {
                      if (v96 && v78)
                      {
                        atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
                        long long v77 = v78;
                      }
                      else
                      {
                        long long v77 = 0;
                      }
                    }
                    else
                    {
                      std::string v96 = 0;
                    }
                    *(void *)(*((void *)this + 133) + 400) = (*(uint64_t (**)(void *))(*(void *)v96 + 96))(v96);
                    if (v77) {
                      nitro::nitro_function::nitro_function(v77);
                    }
                  }
                  if (v78) {
                    nitro::nitro_function::nitro_function(v78);
                  }
                  goto LABEL_136;
                }
                if (v80)
                {
                  ((void (*)(std::__shared_weak_count *, uint64_t))v77->__vftable[1].__on_zero_shared)(v77, v94 + 1216);
                  uint64_t v94 = *v207;
                }
                MEMORY[0x192FF0F50](v94 + 1216, "");
                goto LABEL_125;
              }
            }
            id v91 = (void (***)(uint64_t *__return_ptr, void))*v198;
            v223[0] = MEMORY[0x1E4F143A8];
            v223[1] = 3221225472;
            v223[2] = ___ZN13EspressoLight13espresso_plan26prepare_compiler_if_neededEv_block_invoke_2;
            v223[3] = &__block_descriptor_40_e10_v16__0r_v8l;
            v223[4] = v207;
            Espresso::abstract_context::compute_batch_sync(v91, v223);
            if (!v80) {
              goto LABEL_118;
            }
            long long v88 = *v207 + 448;
          }
          ((void (*)(std::__shared_weak_count *, uint64_t))v77->__on_zero_shared_weak)(v77, v88);
          long long v80 = 1;
          goto LABEL_118;
        }
        uint64_t v8 = *(_OWORD *)v207;
        *(_OWORD *)int v252 = v8;
        uint64_t v9 = (std::__shared_weak_count *)*((void *)&v8 + 1);
        if (*((void *)&v8 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = *(void *)(v8 + 16);
        if (*(unsigned char *)(v10 + 124))
        {
          uint64_t v11 = *(void *)(v8 + 1256);
          if (v11)
          {
            if (*(unsigned char *)(v11 + 124)) {
              break;
            }
          }
        }
LABEL_305:
        if (v9) {
          goto LABEL_306;
        }
LABEL_307:
        unint64_t v97 = v205;
LABEL_308:
        uint64_t v4 = v97 + 1;
        int v5 = (void *)*((void *)this + 133);
        int v3 = v5[3];
        if (v97 + 1 >= (unint64_t)((v5[4] - v3) >> 4))
        {
          uint64_t v2 = (void (***)(uint64_t *__return_ptr, void))*v5;
          goto LABEL_310;
        }
      }
      uint64_t v12 = (***(uint64_t (****)(void))(v10 + 8))(*(void *)(v10 + 8));
      uint64_t v13 = v252[0];
      int v201 = v12;
      BOOL v14 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)v252[0] + 66, v12);
      if (v14)
      {
        uint64_t v16 = (const void *)v14[3];
        uint64_t v15 = v14[4];
        if (v15)
        {
          vDSP_Length v208 = (std::__shared_weak_count *)v14[4];
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          goto LABEL_140;
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      vDSP_Length v208 = 0;
LABEL_140:
      short float v200 = (***(uint64_t (****)(void))(*((void *)v13 + 157) + 8))(*(void *)(*((void *)v13 + 157)
                                                                                              + 8));
      long long v98 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)v252[0] + 66, v200);
      if (v98)
      {
        uint64_t v99 = v98[3];
        std::string v100 = (std::__shared_weak_count *)v98[4];
        if (v100) {
          atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v99 = 0;
        std::string v100 = 0;
      }
      *(void *)&unint64_t v255 = v16;
      *((void *)&v255 + 1) = v208;
      if (v208) {
        atomic_fetch_add_explicit(&v208->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v197 = (void (****)(uint64_t *__return_ptr, void))v5;
      *(void *)&uint64_t v256 = v99;
      *((void *)&v256 + 1) = v100;
      if (v100) {
        atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      vDSP_Length v204 = v100;
      uint64_t v101 = 0;
      std::string::size_type v102 = 0;
      uint64_t v103 = 0;
      do
      {
        unint64_t v104 = v102;
        size_t v105 = (unsigned char *)*((void *)&v255 + 2 * v103);
        if (v105)
        {
          v105[24] = *((unsigned char *)this + 1096);
          v101 |= (*(uint64_t (**)(unsigned char *))(*(void *)v105 + 64))(v105) ^ 1;
        }
        else
        {
          uint64_t v101 = 1;
        }
        std::string::size_type v102 = 1;
        uint64_t v103 = 1;
      }
      while ((v104 & 1) == 0);
      for (unint64_t j = 24; j != -8; j -= 16)
      {
        long long v107 = *(std::__shared_weak_count **)((char *)&v255 + j);
        if (v107) {
          nitro::nitro_function::nitro_function(v107);
        }
      }
      if ((v101 & 1) == 0) {
        goto LABEL_300;
      }
      if (v16)
      {
        if (v108)
        {
          unsigned int v109 = v108;
          if (v208) {
            atomic_fetch_add_explicit(&v208->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!*((void *)v252[0] + 99) && (*(unsigned int (**)(void *))(*(void *)v108 + 128))(v108)) {
            (*(void (**)(void *))(*(void *)v109 + 136))(v109);
          }
          if (v208) {
            nitro::nitro_function::nitro_function(v208);
          }
        }
      }
      uint64_t v110 = v252[0];
      std::string::size_type v111 = (void *)((char *)v252[0] + 728);
      if (*((char *)v252[0] + 751) < 0)
      {
        if (!*((void *)v252[0] + 92) || *((void *)v252[0] + 99)) {
          goto LABEL_206;
        }
        std::string::size_type v111 = (void *)*v111;
      }
      else if (!*((unsigned char *)v252[0] + 751) || *((void *)v252[0] + 99))
      {
        goto LABEL_206;
      }
      uint64_t v112 = objc_msgSend(MEMORY[0x1E4F1C9B8], "dataWithBytes:length:", v111);
      uint64_t v251 = 0;
      uint64_t v193 = (void *)v112;
      uint64_t v113 = objc_msgSend(MEMORY[0x1E4F28D90], "JSONObjectWithData:options:error:");
      int v195 = v251;
      std::string v114 = v113;
      if (v113)
      {
        size_t v220 = v113;
        size_t v115 = [v113 objectForKeyedSubscript:@"net_inputs"];
        size_t v116 = v115 == 0;

        std::string v114 = v220;
        if (!v116)
        {
          v250[0] = 0;
          v250[1] = 0;
          uint64_t v249 = (void **)v250;
          uint64_t v245 = 0u;
          uint64_t v246 = 0u;
          std::vector<int> v247 = 0u;
          unsigned int v248 = 0u;
          long long v117 = v220;
          long long v118 = [v220 objectForKeyedSubscript:@"net_inputs"];
          obja = v118;
          long long v119 = [v118 countByEnumeratingWithState:&v245 objects:&v255 count:16];
          if (v119)
          {
            uint64_t v216 = *(void *)v246;
            do
            {
              uint64_t v218 = v119;
              for (uint64_t k = 0; k != v218; ++k)
              {
                if (*(void *)v246 != v216) {
                  objc_enumerationMutation(obja);
                }
                uint64_t v121 = *(void **)(*((void *)&v245 + 1) + 8 * k);
                std::string::size_type v122 = [v117 objectForKeyedSubscript:@"net_inputs"];
                std::string::size_type v123 = [v122 objectForKeyedSubscript:v121];
                long long v222 = [v123 objectForKeyedSubscript:@"shape"];

                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unable to retrieve shape in key.");
                }
                uint64_t v124 = [v220 objectForKeyedSubscript:@"net_inputs"];
                long long v125 = [v124 objectForKeyedSubscript:v121];
                size_t v126 = [v125 objectForKey:@"rank"];
                size_t v127 = [v126 integerValue];

                memset(v244, 0, sizeof(v244));
                switch(v127)
                {
                  case 1:
                    long long v128 = [v222 objectAtIndex:4];
                    long long v129 = [v128 integerValue];

                    LODWORD(v244[0]) = v129;
                    long long v130 = 1;
                    *(_OWORD *)((char *)v244 + 4) = 0uLL;
                    goto LABEL_188;
                  case 2:
                    size_t v153 = [v222 objectAtIndex:3];
                    size_t v154 = [v153 integerValue];
                    size_t v155 = [v222 objectAtIndex:4];
                    long long v156 = [v155 integerValue];

                    v244[0] = __PAIR64__(v156, v154);
                    v244[1] = 0;
                    long long v130 = 2;
                    LODWORD(v244[2]) = 0;
                    goto LABEL_188;
                  case 3:
                    long long v139 = [v222 objectAtIndex:2];
                    long long v140 = [v139 integerValue];
                    uint64_t v141 = [v222 objectAtIndex:3];
                    std::string::size_type v142 = [v141 integerValue];
                    uint64_t v143 = [v222 objectAtIndex:4];
                    unint64_t v144 = [v143 integerValue];

                    v244[0] = __PAIR64__(v142, v140);
                    LODWORD(v244[1]) = v144;
                    long long v130 = 3;
                    *(uint64_t *)((char *)&v244[1] + 4) = 0;
                    goto LABEL_188;
                  case 4:
                    size_t v145 = [v222 objectAtIndex:1];
                    size_t v146 = [v145 integerValue];
                    long long v147 = [v222 objectAtIndex:2];
                    long long v148 = [v147 integerValue];
                    long long v149 = [v222 objectAtIndex:3];
                    uint64_t v150 = [v149 integerValue];
                    std::string::size_type v151 = [v222 objectAtIndex:4];
                    uint64_t v152 = [v151 integerValue];

                    v244[0] = __PAIR64__(v148, v146);
                    v244[1] = __PAIR64__(v152, v150);
                    long long v130 = 4;
                    LODWORD(v244[2]) = 0;
                    goto LABEL_188;
                  case 5:
                    long long v212 = [v222 objectAtIndex:0];
                    size_t v210 = [v212 integerValue];
                    size_t v131 = [v222 objectAtIndex:1];
                    uint64_t v132 = [v131 integerValue];
                    std::string::size_type v133 = [v222 objectAtIndex:2];
                    uint64_t v134 = [v133 integerValue];
                    unint64_t v135 = [v222 objectAtIndex:3];
                    size_t v136 = [v135 integerValue];
                    size_t v137 = [v222 objectAtIndex:4];
                    long long v138 = [v137 integerValue];

                    v244[0] = __PAIR64__(v132, v210);
                    v244[1] = __PAIR64__(v136, v134);
                    long long v130 = 5;
                    LODWORD(v244[2]) = v138;
LABEL_188:
                    HIDWORD(v244[2]) = v130;
                    break;
                  default:
                    break;
                }
                Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v244, 0, (uint64_t)v240);
                std::string::basic_string[abi:ne180100]<0>(v238, (char *)[v121 UTF8String]);
                uint64_t v253 = v238;
                long long v157 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v249, v238, (_OWORD **)&v253);
                long long v158 = (void *)*((void *)v157 + 12);
                uint64_t v159 = *(_OWORD *)&v240[16];
                *(_OWORD *)((char *)v157 + 56) = *(_OWORD *)v240;
                *(_OWORD *)((char *)v157 + 72) = v159;
                *((void *)v157 + 11) = v241;
                if (v158)
                {
                  *((void *)v157 + 13) = v158;
                  operator delete(v158);
                  *((void *)v157 + 12) = 0;
                  *((void *)v157 + 13) = 0;
                  *((void *)v157 + 14) = 0;
                }
                v157[6] = v242;
                *((void *)v157 + 14) = v243;
                uint64_t v243 = 0;
                int v242 = 0uLL;
                if (v239 < 0)
                {
                  operator delete(v238[0]);
                  if ((void)v242)
                  {
                    *((void *)&v242 + 1) = v242;
                    operator delete((void *)v242);
                  }
                }

                long long v117 = v220;
              }
              long long v118 = obja;
              long long v119 = [obja countByEnumeratingWithState:&v245 objects:&v255 count:16];
            }
            while (v119);
          }

          std::string::size_type v160 = (std::__shared_weak_count *)v252[1];
          v244[0] = (uint64_t)v252[0];
          v244[1] = (uint64_t)v252[1];
          if (v252[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v252[1] + 1, 1uLL, memory_order_relaxed);
          }
          Espresso::compute_network_shape_starting_from_data_shapes(v244, (uint64_t)&v249, (uint64_t)v240);
          if (v160) {
            nitro::nitro_function::nitro_function(v160);
          }
          uint64_t v161 = v252[0];
          int v162 = (std::__shared_weak_count *)v252[1];
          if (v252[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v252[1] + 1, 1uLL, memory_order_relaxed);
          }
          Espresso::shape_network_recursive(v161, (Espresso::net *)v240, 0, 0);
          if (v162) {
            nitro::nitro_function::nitro_function(v162);
          }
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v240[24], v241);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v240, *(char **)&v240[8]);
          std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v249, v250[0]);
          std::string v114 = v220;
        }
      }

      uint64_t v110 = v252[0];
LABEL_206:
      size_t v163 = *((void *)v110 + 2);
      *(void *)int v240 = v110;
      *(Espresso **)&v240[8] = v252[1];
      if (v252[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v252[1] + 1, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)v163 + 88))(v163, v240, v111);
      if (*(void *)&v240[8]) {
        nitro::nitro_function::nitro_function(*(std::__shared_weak_count **)&v240[8]);
      }
      size_t v164 = *((void *)v252[0] + 157);
      uint64_t v249 = (void **)v252[0];
      v250[0] = (char *)v252[1];
      if (v252[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v252[1] + 1, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void ***))(*(void *)v164 + 88))(v164, &v249);
      if (v250[0]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)v250[0]);
      }
      long long v165 = (void *)((char *)v252[0] + 528);
      long long v166 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((void *)v252[0] + 66, v201);
      if (v166)
      {
        long long v167 = (std::__shared_weak_count *)v166[3];
        uint64_t v168 = (std::__shared_weak_count *)v166[4];
        std::string::size_type v169 = v200;
        if (v168) {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v168 = 0;
        long long v167 = 0;
        std::string::size_type v169 = v200;
      }
      uint64_t v170 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>(v165, v169);
      if (v170)
      {
        uint64_t v172 = (unsigned char *)v170[3];
        int v171 = (std::__shared_weak_count *)v170[4];
        uint64_t v173 = this;
        if (v171) {
          atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v167) {
          goto LABEL_222;
        }
      }
      else
      {
        int v171 = 0;
        uint64_t v172 = 0;
        uint64_t v173 = this;
        if (v167) {
LABEL_222:
        }
          LOBYTE(v167[1].__vftable) = *((unsigned char *)v173 + 1096);
      }
      if (v172) {
        v172[24] = *((unsigned char *)v173 + 1096);
      }
      if (EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken != -1)
      {
        dispatch_once(&EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::onceToken, &__block_literal_global_265);
        uint64_t v173 = this;
      }
      uint64_t v174 = v173;
      EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(EspressoLight::intermediate_buffer_sharing_singleton::shared(void)::ret, (uint64_t *)v252, (uint64_t)v173);
      std::string::size_type v175 = *(unsigned int (****)(void))(**((void **)v174 + 133) + 8);
      if ((**v175)(v175) >> 1 != 5003)
      {
LABEL_269:
        int v184 = *(unsigned int (****)(void))(**((void **)this + 133) + 8);
        if ((**v184)(v184) == 10008)
        {
          if (*((char *)v252[0] + 471) < 0)
          {
            if (!*((void *)v252[0] + 57)) {
              goto LABEL_280;
            }
          }
          else if (!*((unsigned char *)v252[0] + 471))
          {
            goto LABEL_280;
          }
        }
        std::string::size_type v185 = *v197;
        __p[0] = (void *)MEMORY[0x1E4F143A8];
        __p[1] = (void *)3321888768;
        long long v234 = ___ZN13EspressoLight13espresso_plan29prepare_network_two_compilersEm_block_invoke;
        uint64_t v235 = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
        uint64_t v236 = v252[0];
        int v237 = (std::__shared_weak_count *)v252[1];
        if (v252[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v252[1] + 1, 1uLL, memory_order_relaxed);
        }
        Espresso::abstract_context::compute_batch_sync(v185, __p);
        if (v167) {
          ((void (*)(std::__shared_weak_count *, char *))v167->__on_zero_shared_weak)(v167, (char *)v252[0] + 448);
        }
        if (v237) {
          nitro::nitro_function::nitro_function(v237);
        }
LABEL_280:
        uint64_t v186 = v252[0];
        if (*((char *)v252[0] + 1239) < 0)
        {
          if (!*((void *)v252[0] + 153)) {
            goto LABEL_287;
          }
        }
        else if (!*((unsigned char *)v252[0] + 1239))
        {
LABEL_287:
          vDSP_Length v187 = *(unsigned int (****)(void))(**((void **)this + 133) + 8);
          if ((**v187)(v187) >> 1 == 5003)
          {
            if (v167)
            {
              if (v188 && v168)
              {
                atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v167 = v168;
              }
              else
              {
                long long v167 = 0;
              }
            }
            else
            {
              int v188 = 0;
            }
            *(void *)(*((void *)this + 133) + 400) = (*(uint64_t (**)(void *))(*(void *)v188 + 96))(v188);
            if (v167) {
              nitro::nitro_function::nitro_function(v167);
            }
          }
          if (v171) {
            nitro::nitro_function::nitro_function(v171);
          }
          if (v168) {
            nitro::nitro_function::nitro_function(v168);
          }
LABEL_300:
          if (v204) {
            nitro::nitro_function::nitro_function(v204);
          }
          if (v208) {
            nitro::nitro_function::nitro_function(v208);
          }
          uint64_t v9 = (std::__shared_weak_count *)v252[1];
          goto LABEL_305;
        }
        if (v167)
        {
          ((void (*)(std::__shared_weak_count *, char *))v167->__vftable[1].__on_zero_shared)(v167, (char *)v252[0] + 1216);
          uint64_t v186 = v252[0];
        }
        MEMORY[0x192FF0F50]((char *)v186 + 1216, "");
        goto LABEL_287;
      }
      if (v167)
      {
        if (v176 && v168)
        {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v177 = v168;
          goto LABEL_236;
        }
      }
      else
      {
        uint64_t v176 = 0;
      }
      unint64_t v177 = 0;
LABEL_236:
      if (!v172) {
        goto LABEL_318;
      }
      if (!v178) {
        goto LABEL_318;
      }
      int v179 = v178;
      if (v171) {
        atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v176) {
LABEL_318:
      }
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to recreate both compilers for ANE, MPSGraph");
      std::string::size_type v180 = *(_DWORD *)(*((void *)this + 133) + 164);
      if (v180 > 16382)
      {
        if (v180 == 0x3FFF)
        {
          uint64_t v181 = 2;
        }
        else
        {
          if (v180 != 24574)
          {
LABEL_248:
            uint64_t v181 = 4;
            goto LABEL_253;
          }
          uint64_t v181 = 3;
        }
      }
      else
      {
        if (!v180)
        {
          (*(void (**)(void *))(*(void *)v176 + 112))(v176);
          (*(void (**)(void *))(*(void *)v179 + 112))(v179);
LABEL_265:
          if (v171) {
            nitro::nitro_function::nitro_function(v171);
          }
          if (v177) {
            nitro::nitro_function::nitro_function(v177);
          }
          goto LABEL_269;
        }
        if (v180 != 1)
        {
          if (v180 == 0x2000)
          {
            uint64_t v181 = 1;
            goto LABEL_253;
          }
          goto LABEL_248;
        }
        uint64_t v181 = 0;
      }
LABEL_253:
      (*(void (**)(void *, uint64_t))(*(void *)v176 + 104))(v176, v181);
      vDSP_Length v182 = *(_DWORD *)(*((void *)this + 133) + 164);
      if (v182 <= 16382)
      {
        if (v182 == 1)
        {
          uint64_t v183 = 0;
          goto LABEL_264;
        }
        if (v182 == 0x2000)
        {
          uint64_t v183 = 1;
LABEL_264:
          (*(void (**)(void *, uint64_t))(*(void *)v179 + 104))(v179, v183);
          goto LABEL_265;
        }
      }
      else
      {
        if (v182 == 0x3FFF)
        {
          uint64_t v183 = 2;
          goto LABEL_264;
        }
        if (v182 == 24574)
        {
          uint64_t v183 = 3;
          goto LABEL_264;
        }
      }
      uint64_t v183 = 4;
      goto LABEL_264;
    }
LABEL_310:
    if ((*(unsigned int (**)(void (**)(uint64_t *__return_ptr, void)))*v2[1])(v2[1]) >> 1 == 5003)
    {
      uint64_t v189 = *(id *)(*((void *)this + 133) + 168);
      if (v189)
      {
        uint64_t v190 = dispatch_queue_create_with_target_V2("com.apple.espresso.execution", 0, v189);
        uint64_t v191 = *((void *)this + 133);
        unint64_t v192 = *(void **)(v191 + 176);
        *(void *)(v191 + 176) = v190;
      }
    }
  }
}

void sub_1921B05B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
  Espresso::network_shape::~network_shape(&a72);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&STACK[0x290], (char *)STACK[0x298]);

  if (a25) {
    nitro::nitro_function::nitro_function(a25);
  }
  if (a30) {
    nitro::nitro_function::nitro_function(a30);
  }
  if (STACK[0x2B8]) {
    nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x2B8]);
  }
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_plan::create_binding_task(EspressoLight::espresso_plan *this)
{
  uint64_t v2 = (char *)operator new(0x118uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1EE380700;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((void *)v2 + 5) = v2 + 48;
  *(_OWORD *)(v2 + 72) = 0u;
  *((void *)v2 + 7) = 0;
  *((void *)v2 + 8) = v2 + 72;
  *((_OWORD *)v2 + 6) = 0u;
  *((void *)v2 + 11) = v2 + 96;
  *(_OWORD *)(v2 + 120) = 0u;
  *((void *)v2 + 14) = v2 + 120;
  *((_OWORD *)v2 + 9) = 0u;
  *((void *)v2 + 17) = v2 + 144;
  *(_OWORD *)(v2 + 168) = 0u;
  *((void *)v2 + 20) = v2 + 168;
  *((_OWORD *)v2 + 12) = 0u;
  *((void *)v2 + 23) = v2 + 192;
  *(_OWORD *)(v2 + 216) = 0u;
  *((void *)v2 + 26) = v2 + 216;
  *((_OWORD *)v2 + 15) = 0u;
  *((void *)v2 + 29) = v2 + 240;
  *(_OWORD *)(v2 + 264) = 0u;
  *((void *)v2 + 32) = v2 + 264;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
  *((void *)v2 + 3) = v2 + 24;
  *(void *)&long long v3 = v2 + 24;
  *((void *)&v3 + 1) = v2;
  long long v26 = v3;
  *((void *)v2 + 4) = v2;
  nitro::nitro_function::nitro_function((std::__shared_weak_count *)v2);
  uint64_t v4 = *((void *)this + 133);
  int v5 = *(std::__shared_weak_count **)(v4 + 152);
  *(_OWORD *)(v4 + 144) = v26;
  if (v5) {
    nitro::nitro_function::nitro_function(v5);
  }
  BOOL v6 = (void *)*((void *)this + 133);
  uint64_t v7 = (void *)v6[12];
  uint64_t v8 = v6 + 13;
  if (v7 != v6 + 13)
  {
    do
    {
      int v9 = *((_DWORD *)v7 + 8);
      int v27 = v9;
      uint64_t v10 = (void *)v7[5];
      if (v10 != v7 + 6)
      {
        do
        {
          uint64_t v11 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)this + 133) + 144) + 64), v9, &v27);
          uint64_t v28 = (long long *)(v10 + 4);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11 + 5, v10 + 4, &v28)[56] = 0;
          uint64_t v12 = (void *)v10[1];
          if (v12)
          {
            do
            {
              uint64_t v13 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v13 = (void *)v10[2];
              BOOL v14 = *v13 == (void)v10;
              uint64_t v10 = v13;
            }
            while (!v14);
          }
          uint64_t v10 = v13;
        }
        while (v13 != v7 + 6);
      }
      uint64_t v15 = (void *)v7[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v7[2];
          BOOL v14 = *v16 == (void)v7;
          uint64_t v7 = v16;
        }
        while (!v14);
      }
      uint64_t v7 = v16;
    }
    while (v16 != v8);
    BOOL v6 = (void *)*((void *)this + 133);
  }
  long long v17 = (void *)v6[15];
  std::string v18 = v6 + 16;
  if (v17 != v6 + 16)
  {
    do
    {
      int v19 = *((_DWORD *)v17 + 8);
      int v27 = v19;
      float v20 = (void *)v17[5];
      if (v20 != v17 + 6)
      {
        do
        {
          char v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)(*((void *)this + 133) + 144) + 88), v19, &v27);
          uint64_t v28 = (long long *)(v20 + 4);
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v21 + 5, v20 + 4, &v28)[56] = 0;
          int v22 = (void *)v20[1];
          if (v22)
          {
            do
            {
              unint64_t v23 = v22;
              int v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              unint64_t v23 = (void *)v20[2];
              BOOL v14 = *v23 == (void)v20;
              float v20 = v23;
            }
            while (!v14);
          }
          float v20 = v23;
        }
        while (v23 != v17 + 6);
      }
      unint64_t v24 = (void *)v17[1];
      if (v24)
      {
        do
        {
          int8x8_t v25 = v24;
          unint64_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          int8x8_t v25 = (void *)v17[2];
          BOOL v14 = *v25 == (void)v17;
          long long v17 = v25;
        }
        while (!v14);
      }
      long long v17 = v25;
    }
    while (v25 != v18);
  }
}

void EspressoLight::espresso_plan::__copy_outputs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  int v53 = a3;
  uint64_t v8 = *(const void **)a2;
  if (*(void *)a2)
  {
    if (v9)
    {
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 8);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = *(const void **)a2;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    int v9 = 0;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)&long long v52 = v8;
  *((void *)&v52 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(uint64_t (****)(void))(*(void *)(*a4 + 16) + 8);
  uint64_t v47 = v10;
  unsigned int v13 = (**v12)(v12);
  BOOL v14 = v13 == 10008 || v13 == 10011;
  BOOL v15 = v14 || v13 >> 1 == 5003;
  uint64_t v16 = *(void *)(*(void *)a1 + 96);
  if (v16)
  {
    uint64_t v17 = *(void *)a1 + 96;
    do
    {
      int v18 = *(_DWORD *)(v16 + 32);
      BOOL v19 = v18 < a3;
      if (v18 >= a3) {
        float v20 = (uint64_t *)v16;
      }
      else {
        float v20 = (uint64_t *)(v16 + 8);
      }
      if (!v19) {
        uint64_t v17 = v16;
      }
      uint64_t v16 = *v20;
    }
    while (*v20);
    if (v17 != *(void *)a1 + 96 && *(_DWORD *)(v17 + 32) <= a3)
    {
      char v21 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 88), a3, &v53)[7];
      int v22 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 88), a3, &v53);
      unint64_t v23 = v22[5];
      unint64_t v24 = v22 + 6;
      if (v23 != (uint64_t *)(v22 + 6))
      {
        if (v9) {
          BOOL v25 = v15;
        }
        else {
          BOOL v25 = 0;
        }
        do
        {
          Espresso::net::get_blob_or_global_with_prefix(*a4, (std::string *)(v23 + 4), &v50);
          int v26 = v53;
          if (v25)
          {
            char v28 = (unint64_t)v21 > 1 && (uint64_t *)((char *)v21 - 2) == (uint64_t *)v53;
            uint64_t v29 = (std::__shared_weak_count *)v50[10];
            v48[0] = v50[9];
            v48[1] = v29;
            if (v29) {
              atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::switch_engine_batch::switch_to_engine(v9, (uint64_t)v48, v28, &v49);
            int v30 = (std::__shared_weak_count *)*((void *)&v52 + 1);
            long long v52 = v49;
            if (v30) {
              nitro::nitro_function::nitro_function(v30);
            }
            if (v29) {
              nitro::nitro_function::nitro_function(v29);
            }
          }
          unint64_t v31 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 208), v26, &v53);
          if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v31[6], v23 + 4))
          {
            unint64_t v32 = v50;
            BOOL v33 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 208), v26, &v53);
            *(void *)&long long v49 = v23 + 4;
            uint64_t v34 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33 + 5, v23 + 4, (long long **)&v49);
            (*(void (**)(void *, long long *, void))(*v32 + 112))(v32, &v52, *((void *)v34 + 7));
          }
          else
          {
            uint64_t v35 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 160), v26, &v53);
            if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v35[6], v23 + 4))
            {
              uint64_t v36 = v50;
              unint64_t v37 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(*(void *)a1 + 160), v26, &v53);
              uint64_t v38 = std::__tree<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::__map_value_compare<std::string,std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,EspressoLight::input_cvpixel_buffers_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37 + 5, v23 + 4, (uint64_t)(v23 + 4));
              (*(void (**)(void *, long long *, uint64_t *, void))(*v36 + 96))(v36, &v52, v23 + 4, *v38[21]);
            }
            else if (*((unsigned char *)v23 + 56))
            {
              uint64_t v39 = *(void *)(*(void *)a1 + 48);
              if (!v39) {
                goto LABEL_57;
              }
              uint64_t v40 = *(void *)a1 + 48;
              do
              {
                int v41 = *(_DWORD *)(v39 + 32);
                BOOL v42 = v41 < v26;
                if (v41 >= v26) {
                  uint64_t v43 = (uint64_t *)v39;
                }
                else {
                  uint64_t v43 = (uint64_t *)(v39 + 8);
                }
                if (!v42) {
                  uint64_t v40 = v39;
                }
                uint64_t v39 = *v43;
              }
              while (*v43);
              if (v40 == *(void *)a1 + 48 || v26 < *(_DWORD *)(v40 + 32)) {
LABEL_57:
              }
                uint64_t v40 = *(void *)a1 + 48;
              uint64_t v44 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v40 + 40, v23 + 4);
              (*(void (**)(void *, long long *, void *))(*v50 + 40))(v50, &v52, v44 + 7);
            }
          }
          if (v51) {
            nitro::nitro_function::nitro_function(v51);
          }
          long long v45 = (uint64_t *)v23[1];
          if (v45)
          {
            do
            {
              std::string::size_type v46 = v45;
              long long v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              std::string::size_type v46 = (uint64_t *)v23[2];
              BOOL v14 = *v46 == (void)v23;
              unint64_t v23 = v46;
            }
            while (!v14);
          }
          unint64_t v23 = v46;
        }
        while (v46 != (uint64_t *)v24);
      }
    }
  }
  if (*((void *)&v52 + 1)) {
    nitro::nitro_function::nitro_function(*((std::__shared_weak_count **)&v52 + 1));
  }
  if (v47) {
    nitro::nitro_function::nitro_function(v47);
  }
}

void sub_1921B127C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    nitro::nitro_function::nitro_function(a18);
  }
  if (a9) {
    nitro::nitro_function::nitro_function(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    void v7[5] = (uint64_t *)(v7 + 6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    unsigned char v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void Espresso::net::get_blob_or_global_with_prefix(uint64_t a1@<X0>, std::string *a2@<X1>, void *a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, Espresso::net::bind_global_prefix[0]);
  std::string::size_type size = (char *)HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((v22 & 0x80u) == 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    int64_t v9 = v22;
  }
  else {
    int64_t v9 = (int64_t)__p[1];
  }
  if (v9)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a2->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v9)
    {
      uint64_t v12 = &size[(void)v7];
      int v13 = *(char *)v8;
      BOOL v14 = v7;
      do
      {
        BOOL v15 = &size[-v9];
        if (v15 == (char *)-1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
        if (!v16) {
          break;
        }
        uint64_t v17 = (std::string *)v16;
        if (!memcmp(v16, v8, v9))
        {
          if (v17 == (std::string *)v12 || v17 != v7) {
            break;
          }
          goto LABEL_25;
        }
        BOOL v14 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
        std::string::size_type size = (char *)(v12 - ((char *)&v17->__r_.__value_.__l.__data_ + 1));
      }
      while ((uint64_t)size >= v9);
    }
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 136), (unsigned __int8 *)a2);
    if (v10)
    {
      uint64_t v11 = *((void *)v10 + 6);
      *a3 = *((void *)v10 + 5);
      a3[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_33;
    }
LABEL_32:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_33;
  }
LABEL_25:
  std::string::basic_string(&v20, a2, v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
  int v18 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((void *)(a1 + 1440), (unsigned __int8 *)&v20);
  if (!v18)
  {
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    goto LABEL_32;
  }
  uint64_t v19 = *((void *)v18 + 6);
  *a3 = *((void *)v18 + 5);
  a3[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
LABEL_33:
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1921B1568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL Espresso::net::fast_reshape_enabled(Espresso::net *this)
{
  uint64_t v2 = (char *)this + 472;
  std::string::basic_string[abi:ne180100]<0>(__p, "fast_reshape");
  long long v3 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v2, __p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((void *)((char *)this + 480) == v3) {
    return 0;
  }
  uint64_t v4 = (unsigned __int8 *)(v3 + 7);
  int v5 = *((char *)v3 + 79);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 1) {
      return 0;
    }
    return *v4 == 49;
  }
  if (v3[8] == 1)
  {
    uint64_t v4 = *(unsigned __int8 **)v4;
    return *v4 == 49;
  }
  return 0;
}

uint64_t Espresso::ANERuntimeEngine::compiler::get_intermediate_buffer_handle(Espresso::ANERuntimeEngine::compiler *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 288)) {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("ANE network should have been built");
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    long long v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 1);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    long long v3 = 0;
  }
  memset(v12, 0, sizeof(v12));
  id v5 = *((id *)this + 24);
  if ([v5 countByEnumeratingWithState:v12 objects:v14 count:16])
  {
    BOOL v6 = [*((id *)this + 24) objectForKeyedSubscript:**((void **)&v12[0] + 1)];
    uint64_t v7 = [v6 intermediateBufferHandle];

    uint64_t v8 = *(void *)(v4 + 712);
    if (v8)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "SharedIntermediateBufferHandle");
      int v13 = __p;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v8 + 128), __p, (_OWORD **)&v13)+ 14) = v7;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  if (v3) {
    nitro::nitro_function::nitro_function(v3);
  }
  return v7;
}

void sub_1921B17B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    nitro::nitro_function::nitro_function(v15);
  }
  _Unwind_Resume(a1);
}

void EspressoLight::intermediate_buffer_sharing_singleton::setup_sharing_if_needed(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "espressobar_id");
  Espresso::map_const_get<std::map<std::string,std::string>>(v6 + 472, (uint64_t)&__p, *a2 + 592, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::lock((std::mutex *)a1);
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v31.__r_.__value_.__l.__size_) {
      goto LABEL_36;
    }
    uint64_t v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v31.__r_.__value_.__s + 23)) {
      goto LABEL_36;
    }
    uint64_t v7 = &v31;
  }
  if (v7->__r_.__value_.__s.__data_[0] != 47)
  {
LABEL_36:
    char v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((void *)(a1 + 64), (unsigned __int8 *)&v31);
    if (v21)
    {
      std::string::size_type v22 = *((void *)v21 + 5);
      int v23 = *((_DWORD *)v21 + 12);
      std::string::operator=(&__p, (const std::string *)(v21 + 16));
      char v24 = 0;
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 80);
  if (!v8)
  {
LABEL_38:
    std::string::size_type v22 = 0;
    int v23 = 0;
    char v24 = 1;
    goto LABEL_40;
  }
  uint64_t v30 = a3;
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v9 = &v31;
  }
  else {
    int64_t v9 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v31.__r_.__value_.__l.__size_;
  }
  char v11 = (std::string *)((char *)v9 + size);
  while (1)
  {
    int v12 = *((char *)v8 + 39);
    int v13 = v12 >= 0 ? (char *)(v8 + 2) : (char *)v8[2];
    int64_t v14 = v12 >= 0 ? *((unsigned __int8 *)v8 + 39) : v8[3];
    if (!v14) {
      break;
    }
    if (size >= v14)
    {
      int v15 = *v13;
      int64_t v16 = size;
      uint64_t v17 = v9;
      do
      {
        int64_t v18 = v16 - v14;
        if (v18 == -1) {
          break;
        }
        uint64_t v19 = (std::string *)memchr(v17, v15, v18 + 1);
        if (!v19) {
          break;
        }
        std::string v20 = v19;
        if (!memcmp(v19, v13, v14))
        {
          if (v20 == v11 || v20 != v9) {
            break;
          }
          goto LABEL_35;
        }
        uint64_t v17 = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
        int64_t v16 = (char *)v11 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
      }
      while (v16 >= v14);
    }
    uint64_t v8 = (uint64_t *)*v8;
    if (!v8)
    {
      std::string::size_type v22 = 0;
      int v23 = 0;
      char v24 = 1;
      goto LABEL_39;
    }
  }
LABEL_35:
  std::string::size_type v22 = v8[5];
  int v23 = *((_DWORD *)v8 + 12);
  std::string::operator=(&__p, (const std::string *)(v8 + 2));
  char v24 = 0;
LABEL_39:
  a3 = v30;
LABEL_40:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock((std::mutex *)a1);
  if ((v24 & 1) == 0)
  {
    int v27 = Espresso::espresso_os_log_subsystem(v25, v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v29 = &v31;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v29 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v22;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024;
      int v33 = v23;
      _os_log_debug_impl(&dword_1920CB000, v27, OS_LOG_TYPE_DEBUG, "IntermediateSharing setup (2/3) key=%s handle=%llu priority=%d", (uint8_t *)&__p, 0x1Cu);
    }

    uint64_t v28 = *a2;
    *(void *)(v28 + 1272) = v22;
    *(_DWORD *)(*(void *)(a3 + 1064) + 164) = v23;
    *(unsigned char *)(v28 + 1280) = 1;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1921B1AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v23);
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::ANERuntimeEngine::compiler::set_priority(uint64_t result, int a2)
{
  *(unsigned char *)(result + 289) = 1;
  *(_DWORD *)(result + 292) = a2;
  return result;
}

void Espresso::ANERuntimeEngine::compiler::set_configuration(uint64_t a1, const std::string *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v3 = (void *)(a1 + 264);
  uint64_t v4 = std::string::operator=((std::string *)(a1 + 264), a2);
  uint64_t v6 = Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a1 + 287) < 0) {
      long long v3 = (void *)*v3;
    }
    int v7 = 136315138;
    uint64_t v8 = v3;
    _os_log_debug_impl(&dword_1920CB000, v6, OS_LOG_TYPE_DEBUG, "set_configuration current conf %s\n", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t Espresso::ANERuntimeEngine::compiler::clear_priority(uint64_t this)
{
  *(unsigned char *)(this + 289) = 0;
  return this;
}

BOOL Espresso::ANECompilerEngine::can_handle_configuration_dependent_transforms(Espresso::ANECompilerEngine *this, Espresso::net *a2)
{
  uint64_t v3 = *((void *)this + 99);
  std::string::basic_string[abi:ne180100]<0>(v8, "per_network_configuration");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)this + 472, (uint64_t)v8, (uint64_t)__p, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v4 = v10.__r_.__value_.__l.__size_ == 1 && *v10.__r_.__value_.__l.__data_ == 49;
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v4 = SHIBYTE(v10.__r_.__value_.__r.__words[2]) == 1 && v10.__r_.__value_.__s.__data_[0] == 49;
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return !v3 || v4;
}

void sub_1921B1D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10,std::allocator<Espresso::AOT::Backends::CostModel::OpEstimatorRegistry::InitAllEstimators(void)::$_10>,std::unique_ptr<Espresso::AOT::AbstractMILOpResourceEstimator> ()(void)>::operator()()
{
}

void std::make_unique[abi:ne180100]<Espresso::AOT::Backends::CostModel::BaseMatmulOpEstimator,char const(&)[2],char const(&)[1]>()
{
}

void sub_1921B1FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20[31] < 0) {
    operator delete(*v21);
  }
  Espresso::AOT::AbstractMILOpResourceEstimator::~AbstractMILOpResourceEstimator((Espresso::AOT::AbstractMILOpResourceEstimator *)v20);
  operator delete(__p);
  if (v22 < 0) {
    operator delete(a15);
  }
  MEMORY[0x192FF16B0](v20, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

uint64_t e5rt_buffer_object_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE397BF8;
  v3[1] = a1;
  BOOL v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1921B212C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::build_segment(uint64_t a1, uint64_t a2, uint64_t a3, const Espresso::net_compiler_segment_based::segment_t *a4)
{
  uint64_t v333 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 192))
  {
    uint64_t v6 = objc_opt_new();
    char v7 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = v6;
  }
  v303 = 0;
  uint64_t v302 = 0;
  uint64_t v256 = (Espresso::ANERuntimeEngine::compiler *)a1;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (v303 = std::__shared_weak_count::lock(v8)) == 0 || (uint64_t v302 = *(void *)(a1 + 8)) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v295[0] = 1;
  long long v298 = 0u;
  long long v299 = 0u;
  long long v300 = 0u;
  uint64_t v301 = 0;
  uint64_t v297 = (int)a3;
  int v296 = 723714912;
  kdebug_trace();
  BOOL is_network_multihead_multiprocedure = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(&v302);
  if (a3) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = is_network_multihead_multiprocedure;
  }
  if (v10)
  {
    Espresso::run_pass_on_network<Espresso::pass_ane_multi_head>(v302);
    Espresso::net::get_analysis_if_existing<Espresso::analysis_ane_multi_head>(&buf, v302);
    char v11 = *(std::__shared_weak_count **)(a1 + 400);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    if (v11) {
      nitro::nitro_function::nitro_function(v11);
    }
  }
  int v254 = objc_opt_new();
  uint64_t v12 = v302;
  int v13 = *(uint64_t ***)(v302 + 712);
  if (!v13)
  {
    int64_t v14 = (char *)operator new(0xB0uLL);
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(_OWORD *)(v14 + 24) = 0u;
    int v13 = (uint64_t **)(v14 + 24);
    *(void *)int64_t v14 = &unk_1EE388928;
    *(_OWORD *)(v14 + 88) = 0u;
    *(_OWORD *)(v14 + 136) = 0u;
    *(_OWORD *)(v14 + 120) = 0u;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *(_OWORD *)(v14 + 104) = 0u;
    *((void *)v14 + 12) = v14 + 104;
    *((void *)v14 + 17) = 0;
    *((void *)v14 + 16) = 0;
    *((void *)v14 + 15) = v14 + 128;
    *((void *)v14 + 21) = 0;
    *((void *)v14 + 20) = 0;
    *((void *)v14 + 19) = v14 + 160;
    *(void *)(v12 + 712) = v14 + 24;
    int v15 = *(std::__shared_weak_count **)(v12 + 720);
    *(void *)(v12 + 720) = v14;
    if (v15)
    {
      nitro::nitro_function::nitro_function(v15);
      int v13 = *(uint64_t ***)(v12 + 712);
    }
  }
  int v16 = *(unsigned __int8 *)(*((void *)v256 + 13) + 139);
  std::string::basic_string[abi:ne180100]<0>(&buf, "ane_direct_path");
  *(void *)int v328 = &buf;
  uint64_t v17 = (Espresso *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v13 + 16, &buf, (_OWORD **)v328);
  *((_DWORD *)v17 + 14) = v16;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v19 = v302;
  if (*(unsigned char *)(v302 + 1280))
  {
    std::string::size_type v20 = *(void *)(v302 + 1272);
    char v21 = Espresso::espresso_os_log_subsystem(v17, v18);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      long long v82 = (void *)(v302 + 592);
      if (*(char *)(v302 + 615) < 0) {
        long long v82 = (void *)*v82;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v82;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v20;
      _os_log_debug_impl(&dword_1920CB000, v21, OS_LOG_TYPE_DEBUG, "IntermediateSharing use_ext_intermediate_buffer_handle 3/3 in %s handle=%llu", (uint8_t *)&buf, 0x16u);
    }

    uint64_t v22 = *(void *)(v302 + 712);
    if (v22)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "kANEFIntermediateBufferHandleKey");
      *(void *)int v328 = &buf;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v22 + 128), &buf, (_OWORD **)v328)+ 14) = v20;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    int v23 = [NSNumber numberWithUnsignedLongLong:v20];
    [v254 setObject:v23 forKeyedSubscript:*MEMORY[0x1E4F4E0E8]];

    uint64_t v19 = v302;
  }
  if (*(unsigned char *)(v19 + 1282)) {
    [v254 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F4E138]];
  }
  uint64_t v253 = objc_opt_new();
  uint64_t v24 = *((void *)v256 + 13);
  if (*(void *)(v24 + 128))
  {
    BOOL v25 = objc_msgSend(NSNumber, "numberWithInt:");
    [v253 setObject:v25 forKeyedSubscript:@"compute_unit_mask"];

    uint64_t v24 = *((void *)v256 + 13);
  }
  if (*(unsigned char *)(v24 + 121))
  {
    int v26 = [NSNumber numberWithInt:1];
    [v253 setObject:v26 forKeyedSubscript:@"is_from_virtual_machine"];
  }
  int v27 = (Espresso *)[v254 setObject:v253 forKeyedSubscript:*MEMORY[0x1E4F4E1B0]];
  uint64_t v29 = Espresso::espresso_os_log_subsystem(v27, v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v65 = *((void *)v256 + 13);
    uint64_t v66 = *(void *)(v65 + 128);
    LODWORD(v65) = *(unsigned __int8 *)(v65 + 121);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v66;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v65;
    _os_log_debug_impl(&dword_1920CB000, v29, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] compute_unit_mask: %d; is_from_virtual_machine %d",
      (uint8_t *)&buf,
      0xEu);
  }

  LODWORD(buf.__r_.__value_.__l.__data_) = a3;
  uint64_t v30 = (Espresso *)std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>((uint64_t *)v256 + 28, a3, &buf, &v302, (uint64_t)a4);
  v276 = v30;
  unint64_t v32 = *((void *)a4 + 1);
  unint64_t v33 = v32 - *(void *)a4;
  if (v32 <= *(void *)a4)
  {
LABEL_35:
    uint64_t v36 = Espresso::espresso_os_log_subsystem(v30, v31);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_1920CB000, v36, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] skip model load", (uint8_t *)&buf, 2u);
    }
    goto LABEL_37;
  }
  uint64_t v34 = v302;
  uint64_t v35 = *(void *)(v302 + 32) + 16 * *(void *)a4;
  while (*(unsigned char *)(*(void *)v35 + 152))
  {
    v35 += 16;
    if (!--v33) {
      goto LABEL_35;
    }
  }
  uint64_t v37 = *(void *)(v302 + 1240);
  if (v37)
  {
    uint64_t v38 = *(_DWORD **)(v37 + 1048);
    if (v38)
    {
      uint64_t v39 = *v38 & 1 | (2 * ((*v38 >> 2) & 1)) & 0xFFFFFFFB | (4 * ((*v38 >> 1) & 1));
      uint64_t v326 = *MEMORY[0x1E4F4E198];
      uint64_t v40 = [NSNumber numberWithUnsignedInt:v39];
      long long v327 = v40;
      int v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v327 forKeys:&v326 count:1];

      [v254 addEntriesFromDictionary:v41];
      uint64_t v34 = v302;
    }
  }
  if (*(void *)(v34 + 1360))
  {
    BOOL v42 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:");
    [v254 setObject:v42 forKeyedSubscript:@"kANEFMemoryPoolIDKey"];
  }
  if (Espresso::use_multiple_procedure_for_segments(&v302))
  {
    uint64_t v36 = Espresso::ANERuntimeEngine::compiler::key_for_multi_procedure_segments((uint64_t)v256, &v302);
    if ((int)a3 > 0) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v36 = Espresso::ANERuntimeEngine::compiler::key_for_segment(v256, a3, a4);
  }
  uint64_t v43 = (void *)*((void *)v256 + 22);
  short float v250 = v36;
  if (!v43)
  {
    uint64_t v44 = objc_opt_new();
    long long v45 = (void *)*((void *)v256 + 22);
    *((void *)v256 + 22) = v44;

    uint64_t v43 = (void *)*((void *)v256 + 22);
  }
  [v43 setObject:&unk_1EE3AEFC8 forKeyedSubscript:v36];
  std::string::size_type v46 = v256;
  uint64_t qos = Espresso::ANERuntimeEngine::compiler::get_qos((uint64_t)v256);
  if (!*((unsigned char *)v256 + 200))
  {
    if (!*((void *)v256 + 17))
    {
      if (*(unsigned char *)(*((void *)v256 + 13) + 139)) {
        [MEMORY[0x1E4F4E030] sharedPrivateConnection];
      }
      else {
      uint64_t v64 = [MEMORY[0x1E4F4E030] sharedConnection];
      }
      uint64_t v83 = (void *)*((void *)v256 + 17);
      *((void *)v256 + 17) = v64;

      std::string::size_type v46 = v256;
    }
    std::string::size_type v84 = (NSError *)*((id *)v46 + 20);
    long long v49 = (Espresso::ANECompilerEngine *)*((id *)v46 + 19);
    uint64_t v85 = Espresso::ANECompilerEngine::current_ane_arch(v49);
    uint64_t v86 = [(NSError *)v84 path];
    long long v87 = get_precompiled_path_if_precompiled(a3, v86);

    if (v87) {
      goto LABEL_92;
    }
    uint64_t v287 = v302;
    uint64_t v288 = v303;
    if (v303) {
      atomic_fetch_add_explicit(&v303->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v88 = get_original_url_if_exists(&v287, v84);
    uint64_t v89 = [v88 path];

    if (v288) {
      nitro::nitro_function::nitro_function(v288);
    }
    long long v87 = get_precompiled_path_if_precompiled(a3, v89);

    if (v87)
    {
LABEL_92:
      char v78 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v87];

      uint64_t v90 = (Espresso *)[v254 setObject:*MEMORY[0x1E4F4E160] forKeyedSubscript:*MEMORY[0x1E4F4E188]];
      std::string v92 = Espresso::espresso_os_log_subsystem(v90, v91);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v87;
        _os_log_debug_impl(&dword_1920CB000, v92, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] pre-compiled arch: %@ path: %@", (uint8_t *)&buf, 0x16u);
      }

      uint64_t v93 = *(void *)(v302 + 712);
      std::string::basic_string[abi:ne180100]<0>(&buf, "ane_loaded_precompiled_model");
      *(void *)int v328 = &buf;
      *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v93 + 128), &buf, (_OWORD **)v328)+ 14) = 1;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v208 = *(void *)(v302 + 712);
      std::string::basic_string[abi:ne180100]<0>(&buf, "ane_assert_if_no_precompiled_model_found");
      uint64_t v209 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v208 + 136), &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v209)
      {
        buf.__r_.__value_.__r.__words[0] = [(NSError *)v84 path];
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("ane_assert_if_no_precompiled_model_found path=%s", &buf);
      }
      char v78 = v84;
    }

    std::string v96 = Espresso::espresso_os_log_subsystem(v94, v95);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
    {
      id v213 = [(NSError *)v78 absoluteString];
      std::string::size_type v214 = [v213 UTF8String];
      std::string::size_type v215 = [(Espresso::ANECompilerEngine *)v49 UTF8String];
      uint64_t v216 = [v250 UTF8String];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v214;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v215;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v332 = v216;
      _os_log_debug_impl(&dword_1920CB000, v96, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] url=%s bid=%s key=%s", (uint8_t *)&buf, 0x20u);
    }
    uint64_t v285 = v302;
    unint64_t v286 = v303;
    if (v303) {
      atomic_fetch_add_explicit(&v303->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    get_original_url_if_exists(&v285, v78);
    id v273 = (id)objc_claimAutoreleasedReturnValue();
    long long v98 = (Espresso *)v286;
    if (v286) {
      nitro::nitro_function::nitro_function(v286);
    }
    uint64_t v99 = Espresso::espresso_os_log_subsystem(v98, v97);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      id v217 = [v273 absoluteString];
      std::string::size_type v218 = [v217 UTF8String];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v218;
      _os_log_debug_impl(&dword_1920CB000, v99, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Define ANE model url: %s", (uint8_t *)&buf, 0xCu);
    }
    std::string v100 = [MEMORY[0x1E4F4E060] modelAtURL:v273 key:v250];
    std::string::size_type v102 = v100;
    uint64_t v103 = v302;
    uint64_t v104 = *(void *)(v302 + 1240);
    if (v104)
    {
      size_t v105 = *(unsigned char **)(v104 + 1048);
      if (v105)
      {
        if ((*v105 & 2) != 0)
        {
          size_t v106 = Espresso::espresso_os_log_subsystem(v100, v101);
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
          {
            id v221 = [(NSError *)v78 absoluteString];
            std::string::size_type v222 = [v221 UTF8String];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v222;
            _os_log_debug_impl(&dword_1920CB000, v106, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Purge ANE model url: %s", (uint8_t *)&buf, 0xCu);
          }
          [*((id *)v256 + 17) purgeCompiledModel:v102];
          uint64_t v322 = *MEMORY[0x1E4F4E0C8];
          long long v323 = @"compiler_analytics_on.plist";
          long long v107 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v323 forKeys:&v322 count:1];
          [v254 addEntriesFromDictionary:v107];

          uint64_t v103 = v302;
        }
      }
    }
    if (*(char *)(v103 + 1439) < 0)
    {
      if (!*(void *)(v103 + 1424))
      {
LABEL_144:
        std::string::size_type v122 = (void *)*((void *)v256 + 17);
        if (*(unsigned char *)(*((void *)v256 + 13) + 139))
        {
          uint64_t v284 = 0;
          std::string::size_type v123 = (id *)&v284;
          int v124 = [v122 loadRealTimeModel:v102 options:v254 qos:qos error:&v284];
        }
        else
        {
          uint64_t v283 = 0;
          std::string::size_type v123 = (id *)&v283;
          int v124 = [v122 loadModel:v102 options:v254 qos:qos error:&v283];
        }
        int v125 = v124;
        uint64_t v59 = (Espresso *)*v123;
        size_t v127 = Espresso::espresso_os_log_subsystem(v59, v126);
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v219 = [(Espresso *)v102 modelAttributes];
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v125;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v219;
          _os_log_debug_impl(&dword_1920CB000, v127, OS_LOG_TYPE_DEBUG, "[ane_client loadModel] return=%d ane_model.modelAttributes=%@", (uint8_t *)&buf, 0x12u);
        }
        if ((v125 & 1) == 0)
        {
          uint64_t v238 = get_error_string((NSError *)v59);
          unint64_t v239 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          int v240 = [v273 absoluteString];
          std::string::basic_string[abi:ne180100]<0>(v307, v240);
          vDSP_Length v241 = std::string::insert((std::string *)v307, 0, "ANECF error: failed to load ANE model ");
          long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
          *(void *)&v313[16] = *((void *)&v241->__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v313 = v242;
          v241->__r_.__value_.__l.__size_ = 0;
          v241->__r_.__value_.__r.__words[2] = 0;
          v241->__r_.__value_.__r.__words[0] = 0;
          uint64_t v243 = std::string::append((std::string *)v313, " Error=");
          long long v244 = *(_OWORD *)&v243->__r_.__value_.__l.__data_;
          *(void *)&v328[16] = *((void *)&v243->__r_.__value_.__l + 2);
          *(_OWORD *)int v328 = v244;
          v243->__r_.__value_.__l.__size_ = 0;
          v243->__r_.__value_.__r.__words[2] = 0;
          v243->__r_.__value_.__r.__words[0] = 0;
          std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v238 UTF8String]);
          if (v318 >= 0) {
            p_str = (const std::string::value_type *)&__str;
          }
          else {
            p_str = (const std::string::value_type *)__str;
          }
          if (v318 >= 0) {
            std::string::size_type v246 = HIBYTE(v318);
          }
          else {
            std::string::size_type v246 = (std::string::size_type)v317;
          }
          std::vector<int> v247 = std::string::append((std::string *)v328, p_str, v246);
          long long v248 = *(_OWORD *)&v247->__r_.__value_.__l.__data_;
          buf.__r_.__value_.__r.__words[2] = v247->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v248;
          v247->__r_.__value_.__l.__size_ = 0;
          v247->__r_.__value_.__r.__words[2] = 0;
          v247->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v239, &buf);
          __cxa_throw(v239, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v50 = v102;
        uint64_t v251 = v50;
        goto LABEL_151;
      }
    }
    else if (!*(unsigned char *)(v103 + 1439))
    {
      goto LABEL_144;
    }
    if (*(char *)(v103 + 1439) >= 0) {
      size_t v108 = *(unsigned __int8 *)(v103 + 1439);
    }
    else {
      size_t v108 = *(void *)(v103 + 1424);
    }
    unsigned int v109 = v328;
    std::string::basic_string[abi:ne180100]((uint64_t)v328, v108 + 1);
    if (v328[23] < 0) {
      unsigned int v109 = *(unsigned char **)v328;
    }
    if (v108)
    {
      if (*(char *)(v103 + 1439) >= 0) {
        uint64_t v110 = (const void *)(v103 + 1416);
      }
      else {
        uint64_t v110 = *(const void **)(v103 + 1416);
      }
      memmove(v109, v110, v108);
    }
    *(_WORD *)&v109[v108] = 95;
    std::to_string((std::string *)v313, a3);
    if (v313[23] >= 0) {
      std::string::size_type v111 = v313;
    }
    else {
      std::string::size_type v111 = *(const std::string::value_type **)v313;
    }
    if (v313[23] >= 0) {
      std::string::size_type v112 = v313[23];
    }
    else {
      std::string::size_type v112 = *(void *)&v313[8];
    }
    uint64_t v113 = std::string::append((std::string *)v328, v111, v112);
    long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    if ((v313[23] & 0x80000000) != 0) {
      operator delete(*(void **)v313);
    }
    if ((v328[23] & 0x80000000) != 0) {
      operator delete(*(void **)v328);
    }
    uint64_t v320 = *MEMORY[0x1E4F4E118];
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    size_t v116 = [NSString stringWithUTF8String:p_buf];
    long long v321 = v116;
    long long v117 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v321 forKeys:&v320 count:1];

    long long v118 = (Espresso *)[v254 addEntriesFromDictionary:v117];
    size_t v120 = Espresso::espresso_os_log_subsystem(v118, v119);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_INFO))
    {
      uint64_t v121 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v121 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v328 = 136315138;
      *(void *)&v328[4] = v121;
      _os_log_impl(&dword_1920CB000, v120, OS_LOG_TYPE_INFO, "[Espresso::ANERuntimeEngine::build_segment] Current tracing name: %s", v328, 0xCu);
    }

    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    goto LABEL_144;
  }
  uint64_t v48 = *((void *)v256 + 16);
  id v293 = 0;
  id v294 = 0;
  id v292 = 0;
  (*(void (**)(uint64_t, NSObject *, uint64_t, id *, id *, id *))(*(void *)v48 + 152))(v48, v36, 1, &v294, &v293, &v292);
  long long v49 = (Espresso::ANECompilerEngine *)v294;
  id v273 = v293;
  uint64_t v50 = (Espresso *)v292;
  std::string::size_type v51 = getenv("ESPRESSO_PRIVATE_ANE_DUMP_IN_MEMORY_IR");
  if (v51)
  {
    long long v52 = v51;
    int v53 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&buf, v51);
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    int v55 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    if (!size || (v56 = std::string::at(v53, 0), int v55 = SHIBYTE(buf.__r_.__value_.__r.__words[2]), *v56 != 47))
    {
      if (v55 >= 0) {
        long long v224 = &buf;
      }
      else {
        long long v224 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      Espresso::throw_exception_selector<Espresso::io_error,char const*>("Invalid path = %s", (uint64_t)v224);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v57 = *((void *)v256 + 16);
    uint64_t v58 = [NSString stringWithUTF8String:v52];
    (*(void (**)(uint64_t, uint64_t, void *, Espresso::ANECompilerEngine *, id, Espresso *))(*(void *)v57 + 144))(v57, a3, v58, v49, v273, v50);
  }
  id v291 = 0;
  uint64_t v59 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v49 format:100 options:0 error:&v291];
  int v60 = (NSError *)v291;
  long long v61 = v60;
  if (!v59)
  {
    uint64_t v225 = get_error_string(v60);
    std::string::size_type v226 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(v328, (char *)[v225 UTF8String]);
    uint64_t v227 = std::string::insert((std::string *)v328, 0, "Network plist conversion error: ");
    long long v228 = *(_OWORD *)&v227->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v227->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v228;
    v227->__r_.__value_.__l.__size_ = 0;
    v227->__r_.__value_.__r.__words[2] = 0;
    v227->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v226, &buf);
    __cxa_throw(v226, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v50)
  {
    id v290 = 0;
    uint64_t v62 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v50 format:100 options:0 error:&v290];
    uint64_t v63 = (NSError *)v290;

    if (!v62)
    {
      long long v234 = get_error_string(v63);
      uint64_t v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(v328, (char *)[v234 UTF8String]);
      uint64_t v236 = std::string::insert((std::string *)v328, 0, "Compiler options plist conversion error: ");
      long long v237 = *(_OWORD *)&v236->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v236->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v237;
      v236->__r_.__value_.__l.__size_ = 0;
      v236->__r_.__value_.__r.__words[2] = 0;
      v236->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v235, &buf);
      __cxa_throw(v235, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    long long v61 = v63;
  }
  else
  {
    uint64_t v62 = 0;
  }
  uint64_t v67 = [MEMORY[0x1E4F4E058] modelWithNetworkDescription:v59 weights:v273 optionsPlist:v62];
  if (!v67)
  {
    uint64_t v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v229, "ANECF error: failed to create ANE in-memory model descriptor");
    __cxa_throw(v229, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  char v68 = [MEMORY[0x1E4F4E050] inMemoryModelWithDescriptor:v67];
  uint64_t v70 = Espresso::espresso_os_log_subsystem(v68, v69);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
  {
    size_t v210 = [(Espresso *)v68 hexStringIdentifier];
    LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v210;
    _os_log_debug_impl(&dword_1920CB000, v70, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Created ANE in-memory model identifier: %@", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v73 = *(void *)(v302 + 1240);
  if (v73)
  {
    int v74 = *(unsigned char **)(v73 + 1048);
    if (v74)
    {
      if ((*v74 & 2) != 0)
      {
        BOOL v75 = Espresso::espresso_os_log_subsystem(v71, v72);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          size_t v220 = [(Espresso *)v68 hexStringIdentifier];
          LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v220;
          _os_log_debug_impl(&dword_1920CB000, v75, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Purge ANE in-memory model identifier: %@", (uint8_t *)&buf, 0xCu);
        }
        [(Espresso *)v68 purgeCompiledModel];
        uint64_t v324 = *MEMORY[0x1E4F4E0C8];
        long long v325 = @"compiler_analytics_on.plist";
        uint64_t v76 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v325 forKeys:&v324 count:1];
        [v254 addEntriesFromDictionary:v76];
      }
    }
  }
  short float v289 = v61;
  int v77 = [(Espresso *)v68 loadWithQoS:qos options:v254 error:&v289];
  char v78 = v289;

  uint64_t v81 = Espresso::espresso_os_log_subsystem(v79, v80);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    size_t v211 = [(Espresso *)v68 modelAttributes];
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v77;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v211;
    _os_log_debug_impl(&dword_1920CB000, v81, OS_LOG_TYPE_DEBUG, "[ane_in_memory_model loadWithQoS] return=%d model_attributes=%@", (uint8_t *)&buf, 0x12u);
  }
  if ((v77 & 1) == 0)
  {
    uint64_t v230 = get_error_string(v78);
    uint64_t v231 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(v328, (char *)[v230 UTF8String]);
    uint64_t v232 = std::string::insert((std::string *)v328, 0, "ANECF error: failed to load ANE in-memory model. Error=");
    long long v233 = *(_OWORD *)&v232->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v232->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v233;
    v232->__r_.__value_.__l.__size_ = 0;
    v232->__r_.__value_.__r.__words[2] = 0;
    v232->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v231, &buf);
    __cxa_throw(v231, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v251 = v68;

LABEL_151:
  id v252 = [(Espresso *)v251 modelAttributes];

  uint64_t v249 = [v252 objectForKeyedSubscript:@"NetworkStatusList"];
  id v274 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
  id v128 = [v274 objectForKeyedSubscript:*MEMORY[0x1E4F4E180]];
  unint64_t v129 = [v128 count];
  int v270 = objc_opt_new();
  if (v129)
  {
    uint64_t v130 = MEMORY[0x1E4F1CC08];
    unint64_t v131 = v129;
    do
    {
      [v270 addObject:v130];
      --v131;
    }
    while (v131);
  }
  long long v329 = 0u;
  long long v330 = 0u;
  memset(v328, 0, sizeof(v328));
  id v132 = v128;
  uint64_t v133 = [v132 countByEnumeratingWithState:v328 objects:&buf count:16];
  if (v133)
  {
    uint64_t v134 = **(void **)&v328[16];
    unint64_t v135 = (void *)MEMORY[0x1E4F4E168];
    do
    {
      for (uint64_t i = 0; i != v133; ++i)
      {
        if (**(void **)&v328[16] != v134) {
          objc_enumerationMutation(v132);
        }
        size_t v137 = *(void **)(*(void *)&v328[8] + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          Espresso::throw_exception_selector<Espresso::generic_error>("element of ANEFModelProcedures was not a dictionary");
        }
        long long v138 = [v137 objectForKeyedSubscript:*v135];
        unsigned int v139 = [v138 unsignedIntValue];

        if (v129 <= v139) {
          Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v139, v129);
        }
        objc_msgSend(v270, "setObject:atIndexedSubscript:", v137);
      }
      uint64_t v133 = [v132 countByEnumeratingWithState:v328 objects:&buf count:16];
    }
    while (v133);
  }

  if (*((void *)v276 + 6) > 1uLL
    || (Espresso::use_multiple_procedure_for_segments(&v302) & 1) != 0
    || *(void *)(v302 + 792))
  {
    id v140 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
    uint64_t v141 = [v140 objectForKeyedSubscript:*MEMORY[0x1E4F4E170]];
    short float v269 = objc_opt_new();
    uint64_t v142 = [v141 count];
    unint64_t v143 = v142;
    if (v142)
    {
      uint64_t v144 = v142;
      do
      {
        [v269 addObject:&stru_1EE39BDB0];
        --v144;
      }
      while (v144);
    }
    long long v329 = 0u;
    long long v330 = 0u;
    memset(v328, 0, sizeof(v328));
    id v145 = v141;
    uint64_t v146 = [v145 countByEnumeratingWithState:v328 objects:&buf count:16];
    if (v146)
    {
      uint64_t v147 = **(void **)&v328[16];
      do
      {
        for (uint64_t j = 0; j != v146; ++j)
        {
          if (**(void **)&v328[16] != v147) {
            objc_enumerationMutation(v145);
          }
          uint64_t v149 = *(void *)(*(void *)&v328[8] + 8 * j);
          uint64_t v150 = [v145 objectForKeyedSubscript:v149];
          unsigned int v151 = [v150 unsignedIntValue];

          if (v143 <= v151) {
            Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v151, v143);
          }
          objc_msgSend(v269, "setObject:atIndexedSubscript:", v149);
        }
        uint64_t v146 = [v145 countByEnumeratingWithState:v328 objects:&buf count:16];
      }
      while (v146);
    }

    int v259 = 1;
  }
  else
  {
    int v259 = 0;
    short float v269 = 0;
  }
  uint64_t v152 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
  int v260 = all_blob_names_from_ANEF_model_description(v152, (NSString *)*MEMORY[0x1E4F4E128], (NSString *)*MEMORY[0x1E4F4E130]);

  size_t v153 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
  uint64_t v261 = all_blob_names_from_ANEF_model_description(v153, (NSString *)*MEMORY[0x1E4F4E150], (NSString *)*MEMORY[0x1E4F4E158]);

  size_t v154 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
  size_t v155 = (void *)MEMORY[0x1E4F4E178];
  long long v156 = [v154 objectForKeyedSubscript:*MEMORY[0x1E4F4E178]];
  BOOL v157 = v156 == 0;

  if (!v157)
  {
    std::string::size_type v160 = (void *)*((void *)v256 + 27);
    uint64_t v161 = [v252 objectForKeyedSubscript:*MEMORY[0x1E4F4E108]];
    int v162 = [v161 objectForKeyedSubscript:*v155];
    [v160 addEntriesFromDictionary:v162];

    long long v165 = Espresso::espresso_os_log_subsystem(v163, v164);
    if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v212 = *((void *)v256 + 27);
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v212;
      _os_log_debug_impl(&dword_1920CB000, v165, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] ANE model Analytics buffer sizes: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  long long v166 = Espresso::espresso_os_log_subsystem(v158, v159);
  if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1920CB000, v166, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::build_segment] Process network status list", (uint8_t *)&buf, 2u);
  }

  long long v281 = 0u;
  long long v282 = 0u;
  long long v279 = 0u;
  long long v280 = 0u;
  obuint64_t j = v249;
  uint64_t v167 = [obj countByEnumeratingWithState:&v279 objects:v319 count:16];
  if (v167)
  {
    LODWORD(v262) = 0;
    uint64_t v168 = (uint64_t)v256 + 432;
    uint64_t v258 = *(void *)v280;
    do
    {
      uint64_t v264 = (int)v262;
      uint64_t v262 = v167 + (int)v262;
      do
      {
        if (*(void *)v280 != v258) {
          objc_enumerationMutation(obj);
        }
        memset(&__p, 0, sizeof(__p));
        if (v259)
        {
          id v169 = [v269 objectAtIndexedSubscript:v264];
          std::string::basic_string[abi:ne180100]<0>(&buf, (char *)[v169 UTF8String]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = buf;
        }
        else
        {
          Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(&buf, a3, (uint64_t)v256 + 264);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = buf;
        }
        v267 = [v270 objectAtIndexedSubscript:v264];
        uint64_t v265 = [v260 objectAtIndexedSubscript:v264];
        uint64_t v170 = [v261 objectAtIndexedSubscript:v264];
        id v171 = v267;
        id v266 = v265;
        id v263 = v170;
        uint64_t v268 = v171;
        uint64_t v172 = [v171 objectForKeyedSubscript:@"ANEFModelProcedureID"];
        LODWORD(v170) = [v172 intValue];

        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v256 + 60, &__p, (long long **)&buf)+ 14) = v170;
        int v277 = [v268 objectForKeyedSubscript:@"ANEFModelInputSymbolIndexArray"];
        uint64_t v173 = [v268 objectForKeyedSubscript:@"ANEFModelOutputSymbolIndexArray"];
        if (v266) {
          uint64_t v174 = v266;
        }
        else {
          uint64_t v174 = (void *)MEMORY[0x1E4F1CBF0];
        }
        id v175 = v263;
        if (!v263) {
          id v175 = (id)MEMORY[0x1E4F1CBF0];
        }
        id v271 = v175;
        uint64_t v317 = 0;
        std::string __str = 0;
        int64_t v318 = 0;
        uint64_t v176 = objc_opt_new();
        long long v314 = 0u;
        long long v315 = 0u;
        memset(v313, 0, sizeof(v313));
        id v275 = v174;
        uint64_t v177 = [v275 countByEnumeratingWithState:v313 objects:&buf count:16];
        if (v177)
        {
          int v178 = 0;
          uint64_t v179 = **(void **)&v313[16];
          do
          {
            uint64_t v180 = 0;
            uint64_t v181 = v178;
            do
            {
              if (**(void **)&v313[16] != v179) {
                objc_enumerationMutation(v275);
              }
              std::string::basic_string[abi:ne180100]<0>(v307, (char *)[*(id *)(*(void *)&v313[8] + 8 * v180) UTF8String]);
              Espresso::ANECompilerEngine::ane_name_translator::espresso_name((std::string *)v328, v168, (uint64_t)v307);
              if ((v307[23] & 0x80000000) != 0) {
                operator delete(*(void **)v307);
              }
              vDSP_Length v182 = v317;
              if ((unint64_t)v317 >= v318)
              {
                int v184 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&__str, (uint64_t)v328);
              }
              else
              {
                if ((v328[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(v317, *(const std::string::value_type **)v328, *(std::string::size_type *)&v328[8]);
                }
                else
                {
                  long long v183 = *(_OWORD *)v328;
                  v317->__r_.__value_.__r.__words[2] = *(void *)&v328[16];
                  *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
                }
                int v184 = v182 + 1;
              }
              uint64_t v317 = v184;
              std::string::size_type v185 = [v277 objectAtIndexedSubscript:v181 + v180];
              [v176 addObject:v185];

              if ((v328[23] & 0x80000000) != 0) {
                operator delete(*(void **)v328);
              }
              ++v180;
            }
            while (v177 != v180);
            uint64_t v177 = [v275 countByEnumeratingWithState:v313 objects:&buf count:16];
            int v178 = v181 + v180;
          }
          while (v177);
        }

        *(void *)int v328 = &__p;
        uint64_t v186 = (std::string **)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v256 + 63, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v328)+ 7);
        if (v186 != &__str) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v186, __str, v317, 0xAAAAAAAAAAAAAAABLL * (((char *)v317 - (char *)__str) >> 3));
        }
        vDSP_Length v187 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v256 + 69, &__p, (uint64_t)&__p);
        objc_storeStrong((id *)v187 + 7, v176);
        uint64_t v311 = 0;
        v310 = 0;
        unint64_t v312 = 0;
        int v188 = objc_opt_new();
        long long v308 = 0u;
        long long v309 = 0u;
        memset(v307, 0, sizeof(v307));
        id v272 = v271;
        uint64_t v189 = [v272 countByEnumeratingWithState:v307 objects:v328 count:16];
        if (v189)
        {
          int v190 = 0;
          uint64_t v191 = **(void **)&v307[16];
          do
          {
            uint64_t v192 = 0;
            uint64_t v193 = v190;
            do
            {
              if (**(void **)&v307[16] != v191) {
                objc_enumerationMutation(v272);
              }
              id v194 = [*(id *)(*(void *)&v307[8] + 8 * v192) stringByReplacingOccurrencesOfString:@"@output" withString:&stru_1EE39BDB0];
              std::string::basic_string[abi:ne180100]<0>(v304, (char *)[v194 UTF8String]);
              Espresso::ANECompilerEngine::ane_name_translator::espresso_name(&__s, v168, (uint64_t)v304);
              if (v305 < 0) {
                operator delete(v304[0]);
              }
              int v195 = v311;
              if ((unint64_t)v311 >= v312)
              {
                int v197 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v310, (uint64_t)&__s);
              }
              else
              {
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v311, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v196 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  v311->__r_.__value_.__r.__words[2] = __s.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v195->__r_.__value_.__l.__data_ = v196;
                }
                int v197 = v195 + 1;
              }
              uint64_t v311 = v197;
              int v198 = [v173 objectAtIndexedSubscript:v193 + v192];
              [v188 addObject:v198];

              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s.__r_.__value_.__l.__data_);
              }

              ++v192;
            }
            while (v189 != v192);
            uint64_t v189 = [v272 countByEnumeratingWithState:v307 objects:v328 count:16];
            int v190 = v193 + v192;
          }
          while (v189);
        }

        v304[0] = &__p;
        uint64_t v199 = (std::string **)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v256 + 66, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v304)+ 7);
        if (v199 != &v310) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v199, v310, v311, 0xAAAAAAAAAAAAAAABLL * (((char *)v311 - (char *)v310) >> 3));
        }
        short float v200 = std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v256 + 72, &__p, (uint64_t)&__p);
        int v201 = v200[7];
        v200[7] = (uint64_t *)v188;

        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v310;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);

        v310 = (std::string *)&__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v310);

        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v264;
      }
      while (v264 != v262);
      uint64_t v167 = [obj countByEnumeratingWithState:&v279 objects:v319 count:16];
    }
    while (v167);
  }

  vDSP_Length v204 = Espresso::espresso_os_log_subsystem(v202, v203);
  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_1920CB000, v204, OS_LOG_TYPE_DEBUG, "[Espresso::ANERuntimeEngine::built]", (uint8_t *)&buf, 2u);
  }

  *((unsigned char *)v256 + 144) = 1;
  int v205 = (void *)*((void *)v256 + 23);
  if (!v205)
  {
    uint64_t v206 = objc_opt_new();
    uint64_t v207 = (void *)*((void *)v256 + 23);
    *((void *)v256 + 23) = v206;

    int v205 = (void *)*((void *)v256 + 23);
  }
  [v205 setObject:v254 forKeyedSubscript:v250];
  if (v251) {
    [*((id *)v256 + 24) setObject:v251 forKeyedSubscript:v250];
  }

  uint64_t v36 = v250;
LABEL_37:

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v295);
  if (v303) {
    nitro::nitro_function::nitro_function(v303);
  }
}

void sub_1921B43B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v72 - 217) < 0) {
    operator delete(*(void **)(v72 - 240));
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  if (SLOBYTE(STACK[0x3D7]) < 0) {
    operator delete((void *)STACK[0x3C0]);
  }
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  if (SLOBYTE(STACK[0x257]) < 0)
  {
    operator delete((void *)STACK[0x240]);

    if ((v68 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {

    if (!v68)
    {
LABEL_14:

      Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a64);
      if (STACK[0x208]) {
        nitro::nitro_function::nitro_function((std::__shared_weak_count *)STACK[0x208]);
      }
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v66);
  goto LABEL_14;
}

void Espresso::ANECompilerEngine::ane_name_translator::espresso_name(std::string *a1, uint64_t a2, uint64_t a3)
{
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(a2 + 8), (void *)a3))
  {
    uint64_t v6 = *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a2, &v10, (void *)a3);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    }
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 56);
      a1->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v7;
      return;
    }
    uint64_t v8 = *(const std::string::value_type **)(v6 + 56);
    std::string::size_type v9 = *(void *)(v6 + 64);
  }
  else
  {
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      a1->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
      return;
    }
    uint64_t v8 = *(const std::string::value_type **)a3;
    std::string::size_type v9 = *(void *)(a3 + 8);
  }

  std::string::__init_copy_ctor_external(a1, v8, v9);
}

uint64_t **std::__tree<std::__value_type<std::string,NSArray * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,NSArray * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,NSArray * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  long long v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        uint64_t v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2)) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      uint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    char v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    char v17 = 1;
    *char v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *uint64_t v8 = v11;
    int v13 = (uint64_t *)**a1;
    int64_t v14 = v11;
    if (v13)
    {
      *a1 = v13;
      int64_t v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1921B4F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::base_kernel>({block_pointer} {__strong})(std::shared_ptr<Espresso::abstract_context> const&,void const*,Espresso::compute_path)>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *((char *)a2 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *a2;
    }
    while (1)
    {
      while (1)
      {
        char v11 = (uint64_t **)v6;
        int64_t v14 = (const void *)v6[4];
        uint64_t v12 = v6 + 4;
        int v13 = v14;
        int v15 = *((char *)v12 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)v12 + 23);
        }
        else {
          size_t v16 = v12[1];
        }
        if (v15 >= 0) {
          char v17 = v12;
        }
        else {
          char v17 = v13;
        }
        if (v16 >= v9) {
          size_t v18 = v9;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v10, v17, v18);
        BOOL v20 = v9 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (!v20) {
          break;
        }
        uint64_t v6 = *v11;
        long long v7 = v11;
        if (!*v11) {
          goto LABEL_27;
        }
      }
      int v21 = memcmp(v17, v10, v18);
      BOOL v22 = v16 < v9;
      if (v21) {
        BOOL v22 = v21 < 0;
      }
      if (!v22) {
        return v11;
      }
      uint64_t v6 = v11[1];
      if (!v6)
      {
        long long v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    char v11 = a1 + 1;
LABEL_27:
    int v23 = operator new(0x50uLL);
    uint64_t v24 = (std::string *)(v23 + 4);
    BOOL v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v25, *((void *)v25 + 1));
    }
    else
    {
      long long v26 = *v25;
      v23[6] = *((void *)v25 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v26;
    }
    v23[7] = 0;
    char v23[8] = 0;
    v23[9] = 0;
    *int v23 = 0;
    v23[1] = 0;
    void v23[2] = v11;
    *long long v7 = v23;
    int v27 = (uint64_t *)**a1;
    uint64_t v28 = v23;
    if (v27)
    {
      *a1 = v27;
      uint64_t v28 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1921B50FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void *a2, _OWORD **a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    _OWORD v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    *int v8 = 0;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

id all_blob_names_from_ANEF_model_description(NSDictionary *a1, NSString *a2, NSString *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a1;
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  unint64_t v33 = v5;
  uint64_t v30 = v6;
  if (((NSString *)*MEMORY[0x1E4F4E128] != v5 || *MEMORY[0x1E4F4E130] != (void)v6)
    && ((NSString *)*MEMORY[0x1E4F4E150] != v5 || *MEMORY[0x1E4F4E158] != (void)v6))
  {
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("bad arguments");
  }
  uint64_t v29 = [(NSDictionary *)v28 objectForKeyedSubscript:*MEMORY[0x1E4F4E180]];
  uint64_t v9 = [(NSDictionary *)v28 objectForKeyedSubscript:v30];
  id v34 = (id)objc_opt_new();
  uint64_t v10 = [v29 count];
  unint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = MEMORY[0x1E4F1CBF0];
    uint64_t v13 = v10;
    do
    {
      [v34 addObject:v12];
      --v13;
    }
    while (v13);
  }
  unint64_t v32 = v11;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  obuint64_t j = v29;
  uint64_t v14 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v40;
    do
    {
      for (uint64_t i = 0; i != v14; ++i)
      {
        if (*(void *)v40 != v15) {
          objc_enumerationMutation(obj);
        }
        char v17 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        size_t v18 = [v17 objectForKeyedSubscript:*MEMORY[0x1E4F4E168]];
        unsigned int v19 = [v18 unsignedIntValue];

        if (v32 <= v19) {
          Espresso::throw_exception_selector<Espresso::generic_error,unsigned long,unsigned long>(v19, v32);
        }
        BOOL v20 = [v17 objectForKeyedSubscript:v33];
        int v21 = objc_opt_new();
        [v34 setObject:v21 atIndexedSubscript:v19];
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v22 = v20;
        uint64_t v23 = [v22 countByEnumeratingWithState:&v35 objects:v43 count:16];
        if (v23)
        {
          uint64_t v24 = *(void *)v36;
          do
          {
            for (uint64_t j = 0; j != v23; ++j)
            {
              if (*(void *)v36 != v24) {
                objc_enumerationMutation(v22);
              }
              long long v26 = objc_msgSend(v9, "objectAtIndexedSubscript:", objc_msgSend(*(id *)(*((void *)&v35 + 1) + 8 * j), "unsignedIntValue"));
              [v21 addObject:v26];
            }
            uint64_t v23 = [v22 countByEnumeratingWithState:&v35 objects:v43 count:16];
          }
          while (v23);
        }
      }
      uint64_t v14 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
    }
    while (v14);
  }

  return v34;
}

void sub_1921B5500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1921B5824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<Espresso::ANERuntimeEngine::surface_and_buffer>::resize(char **a1, unint64_t a2)
{
  BOOL v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    long long v7 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 40 * ((40 * v6 - 40) / 0x28) + 40);
      a1[1] = &v3[40 * ((40 * v6 - 40) / 0x28) + 40];
      return;
    }
    if (a2 > 0x666666666666666) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 5 * v10;
    uint64_t v12 = (char *)operator new(40 * v10);
    uint64_t v13 = &v12[40 * v5];
    uint64_t v14 = &v12[8 * v11];
    size_t v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(v13, v15);
    size_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v3 - 40);
        v3 -= 40;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        uint64_t v18 = *((void *)v3 + 2);
        unsigned char v13[24] = v3[24];
        *((void *)v13 + 2) = v18;
        uint64_t v19 = *((void *)v3 + 4);
        *((void *)v3 + 4) = 0;
        *((void *)v13 + 4) = v19;
      }
      while (v3 != v4);
      BOOL v20 = *a1;
      uint64_t v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v20)
      {
        do
        {
          v3 -= 40;
          std::allocator<Espresso::ANERuntimeEngine::surface_and_buffer>::destroy[abi:ne180100]((void **)v3);
        }
        while (v3 != v20);
        uint64_t v3 = v20;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    int v21 = &v4[40 * a2];
    while (v3 != v21)
    {
      v3 -= 40;
      std::allocator<Espresso::ANERuntimeEngine::surface_and_buffer>::destroy[abi:ne180100]((void **)v3);
    }
    a1[1] = v21;
  }
}

uint64_t Espresso::use_multiple_procedure_for_segments(uint64_t *a1)
{
  if (Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::onceToken != -1) {
    dispatch_once(&Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::onceToken, &__block_literal_global_388);
  }
  LODWORD(result) = Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(a1);
  if (Espresso::use_multiple_procedure_for_segments(std::shared_ptr<Espresso::net> const&)::ret) {
    return 1;
  }
  else {
    return result;
  }
}

BOOL Espresso::pass_multi_head_program_gen::is_network_multihead_multiprocedure(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v12, "multi_head_prune");
  if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(void **)(v2 + 480), &v12))
  {
    BOOL v7 = 1;
    goto LABEL_12;
  }
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "multi_head_prune");
  size_t v15 = __p;
  BOOL v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v3 + 472), __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
  unint64_t v5 = (unsigned __int8 *)v4 + 56;
  int v6 = *((char *)v4 + 79);
  if ((v6 & 0x80000000) == 0)
  {
    if (v6 != 1) {
      goto LABEL_9;
    }
LABEL_8:
    BOOL v7 = *v5 != 49;
    goto LABEL_10;
  }
  if (*((void *)v4 + 8) == 1)
  {
    unint64_t v5 = *(unsigned __int8 **)v5;
    goto LABEL_8;
  }
LABEL_9:
  BOOL v7 = 1;
LABEL_10:
  if (v11 < 0) {
    operator delete(__p[0]);
  }
LABEL_12:
  if (v14 < 0) {
    operator delete(v12);
  }
  Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(&v12, *a1);
  unint64_t v8 = v12;
  if (v13) {
    nitro::nitro_function::nitro_function(v13);
  }
  return v8 && v7;
}

void sub_1921B5BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_multi_head_program_gen>(void *a1, uint64_t a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((void *)(a2 + 1120), (uint64_t)&v8);
  if (!v3)
  {
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  BOOL v4 = v3;
  unint64_t v5 = (const void *)v3[3];
  int v6 = (std::__shared_weak_count *)v4[4];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5
  {
    *a1 = v7;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v6) {
      return;
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

id get_original_url_if_exists(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *a1;
  unint64_t v5 = (void *)(*a1 + 1024);
  if (*(char *)(*a1 + 1047) < 0) {
    unint64_t v5 = (void *)*v5;
  }
  int v6 = [NSString stringWithUTF8String:v5];
  BOOL v7 = resolve_url_from_net_properties_and_path(v4 + 472, v3, v6);

  return v7;
}

void sub_1921B5D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id resolve_url_from_net_properties_and_path(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = NSString;
  std::string::basic_string[abi:ne180100]<0>(v18, "experimental.ane.dev_op_override");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  Espresso::map_const_get<std::map<std::string,std::string>>(a1, (uint64_t)v18, (uint64_t)v16, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v9 = [v7 stringWithUTF8String:p_p];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  unint64_t v10 = [v5 path];
  char v11 = [v10 hasSuffix:@".hwx"];

  if ([v9 length]) {
    char v12 = v11;
  }
  else {
    char v12 = 1;
  }
  if (v12)
  {
    id v13 = v5;
  }
  else
  {
    char v14 = [v6 stringByAppendingPathComponent:v9];
    id v13 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v14];
  }

  return v13;
}

void sub_1921B5F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

id model_path_to_model_url(const char *a1)
{
  uint64_t v1 = [NSString stringWithUTF8String:a1];
  uint64_t v2 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v1];
  id v3 = [v2 path];

  uint64_t v4 = [v3 lastPathComponent];
  LODWORD(v1) = [v4 isEqualToString:@"model.espresso.net"];

  if (v1)
  {
    uint64_t v5 = [v3 stringByDeletingLastPathComponent];

    id v6 = (void *)v5;
  }
  else
  {
    id v6 = v3;
  }
  BOOL v7 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v6];
  unint64_t v8 = [v7 absoluteURL];

  return v8;
}

void sub_1921B6080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<std::shared_ptr<Espresso::net> const&,Espresso::net_compiler_segment_based::segment_t const&>>(uint64_t *a1, int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = a2;
  unint64_t v11 = a1[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (v11 <= a2) {
        unint64_t v5 = a2 % v11;
      }
    }
    else
    {
      unint64_t v5 = (v11 - 1) & a2;
    }
    id v13 = *(void ***)(*a1 + 8 * v5);
    if (v13)
    {
      char v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == a2)
          {
            if (*((_DWORD *)v14 + 4) == a2) {
              return v14;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v5) {
              break;
            }
          }
          char v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  char v14 = operator new(0x38uLL);
  *char v14 = 0;
  v14[1] = v10;
  *((_DWORD *)v14 + 4) = *a3;
  Espresso::four_cc_mapping_helper::four_cc_mapping_helper((uint64_t)(v14 + 3), a4, a5);
  size_t v16 = a1 + 2;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = a1[1];
    if (*(void *)&prime > v11) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          uint64_t v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          long long v26 = (void *)*v16;
          if (*v16)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v16;
            unint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_55;
                  }
                  *long long v26 = *v32;
                  void *v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  unint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_55:
                long long v26 = v32;
                unint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_59;
        }
        long long v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= v10) {
        unint64_t v5 = v10 % v11;
      }
      else {
        unint64_t v5 = v10;
      }
    }
    else
    {
      unint64_t v5 = (v11 - 1) & v10;
    }
  }
  uint64_t v34 = *a1;
  long long v35 = *(void **)(*a1 + 8 * v5);
  if (v35)
  {
    *char v14 = *v35;
LABEL_72:
    void *v35 = v14;
    goto LABEL_73;
  }
  *char v14 = *v16;
  *size_t v16 = v14;
  *(void *)(v34 + 8 * v5) = v16;
  if (*v14)
  {
    unint64_t v36 = *(void *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11) {
        v36 %= v11;
      }
    }
    else
    {
      v36 &= v11 - 1;
    }
    long long v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v14;
}

void sub_1921B64B4(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Espresso::four_cc_mapping_helper>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::four_cc_mapping_helper::four_cc_mapping_helper(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = *(uint64_t **)(a3 + 32);
  if (!v4) {
    goto LABEL_28;
  }
  unint64_t v29 = (uint64_t *)(a1 + 8);
  do
  {
    uint64_t v7 = *a2 + 136;
    uint8x8_t v30 = (long long *)(v4 + 2);
    unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)v4 + 16, &v30);
    uint64_t v9 = (const void *)*((void *)v8 + 5);
    if (v9)
    {
      if (v10)
      {
        unint64_t v11 = (std::__shared_weak_count *)*((void *)v8 + 6);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = v10[17] - v10[16];
        if ((unint64_t)v12 >= 8)
        {
          id v13 = v6;
          char v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v30, v4 + 2);
          unint64_t v15 = *v14;
          if (!*v14)
          {
            size_t v16 = v14;
            unint64_t v15 = operator new(0x48uLL);
            float v17 = (std::string *)(v15 + 4);
            if (*((char *)v4 + 39) < 0)
            {
              std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v4[2], v4[3]);
            }
            else
            {
              long long v18 = *((_OWORD *)v4 + 1);
              v15[6] = v4[4];
              *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
            }
            v15[7] = 0;
            v15[8] = 0;
            BOOL v19 = v30;
            *unint64_t v15 = 0;
            v15[1] = 0;
            std::locale v15[2] = v19;
            *size_t v16 = v15;
            uint64_t v20 = **(void **)a1;
            unint64_t v21 = v15;
            if (v20)
            {
              *(void *)a1 = v20;
              unint64_t v21 = *v16;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v21);
            ++*(void *)(a1 + 16);
          }
          v15[7] = v12 >> 2;
          v15[8] = 0;
          id v6 = v13;
        }
        if (v11) {
          nitro::nitro_function::nitro_function(v11);
        }
      }
    }
    uint64_t v4 = (uint64_t *)*v4;
  }
  while (v4);
  id v22 = *(uint64_t **)a1;
  if (*(uint64_t **)a1 == v29)
  {
LABEL_28:
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 1;
    do
    {
      v22[8] = v23;
      uint64_t v24 = (uint64_t *)v22[1];
      uint64_t v25 = v22;
      if (v24)
      {
        do
        {
          long long v26 = v24;
          uint64_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          long long v26 = (uint64_t *)v25[2];
          BOOL v27 = *v26 == (void)v25;
          uint64_t v25 = v26;
        }
        while (!v27);
      }
      v23 *= v22[7];
      id v22 = v26;
    }
    while (v26 != v29);
  }
  *(void *)(a1 + 24) = v23;
  return a1;
}

void sub_1921B66F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9)
{
  operator delete(v10);
  if (v9) {
    nitro::nitro_function::nitro_function(v9);
  }
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*a9);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::compiler::procedure_name_for_segment_and_configuration(std::string *a1, int __val, uint64_t a3)
{
  std::to_string(&v11, __val);
  unint64_t v5 = std::string::append(&v11, "@");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    unint64_t v8 = (const std::string::value_type *)a3;
  }
  else {
    unint64_t v8 = *(const std::string::value_type **)a3;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a3 + 8);
  }
  unint64_t v10 = std::string::append(&v12, v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1921B67F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void E5Common::MinimalCpu::MatchStatePatterns(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v17[0] = a1;
  v17[1] = a2;
  E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap(a2, (uint64_t)&v18);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  E5Common::MinimalCpu::Matcher::MatchReadState((E5Common::MinimalCpu::Matcher *)v17, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 5);
  uint64_t v4 = (char *)__p;
  if (__p)
  {
    unint64_t v5 = v16;
    long long v6 = __p;
    if (v16 != __p)
    {
      do
      {
        int v7 = (void *)*((void *)v5 - 3);
        if (v7)
        {
          *((void *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 32;
      }
      while (v5 != v4);
      long long v6 = __p;
    }
    size_t v16 = v4;
    operator delete(v6);
  }
  E5Common::MinimalCpu::Matcher::MatchWriteState((E5Common::MinimalCpu::Matcher *)v17, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 5);
  unint64_t v8 = (char *)__p;
  if (__p)
  {
    std::string::size_type v9 = v16;
    unint64_t v10 = __p;
    if (v16 != __p)
    {
      do
      {
        std::string v11 = (void *)*((void *)v9 - 3);
        if (v11)
        {
          *((void *)v9 - 2) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    size_t v16 = v8;
    operator delete(v10);
  }
  std::string v12 = (void **)v19;
  if (v19)
  {
    do
    {
      char v14 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      std::string v12 = v14;
    }
    while (v14);
  }
  id v13 = v18;
  long long v18 = 0;
  if (v13) {
    operator delete(v13);
  }
}

void sub_1921B6988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a9);
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v12);
  E5Common::MinimalCpu::Matcher::~Matcher((E5Common::MinimalCpu::Matcher *)&a12);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::MatchAllPatterns(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v25[0] = a1;
  v25[1] = a2;
  E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap(a2, (uint64_t)&v26);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  E5Common::MinimalCpu::Matcher::MatchInterleavedGather((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 5);
  uint64_t v4 = (char *)__p;
  if (__p)
  {
    unint64_t v5 = v24;
    long long v6 = __p;
    if (v24 != __p)
    {
      do
      {
        int v7 = (void *)*((void *)v5 - 3);
        if (v7)
        {
          *((void *)v5 - 2) = v7;
          operator delete(v7);
        }
        v5 -= 32;
      }
      while (v5 != v4);
      long long v6 = __p;
    }
    uint64_t v24 = v4;
    operator delete(v6);
  }
  E5Common::MinimalCpu::Matcher::MatchReadState((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 5);
  unint64_t v8 = (char *)__p;
  if (__p)
  {
    std::string::size_type v9 = v24;
    unint64_t v10 = __p;
    if (v24 != __p)
    {
      do
      {
        std::string v11 = (void *)*((void *)v9 - 3);
        if (v11)
        {
          *((void *)v9 - 2) = v11;
          operator delete(v11);
        }
        v9 -= 32;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    uint64_t v24 = v8;
    operator delete(v10);
  }
  E5Common::MinimalCpu::Matcher::MatchWriteState((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 5);
  std::string v12 = (char *)__p;
  if (__p)
  {
    id v13 = v24;
    char v14 = __p;
    if (v24 != __p)
    {
      do
      {
        unint64_t v15 = (void *)*((void *)v13 - 3);
        if (v15)
        {
          *((void *)v13 - 2) = v15;
          operator delete(v15);
        }
        v13 -= 32;
      }
      while (v13 != v12);
      char v14 = __p;
    }
    uint64_t v24 = v12;
    operator delete(v14);
  }
  E5Common::MinimalCpu::Matcher::MatchTensorToTensorBufferLoadingWeights((E5Common::MinimalCpu::Matcher *)v25, (uint64_t)&__p);
  std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>((void **)a3, *(void *)(a3 + 8), (uint64_t)__p, (uint64_t)v24, (v24 - (unsigned char *)__p) >> 5);
  size_t v16 = (char *)__p;
  if (__p)
  {
    float v17 = v24;
    long long v18 = __p;
    if (v24 != __p)
    {
      do
      {
        BOOL v19 = (void *)*((void *)v17 - 3);
        if (v19)
        {
          *((void *)v17 - 2) = v19;
          operator delete(v19);
        }
        v17 -= 32;
      }
      while (v17 != v16);
      long long v18 = __p;
    }
    uint64_t v24 = v16;
    operator delete(v18);
  }
  uint64_t v20 = (void **)v27;
  if (v27)
  {
    do
    {
      id v22 = (void **)*v20;
      if (*((char *)v20 + 39) < 0) {
        operator delete(v20[2]);
      }
      operator delete(v20);
      uint64_t v20 = v22;
    }
    while (v22);
  }
  unint64_t v21 = v26;
  long long v26 = 0;
  if (v21) {
    operator delete(v21);
  }
}

void sub_1921B6C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](&a9);
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v12);
  E5Common::MinimalCpu::Matcher::~Matcher((E5Common::MinimalCpu::Matcher *)&a12);
  _Unwind_Resume(a1);
}

unint64_t std::vector<E5Common::MinimalCpu::Match>::__insert_with_size[abi:ne180100]<std::__wrap_iter<E5Common::MinimalCpu::Match*>,std::__wrap_iter<E5Common::MinimalCpu::Match*>>(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = a2 - (void)*a1;
  unint64_t v7 = (unint64_t)*a1 + (v6 & 0xFFFFFFFFFFFFFFE0);
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v11 = v6 >> 5;
  char v14 = a1[2];
  uint64_t v12 = (uint64_t)(a1 + 2);
  id v13 = v14;
  unint64_t v15 = *(void *)(v12 - 8);
  if (a5 <= (uint64_t)&v14[-v15] >> 5)
  {
    uint64_t v20 = (uint64_t)(v15 - v7) >> 5;
    if (v20 >= a5)
    {
      uint64_t v21 = a3 + 32 * a5;
      uint64_t v23 = *(void *)(v12 - 8);
      unint64_t v24 = v7 + 32 * a5;
      unint64_t v25 = v15 - 32 * a5;
      uint64_t v26 = v23;
      if (v25 >= v15)
      {
LABEL_19:
        a1[1] = (void *)v26;
        if (v23 != v24)
        {
          uint64_t v27 = 0;
          uint64_t v28 = 32 * ((uint64_t)(v23 - v24) >> 5);
          unint64_t v29 = &v5[32 * v11 + v28];
          uint64_t v30 = -v28;
          do
          {
            uint64_t v31 = &v29[v27];
            uint64_t v32 = v23 + v27;
            uint64_t v34 = (void **)(v23 + v27 - 24);
            unint64_t v33 = *v34;
            *(_DWORD *)(v23 + v27 - 32) = *(_DWORD *)&v29[v27 - 32];
            if (v33)
            {
              *(void *)(v32 - 16) = v33;
              operator delete(v33);
              char *v34 = 0;
              *(void *)(v23 + v27 - 16) = 0;
              *(void *)(v23 + v27 - 8) = 0;
            }
            *(_OWORD *)uint64_t v34 = *(_OWORD *)(v31 - 24);
            *(void *)(v32 - 8) = *((void *)v31 - 1);
            *((void *)v31 - 3) = 0;
            *((void *)v31 - 2) = 0;
            *((void *)v31 - 1) = 0;
            v27 -= 32;
          }
          while (v30 != v27);
        }
        if (v21 != v9)
        {
          unint64_t v35 = v7;
          do
          {
            *(_DWORD *)unint64_t v35 = *(_DWORD *)v9;
            if (v9 != v35) {
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((void *)(v35 + 8), *(char **)(v9 + 8), *(char **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
            }
            v9 += 32;
            v35 += 32;
          }
          while (v9 != v21);
        }
        return v7;
      }
LABEL_17:
      uint64_t v26 = v23;
      do
      {
        *(_DWORD *)uint64_t v26 = *(_DWORD *)v25;
        *(void *)(v26 + 16) = 0;
        *(void *)(v26 + 24) = 0;
        *(void *)(v26 + 8) = 0;
        *(_OWORD *)(v26 + 8) = *(_OWORD *)(v25 + 8);
        *(void *)(v26 + 24) = *(void *)(v25 + 24);
        *(void *)(v25 + 8) = 0;
        *(void *)(v25 + 16) = 0;
        *(void *)(v25 + 24) = 0;
        v26 += 32;
        v25 += 32;
      }
      while (v25 < v15);
      goto LABEL_19;
    }
    uint64_t v21 = a3 + 32 * v20;
    uint64_t v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<E5Common::MinimalCpu::Match>,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*,E5Common::MinimalCpu::Match*>(v12, v21, a4, *(void *)(v12 - 8));
    uint64_t v23 = v22;
    a1[1] = (void *)v22;
    if ((uint64_t)(v15 - v7) >= 1)
    {
      unint64_t v24 = v7 + 32 * a5;
      unint64_t v25 = v22 - 32 * a5;
      uint64_t v26 = v22;
      if (v25 >= v15) {
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    return v7;
  }
  unint64_t v16 = a5 + ((uint64_t)(v15 - (void)v5) >> 5);
  if (v16 >> 59) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = v13 - v5;
  if (v17 >> 4 > v16) {
    unint64_t v16 = v17 >> 4;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v16;
  }
  uint64_t v57 = v5;
  uint64_t v58 = a1;
  if (v18)
  {
    if (v18 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v19 = (char *)operator new(32 * v18);
  }
  else
  {
    BOOL v19 = 0;
  }
  uint64_t v37 = 0;
  unint64_t v36 = &v19[32 * v11];
  long long v61 = &v19[32 * v18];
  uint64_t v59 = v11;
  uint64_t v60 = 32 * a5;
  long long v38 = &v36[32 * a5];
  do
  {
    long long v40 = v36;
    long long v41 = &v36[v37];
    int v42 = *(_DWORD *)(v9 + v37);
    *((void *)v41 + 1) = 0;
    *(_DWORD *)long long v41 = v42;
    *((void *)v41 + 2) = 0;
    *((void *)v41 + 3) = 0;
    uint64_t v44 = *(unsigned char **)(v9 + v37 + 8);
    uint64_t v43 = *(unsigned char **)(v9 + v37 + 16);
    int64_t v45 = v43 - v44;
    if (v43 != v44)
    {
      if (v45 < 0) {
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      }
      std::string::size_type v46 = (char *)operator new(v43 - v44);
      *((void *)v41 + 1) = v46;
      long long v39 = &v46[8 * (v45 >> 3)];
      *((void *)v41 + 2) = v46;
      *((void *)v41 + 3) = v39;
      memcpy(v46, v44, v45);
      *((void *)v41 + 2) = v39;
    }
    v37 += 32;
    unint64_t v36 = v40;
  }
  while (v60 != v37);
  uint64_t v47 = (char *)*v58;
  uint64_t v48 = v40;
  if (*v58 != (void *)v7)
  {
    uint64_t v49 = 32 * v59;
    uint64_t v50 = v57;
    do
    {
      std::string::size_type v51 = &v19[v49];
      long long v52 = &v50[v49];
      *((_DWORD *)v51 - 8) = *(_DWORD *)&v50[v49 - 32];
      *(_OWORD *)(v51 - 24) = *(_OWORD *)&v50[v49 - 24];
      *((void *)v51 - 1) = *(void *)&v50[v49 - 8];
      *((void *)v52 - 3) = 0;
      *((void *)v52 - 2) = 0;
      *((void *)v52 - 1) = 0;
      v19 -= 32;
      v50 -= 32;
    }
    while (&v50[v49] != v47);
    uint64_t v48 = &v19[32 * v59];
  }
  int v53 = v58[1];
  if (v53 != (void *)v7)
  {
    do
    {
      *(_DWORD *)long long v38 = *(_DWORD *)v7;
      *((void *)v38 + 2) = 0;
      *((void *)v38 + 3) = 0;
      *((void *)v38 + 1) = 0;
      *(_OWORD *)(v38 + 8) = *(_OWORD *)(v7 + 8);
      *((void *)v38 + 3) = *(void *)(v7 + 24);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      v38 += 32;
      v7 += 32;
    }
    while ((void *)v7 != v53);
    unint64_t v7 = (unint64_t)v58[1];
  }
  uint64_t v54 = *v58;
  *uint64_t v58 = v48;
  v58[1] = v38;
  v58[2] = v61;
  while ((void *)v7 != v54)
  {
    int v55 = *(void **)(v7 - 24);
    if (v55)
    {
      *(void *)(v7 - 16) = v55;
      operator delete(v55);
    }
    v7 -= 32;
  }
  if (v54) {
    operator delete(v54);
  }
  return (unint64_t)v36;
}

void sub_1921B7068(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1921B7070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  BOOL v19 = *(void **)(v16 + v17 + 8);
  if (v19)
  {
    *(void *)(v16 + v17 + 16) = v19;
    operator delete(v19);
  }
  a16 = v16 + v17;
  std::__split_buffer<E5Common::MinimalCpu::Match>::~__split_buffer((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::Matcher::MakeOutputNameToOpMap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    if (v4 >= (uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 4) {
      break;
    }
    uint64_t v6 = *(void *)(**(void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1) + 16 * v4);
    unint64_t v7 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    while (v8 != v9)
    {
      unint64_t v10 = *(MIL::IRNamedValueType **)v8;
      uint64_t v11 = *(std::__shared_weak_count **)(v8 + 8);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t Name = (long long *)MIL::IRNamedValueType::GetName(v10);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (uint64_t)Name, (uint64_t)&std::piecewise_construct, &Name)[5] = v4;
      if (v11)
      {
        if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v8 += 16;
    }
    ++v4;
  }
  return result;
}

void sub_1921B7248(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921B725C(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921B7270(_Unwind_Exception *a1)
{
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1921B7284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::unordered_map<std::string,std::pair<E5RT::SurfaceFormat,std::variant<vImage_Buffer,__CVBuffer *>>>::~unordered_map[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void E5Common::MinimalCpu::Matcher::MatchTensorToTensorBufferLoadingWeights(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(*(void *)this, *((void *)this + 1)))
  {
    int v8 = 3;
    id v3 = operator new(8uLL);
    *id v3 = 0;
    unint64_t v4 = v3 + 1;
    unint64_t v10 = v3 + 1;
    uint64_t v11 = v3 + 1;
    std::string __p = v3;
    unint64_t v5 = *(void *)(a2 + 8);
    if (v5 >= *(void *)(a2 + 16))
    {
      uint64_t v6 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)&v8);
      unint64_t v7 = __p;
      *(void *)(a2 + 8) = v6;
      if (v7)
      {
        unint64_t v10 = v7;
        operator delete(v7);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v5 = 3;
      *(void *)(v5 + 8) = v3;
      *(void *)(v5 + 16) = v4;
      *(void *)(v5 + 24) = v4;
      *(void *)(a2 + 8) = v5 + 32;
    }
  }
}

void sub_1921B7358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::IsTensorToTensorBufferLoadingWeights(uint64_t a1, uint64_t a2)
{
  id v3 = (MIL::IROperation ****)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  unint64_t v4 = (char *)**v3;
  if ((char *)(*v3)[1] - v4 != 16) {
    return 0;
  }
  unint64_t v5 = v3;
  uint64_t v6 = *(void *)v4;
  unint64_t v7 = (char *)operator new(0x19uLL);
  strcpy(v7, "tensor_to_tensor_buffer");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 24))(&__p, a1);
  int v8 = (char *)__p;
  uint64_t v9 = v44;
  if (__p == v44)
  {
    BOOL v13 = 0;
    if (!__p) {
      goto LABEL_30;
    }
LABEL_21:
    unint64_t v15 = (void **)v44;
    if (v44 == v8)
    {
      uint64_t v44 = v8;
      operator delete(v8);
      operator delete(v7);
      if (v13) {
        goto LABEL_31;
      }
    }
    else
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != (void **)v8);
      uint64_t v44 = v8;
      operator delete(__p);
      operator delete(v7);
      if (v13) {
        goto LABEL_31;
      }
    }
    return 0;
  }
  uint64_t v37 = v5;
  unint64_t v10 = (const std::string::value_type **)((char *)__p + 24);
  do
  {
    if (*((char *)v10 - 1) < 0)
    {
      std::string::__init_copy_ctor_external(&v41, *(v10 - 3), (std::string::size_type)*(v10 - 2));
    }
    else
    {
      long long v11 = *(_OWORD *)(v10 - 3);
      v41.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v10 - 1);
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    std::string::__init_copy_ctor_external(&v41, v7, 0x17uLL);
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v6 + 80))(&v41, v6);
    long long v12 = *(_OWORD *)&v41.__r_.__value_.__l.__data_;
    BOOL v13 = v38 == v41.__r_.__value_.__l.__data_;
    if (v41.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v41.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v12 + 1) + 16))(*((void *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      char v14 = v39;
      if (!v39) {
        goto LABEL_17;
      }
    }
    else
    {
      char v14 = v39;
      if (!v39) {
        goto LABEL_17;
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_17:
    if (v38 == (void *)v12) {
      break;
    }
    BOOL v36 = v10 == (const std::string::value_type **)v9;
    v10 += 3;
  }
  while (!v36);
  int v8 = (char *)__p;
  unint64_t v5 = v37;
  if (__p) {
    goto LABEL_21;
  }
LABEL_30:
  operator delete(v7);
  if (!v13) {
    return 0;
  }
LABEL_31:
  uint64_t v16 = ***v5;
  char v45 = 5;
  strcpy((char *)&__p, "input");
  uint64_t v17 = (*(uint64_t (**)(MIL::IROperation *, void **, void))(*(void *)v16 + 128))(v16, &__p, 0);
  uint64_t v18 = v17;
  if (v45 < 0)
  {
    operator delete(__p);
    if (v18) {
      goto LABEL_35;
    }
    return v18;
  }
  if (!v17) {
    return v18;
  }
LABEL_35:
  uint64_t v19 = MIL::IRValue::AsTensor((MIL::IRValue *)v18);
  if (!(*(uint64_t (**)(uint64_t))(*(void *)v19 + 96))(v19)) {
    return 0;
  }
  uint64_t OutputType = (MIL::IRValueType *)MIL::IROperation::GetOutputType(***v5);
  uint64_t v21 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
  uint64_t v22 = (E5Common::Utils *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v21);
  E5Common::Utils::GetConstantShape(v22, v23, (uint64_t)&__p);
  if (v46)
  {
    E5Common::Utils::GetConstantStrides(v22, (uint64_t)&v41);
    if (v42)
    {
      E5Common::Utils::GetConstantInterleaves(v22, (uint64_t)&v38);
      if (!v40) {
        goto LABEL_58;
      }
      int64_t v24 = v44 - (unsigned char *)__p;
      uint64_t v25 = (v44 - (unsigned char *)__p) >> 3;
      if ((unint64_t)(v25 - 4) < 0xFFFFFFFFFFFFFFFELL || v24 == 24 && *((void *)__p + 1) != 1) {
        goto LABEL_58;
      }
      uint64_t v26 = (std::__shared_weak_count *)v38;
      uint64_t v27 = *(unsigned __int8 *)v38;
      if (v27 == 1)
      {
        uint64_t v18 = 0;
        goto LABEL_60;
      }
      uint64_t v29 = v25 - 1;
      uint64_t v30 = *(void *)(v41.__r_.__value_.__r.__words[0] + 8 * (v25 - 1));
      if (v30 == v27
        && (uint64_t v31 = v25 - 2,
            uint64_t v32 = *(void *)(v41.__r_.__value_.__r.__words[0] + 8 * v31),
            v32 == *((void *)__p + v29) * v30)
        && (v24 != 24 || *(void *)v41.__r_.__value_.__l.__data_ == *((void *)__p + v31) * v32))
      {
        uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
        uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 24))(v33);
        int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 88))(v34);
        BOOL v36 = v35 == 9 || (v35 & 0xFFFFFFFE) == 4;
        uint64_t v18 = v36;
      }
      else
      {
LABEL_58:
        uint64_t v18 = 0;
      }
      uint64_t v26 = (std::__shared_weak_count *)v38;
      if (v38)
      {
LABEL_60:
        long long v39 = v26;
        operator delete(v26);
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    if (v41.__r_.__value_.__r.__words[0])
    {
      v41.__r_.__value_.__l.__size_ = v41.__r_.__value_.__r.__words[0];
      operator delete(v41.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (__p)
  {
    uint64_t v44 = (char *)__p;
    operator delete(__p);
  }
  return v18;
}

void sub_1921B78CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = a15;
    if (!a15)
    {
LABEL_3:
      uint64_t v29 = a22;
      if (!a22) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(v29);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v28 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v28);
  uint64_t v29 = a22;
  if (!a22) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t E5Common::MinimalCpu::Matcher::MatchInterleavedGather@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = 0;
  unint64_t v4 = (void *)((char *)this + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    if (v3 >= (uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 4) {
      return result;
    }
    *((unsigned char *)&v83.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v83, "gather_nd");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((void **)this, v3, (uint64_t)&v83)) {
      goto LABEL_2;
    }
    uint64_t v6 = *(void *)(**(void **)(*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1))
                   + 16 * v3);
    *((unsigned char *)&v83.__r_.__value_.__s + 23) = 10;
    strcpy((char *)&v83, "batch_dims");
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(v6 + 64) + 48))();
    int v8 = (MIL::IRValue *)v7;
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v83.__r_.__value_.__l.__data_);
      if (!v8) {
        goto LABEL_10;
      }
    }
    else if (!v7)
    {
      goto LABEL_10;
    }
    MIL::IRValue::AsTensor(v8);
    if (MIL::IRValue::GetScalar<int>()) {
      goto LABEL_2;
    }
LABEL_10:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 1;
    LOWORD(__p.__r_.__value_.__l.__data_) = 120;
    uint64_t v9 = *(void *)(**(void **)(*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1))
                   + 16 * v3);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, std::string *, void))(*(void *)v9 + 120))(v9, &__p, 0);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        v83.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v11;
      }
    }
    else
    {
      *((unsigned char *)&v83.__r_.__value_.__s + 23) = 0;
      v83.__r_.__value_.__s.__data_[0] = 0;
    }
    long long v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4, (uint64_t)&v83);
    if (v12)
    {
      uint64_t v13 = v12[5];
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v13 = -1;
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }
    operator delete(v83.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_22:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13 == -1) {
        goto LABEL_2;
      }
      goto LABEL_23;
    }
LABEL_18:
    if (v13 == -1) {
      goto LABEL_2;
    }
LABEL_23:
    char v14 = (char *)operator new(0x19uLL);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = xmmword_192DBD8E0;
    strcpy(v14, "tensor_buffer_to_tensor");
    BOOL v15 = E5Common::MinimalCpu::Matcher::OpTypeIs((void **)this, v13, (uint64_t)&v83);
    operator delete(v14);
    if (!v15) {
      goto LABEL_2;
    }
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 5;
    strcpy((char *)&__p, "input");
    (*(void (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    ParameterType = (const MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
    E5Common::MinimalCpu::Matcher::TensorBufferInterleaveFactors(ParameterType, (uint64_t)&v83);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v84) {
        goto LABEL_2;
      }
    }
    else if (!v84)
    {
      goto LABEL_2;
    }
    uint64_t v18 = (void *)v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__r.__words[0] == v83.__r_.__value_.__l.__size_) {
      goto LABEL_86;
    }
    std::string::size_type v19 = v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0];
    if (v83.__r_.__value_.__l.__size_ - v83.__r_.__value_.__r.__words[0] < 8)
    {
      unsigned int v20 = 1;
      uint64_t v21 = (unsigned __int8 *)v83.__r_.__value_.__r.__words[0];
      goto LABEL_42;
    }
    if (v19 >= 0x20)
    {
      v23.i64[0] = 0x100000001;
      v23.i64[1] = 0x100000001;
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFFFE0;
      v24.i64[0] = 0x100000001;
      v24.i64[1] = 0x100000001;
      uint64_t v25 = (int8x16_t *)(v83.__r_.__value_.__r.__words[0] + 16);
      unint64_t v26 = v19 & 0xFFFFFFFFFFFFFFE0;
      v27.i64[0] = 0x100000001;
      v27.i64[1] = 0x100000001;
      v28.i64[0] = 0x100000001;
      v28.i64[1] = 0x100000001;
      v29.i64[0] = 0x100000001;
      v29.i64[1] = 0x100000001;
      v30.i64[0] = 0x100000001;
      v30.i64[1] = 0x100000001;
      v31.i64[0] = 0x100000001;
      v31.i64[1] = 0x100000001;
      v32.i64[0] = 0x100000001;
      v32.i64[1] = 0x100000001;
      do
      {
        int8x16_t v33 = v25[-1];
        int32x4_t v27 = vmulq_s32(v27, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_192DAD400));
        int32x4_t v24 = vmulq_s32(v24, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_192DAD3F0));
        int32x4_t v23 = vmulq_s32(v23, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_192DAD3E0));
        int32x4_t v28 = vmulq_s32(v28, (int32x4_t)vqtbl1q_s8(v33, (int8x16_t)xmmword_192DAD410));
        int32x4_t v31 = vmulq_s32(v31, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_192DAD400));
        int32x4_t v30 = vmulq_s32(v30, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_192DAD3F0));
        int32x4_t v29 = vmulq_s32(v29, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_192DAD3E0));
        int32x4_t v32 = vmulq_s32(v32, (int32x4_t)vqtbl1q_s8(*v25, (int8x16_t)xmmword_192DAD410));
        v25 += 2;
        v26 -= 32;
      }
      while (v26);
      int32x4_t v17 = vmulq_s32(v30, v24);
      int8x16_t v34 = (int8x16_t)vmulq_s32(vmulq_s32(vmulq_s32(v29, v23), vmulq_s32(v31, v27)), vmulq_s32(v17, vmulq_s32(v32, v28)));
      *(int32x2_t *)v34.i8 = vmul_s32(*(int32x2_t *)v34.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
      unsigned int v20 = v34.i32[0] * v34.i32[1];
      if (v19 == v22) {
        goto LABEL_43;
      }
      if ((v19 & 0x18) == 0)
      {
        uint64_t v21 = (unsigned __int8 *)(v83.__r_.__value_.__r.__words[0] + v22);
        do
        {
LABEL_42:
          int v42 = *v21++;
          v20 *= v42;
        }
        while (v21 != (unsigned __int8 *)v83.__r_.__value_.__l.__size_);
        goto LABEL_43;
      }
    }
    else
    {
      unint64_t v22 = 0;
      unsigned int v20 = 1;
    }
    uint64_t v21 = (unsigned __int8 *)(v83.__r_.__value_.__r.__words[0] + (v19 & 0xFFFFFFFFFFFFFFF8));
    v35.i64[0] = 0x100000001;
    v35.i64[1] = 0x100000001;
    v36.i64[1] = 0x100000001;
    v36.i64[0] = v20 | 0x100000000;
    uint64_t v37 = (uint64_t *)(v83.__r_.__value_.__r.__words[0] + v22);
    unint64_t v38 = v22 - (v19 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v39 = *v37++;
      v17.i64[0] = v39;
      int32x4_t v40 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_192DAD3E0);
      int32x4_t v17 = (int32x4_t)vqtbl1q_s8((int8x16_t)v17, (int8x16_t)xmmword_192DAD3F0);
      int32x4_t v35 = vmulq_s32(v35, v17);
      int32x4_t v36 = vmulq_s32(v36, v40);
      v38 += 8;
    }
    while (v38);
    int8x16_t v41 = (int8x16_t)vmulq_s32(v36, v35);
    *(int32x2_t *)v41.i8 = vmul_s32(*(int32x2_t *)v41.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    unsigned int v20 = v41.i32[0] * v41.i32[1];
    if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_42;
    }
LABEL_43:
    if (v20 == 1) {
      goto LABEL_86;
    }
    HIBYTE(v79[1]) = 7;
    strcpy((char *)&v78, "indices");
    uint64_t v43 = *(void *)(**(void **)(*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1))
                    + 16 * v3);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)v43 + 120))(v43, &v78, 0);
    if (v44)
    {
      if (*(char *)(v44 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v44, *(void *)(v44 + 8));
      }
      else
      {
        long long v45 = *(_OWORD *)v44;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
      }
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
    }
    char v46 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v4, (uint64_t)&__p);
    if (v46)
    {
      uint64_t v47 = v46[5];
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v47 = -1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_51:
        if ((SHIBYTE(v79[1]) & 0x80000000) == 0) {
          goto LABEL_52;
        }
        goto LABEL_56;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v79[1]) & 0x80000000) == 0)
    {
LABEL_52:
      if (v47 == -1) {
        goto LABEL_86;
      }
      goto LABEL_57;
    }
LABEL_56:
    operator delete(v78);
    if (v47 == -1) {
      goto LABEL_86;
    }
LABEL_57:
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&__p, "transpose");
    if (E5Common::MinimalCpu::Matcher::OpTypeIs((void **)this, v47, (uint64_t)&__p))
    {
      HIBYTE(v79[1]) = 1;
      LOWORD(v78) = 120;
      (*(void (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
      uint64_t v48 = (const MIL::IRValueType *)MIL::IROperation::TryGetParameterType();
      E5Common::MinimalCpu::Matcher::TensorShape(v48, (uint64_t)&__p);
      if (SHIBYTE(v79[1]) < 0)
      {
        operator delete(v78);
        if (v82)
        {
LABEL_62:
          uint64_t v49 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          {
            if (*(void *)__p.__r_.__value_.__l.__data_ == 1) {
              goto LABEL_79;
            }
          }
          else
          {
            std::string::size_type v50 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] - 8;
            if (v50 < 0x38)
            {
              int v51 = 1;
              long long v52 = (int *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_70;
            }
            uint64_t v53 = (v50 >> 3) + 1;
            long long v52 = (int *)(__p.__r_.__value_.__r.__words[0] + 8 * (v53 & 0x3FFFFFFFFFFFFFF8));
            uint64_t v54 = (int32x4_t *)(__p.__r_.__value_.__r.__words[0] + 32);
            v55.i64[0] = 0x100000001;
            v55.i64[1] = 0x100000001;
            uint64_t v56 = v53 & 0x3FFFFFFFFFFFFFF8;
            v57.i64[0] = 0x100000001;
            v57.i64[1] = 0x100000001;
            do
            {
              int32x4_t v59 = v54[-2];
              int32x4_t v58 = v54[-1];
              int32x4_t v61 = *v54;
              int32x4_t v60 = v54[1];
              v54 += 4;
              int32x4_t v55 = vmulq_s32(v55, vuzp1q_s32(v59, v58));
              int32x4_t v57 = vmulq_s32(v57, vuzp1q_s32(v61, v60));
              v56 -= 8;
            }
            while (v56);
            int8x16_t v62 = (int8x16_t)vmulq_s32(v57, v55);
            *(int32x2_t *)v62.i8 = vmul_s32(*(int32x2_t *)v62.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
            int v51 = v62.i32[0] * v62.i32[1];
            if (v53 != (v53 & 0x3FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_70:
                int v63 = *v52;
                v52 += 2;
                v51 *= v63;
              }
              while (v52 != (int *)__p.__r_.__value_.__l.__size_);
            }
            uint64_t v64 = v51;
            std::string::size_type v65 = __p.__r_.__value_.__r.__words[0] + 8;
            if (__p.__r_.__value_.__r.__words[0] + 8 == __p.__r_.__value_.__l.__size_)
            {
              if (*(void *)__p.__r_.__value_.__l.__data_ == v64) {
                goto LABEL_79;
              }
            }
            else
            {
              unint64_t v66 = *(void *)__p.__r_.__value_.__l.__data_;
              uint64_t v67 = (void *)__p.__r_.__value_.__r.__words[0];
              int v68 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
              do
              {
                unint64_t v70 = *v68++;
                unint64_t v69 = v70;
                BOOL v71 = v66 >= v70;
                if (v66 <= v70) {
                  unint64_t v66 = v69;
                }
                if (!v71) {
                  uint64_t v67 = (void *)v65;
                }
                std::string::size_type v65 = (std::string::size_type)v68;
              }
              while (v68 != (unint64_t *)__p.__r_.__value_.__l.__size_);
              if (*v67 == v64)
              {
LABEL_79:
                uint64_t v76 = (void *)__p.__r_.__value_.__r.__words[0];
                LODWORD(v78) = 0;
                uint64_t v72 = operator new(0x18uLL);
                v79[1] = v72 + 3;
                long long v80 = v72 + 3;
                *uint64_t v72 = v13;
                v72[1] = v47;
                _OWORD v72[2] = v3;
                v79[0] = v72;
                unint64_t v73 = *(void *)(a2 + 8);
                if (v73 >= *(void *)(a2 + 16))
                {
                  int v74 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)&v78);
                  BOOL v75 = v79[0];
                  *(void *)(a2 + 8) = v74;
                  if (v75)
                  {
                    v79[1] = v75;
                    operator delete(v75);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v73 = 0;
                  *(void *)(v73 + 16) = 0;
                  *(void *)(v73 + 24) = 0;
                  *(void *)(v73 + 8) = 0;
                  *(_OWORD *)(v73 + 8) = *(_OWORD *)v79;
                  *(void *)(v73 + 24) = v80;
                  *(void *)(a2 + 8) = v73 + 32;
                }
                uint64_t v49 = v76;
              }
            }
          }
          if (v49) {
            operator delete(v49);
          }
        }
      }
      else if (v82)
      {
        goto LABEL_62;
      }
    }
LABEL_86:
    if (v18) {
      operator delete(v18);
    }
LABEL_2:
    ++v3;
  }
}

void sub_1921B823C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  if (v30)
  {
    operator delete(v30);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](a10);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::Matcher::MatchReadState@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    if (v4 >= (uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 4) {
      return result;
    }
    v10[23] = 10;
    strcpy(v10, "read_state");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((void **)this, v4, (uint64_t)v10)) {
      goto LABEL_2;
    }
    *(_DWORD *)uint64_t v10 = 1;
    uint64_t v6 = operator new(8uLL);
    *(void *)&unsigned char v10[8] = v6;
    *uint64_t v6 = v4;
    *(void *)&v10[16] = v6 + 1;
    long long v11 = v6 + 1;
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >= *(void *)(a2 + 16))
    {
      int v8 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)v10);
      uint64_t v9 = *(void **)&v10[8];
      *(void *)(a2 + 8) = v8;
      if (v9)
      {
        *(void *)&v10[16] = v9;
        operator delete(v9);
      }
LABEL_2:
      ++v4;
    }
    else
    {
      *(_DWORD *)unint64_t v7 = 1;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 8) = 0;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)&v10[8];
      *(void *)(v7 + 24) = v11;
      *(void *)(a2 + 8) = v7 + 32;
      ++v4;
    }
  }
}

void sub_1921B84C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t E5Common::MinimalCpu::Matcher::MatchWriteState@<X0>(E5Common::MinimalCpu::Matcher *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
    if (v4 >= (uint64_t)(*(void *)(*(void *)result + 8) - **(void **)result) >> 4) {
      return result;
    }
    v10[23] = 11;
    strcpy(v10, "write_state");
    if (!E5Common::MinimalCpu::Matcher::OpTypeIs((void **)this, v4, (uint64_t)v10)) {
      goto LABEL_2;
    }
    *(_DWORD *)uint64_t v10 = 2;
    uint64_t v6 = operator new(8uLL);
    *(void *)&unsigned char v10[8] = v6;
    *uint64_t v6 = v4;
    *(void *)&v10[16] = v6 + 1;
    long long v11 = v6 + 1;
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >= *(void *)(a2 + 16))
    {
      int v8 = std::vector<E5Common::MinimalCpu::Match>::__push_back_slow_path<E5Common::MinimalCpu::Match>((void **)a2, (uint64_t)v10);
      uint64_t v9 = *(void **)&v10[8];
      *(void *)(a2 + 8) = v8;
      if (v9)
      {
        *(void *)&v10[16] = v9;
        operator delete(v9);
      }
LABEL_2:
      ++v4;
    }
    else
    {
      *(_DWORD *)unint64_t v7 = 2;
      *(void *)(v7 + 16) = 0;
      *(void *)(v7 + 24) = 0;
      *(void *)(v7 + 8) = 0;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)&v10[8];
      *(void *)(v7 + 24) = v11;
      *(void *)(a2 + 8) = v7 + 32;
      ++v4;
    }
  }
}

void sub_1921B864C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
    _Unwind_Resume(a1);
  }
  std::vector<E5Common::MinimalCpu::Match>::~vector[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

BOOL E5Common::MinimalCpu::Matcher::OpTypeIs(void **a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void **__return_ptr))(**a1 + 24))(&__p);
  uint64_t v6 = (char *)__p;
  unint64_t v7 = v23;
  if (__p == v23)
  {
    BOOL v13 = 0;
    if (__p) {
      goto LABEL_25;
    }
    return v13;
  }
  int v8 = (const std::string::value_type **)((char *)__p + 24);
  uint64_t v9 = 16 * a2;
  do
  {
    if (*((char *)v8 - 1) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(v8 - 3), (std::string::size_type)*(v8 - 2));
    }
    else
    {
      long long v10 = *(_OWORD *)(v8 - 3);
      v21.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v8 - 1);
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
    }
    MIL::MILContext::GetOpset();
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        std::string v21 = *(std::string *)a3;
        goto LABEL_11;
      }
    }
    else if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
LABEL_11:
    MIL::IROpset::TryGetOperatorSharedPtr();
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    long long v11 = (void **)(*(uint64_t (**)(void *))(*a1[1] + 56))(a1[1]);
    (*(void (**)(std::string *__return_ptr))(**(void **)(**v11 + v9) + 80))(&v21);
    long long v12 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
    BOOL v13 = v19 == v21.__r_.__value_.__r.__words[0];
    if (v21.__r_.__value_.__l.__size_
      && !atomic_fetch_add((atomic_ullong *volatile)(v21.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v12 + 1) + 16))(*((void *)&v12 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v12 + 1));
      char v14 = v20;
      if (!v20) {
        goto LABEL_19;
      }
    }
    else
    {
      char v14 = v20;
      if (!v20) {
        goto LABEL_19;
      }
    }
    if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_19:
    if (v19 == (void)v12) {
      break;
    }
    BOOL v15 = v8 == (const std::string::value_type **)v7;
    v8 += 3;
  }
  while (!v15);
  uint64_t v6 = (char *)__p;
  if (!__p) {
    return v13;
  }
LABEL_25:
  uint64_t v16 = (void **)v23;
  int32x4_t v17 = v6;
  if (v23 != v6)
  {
    do
    {
      if (*((char *)v16 - 1) < 0) {
        operator delete(*(v16 - 3));
      }
      v16 -= 3;
    }
    while (v16 != (void **)v6);
    int32x4_t v17 = __p;
  }
  int32x4_t v23 = v6;
  operator delete(v17);
  return v13;
}

void sub_1921B892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1921B8940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1921B8954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void E5RT::E5CompilerOptions::~E5CompilerOptions(E5RT::E5CompilerOptions *this)
{
  E5RT::ConfigOptions::~ConfigOptions(this);

  JUMPOUT(0x192FF16B0);
}

void E5RT::ConfigOptions::~ConfigOptions(E5RT::ConfigOptions *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324828;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324828;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EE324828;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x192FF16B0);
}

uint64_t e5rt_tensor_desc_dtype_release(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v3[0] = &unk_1EE398B78;
  v3[1] = a1;
  unint64_t v4 = v3;
  uint64_t v1 = E5RT::ExceptionSafeExecute((uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return v1;
}

void sub_1921B8B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t e5rt_tensor_desc_retain_dtype(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EE399318;
  v4[1] = a1;
  v4[2] = a2;
  uint64_t v5 = v4;
  uint64_t v2 = E5RT::ExceptionSafeExecute((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return v2;
}

void sub_1921B8C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::function<e5rt_error_code_t ()(void)>::~function((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(Espresso::ANERuntimeEngine::compiler *this)
{
  v85[12] = *MEMORY[0x1E4F143B8];
  BOOL v71 = 0;
  uint64_t v72 = 0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v1
    || (uint64_t v72 = std::__shared_weak_count::lock(v1)) == 0
    || (v2 = (Espresso::net *)*((void *)this + 1), (BOOL v71 = v2) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *((void *)this + 52) = *((void *)this + 51);
  BOOL should_do_ane_blob_aliasing = Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing(this, v2);
  if (should_do_ane_blob_aliasing)
  {
    *(void *)char v82 = &unk_1EE3500B0;
    unint64_t v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE388618;
    v4[1].__shared_weak_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE35F440;
    v4[1].__shared_owners_ = 0x100000002;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&v82[8] = v4 + 1;
    std::string v83 = v4;
    nitro::nitro_function::nitro_function(v4);
    Espresso::pass_graph_coloring::run_on_network((Espresso::pass_graph_coloring *)v82, v71, (uint64_t)v69);
    if (v70) {
      nitro::nitro_function::nitro_function(v70);
    }
    nitro::nitro_function::nitro_function(v4);
    *(void *)char v82 = &unk_1EE3719B0;
    if (v83) {
      nitro::nitro_function::nitro_function(v83);
    }
  }
  char v5 = 0;
  uint64_t v6 = 0;
  __int16 v68 = 1;
  obuint64_t j = should_do_ane_blob_aliasing;
  do
  {
    char v7 = v69[v6 - 2];
    char v63 = v5;
    long long v73 = 0u;
    long long v74 = 0u;
    LODWORD(v75) = 1065353216;
    *(void *)std::string buf = this;
    *(void *)&buf[8] = &v73;
    uint8_t buf[16] = v7;
    buf[17] = should_do_ane_blob_aliasing;
    long long v80 = &v71;
    uint64_t v9 = *((void *)this + 4);
    uint64_t v8 = *((void *)this + 5);
    uint64_t v66 = v8;
    while (v9 != v8)
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)v82, v9 + 16);
      std::unordered_set<std::string>::unordered_set((uint64_t)v85, v9 + 56);
      char v10 = 0;
      uint64_t v11 = 0;
      do
      {
        char v12 = v10;
        for (uint64_t i = *(uint64_t **)&v82[40 * v11 + 16]; i; uint64_t i = (uint64_t *)*i)
        {
          uint64_t v81 = (long long *)(i + 2);
          char v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v71 + 136, (unsigned __int8 *)i + 16, &v81);
          BOOL v15 = (const void *)*((void *)v14 + 5);
          if (v15
          {
            int32x4_t v17 = (std::__shared_weak_count *)*((void *)v14 + 6);
            int v77 = (uint8_t *)v16;
            char v78 = v17;
            if (v17) {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            int v77 = 0;
            char v78 = 0;
          }
          Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()((uint64_t)buf, (uint64_t)(i + 2), (std::string::size_type *)&v77);
          if (v78) {
            nitro::nitro_function::nitro_function(v78);
          }
        }
        char v10 = 1;
        uint64_t v11 = 1;
      }
      while ((v12 & 1) == 0);
      for (uint64_t j = 40; j != -40; j -= 40)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v82[j]);
      v9 += 120;
      uint64_t v8 = v66;
    }
    std::string v83 = 0;
    memset(v82, 0, sizeof(v82));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v82, *((void *)v71 + 80), *((void *)v71 + 81), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v71 + 81) - *((void *)v71 + 80)) >> 3));
    v84[1] = 0;
    v85[0] = 0;
    v84[0] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v84, *((void *)v71 + 83), *((void *)v71 + 84), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v71 + 84) - *((void *)v71 + 83)) >> 3));
    char v19 = 0;
    uint64_t v20 = 0;
    do
    {
      char v21 = v19;
      unint64_t v22 = &v82[24 * v20];
      int32x4_t v24 = *(long long **)v22;
      int32x4_t v23 = (long long *)*((void *)v22 + 1);
      while (v24 != v23)
      {
        uint64_t v81 = v24;
        uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v71 + 136, (unsigned __int8 *)v24, &v81);
        unint64_t v26 = (const void *)*((void *)v25 + 5);
        if (v26
        {
          int32x4_t v28 = (std::__shared_weak_count *)*((void *)v25 + 6);
          int v77 = (uint8_t *)v27;
          char v78 = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          int32x4_t v28 = 0;
          int v77 = 0;
          char v78 = 0;
        }
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v73, (uint64_t)v24))Espresso::ANERuntimeEngine::compiler::force_allocate_blobs(void)::$_0::operator()((uint64_t)buf, (uint64_t)v24, (std::string::size_type *)&v77); {
        if (v28)
        }
          nitro::nitro_function::nitro_function(v28);
        int32x4_t v24 = (long long *)((char *)v24 + 24);
      }
      char v19 = 1;
      uint64_t v20 = 1;
    }
    while ((v21 & 1) == 0);
    for (uint64_t k = 24; k != -24; k -= 24)
    {
      int v77 = &v82[k];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    }
    int32x4_t v30 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v73);
    char v5 = 1;
    uint64_t v6 = 1;
    LOBYTE(should_do_ane_blob_aliasing) = obj;
  }
  while ((v63 & 1) == 0);
  if (v71)
  {
    uint64_t v32 = *((void *)v71 + 155);
    if (v32)
    {
      int8x16_t v33 = *(unsigned char **)(v32 + 1048);
      if (v33)
      {
        if ((*v33 & 2) != 0)
        {
          int8x16_t v34 = Espresso::espresso_os_log_subsystem(v30, v31);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v56 = [*((id *)this + 27) count];
            *(_DWORD *)char v82 = 134217984;
            *(void *)&v82[4] = v56;
            _os_log_debug_impl(&dword_1920CB000, v34, OS_LOG_TYPE_DEBUG, "Espresso::ANERuntimeEngine::allocate_analytics_buffers: Allocated %lu analytics buffers", v82, 0xCu);
          }

          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          id obja = *((id *)this + 27);
          uint64_t v35 = [obja countByEnumeratingWithState:&v73 objects:v82 count:16];
          if (v35)
          {
            uint64_t v37 = *(void *)v74;
            uint64_t v67 = *MEMORY[0x1E4F2F2C0];
            uint64_t v65 = *MEMORY[0x1E4F2F0E8];
            uint64_t v64 = *MEMORY[0x1E4F2EFE0];
            CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            *(void *)&long long v36 = 138412546;
            long long v58 = v36;
            while (2)
            {
              for (uint64_t m = 0; m != v35; ++m)
              {
                if (*(void *)v74 != v37) {
                  objc_enumerationMutation(obja);
                }
                uint64_t v39 = *(long long **)(*((void *)&v73 + 1) + 8 * m);
                int32x4_t v40 = objc_msgSend(*((id *)this + 27), "objectForKey:", v39, v58);
                int8x16_t v41 = (Espresso *)[v40 intValue];
                if ((int)v41 >= 1)
                {
                  uint64_t v43 = Espresso::espresso_os_log_subsystem(v41, v42);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)std::string buf = v58;
                    *(void *)&uint8_t buf[4] = v39;
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v40;
                    _os_log_debug_impl(&dword_1920CB000, v43, OS_LOG_TYPE_DEBUG, "Espresso::ANERuntimeEngine::allocate_analytics_buffers: segment:\"%@\" AnalyticsBufferSize=%@Bytes", buf, 0x16u);
                  }

                  uint64_t v44 = (void *)[MEMORY[0x1E4F1CC08] mutableCopy];
                  [v44 setObject:&unk_1EE3AEFC8 forKeyedSubscript:v67];
                  [v44 setObject:v40 forKeyedSubscript:v65];
                  [v44 setObject:&unk_1EE3AEFC8 forKeyedSubscript:v64];
                  CFDictionaryRef Copy = CFDictionaryCreateCopy(allocator, (CFDictionaryRef)v44);
                  IOSurfaceRef v46 = IOSurfaceCreate(Copy);
                  CFRelease(Copy);
                  if (!v46)
                  {
                    uint64_t v54 = Espresso::espresso_os_log_subsystem(v47, v48);
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)std::string buf = 0;
                      int32x4_t v55 = "Espresso::ANERuntimeEngine::allocate_analytics_buffers: IOSurfaceRef could not be allocated";
                      goto LABEL_72;
                    }
LABEL_66:

                    goto LABEL_67;
                  }
                  std::string::size_type v50 = [MEMORY[0x1E4F4E048] objectWithIOSurface:v46];
                  if (!v50)
                  {
                    uint64_t v54 = Espresso::espresso_os_log_subsystem(0, v49);
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)std::string buf = 0;
                      int32x4_t v55 = "Espresso::ANERuntimeEngine::allocate_analytics_buffers: _ANEIOSurfaceObject could not be allocated";
LABEL_72:
                      _os_log_debug_impl(&dword_1920CB000, v54, OS_LOG_TYPE_DEBUG, v55, buf, 2u);
                    }
                    goto LABEL_66;
                  }
                  int v51 = [MEMORY[0x1E4F4E070] objectWithIOSurface:v50 statType:2];
                  long long v52 = (void *)*((void *)this + 26);
                  uint64_t v81 = v39;
                  int v77 = (uint8_t *)v51;
                  uint64_t v53 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v77 forKeys:&v81 count:1];
                  [v52 addEntriesFromDictionary:v53];
                }
              }
              uint64_t v35 = [obja countByEnumeratingWithState:&v73 objects:v82 count:16];
              if (v35) {
                continue;
              }
              break;
            }
          }
LABEL_67:
        }
      }
    }
  }
  if (v72) {
    nitro::nitro_function::nitro_function(v72);
  }
}

void sub_1921B9474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    nitro::nitro_function::nitro_function(a22);
  }
  _Unwind_Resume(a1);
}

void Espresso::ANERuntimeEngine::compiler::build(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v6 = v5, (v7 = *(Espresso::net **)(v2 + 8)) == 0))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  Espresso::ANERuntimeEngine::compiler::reset((Espresso::ANERuntimeEngine::compiler *)v2);
  Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets((Espresso::ANECompilerEngine::ane_mutable_weights_helper *)(v2 + 312), v7);
  Espresso::net_compiler_segment_based::build((void *)v2, a2);
  Espresso::ANERuntimeEngine::compiler::force_allocate_blobs((Espresso::ANERuntimeEngine::compiler *)v2);
  uint64_t v8 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v8 || (v9 = std::__shared_weak_count::lock(v8)) == 0 || (char v10 = v9, (v11 = *(Espresso::net **)(v2 + 8)) == 0))
  {
    uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Inconsistent state");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL should_do_ane_blob_aliasing = Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing((void *)v2, *(Espresso::net **)(v2 + 8));
  if ((should_do_ane_blob_aliasing | Espresso::net::is_fallback_gpu(v11)))
  {
    uint64_t v55 = v2;
    uint64_t v56 = v10;
    int32x4_t v57 = v6;
    memset(v64, 0, sizeof(v64));
    int v65 = 1065353216;
    Espresso::net::get_producers_of_blobs(v11, (uint64_t)__p);
    unint64_t v62 = 1;
    uint64_t v13 = *((void *)v11 + 4);
    if ((unint64_t)(*((void *)v11 + 5) - v13) < 0x11) {
      goto LABEL_70;
    }
    uint64_t v59 = (uint64_t)v11 + 96;
    uint64_t v60 = (uint64_t)v11 + 56;
    unint64_t v14 = 1;
    long long v58 = v11;
    while (1)
    {
      *(void *)std::string buf = &v62;
      BOOL v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v60, &v62, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      uint64_t v16 = v62 - 1;
      uint64_t v17 = *((void *)v11 + 4);
      *(void *)std::string buf = v62 - 1;
      char v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v59, v62 - 1, buf);
      uint64_t v20 = (uint64_t *)(v13 + 16 * v14);
      char v21 = (uint64_t *)(v17 + 16 * v16);
      uint64_t v22 = *v20;
      int32x4_t v23 = *(void **)(*v20 + 64);
      uint64_t v24 = *v21;
      uint64_t v25 = *(void **)(*v21 + 64);
      if (v23[1] == v25[1]) {
        break;
      }
LABEL_22:
      int32x4_t v61 = v21;
      int32x4_t v29 = v20;
      int32x4_t v30 = (unsigned __int8 *)v15[3];
      int32x4_t v31 = (unsigned __int8 *)v15[4];
      if (v30 == v31)
      {
LABEL_49:
        uint64_t v43 = *v29;
        uint64_t v44 = *(const void **)(*v29 + 64);
        if (v44
        {
          IOSurfaceRef v46 = *(std::__shared_weak_count **)(v43 + 72);
          if (!v46)
          {
            v45[345] = 1;
            goto LABEL_65;
          }
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          v45[345] = 1;
        }
        else
        {
          uint64_t v47 = *v61;
          uint64_t v48 = *(Espresso **)(*v61 + 64);
          if (!v48
          {
            std::string::size_type v50 = Espresso::espresso_os_log_subsystem(v48, v18);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
            {
              int v51 = (void *)(*v29 + 16);
              if (*(char *)(*v29 + 39) < 0) {
                int v51 = (void *)*v51;
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v51;
              _os_log_debug_impl(&dword_1920CB000, v50, OS_LOG_TYPE_DEBUG, "layer %s: did not find input from previous layer; neither this kernel nor the one preceding is a context transfer.",
                buf,
                0xCu);
            }

            goto LABEL_65;
          }
          IOSurfaceRef v46 = *(std::__shared_weak_count **)(v47 + 72);
          if (!v46)
          {
            *((unsigned char *)v48 + 346) = 1;
            goto LABEL_65;
          }
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
          *((unsigned char *)v48 + 346) = 1;
        }
        uint64_t v49 = v46;
LABEL_58:
        nitro::nitro_function::nitro_function(v49);
        goto LABEL_65;
      }
      char v32 = 0;
      uint64_t v34 = v19[3];
      uint64_t v33 = v19[4];
      do
      {
LABEL_24:
        if (v34 == v33) {
          goto LABEL_47;
        }
        uint64_t v35 = v30[23];
        size_t v36 = *((void *)v30 + 1);
        if ((v35 & 0x80u) == 0) {
          uint64_t v37 = v30[23];
        }
        else {
          uint64_t v37 = *((void *)v30 + 1);
        }
        uint64_t v38 = v34;
        while (1)
        {
          uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
          int v40 = (char)v39;
          if ((v39 & 0x80u) != 0) {
            uint64_t v39 = *(void *)(v38 + 8);
          }
          if (v37 != v39) {
            goto LABEL_42;
          }
          uint64_t v18 = v40 >= 0 ? (const char *)v38 : *(const char **)v38;
          if ((v35 & 0x80) != 0) {
            break;
          }
          if (!v35) {
            goto LABEL_46;
          }
          int8x16_t v41 = v30;
          uint64_t v42 = v35;
          while (*v41 == *(unsigned __int8 *)v18)
          {
            ++v41;
            ++v18;
            if (!--v42)
            {
              v30 += 24;
              char v32 = 1;
              if (v30 != v31) {
                goto LABEL_24;
              }
              goto LABEL_65;
            }
          }
LABEL_42:
          v38 += 24;
          if (v38 == v33) {
            goto LABEL_47;
          }
        }
        if (memcmp(*(const void **)v30, v18, v36)) {
          goto LABEL_42;
        }
LABEL_46:
        char v32 = 1;
LABEL_47:
        v30 += 24;
      }
      while (v30 != v31);
      if ((v32 & 1) == 0) {
        goto LABEL_49;
      }
LABEL_65:
      unint64_t v14 = v62 + 1;
      unint64_t v62 = v14;
      uint64_t v11 = v58;
      uint64_t v13 = *((void *)v58 + 4);
      if (v14 >= (*((void *)v58 + 5) - v13) >> 4)
      {
LABEL_70:
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p[2]);
        long long v52 = __p[0];
        __p[0] = 0;
        uint64_t v6 = v57;
        if (v52) {
          operator delete(v52);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v64);
        uint64_t v2 = v55;
        char v10 = v56;
        goto LABEL_73;
      }
    }
    if (v26)
    {
      int32x4_t v27 = *(std::__shared_weak_count **)(v22 + 72);
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v24 = *v21;
        uint64_t v25 = *(void **)(*v21 + 64);
        if (!v25)
        {
LABEL_21:
          nitro::nitro_function::nitro_function(v27);
          goto LABEL_22;
        }
      }
    }
    else
    {
      int32x4_t v27 = 0;
    }
    {
      int32x4_t v28 = *(std::__shared_weak_count **)(v24 + 72);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v28);
      }
    }
    else if (!v26)
    {
      if (!v27) {
        goto LABEL_65;
      }
      uint64_t v49 = v27;
      goto LABEL_58;
    }
    if (!v27) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_73:
  nitro::nitro_function::nitro_function(v10);
  *(unsigned char *)(v2 + 288) = 1;

  nitro::nitro_function::nitro_function(v6);
}

void sub_1921B9C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  if (a6) {
    nitro::nitro_function::nitro_function(a6);
  }
  if (a7) {
    nitro::nitro_function::nitro_function(a7);
  }
  _Unwind_Resume(a1);
}

BOOL Espresso::ANERuntimeEngine::compiler::should_do_ane_blob_aliasing(void *a1, Espresso::net *this)
{
  if (!this) {
    return 0;
  }
  BOOL result = Espresso::net::is_fallback_gpu(this);
  if (result) {
    return 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[5] - a1[4]) >> 3) >= 4 && *(_DWORD *)(a1[13] + 144) > 1;
  }
  return result;
}

BOOL Espresso::net::is_fallback_gpu(Espresso::net *this)
{
  uint64_t v1 = *((void *)this + 157);
  if (!v1) {
    return 0;
  }
  if ((***(unsigned int (****)(void))(v1 + 8))(*(void *)(v1 + 8)) == 50000
    || (***(unsigned int (****)(void))(*((void *)this + 157) + 8))(*(void *)(*((void *)this + 157)
                                                                                              + 8)) == 20000)
  {
    return 1;
  }
  return (***(unsigned int (****)(void))(*((void *)this + 157) + 8))(*(void *)(*((void *)this + 157)
                                                                                                + 8)) == 90000;
}

void Espresso::net_compiler_segment_based::build(void *a1, uint64_t a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3), (uint64_t v6 = v5) == 0) || (v7 = a1[1]) == 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v8 = *(void *)(v7 + 1256);
  if (v8 && *(unsigned char *)(v8 + 124))
  {
    v18[0] = a1[1];
    v18[1] = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    Espresso::net_compiler_segment_based::identify_segments_two_compilers((uint64_t)a1, v18);
    nitro::nitro_function::nitro_function(v6);
    uint64_t v9 = a1[4];
    if (a1[5] != v9)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t))(*a1 + 72))(a1, a2, v11++, v9 + v10);
        uint64_t v9 = a1[4];
        v10 += 120;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((a1[5] - v9) >> 3) > v11);
    }
  }
  else
  {
    uint64_t v16 = a1[1];
    uint64_t v17 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    (*(void (**)(void *, uint64_t *))(*a1 + 88))(a1, &v16);
    if (v17) {
      nitro::nitro_function::nitro_function(v17);
    }
    uint64_t v12 = a1[4];
    if (a1[5] != v12)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t))(*a1 + 72))(a1, a2, v14++, v12 + v13);
        uint64_t v12 = a1[4];
        v13 += 120;
      }
      while (0xEEEEEEEEEEEEEEEFLL * ((a1[5] - v12) >> 3) > v14);
    }
  }
  nitro::nitro_function::nitro_function(v6);
}

void sub_1921BA010(_Unwind_Exception *a1)
{
  nitro::nitro_function::nitro_function(v1);
  nitro::nitro_function::nitro_function(v1);
  _Unwind_Resume(a1);
}

void Espresso::net_compiler_segment_based::identify_segments(int64x2_t *a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[2].i64[0];
  uint64_t v66 = a1 + 2;
  for (uint64_t i = a1[2].i64[1]; i != v3; std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i))
    i -= 120;
  v2[2].i64[1] = v3;
  char v5 = (void *)*a2;
  if (*(unsigned char *)(*(void *)(*a2 + 16) + 124))
  {
    uint64_t v6 = v5[157];
    if (v6)
    {
      if (*(unsigned char *)(v6 + 124))
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Two compilers present");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
  }
  uint64_t v7 = v5[4];
  if (v5[5] != v7)
  {
    uint64_t v8 = 0;
    LODWORD(v9) = 0;
    unint64_t v10 = 0;
    int v65 = v2;
    while (1)
    {
      uint64_t v11 = *(void *)(v7 + v8);
      uint64_t v13 = *(void **)(v11 + 64);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 72);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v13) {
        break;
      }
      if (v12) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15) {
        goto LABEL_18;
      }
      BOOL v16 = 1;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      nitro::nitro_function::nitro_function(v12);
LABEL_19:
      uint64_t v17 = *a2;
      BOOL v18 = v13[1] == *(void *)(*a2 + 16);
      if (v12) {
        BOOL v21 = v19 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        if (v19) {
          BOOL v16 = 1;
        }
      }
      else
      {
        BOOL v16 = 1;
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        nitro::nitro_function::nitro_function(v12);
        uint64_t v17 = *a2;
      }
      uint64_t v22 = *(void *)(v17 + 32);
      uint64_t v23 = *(void *)(v17 + 40);
      if (((v9 | !v18) & 1) == 0)
      {
        *(_OWORD *)&uint8_t buf[16] = 0u;
        long long v73 = 0u;
        memset(v75, 0, sizeof(v75));
        int v74 = 1065353216;
        int v76 = 1065353216;
        char v78 = 0;
        uint64_t v79 = 0;
        std::string __p = 0;
        *(void *)std::string buf = v10 + v16;
        *(void *)&buf[8] = *(void *)buf + 1;
        unint64_t v24 = v65[2].u64[1];
        if (v24 >= v65[3].i64[0])
        {
          uint64_t v25 = std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(v66, (uint64_t)buf);
        }
        else
        {
          std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>((_OWORD *)v65[2].i64[1], (uint64_t)buf);
          uint64_t v25 = v24 + 120;
          v65[2].i64[1] = v24 + 120;
        }
        v65[2].i64[1] = v25;
        if (__p)
        {
          char v78 = __p;
          operator delete(__p);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v75);
        char v19 = (Espresso *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&buf[16]);
        LODWORD(v9) = 1;
      }
      uint64_t v26 = ((v23 - v22) >> 4) - 1;
      if (v9)
      {
        int32x4_t v27 = a2;
        if (!v18 || v10 == v26)
        {
          BOOL v28 = v10 == v26;
          if (!v18) {
            BOOL v28 = v16;
          }
          if (!v28)
          {
            int32x4_t v29 = Espresso::espresso_os_log_subsystem(v19, v20);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v16;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v18;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v10 == v26;
              *(_WORD *)&buf[20] = 2048;
              *(void *)&unsigned char buf[22] = v10;
              _os_log_error_impl(&dword_1920CB000, v29, OS_LOG_TYPE_ERROR, "identify_segments, logic error: is_context_transfer=%d is_default_context_layer=%d is_last_layer=%d ilayer=%zu", buf, 0x1Eu);
            }
          }
          uint64_t v30 = v65[2].i64[1];
          unint64_t v32 = *(void *)(v30 - 120);
          int32x4_t v31 = (unint64_t *)(v30 - 120);
          unint64_t v33 = v10 + !v16;
          v31[1] = v33;
          if (v33 >= v32)
          {
            uint64_t v9 = (std::__shared_weak_count *)a2[1];
            v67[0] = *a2;
            v67[1] = v9;
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            Espresso::net_compiler_segment_based::identify_segment_input_output((uint64_t)v19, (uint64_t)v67, v31);
            if (v9)
            {
              nitro::nitro_function::nitro_function(v9);
              LODWORD(v9) = 0;
            }
          }
          else
          {
            std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100]((uint64_t)v31);
            LODWORD(v9) = 0;
            v65[2].i64[1] = (uint64_t)v31;
          }
        }
      }
      else
      {
        int32x4_t v27 = a2;
      }
      if (v12) {
        nitro::nitro_function::nitro_function(v12);
      }
      ++v10;
      char v5 = (void *)*v27;
      uint64_t v7 = *(void *)(*v27 + 32);
      v8 += 16;
      uint64_t v2 = v65;
      if (v10 >= (*(void *)(*v27 + 40) - v7) >> 4)
      {
        uint64_t v3 = v65[2].i64[1];
        goto LABEL_52;
      }
    }
    unint64_t v14 = 0;
LABEL_18:
    BOOL v16 = v14 != 0;
    goto LABEL_19;
  }
LABEL_52:
  uint64_t v34 = v66->i64[0];
  if (v3 != v66->i64[0])
  {
    unint64_t v35 = 0;
    do
    {
      size_t v36 = std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&v2[3].i64[1], *(void *)(v34 + 120 * v35), (uint64_t *)(v34 + 120 * v35));
      unint64_t v36[5] = v35;
      uint64_t v38 = Espresso::espresso_os_log_subsystem((Espresso *)v36, v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v47 = (uint64_t *)(v66->i64[0] + 120 * v35);
        uint64_t v49 = *v47;
        uint64_t v48 = v47[1];
        *(_DWORD *)std::string buf = 134218496;
        *(void *)&uint8_t buf[4] = v35;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v49;
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v48;
        _os_log_debug_impl(&dword_1920CB000, v38, OS_LOG_TYPE_DEBUG, "identify_segments: isegment %zu (%zu %zu)", buf, 0x20u);
      }

      uint64_t v34 = v66->i64[0];
      int8x16_t v41 = *(uint64_t **)(v66->i64[0] + 120 * v35 + 32);
      if (v41)
      {
        do
        {
          if (*((char *)v41 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v41[2], v41[3]);
          }
          else
          {
            *(_OWORD *)std::string buf = *((_OWORD *)v41 + 1);
            *(void *)&uint8_t buf[16] = v41[4];
          }
          uint64_t v42 = Espresso::espresso_os_log_subsystem(v39, v40);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0) {
              uint64_t v43 = buf;
            }
            else {
              uint64_t v43 = *(unsigned char **)buf;
            }
            *(_DWORD *)__int16 v68 = 134218242;
            unint64_t v69 = v35;
            __int16 v70 = 2080;
            BOOL v71 = v43;
            _os_log_debug_impl(&dword_1920CB000, v42, OS_LOG_TYPE_DEBUG, "\tinput %zu %s", v68, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          int8x16_t v41 = (uint64_t *)*v41;
        }
        while (v41);
        uint64_t v34 = v66->i64[0];
      }
      uint64_t v44 = *(uint64_t **)(v34 + 120 * v35 + 72);
      if (v44)
      {
        do
        {
          if (*((char *)v44 + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v44[2], v44[3]);
          }
          else
          {
            *(_OWORD *)std::string buf = *((_OWORD *)v44 + 1);
            *(void *)&uint8_t buf[16] = v44[4];
          }
          long long v45 = Espresso::espresso_os_log_subsystem(v39, v40);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            if (buf[23] >= 0) {
              IOSurfaceRef v46 = buf;
            }
            else {
              IOSurfaceRef v46 = *(unsigned char **)buf;
            }
            *(_DWORD *)__int16 v68 = 134218242;
            unint64_t v69 = v35;
            __int16 v70 = 2080;
            BOOL v71 = v46;
            _os_log_debug_impl(&dword_1920CB000, v45, OS_LOG_TYPE_DEBUG, "\toutput %zu %s", v68, 0x16u);
          }

          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v44 = (uint64_t *)*v44;
        }
        while (v44);
        uint64_t v34 = v66->i64[0];
      }
      ++v35;
    }
    while (v35 < 0xEEEEEEEEEEEEEEEFLL * ((v2[2].i64[1] - v34) >> 3));
    char v5 = (void *)*a2;
  }
  std::vector<int>::resize((std::vector<int> *)&v2[5], (uint64_t)(v5[5] - v5[4]) >> 4);
  uint64_t v50 = *(void *)(*a2 + 40) - *(void *)(*a2 + 32);
  if (v50)
  {
    unint64_t v51 = 0;
    unint64_t v52 = v50 >> 4;
    uint64_t v55 = (int64x2_t *)v2[4].i64[0];
    uint64_t v54 = v2 + 4;
    uint64_t v53 = v55;
    if (v52 <= 1) {
      unint64_t v52 = 1;
    }
    uint64_t v56 = v54[1].i64[0];
    do
    {
      if (!v53) {
        goto LABEL_99;
      }
      int32x4_t v57 = v54;
      long long v58 = v53;
      do
      {
        unint64_t v59 = v58[2].u64[0];
        BOOL v60 = v59 >= v51;
        if (v59 >= v51) {
          int32x4_t v61 = (int64x2_t **)v58;
        }
        else {
          int32x4_t v61 = (int64x2_t **)&v58->i64[1];
        }
        if (v60) {
          int32x4_t v57 = v58;
        }
        long long v58 = *v61;
      }
      while (*v61);
      if (v57 != v54 && v51 >= v57[2].i64[0]) {
        int v62 = v57[2].i32[2];
      }
      else {
LABEL_99:
      }
        int v62 = -1;
      *(_DWORD *)(v56 + 4 * v51++) = v62;
    }
    while (v51 != v52);
  }
}

void sub_1921BA7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::net_compiler_segment_based::segment_t>::__push_back_slow_path<Espresso::net_compiler_segment_based::segment_t const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  BOOL v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  BOOL v18 = v7;
  v19.i64[0] = (uint64_t)&v7[120 * v3];
  uint64_t v20 = &v7[120 * v6];
  std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(v19.i64[0], a2);
  uint64_t v8 = v19.i64[0];
  uint64_t v9 = v19.i64[0] + 120;
  v19.i64[1] = v19.i64[0] + 120;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v15 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      *(_OWORD *)(v8 + v12 - 120) = *(_OWORD *)(v10 + v12 - 120);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v8 + v12 - 104, (uint64_t *)(v10 + v12 - 104));
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__hash_table(v8 + v12 - 64, (uint64_t *)(v10 + v12 - 64));
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v12 -= 120;
    }
    while (v10 + v12 != v11);
    v8 += v12;
    int64x2_t v15 = *a1;
    uint64_t v9 = v19.i64[1];
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v19 = v15;
  BOOL v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  uint64_t v20 = v16;
  BOOL v18 = (char *)v15.i64[0];
  std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_1921BA9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocator<Espresso::net_compiler_segment_based::segment_t>::construct[abi:ne180100]<Espresso::net_compiler_segment_based::segment_t,Espresso::net_compiler_segment_based::segment_t const&>(_OWORD *a1, uint64_t a2)
{
  unint64_t v3 = a1;
  *a1 = *(_OWORD *)a2;
  std::unordered_set<std::string>::unordered_set((uint64_t)(a1 + 1), a2 + 16);
  std::unordered_set<std::string>::unordered_set((uint64_t)(v3 + 7), a2 + 56);
  v3[12] = 0;
  v3[13] = 0;
  v3 += 12;
  v3[2] = 0;
  return std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(v3, *(const void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
}

void sub_1921BAA40(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v4 = result;
    if (a4 >> 62) {
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a4);
    uint64_t v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1921BAAE4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<Espresso::net_compiler_segment_based::segment_t>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](i - 120);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Espresso::ANECompilerEngine::ane_mutable_weights_helper::compute_mutable_weight_offsets(Espresso::ANECompilerEngine::ane_mutable_weights_helper *this, Espresso::net *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "hint_no_mutable_weights");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)v21, (uint64_t)__p, &v23);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  char v4 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v23.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_12;
    }
    char v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_12;
    }
    char v5 = &v23;
  }
  if (v5->__r_.__value_.__s.__data_[0] == 49)
  {
    *((void *)this + 3) = 0;
    *(unsigned char *)this = 0;
    goto LABEL_30;
  }
LABEL_12:
  uint64_t v6 = *((void *)a2 + 5) - *((void *)a2 + 4);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    if ((unint64_t)(v6 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v6 >> 4;
    }
    do
    {
      unint64_t v10 = (uint64_t *)(*((void *)a2 + 4) + v7);
      uint64_t v12 = *v10;
      uint64_t v11 = (std::__shared_weak_count *)v10[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(const void **)(v12 + 64);
      if (v13)
      {
        if (v14)
        {
          int64x2_t v15 = v14;
          BOOL v16 = *(std::__shared_weak_count **)(v12 + 72);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v17 = (*(uint64_t (**)(unsigned char *, Espresso::net *, uint64_t))(*(void *)v14 + 96))(v14, a2, v8);
          unint64_t v18 = v17;
          if (v17)
          {
            *(unsigned char *)this = 1;
            v15[56] = 1;
            *((void *)v15 + 4) = *((void *)this + 1);
            *((void *)v15 + 5) = 0;
            *((void *)v15 + 6) = v17;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 32, (uint64_t)(v15 + 8), (uint64_t)(v15 + 8));
            *(int64x2_t *)((char *)this + 8) = vaddq_s64(*(int64x2_t *)((char *)this + 8), vdupq_n_s64(v18));
            ++*((void *)this + 3);
          }
          if (v16) {
            nitro::nitro_function::nitro_function(v16);
          }
        }
      }
      if (v11) {
        nitro::nitro_function::nitro_function(v11);
      }
      ++v8;
      v7 += 16;
    }
    while (v9 != v8);
    char v4 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
LABEL_30:
  if (v4 < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}